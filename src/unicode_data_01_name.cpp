#include "unicode_data/unicode_data.h"

#include <string>
#include <unordered_map>

char const*
unicode_codepoint_name(
        unicode_codepoint code)
{
    static std::unordered_map<unicode_codepoint, std::string> data;
    if (data.empty()) {
        data.insert(std::make_pair(0x0000,"<control>"));
        data.insert(std::make_pair(0x0001,"<control>"));
        data.insert(std::make_pair(0x0002,"<control>"));
        data.insert(std::make_pair(0x0003,"<control>"));
        data.insert(std::make_pair(0x0004,"<control>"));
        data.insert(std::make_pair(0x0005,"<control>"));
        data.insert(std::make_pair(0x0006,"<control>"));
        data.insert(std::make_pair(0x0007,"<control>"));
        data.insert(std::make_pair(0x0008,"<control>"));
        data.insert(std::make_pair(0x0009,"<control>"));
        data.insert(std::make_pair(0x000a,"<control>"));
        data.insert(std::make_pair(0x000b,"<control>"));
        data.insert(std::make_pair(0x000c,"<control>"));
        data.insert(std::make_pair(0x000d,"<control>"));
        data.insert(std::make_pair(0x000e,"<control>"));
        data.insert(std::make_pair(0x000f,"<control>"));
        data.insert(std::make_pair(0x0010,"<control>"));
        data.insert(std::make_pair(0x0011,"<control>"));
        data.insert(std::make_pair(0x0012,"<control>"));
        data.insert(std::make_pair(0x0013,"<control>"));
        data.insert(std::make_pair(0x0014,"<control>"));
        data.insert(std::make_pair(0x0015,"<control>"));
        data.insert(std::make_pair(0x0016,"<control>"));
        data.insert(std::make_pair(0x0017,"<control>"));
        data.insert(std::make_pair(0x0018,"<control>"));
        data.insert(std::make_pair(0x0019,"<control>"));
        data.insert(std::make_pair(0x001a,"<control>"));
        data.insert(std::make_pair(0x001b,"<control>"));
        data.insert(std::make_pair(0x001c,"<control>"));
        data.insert(std::make_pair(0x001d,"<control>"));
        data.insert(std::make_pair(0x001e,"<control>"));
        data.insert(std::make_pair(0x001f,"<control>"));
        data.insert(std::make_pair(0x0020,"SPACE"));
        data.insert(std::make_pair(0x0021,"EXCLAMATION MARK"));
        data.insert(std::make_pair(0x0022,"QUOTATION MARK"));
        data.insert(std::make_pair(0x0023,"NUMBER SIGN"));
        data.insert(std::make_pair(0x0024,"DOLLAR SIGN"));
        data.insert(std::make_pair(0x0025,"PERCENT SIGN"));
        data.insert(std::make_pair(0x0026,"AMPERSAND"));
        data.insert(std::make_pair(0x0027,"APOSTROPHE"));
        data.insert(std::make_pair(0x0028,"LEFT PARENTHESIS"));
        data.insert(std::make_pair(0x0029,"RIGHT PARENTHESIS"));
        data.insert(std::make_pair(0x002a,"ASTERISK"));
        data.insert(std::make_pair(0x002b,"PLUS SIGN"));
        data.insert(std::make_pair(0x002c,"COMMA"));
        data.insert(std::make_pair(0x002d,"HYPHEN-MINUS"));
        data.insert(std::make_pair(0x002e,"FULL STOP"));
        data.insert(std::make_pair(0x002f,"SOLIDUS"));
        data.insert(std::make_pair(0x0030,"DIGIT ZERO"));
        data.insert(std::make_pair(0x0031,"DIGIT ONE"));
        data.insert(std::make_pair(0x0032,"DIGIT TWO"));
        data.insert(std::make_pair(0x0033,"DIGIT THREE"));
        data.insert(std::make_pair(0x0034,"DIGIT FOUR"));
        data.insert(std::make_pair(0x0035,"DIGIT FIVE"));
        data.insert(std::make_pair(0x0036,"DIGIT SIX"));
        data.insert(std::make_pair(0x0037,"DIGIT SEVEN"));
        data.insert(std::make_pair(0x0038,"DIGIT EIGHT"));
        data.insert(std::make_pair(0x0039,"DIGIT NINE"));
        data.insert(std::make_pair(0x003a,"COLON"));
        data.insert(std::make_pair(0x003b,"SEMICOLON"));
        data.insert(std::make_pair(0x003c,"LESS-THAN SIGN"));
        data.insert(std::make_pair(0x003d,"EQUALS SIGN"));
        data.insert(std::make_pair(0x003e,"GREATER-THAN SIGN"));
        data.insert(std::make_pair(0x003f,"QUESTION MARK"));
        data.insert(std::make_pair(0x0040,"COMMERCIAL AT"));
        data.insert(std::make_pair(0x0041,"LATIN CAPITAL LETTER A"));
        data.insert(std::make_pair(0x0042,"LATIN CAPITAL LETTER B"));
        data.insert(std::make_pair(0x0043,"LATIN CAPITAL LETTER C"));
        data.insert(std::make_pair(0x0044,"LATIN CAPITAL LETTER D"));
        data.insert(std::make_pair(0x0045,"LATIN CAPITAL LETTER E"));
        data.insert(std::make_pair(0x0046,"LATIN CAPITAL LETTER F"));
        data.insert(std::make_pair(0x0047,"LATIN CAPITAL LETTER G"));
        data.insert(std::make_pair(0x0048,"LATIN CAPITAL LETTER H"));
        data.insert(std::make_pair(0x0049,"LATIN CAPITAL LETTER I"));
        data.insert(std::make_pair(0x004a,"LATIN CAPITAL LETTER J"));
        data.insert(std::make_pair(0x004b,"LATIN CAPITAL LETTER K"));
        data.insert(std::make_pair(0x004c,"LATIN CAPITAL LETTER L"));
        data.insert(std::make_pair(0x004d,"LATIN CAPITAL LETTER M"));
        data.insert(std::make_pair(0x004e,"LATIN CAPITAL LETTER N"));
        data.insert(std::make_pair(0x004f,"LATIN CAPITAL LETTER O"));
        data.insert(std::make_pair(0x0050,"LATIN CAPITAL LETTER P"));
        data.insert(std::make_pair(0x0051,"LATIN CAPITAL LETTER Q"));
        data.insert(std::make_pair(0x0052,"LATIN CAPITAL LETTER R"));
        data.insert(std::make_pair(0x0053,"LATIN CAPITAL LETTER S"));
        data.insert(std::make_pair(0x0054,"LATIN CAPITAL LETTER T"));
        data.insert(std::make_pair(0x0055,"LATIN CAPITAL LETTER U"));
        data.insert(std::make_pair(0x0056,"LATIN CAPITAL LETTER V"));
        data.insert(std::make_pair(0x0057,"LATIN CAPITAL LETTER W"));
        data.insert(std::make_pair(0x0058,"LATIN CAPITAL LETTER X"));
        data.insert(std::make_pair(0x0059,"LATIN CAPITAL LETTER Y"));
        data.insert(std::make_pair(0x005a,"LATIN CAPITAL LETTER Z"));
        data.insert(std::make_pair(0x005b,"LEFT SQUARE BRACKET"));
        data.insert(std::make_pair(0x005c,"REVERSE SOLIDUS"));
        data.insert(std::make_pair(0x005d,"RIGHT SQUARE BRACKET"));
        data.insert(std::make_pair(0x005e,"CIRCUMFLEX ACCENT"));
        data.insert(std::make_pair(0x005f,"LOW LINE"));
        data.insert(std::make_pair(0x0060,"GRAVE ACCENT"));
        data.insert(std::make_pair(0x0061,"LATIN SMALL LETTER A"));
        data.insert(std::make_pair(0x0062,"LATIN SMALL LETTER B"));
        data.insert(std::make_pair(0x0063,"LATIN SMALL LETTER C"));
        data.insert(std::make_pair(0x0064,"LATIN SMALL LETTER D"));
        data.insert(std::make_pair(0x0065,"LATIN SMALL LETTER E"));
        data.insert(std::make_pair(0x0066,"LATIN SMALL LETTER F"));
        data.insert(std::make_pair(0x0067,"LATIN SMALL LETTER G"));
        data.insert(std::make_pair(0x0068,"LATIN SMALL LETTER H"));
        data.insert(std::make_pair(0x0069,"LATIN SMALL LETTER I"));
        data.insert(std::make_pair(0x006a,"LATIN SMALL LETTER J"));
        data.insert(std::make_pair(0x006b,"LATIN SMALL LETTER K"));
        data.insert(std::make_pair(0x006c,"LATIN SMALL LETTER L"));
        data.insert(std::make_pair(0x006d,"LATIN SMALL LETTER M"));
        data.insert(std::make_pair(0x006e,"LATIN SMALL LETTER N"));
        data.insert(std::make_pair(0x006f,"LATIN SMALL LETTER O"));
        data.insert(std::make_pair(0x0070,"LATIN SMALL LETTER P"));
        data.insert(std::make_pair(0x0071,"LATIN SMALL LETTER Q"));
        data.insert(std::make_pair(0x0072,"LATIN SMALL LETTER R"));
        data.insert(std::make_pair(0x0073,"LATIN SMALL LETTER S"));
        data.insert(std::make_pair(0x0074,"LATIN SMALL LETTER T"));
        data.insert(std::make_pair(0x0075,"LATIN SMALL LETTER U"));
        data.insert(std::make_pair(0x0076,"LATIN SMALL LETTER V"));
        data.insert(std::make_pair(0x0077,"LATIN SMALL LETTER W"));
        data.insert(std::make_pair(0x0078,"LATIN SMALL LETTER X"));
        data.insert(std::make_pair(0x0079,"LATIN SMALL LETTER Y"));
        data.insert(std::make_pair(0x007a,"LATIN SMALL LETTER Z"));
        data.insert(std::make_pair(0x007b,"LEFT CURLY BRACKET"));
        data.insert(std::make_pair(0x007c,"VERTICAL LINE"));
        data.insert(std::make_pair(0x007d,"RIGHT CURLY BRACKET"));
        data.insert(std::make_pair(0x007e,"TILDE"));
        data.insert(std::make_pair(0x007f,"<control>"));
        data.insert(std::make_pair(0x0080,"<control>"));
        data.insert(std::make_pair(0x0081,"<control>"));
        data.insert(std::make_pair(0x0082,"<control>"));
        data.insert(std::make_pair(0x0083,"<control>"));
        data.insert(std::make_pair(0x0084,"<control>"));
        data.insert(std::make_pair(0x0085,"<control>"));
        data.insert(std::make_pair(0x0086,"<control>"));
        data.insert(std::make_pair(0x0087,"<control>"));
        data.insert(std::make_pair(0x0088,"<control>"));
        data.insert(std::make_pair(0x0089,"<control>"));
        data.insert(std::make_pair(0x008a,"<control>"));
        data.insert(std::make_pair(0x008b,"<control>"));
        data.insert(std::make_pair(0x008c,"<control>"));
        data.insert(std::make_pair(0x008d,"<control>"));
        data.insert(std::make_pair(0x008e,"<control>"));
        data.insert(std::make_pair(0x008f,"<control>"));
        data.insert(std::make_pair(0x0090,"<control>"));
        data.insert(std::make_pair(0x0091,"<control>"));
        data.insert(std::make_pair(0x0092,"<control>"));
        data.insert(std::make_pair(0x0093,"<control>"));
        data.insert(std::make_pair(0x0094,"<control>"));
        data.insert(std::make_pair(0x0095,"<control>"));
        data.insert(std::make_pair(0x0096,"<control>"));
        data.insert(std::make_pair(0x0097,"<control>"));
        data.insert(std::make_pair(0x0098,"<control>"));
        data.insert(std::make_pair(0x0099,"<control>"));
        data.insert(std::make_pair(0x009a,"<control>"));
        data.insert(std::make_pair(0x009b,"<control>"));
        data.insert(std::make_pair(0x009c,"<control>"));
        data.insert(std::make_pair(0x009d,"<control>"));
        data.insert(std::make_pair(0x009e,"<control>"));
        data.insert(std::make_pair(0x009f,"<control>"));
        data.insert(std::make_pair(0x00a0,"NO-BREAK SPACE"));
        data.insert(std::make_pair(0x00a1,"INVERTED EXCLAMATION MARK"));
        data.insert(std::make_pair(0x00a2,"CENT SIGN"));
        data.insert(std::make_pair(0x00a3,"POUND SIGN"));
        data.insert(std::make_pair(0x00a4,"CURRENCY SIGN"));
        data.insert(std::make_pair(0x00a5,"YEN SIGN"));
        data.insert(std::make_pair(0x00a6,"BROKEN BAR"));
        data.insert(std::make_pair(0x00a7,"SECTION SIGN"));
        data.insert(std::make_pair(0x00a8,"DIAERESIS"));
        data.insert(std::make_pair(0x00a9,"COPYRIGHT SIGN"));
        data.insert(std::make_pair(0x00aa,"FEMININE ORDINAL INDICATOR"));
        data.insert(std::make_pair(0x00ab,"LEFT-POINTING DOUBLE ANGLE QUOTATION MARK"));
        data.insert(std::make_pair(0x00ac,"NOT SIGN"));
        data.insert(std::make_pair(0x00ad,"SOFT HYPHEN"));
        data.insert(std::make_pair(0x00ae,"REGISTERED SIGN"));
        data.insert(std::make_pair(0x00af,"MACRON"));
        data.insert(std::make_pair(0x00b0,"DEGREE SIGN"));
        data.insert(std::make_pair(0x00b1,"PLUS-MINUS SIGN"));
        data.insert(std::make_pair(0x00b2,"SUPERSCRIPT TWO"));
        data.insert(std::make_pair(0x00b3,"SUPERSCRIPT THREE"));
        data.insert(std::make_pair(0x00b4,"ACUTE ACCENT"));
        data.insert(std::make_pair(0x00b5,"MICRO SIGN"));
        data.insert(std::make_pair(0x00b6,"PILCROW SIGN"));
        data.insert(std::make_pair(0x00b7,"MIDDLE DOT"));
        data.insert(std::make_pair(0x00b8,"CEDILLA"));
        data.insert(std::make_pair(0x00b9,"SUPERSCRIPT ONE"));
        data.insert(std::make_pair(0x00ba,"MASCULINE ORDINAL INDICATOR"));
        data.insert(std::make_pair(0x00bb,"RIGHT-POINTING DOUBLE ANGLE QUOTATION MARK"));
        data.insert(std::make_pair(0x00bc,"VULGAR FRACTION ONE QUARTER"));
        data.insert(std::make_pair(0x00bd,"VULGAR FRACTION ONE HALF"));
        data.insert(std::make_pair(0x00be,"VULGAR FRACTION THREE QUARTERS"));
        data.insert(std::make_pair(0x00bf,"INVERTED QUESTION MARK"));
        data.insert(std::make_pair(0x00c0,"LATIN CAPITAL LETTER A WITH GRAVE"));
        data.insert(std::make_pair(0x00c1,"LATIN CAPITAL LETTER A WITH ACUTE"));
        data.insert(std::make_pair(0x00c2,"LATIN CAPITAL LETTER A WITH CIRCUMFLEX"));
        data.insert(std::make_pair(0x00c3,"LATIN CAPITAL LETTER A WITH TILDE"));
        data.insert(std::make_pair(0x00c4,"LATIN CAPITAL LETTER A WITH DIAERESIS"));
        data.insert(std::make_pair(0x00c5,"LATIN CAPITAL LETTER A WITH RING ABOVE"));
        data.insert(std::make_pair(0x00c6,"LATIN CAPITAL LETTER AE"));
        data.insert(std::make_pair(0x00c7,"LATIN CAPITAL LETTER C WITH CEDILLA"));
        data.insert(std::make_pair(0x00c8,"LATIN CAPITAL LETTER E WITH GRAVE"));
        data.insert(std::make_pair(0x00c9,"LATIN CAPITAL LETTER E WITH ACUTE"));
        data.insert(std::make_pair(0x00ca,"LATIN CAPITAL LETTER E WITH CIRCUMFLEX"));
        data.insert(std::make_pair(0x00cb,"LATIN CAPITAL LETTER E WITH DIAERESIS"));
        data.insert(std::make_pair(0x00cc,"LATIN CAPITAL LETTER I WITH GRAVE"));
        data.insert(std::make_pair(0x00cd,"LATIN CAPITAL LETTER I WITH ACUTE"));
        data.insert(std::make_pair(0x00ce,"LATIN CAPITAL LETTER I WITH CIRCUMFLEX"));
        data.insert(std::make_pair(0x00cf,"LATIN CAPITAL LETTER I WITH DIAERESIS"));
        data.insert(std::make_pair(0x00d0,"LATIN CAPITAL LETTER ETH"));
        data.insert(std::make_pair(0x00d1,"LATIN CAPITAL LETTER N WITH TILDE"));
        data.insert(std::make_pair(0x00d2,"LATIN CAPITAL LETTER O WITH GRAVE"));
        data.insert(std::make_pair(0x00d3,"LATIN CAPITAL LETTER O WITH ACUTE"));
        data.insert(std::make_pair(0x00d4,"LATIN CAPITAL LETTER O WITH CIRCUMFLEX"));
        data.insert(std::make_pair(0x00d5,"LATIN CAPITAL LETTER O WITH TILDE"));
        data.insert(std::make_pair(0x00d6,"LATIN CAPITAL LETTER O WITH DIAERESIS"));
        data.insert(std::make_pair(0x00d7,"MULTIPLICATION SIGN"));
        data.insert(std::make_pair(0x00d8,"LATIN CAPITAL LETTER O WITH STROKE"));
        data.insert(std::make_pair(0x00d9,"LATIN CAPITAL LETTER U WITH GRAVE"));
        data.insert(std::make_pair(0x00da,"LATIN CAPITAL LETTER U WITH ACUTE"));
        data.insert(std::make_pair(0x00db,"LATIN CAPITAL LETTER U WITH CIRCUMFLEX"));
        data.insert(std::make_pair(0x00dc,"LATIN CAPITAL LETTER U WITH DIAERESIS"));
        data.insert(std::make_pair(0x00dd,"LATIN CAPITAL LETTER Y WITH ACUTE"));
        data.insert(std::make_pair(0x00de,"LATIN CAPITAL LETTER THORN"));
        data.insert(std::make_pair(0x00df,"LATIN SMALL LETTER SHARP S"));
        data.insert(std::make_pair(0x00e0,"LATIN SMALL LETTER A WITH GRAVE"));
        data.insert(std::make_pair(0x00e1,"LATIN SMALL LETTER A WITH ACUTE"));
        data.insert(std::make_pair(0x00e2,"LATIN SMALL LETTER A WITH CIRCUMFLEX"));
        data.insert(std::make_pair(0x00e3,"LATIN SMALL LETTER A WITH TILDE"));
        data.insert(std::make_pair(0x00e4,"LATIN SMALL LETTER A WITH DIAERESIS"));
        data.insert(std::make_pair(0x00e5,"LATIN SMALL LETTER A WITH RING ABOVE"));
        data.insert(std::make_pair(0x00e6,"LATIN SMALL LETTER AE"));
        data.insert(std::make_pair(0x00e7,"LATIN SMALL LETTER C WITH CEDILLA"));
        data.insert(std::make_pair(0x00e8,"LATIN SMALL LETTER E WITH GRAVE"));
        data.insert(std::make_pair(0x00e9,"LATIN SMALL LETTER E WITH ACUTE"));
        data.insert(std::make_pair(0x00ea,"LATIN SMALL LETTER E WITH CIRCUMFLEX"));
        data.insert(std::make_pair(0x00eb,"LATIN SMALL LETTER E WITH DIAERESIS"));
        data.insert(std::make_pair(0x00ec,"LATIN SMALL LETTER I WITH GRAVE"));
        data.insert(std::make_pair(0x00ed,"LATIN SMALL LETTER I WITH ACUTE"));
        data.insert(std::make_pair(0x00ee,"LATIN SMALL LETTER I WITH CIRCUMFLEX"));
        data.insert(std::make_pair(0x00ef,"LATIN SMALL LETTER I WITH DIAERESIS"));
        data.insert(std::make_pair(0x00f0,"LATIN SMALL LETTER ETH"));
        data.insert(std::make_pair(0x00f1,"LATIN SMALL LETTER N WITH TILDE"));
        data.insert(std::make_pair(0x00f2,"LATIN SMALL LETTER O WITH GRAVE"));
        data.insert(std::make_pair(0x00f3,"LATIN SMALL LETTER O WITH ACUTE"));
        data.insert(std::make_pair(0x00f4,"LATIN SMALL LETTER O WITH CIRCUMFLEX"));
        data.insert(std::make_pair(0x00f5,"LATIN SMALL LETTER O WITH TILDE"));
        data.insert(std::make_pair(0x00f6,"LATIN SMALL LETTER O WITH DIAERESIS"));
        data.insert(std::make_pair(0x00f7,"DIVISION SIGN"));
        data.insert(std::make_pair(0x00f8,"LATIN SMALL LETTER O WITH STROKE"));
        data.insert(std::make_pair(0x00f9,"LATIN SMALL LETTER U WITH GRAVE"));
        data.insert(std::make_pair(0x00fa,"LATIN SMALL LETTER U WITH ACUTE"));
        data.insert(std::make_pair(0x00fb,"LATIN SMALL LETTER U WITH CIRCUMFLEX"));
        data.insert(std::make_pair(0x00fc,"LATIN SMALL LETTER U WITH DIAERESIS"));
        data.insert(std::make_pair(0x00fd,"LATIN SMALL LETTER Y WITH ACUTE"));
        data.insert(std::make_pair(0x00fe,"LATIN SMALL LETTER THORN"));
        data.insert(std::make_pair(0x00ff,"LATIN SMALL LETTER Y WITH DIAERESIS"));
        data.insert(std::make_pair(0x0100,"LATIN CAPITAL LETTER A WITH MACRON"));
        data.insert(std::make_pair(0x0101,"LATIN SMALL LETTER A WITH MACRON"));
        data.insert(std::make_pair(0x0102,"LATIN CAPITAL LETTER A WITH BREVE"));
        data.insert(std::make_pair(0x0103,"LATIN SMALL LETTER A WITH BREVE"));
        data.insert(std::make_pair(0x0104,"LATIN CAPITAL LETTER A WITH OGONEK"));
        data.insert(std::make_pair(0x0105,"LATIN SMALL LETTER A WITH OGONEK"));
        data.insert(std::make_pair(0x0106,"LATIN CAPITAL LETTER C WITH ACUTE"));
        data.insert(std::make_pair(0x0107,"LATIN SMALL LETTER C WITH ACUTE"));
        data.insert(std::make_pair(0x0108,"LATIN CAPITAL LETTER C WITH CIRCUMFLEX"));
        data.insert(std::make_pair(0x0109,"LATIN SMALL LETTER C WITH CIRCUMFLEX"));
        data.insert(std::make_pair(0x010a,"LATIN CAPITAL LETTER C WITH DOT ABOVE"));
        data.insert(std::make_pair(0x010b,"LATIN SMALL LETTER C WITH DOT ABOVE"));
        data.insert(std::make_pair(0x010c,"LATIN CAPITAL LETTER C WITH CARON"));
        data.insert(std::make_pair(0x010d,"LATIN SMALL LETTER C WITH CARON"));
        data.insert(std::make_pair(0x010e,"LATIN CAPITAL LETTER D WITH CARON"));
        data.insert(std::make_pair(0x010f,"LATIN SMALL LETTER D WITH CARON"));
        data.insert(std::make_pair(0x0110,"LATIN CAPITAL LETTER D WITH STROKE"));
        data.insert(std::make_pair(0x0111,"LATIN SMALL LETTER D WITH STROKE"));
        data.insert(std::make_pair(0x0112,"LATIN CAPITAL LETTER E WITH MACRON"));
        data.insert(std::make_pair(0x0113,"LATIN SMALL LETTER E WITH MACRON"));
        data.insert(std::make_pair(0x0114,"LATIN CAPITAL LETTER E WITH BREVE"));
        data.insert(std::make_pair(0x0115,"LATIN SMALL LETTER E WITH BREVE"));
        data.insert(std::make_pair(0x0116,"LATIN CAPITAL LETTER E WITH DOT ABOVE"));
        data.insert(std::make_pair(0x0117,"LATIN SMALL LETTER E WITH DOT ABOVE"));
        data.insert(std::make_pair(0x0118,"LATIN CAPITAL LETTER E WITH OGONEK"));
        data.insert(std::make_pair(0x0119,"LATIN SMALL LETTER E WITH OGONEK"));
        data.insert(std::make_pair(0x011a,"LATIN CAPITAL LETTER E WITH CARON"));
        data.insert(std::make_pair(0x011b,"LATIN SMALL LETTER E WITH CARON"));
        data.insert(std::make_pair(0x011c,"LATIN CAPITAL LETTER G WITH CIRCUMFLEX"));
        data.insert(std::make_pair(0x011d,"LATIN SMALL LETTER G WITH CIRCUMFLEX"));
        data.insert(std::make_pair(0x011e,"LATIN CAPITAL LETTER G WITH BREVE"));
        data.insert(std::make_pair(0x011f,"LATIN SMALL LETTER G WITH BREVE"));
        data.insert(std::make_pair(0x0120,"LATIN CAPITAL LETTER G WITH DOT ABOVE"));
        data.insert(std::make_pair(0x0121,"LATIN SMALL LETTER G WITH DOT ABOVE"));
        data.insert(std::make_pair(0x0122,"LATIN CAPITAL LETTER G WITH CEDILLA"));
        data.insert(std::make_pair(0x0123,"LATIN SMALL LETTER G WITH CEDILLA"));
        data.insert(std::make_pair(0x0124,"LATIN CAPITAL LETTER H WITH CIRCUMFLEX"));
        data.insert(std::make_pair(0x0125,"LATIN SMALL LETTER H WITH CIRCUMFLEX"));
        data.insert(std::make_pair(0x0126,"LATIN CAPITAL LETTER H WITH STROKE"));
        data.insert(std::make_pair(0x0127,"LATIN SMALL LETTER H WITH STROKE"));
        data.insert(std::make_pair(0x0128,"LATIN CAPITAL LETTER I WITH TILDE"));
        data.insert(std::make_pair(0x0129,"LATIN SMALL LETTER I WITH TILDE"));
        data.insert(std::make_pair(0x012a,"LATIN CAPITAL LETTER I WITH MACRON"));
        data.insert(std::make_pair(0x012b,"LATIN SMALL LETTER I WITH MACRON"));
        data.insert(std::make_pair(0x012c,"LATIN CAPITAL LETTER I WITH BREVE"));
        data.insert(std::make_pair(0x012d,"LATIN SMALL LETTER I WITH BREVE"));
        data.insert(std::make_pair(0x012e,"LATIN CAPITAL LETTER I WITH OGONEK"));
        data.insert(std::make_pair(0x012f,"LATIN SMALL LETTER I WITH OGONEK"));
        data.insert(std::make_pair(0x0130,"LATIN CAPITAL LETTER I WITH DOT ABOVE"));
        data.insert(std::make_pair(0x0131,"LATIN SMALL LETTER DOTLESS I"));
        data.insert(std::make_pair(0x0132,"LATIN CAPITAL LIGATURE IJ"));
        data.insert(std::make_pair(0x0133,"LATIN SMALL LIGATURE IJ"));
        data.insert(std::make_pair(0x0134,"LATIN CAPITAL LETTER J WITH CIRCUMFLEX"));
        data.insert(std::make_pair(0x0135,"LATIN SMALL LETTER J WITH CIRCUMFLEX"));
        data.insert(std::make_pair(0x0136,"LATIN CAPITAL LETTER K WITH CEDILLA"));
        data.insert(std::make_pair(0x0137,"LATIN SMALL LETTER K WITH CEDILLA"));
        data.insert(std::make_pair(0x0138,"LATIN SMALL LETTER KRA"));
        data.insert(std::make_pair(0x0139,"LATIN CAPITAL LETTER L WITH ACUTE"));
        data.insert(std::make_pair(0x013a,"LATIN SMALL LETTER L WITH ACUTE"));
        data.insert(std::make_pair(0x013b,"LATIN CAPITAL LETTER L WITH CEDILLA"));
        data.insert(std::make_pair(0x013c,"LATIN SMALL LETTER L WITH CEDILLA"));
        data.insert(std::make_pair(0x013d,"LATIN CAPITAL LETTER L WITH CARON"));
        data.insert(std::make_pair(0x013e,"LATIN SMALL LETTER L WITH CARON"));
        data.insert(std::make_pair(0x013f,"LATIN CAPITAL LETTER L WITH MIDDLE DOT"));
        data.insert(std::make_pair(0x0140,"LATIN SMALL LETTER L WITH MIDDLE DOT"));
        data.insert(std::make_pair(0x0141,"LATIN CAPITAL LETTER L WITH STROKE"));
        data.insert(std::make_pair(0x0142,"LATIN SMALL LETTER L WITH STROKE"));
        data.insert(std::make_pair(0x0143,"LATIN CAPITAL LETTER N WITH ACUTE"));
        data.insert(std::make_pair(0x0144,"LATIN SMALL LETTER N WITH ACUTE"));
        data.insert(std::make_pair(0x0145,"LATIN CAPITAL LETTER N WITH CEDILLA"));
        data.insert(std::make_pair(0x0146,"LATIN SMALL LETTER N WITH CEDILLA"));
        data.insert(std::make_pair(0x0147,"LATIN CAPITAL LETTER N WITH CARON"));
        data.insert(std::make_pair(0x0148,"LATIN SMALL LETTER N WITH CARON"));
        data.insert(std::make_pair(0x0149,"LATIN SMALL LETTER N PRECEDED BY APOSTROPHE"));
        data.insert(std::make_pair(0x014a,"LATIN CAPITAL LETTER ENG"));
        data.insert(std::make_pair(0x014b,"LATIN SMALL LETTER ENG"));
        data.insert(std::make_pair(0x014c,"LATIN CAPITAL LETTER O WITH MACRON"));
        data.insert(std::make_pair(0x014d,"LATIN SMALL LETTER O WITH MACRON"));
        data.insert(std::make_pair(0x014e,"LATIN CAPITAL LETTER O WITH BREVE"));
        data.insert(std::make_pair(0x014f,"LATIN SMALL LETTER O WITH BREVE"));
        data.insert(std::make_pair(0x0150,"LATIN CAPITAL LETTER O WITH DOUBLE ACUTE"));
        data.insert(std::make_pair(0x0151,"LATIN SMALL LETTER O WITH DOUBLE ACUTE"));
        data.insert(std::make_pair(0x0152,"LATIN CAPITAL LIGATURE OE"));
        data.insert(std::make_pair(0x0153,"LATIN SMALL LIGATURE OE"));
        data.insert(std::make_pair(0x0154,"LATIN CAPITAL LETTER R WITH ACUTE"));
        data.insert(std::make_pair(0x0155,"LATIN SMALL LETTER R WITH ACUTE"));
        data.insert(std::make_pair(0x0156,"LATIN CAPITAL LETTER R WITH CEDILLA"));
        data.insert(std::make_pair(0x0157,"LATIN SMALL LETTER R WITH CEDILLA"));
        data.insert(std::make_pair(0x0158,"LATIN CAPITAL LETTER R WITH CARON"));
        data.insert(std::make_pair(0x0159,"LATIN SMALL LETTER R WITH CARON"));
        data.insert(std::make_pair(0x015a,"LATIN CAPITAL LETTER S WITH ACUTE"));
        data.insert(std::make_pair(0x015b,"LATIN SMALL LETTER S WITH ACUTE"));
        data.insert(std::make_pair(0x015c,"LATIN CAPITAL LETTER S WITH CIRCUMFLEX"));
        data.insert(std::make_pair(0x015d,"LATIN SMALL LETTER S WITH CIRCUMFLEX"));
        data.insert(std::make_pair(0x015e,"LATIN CAPITAL LETTER S WITH CEDILLA"));
        data.insert(std::make_pair(0x015f,"LATIN SMALL LETTER S WITH CEDILLA"));
        data.insert(std::make_pair(0x0160,"LATIN CAPITAL LETTER S WITH CARON"));
        data.insert(std::make_pair(0x0161,"LATIN SMALL LETTER S WITH CARON"));
        data.insert(std::make_pair(0x0162,"LATIN CAPITAL LETTER T WITH CEDILLA"));
        data.insert(std::make_pair(0x0163,"LATIN SMALL LETTER T WITH CEDILLA"));
        data.insert(std::make_pair(0x0164,"LATIN CAPITAL LETTER T WITH CARON"));
        data.insert(std::make_pair(0x0165,"LATIN SMALL LETTER T WITH CARON"));
        data.insert(std::make_pair(0x0166,"LATIN CAPITAL LETTER T WITH STROKE"));
        data.insert(std::make_pair(0x0167,"LATIN SMALL LETTER T WITH STROKE"));
        data.insert(std::make_pair(0x0168,"LATIN CAPITAL LETTER U WITH TILDE"));
        data.insert(std::make_pair(0x0169,"LATIN SMALL LETTER U WITH TILDE"));
        data.insert(std::make_pair(0x016a,"LATIN CAPITAL LETTER U WITH MACRON"));
        data.insert(std::make_pair(0x016b,"LATIN SMALL LETTER U WITH MACRON"));
        data.insert(std::make_pair(0x016c,"LATIN CAPITAL LETTER U WITH BREVE"));
        data.insert(std::make_pair(0x016d,"LATIN SMALL LETTER U WITH BREVE"));
        data.insert(std::make_pair(0x016e,"LATIN CAPITAL LETTER U WITH RING ABOVE"));
        data.insert(std::make_pair(0x016f,"LATIN SMALL LETTER U WITH RING ABOVE"));
        data.insert(std::make_pair(0x0170,"LATIN CAPITAL LETTER U WITH DOUBLE ACUTE"));
        data.insert(std::make_pair(0x0171,"LATIN SMALL LETTER U WITH DOUBLE ACUTE"));
        data.insert(std::make_pair(0x0172,"LATIN CAPITAL LETTER U WITH OGONEK"));
        data.insert(std::make_pair(0x0173,"LATIN SMALL LETTER U WITH OGONEK"));
        data.insert(std::make_pair(0x0174,"LATIN CAPITAL LETTER W WITH CIRCUMFLEX"));
        data.insert(std::make_pair(0x0175,"LATIN SMALL LETTER W WITH CIRCUMFLEX"));
        data.insert(std::make_pair(0x0176,"LATIN CAPITAL LETTER Y WITH CIRCUMFLEX"));
        data.insert(std::make_pair(0x0177,"LATIN SMALL LETTER Y WITH CIRCUMFLEX"));
        data.insert(std::make_pair(0x0178,"LATIN CAPITAL LETTER Y WITH DIAERESIS"));
        data.insert(std::make_pair(0x0179,"LATIN CAPITAL LETTER Z WITH ACUTE"));
        data.insert(std::make_pair(0x017a,"LATIN SMALL LETTER Z WITH ACUTE"));
        data.insert(std::make_pair(0x017b,"LATIN CAPITAL LETTER Z WITH DOT ABOVE"));
        data.insert(std::make_pair(0x017c,"LATIN SMALL LETTER Z WITH DOT ABOVE"));
        data.insert(std::make_pair(0x017d,"LATIN CAPITAL LETTER Z WITH CARON"));
        data.insert(std::make_pair(0x017e,"LATIN SMALL LETTER Z WITH CARON"));
        data.insert(std::make_pair(0x017f,"LATIN SMALL LETTER LONG S"));
        data.insert(std::make_pair(0x0180,"LATIN SMALL LETTER B WITH STROKE"));
        data.insert(std::make_pair(0x0181,"LATIN CAPITAL LETTER B WITH HOOK"));
        data.insert(std::make_pair(0x0182,"LATIN CAPITAL LETTER B WITH TOPBAR"));
        data.insert(std::make_pair(0x0183,"LATIN SMALL LETTER B WITH TOPBAR"));
        data.insert(std::make_pair(0x0184,"LATIN CAPITAL LETTER TONE SIX"));
        data.insert(std::make_pair(0x0185,"LATIN SMALL LETTER TONE SIX"));
        data.insert(std::make_pair(0x0186,"LATIN CAPITAL LETTER OPEN O"));
        data.insert(std::make_pair(0x0187,"LATIN CAPITAL LETTER C WITH HOOK"));
        data.insert(std::make_pair(0x0188,"LATIN SMALL LETTER C WITH HOOK"));
        data.insert(std::make_pair(0x0189,"LATIN CAPITAL LETTER AFRICAN D"));
        data.insert(std::make_pair(0x018a,"LATIN CAPITAL LETTER D WITH HOOK"));
        data.insert(std::make_pair(0x018b,"LATIN CAPITAL LETTER D WITH TOPBAR"));
        data.insert(std::make_pair(0x018c,"LATIN SMALL LETTER D WITH TOPBAR"));
        data.insert(std::make_pair(0x018d,"LATIN SMALL LETTER TURNED DELTA"));
        data.insert(std::make_pair(0x018e,"LATIN CAPITAL LETTER REVERSED E"));
        data.insert(std::make_pair(0x018f,"LATIN CAPITAL LETTER SCHWA"));
        data.insert(std::make_pair(0x0190,"LATIN CAPITAL LETTER OPEN E"));
        data.insert(std::make_pair(0x0191,"LATIN CAPITAL LETTER F WITH HOOK"));
        data.insert(std::make_pair(0x0192,"LATIN SMALL LETTER F WITH HOOK"));
        data.insert(std::make_pair(0x0193,"LATIN CAPITAL LETTER G WITH HOOK"));
        data.insert(std::make_pair(0x0194,"LATIN CAPITAL LETTER GAMMA"));
        data.insert(std::make_pair(0x0195,"LATIN SMALL LETTER HV"));
        data.insert(std::make_pair(0x0196,"LATIN CAPITAL LETTER IOTA"));
        data.insert(std::make_pair(0x0197,"LATIN CAPITAL LETTER I WITH STROKE"));
        data.insert(std::make_pair(0x0198,"LATIN CAPITAL LETTER K WITH HOOK"));
        data.insert(std::make_pair(0x0199,"LATIN SMALL LETTER K WITH HOOK"));
        data.insert(std::make_pair(0x019a,"LATIN SMALL LETTER L WITH BAR"));
        data.insert(std::make_pair(0x019b,"LATIN SMALL LETTER LAMBDA WITH STROKE"));
        data.insert(std::make_pair(0x019c,"LATIN CAPITAL LETTER TURNED M"));
        data.insert(std::make_pair(0x019d,"LATIN CAPITAL LETTER N WITH LEFT HOOK"));
        data.insert(std::make_pair(0x019e,"LATIN SMALL LETTER N WITH LONG RIGHT LEG"));
        data.insert(std::make_pair(0x019f,"LATIN CAPITAL LETTER O WITH MIDDLE TILDE"));
        data.insert(std::make_pair(0x01a0,"LATIN CAPITAL LETTER O WITH HORN"));
        data.insert(std::make_pair(0x01a1,"LATIN SMALL LETTER O WITH HORN"));
        data.insert(std::make_pair(0x01a2,"LATIN CAPITAL LETTER OI"));
        data.insert(std::make_pair(0x01a3,"LATIN SMALL LETTER OI"));
        data.insert(std::make_pair(0x01a4,"LATIN CAPITAL LETTER P WITH HOOK"));
        data.insert(std::make_pair(0x01a5,"LATIN SMALL LETTER P WITH HOOK"));
        data.insert(std::make_pair(0x01a6,"LATIN LETTER YR"));
        data.insert(std::make_pair(0x01a7,"LATIN CAPITAL LETTER TONE TWO"));
        data.insert(std::make_pair(0x01a8,"LATIN SMALL LETTER TONE TWO"));
        data.insert(std::make_pair(0x01a9,"LATIN CAPITAL LETTER ESH"));
        data.insert(std::make_pair(0x01aa,"LATIN LETTER REVERSED ESH LOOP"));
        data.insert(std::make_pair(0x01ab,"LATIN SMALL LETTER T WITH PALATAL HOOK"));
        data.insert(std::make_pair(0x01ac,"LATIN CAPITAL LETTER T WITH HOOK"));
        data.insert(std::make_pair(0x01ad,"LATIN SMALL LETTER T WITH HOOK"));
        data.insert(std::make_pair(0x01ae,"LATIN CAPITAL LETTER T WITH RETROFLEX HOOK"));
        data.insert(std::make_pair(0x01af,"LATIN CAPITAL LETTER U WITH HORN"));
        data.insert(std::make_pair(0x01b0,"LATIN SMALL LETTER U WITH HORN"));
        data.insert(std::make_pair(0x01b1,"LATIN CAPITAL LETTER UPSILON"));
        data.insert(std::make_pair(0x01b2,"LATIN CAPITAL LETTER V WITH HOOK"));
        data.insert(std::make_pair(0x01b3,"LATIN CAPITAL LETTER Y WITH HOOK"));
        data.insert(std::make_pair(0x01b4,"LATIN SMALL LETTER Y WITH HOOK"));
        data.insert(std::make_pair(0x01b5,"LATIN CAPITAL LETTER Z WITH STROKE"));
        data.insert(std::make_pair(0x01b6,"LATIN SMALL LETTER Z WITH STROKE"));
        data.insert(std::make_pair(0x01b7,"LATIN CAPITAL LETTER EZH"));
        data.insert(std::make_pair(0x01b8,"LATIN CAPITAL LETTER EZH REVERSED"));
        data.insert(std::make_pair(0x01b9,"LATIN SMALL LETTER EZH REVERSED"));
        data.insert(std::make_pair(0x01ba,"LATIN SMALL LETTER EZH WITH TAIL"));
        data.insert(std::make_pair(0x01bb,"LATIN LETTER TWO WITH STROKE"));
        data.insert(std::make_pair(0x01bc,"LATIN CAPITAL LETTER TONE FIVE"));
        data.insert(std::make_pair(0x01bd,"LATIN SMALL LETTER TONE FIVE"));
        data.insert(std::make_pair(0x01be,"LATIN LETTER INVERTED GLOTTAL STOP WITH STROKE"));
        data.insert(std::make_pair(0x01bf,"LATIN LETTER WYNN"));
        data.insert(std::make_pair(0x01c0,"LATIN LETTER DENTAL CLICK"));
        data.insert(std::make_pair(0x01c1,"LATIN LETTER LATERAL CLICK"));
        data.insert(std::make_pair(0x01c2,"LATIN LETTER ALVEOLAR CLICK"));
        data.insert(std::make_pair(0x01c3,"LATIN LETTER RETROFLEX CLICK"));
        data.insert(std::make_pair(0x01c4,"LATIN CAPITAL LETTER DZ WITH CARON"));
        data.insert(std::make_pair(0x01c5,"LATIN CAPITAL LETTER D WITH SMALL LETTER Z WITH CARON"));
        data.insert(std::make_pair(0x01c6,"LATIN SMALL LETTER DZ WITH CARON"));
        data.insert(std::make_pair(0x01c7,"LATIN CAPITAL LETTER LJ"));
        data.insert(std::make_pair(0x01c8,"LATIN CAPITAL LETTER L WITH SMALL LETTER J"));
        data.insert(std::make_pair(0x01c9,"LATIN SMALL LETTER LJ"));
        data.insert(std::make_pair(0x01ca,"LATIN CAPITAL LETTER NJ"));
        data.insert(std::make_pair(0x01cb,"LATIN CAPITAL LETTER N WITH SMALL LETTER J"));
        data.insert(std::make_pair(0x01cc,"LATIN SMALL LETTER NJ"));
        data.insert(std::make_pair(0x01cd,"LATIN CAPITAL LETTER A WITH CARON"));
        data.insert(std::make_pair(0x01ce,"LATIN SMALL LETTER A WITH CARON"));
        data.insert(std::make_pair(0x01cf,"LATIN CAPITAL LETTER I WITH CARON"));
        data.insert(std::make_pair(0x01d0,"LATIN SMALL LETTER I WITH CARON"));
        data.insert(std::make_pair(0x01d1,"LATIN CAPITAL LETTER O WITH CARON"));
        data.insert(std::make_pair(0x01d2,"LATIN SMALL LETTER O WITH CARON"));
        data.insert(std::make_pair(0x01d3,"LATIN CAPITAL LETTER U WITH CARON"));
        data.insert(std::make_pair(0x01d4,"LATIN SMALL LETTER U WITH CARON"));
        data.insert(std::make_pair(0x01d5,"LATIN CAPITAL LETTER U WITH DIAERESIS AND MACRON"));
        data.insert(std::make_pair(0x01d6,"LATIN SMALL LETTER U WITH DIAERESIS AND MACRON"));
        data.insert(std::make_pair(0x01d7,"LATIN CAPITAL LETTER U WITH DIAERESIS AND ACUTE"));
        data.insert(std::make_pair(0x01d8,"LATIN SMALL LETTER U WITH DIAERESIS AND ACUTE"));
        data.insert(std::make_pair(0x01d9,"LATIN CAPITAL LETTER U WITH DIAERESIS AND CARON"));
        data.insert(std::make_pair(0x01da,"LATIN SMALL LETTER U WITH DIAERESIS AND CARON"));
        data.insert(std::make_pair(0x01db,"LATIN CAPITAL LETTER U WITH DIAERESIS AND GRAVE"));
        data.insert(std::make_pair(0x01dc,"LATIN SMALL LETTER U WITH DIAERESIS AND GRAVE"));
        data.insert(std::make_pair(0x01dd,"LATIN SMALL LETTER TURNED E"));
        data.insert(std::make_pair(0x01de,"LATIN CAPITAL LETTER A WITH DIAERESIS AND MACRON"));
        data.insert(std::make_pair(0x01df,"LATIN SMALL LETTER A WITH DIAERESIS AND MACRON"));
        data.insert(std::make_pair(0x01e0,"LATIN CAPITAL LETTER A WITH DOT ABOVE AND MACRON"));
        data.insert(std::make_pair(0x01e1,"LATIN SMALL LETTER A WITH DOT ABOVE AND MACRON"));
        data.insert(std::make_pair(0x01e2,"LATIN CAPITAL LETTER AE WITH MACRON"));
        data.insert(std::make_pair(0x01e3,"LATIN SMALL LETTER AE WITH MACRON"));
        data.insert(std::make_pair(0x01e4,"LATIN CAPITAL LETTER G WITH STROKE"));
        data.insert(std::make_pair(0x01e5,"LATIN SMALL LETTER G WITH STROKE"));
        data.insert(std::make_pair(0x01e6,"LATIN CAPITAL LETTER G WITH CARON"));
        data.insert(std::make_pair(0x01e7,"LATIN SMALL LETTER G WITH CARON"));
        data.insert(std::make_pair(0x01e8,"LATIN CAPITAL LETTER K WITH CARON"));
        data.insert(std::make_pair(0x01e9,"LATIN SMALL LETTER K WITH CARON"));
        data.insert(std::make_pair(0x01ea,"LATIN CAPITAL LETTER O WITH OGONEK"));
        data.insert(std::make_pair(0x01eb,"LATIN SMALL LETTER O WITH OGONEK"));
        data.insert(std::make_pair(0x01ec,"LATIN CAPITAL LETTER O WITH OGONEK AND MACRON"));
        data.insert(std::make_pair(0x01ed,"LATIN SMALL LETTER O WITH OGONEK AND MACRON"));
        data.insert(std::make_pair(0x01ee,"LATIN CAPITAL LETTER EZH WITH CARON"));
        data.insert(std::make_pair(0x01ef,"LATIN SMALL LETTER EZH WITH CARON"));
        data.insert(std::make_pair(0x01f0,"LATIN SMALL LETTER J WITH CARON"));
        data.insert(std::make_pair(0x01f1,"LATIN CAPITAL LETTER DZ"));
        data.insert(std::make_pair(0x01f2,"LATIN CAPITAL LETTER D WITH SMALL LETTER Z"));
        data.insert(std::make_pair(0x01f3,"LATIN SMALL LETTER DZ"));
        data.insert(std::make_pair(0x01f4,"LATIN CAPITAL LETTER G WITH ACUTE"));
        data.insert(std::make_pair(0x01f5,"LATIN SMALL LETTER G WITH ACUTE"));
        data.insert(std::make_pair(0x01f6,"LATIN CAPITAL LETTER HWAIR"));
        data.insert(std::make_pair(0x01f7,"LATIN CAPITAL LETTER WYNN"));
        data.insert(std::make_pair(0x01f8,"LATIN CAPITAL LETTER N WITH GRAVE"));
        data.insert(std::make_pair(0x01f9,"LATIN SMALL LETTER N WITH GRAVE"));
        data.insert(std::make_pair(0x01fa,"LATIN CAPITAL LETTER A WITH RING ABOVE AND ACUTE"));
        data.insert(std::make_pair(0x01fb,"LATIN SMALL LETTER A WITH RING ABOVE AND ACUTE"));
        data.insert(std::make_pair(0x01fc,"LATIN CAPITAL LETTER AE WITH ACUTE"));
        data.insert(std::make_pair(0x01fd,"LATIN SMALL LETTER AE WITH ACUTE"));
        data.insert(std::make_pair(0x01fe,"LATIN CAPITAL LETTER O WITH STROKE AND ACUTE"));
        data.insert(std::make_pair(0x01ff,"LATIN SMALL LETTER O WITH STROKE AND ACUTE"));
        data.insert(std::make_pair(0x0200,"LATIN CAPITAL LETTER A WITH DOUBLE GRAVE"));
        data.insert(std::make_pair(0x0201,"LATIN SMALL LETTER A WITH DOUBLE GRAVE"));
        data.insert(std::make_pair(0x0202,"LATIN CAPITAL LETTER A WITH INVERTED BREVE"));
        data.insert(std::make_pair(0x0203,"LATIN SMALL LETTER A WITH INVERTED BREVE"));
        data.insert(std::make_pair(0x0204,"LATIN CAPITAL LETTER E WITH DOUBLE GRAVE"));
        data.insert(std::make_pair(0x0205,"LATIN SMALL LETTER E WITH DOUBLE GRAVE"));
        data.insert(std::make_pair(0x0206,"LATIN CAPITAL LETTER E WITH INVERTED BREVE"));
        data.insert(std::make_pair(0x0207,"LATIN SMALL LETTER E WITH INVERTED BREVE"));
        data.insert(std::make_pair(0x0208,"LATIN CAPITAL LETTER I WITH DOUBLE GRAVE"));
        data.insert(std::make_pair(0x0209,"LATIN SMALL LETTER I WITH DOUBLE GRAVE"));
        data.insert(std::make_pair(0x020a,"LATIN CAPITAL LETTER I WITH INVERTED BREVE"));
        data.insert(std::make_pair(0x020b,"LATIN SMALL LETTER I WITH INVERTED BREVE"));
        data.insert(std::make_pair(0x020c,"LATIN CAPITAL LETTER O WITH DOUBLE GRAVE"));
        data.insert(std::make_pair(0x020d,"LATIN SMALL LETTER O WITH DOUBLE GRAVE"));
        data.insert(std::make_pair(0x020e,"LATIN CAPITAL LETTER O WITH INVERTED BREVE"));
        data.insert(std::make_pair(0x020f,"LATIN SMALL LETTER O WITH INVERTED BREVE"));
        data.insert(std::make_pair(0x0210,"LATIN CAPITAL LETTER R WITH DOUBLE GRAVE"));
        data.insert(std::make_pair(0x0211,"LATIN SMALL LETTER R WITH DOUBLE GRAVE"));
        data.insert(std::make_pair(0x0212,"LATIN CAPITAL LETTER R WITH INVERTED BREVE"));
        data.insert(std::make_pair(0x0213,"LATIN SMALL LETTER R WITH INVERTED BREVE"));
        data.insert(std::make_pair(0x0214,"LATIN CAPITAL LETTER U WITH DOUBLE GRAVE"));
        data.insert(std::make_pair(0x0215,"LATIN SMALL LETTER U WITH DOUBLE GRAVE"));
        data.insert(std::make_pair(0x0216,"LATIN CAPITAL LETTER U WITH INVERTED BREVE"));
        data.insert(std::make_pair(0x0217,"LATIN SMALL LETTER U WITH INVERTED BREVE"));
        data.insert(std::make_pair(0x0218,"LATIN CAPITAL LETTER S WITH COMMA BELOW"));
        data.insert(std::make_pair(0x0219,"LATIN SMALL LETTER S WITH COMMA BELOW"));
        data.insert(std::make_pair(0x021a,"LATIN CAPITAL LETTER T WITH COMMA BELOW"));
        data.insert(std::make_pair(0x021b,"LATIN SMALL LETTER T WITH COMMA BELOW"));
        data.insert(std::make_pair(0x021c,"LATIN CAPITAL LETTER YOGH"));
        data.insert(std::make_pair(0x021d,"LATIN SMALL LETTER YOGH"));
        data.insert(std::make_pair(0x021e,"LATIN CAPITAL LETTER H WITH CARON"));
        data.insert(std::make_pair(0x021f,"LATIN SMALL LETTER H WITH CARON"));
        data.insert(std::make_pair(0x0220,"LATIN CAPITAL LETTER N WITH LONG RIGHT LEG"));
        data.insert(std::make_pair(0x0221,"LATIN SMALL LETTER D WITH CURL"));
        data.insert(std::make_pair(0x0222,"LATIN CAPITAL LETTER OU"));
        data.insert(std::make_pair(0x0223,"LATIN SMALL LETTER OU"));
        data.insert(std::make_pair(0x0224,"LATIN CAPITAL LETTER Z WITH HOOK"));
        data.insert(std::make_pair(0x0225,"LATIN SMALL LETTER Z WITH HOOK"));
        data.insert(std::make_pair(0x0226,"LATIN CAPITAL LETTER A WITH DOT ABOVE"));
        data.insert(std::make_pair(0x0227,"LATIN SMALL LETTER A WITH DOT ABOVE"));
        data.insert(std::make_pair(0x0228,"LATIN CAPITAL LETTER E WITH CEDILLA"));
        data.insert(std::make_pair(0x0229,"LATIN SMALL LETTER E WITH CEDILLA"));
        data.insert(std::make_pair(0x022a,"LATIN CAPITAL LETTER O WITH DIAERESIS AND MACRON"));
        data.insert(std::make_pair(0x022b,"LATIN SMALL LETTER O WITH DIAERESIS AND MACRON"));
        data.insert(std::make_pair(0x022c,"LATIN CAPITAL LETTER O WITH TILDE AND MACRON"));
        data.insert(std::make_pair(0x022d,"LATIN SMALL LETTER O WITH TILDE AND MACRON"));
        data.insert(std::make_pair(0x022e,"LATIN CAPITAL LETTER O WITH DOT ABOVE"));
        data.insert(std::make_pair(0x022f,"LATIN SMALL LETTER O WITH DOT ABOVE"));
        data.insert(std::make_pair(0x0230,"LATIN CAPITAL LETTER O WITH DOT ABOVE AND MACRON"));
        data.insert(std::make_pair(0x0231,"LATIN SMALL LETTER O WITH DOT ABOVE AND MACRON"));
        data.insert(std::make_pair(0x0232,"LATIN CAPITAL LETTER Y WITH MACRON"));
        data.insert(std::make_pair(0x0233,"LATIN SMALL LETTER Y WITH MACRON"));
        data.insert(std::make_pair(0x0234,"LATIN SMALL LETTER L WITH CURL"));
        data.insert(std::make_pair(0x0235,"LATIN SMALL LETTER N WITH CURL"));
        data.insert(std::make_pair(0x0236,"LATIN SMALL LETTER T WITH CURL"));
        data.insert(std::make_pair(0x0237,"LATIN SMALL LETTER DOTLESS J"));
        data.insert(std::make_pair(0x0238,"LATIN SMALL LETTER DB DIGRAPH"));
        data.insert(std::make_pair(0x0239,"LATIN SMALL LETTER QP DIGRAPH"));
        data.insert(std::make_pair(0x023a,"LATIN CAPITAL LETTER A WITH STROKE"));
        data.insert(std::make_pair(0x023b,"LATIN CAPITAL LETTER C WITH STROKE"));
        data.insert(std::make_pair(0x023c,"LATIN SMALL LETTER C WITH STROKE"));
        data.insert(std::make_pair(0x023d,"LATIN CAPITAL LETTER L WITH BAR"));
        data.insert(std::make_pair(0x023e,"LATIN CAPITAL LETTER T WITH DIAGONAL STROKE"));
        data.insert(std::make_pair(0x023f,"LATIN SMALL LETTER S WITH SWASH TAIL"));
        data.insert(std::make_pair(0x0240,"LATIN SMALL LETTER Z WITH SWASH TAIL"));
        data.insert(std::make_pair(0x0241,"LATIN CAPITAL LETTER GLOTTAL STOP"));
        data.insert(std::make_pair(0x0242,"LATIN SMALL LETTER GLOTTAL STOP"));
        data.insert(std::make_pair(0x0243,"LATIN CAPITAL LETTER B WITH STROKE"));
        data.insert(std::make_pair(0x0244,"LATIN CAPITAL LETTER U BAR"));
        data.insert(std::make_pair(0x0245,"LATIN CAPITAL LETTER TURNED V"));
        data.insert(std::make_pair(0x0246,"LATIN CAPITAL LETTER E WITH STROKE"));
        data.insert(std::make_pair(0x0247,"LATIN SMALL LETTER E WITH STROKE"));
        data.insert(std::make_pair(0x0248,"LATIN CAPITAL LETTER J WITH STROKE"));
        data.insert(std::make_pair(0x0249,"LATIN SMALL LETTER J WITH STROKE"));
        data.insert(std::make_pair(0x024a,"LATIN CAPITAL LETTER SMALL Q WITH HOOK TAIL"));
        data.insert(std::make_pair(0x024b,"LATIN SMALL LETTER Q WITH HOOK TAIL"));
        data.insert(std::make_pair(0x024c,"LATIN CAPITAL LETTER R WITH STROKE"));
        data.insert(std::make_pair(0x024d,"LATIN SMALL LETTER R WITH STROKE"));
        data.insert(std::make_pair(0x024e,"LATIN CAPITAL LETTER Y WITH STROKE"));
        data.insert(std::make_pair(0x024f,"LATIN SMALL LETTER Y WITH STROKE"));
        data.insert(std::make_pair(0x0250,"LATIN SMALL LETTER TURNED A"));
        data.insert(std::make_pair(0x0251,"LATIN SMALL LETTER ALPHA"));
        data.insert(std::make_pair(0x0252,"LATIN SMALL LETTER TURNED ALPHA"));
        data.insert(std::make_pair(0x0253,"LATIN SMALL LETTER B WITH HOOK"));
        data.insert(std::make_pair(0x0254,"LATIN SMALL LETTER OPEN O"));
        data.insert(std::make_pair(0x0255,"LATIN SMALL LETTER C WITH CURL"));
        data.insert(std::make_pair(0x0256,"LATIN SMALL LETTER D WITH TAIL"));
        data.insert(std::make_pair(0x0257,"LATIN SMALL LETTER D WITH HOOK"));
        data.insert(std::make_pair(0x0258,"LATIN SMALL LETTER REVERSED E"));
        data.insert(std::make_pair(0x0259,"LATIN SMALL LETTER SCHWA"));
        data.insert(std::make_pair(0x025a,"LATIN SMALL LETTER SCHWA WITH HOOK"));
        data.insert(std::make_pair(0x025b,"LATIN SMALL LETTER OPEN E"));
        data.insert(std::make_pair(0x025c,"LATIN SMALL LETTER REVERSED OPEN E"));
        data.insert(std::make_pair(0x025d,"LATIN SMALL LETTER REVERSED OPEN E WITH HOOK"));
        data.insert(std::make_pair(0x025e,"LATIN SMALL LETTER CLOSED REVERSED OPEN E"));
        data.insert(std::make_pair(0x025f,"LATIN SMALL LETTER DOTLESS J WITH STROKE"));
        data.insert(std::make_pair(0x0260,"LATIN SMALL LETTER G WITH HOOK"));
        data.insert(std::make_pair(0x0261,"LATIN SMALL LETTER SCRIPT G"));
        data.insert(std::make_pair(0x0262,"LATIN LETTER SMALL CAPITAL G"));
        data.insert(std::make_pair(0x0263,"LATIN SMALL LETTER GAMMA"));
        data.insert(std::make_pair(0x0264,"LATIN SMALL LETTER RAMS HORN"));
        data.insert(std::make_pair(0x0265,"LATIN SMALL LETTER TURNED H"));
        data.insert(std::make_pair(0x0266,"LATIN SMALL LETTER H WITH HOOK"));
        data.insert(std::make_pair(0x0267,"LATIN SMALL LETTER HENG WITH HOOK"));
        data.insert(std::make_pair(0x0268,"LATIN SMALL LETTER I WITH STROKE"));
        data.insert(std::make_pair(0x0269,"LATIN SMALL LETTER IOTA"));
        data.insert(std::make_pair(0x026a,"LATIN LETTER SMALL CAPITAL I"));
        data.insert(std::make_pair(0x026b,"LATIN SMALL LETTER L WITH MIDDLE TILDE"));
        data.insert(std::make_pair(0x026c,"LATIN SMALL LETTER L WITH BELT"));
        data.insert(std::make_pair(0x026d,"LATIN SMALL LETTER L WITH RETROFLEX HOOK"));
        data.insert(std::make_pair(0x026e,"LATIN SMALL LETTER LEZH"));
        data.insert(std::make_pair(0x026f,"LATIN SMALL LETTER TURNED M"));
        data.insert(std::make_pair(0x0270,"LATIN SMALL LETTER TURNED M WITH LONG LEG"));
        data.insert(std::make_pair(0x0271,"LATIN SMALL LETTER M WITH HOOK"));
        data.insert(std::make_pair(0x0272,"LATIN SMALL LETTER N WITH LEFT HOOK"));
        data.insert(std::make_pair(0x0273,"LATIN SMALL LETTER N WITH RETROFLEX HOOK"));
        data.insert(std::make_pair(0x0274,"LATIN LETTER SMALL CAPITAL N"));
        data.insert(std::make_pair(0x0275,"LATIN SMALL LETTER BARRED O"));
        data.insert(std::make_pair(0x0276,"LATIN LETTER SMALL CAPITAL OE"));
        data.insert(std::make_pair(0x0277,"LATIN SMALL LETTER CLOSED OMEGA"));
        data.insert(std::make_pair(0x0278,"LATIN SMALL LETTER PHI"));
        data.insert(std::make_pair(0x0279,"LATIN SMALL LETTER TURNED R"));
        data.insert(std::make_pair(0x027a,"LATIN SMALL LETTER TURNED R WITH LONG LEG"));
        data.insert(std::make_pair(0x027b,"LATIN SMALL LETTER TURNED R WITH HOOK"));
        data.insert(std::make_pair(0x027c,"LATIN SMALL LETTER R WITH LONG LEG"));
        data.insert(std::make_pair(0x027d,"LATIN SMALL LETTER R WITH TAIL"));
        data.insert(std::make_pair(0x027e,"LATIN SMALL LETTER R WITH FISHHOOK"));
        data.insert(std::make_pair(0x027f,"LATIN SMALL LETTER REVERSED R WITH FISHHOOK"));
        data.insert(std::make_pair(0x0280,"LATIN LETTER SMALL CAPITAL R"));
        data.insert(std::make_pair(0x0281,"LATIN LETTER SMALL CAPITAL INVERTED R"));
        data.insert(std::make_pair(0x0282,"LATIN SMALL LETTER S WITH HOOK"));
        data.insert(std::make_pair(0x0283,"LATIN SMALL LETTER ESH"));
        data.insert(std::make_pair(0x0284,"LATIN SMALL LETTER DOTLESS J WITH STROKE AND HOOK"));
        data.insert(std::make_pair(0x0285,"LATIN SMALL LETTER SQUAT REVERSED ESH"));
        data.insert(std::make_pair(0x0286,"LATIN SMALL LETTER ESH WITH CURL"));
        data.insert(std::make_pair(0x0287,"LATIN SMALL LETTER TURNED T"));
        data.insert(std::make_pair(0x0288,"LATIN SMALL LETTER T WITH RETROFLEX HOOK"));
        data.insert(std::make_pair(0x0289,"LATIN SMALL LETTER U BAR"));
        data.insert(std::make_pair(0x028a,"LATIN SMALL LETTER UPSILON"));
        data.insert(std::make_pair(0x028b,"LATIN SMALL LETTER V WITH HOOK"));
        data.insert(std::make_pair(0x028c,"LATIN SMALL LETTER TURNED V"));
        data.insert(std::make_pair(0x028d,"LATIN SMALL LETTER TURNED W"));
        data.insert(std::make_pair(0x028e,"LATIN SMALL LETTER TURNED Y"));
        data.insert(std::make_pair(0x028f,"LATIN LETTER SMALL CAPITAL Y"));
        data.insert(std::make_pair(0x0290,"LATIN SMALL LETTER Z WITH RETROFLEX HOOK"));
        data.insert(std::make_pair(0x0291,"LATIN SMALL LETTER Z WITH CURL"));
        data.insert(std::make_pair(0x0292,"LATIN SMALL LETTER EZH"));
        data.insert(std::make_pair(0x0293,"LATIN SMALL LETTER EZH WITH CURL"));
        data.insert(std::make_pair(0x0294,"LATIN LETTER GLOTTAL STOP"));
        data.insert(std::make_pair(0x0295,"LATIN LETTER PHARYNGEAL VOICED FRICATIVE"));
        data.insert(std::make_pair(0x0296,"LATIN LETTER INVERTED GLOTTAL STOP"));
        data.insert(std::make_pair(0x0297,"LATIN LETTER STRETCHED C"));
        data.insert(std::make_pair(0x0298,"LATIN LETTER BILABIAL CLICK"));
        data.insert(std::make_pair(0x0299,"LATIN LETTER SMALL CAPITAL B"));
        data.insert(std::make_pair(0x029a,"LATIN SMALL LETTER CLOSED OPEN E"));
        data.insert(std::make_pair(0x029b,"LATIN LETTER SMALL CAPITAL G WITH HOOK"));
        data.insert(std::make_pair(0x029c,"LATIN LETTER SMALL CAPITAL H"));
        data.insert(std::make_pair(0x029d,"LATIN SMALL LETTER J WITH CROSSED-TAIL"));
        data.insert(std::make_pair(0x029e,"LATIN SMALL LETTER TURNED K"));
        data.insert(std::make_pair(0x029f,"LATIN LETTER SMALL CAPITAL L"));
        data.insert(std::make_pair(0x02a0,"LATIN SMALL LETTER Q WITH HOOK"));
        data.insert(std::make_pair(0x02a1,"LATIN LETTER GLOTTAL STOP WITH STROKE"));
        data.insert(std::make_pair(0x02a2,"LATIN LETTER REVERSED GLOTTAL STOP WITH STROKE"));
        data.insert(std::make_pair(0x02a3,"LATIN SMALL LETTER DZ DIGRAPH"));
        data.insert(std::make_pair(0x02a4,"LATIN SMALL LETTER DEZH DIGRAPH"));
        data.insert(std::make_pair(0x02a5,"LATIN SMALL LETTER DZ DIGRAPH WITH CURL"));
        data.insert(std::make_pair(0x02a6,"LATIN SMALL LETTER TS DIGRAPH"));
        data.insert(std::make_pair(0x02a7,"LATIN SMALL LETTER TESH DIGRAPH"));
        data.insert(std::make_pair(0x02a8,"LATIN SMALL LETTER TC DIGRAPH WITH CURL"));
        data.insert(std::make_pair(0x02a9,"LATIN SMALL LETTER FENG DIGRAPH"));
        data.insert(std::make_pair(0x02aa,"LATIN SMALL LETTER LS DIGRAPH"));
        data.insert(std::make_pair(0x02ab,"LATIN SMALL LETTER LZ DIGRAPH"));
        data.insert(std::make_pair(0x02ac,"LATIN LETTER BILABIAL PERCUSSIVE"));
        data.insert(std::make_pair(0x02ad,"LATIN LETTER BIDENTAL PERCUSSIVE"));
        data.insert(std::make_pair(0x02ae,"LATIN SMALL LETTER TURNED H WITH FISHHOOK"));
        data.insert(std::make_pair(0x02af,"LATIN SMALL LETTER TURNED H WITH FISHHOOK AND TAIL"));
        data.insert(std::make_pair(0x02b0,"MODIFIER LETTER SMALL H"));
        data.insert(std::make_pair(0x02b1,"MODIFIER LETTER SMALL H WITH HOOK"));
        data.insert(std::make_pair(0x02b2,"MODIFIER LETTER SMALL J"));
        data.insert(std::make_pair(0x02b3,"MODIFIER LETTER SMALL R"));
        data.insert(std::make_pair(0x02b4,"MODIFIER LETTER SMALL TURNED R"));
        data.insert(std::make_pair(0x02b5,"MODIFIER LETTER SMALL TURNED R WITH HOOK"));
        data.insert(std::make_pair(0x02b6,"MODIFIER LETTER SMALL CAPITAL INVERTED R"));
        data.insert(std::make_pair(0x02b7,"MODIFIER LETTER SMALL W"));
        data.insert(std::make_pair(0x02b8,"MODIFIER LETTER SMALL Y"));
        data.insert(std::make_pair(0x02b9,"MODIFIER LETTER PRIME"));
        data.insert(std::make_pair(0x02ba,"MODIFIER LETTER DOUBLE PRIME"));
        data.insert(std::make_pair(0x02bb,"MODIFIER LETTER TURNED COMMA"));
        data.insert(std::make_pair(0x02bc,"MODIFIER LETTER APOSTROPHE"));
        data.insert(std::make_pair(0x02bd,"MODIFIER LETTER REVERSED COMMA"));
        data.insert(std::make_pair(0x02be,"MODIFIER LETTER RIGHT HALF RING"));
        data.insert(std::make_pair(0x02bf,"MODIFIER LETTER LEFT HALF RING"));
        data.insert(std::make_pair(0x02c0,"MODIFIER LETTER GLOTTAL STOP"));
        data.insert(std::make_pair(0x02c1,"MODIFIER LETTER REVERSED GLOTTAL STOP"));
        data.insert(std::make_pair(0x02c2,"MODIFIER LETTER LEFT ARROWHEAD"));
        data.insert(std::make_pair(0x02c3,"MODIFIER LETTER RIGHT ARROWHEAD"));
        data.insert(std::make_pair(0x02c4,"MODIFIER LETTER UP ARROWHEAD"));
        data.insert(std::make_pair(0x02c5,"MODIFIER LETTER DOWN ARROWHEAD"));
        data.insert(std::make_pair(0x02c6,"MODIFIER LETTER CIRCUMFLEX ACCENT"));
        data.insert(std::make_pair(0x02c7,"CARON"));
        data.insert(std::make_pair(0x02c8,"MODIFIER LETTER VERTICAL LINE"));
        data.insert(std::make_pair(0x02c9,"MODIFIER LETTER MACRON"));
        data.insert(std::make_pair(0x02ca,"MODIFIER LETTER ACUTE ACCENT"));
        data.insert(std::make_pair(0x02cb,"MODIFIER LETTER GRAVE ACCENT"));
        data.insert(std::make_pair(0x02cc,"MODIFIER LETTER LOW VERTICAL LINE"));
        data.insert(std::make_pair(0x02cd,"MODIFIER LETTER LOW MACRON"));
        data.insert(std::make_pair(0x02ce,"MODIFIER LETTER LOW GRAVE ACCENT"));
        data.insert(std::make_pair(0x02cf,"MODIFIER LETTER LOW ACUTE ACCENT"));
        data.insert(std::make_pair(0x02d0,"MODIFIER LETTER TRIANGULAR COLON"));
        data.insert(std::make_pair(0x02d1,"MODIFIER LETTER HALF TRIANGULAR COLON"));
        data.insert(std::make_pair(0x02d2,"MODIFIER LETTER CENTRED RIGHT HALF RING"));
        data.insert(std::make_pair(0x02d3,"MODIFIER LETTER CENTRED LEFT HALF RING"));
        data.insert(std::make_pair(0x02d4,"MODIFIER LETTER UP TACK"));
        data.insert(std::make_pair(0x02d5,"MODIFIER LETTER DOWN TACK"));
        data.insert(std::make_pair(0x02d6,"MODIFIER LETTER PLUS SIGN"));
        data.insert(std::make_pair(0x02d7,"MODIFIER LETTER MINUS SIGN"));
        data.insert(std::make_pair(0x02d8,"BREVE"));
        data.insert(std::make_pair(0x02d9,"DOT ABOVE"));
        data.insert(std::make_pair(0x02da,"RING ABOVE"));
        data.insert(std::make_pair(0x02db,"OGONEK"));
        data.insert(std::make_pair(0x02dc,"SMALL TILDE"));
        data.insert(std::make_pair(0x02dd,"DOUBLE ACUTE ACCENT"));
        data.insert(std::make_pair(0x02de,"MODIFIER LETTER RHOTIC HOOK"));
        data.insert(std::make_pair(0x02df,"MODIFIER LETTER CROSS ACCENT"));
        data.insert(std::make_pair(0x02e0,"MODIFIER LETTER SMALL GAMMA"));
        data.insert(std::make_pair(0x02e1,"MODIFIER LETTER SMALL L"));
        data.insert(std::make_pair(0x02e2,"MODIFIER LETTER SMALL S"));
        data.insert(std::make_pair(0x02e3,"MODIFIER LETTER SMALL X"));
        data.insert(std::make_pair(0x02e4,"MODIFIER LETTER SMALL REVERSED GLOTTAL STOP"));
        data.insert(std::make_pair(0x02e5,"MODIFIER LETTER EXTRA-HIGH TONE BAR"));
        data.insert(std::make_pair(0x02e6,"MODIFIER LETTER HIGH TONE BAR"));
        data.insert(std::make_pair(0x02e7,"MODIFIER LETTER MID TONE BAR"));
        data.insert(std::make_pair(0x02e8,"MODIFIER LETTER LOW TONE BAR"));
        data.insert(std::make_pair(0x02e9,"MODIFIER LETTER EXTRA-LOW TONE BAR"));
        data.insert(std::make_pair(0x02ea,"MODIFIER LETTER YIN DEPARTING TONE MARK"));
        data.insert(std::make_pair(0x02eb,"MODIFIER LETTER YANG DEPARTING TONE MARK"));
        data.insert(std::make_pair(0x02ec,"MODIFIER LETTER VOICING"));
        data.insert(std::make_pair(0x02ed,"MODIFIER LETTER UNASPIRATED"));
        data.insert(std::make_pair(0x02ee,"MODIFIER LETTER DOUBLE APOSTROPHE"));
        data.insert(std::make_pair(0x02ef,"MODIFIER LETTER LOW DOWN ARROWHEAD"));
        data.insert(std::make_pair(0x02f0,"MODIFIER LETTER LOW UP ARROWHEAD"));
        data.insert(std::make_pair(0x02f1,"MODIFIER LETTER LOW LEFT ARROWHEAD"));
        data.insert(std::make_pair(0x02f2,"MODIFIER LETTER LOW RIGHT ARROWHEAD"));
        data.insert(std::make_pair(0x02f3,"MODIFIER LETTER LOW RING"));
        data.insert(std::make_pair(0x02f4,"MODIFIER LETTER MIDDLE GRAVE ACCENT"));
        data.insert(std::make_pair(0x02f5,"MODIFIER LETTER MIDDLE DOUBLE GRAVE ACCENT"));
        data.insert(std::make_pair(0x02f6,"MODIFIER LETTER MIDDLE DOUBLE ACUTE ACCENT"));
        data.insert(std::make_pair(0x02f7,"MODIFIER LETTER LOW TILDE"));
        data.insert(std::make_pair(0x02f8,"MODIFIER LETTER RAISED COLON"));
        data.insert(std::make_pair(0x02f9,"MODIFIER LETTER BEGIN HIGH TONE"));
        data.insert(std::make_pair(0x02fa,"MODIFIER LETTER END HIGH TONE"));
        data.insert(std::make_pair(0x02fb,"MODIFIER LETTER BEGIN LOW TONE"));
        data.insert(std::make_pair(0x02fc,"MODIFIER LETTER END LOW TONE"));
        data.insert(std::make_pair(0x02fd,"MODIFIER LETTER SHELF"));
        data.insert(std::make_pair(0x02fe,"MODIFIER LETTER OPEN SHELF"));
        data.insert(std::make_pair(0x02ff,"MODIFIER LETTER LOW LEFT ARROW"));
        data.insert(std::make_pair(0x0300,"COMBINING GRAVE ACCENT"));
        data.insert(std::make_pair(0x0301,"COMBINING ACUTE ACCENT"));
        data.insert(std::make_pair(0x0302,"COMBINING CIRCUMFLEX ACCENT"));
        data.insert(std::make_pair(0x0303,"COMBINING TILDE"));
        data.insert(std::make_pair(0x0304,"COMBINING MACRON"));
        data.insert(std::make_pair(0x0305,"COMBINING OVERLINE"));
        data.insert(std::make_pair(0x0306,"COMBINING BREVE"));
        data.insert(std::make_pair(0x0307,"COMBINING DOT ABOVE"));
        data.insert(std::make_pair(0x0308,"COMBINING DIAERESIS"));
        data.insert(std::make_pair(0x0309,"COMBINING HOOK ABOVE"));
        data.insert(std::make_pair(0x030a,"COMBINING RING ABOVE"));
        data.insert(std::make_pair(0x030b,"COMBINING DOUBLE ACUTE ACCENT"));
        data.insert(std::make_pair(0x030c,"COMBINING CARON"));
        data.insert(std::make_pair(0x030d,"COMBINING VERTICAL LINE ABOVE"));
        data.insert(std::make_pair(0x030e,"COMBINING DOUBLE VERTICAL LINE ABOVE"));
        data.insert(std::make_pair(0x030f,"COMBINING DOUBLE GRAVE ACCENT"));
        data.insert(std::make_pair(0x0310,"COMBINING CANDRABINDU"));
        data.insert(std::make_pair(0x0311,"COMBINING INVERTED BREVE"));
        data.insert(std::make_pair(0x0312,"COMBINING TURNED COMMA ABOVE"));
        data.insert(std::make_pair(0x0313,"COMBINING COMMA ABOVE"));
        data.insert(std::make_pair(0x0314,"COMBINING REVERSED COMMA ABOVE"));
        data.insert(std::make_pair(0x0315,"COMBINING COMMA ABOVE RIGHT"));
        data.insert(std::make_pair(0x0316,"COMBINING GRAVE ACCENT BELOW"));
        data.insert(std::make_pair(0x0317,"COMBINING ACUTE ACCENT BELOW"));
        data.insert(std::make_pair(0x0318,"COMBINING LEFT TACK BELOW"));
        data.insert(std::make_pair(0x0319,"COMBINING RIGHT TACK BELOW"));
        data.insert(std::make_pair(0x031a,"COMBINING LEFT ANGLE ABOVE"));
        data.insert(std::make_pair(0x031b,"COMBINING HORN"));
        data.insert(std::make_pair(0x031c,"COMBINING LEFT HALF RING BELOW"));
        data.insert(std::make_pair(0x031d,"COMBINING UP TACK BELOW"));
        data.insert(std::make_pair(0x031e,"COMBINING DOWN TACK BELOW"));
        data.insert(std::make_pair(0x031f,"COMBINING PLUS SIGN BELOW"));
        data.insert(std::make_pair(0x0320,"COMBINING MINUS SIGN BELOW"));
        data.insert(std::make_pair(0x0321,"COMBINING PALATALIZED HOOK BELOW"));
        data.insert(std::make_pair(0x0322,"COMBINING RETROFLEX HOOK BELOW"));
        data.insert(std::make_pair(0x0323,"COMBINING DOT BELOW"));
        data.insert(std::make_pair(0x0324,"COMBINING DIAERESIS BELOW"));
        data.insert(std::make_pair(0x0325,"COMBINING RING BELOW"));
        data.insert(std::make_pair(0x0326,"COMBINING COMMA BELOW"));
        data.insert(std::make_pair(0x0327,"COMBINING CEDILLA"));
        data.insert(std::make_pair(0x0328,"COMBINING OGONEK"));
        data.insert(std::make_pair(0x0329,"COMBINING VERTICAL LINE BELOW"));
        data.insert(std::make_pair(0x032a,"COMBINING BRIDGE BELOW"));
        data.insert(std::make_pair(0x032b,"COMBINING INVERTED DOUBLE ARCH BELOW"));
        data.insert(std::make_pair(0x032c,"COMBINING CARON BELOW"));
        data.insert(std::make_pair(0x032d,"COMBINING CIRCUMFLEX ACCENT BELOW"));
        data.insert(std::make_pair(0x032e,"COMBINING BREVE BELOW"));
        data.insert(std::make_pair(0x032f,"COMBINING INVERTED BREVE BELOW"));
        data.insert(std::make_pair(0x0330,"COMBINING TILDE BELOW"));
        data.insert(std::make_pair(0x0331,"COMBINING MACRON BELOW"));
        data.insert(std::make_pair(0x0332,"COMBINING LOW LINE"));
        data.insert(std::make_pair(0x0333,"COMBINING DOUBLE LOW LINE"));
        data.insert(std::make_pair(0x0334,"COMBINING TILDE OVERLAY"));
        data.insert(std::make_pair(0x0335,"COMBINING SHORT STROKE OVERLAY"));
        data.insert(std::make_pair(0x0336,"COMBINING LONG STROKE OVERLAY"));
        data.insert(std::make_pair(0x0337,"COMBINING SHORT SOLIDUS OVERLAY"));
        data.insert(std::make_pair(0x0338,"COMBINING LONG SOLIDUS OVERLAY"));
        data.insert(std::make_pair(0x0339,"COMBINING RIGHT HALF RING BELOW"));
        data.insert(std::make_pair(0x033a,"COMBINING INVERTED BRIDGE BELOW"));
        data.insert(std::make_pair(0x033b,"COMBINING SQUARE BELOW"));
        data.insert(std::make_pair(0x033c,"COMBINING SEAGULL BELOW"));
        data.insert(std::make_pair(0x033d,"COMBINING X ABOVE"));
        data.insert(std::make_pair(0x033e,"COMBINING VERTICAL TILDE"));
        data.insert(std::make_pair(0x033f,"COMBINING DOUBLE OVERLINE"));
        data.insert(std::make_pair(0x0340,"COMBINING GRAVE TONE MARK"));
        data.insert(std::make_pair(0x0341,"COMBINING ACUTE TONE MARK"));
        data.insert(std::make_pair(0x0342,"COMBINING GREEK PERISPOMENI"));
        data.insert(std::make_pair(0x0343,"COMBINING GREEK KORONIS"));
        data.insert(std::make_pair(0x0344,"COMBINING GREEK DIALYTIKA TONOS"));
        data.insert(std::make_pair(0x0345,"COMBINING GREEK YPOGEGRAMMENI"));
        data.insert(std::make_pair(0x0346,"COMBINING BRIDGE ABOVE"));
        data.insert(std::make_pair(0x0347,"COMBINING EQUALS SIGN BELOW"));
        data.insert(std::make_pair(0x0348,"COMBINING DOUBLE VERTICAL LINE BELOW"));
        data.insert(std::make_pair(0x0349,"COMBINING LEFT ANGLE BELOW"));
        data.insert(std::make_pair(0x034a,"COMBINING NOT TILDE ABOVE"));
        data.insert(std::make_pair(0x034b,"COMBINING HOMOTHETIC ABOVE"));
        data.insert(std::make_pair(0x034c,"COMBINING ALMOST EQUAL TO ABOVE"));
        data.insert(std::make_pair(0x034d,"COMBINING LEFT RIGHT ARROW BELOW"));
        data.insert(std::make_pair(0x034e,"COMBINING UPWARDS ARROW BELOW"));
        data.insert(std::make_pair(0x034f,"COMBINING GRAPHEME JOINER"));
        data.insert(std::make_pair(0x0350,"COMBINING RIGHT ARROWHEAD ABOVE"));
        data.insert(std::make_pair(0x0351,"COMBINING LEFT HALF RING ABOVE"));
        data.insert(std::make_pair(0x0352,"COMBINING FERMATA"));
        data.insert(std::make_pair(0x0353,"COMBINING X BELOW"));
        data.insert(std::make_pair(0x0354,"COMBINING LEFT ARROWHEAD BELOW"));
        data.insert(std::make_pair(0x0355,"COMBINING RIGHT ARROWHEAD BELOW"));
        data.insert(std::make_pair(0x0356,"COMBINING RIGHT ARROWHEAD AND UP ARROWHEAD BELOW"));
        data.insert(std::make_pair(0x0357,"COMBINING RIGHT HALF RING ABOVE"));
        data.insert(std::make_pair(0x0358,"COMBINING DOT ABOVE RIGHT"));
        data.insert(std::make_pair(0x0359,"COMBINING ASTERISK BELOW"));
        data.insert(std::make_pair(0x035a,"COMBINING DOUBLE RING BELOW"));
        data.insert(std::make_pair(0x035b,"COMBINING ZIGZAG ABOVE"));
        data.insert(std::make_pair(0x035c,"COMBINING DOUBLE BREVE BELOW"));
        data.insert(std::make_pair(0x035d,"COMBINING DOUBLE BREVE"));
        data.insert(std::make_pair(0x035e,"COMBINING DOUBLE MACRON"));
        data.insert(std::make_pair(0x035f,"COMBINING DOUBLE MACRON BELOW"));
        data.insert(std::make_pair(0x0360,"COMBINING DOUBLE TILDE"));
        data.insert(std::make_pair(0x0361,"COMBINING DOUBLE INVERTED BREVE"));
        data.insert(std::make_pair(0x0362,"COMBINING DOUBLE RIGHTWARDS ARROW BELOW"));
        data.insert(std::make_pair(0x0363,"COMBINING LATIN SMALL LETTER A"));
        data.insert(std::make_pair(0x0364,"COMBINING LATIN SMALL LETTER E"));
        data.insert(std::make_pair(0x0365,"COMBINING LATIN SMALL LETTER I"));
        data.insert(std::make_pair(0x0366,"COMBINING LATIN SMALL LETTER O"));
        data.insert(std::make_pair(0x0367,"COMBINING LATIN SMALL LETTER U"));
        data.insert(std::make_pair(0x0368,"COMBINING LATIN SMALL LETTER C"));
        data.insert(std::make_pair(0x0369,"COMBINING LATIN SMALL LETTER D"));
        data.insert(std::make_pair(0x036a,"COMBINING LATIN SMALL LETTER H"));
        data.insert(std::make_pair(0x036b,"COMBINING LATIN SMALL LETTER M"));
        data.insert(std::make_pair(0x036c,"COMBINING LATIN SMALL LETTER R"));
        data.insert(std::make_pair(0x036d,"COMBINING LATIN SMALL LETTER T"));
        data.insert(std::make_pair(0x036e,"COMBINING LATIN SMALL LETTER V"));
        data.insert(std::make_pair(0x036f,"COMBINING LATIN SMALL LETTER X"));
        data.insert(std::make_pair(0x0370,"GREEK CAPITAL LETTER HETA"));
        data.insert(std::make_pair(0x0371,"GREEK SMALL LETTER HETA"));
        data.insert(std::make_pair(0x0372,"GREEK CAPITAL LETTER ARCHAIC SAMPI"));
        data.insert(std::make_pair(0x0373,"GREEK SMALL LETTER ARCHAIC SAMPI"));
        data.insert(std::make_pair(0x0374,"GREEK NUMERAL SIGN"));
        data.insert(std::make_pair(0x0375,"GREEK LOWER NUMERAL SIGN"));
        data.insert(std::make_pair(0x0376,"GREEK CAPITAL LETTER PAMPHYLIAN DIGAMMA"));
        data.insert(std::make_pair(0x0377,"GREEK SMALL LETTER PAMPHYLIAN DIGAMMA"));
        data.insert(std::make_pair(0x037a,"GREEK YPOGEGRAMMENI"));
        data.insert(std::make_pair(0x037b,"GREEK SMALL REVERSED LUNATE SIGMA SYMBOL"));
        data.insert(std::make_pair(0x037c,"GREEK SMALL DOTTED LUNATE SIGMA SYMBOL"));
        data.insert(std::make_pair(0x037d,"GREEK SMALL REVERSED DOTTED LUNATE SIGMA SYMBOL"));
        data.insert(std::make_pair(0x037e,"GREEK QUESTION MARK"));
        data.insert(std::make_pair(0x037f,"GREEK CAPITAL LETTER YOT"));
        data.insert(std::make_pair(0x0384,"GREEK TONOS"));
        data.insert(std::make_pair(0x0385,"GREEK DIALYTIKA TONOS"));
        data.insert(std::make_pair(0x0386,"GREEK CAPITAL LETTER ALPHA WITH TONOS"));
        data.insert(std::make_pair(0x0387,"GREEK ANO TELEIA"));
        data.insert(std::make_pair(0x0388,"GREEK CAPITAL LETTER EPSILON WITH TONOS"));
        data.insert(std::make_pair(0x0389,"GREEK CAPITAL LETTER ETA WITH TONOS"));
        data.insert(std::make_pair(0x038a,"GREEK CAPITAL LETTER IOTA WITH TONOS"));
        data.insert(std::make_pair(0x038c,"GREEK CAPITAL LETTER OMICRON WITH TONOS"));
        data.insert(std::make_pair(0x038e,"GREEK CAPITAL LETTER UPSILON WITH TONOS"));
        data.insert(std::make_pair(0x038f,"GREEK CAPITAL LETTER OMEGA WITH TONOS"));
        data.insert(std::make_pair(0x0390,"GREEK SMALL LETTER IOTA WITH DIALYTIKA AND TONOS"));
        data.insert(std::make_pair(0x0391,"GREEK CAPITAL LETTER ALPHA"));
        data.insert(std::make_pair(0x0392,"GREEK CAPITAL LETTER BETA"));
        data.insert(std::make_pair(0x0393,"GREEK CAPITAL LETTER GAMMA"));
        data.insert(std::make_pair(0x0394,"GREEK CAPITAL LETTER DELTA"));
        data.insert(std::make_pair(0x0395,"GREEK CAPITAL LETTER EPSILON"));
        data.insert(std::make_pair(0x0396,"GREEK CAPITAL LETTER ZETA"));
        data.insert(std::make_pair(0x0397,"GREEK CAPITAL LETTER ETA"));
        data.insert(std::make_pair(0x0398,"GREEK CAPITAL LETTER THETA"));
        data.insert(std::make_pair(0x0399,"GREEK CAPITAL LETTER IOTA"));
        data.insert(std::make_pair(0x039a,"GREEK CAPITAL LETTER KAPPA"));
        data.insert(std::make_pair(0x039b,"GREEK CAPITAL LETTER LAMDA"));
        data.insert(std::make_pair(0x039c,"GREEK CAPITAL LETTER MU"));
        data.insert(std::make_pair(0x039d,"GREEK CAPITAL LETTER NU"));
        data.insert(std::make_pair(0x039e,"GREEK CAPITAL LETTER XI"));
        data.insert(std::make_pair(0x039f,"GREEK CAPITAL LETTER OMICRON"));
        data.insert(std::make_pair(0x03a0,"GREEK CAPITAL LETTER PI"));
        data.insert(std::make_pair(0x03a1,"GREEK CAPITAL LETTER RHO"));
        data.insert(std::make_pair(0x03a3,"GREEK CAPITAL LETTER SIGMA"));
        data.insert(std::make_pair(0x03a4,"GREEK CAPITAL LETTER TAU"));
        data.insert(std::make_pair(0x03a5,"GREEK CAPITAL LETTER UPSILON"));
        data.insert(std::make_pair(0x03a6,"GREEK CAPITAL LETTER PHI"));
        data.insert(std::make_pair(0x03a7,"GREEK CAPITAL LETTER CHI"));
        data.insert(std::make_pair(0x03a8,"GREEK CAPITAL LETTER PSI"));
        data.insert(std::make_pair(0x03a9,"GREEK CAPITAL LETTER OMEGA"));
        data.insert(std::make_pair(0x03aa,"GREEK CAPITAL LETTER IOTA WITH DIALYTIKA"));
        data.insert(std::make_pair(0x03ab,"GREEK CAPITAL LETTER UPSILON WITH DIALYTIKA"));
        data.insert(std::make_pair(0x03ac,"GREEK SMALL LETTER ALPHA WITH TONOS"));
        data.insert(std::make_pair(0x03ad,"GREEK SMALL LETTER EPSILON WITH TONOS"));
        data.insert(std::make_pair(0x03ae,"GREEK SMALL LETTER ETA WITH TONOS"));
        data.insert(std::make_pair(0x03af,"GREEK SMALL LETTER IOTA WITH TONOS"));
        data.insert(std::make_pair(0x03b0,"GREEK SMALL LETTER UPSILON WITH DIALYTIKA AND TONOS"));
        data.insert(std::make_pair(0x03b1,"GREEK SMALL LETTER ALPHA"));
        data.insert(std::make_pair(0x03b2,"GREEK SMALL LETTER BETA"));
        data.insert(std::make_pair(0x03b3,"GREEK SMALL LETTER GAMMA"));
        data.insert(std::make_pair(0x03b4,"GREEK SMALL LETTER DELTA"));
        data.insert(std::make_pair(0x03b5,"GREEK SMALL LETTER EPSILON"));
        data.insert(std::make_pair(0x03b6,"GREEK SMALL LETTER ZETA"));
        data.insert(std::make_pair(0x03b7,"GREEK SMALL LETTER ETA"));
        data.insert(std::make_pair(0x03b8,"GREEK SMALL LETTER THETA"));
        data.insert(std::make_pair(0x03b9,"GREEK SMALL LETTER IOTA"));
        data.insert(std::make_pair(0x03ba,"GREEK SMALL LETTER KAPPA"));
        data.insert(std::make_pair(0x03bb,"GREEK SMALL LETTER LAMDA"));
        data.insert(std::make_pair(0x03bc,"GREEK SMALL LETTER MU"));
        data.insert(std::make_pair(0x03bd,"GREEK SMALL LETTER NU"));
        data.insert(std::make_pair(0x03be,"GREEK SMALL LETTER XI"));
        data.insert(std::make_pair(0x03bf,"GREEK SMALL LETTER OMICRON"));
        data.insert(std::make_pair(0x03c0,"GREEK SMALL LETTER PI"));
        data.insert(std::make_pair(0x03c1,"GREEK SMALL LETTER RHO"));
        data.insert(std::make_pair(0x03c2,"GREEK SMALL LETTER FINAL SIGMA"));
        data.insert(std::make_pair(0x03c3,"GREEK SMALL LETTER SIGMA"));
        data.insert(std::make_pair(0x03c4,"GREEK SMALL LETTER TAU"));
        data.insert(std::make_pair(0x03c5,"GREEK SMALL LETTER UPSILON"));
        data.insert(std::make_pair(0x03c6,"GREEK SMALL LETTER PHI"));
        data.insert(std::make_pair(0x03c7,"GREEK SMALL LETTER CHI"));
        data.insert(std::make_pair(0x03c8,"GREEK SMALL LETTER PSI"));
        data.insert(std::make_pair(0x03c9,"GREEK SMALL LETTER OMEGA"));
        data.insert(std::make_pair(0x03ca,"GREEK SMALL LETTER IOTA WITH DIALYTIKA"));
        data.insert(std::make_pair(0x03cb,"GREEK SMALL LETTER UPSILON WITH DIALYTIKA"));
        data.insert(std::make_pair(0x03cc,"GREEK SMALL LETTER OMICRON WITH TONOS"));
        data.insert(std::make_pair(0x03cd,"GREEK SMALL LETTER UPSILON WITH TONOS"));
        data.insert(std::make_pair(0x03ce,"GREEK SMALL LETTER OMEGA WITH TONOS"));
        data.insert(std::make_pair(0x03cf,"GREEK CAPITAL KAI SYMBOL"));
        data.insert(std::make_pair(0x03d0,"GREEK BETA SYMBOL"));
        data.insert(std::make_pair(0x03d1,"GREEK THETA SYMBOL"));
        data.insert(std::make_pair(0x03d2,"GREEK UPSILON WITH HOOK SYMBOL"));
        data.insert(std::make_pair(0x03d3,"GREEK UPSILON WITH ACUTE AND HOOK SYMBOL"));
        data.insert(std::make_pair(0x03d4,"GREEK UPSILON WITH DIAERESIS AND HOOK SYMBOL"));
        data.insert(std::make_pair(0x03d5,"GREEK PHI SYMBOL"));
        data.insert(std::make_pair(0x03d6,"GREEK PI SYMBOL"));
        data.insert(std::make_pair(0x03d7,"GREEK KAI SYMBOL"));
        data.insert(std::make_pair(0x03d8,"GREEK LETTER ARCHAIC KOPPA"));
        data.insert(std::make_pair(0x03d9,"GREEK SMALL LETTER ARCHAIC KOPPA"));
        data.insert(std::make_pair(0x03da,"GREEK LETTER STIGMA"));
        data.insert(std::make_pair(0x03db,"GREEK SMALL LETTER STIGMA"));
        data.insert(std::make_pair(0x03dc,"GREEK LETTER DIGAMMA"));
        data.insert(std::make_pair(0x03dd,"GREEK SMALL LETTER DIGAMMA"));
        data.insert(std::make_pair(0x03de,"GREEK LETTER KOPPA"));
        data.insert(std::make_pair(0x03df,"GREEK SMALL LETTER KOPPA"));
        data.insert(std::make_pair(0x03e0,"GREEK LETTER SAMPI"));
        data.insert(std::make_pair(0x03e1,"GREEK SMALL LETTER SAMPI"));
        data.insert(std::make_pair(0x03e2,"COPTIC CAPITAL LETTER SHEI"));
        data.insert(std::make_pair(0x03e3,"COPTIC SMALL LETTER SHEI"));
        data.insert(std::make_pair(0x03e4,"COPTIC CAPITAL LETTER FEI"));
        data.insert(std::make_pair(0x03e5,"COPTIC SMALL LETTER FEI"));
        data.insert(std::make_pair(0x03e6,"COPTIC CAPITAL LETTER KHEI"));
        data.insert(std::make_pair(0x03e7,"COPTIC SMALL LETTER KHEI"));
        data.insert(std::make_pair(0x03e8,"COPTIC CAPITAL LETTER HORI"));
        data.insert(std::make_pair(0x03e9,"COPTIC SMALL LETTER HORI"));
        data.insert(std::make_pair(0x03ea,"COPTIC CAPITAL LETTER GANGIA"));
        data.insert(std::make_pair(0x03eb,"COPTIC SMALL LETTER GANGIA"));
        data.insert(std::make_pair(0x03ec,"COPTIC CAPITAL LETTER SHIMA"));
        data.insert(std::make_pair(0x03ed,"COPTIC SMALL LETTER SHIMA"));
        data.insert(std::make_pair(0x03ee,"COPTIC CAPITAL LETTER DEI"));
        data.insert(std::make_pair(0x03ef,"COPTIC SMALL LETTER DEI"));
        data.insert(std::make_pair(0x03f0,"GREEK KAPPA SYMBOL"));
        data.insert(std::make_pair(0x03f1,"GREEK RHO SYMBOL"));
        data.insert(std::make_pair(0x03f2,"GREEK LUNATE SIGMA SYMBOL"));
        data.insert(std::make_pair(0x03f3,"GREEK LETTER YOT"));
        data.insert(std::make_pair(0x03f4,"GREEK CAPITAL THETA SYMBOL"));
        data.insert(std::make_pair(0x03f5,"GREEK LUNATE EPSILON SYMBOL"));
        data.insert(std::make_pair(0x03f6,"GREEK REVERSED LUNATE EPSILON SYMBOL"));
        data.insert(std::make_pair(0x03f7,"GREEK CAPITAL LETTER SHO"));
        data.insert(std::make_pair(0x03f8,"GREEK SMALL LETTER SHO"));
        data.insert(std::make_pair(0x03f9,"GREEK CAPITAL LUNATE SIGMA SYMBOL"));
        data.insert(std::make_pair(0x03fa,"GREEK CAPITAL LETTER SAN"));
        data.insert(std::make_pair(0x03fb,"GREEK SMALL LETTER SAN"));
        data.insert(std::make_pair(0x03fc,"GREEK RHO WITH STROKE SYMBOL"));
        data.insert(std::make_pair(0x03fd,"GREEK CAPITAL REVERSED LUNATE SIGMA SYMBOL"));
        data.insert(std::make_pair(0x03fe,"GREEK CAPITAL DOTTED LUNATE SIGMA SYMBOL"));
        data.insert(std::make_pair(0x03ff,"GREEK CAPITAL REVERSED DOTTED LUNATE SIGMA SYMBOL"));
        data.insert(std::make_pair(0x0400,"CYRILLIC CAPITAL LETTER IE WITH GRAVE"));
        data.insert(std::make_pair(0x0401,"CYRILLIC CAPITAL LETTER IO"));
        data.insert(std::make_pair(0x0402,"CYRILLIC CAPITAL LETTER DJE"));
        data.insert(std::make_pair(0x0403,"CYRILLIC CAPITAL LETTER GJE"));
        data.insert(std::make_pair(0x0404,"CYRILLIC CAPITAL LETTER UKRAINIAN IE"));
        data.insert(std::make_pair(0x0405,"CYRILLIC CAPITAL LETTER DZE"));
        data.insert(std::make_pair(0x0406,"CYRILLIC CAPITAL LETTER BYELORUSSIAN-UKRAINIAN I"));
        data.insert(std::make_pair(0x0407,"CYRILLIC CAPITAL LETTER YI"));
        data.insert(std::make_pair(0x0408,"CYRILLIC CAPITAL LETTER JE"));
        data.insert(std::make_pair(0x0409,"CYRILLIC CAPITAL LETTER LJE"));
        data.insert(std::make_pair(0x040a,"CYRILLIC CAPITAL LETTER NJE"));
        data.insert(std::make_pair(0x040b,"CYRILLIC CAPITAL LETTER TSHE"));
        data.insert(std::make_pair(0x040c,"CYRILLIC CAPITAL LETTER KJE"));
        data.insert(std::make_pair(0x040d,"CYRILLIC CAPITAL LETTER I WITH GRAVE"));
        data.insert(std::make_pair(0x040e,"CYRILLIC CAPITAL LETTER SHORT U"));
        data.insert(std::make_pair(0x040f,"CYRILLIC CAPITAL LETTER DZHE"));
        data.insert(std::make_pair(0x0410,"CYRILLIC CAPITAL LETTER A"));
        data.insert(std::make_pair(0x0411,"CYRILLIC CAPITAL LETTER BE"));
        data.insert(std::make_pair(0x0412,"CYRILLIC CAPITAL LETTER VE"));
        data.insert(std::make_pair(0x0413,"CYRILLIC CAPITAL LETTER GHE"));
        data.insert(std::make_pair(0x0414,"CYRILLIC CAPITAL LETTER DE"));
        data.insert(std::make_pair(0x0415,"CYRILLIC CAPITAL LETTER IE"));
        data.insert(std::make_pair(0x0416,"CYRILLIC CAPITAL LETTER ZHE"));
        data.insert(std::make_pair(0x0417,"CYRILLIC CAPITAL LETTER ZE"));
        data.insert(std::make_pair(0x0418,"CYRILLIC CAPITAL LETTER I"));
        data.insert(std::make_pair(0x0419,"CYRILLIC CAPITAL LETTER SHORT I"));
        data.insert(std::make_pair(0x041a,"CYRILLIC CAPITAL LETTER KA"));
        data.insert(std::make_pair(0x041b,"CYRILLIC CAPITAL LETTER EL"));
        data.insert(std::make_pair(0x041c,"CYRILLIC CAPITAL LETTER EM"));
        data.insert(std::make_pair(0x041d,"CYRILLIC CAPITAL LETTER EN"));
        data.insert(std::make_pair(0x041e,"CYRILLIC CAPITAL LETTER O"));
        data.insert(std::make_pair(0x041f,"CYRILLIC CAPITAL LETTER PE"));
        data.insert(std::make_pair(0x0420,"CYRILLIC CAPITAL LETTER ER"));
        data.insert(std::make_pair(0x0421,"CYRILLIC CAPITAL LETTER ES"));
        data.insert(std::make_pair(0x0422,"CYRILLIC CAPITAL LETTER TE"));
        data.insert(std::make_pair(0x0423,"CYRILLIC CAPITAL LETTER U"));
        data.insert(std::make_pair(0x0424,"CYRILLIC CAPITAL LETTER EF"));
        data.insert(std::make_pair(0x0425,"CYRILLIC CAPITAL LETTER HA"));
        data.insert(std::make_pair(0x0426,"CYRILLIC CAPITAL LETTER TSE"));
        data.insert(std::make_pair(0x0427,"CYRILLIC CAPITAL LETTER CHE"));
        data.insert(std::make_pair(0x0428,"CYRILLIC CAPITAL LETTER SHA"));
        data.insert(std::make_pair(0x0429,"CYRILLIC CAPITAL LETTER SHCHA"));
        data.insert(std::make_pair(0x042a,"CYRILLIC CAPITAL LETTER HARD SIGN"));
        data.insert(std::make_pair(0x042b,"CYRILLIC CAPITAL LETTER YERU"));
        data.insert(std::make_pair(0x042c,"CYRILLIC CAPITAL LETTER SOFT SIGN"));
        data.insert(std::make_pair(0x042d,"CYRILLIC CAPITAL LETTER E"));
        data.insert(std::make_pair(0x042e,"CYRILLIC CAPITAL LETTER YU"));
        data.insert(std::make_pair(0x042f,"CYRILLIC CAPITAL LETTER YA"));
        data.insert(std::make_pair(0x0430,"CYRILLIC SMALL LETTER A"));
        data.insert(std::make_pair(0x0431,"CYRILLIC SMALL LETTER BE"));
        data.insert(std::make_pair(0x0432,"CYRILLIC SMALL LETTER VE"));
        data.insert(std::make_pair(0x0433,"CYRILLIC SMALL LETTER GHE"));
        data.insert(std::make_pair(0x0434,"CYRILLIC SMALL LETTER DE"));
        data.insert(std::make_pair(0x0435,"CYRILLIC SMALL LETTER IE"));
        data.insert(std::make_pair(0x0436,"CYRILLIC SMALL LETTER ZHE"));
        data.insert(std::make_pair(0x0437,"CYRILLIC SMALL LETTER ZE"));
        data.insert(std::make_pair(0x0438,"CYRILLIC SMALL LETTER I"));
        data.insert(std::make_pair(0x0439,"CYRILLIC SMALL LETTER SHORT I"));
        data.insert(std::make_pair(0x043a,"CYRILLIC SMALL LETTER KA"));
        data.insert(std::make_pair(0x043b,"CYRILLIC SMALL LETTER EL"));
        data.insert(std::make_pair(0x043c,"CYRILLIC SMALL LETTER EM"));
        data.insert(std::make_pair(0x043d,"CYRILLIC SMALL LETTER EN"));
        data.insert(std::make_pair(0x043e,"CYRILLIC SMALL LETTER O"));
        data.insert(std::make_pair(0x043f,"CYRILLIC SMALL LETTER PE"));
        data.insert(std::make_pair(0x0440,"CYRILLIC SMALL LETTER ER"));
        data.insert(std::make_pair(0x0441,"CYRILLIC SMALL LETTER ES"));
        data.insert(std::make_pair(0x0442,"CYRILLIC SMALL LETTER TE"));
        data.insert(std::make_pair(0x0443,"CYRILLIC SMALL LETTER U"));
        data.insert(std::make_pair(0x0444,"CYRILLIC SMALL LETTER EF"));
        data.insert(std::make_pair(0x0445,"CYRILLIC SMALL LETTER HA"));
        data.insert(std::make_pair(0x0446,"CYRILLIC SMALL LETTER TSE"));
        data.insert(std::make_pair(0x0447,"CYRILLIC SMALL LETTER CHE"));
        data.insert(std::make_pair(0x0448,"CYRILLIC SMALL LETTER SHA"));
        data.insert(std::make_pair(0x0449,"CYRILLIC SMALL LETTER SHCHA"));
        data.insert(std::make_pair(0x044a,"CYRILLIC SMALL LETTER HARD SIGN"));
        data.insert(std::make_pair(0x044b,"CYRILLIC SMALL LETTER YERU"));
        data.insert(std::make_pair(0x044c,"CYRILLIC SMALL LETTER SOFT SIGN"));
        data.insert(std::make_pair(0x044d,"CYRILLIC SMALL LETTER E"));
        data.insert(std::make_pair(0x044e,"CYRILLIC SMALL LETTER YU"));
        data.insert(std::make_pair(0x044f,"CYRILLIC SMALL LETTER YA"));
        data.insert(std::make_pair(0x0450,"CYRILLIC SMALL LETTER IE WITH GRAVE"));
        data.insert(std::make_pair(0x0451,"CYRILLIC SMALL LETTER IO"));
        data.insert(std::make_pair(0x0452,"CYRILLIC SMALL LETTER DJE"));
        data.insert(std::make_pair(0x0453,"CYRILLIC SMALL LETTER GJE"));
        data.insert(std::make_pair(0x0454,"CYRILLIC SMALL LETTER UKRAINIAN IE"));
        data.insert(std::make_pair(0x0455,"CYRILLIC SMALL LETTER DZE"));
        data.insert(std::make_pair(0x0456,"CYRILLIC SMALL LETTER BYELORUSSIAN-UKRAINIAN I"));
        data.insert(std::make_pair(0x0457,"CYRILLIC SMALL LETTER YI"));
        data.insert(std::make_pair(0x0458,"CYRILLIC SMALL LETTER JE"));
        data.insert(std::make_pair(0x0459,"CYRILLIC SMALL LETTER LJE"));
        data.insert(std::make_pair(0x045a,"CYRILLIC SMALL LETTER NJE"));
        data.insert(std::make_pair(0x045b,"CYRILLIC SMALL LETTER TSHE"));
        data.insert(std::make_pair(0x045c,"CYRILLIC SMALL LETTER KJE"));
        data.insert(std::make_pair(0x045d,"CYRILLIC SMALL LETTER I WITH GRAVE"));
        data.insert(std::make_pair(0x045e,"CYRILLIC SMALL LETTER SHORT U"));
        data.insert(std::make_pair(0x045f,"CYRILLIC SMALL LETTER DZHE"));
        data.insert(std::make_pair(0x0460,"CYRILLIC CAPITAL LETTER OMEGA"));
        data.insert(std::make_pair(0x0461,"CYRILLIC SMALL LETTER OMEGA"));
        data.insert(std::make_pair(0x0462,"CYRILLIC CAPITAL LETTER YAT"));
        data.insert(std::make_pair(0x0463,"CYRILLIC SMALL LETTER YAT"));
        data.insert(std::make_pair(0x0464,"CYRILLIC CAPITAL LETTER IOTIFIED E"));
        data.insert(std::make_pair(0x0465,"CYRILLIC SMALL LETTER IOTIFIED E"));
        data.insert(std::make_pair(0x0466,"CYRILLIC CAPITAL LETTER LITTLE YUS"));
        data.insert(std::make_pair(0x0467,"CYRILLIC SMALL LETTER LITTLE YUS"));
        data.insert(std::make_pair(0x0468,"CYRILLIC CAPITAL LETTER IOTIFIED LITTLE YUS"));
        data.insert(std::make_pair(0x0469,"CYRILLIC SMALL LETTER IOTIFIED LITTLE YUS"));
        data.insert(std::make_pair(0x046a,"CYRILLIC CAPITAL LETTER BIG YUS"));
        data.insert(std::make_pair(0x046b,"CYRILLIC SMALL LETTER BIG YUS"));
        data.insert(std::make_pair(0x046c,"CYRILLIC CAPITAL LETTER IOTIFIED BIG YUS"));
        data.insert(std::make_pair(0x046d,"CYRILLIC SMALL LETTER IOTIFIED BIG YUS"));
        data.insert(std::make_pair(0x046e,"CYRILLIC CAPITAL LETTER KSI"));
        data.insert(std::make_pair(0x046f,"CYRILLIC SMALL LETTER KSI"));
        data.insert(std::make_pair(0x0470,"CYRILLIC CAPITAL LETTER PSI"));
        data.insert(std::make_pair(0x0471,"CYRILLIC SMALL LETTER PSI"));
        data.insert(std::make_pair(0x0472,"CYRILLIC CAPITAL LETTER FITA"));
        data.insert(std::make_pair(0x0473,"CYRILLIC SMALL LETTER FITA"));
        data.insert(std::make_pair(0x0474,"CYRILLIC CAPITAL LETTER IZHITSA"));
        data.insert(std::make_pair(0x0475,"CYRILLIC SMALL LETTER IZHITSA"));
        data.insert(std::make_pair(0x0476,"CYRILLIC CAPITAL LETTER IZHITSA WITH DOUBLE GRAVE ACCENT"));
        data.insert(std::make_pair(0x0477,"CYRILLIC SMALL LETTER IZHITSA WITH DOUBLE GRAVE ACCENT"));
        data.insert(std::make_pair(0x0478,"CYRILLIC CAPITAL LETTER UK"));
        data.insert(std::make_pair(0x0479,"CYRILLIC SMALL LETTER UK"));
        data.insert(std::make_pair(0x047a,"CYRILLIC CAPITAL LETTER ROUND OMEGA"));
        data.insert(std::make_pair(0x047b,"CYRILLIC SMALL LETTER ROUND OMEGA"));
        data.insert(std::make_pair(0x047c,"CYRILLIC CAPITAL LETTER OMEGA WITH TITLO"));
        data.insert(std::make_pair(0x047d,"CYRILLIC SMALL LETTER OMEGA WITH TITLO"));
        data.insert(std::make_pair(0x047e,"CYRILLIC CAPITAL LETTER OT"));
        data.insert(std::make_pair(0x047f,"CYRILLIC SMALL LETTER OT"));
        data.insert(std::make_pair(0x0480,"CYRILLIC CAPITAL LETTER KOPPA"));
        data.insert(std::make_pair(0x0481,"CYRILLIC SMALL LETTER KOPPA"));
        data.insert(std::make_pair(0x0482,"CYRILLIC THOUSANDS SIGN"));
        data.insert(std::make_pair(0x0483,"COMBINING CYRILLIC TITLO"));
        data.insert(std::make_pair(0x0484,"COMBINING CYRILLIC PALATALIZATION"));
        data.insert(std::make_pair(0x0485,"COMBINING CYRILLIC DASIA PNEUMATA"));
        data.insert(std::make_pair(0x0486,"COMBINING CYRILLIC PSILI PNEUMATA"));
        data.insert(std::make_pair(0x0487,"COMBINING CYRILLIC POKRYTIE"));
        data.insert(std::make_pair(0x0488,"COMBINING CYRILLIC HUNDRED THOUSANDS SIGN"));
        data.insert(std::make_pair(0x0489,"COMBINING CYRILLIC MILLIONS SIGN"));
        data.insert(std::make_pair(0x048a,"CYRILLIC CAPITAL LETTER SHORT I WITH TAIL"));
        data.insert(std::make_pair(0x048b,"CYRILLIC SMALL LETTER SHORT I WITH TAIL"));
        data.insert(std::make_pair(0x048c,"CYRILLIC CAPITAL LETTER SEMISOFT SIGN"));
        data.insert(std::make_pair(0x048d,"CYRILLIC SMALL LETTER SEMISOFT SIGN"));
        data.insert(std::make_pair(0x048e,"CYRILLIC CAPITAL LETTER ER WITH TICK"));
        data.insert(std::make_pair(0x048f,"CYRILLIC SMALL LETTER ER WITH TICK"));
        data.insert(std::make_pair(0x0490,"CYRILLIC CAPITAL LETTER GHE WITH UPTURN"));
        data.insert(std::make_pair(0x0491,"CYRILLIC SMALL LETTER GHE WITH UPTURN"));
        data.insert(std::make_pair(0x0492,"CYRILLIC CAPITAL LETTER GHE WITH STROKE"));
        data.insert(std::make_pair(0x0493,"CYRILLIC SMALL LETTER GHE WITH STROKE"));
        data.insert(std::make_pair(0x0494,"CYRILLIC CAPITAL LETTER GHE WITH MIDDLE HOOK"));
        data.insert(std::make_pair(0x0495,"CYRILLIC SMALL LETTER GHE WITH MIDDLE HOOK"));
        data.insert(std::make_pair(0x0496,"CYRILLIC CAPITAL LETTER ZHE WITH DESCENDER"));
        data.insert(std::make_pair(0x0497,"CYRILLIC SMALL LETTER ZHE WITH DESCENDER"));
        data.insert(std::make_pair(0x0498,"CYRILLIC CAPITAL LETTER ZE WITH DESCENDER"));
        data.insert(std::make_pair(0x0499,"CYRILLIC SMALL LETTER ZE WITH DESCENDER"));
        data.insert(std::make_pair(0x049a,"CYRILLIC CAPITAL LETTER KA WITH DESCENDER"));
        data.insert(std::make_pair(0x049b,"CYRILLIC SMALL LETTER KA WITH DESCENDER"));
        data.insert(std::make_pair(0x049c,"CYRILLIC CAPITAL LETTER KA WITH VERTICAL STROKE"));
        data.insert(std::make_pair(0x049d,"CYRILLIC SMALL LETTER KA WITH VERTICAL STROKE"));
        data.insert(std::make_pair(0x049e,"CYRILLIC CAPITAL LETTER KA WITH STROKE"));
        data.insert(std::make_pair(0x049f,"CYRILLIC SMALL LETTER KA WITH STROKE"));
        data.insert(std::make_pair(0x04a0,"CYRILLIC CAPITAL LETTER BASHKIR KA"));
        data.insert(std::make_pair(0x04a1,"CYRILLIC SMALL LETTER BASHKIR KA"));
        data.insert(std::make_pair(0x04a2,"CYRILLIC CAPITAL LETTER EN WITH DESCENDER"));
        data.insert(std::make_pair(0x04a3,"CYRILLIC SMALL LETTER EN WITH DESCENDER"));
        data.insert(std::make_pair(0x04a4,"CYRILLIC CAPITAL LIGATURE EN GHE"));
        data.insert(std::make_pair(0x04a5,"CYRILLIC SMALL LIGATURE EN GHE"));
        data.insert(std::make_pair(0x04a6,"CYRILLIC CAPITAL LETTER PE WITH MIDDLE HOOK"));
        data.insert(std::make_pair(0x04a7,"CYRILLIC SMALL LETTER PE WITH MIDDLE HOOK"));
        data.insert(std::make_pair(0x04a8,"CYRILLIC CAPITAL LETTER ABKHASIAN HA"));
        data.insert(std::make_pair(0x04a9,"CYRILLIC SMALL LETTER ABKHASIAN HA"));
        data.insert(std::make_pair(0x04aa,"CYRILLIC CAPITAL LETTER ES WITH DESCENDER"));
        data.insert(std::make_pair(0x04ab,"CYRILLIC SMALL LETTER ES WITH DESCENDER"));
        data.insert(std::make_pair(0x04ac,"CYRILLIC CAPITAL LETTER TE WITH DESCENDER"));
        data.insert(std::make_pair(0x04ad,"CYRILLIC SMALL LETTER TE WITH DESCENDER"));
        data.insert(std::make_pair(0x04ae,"CYRILLIC CAPITAL LETTER STRAIGHT U"));
        data.insert(std::make_pair(0x04af,"CYRILLIC SMALL LETTER STRAIGHT U"));
        data.insert(std::make_pair(0x04b0,"CYRILLIC CAPITAL LETTER STRAIGHT U WITH STROKE"));
        data.insert(std::make_pair(0x04b1,"CYRILLIC SMALL LETTER STRAIGHT U WITH STROKE"));
        data.insert(std::make_pair(0x04b2,"CYRILLIC CAPITAL LETTER HA WITH DESCENDER"));
        data.insert(std::make_pair(0x04b3,"CYRILLIC SMALL LETTER HA WITH DESCENDER"));
        data.insert(std::make_pair(0x04b4,"CYRILLIC CAPITAL LIGATURE TE TSE"));
        data.insert(std::make_pair(0x04b5,"CYRILLIC SMALL LIGATURE TE TSE"));
        data.insert(std::make_pair(0x04b6,"CYRILLIC CAPITAL LETTER CHE WITH DESCENDER"));
        data.insert(std::make_pair(0x04b7,"CYRILLIC SMALL LETTER CHE WITH DESCENDER"));
        data.insert(std::make_pair(0x04b8,"CYRILLIC CAPITAL LETTER CHE WITH VERTICAL STROKE"));
        data.insert(std::make_pair(0x04b9,"CYRILLIC SMALL LETTER CHE WITH VERTICAL STROKE"));
        data.insert(std::make_pair(0x04ba,"CYRILLIC CAPITAL LETTER SHHA"));
        data.insert(std::make_pair(0x04bb,"CYRILLIC SMALL LETTER SHHA"));
        data.insert(std::make_pair(0x04bc,"CYRILLIC CAPITAL LETTER ABKHASIAN CHE"));
        data.insert(std::make_pair(0x04bd,"CYRILLIC SMALL LETTER ABKHASIAN CHE"));
        data.insert(std::make_pair(0x04be,"CYRILLIC CAPITAL LETTER ABKHASIAN CHE WITH DESCENDER"));
        data.insert(std::make_pair(0x04bf,"CYRILLIC SMALL LETTER ABKHASIAN CHE WITH DESCENDER"));
        data.insert(std::make_pair(0x04c0,"CYRILLIC LETTER PALOCHKA"));
        data.insert(std::make_pair(0x04c1,"CYRILLIC CAPITAL LETTER ZHE WITH BREVE"));
        data.insert(std::make_pair(0x04c2,"CYRILLIC SMALL LETTER ZHE WITH BREVE"));
        data.insert(std::make_pair(0x04c3,"CYRILLIC CAPITAL LETTER KA WITH HOOK"));
        data.insert(std::make_pair(0x04c4,"CYRILLIC SMALL LETTER KA WITH HOOK"));
        data.insert(std::make_pair(0x04c5,"CYRILLIC CAPITAL LETTER EL WITH TAIL"));
        data.insert(std::make_pair(0x04c6,"CYRILLIC SMALL LETTER EL WITH TAIL"));
        data.insert(std::make_pair(0x04c7,"CYRILLIC CAPITAL LETTER EN WITH HOOK"));
        data.insert(std::make_pair(0x04c8,"CYRILLIC SMALL LETTER EN WITH HOOK"));
        data.insert(std::make_pair(0x04c9,"CYRILLIC CAPITAL LETTER EN WITH TAIL"));
        data.insert(std::make_pair(0x04ca,"CYRILLIC SMALL LETTER EN WITH TAIL"));
        data.insert(std::make_pair(0x04cb,"CYRILLIC CAPITAL LETTER KHAKASSIAN CHE"));
        data.insert(std::make_pair(0x04cc,"CYRILLIC SMALL LETTER KHAKASSIAN CHE"));
        data.insert(std::make_pair(0x04cd,"CYRILLIC CAPITAL LETTER EM WITH TAIL"));
        data.insert(std::make_pair(0x04ce,"CYRILLIC SMALL LETTER EM WITH TAIL"));
        data.insert(std::make_pair(0x04cf,"CYRILLIC SMALL LETTER PALOCHKA"));
        data.insert(std::make_pair(0x04d0,"CYRILLIC CAPITAL LETTER A WITH BREVE"));
        data.insert(std::make_pair(0x04d1,"CYRILLIC SMALL LETTER A WITH BREVE"));
        data.insert(std::make_pair(0x04d2,"CYRILLIC CAPITAL LETTER A WITH DIAERESIS"));
        data.insert(std::make_pair(0x04d3,"CYRILLIC SMALL LETTER A WITH DIAERESIS"));
        data.insert(std::make_pair(0x04d4,"CYRILLIC CAPITAL LIGATURE A IE"));
        data.insert(std::make_pair(0x04d5,"CYRILLIC SMALL LIGATURE A IE"));
        data.insert(std::make_pair(0x04d6,"CYRILLIC CAPITAL LETTER IE WITH BREVE"));
        data.insert(std::make_pair(0x04d7,"CYRILLIC SMALL LETTER IE WITH BREVE"));
        data.insert(std::make_pair(0x04d8,"CYRILLIC CAPITAL LETTER SCHWA"));
        data.insert(std::make_pair(0x04d9,"CYRILLIC SMALL LETTER SCHWA"));
        data.insert(std::make_pair(0x04da,"CYRILLIC CAPITAL LETTER SCHWA WITH DIAERESIS"));
        data.insert(std::make_pair(0x04db,"CYRILLIC SMALL LETTER SCHWA WITH DIAERESIS"));
        data.insert(std::make_pair(0x04dc,"CYRILLIC CAPITAL LETTER ZHE WITH DIAERESIS"));
        data.insert(std::make_pair(0x04dd,"CYRILLIC SMALL LETTER ZHE WITH DIAERESIS"));
        data.insert(std::make_pair(0x04de,"CYRILLIC CAPITAL LETTER ZE WITH DIAERESIS"));
        data.insert(std::make_pair(0x04df,"CYRILLIC SMALL LETTER ZE WITH DIAERESIS"));
        data.insert(std::make_pair(0x04e0,"CYRILLIC CAPITAL LETTER ABKHASIAN DZE"));
        data.insert(std::make_pair(0x04e1,"CYRILLIC SMALL LETTER ABKHASIAN DZE"));
        data.insert(std::make_pair(0x04e2,"CYRILLIC CAPITAL LETTER I WITH MACRON"));
        data.insert(std::make_pair(0x04e3,"CYRILLIC SMALL LETTER I WITH MACRON"));
        data.insert(std::make_pair(0x04e4,"CYRILLIC CAPITAL LETTER I WITH DIAERESIS"));
        data.insert(std::make_pair(0x04e5,"CYRILLIC SMALL LETTER I WITH DIAERESIS"));
        data.insert(std::make_pair(0x04e6,"CYRILLIC CAPITAL LETTER O WITH DIAERESIS"));
        data.insert(std::make_pair(0x04e7,"CYRILLIC SMALL LETTER O WITH DIAERESIS"));
        data.insert(std::make_pair(0x04e8,"CYRILLIC CAPITAL LETTER BARRED O"));
        data.insert(std::make_pair(0x04e9,"CYRILLIC SMALL LETTER BARRED O"));
        data.insert(std::make_pair(0x04ea,"CYRILLIC CAPITAL LETTER BARRED O WITH DIAERESIS"));
        data.insert(std::make_pair(0x04eb,"CYRILLIC SMALL LETTER BARRED O WITH DIAERESIS"));
        data.insert(std::make_pair(0x04ec,"CYRILLIC CAPITAL LETTER E WITH DIAERESIS"));
        data.insert(std::make_pair(0x04ed,"CYRILLIC SMALL LETTER E WITH DIAERESIS"));
        data.insert(std::make_pair(0x04ee,"CYRILLIC CAPITAL LETTER U WITH MACRON"));
        data.insert(std::make_pair(0x04ef,"CYRILLIC SMALL LETTER U WITH MACRON"));
        data.insert(std::make_pair(0x04f0,"CYRILLIC CAPITAL LETTER U WITH DIAERESIS"));
        data.insert(std::make_pair(0x04f1,"CYRILLIC SMALL LETTER U WITH DIAERESIS"));
        data.insert(std::make_pair(0x04f2,"CYRILLIC CAPITAL LETTER U WITH DOUBLE ACUTE"));
        data.insert(std::make_pair(0x04f3,"CYRILLIC SMALL LETTER U WITH DOUBLE ACUTE"));
        data.insert(std::make_pair(0x04f4,"CYRILLIC CAPITAL LETTER CHE WITH DIAERESIS"));
        data.insert(std::make_pair(0x04f5,"CYRILLIC SMALL LETTER CHE WITH DIAERESIS"));
        data.insert(std::make_pair(0x04f6,"CYRILLIC CAPITAL LETTER GHE WITH DESCENDER"));
        data.insert(std::make_pair(0x04f7,"CYRILLIC SMALL LETTER GHE WITH DESCENDER"));
        data.insert(std::make_pair(0x04f8,"CYRILLIC CAPITAL LETTER YERU WITH DIAERESIS"));
        data.insert(std::make_pair(0x04f9,"CYRILLIC SMALL LETTER YERU WITH DIAERESIS"));
        data.insert(std::make_pair(0x04fa,"CYRILLIC CAPITAL LETTER GHE WITH STROKE AND HOOK"));
        data.insert(std::make_pair(0x04fb,"CYRILLIC SMALL LETTER GHE WITH STROKE AND HOOK"));
        data.insert(std::make_pair(0x04fc,"CYRILLIC CAPITAL LETTER HA WITH HOOK"));
        data.insert(std::make_pair(0x04fd,"CYRILLIC SMALL LETTER HA WITH HOOK"));
        data.insert(std::make_pair(0x04fe,"CYRILLIC CAPITAL LETTER HA WITH STROKE"));
        data.insert(std::make_pair(0x04ff,"CYRILLIC SMALL LETTER HA WITH STROKE"));
        data.insert(std::make_pair(0x0500,"CYRILLIC CAPITAL LETTER KOMI DE"));
        data.insert(std::make_pair(0x0501,"CYRILLIC SMALL LETTER KOMI DE"));
        data.insert(std::make_pair(0x0502,"CYRILLIC CAPITAL LETTER KOMI DJE"));
        data.insert(std::make_pair(0x0503,"CYRILLIC SMALL LETTER KOMI DJE"));
        data.insert(std::make_pair(0x0504,"CYRILLIC CAPITAL LETTER KOMI ZJE"));
        data.insert(std::make_pair(0x0505,"CYRILLIC SMALL LETTER KOMI ZJE"));
        data.insert(std::make_pair(0x0506,"CYRILLIC CAPITAL LETTER KOMI DZJE"));
        data.insert(std::make_pair(0x0507,"CYRILLIC SMALL LETTER KOMI DZJE"));
        data.insert(std::make_pair(0x0508,"CYRILLIC CAPITAL LETTER KOMI LJE"));
        data.insert(std::make_pair(0x0509,"CYRILLIC SMALL LETTER KOMI LJE"));
        data.insert(std::make_pair(0x050a,"CYRILLIC CAPITAL LETTER KOMI NJE"));
        data.insert(std::make_pair(0x050b,"CYRILLIC SMALL LETTER KOMI NJE"));
        data.insert(std::make_pair(0x050c,"CYRILLIC CAPITAL LETTER KOMI SJE"));
        data.insert(std::make_pair(0x050d,"CYRILLIC SMALL LETTER KOMI SJE"));
        data.insert(std::make_pair(0x050e,"CYRILLIC CAPITAL LETTER KOMI TJE"));
        data.insert(std::make_pair(0x050f,"CYRILLIC SMALL LETTER KOMI TJE"));
        data.insert(std::make_pair(0x0510,"CYRILLIC CAPITAL LETTER REVERSED ZE"));
        data.insert(std::make_pair(0x0511,"CYRILLIC SMALL LETTER REVERSED ZE"));
        data.insert(std::make_pair(0x0512,"CYRILLIC CAPITAL LETTER EL WITH HOOK"));
        data.insert(std::make_pair(0x0513,"CYRILLIC SMALL LETTER EL WITH HOOK"));
        data.insert(std::make_pair(0x0514,"CYRILLIC CAPITAL LETTER LHA"));
        data.insert(std::make_pair(0x0515,"CYRILLIC SMALL LETTER LHA"));
        data.insert(std::make_pair(0x0516,"CYRILLIC CAPITAL LETTER RHA"));
        data.insert(std::make_pair(0x0517,"CYRILLIC SMALL LETTER RHA"));
        data.insert(std::make_pair(0x0518,"CYRILLIC CAPITAL LETTER YAE"));
        data.insert(std::make_pair(0x0519,"CYRILLIC SMALL LETTER YAE"));
        data.insert(std::make_pair(0x051a,"CYRILLIC CAPITAL LETTER QA"));
        data.insert(std::make_pair(0x051b,"CYRILLIC SMALL LETTER QA"));
        data.insert(std::make_pair(0x051c,"CYRILLIC CAPITAL LETTER WE"));
        data.insert(std::make_pair(0x051d,"CYRILLIC SMALL LETTER WE"));
        data.insert(std::make_pair(0x051e,"CYRILLIC CAPITAL LETTER ALEUT KA"));
        data.insert(std::make_pair(0x051f,"CYRILLIC SMALL LETTER ALEUT KA"));
        data.insert(std::make_pair(0x0520,"CYRILLIC CAPITAL LETTER EL WITH MIDDLE HOOK"));
        data.insert(std::make_pair(0x0521,"CYRILLIC SMALL LETTER EL WITH MIDDLE HOOK"));
        data.insert(std::make_pair(0x0522,"CYRILLIC CAPITAL LETTER EN WITH MIDDLE HOOK"));
        data.insert(std::make_pair(0x0523,"CYRILLIC SMALL LETTER EN WITH MIDDLE HOOK"));
        data.insert(std::make_pair(0x0524,"CYRILLIC CAPITAL LETTER PE WITH DESCENDER"));
        data.insert(std::make_pair(0x0525,"CYRILLIC SMALL LETTER PE WITH DESCENDER"));
        data.insert(std::make_pair(0x0526,"CYRILLIC CAPITAL LETTER SHHA WITH DESCENDER"));
        data.insert(std::make_pair(0x0527,"CYRILLIC SMALL LETTER SHHA WITH DESCENDER"));
        data.insert(std::make_pair(0x0528,"CYRILLIC CAPITAL LETTER EN WITH LEFT HOOK"));
        data.insert(std::make_pair(0x0529,"CYRILLIC SMALL LETTER EN WITH LEFT HOOK"));
        data.insert(std::make_pair(0x052a,"CYRILLIC CAPITAL LETTER DZZHE"));
        data.insert(std::make_pair(0x052b,"CYRILLIC SMALL LETTER DZZHE"));
        data.insert(std::make_pair(0x052c,"CYRILLIC CAPITAL LETTER DCHE"));
        data.insert(std::make_pair(0x052d,"CYRILLIC SMALL LETTER DCHE"));
        data.insert(std::make_pair(0x052e,"CYRILLIC CAPITAL LETTER EL WITH DESCENDER"));
        data.insert(std::make_pair(0x052f,"CYRILLIC SMALL LETTER EL WITH DESCENDER"));
        data.insert(std::make_pair(0x0531,"ARMENIAN CAPITAL LETTER AYB"));
        data.insert(std::make_pair(0x0532,"ARMENIAN CAPITAL LETTER BEN"));
        data.insert(std::make_pair(0x0533,"ARMENIAN CAPITAL LETTER GIM"));
        data.insert(std::make_pair(0x0534,"ARMENIAN CAPITAL LETTER DA"));
        data.insert(std::make_pair(0x0535,"ARMENIAN CAPITAL LETTER ECH"));
        data.insert(std::make_pair(0x0536,"ARMENIAN CAPITAL LETTER ZA"));
        data.insert(std::make_pair(0x0537,"ARMENIAN CAPITAL LETTER EH"));
        data.insert(std::make_pair(0x0538,"ARMENIAN CAPITAL LETTER ET"));
        data.insert(std::make_pair(0x0539,"ARMENIAN CAPITAL LETTER TO"));
        data.insert(std::make_pair(0x053a,"ARMENIAN CAPITAL LETTER ZHE"));
        data.insert(std::make_pair(0x053b,"ARMENIAN CAPITAL LETTER INI"));
        data.insert(std::make_pair(0x053c,"ARMENIAN CAPITAL LETTER LIWN"));
        data.insert(std::make_pair(0x053d,"ARMENIAN CAPITAL LETTER XEH"));
        data.insert(std::make_pair(0x053e,"ARMENIAN CAPITAL LETTER CA"));
        data.insert(std::make_pair(0x053f,"ARMENIAN CAPITAL LETTER KEN"));
        data.insert(std::make_pair(0x0540,"ARMENIAN CAPITAL LETTER HO"));
        data.insert(std::make_pair(0x0541,"ARMENIAN CAPITAL LETTER JA"));
        data.insert(std::make_pair(0x0542,"ARMENIAN CAPITAL LETTER GHAD"));
        data.insert(std::make_pair(0x0543,"ARMENIAN CAPITAL LETTER CHEH"));
        data.insert(std::make_pair(0x0544,"ARMENIAN CAPITAL LETTER MEN"));
        data.insert(std::make_pair(0x0545,"ARMENIAN CAPITAL LETTER YI"));
        data.insert(std::make_pair(0x0546,"ARMENIAN CAPITAL LETTER NOW"));
        data.insert(std::make_pair(0x0547,"ARMENIAN CAPITAL LETTER SHA"));
        data.insert(std::make_pair(0x0548,"ARMENIAN CAPITAL LETTER VO"));
        data.insert(std::make_pair(0x0549,"ARMENIAN CAPITAL LETTER CHA"));
        data.insert(std::make_pair(0x054a,"ARMENIAN CAPITAL LETTER PEH"));
        data.insert(std::make_pair(0x054b,"ARMENIAN CAPITAL LETTER JHEH"));
        data.insert(std::make_pair(0x054c,"ARMENIAN CAPITAL LETTER RA"));
        data.insert(std::make_pair(0x054d,"ARMENIAN CAPITAL LETTER SEH"));
        data.insert(std::make_pair(0x054e,"ARMENIAN CAPITAL LETTER VEW"));
        data.insert(std::make_pair(0x054f,"ARMENIAN CAPITAL LETTER TIWN"));
        data.insert(std::make_pair(0x0550,"ARMENIAN CAPITAL LETTER REH"));
        data.insert(std::make_pair(0x0551,"ARMENIAN CAPITAL LETTER CO"));
        data.insert(std::make_pair(0x0552,"ARMENIAN CAPITAL LETTER YIWN"));
        data.insert(std::make_pair(0x0553,"ARMENIAN CAPITAL LETTER PIWR"));
        data.insert(std::make_pair(0x0554,"ARMENIAN CAPITAL LETTER KEH"));
        data.insert(std::make_pair(0x0555,"ARMENIAN CAPITAL LETTER OH"));
        data.insert(std::make_pair(0x0556,"ARMENIAN CAPITAL LETTER FEH"));
        data.insert(std::make_pair(0x0559,"ARMENIAN MODIFIER LETTER LEFT HALF RING"));
        data.insert(std::make_pair(0x055a,"ARMENIAN APOSTROPHE"));
        data.insert(std::make_pair(0x055b,"ARMENIAN EMPHASIS MARK"));
        data.insert(std::make_pair(0x055c,"ARMENIAN EXCLAMATION MARK"));
        data.insert(std::make_pair(0x055d,"ARMENIAN COMMA"));
        data.insert(std::make_pair(0x055e,"ARMENIAN QUESTION MARK"));
        data.insert(std::make_pair(0x055f,"ARMENIAN ABBREVIATION MARK"));
        data.insert(std::make_pair(0x0560,"ARMENIAN SMALL LETTER TURNED AYB"));
        data.insert(std::make_pair(0x0561,"ARMENIAN SMALL LETTER AYB"));
        data.insert(std::make_pair(0x0562,"ARMENIAN SMALL LETTER BEN"));
        data.insert(std::make_pair(0x0563,"ARMENIAN SMALL LETTER GIM"));
        data.insert(std::make_pair(0x0564,"ARMENIAN SMALL LETTER DA"));
        data.insert(std::make_pair(0x0565,"ARMENIAN SMALL LETTER ECH"));
        data.insert(std::make_pair(0x0566,"ARMENIAN SMALL LETTER ZA"));
        data.insert(std::make_pair(0x0567,"ARMENIAN SMALL LETTER EH"));
        data.insert(std::make_pair(0x0568,"ARMENIAN SMALL LETTER ET"));
        data.insert(std::make_pair(0x0569,"ARMENIAN SMALL LETTER TO"));
        data.insert(std::make_pair(0x056a,"ARMENIAN SMALL LETTER ZHE"));
        data.insert(std::make_pair(0x056b,"ARMENIAN SMALL LETTER INI"));
        data.insert(std::make_pair(0x056c,"ARMENIAN SMALL LETTER LIWN"));
        data.insert(std::make_pair(0x056d,"ARMENIAN SMALL LETTER XEH"));
        data.insert(std::make_pair(0x056e,"ARMENIAN SMALL LETTER CA"));
        data.insert(std::make_pair(0x056f,"ARMENIAN SMALL LETTER KEN"));
        data.insert(std::make_pair(0x0570,"ARMENIAN SMALL LETTER HO"));
        data.insert(std::make_pair(0x0571,"ARMENIAN SMALL LETTER JA"));
        data.insert(std::make_pair(0x0572,"ARMENIAN SMALL LETTER GHAD"));
        data.insert(std::make_pair(0x0573,"ARMENIAN SMALL LETTER CHEH"));
        data.insert(std::make_pair(0x0574,"ARMENIAN SMALL LETTER MEN"));
        data.insert(std::make_pair(0x0575,"ARMENIAN SMALL LETTER YI"));
        data.insert(std::make_pair(0x0576,"ARMENIAN SMALL LETTER NOW"));
        data.insert(std::make_pair(0x0577,"ARMENIAN SMALL LETTER SHA"));
        data.insert(std::make_pair(0x0578,"ARMENIAN SMALL LETTER VO"));
        data.insert(std::make_pair(0x0579,"ARMENIAN SMALL LETTER CHA"));
        data.insert(std::make_pair(0x057a,"ARMENIAN SMALL LETTER PEH"));
        data.insert(std::make_pair(0x057b,"ARMENIAN SMALL LETTER JHEH"));
        data.insert(std::make_pair(0x057c,"ARMENIAN SMALL LETTER RA"));
        data.insert(std::make_pair(0x057d,"ARMENIAN SMALL LETTER SEH"));
        data.insert(std::make_pair(0x057e,"ARMENIAN SMALL LETTER VEW"));
        data.insert(std::make_pair(0x057f,"ARMENIAN SMALL LETTER TIWN"));
        data.insert(std::make_pair(0x0580,"ARMENIAN SMALL LETTER REH"));
        data.insert(std::make_pair(0x0581,"ARMENIAN SMALL LETTER CO"));
        data.insert(std::make_pair(0x0582,"ARMENIAN SMALL LETTER YIWN"));
        data.insert(std::make_pair(0x0583,"ARMENIAN SMALL LETTER PIWR"));
        data.insert(std::make_pair(0x0584,"ARMENIAN SMALL LETTER KEH"));
        data.insert(std::make_pair(0x0585,"ARMENIAN SMALL LETTER OH"));
        data.insert(std::make_pair(0x0586,"ARMENIAN SMALL LETTER FEH"));
        data.insert(std::make_pair(0x0587,"ARMENIAN SMALL LIGATURE ECH YIWN"));
        data.insert(std::make_pair(0x0588,"ARMENIAN SMALL LETTER YI WITH STROKE"));
        data.insert(std::make_pair(0x0589,"ARMENIAN FULL STOP"));
        data.insert(std::make_pair(0x058a,"ARMENIAN HYPHEN"));
        data.insert(std::make_pair(0x058d,"RIGHT-FACING ARMENIAN ETERNITY SIGN"));
        data.insert(std::make_pair(0x058e,"LEFT-FACING ARMENIAN ETERNITY SIGN"));
        data.insert(std::make_pair(0x058f,"ARMENIAN DRAM SIGN"));
        data.insert(std::make_pair(0x0591,"HEBREW ACCENT ETNAHTA"));
        data.insert(std::make_pair(0x0592,"HEBREW ACCENT SEGOL"));
        data.insert(std::make_pair(0x0593,"HEBREW ACCENT SHALSHELET"));
        data.insert(std::make_pair(0x0594,"HEBREW ACCENT ZAQEF QATAN"));
        data.insert(std::make_pair(0x0595,"HEBREW ACCENT ZAQEF GADOL"));
        data.insert(std::make_pair(0x0596,"HEBREW ACCENT TIPEHA"));
        data.insert(std::make_pair(0x0597,"HEBREW ACCENT REVIA"));
        data.insert(std::make_pair(0x0598,"HEBREW ACCENT ZARQA"));
        data.insert(std::make_pair(0x0599,"HEBREW ACCENT PASHTA"));
        data.insert(std::make_pair(0x059a,"HEBREW ACCENT YETIV"));
        data.insert(std::make_pair(0x059b,"HEBREW ACCENT TEVIR"));
        data.insert(std::make_pair(0x059c,"HEBREW ACCENT GERESH"));
        data.insert(std::make_pair(0x059d,"HEBREW ACCENT GERESH MUQDAM"));
        data.insert(std::make_pair(0x059e,"HEBREW ACCENT GERSHAYIM"));
        data.insert(std::make_pair(0x059f,"HEBREW ACCENT QARNEY PARA"));
        data.insert(std::make_pair(0x05a0,"HEBREW ACCENT TELISHA GEDOLA"));
        data.insert(std::make_pair(0x05a1,"HEBREW ACCENT PAZER"));
        data.insert(std::make_pair(0x05a2,"HEBREW ACCENT ATNAH HAFUKH"));
        data.insert(std::make_pair(0x05a3,"HEBREW ACCENT MUNAH"));
        data.insert(std::make_pair(0x05a4,"HEBREW ACCENT MAHAPAKH"));
        data.insert(std::make_pair(0x05a5,"HEBREW ACCENT MERKHA"));
        data.insert(std::make_pair(0x05a6,"HEBREW ACCENT MERKHA KEFULA"));
        data.insert(std::make_pair(0x05a7,"HEBREW ACCENT DARGA"));
        data.insert(std::make_pair(0x05a8,"HEBREW ACCENT QADMA"));
        data.insert(std::make_pair(0x05a9,"HEBREW ACCENT TELISHA QETANA"));
        data.insert(std::make_pair(0x05aa,"HEBREW ACCENT YERAH BEN YOMO"));
        data.insert(std::make_pair(0x05ab,"HEBREW ACCENT OLE"));
        data.insert(std::make_pair(0x05ac,"HEBREW ACCENT ILUY"));
        data.insert(std::make_pair(0x05ad,"HEBREW ACCENT DEHI"));
        data.insert(std::make_pair(0x05ae,"HEBREW ACCENT ZINOR"));
        data.insert(std::make_pair(0x05af,"HEBREW MARK MASORA CIRCLE"));
        data.insert(std::make_pair(0x05b0,"HEBREW POINT SHEVA"));
        data.insert(std::make_pair(0x05b1,"HEBREW POINT HATAF SEGOL"));
        data.insert(std::make_pair(0x05b2,"HEBREW POINT HATAF PATAH"));
        data.insert(std::make_pair(0x05b3,"HEBREW POINT HATAF QAMATS"));
        data.insert(std::make_pair(0x05b4,"HEBREW POINT HIRIQ"));
        data.insert(std::make_pair(0x05b5,"HEBREW POINT TSERE"));
        data.insert(std::make_pair(0x05b6,"HEBREW POINT SEGOL"));
        data.insert(std::make_pair(0x05b7,"HEBREW POINT PATAH"));
        data.insert(std::make_pair(0x05b8,"HEBREW POINT QAMATS"));
        data.insert(std::make_pair(0x05b9,"HEBREW POINT HOLAM"));
        data.insert(std::make_pair(0x05ba,"HEBREW POINT HOLAM HASER FOR VAV"));
        data.insert(std::make_pair(0x05bb,"HEBREW POINT QUBUTS"));
        data.insert(std::make_pair(0x05bc,"HEBREW POINT DAGESH OR MAPIQ"));
        data.insert(std::make_pair(0x05bd,"HEBREW POINT METEG"));
        data.insert(std::make_pair(0x05be,"HEBREW PUNCTUATION MAQAF"));
        data.insert(std::make_pair(0x05bf,"HEBREW POINT RAFE"));
        data.insert(std::make_pair(0x05c0,"HEBREW PUNCTUATION PASEQ"));
        data.insert(std::make_pair(0x05c1,"HEBREW POINT SHIN DOT"));
        data.insert(std::make_pair(0x05c2,"HEBREW POINT SIN DOT"));
        data.insert(std::make_pair(0x05c3,"HEBREW PUNCTUATION SOF PASUQ"));
        data.insert(std::make_pair(0x05c4,"HEBREW MARK UPPER DOT"));
        data.insert(std::make_pair(0x05c5,"HEBREW MARK LOWER DOT"));
        data.insert(std::make_pair(0x05c6,"HEBREW PUNCTUATION NUN HAFUKHA"));
        data.insert(std::make_pair(0x05c7,"HEBREW POINT QAMATS QATAN"));
        data.insert(std::make_pair(0x05d0,"HEBREW LETTER ALEF"));
        data.insert(std::make_pair(0x05d1,"HEBREW LETTER BET"));
        data.insert(std::make_pair(0x05d2,"HEBREW LETTER GIMEL"));
        data.insert(std::make_pair(0x05d3,"HEBREW LETTER DALET"));
        data.insert(std::make_pair(0x05d4,"HEBREW LETTER HE"));
        data.insert(std::make_pair(0x05d5,"HEBREW LETTER VAV"));
        data.insert(std::make_pair(0x05d6,"HEBREW LETTER ZAYIN"));
        data.insert(std::make_pair(0x05d7,"HEBREW LETTER HET"));
        data.insert(std::make_pair(0x05d8,"HEBREW LETTER TET"));
        data.insert(std::make_pair(0x05d9,"HEBREW LETTER YOD"));
        data.insert(std::make_pair(0x05da,"HEBREW LETTER FINAL KAF"));
        data.insert(std::make_pair(0x05db,"HEBREW LETTER KAF"));
        data.insert(std::make_pair(0x05dc,"HEBREW LETTER LAMED"));
        data.insert(std::make_pair(0x05dd,"HEBREW LETTER FINAL MEM"));
        data.insert(std::make_pair(0x05de,"HEBREW LETTER MEM"));
        data.insert(std::make_pair(0x05df,"HEBREW LETTER FINAL NUN"));
        data.insert(std::make_pair(0x05e0,"HEBREW LETTER NUN"));
        data.insert(std::make_pair(0x05e1,"HEBREW LETTER SAMEKH"));
        data.insert(std::make_pair(0x05e2,"HEBREW LETTER AYIN"));
        data.insert(std::make_pair(0x05e3,"HEBREW LETTER FINAL PE"));
        data.insert(std::make_pair(0x05e4,"HEBREW LETTER PE"));
        data.insert(std::make_pair(0x05e5,"HEBREW LETTER FINAL TSADI"));
        data.insert(std::make_pair(0x05e6,"HEBREW LETTER TSADI"));
        data.insert(std::make_pair(0x05e7,"HEBREW LETTER QOF"));
        data.insert(std::make_pair(0x05e8,"HEBREW LETTER RESH"));
        data.insert(std::make_pair(0x05e9,"HEBREW LETTER SHIN"));
        data.insert(std::make_pair(0x05ea,"HEBREW LETTER TAV"));
        data.insert(std::make_pair(0x05ef,"HEBREW YOD TRIANGLE"));
        data.insert(std::make_pair(0x05f0,"HEBREW LIGATURE YIDDISH DOUBLE VAV"));
        data.insert(std::make_pair(0x05f1,"HEBREW LIGATURE YIDDISH VAV YOD"));
        data.insert(std::make_pair(0x05f2,"HEBREW LIGATURE YIDDISH DOUBLE YOD"));
        data.insert(std::make_pair(0x05f3,"HEBREW PUNCTUATION GERESH"));
        data.insert(std::make_pair(0x05f4,"HEBREW PUNCTUATION GERSHAYIM"));
        data.insert(std::make_pair(0x0600,"ARABIC NUMBER SIGN"));
        data.insert(std::make_pair(0x0601,"ARABIC SIGN SANAH"));
        data.insert(std::make_pair(0x0602,"ARABIC FOOTNOTE MARKER"));
        data.insert(std::make_pair(0x0603,"ARABIC SIGN SAFHA"));
        data.insert(std::make_pair(0x0604,"ARABIC SIGN SAMVAT"));
        data.insert(std::make_pair(0x0605,"ARABIC NUMBER MARK ABOVE"));
        data.insert(std::make_pair(0x0606,"ARABIC-INDIC CUBE ROOT"));
        data.insert(std::make_pair(0x0607,"ARABIC-INDIC FOURTH ROOT"));
        data.insert(std::make_pair(0x0608,"ARABIC RAY"));
        data.insert(std::make_pair(0x0609,"ARABIC-INDIC PER MILLE SIGN"));
        data.insert(std::make_pair(0x060a,"ARABIC-INDIC PER TEN THOUSAND SIGN"));
        data.insert(std::make_pair(0x060b,"AFGHANI SIGN"));
        data.insert(std::make_pair(0x060c,"ARABIC COMMA"));
        data.insert(std::make_pair(0x060d,"ARABIC DATE SEPARATOR"));
        data.insert(std::make_pair(0x060e,"ARABIC POETIC VERSE SIGN"));
        data.insert(std::make_pair(0x060f,"ARABIC SIGN MISRA"));
        data.insert(std::make_pair(0x0610,"ARABIC SIGN SALLALLAHOU ALAYHE WASSALLAM"));
        data.insert(std::make_pair(0x0611,"ARABIC SIGN ALAYHE ASSALLAM"));
        data.insert(std::make_pair(0x0612,"ARABIC SIGN RAHMATULLAH ALAYHE"));
        data.insert(std::make_pair(0x0613,"ARABIC SIGN RADI ALLAHOU ANHU"));
        data.insert(std::make_pair(0x0614,"ARABIC SIGN TAKHALLUS"));
        data.insert(std::make_pair(0x0615,"ARABIC SMALL HIGH TAH"));
        data.insert(std::make_pair(0x0616,"ARABIC SMALL HIGH LIGATURE ALEF WITH LAM WITH YEH"));
        data.insert(std::make_pair(0x0617,"ARABIC SMALL HIGH ZAIN"));
        data.insert(std::make_pair(0x0618,"ARABIC SMALL FATHA"));
        data.insert(std::make_pair(0x0619,"ARABIC SMALL DAMMA"));
        data.insert(std::make_pair(0x061a,"ARABIC SMALL KASRA"));
        data.insert(std::make_pair(0x061b,"ARABIC SEMICOLON"));
        data.insert(std::make_pair(0x061c,"ARABIC LETTER MARK"));
        data.insert(std::make_pair(0x061d,"ARABIC END OF TEXT MARK"));
        data.insert(std::make_pair(0x061e,"ARABIC TRIPLE DOT PUNCTUATION MARK"));
        data.insert(std::make_pair(0x061f,"ARABIC QUESTION MARK"));
        data.insert(std::make_pair(0x0620,"ARABIC LETTER KASHMIRI YEH"));
        data.insert(std::make_pair(0x0621,"ARABIC LETTER HAMZA"));
        data.insert(std::make_pair(0x0622,"ARABIC LETTER ALEF WITH MADDA ABOVE"));
        data.insert(std::make_pair(0x0623,"ARABIC LETTER ALEF WITH HAMZA ABOVE"));
        data.insert(std::make_pair(0x0624,"ARABIC LETTER WAW WITH HAMZA ABOVE"));
        data.insert(std::make_pair(0x0625,"ARABIC LETTER ALEF WITH HAMZA BELOW"));
        data.insert(std::make_pair(0x0626,"ARABIC LETTER YEH WITH HAMZA ABOVE"));
        data.insert(std::make_pair(0x0627,"ARABIC LETTER ALEF"));
        data.insert(std::make_pair(0x0628,"ARABIC LETTER BEH"));
        data.insert(std::make_pair(0x0629,"ARABIC LETTER TEH MARBUTA"));
        data.insert(std::make_pair(0x062a,"ARABIC LETTER TEH"));
        data.insert(std::make_pair(0x062b,"ARABIC LETTER THEH"));
        data.insert(std::make_pair(0x062c,"ARABIC LETTER JEEM"));
        data.insert(std::make_pair(0x062d,"ARABIC LETTER HAH"));
        data.insert(std::make_pair(0x062e,"ARABIC LETTER KHAH"));
        data.insert(std::make_pair(0x062f,"ARABIC LETTER DAL"));
        data.insert(std::make_pair(0x0630,"ARABIC LETTER THAL"));
        data.insert(std::make_pair(0x0631,"ARABIC LETTER REH"));
        data.insert(std::make_pair(0x0632,"ARABIC LETTER ZAIN"));
        data.insert(std::make_pair(0x0633,"ARABIC LETTER SEEN"));
        data.insert(std::make_pair(0x0634,"ARABIC LETTER SHEEN"));
        data.insert(std::make_pair(0x0635,"ARABIC LETTER SAD"));
        data.insert(std::make_pair(0x0636,"ARABIC LETTER DAD"));
        data.insert(std::make_pair(0x0637,"ARABIC LETTER TAH"));
        data.insert(std::make_pair(0x0638,"ARABIC LETTER ZAH"));
        data.insert(std::make_pair(0x0639,"ARABIC LETTER AIN"));
        data.insert(std::make_pair(0x063a,"ARABIC LETTER GHAIN"));
        data.insert(std::make_pair(0x063b,"ARABIC LETTER KEHEH WITH TWO DOTS ABOVE"));
        data.insert(std::make_pair(0x063c,"ARABIC LETTER KEHEH WITH THREE DOTS BELOW"));
        data.insert(std::make_pair(0x063d,"ARABIC LETTER FARSI YEH WITH INVERTED V"));
        data.insert(std::make_pair(0x063e,"ARABIC LETTER FARSI YEH WITH TWO DOTS ABOVE"));
        data.insert(std::make_pair(0x063f,"ARABIC LETTER FARSI YEH WITH THREE DOTS ABOVE"));
        data.insert(std::make_pair(0x0640,"ARABIC TATWEEL"));
        data.insert(std::make_pair(0x0641,"ARABIC LETTER FEH"));
        data.insert(std::make_pair(0x0642,"ARABIC LETTER QAF"));
        data.insert(std::make_pair(0x0643,"ARABIC LETTER KAF"));
        data.insert(std::make_pair(0x0644,"ARABIC LETTER LAM"));
        data.insert(std::make_pair(0x0645,"ARABIC LETTER MEEM"));
        data.insert(std::make_pair(0x0646,"ARABIC LETTER NOON"));
        data.insert(std::make_pair(0x0647,"ARABIC LETTER HEH"));
        data.insert(std::make_pair(0x0648,"ARABIC LETTER WAW"));
        data.insert(std::make_pair(0x0649,"ARABIC LETTER ALEF MAKSURA"));
        data.insert(std::make_pair(0x064a,"ARABIC LETTER YEH"));
        data.insert(std::make_pair(0x064b,"ARABIC FATHATAN"));
        data.insert(std::make_pair(0x064c,"ARABIC DAMMATAN"));
        data.insert(std::make_pair(0x064d,"ARABIC KASRATAN"));
        data.insert(std::make_pair(0x064e,"ARABIC FATHA"));
        data.insert(std::make_pair(0x064f,"ARABIC DAMMA"));
        data.insert(std::make_pair(0x0650,"ARABIC KASRA"));
        data.insert(std::make_pair(0x0651,"ARABIC SHADDA"));
        data.insert(std::make_pair(0x0652,"ARABIC SUKUN"));
        data.insert(std::make_pair(0x0653,"ARABIC MADDAH ABOVE"));
        data.insert(std::make_pair(0x0654,"ARABIC HAMZA ABOVE"));
        data.insert(std::make_pair(0x0655,"ARABIC HAMZA BELOW"));
        data.insert(std::make_pair(0x0656,"ARABIC SUBSCRIPT ALEF"));
        data.insert(std::make_pair(0x0657,"ARABIC INVERTED DAMMA"));
        data.insert(std::make_pair(0x0658,"ARABIC MARK NOON GHUNNA"));
        data.insert(std::make_pair(0x0659,"ARABIC ZWARAKAY"));
        data.insert(std::make_pair(0x065a,"ARABIC VOWEL SIGN SMALL V ABOVE"));
        data.insert(std::make_pair(0x065b,"ARABIC VOWEL SIGN INVERTED SMALL V ABOVE"));
        data.insert(std::make_pair(0x065c,"ARABIC VOWEL SIGN DOT BELOW"));
        data.insert(std::make_pair(0x065d,"ARABIC REVERSED DAMMA"));
        data.insert(std::make_pair(0x065e,"ARABIC FATHA WITH TWO DOTS"));
        data.insert(std::make_pair(0x065f,"ARABIC WAVY HAMZA BELOW"));
        data.insert(std::make_pair(0x0660,"ARABIC-INDIC DIGIT ZERO"));
        data.insert(std::make_pair(0x0661,"ARABIC-INDIC DIGIT ONE"));
        data.insert(std::make_pair(0x0662,"ARABIC-INDIC DIGIT TWO"));
        data.insert(std::make_pair(0x0663,"ARABIC-INDIC DIGIT THREE"));
        data.insert(std::make_pair(0x0664,"ARABIC-INDIC DIGIT FOUR"));
        data.insert(std::make_pair(0x0665,"ARABIC-INDIC DIGIT FIVE"));
        data.insert(std::make_pair(0x0666,"ARABIC-INDIC DIGIT SIX"));
        data.insert(std::make_pair(0x0667,"ARABIC-INDIC DIGIT SEVEN"));
        data.insert(std::make_pair(0x0668,"ARABIC-INDIC DIGIT EIGHT"));
        data.insert(std::make_pair(0x0669,"ARABIC-INDIC DIGIT NINE"));
        data.insert(std::make_pair(0x066a,"ARABIC PERCENT SIGN"));
        data.insert(std::make_pair(0x066b,"ARABIC DECIMAL SEPARATOR"));
        data.insert(std::make_pair(0x066c,"ARABIC THOUSANDS SEPARATOR"));
        data.insert(std::make_pair(0x066d,"ARABIC FIVE POINTED STAR"));
        data.insert(std::make_pair(0x066e,"ARABIC LETTER DOTLESS BEH"));
        data.insert(std::make_pair(0x066f,"ARABIC LETTER DOTLESS QAF"));
        data.insert(std::make_pair(0x0670,"ARABIC LETTER SUPERSCRIPT ALEF"));
        data.insert(std::make_pair(0x0671,"ARABIC LETTER ALEF WASLA"));
        data.insert(std::make_pair(0x0672,"ARABIC LETTER ALEF WITH WAVY HAMZA ABOVE"));
        data.insert(std::make_pair(0x0673,"ARABIC LETTER ALEF WITH WAVY HAMZA BELOW"));
        data.insert(std::make_pair(0x0674,"ARABIC LETTER HIGH HAMZA"));
        data.insert(std::make_pair(0x0675,"ARABIC LETTER HIGH HAMZA ALEF"));
        data.insert(std::make_pair(0x0676,"ARABIC LETTER HIGH HAMZA WAW"));
        data.insert(std::make_pair(0x0677,"ARABIC LETTER U WITH HAMZA ABOVE"));
        data.insert(std::make_pair(0x0678,"ARABIC LETTER HIGH HAMZA YEH"));
        data.insert(std::make_pair(0x0679,"ARABIC LETTER TTEH"));
        data.insert(std::make_pair(0x067a,"ARABIC LETTER TTEHEH"));
        data.insert(std::make_pair(0x067b,"ARABIC LETTER BEEH"));
        data.insert(std::make_pair(0x067c,"ARABIC LETTER TEH WITH RING"));
        data.insert(std::make_pair(0x067d,"ARABIC LETTER TEH WITH THREE DOTS ABOVE DOWNWARDS"));
        data.insert(std::make_pair(0x067e,"ARABIC LETTER PEH"));
        data.insert(std::make_pair(0x067f,"ARABIC LETTER TEHEH"));
        data.insert(std::make_pair(0x0680,"ARABIC LETTER BEHEH"));
        data.insert(std::make_pair(0x0681,"ARABIC LETTER HAH WITH HAMZA ABOVE"));
        data.insert(std::make_pair(0x0682,"ARABIC LETTER HAH WITH TWO DOTS VERTICAL ABOVE"));
        data.insert(std::make_pair(0x0683,"ARABIC LETTER NYEH"));
        data.insert(std::make_pair(0x0684,"ARABIC LETTER DYEH"));
        data.insert(std::make_pair(0x0685,"ARABIC LETTER HAH WITH THREE DOTS ABOVE"));
        data.insert(std::make_pair(0x0686,"ARABIC LETTER TCHEH"));
        data.insert(std::make_pair(0x0687,"ARABIC LETTER TCHEHEH"));
        data.insert(std::make_pair(0x0688,"ARABIC LETTER DDAL"));
        data.insert(std::make_pair(0x0689,"ARABIC LETTER DAL WITH RING"));
        data.insert(std::make_pair(0x068a,"ARABIC LETTER DAL WITH DOT BELOW"));
        data.insert(std::make_pair(0x068b,"ARABIC LETTER DAL WITH DOT BELOW AND SMALL TAH"));
        data.insert(std::make_pair(0x068c,"ARABIC LETTER DAHAL"));
        data.insert(std::make_pair(0x068d,"ARABIC LETTER DDAHAL"));
        data.insert(std::make_pair(0x068e,"ARABIC LETTER DUL"));
        data.insert(std::make_pair(0x068f,"ARABIC LETTER DAL WITH THREE DOTS ABOVE DOWNWARDS"));
        data.insert(std::make_pair(0x0690,"ARABIC LETTER DAL WITH FOUR DOTS ABOVE"));
        data.insert(std::make_pair(0x0691,"ARABIC LETTER RREH"));
        data.insert(std::make_pair(0x0692,"ARABIC LETTER REH WITH SMALL V"));
        data.insert(std::make_pair(0x0693,"ARABIC LETTER REH WITH RING"));
        data.insert(std::make_pair(0x0694,"ARABIC LETTER REH WITH DOT BELOW"));
        data.insert(std::make_pair(0x0695,"ARABIC LETTER REH WITH SMALL V BELOW"));
        data.insert(std::make_pair(0x0696,"ARABIC LETTER REH WITH DOT BELOW AND DOT ABOVE"));
        data.insert(std::make_pair(0x0697,"ARABIC LETTER REH WITH TWO DOTS ABOVE"));
        data.insert(std::make_pair(0x0698,"ARABIC LETTER JEH"));
        data.insert(std::make_pair(0x0699,"ARABIC LETTER REH WITH FOUR DOTS ABOVE"));
        data.insert(std::make_pair(0x069a,"ARABIC LETTER SEEN WITH DOT BELOW AND DOT ABOVE"));
        data.insert(std::make_pair(0x069b,"ARABIC LETTER SEEN WITH THREE DOTS BELOW"));
        data.insert(std::make_pair(0x069c,"ARABIC LETTER SEEN WITH THREE DOTS BELOW AND THREE DOTS ABOVE"));
        data.insert(std::make_pair(0x069d,"ARABIC LETTER SAD WITH TWO DOTS BELOW"));
        data.insert(std::make_pair(0x069e,"ARABIC LETTER SAD WITH THREE DOTS ABOVE"));
        data.insert(std::make_pair(0x069f,"ARABIC LETTER TAH WITH THREE DOTS ABOVE"));
        data.insert(std::make_pair(0x06a0,"ARABIC LETTER AIN WITH THREE DOTS ABOVE"));
        data.insert(std::make_pair(0x06a1,"ARABIC LETTER DOTLESS FEH"));
        data.insert(std::make_pair(0x06a2,"ARABIC LETTER FEH WITH DOT MOVED BELOW"));
        data.insert(std::make_pair(0x06a3,"ARABIC LETTER FEH WITH DOT BELOW"));
        data.insert(std::make_pair(0x06a4,"ARABIC LETTER VEH"));
        data.insert(std::make_pair(0x06a5,"ARABIC LETTER FEH WITH THREE DOTS BELOW"));
        data.insert(std::make_pair(0x06a6,"ARABIC LETTER PEHEH"));
        data.insert(std::make_pair(0x06a7,"ARABIC LETTER QAF WITH DOT ABOVE"));
        data.insert(std::make_pair(0x06a8,"ARABIC LETTER QAF WITH THREE DOTS ABOVE"));
        data.insert(std::make_pair(0x06a9,"ARABIC LETTER KEHEH"));
        data.insert(std::make_pair(0x06aa,"ARABIC LETTER SWASH KAF"));
        data.insert(std::make_pair(0x06ab,"ARABIC LETTER KAF WITH RING"));
        data.insert(std::make_pair(0x06ac,"ARABIC LETTER KAF WITH DOT ABOVE"));
        data.insert(std::make_pair(0x06ad,"ARABIC LETTER NG"));
        data.insert(std::make_pair(0x06ae,"ARABIC LETTER KAF WITH THREE DOTS BELOW"));
        data.insert(std::make_pair(0x06af,"ARABIC LETTER GAF"));
        data.insert(std::make_pair(0x06b0,"ARABIC LETTER GAF WITH RING"));
        data.insert(std::make_pair(0x06b1,"ARABIC LETTER NGOEH"));
        data.insert(std::make_pair(0x06b2,"ARABIC LETTER GAF WITH TWO DOTS BELOW"));
        data.insert(std::make_pair(0x06b3,"ARABIC LETTER GUEH"));
        data.insert(std::make_pair(0x06b4,"ARABIC LETTER GAF WITH THREE DOTS ABOVE"));
        data.insert(std::make_pair(0x06b5,"ARABIC LETTER LAM WITH SMALL V"));
        data.insert(std::make_pair(0x06b6,"ARABIC LETTER LAM WITH DOT ABOVE"));
        data.insert(std::make_pair(0x06b7,"ARABIC LETTER LAM WITH THREE DOTS ABOVE"));
        data.insert(std::make_pair(0x06b8,"ARABIC LETTER LAM WITH THREE DOTS BELOW"));
        data.insert(std::make_pair(0x06b9,"ARABIC LETTER NOON WITH DOT BELOW"));
        data.insert(std::make_pair(0x06ba,"ARABIC LETTER NOON GHUNNA"));
        data.insert(std::make_pair(0x06bb,"ARABIC LETTER RNOON"));
        data.insert(std::make_pair(0x06bc,"ARABIC LETTER NOON WITH RING"));
        data.insert(std::make_pair(0x06bd,"ARABIC LETTER NOON WITH THREE DOTS ABOVE"));
        data.insert(std::make_pair(0x06be,"ARABIC LETTER HEH DOACHASHMEE"));
        data.insert(std::make_pair(0x06bf,"ARABIC LETTER TCHEH WITH DOT ABOVE"));
        data.insert(std::make_pair(0x06c0,"ARABIC LETTER HEH WITH YEH ABOVE"));
        data.insert(std::make_pair(0x06c1,"ARABIC LETTER HEH GOAL"));
        data.insert(std::make_pair(0x06c2,"ARABIC LETTER HEH GOAL WITH HAMZA ABOVE"));
        data.insert(std::make_pair(0x06c3,"ARABIC LETTER TEH MARBUTA GOAL"));
        data.insert(std::make_pair(0x06c4,"ARABIC LETTER WAW WITH RING"));
        data.insert(std::make_pair(0x06c5,"ARABIC LETTER KIRGHIZ OE"));
        data.insert(std::make_pair(0x06c6,"ARABIC LETTER OE"));
        data.insert(std::make_pair(0x06c7,"ARABIC LETTER U"));
        data.insert(std::make_pair(0x06c8,"ARABIC LETTER YU"));
        data.insert(std::make_pair(0x06c9,"ARABIC LETTER KIRGHIZ YU"));
        data.insert(std::make_pair(0x06ca,"ARABIC LETTER WAW WITH TWO DOTS ABOVE"));
        data.insert(std::make_pair(0x06cb,"ARABIC LETTER VE"));
        data.insert(std::make_pair(0x06cc,"ARABIC LETTER FARSI YEH"));
        data.insert(std::make_pair(0x06cd,"ARABIC LETTER YEH WITH TAIL"));
        data.insert(std::make_pair(0x06ce,"ARABIC LETTER YEH WITH SMALL V"));
        data.insert(std::make_pair(0x06cf,"ARABIC LETTER WAW WITH DOT ABOVE"));
        data.insert(std::make_pair(0x06d0,"ARABIC LETTER E"));
        data.insert(std::make_pair(0x06d1,"ARABIC LETTER YEH WITH THREE DOTS BELOW"));
        data.insert(std::make_pair(0x06d2,"ARABIC LETTER YEH BARREE"));
        data.insert(std::make_pair(0x06d3,"ARABIC LETTER YEH BARREE WITH HAMZA ABOVE"));
        data.insert(std::make_pair(0x06d4,"ARABIC FULL STOP"));
        data.insert(std::make_pair(0x06d5,"ARABIC LETTER AE"));
        data.insert(std::make_pair(0x06d6,"ARABIC SMALL HIGH LIGATURE SAD WITH LAM WITH ALEF MAKSURA"));
        data.insert(std::make_pair(0x06d7,"ARABIC SMALL HIGH LIGATURE QAF WITH LAM WITH ALEF MAKSURA"));
        data.insert(std::make_pair(0x06d8,"ARABIC SMALL HIGH MEEM INITIAL FORM"));
        data.insert(std::make_pair(0x06d9,"ARABIC SMALL HIGH LAM ALEF"));
        data.insert(std::make_pair(0x06da,"ARABIC SMALL HIGH JEEM"));
        data.insert(std::make_pair(0x06db,"ARABIC SMALL HIGH THREE DOTS"));
        data.insert(std::make_pair(0x06dc,"ARABIC SMALL HIGH SEEN"));
        data.insert(std::make_pair(0x06dd,"ARABIC END OF AYAH"));
        data.insert(std::make_pair(0x06de,"ARABIC START OF RUB EL HIZB"));
        data.insert(std::make_pair(0x06df,"ARABIC SMALL HIGH ROUNDED ZERO"));
        data.insert(std::make_pair(0x06e0,"ARABIC SMALL HIGH UPRIGHT RECTANGULAR ZERO"));
        data.insert(std::make_pair(0x06e1,"ARABIC SMALL HIGH DOTLESS HEAD OF KHAH"));
        data.insert(std::make_pair(0x06e2,"ARABIC SMALL HIGH MEEM ISOLATED FORM"));
        data.insert(std::make_pair(0x06e3,"ARABIC SMALL LOW SEEN"));
        data.insert(std::make_pair(0x06e4,"ARABIC SMALL HIGH MADDA"));
        data.insert(std::make_pair(0x06e5,"ARABIC SMALL WAW"));
        data.insert(std::make_pair(0x06e6,"ARABIC SMALL YEH"));
        data.insert(std::make_pair(0x06e7,"ARABIC SMALL HIGH YEH"));
        data.insert(std::make_pair(0x06e8,"ARABIC SMALL HIGH NOON"));
        data.insert(std::make_pair(0x06e9,"ARABIC PLACE OF SAJDAH"));
        data.insert(std::make_pair(0x06ea,"ARABIC EMPTY CENTRE LOW STOP"));
        data.insert(std::make_pair(0x06eb,"ARABIC EMPTY CENTRE HIGH STOP"));
        data.insert(std::make_pair(0x06ec,"ARABIC ROUNDED HIGH STOP WITH FILLED CENTRE"));
        data.insert(std::make_pair(0x06ed,"ARABIC SMALL LOW MEEM"));
        data.insert(std::make_pair(0x06ee,"ARABIC LETTER DAL WITH INVERTED V"));
        data.insert(std::make_pair(0x06ef,"ARABIC LETTER REH WITH INVERTED V"));
        data.insert(std::make_pair(0x06f0,"EXTENDED ARABIC-INDIC DIGIT ZERO"));
        data.insert(std::make_pair(0x06f1,"EXTENDED ARABIC-INDIC DIGIT ONE"));
        data.insert(std::make_pair(0x06f2,"EXTENDED ARABIC-INDIC DIGIT TWO"));
        data.insert(std::make_pair(0x06f3,"EXTENDED ARABIC-INDIC DIGIT THREE"));
        data.insert(std::make_pair(0x06f4,"EXTENDED ARABIC-INDIC DIGIT FOUR"));
        data.insert(std::make_pair(0x06f5,"EXTENDED ARABIC-INDIC DIGIT FIVE"));
        data.insert(std::make_pair(0x06f6,"EXTENDED ARABIC-INDIC DIGIT SIX"));
        data.insert(std::make_pair(0x06f7,"EXTENDED ARABIC-INDIC DIGIT SEVEN"));
        data.insert(std::make_pair(0x06f8,"EXTENDED ARABIC-INDIC DIGIT EIGHT"));
        data.insert(std::make_pair(0x06f9,"EXTENDED ARABIC-INDIC DIGIT NINE"));
        data.insert(std::make_pair(0x06fa,"ARABIC LETTER SHEEN WITH DOT BELOW"));
        data.insert(std::make_pair(0x06fb,"ARABIC LETTER DAD WITH DOT BELOW"));
        data.insert(std::make_pair(0x06fc,"ARABIC LETTER GHAIN WITH DOT BELOW"));
        data.insert(std::make_pair(0x06fd,"ARABIC SIGN SINDHI AMPERSAND"));
        data.insert(std::make_pair(0x06fe,"ARABIC SIGN SINDHI POSTPOSITION MEN"));
        data.insert(std::make_pair(0x06ff,"ARABIC LETTER HEH WITH INVERTED V"));
        data.insert(std::make_pair(0x0700,"SYRIAC END OF PARAGRAPH"));
        data.insert(std::make_pair(0x0701,"SYRIAC SUPRALINEAR FULL STOP"));
        data.insert(std::make_pair(0x0702,"SYRIAC SUBLINEAR FULL STOP"));
        data.insert(std::make_pair(0x0703,"SYRIAC SUPRALINEAR COLON"));
        data.insert(std::make_pair(0x0704,"SYRIAC SUBLINEAR COLON"));
        data.insert(std::make_pair(0x0705,"SYRIAC HORIZONTAL COLON"));
        data.insert(std::make_pair(0x0706,"SYRIAC COLON SKEWED LEFT"));
        data.insert(std::make_pair(0x0707,"SYRIAC COLON SKEWED RIGHT"));
        data.insert(std::make_pair(0x0708,"SYRIAC SUPRALINEAR COLON SKEWED LEFT"));
        data.insert(std::make_pair(0x0709,"SYRIAC SUBLINEAR COLON SKEWED RIGHT"));
        data.insert(std::make_pair(0x070a,"SYRIAC CONTRACTION"));
        data.insert(std::make_pair(0x070b,"SYRIAC HARKLEAN OBELUS"));
        data.insert(std::make_pair(0x070c,"SYRIAC HARKLEAN METOBELUS"));
        data.insert(std::make_pair(0x070d,"SYRIAC HARKLEAN ASTERISCUS"));
        data.insert(std::make_pair(0x070f,"SYRIAC ABBREVIATION MARK"));
        data.insert(std::make_pair(0x0710,"SYRIAC LETTER ALAPH"));
        data.insert(std::make_pair(0x0711,"SYRIAC LETTER SUPERSCRIPT ALAPH"));
        data.insert(std::make_pair(0x0712,"SYRIAC LETTER BETH"));
        data.insert(std::make_pair(0x0713,"SYRIAC LETTER GAMAL"));
        data.insert(std::make_pair(0x0714,"SYRIAC LETTER GAMAL GARSHUNI"));
        data.insert(std::make_pair(0x0715,"SYRIAC LETTER DALATH"));
        data.insert(std::make_pair(0x0716,"SYRIAC LETTER DOTLESS DALATH RISH"));
        data.insert(std::make_pair(0x0717,"SYRIAC LETTER HE"));
        data.insert(std::make_pair(0x0718,"SYRIAC LETTER WAW"));
        data.insert(std::make_pair(0x0719,"SYRIAC LETTER ZAIN"));
        data.insert(std::make_pair(0x071a,"SYRIAC LETTER HETH"));
        data.insert(std::make_pair(0x071b,"SYRIAC LETTER TETH"));
        data.insert(std::make_pair(0x071c,"SYRIAC LETTER TETH GARSHUNI"));
        data.insert(std::make_pair(0x071d,"SYRIAC LETTER YUDH"));
        data.insert(std::make_pair(0x071e,"SYRIAC LETTER YUDH HE"));
        data.insert(std::make_pair(0x071f,"SYRIAC LETTER KAPH"));
        data.insert(std::make_pair(0x0720,"SYRIAC LETTER LAMADH"));
        data.insert(std::make_pair(0x0721,"SYRIAC LETTER MIM"));
        data.insert(std::make_pair(0x0722,"SYRIAC LETTER NUN"));
        data.insert(std::make_pair(0x0723,"SYRIAC LETTER SEMKATH"));
        data.insert(std::make_pair(0x0724,"SYRIAC LETTER FINAL SEMKATH"));
        data.insert(std::make_pair(0x0725,"SYRIAC LETTER E"));
        data.insert(std::make_pair(0x0726,"SYRIAC LETTER PE"));
        data.insert(std::make_pair(0x0727,"SYRIAC LETTER REVERSED PE"));
        data.insert(std::make_pair(0x0728,"SYRIAC LETTER SADHE"));
        data.insert(std::make_pair(0x0729,"SYRIAC LETTER QAPH"));
        data.insert(std::make_pair(0x072a,"SYRIAC LETTER RISH"));
        data.insert(std::make_pair(0x072b,"SYRIAC LETTER SHIN"));
        data.insert(std::make_pair(0x072c,"SYRIAC LETTER TAW"));
        data.insert(std::make_pair(0x072d,"SYRIAC LETTER PERSIAN BHETH"));
        data.insert(std::make_pair(0x072e,"SYRIAC LETTER PERSIAN GHAMAL"));
        data.insert(std::make_pair(0x072f,"SYRIAC LETTER PERSIAN DHALATH"));
        data.insert(std::make_pair(0x0730,"SYRIAC PTHAHA ABOVE"));
        data.insert(std::make_pair(0x0731,"SYRIAC PTHAHA BELOW"));
        data.insert(std::make_pair(0x0732,"SYRIAC PTHAHA DOTTED"));
        data.insert(std::make_pair(0x0733,"SYRIAC ZQAPHA ABOVE"));
        data.insert(std::make_pair(0x0734,"SYRIAC ZQAPHA BELOW"));
        data.insert(std::make_pair(0x0735,"SYRIAC ZQAPHA DOTTED"));
        data.insert(std::make_pair(0x0736,"SYRIAC RBASA ABOVE"));
        data.insert(std::make_pair(0x0737,"SYRIAC RBASA BELOW"));
        data.insert(std::make_pair(0x0738,"SYRIAC DOTTED ZLAMA HORIZONTAL"));
        data.insert(std::make_pair(0x0739,"SYRIAC DOTTED ZLAMA ANGULAR"));
        data.insert(std::make_pair(0x073a,"SYRIAC HBASA ABOVE"));
        data.insert(std::make_pair(0x073b,"SYRIAC HBASA BELOW"));
        data.insert(std::make_pair(0x073c,"SYRIAC HBASA-ESASA DOTTED"));
        data.insert(std::make_pair(0x073d,"SYRIAC ESASA ABOVE"));
        data.insert(std::make_pair(0x073e,"SYRIAC ESASA BELOW"));
        data.insert(std::make_pair(0x073f,"SYRIAC RWAHA"));
        data.insert(std::make_pair(0x0740,"SYRIAC FEMININE DOT"));
        data.insert(std::make_pair(0x0741,"SYRIAC QUSHSHAYA"));
        data.insert(std::make_pair(0x0742,"SYRIAC RUKKAKHA"));
        data.insert(std::make_pair(0x0743,"SYRIAC TWO VERTICAL DOTS ABOVE"));
        data.insert(std::make_pair(0x0744,"SYRIAC TWO VERTICAL DOTS BELOW"));
        data.insert(std::make_pair(0x0745,"SYRIAC THREE DOTS ABOVE"));
        data.insert(std::make_pair(0x0746,"SYRIAC THREE DOTS BELOW"));
        data.insert(std::make_pair(0x0747,"SYRIAC OBLIQUE LINE ABOVE"));
        data.insert(std::make_pair(0x0748,"SYRIAC OBLIQUE LINE BELOW"));
        data.insert(std::make_pair(0x0749,"SYRIAC MUSIC"));
        data.insert(std::make_pair(0x074a,"SYRIAC BARREKH"));
        data.insert(std::make_pair(0x074d,"SYRIAC LETTER SOGDIAN ZHAIN"));
        data.insert(std::make_pair(0x074e,"SYRIAC LETTER SOGDIAN KHAPH"));
        data.insert(std::make_pair(0x074f,"SYRIAC LETTER SOGDIAN FE"));
        data.insert(std::make_pair(0x0750,"ARABIC LETTER BEH WITH THREE DOTS HORIZONTALLY BELOW"));
        data.insert(std::make_pair(0x0751,"ARABIC LETTER BEH WITH DOT BELOW AND THREE DOTS ABOVE"));
        data.insert(std::make_pair(0x0752,"ARABIC LETTER BEH WITH THREE DOTS POINTING UPWARDS BELOW"));
        data.insert(std::make_pair(0x0753,"ARABIC LETTER BEH WITH THREE DOTS POINTING UPWARDS BELOW AND TWO DOTS ABOVE"));
        data.insert(std::make_pair(0x0754,"ARABIC LETTER BEH WITH TWO DOTS BELOW AND DOT ABOVE"));
        data.insert(std::make_pair(0x0755,"ARABIC LETTER BEH WITH INVERTED SMALL V BELOW"));
        data.insert(std::make_pair(0x0756,"ARABIC LETTER BEH WITH SMALL V"));
        data.insert(std::make_pair(0x0757,"ARABIC LETTER HAH WITH TWO DOTS ABOVE"));
        data.insert(std::make_pair(0x0758,"ARABIC LETTER HAH WITH THREE DOTS POINTING UPWARDS BELOW"));
        data.insert(std::make_pair(0x0759,"ARABIC LETTER DAL WITH TWO DOTS VERTICALLY BELOW AND SMALL TAH"));
        data.insert(std::make_pair(0x075a,"ARABIC LETTER DAL WITH INVERTED SMALL V BELOW"));
        data.insert(std::make_pair(0x075b,"ARABIC LETTER REH WITH STROKE"));
        data.insert(std::make_pair(0x075c,"ARABIC LETTER SEEN WITH FOUR DOTS ABOVE"));
        data.insert(std::make_pair(0x075d,"ARABIC LETTER AIN WITH TWO DOTS ABOVE"));
        data.insert(std::make_pair(0x075e,"ARABIC LETTER AIN WITH THREE DOTS POINTING DOWNWARDS ABOVE"));
        data.insert(std::make_pair(0x075f,"ARABIC LETTER AIN WITH TWO DOTS VERTICALLY ABOVE"));
        data.insert(std::make_pair(0x0760,"ARABIC LETTER FEH WITH TWO DOTS BELOW"));
        data.insert(std::make_pair(0x0761,"ARABIC LETTER FEH WITH THREE DOTS POINTING UPWARDS BELOW"));
        data.insert(std::make_pair(0x0762,"ARABIC LETTER KEHEH WITH DOT ABOVE"));
        data.insert(std::make_pair(0x0763,"ARABIC LETTER KEHEH WITH THREE DOTS ABOVE"));
        data.insert(std::make_pair(0x0764,"ARABIC LETTER KEHEH WITH THREE DOTS POINTING UPWARDS BELOW"));
        data.insert(std::make_pair(0x0765,"ARABIC LETTER MEEM WITH DOT ABOVE"));
        data.insert(std::make_pair(0x0766,"ARABIC LETTER MEEM WITH DOT BELOW"));
        data.insert(std::make_pair(0x0767,"ARABIC LETTER NOON WITH TWO DOTS BELOW"));
        data.insert(std::make_pair(0x0768,"ARABIC LETTER NOON WITH SMALL TAH"));
        data.insert(std::make_pair(0x0769,"ARABIC LETTER NOON WITH SMALL V"));
        data.insert(std::make_pair(0x076a,"ARABIC LETTER LAM WITH BAR"));
        data.insert(std::make_pair(0x076b,"ARABIC LETTER REH WITH TWO DOTS VERTICALLY ABOVE"));
        data.insert(std::make_pair(0x076c,"ARABIC LETTER REH WITH HAMZA ABOVE"));
        data.insert(std::make_pair(0x076d,"ARABIC LETTER SEEN WITH TWO DOTS VERTICALLY ABOVE"));
        data.insert(std::make_pair(0x076e,"ARABIC LETTER HAH WITH SMALL ARABIC LETTER TAH BELOW"));
        data.insert(std::make_pair(0x076f,"ARABIC LETTER HAH WITH SMALL ARABIC LETTER TAH AND TWO DOTS"));
        data.insert(std::make_pair(0x0770,"ARABIC LETTER SEEN WITH SMALL ARABIC LETTER TAH AND TWO DOTS"));
        data.insert(std::make_pair(0x0771,"ARABIC LETTER REH WITH SMALL ARABIC LETTER TAH AND TWO DOTS"));
        data.insert(std::make_pair(0x0772,"ARABIC LETTER HAH WITH SMALL ARABIC LETTER TAH ABOVE"));
        data.insert(std::make_pair(0x0773,"ARABIC LETTER ALEF WITH EXTENDED ARABIC-INDIC DIGIT TWO ABOVE"));
        data.insert(std::make_pair(0x0774,"ARABIC LETTER ALEF WITH EXTENDED ARABIC-INDIC DIGIT THREE ABOVE"));
        data.insert(std::make_pair(0x0775,"ARABIC LETTER FARSI YEH WITH EXTENDED ARABIC-INDIC DIGIT TWO ABOVE"));
        data.insert(std::make_pair(0x0776,"ARABIC LETTER FARSI YEH WITH EXTENDED ARABIC-INDIC DIGIT THREE ABOVE"));
        data.insert(std::make_pair(0x0777,"ARABIC LETTER FARSI YEH WITH EXTENDED ARABIC-INDIC DIGIT FOUR BELOW"));
        data.insert(std::make_pair(0x0778,"ARABIC LETTER WAW WITH EXTENDED ARABIC-INDIC DIGIT TWO ABOVE"));
        data.insert(std::make_pair(0x0779,"ARABIC LETTER WAW WITH EXTENDED ARABIC-INDIC DIGIT THREE ABOVE"));
        data.insert(std::make_pair(0x077a,"ARABIC LETTER YEH BARREE WITH EXTENDED ARABIC-INDIC DIGIT TWO ABOVE"));
        data.insert(std::make_pair(0x077b,"ARABIC LETTER YEH BARREE WITH EXTENDED ARABIC-INDIC DIGIT THREE ABOVE"));
        data.insert(std::make_pair(0x077c,"ARABIC LETTER HAH WITH EXTENDED ARABIC-INDIC DIGIT FOUR BELOW"));
        data.insert(std::make_pair(0x077d,"ARABIC LETTER SEEN WITH EXTENDED ARABIC-INDIC DIGIT FOUR ABOVE"));
        data.insert(std::make_pair(0x077e,"ARABIC LETTER SEEN WITH INVERTED V"));
        data.insert(std::make_pair(0x077f,"ARABIC LETTER KAF WITH TWO DOTS ABOVE"));
        data.insert(std::make_pair(0x0780,"THAANA LETTER HAA"));
        data.insert(std::make_pair(0x0781,"THAANA LETTER SHAVIYANI"));
        data.insert(std::make_pair(0x0782,"THAANA LETTER NOONU"));
        data.insert(std::make_pair(0x0783,"THAANA LETTER RAA"));
        data.insert(std::make_pair(0x0784,"THAANA LETTER BAA"));
        data.insert(std::make_pair(0x0785,"THAANA LETTER LHAVIYANI"));
        data.insert(std::make_pair(0x0786,"THAANA LETTER KAAFU"));
        data.insert(std::make_pair(0x0787,"THAANA LETTER ALIFU"));
        data.insert(std::make_pair(0x0788,"THAANA LETTER VAAVU"));
        data.insert(std::make_pair(0x0789,"THAANA LETTER MEEMU"));
        data.insert(std::make_pair(0x078a,"THAANA LETTER FAAFU"));
        data.insert(std::make_pair(0x078b,"THAANA LETTER DHAALU"));
        data.insert(std::make_pair(0x078c,"THAANA LETTER THAA"));
        data.insert(std::make_pair(0x078d,"THAANA LETTER LAAMU"));
        data.insert(std::make_pair(0x078e,"THAANA LETTER GAAFU"));
        data.insert(std::make_pair(0x078f,"THAANA LETTER GNAVIYANI"));
        data.insert(std::make_pair(0x0790,"THAANA LETTER SEENU"));
        data.insert(std::make_pair(0x0791,"THAANA LETTER DAVIYANI"));
        data.insert(std::make_pair(0x0792,"THAANA LETTER ZAVIYANI"));
        data.insert(std::make_pair(0x0793,"THAANA LETTER TAVIYANI"));
        data.insert(std::make_pair(0x0794,"THAANA LETTER YAA"));
        data.insert(std::make_pair(0x0795,"THAANA LETTER PAVIYANI"));
        data.insert(std::make_pair(0x0796,"THAANA LETTER JAVIYANI"));
        data.insert(std::make_pair(0x0797,"THAANA LETTER CHAVIYANI"));
        data.insert(std::make_pair(0x0798,"THAANA LETTER TTAA"));
        data.insert(std::make_pair(0x0799,"THAANA LETTER HHAA"));
        data.insert(std::make_pair(0x079a,"THAANA LETTER KHAA"));
        data.insert(std::make_pair(0x079b,"THAANA LETTER THAALU"));
        data.insert(std::make_pair(0x079c,"THAANA LETTER ZAA"));
        data.insert(std::make_pair(0x079d,"THAANA LETTER SHEENU"));
        data.insert(std::make_pair(0x079e,"THAANA LETTER SAADHU"));
        data.insert(std::make_pair(0x079f,"THAANA LETTER DAADHU"));
        data.insert(std::make_pair(0x07a0,"THAANA LETTER TO"));
        data.insert(std::make_pair(0x07a1,"THAANA LETTER ZO"));
        data.insert(std::make_pair(0x07a2,"THAANA LETTER AINU"));
        data.insert(std::make_pair(0x07a3,"THAANA LETTER GHAINU"));
        data.insert(std::make_pair(0x07a4,"THAANA LETTER QAAFU"));
        data.insert(std::make_pair(0x07a5,"THAANA LETTER WAAVU"));
        data.insert(std::make_pair(0x07a6,"THAANA ABAFILI"));
        data.insert(std::make_pair(0x07a7,"THAANA AABAAFILI"));
        data.insert(std::make_pair(0x07a8,"THAANA IBIFILI"));
        data.insert(std::make_pair(0x07a9,"THAANA EEBEEFILI"));
        data.insert(std::make_pair(0x07aa,"THAANA UBUFILI"));
        data.insert(std::make_pair(0x07ab,"THAANA OOBOOFILI"));
        data.insert(std::make_pair(0x07ac,"THAANA EBEFILI"));
        data.insert(std::make_pair(0x07ad,"THAANA EYBEYFILI"));
        data.insert(std::make_pair(0x07ae,"THAANA OBOFILI"));
        data.insert(std::make_pair(0x07af,"THAANA OABOAFILI"));
        data.insert(std::make_pair(0x07b0,"THAANA SUKUN"));
        data.insert(std::make_pair(0x07b1,"THAANA LETTER NAA"));
        data.insert(std::make_pair(0x07c0,"NKO DIGIT ZERO"));
        data.insert(std::make_pair(0x07c1,"NKO DIGIT ONE"));
        data.insert(std::make_pair(0x07c2,"NKO DIGIT TWO"));
        data.insert(std::make_pair(0x07c3,"NKO DIGIT THREE"));
        data.insert(std::make_pair(0x07c4,"NKO DIGIT FOUR"));
        data.insert(std::make_pair(0x07c5,"NKO DIGIT FIVE"));
        data.insert(std::make_pair(0x07c6,"NKO DIGIT SIX"));
        data.insert(std::make_pair(0x07c7,"NKO DIGIT SEVEN"));
        data.insert(std::make_pair(0x07c8,"NKO DIGIT EIGHT"));
        data.insert(std::make_pair(0x07c9,"NKO DIGIT NINE"));
        data.insert(std::make_pair(0x07ca,"NKO LETTER A"));
        data.insert(std::make_pair(0x07cb,"NKO LETTER EE"));
        data.insert(std::make_pair(0x07cc,"NKO LETTER I"));
        data.insert(std::make_pair(0x07cd,"NKO LETTER E"));
        data.insert(std::make_pair(0x07ce,"NKO LETTER U"));
        data.insert(std::make_pair(0x07cf,"NKO LETTER OO"));
        data.insert(std::make_pair(0x07d0,"NKO LETTER O"));
        data.insert(std::make_pair(0x07d1,"NKO LETTER DAGBASINNA"));
        data.insert(std::make_pair(0x07d2,"NKO LETTER N"));
        data.insert(std::make_pair(0x07d3,"NKO LETTER BA"));
        data.insert(std::make_pair(0x07d4,"NKO LETTER PA"));
        data.insert(std::make_pair(0x07d5,"NKO LETTER TA"));
        data.insert(std::make_pair(0x07d6,"NKO LETTER JA"));
        data.insert(std::make_pair(0x07d7,"NKO LETTER CHA"));
        data.insert(std::make_pair(0x07d8,"NKO LETTER DA"));
        data.insert(std::make_pair(0x07d9,"NKO LETTER RA"));
        data.insert(std::make_pair(0x07da,"NKO LETTER RRA"));
        data.insert(std::make_pair(0x07db,"NKO LETTER SA"));
        data.insert(std::make_pair(0x07dc,"NKO LETTER GBA"));
        data.insert(std::make_pair(0x07dd,"NKO LETTER FA"));
        data.insert(std::make_pair(0x07de,"NKO LETTER KA"));
        data.insert(std::make_pair(0x07df,"NKO LETTER LA"));
        data.insert(std::make_pair(0x07e0,"NKO LETTER NA WOLOSO"));
        data.insert(std::make_pair(0x07e1,"NKO LETTER MA"));
        data.insert(std::make_pair(0x07e2,"NKO LETTER NYA"));
        data.insert(std::make_pair(0x07e3,"NKO LETTER NA"));
        data.insert(std::make_pair(0x07e4,"NKO LETTER HA"));
        data.insert(std::make_pair(0x07e5,"NKO LETTER WA"));
        data.insert(std::make_pair(0x07e6,"NKO LETTER YA"));
        data.insert(std::make_pair(0x07e7,"NKO LETTER NYA WOLOSO"));
        data.insert(std::make_pair(0x07e8,"NKO LETTER JONA JA"));
        data.insert(std::make_pair(0x07e9,"NKO LETTER JONA CHA"));
        data.insert(std::make_pair(0x07ea,"NKO LETTER JONA RA"));
        data.insert(std::make_pair(0x07eb,"NKO COMBINING SHORT HIGH TONE"));
        data.insert(std::make_pair(0x07ec,"NKO COMBINING SHORT LOW TONE"));
        data.insert(std::make_pair(0x07ed,"NKO COMBINING SHORT RISING TONE"));
        data.insert(std::make_pair(0x07ee,"NKO COMBINING LONG DESCENDING TONE"));
        data.insert(std::make_pair(0x07ef,"NKO COMBINING LONG HIGH TONE"));
        data.insert(std::make_pair(0x07f0,"NKO COMBINING LONG LOW TONE"));
        data.insert(std::make_pair(0x07f1,"NKO COMBINING LONG RISING TONE"));
        data.insert(std::make_pair(0x07f2,"NKO COMBINING NASALIZATION MARK"));
        data.insert(std::make_pair(0x07f3,"NKO COMBINING DOUBLE DOT ABOVE"));
        data.insert(std::make_pair(0x07f4,"NKO HIGH TONE APOSTROPHE"));
        data.insert(std::make_pair(0x07f5,"NKO LOW TONE APOSTROPHE"));
        data.insert(std::make_pair(0x07f6,"NKO SYMBOL OO DENNEN"));
        data.insert(std::make_pair(0x07f7,"NKO SYMBOL GBAKURUNEN"));
        data.insert(std::make_pair(0x07f8,"NKO COMMA"));
        data.insert(std::make_pair(0x07f9,"NKO EXCLAMATION MARK"));
        data.insert(std::make_pair(0x07fa,"NKO LAJANYALAN"));
        data.insert(std::make_pair(0x07fd,"NKO DANTAYALAN"));
        data.insert(std::make_pair(0x07fe,"NKO DOROME SIGN"));
        data.insert(std::make_pair(0x07ff,"NKO TAMAN SIGN"));
        data.insert(std::make_pair(0x0800,"SAMARITAN LETTER ALAF"));
        data.insert(std::make_pair(0x0801,"SAMARITAN LETTER BIT"));
        data.insert(std::make_pair(0x0802,"SAMARITAN LETTER GAMAN"));
        data.insert(std::make_pair(0x0803,"SAMARITAN LETTER DALAT"));
        data.insert(std::make_pair(0x0804,"SAMARITAN LETTER IY"));
        data.insert(std::make_pair(0x0805,"SAMARITAN LETTER BAA"));
        data.insert(std::make_pair(0x0806,"SAMARITAN LETTER ZEN"));
        data.insert(std::make_pair(0x0807,"SAMARITAN LETTER IT"));
        data.insert(std::make_pair(0x0808,"SAMARITAN LETTER TIT"));
        data.insert(std::make_pair(0x0809,"SAMARITAN LETTER YUT"));
        data.insert(std::make_pair(0x080a,"SAMARITAN LETTER KAAF"));
        data.insert(std::make_pair(0x080b,"SAMARITAN LETTER LABAT"));
        data.insert(std::make_pair(0x080c,"SAMARITAN LETTER MIM"));
        data.insert(std::make_pair(0x080d,"SAMARITAN LETTER NUN"));
        data.insert(std::make_pair(0x080e,"SAMARITAN LETTER SINGAAT"));
        data.insert(std::make_pair(0x080f,"SAMARITAN LETTER IN"));
        data.insert(std::make_pair(0x0810,"SAMARITAN LETTER FI"));
        data.insert(std::make_pair(0x0811,"SAMARITAN LETTER TSAADIY"));
        data.insert(std::make_pair(0x0812,"SAMARITAN LETTER QUF"));
        data.insert(std::make_pair(0x0813,"SAMARITAN LETTER RISH"));
        data.insert(std::make_pair(0x0814,"SAMARITAN LETTER SHAN"));
        data.insert(std::make_pair(0x0815,"SAMARITAN LETTER TAAF"));
        data.insert(std::make_pair(0x0816,"SAMARITAN MARK IN"));
        data.insert(std::make_pair(0x0817,"SAMARITAN MARK IN-ALAF"));
        data.insert(std::make_pair(0x0818,"SAMARITAN MARK OCCLUSION"));
        data.insert(std::make_pair(0x0819,"SAMARITAN MARK DAGESH"));
        data.insert(std::make_pair(0x081a,"SAMARITAN MODIFIER LETTER EPENTHETIC YUT"));
        data.insert(std::make_pair(0x081b,"SAMARITAN MARK EPENTHETIC YUT"));
        data.insert(std::make_pair(0x081c,"SAMARITAN VOWEL SIGN LONG E"));
        data.insert(std::make_pair(0x081d,"SAMARITAN VOWEL SIGN E"));
        data.insert(std::make_pair(0x081e,"SAMARITAN VOWEL SIGN OVERLONG AA"));
        data.insert(std::make_pair(0x081f,"SAMARITAN VOWEL SIGN LONG AA"));
        data.insert(std::make_pair(0x0820,"SAMARITAN VOWEL SIGN AA"));
        data.insert(std::make_pair(0x0821,"SAMARITAN VOWEL SIGN OVERLONG A"));
        data.insert(std::make_pair(0x0822,"SAMARITAN VOWEL SIGN LONG A"));
        data.insert(std::make_pair(0x0823,"SAMARITAN VOWEL SIGN A"));
        data.insert(std::make_pair(0x0824,"SAMARITAN MODIFIER LETTER SHORT A"));
        data.insert(std::make_pair(0x0825,"SAMARITAN VOWEL SIGN SHORT A"));
        data.insert(std::make_pair(0x0826,"SAMARITAN VOWEL SIGN LONG U"));
        data.insert(std::make_pair(0x0827,"SAMARITAN VOWEL SIGN U"));
        data.insert(std::make_pair(0x0828,"SAMARITAN MODIFIER LETTER I"));
        data.insert(std::make_pair(0x0829,"SAMARITAN VOWEL SIGN LONG I"));
        data.insert(std::make_pair(0x082a,"SAMARITAN VOWEL SIGN I"));
        data.insert(std::make_pair(0x082b,"SAMARITAN VOWEL SIGN O"));
        data.insert(std::make_pair(0x082c,"SAMARITAN VOWEL SIGN SUKUN"));
        data.insert(std::make_pair(0x082d,"SAMARITAN MARK NEQUDAA"));
        data.insert(std::make_pair(0x0830,"SAMARITAN PUNCTUATION NEQUDAA"));
        data.insert(std::make_pair(0x0831,"SAMARITAN PUNCTUATION AFSAAQ"));
        data.insert(std::make_pair(0x0832,"SAMARITAN PUNCTUATION ANGED"));
        data.insert(std::make_pair(0x0833,"SAMARITAN PUNCTUATION BAU"));
        data.insert(std::make_pair(0x0834,"SAMARITAN PUNCTUATION ATMAAU"));
        data.insert(std::make_pair(0x0835,"SAMARITAN PUNCTUATION SHIYYAALAA"));
        data.insert(std::make_pair(0x0836,"SAMARITAN ABBREVIATION MARK"));
        data.insert(std::make_pair(0x0837,"SAMARITAN PUNCTUATION MELODIC QITSA"));
        data.insert(std::make_pair(0x0838,"SAMARITAN PUNCTUATION ZIQAA"));
        data.insert(std::make_pair(0x0839,"SAMARITAN PUNCTUATION QITSA"));
        data.insert(std::make_pair(0x083a,"SAMARITAN PUNCTUATION ZAEF"));
        data.insert(std::make_pair(0x083b,"SAMARITAN PUNCTUATION TURU"));
        data.insert(std::make_pair(0x083c,"SAMARITAN PUNCTUATION ARKAANU"));
        data.insert(std::make_pair(0x083d,"SAMARITAN PUNCTUATION SOF MASHFAAT"));
        data.insert(std::make_pair(0x083e,"SAMARITAN PUNCTUATION ANNAAU"));
        data.insert(std::make_pair(0x0840,"MANDAIC LETTER HALQA"));
        data.insert(std::make_pair(0x0841,"MANDAIC LETTER AB"));
        data.insert(std::make_pair(0x0842,"MANDAIC LETTER AG"));
        data.insert(std::make_pair(0x0843,"MANDAIC LETTER AD"));
        data.insert(std::make_pair(0x0844,"MANDAIC LETTER AH"));
        data.insert(std::make_pair(0x0845,"MANDAIC LETTER USHENNA"));
        data.insert(std::make_pair(0x0846,"MANDAIC LETTER AZ"));
        data.insert(std::make_pair(0x0847,"MANDAIC LETTER IT"));
        data.insert(std::make_pair(0x0848,"MANDAIC LETTER ATT"));
        data.insert(std::make_pair(0x0849,"MANDAIC LETTER AKSA"));
        data.insert(std::make_pair(0x084a,"MANDAIC LETTER AK"));
        data.insert(std::make_pair(0x084b,"MANDAIC LETTER AL"));
        data.insert(std::make_pair(0x084c,"MANDAIC LETTER AM"));
        data.insert(std::make_pair(0x084d,"MANDAIC LETTER AN"));
        data.insert(std::make_pair(0x084e,"MANDAIC LETTER AS"));
        data.insert(std::make_pair(0x084f,"MANDAIC LETTER IN"));
        data.insert(std::make_pair(0x0850,"MANDAIC LETTER AP"));
        data.insert(std::make_pair(0x0851,"MANDAIC LETTER ASZ"));
        data.insert(std::make_pair(0x0852,"MANDAIC LETTER AQ"));
        data.insert(std::make_pair(0x0853,"MANDAIC LETTER AR"));
        data.insert(std::make_pair(0x0854,"MANDAIC LETTER ASH"));
        data.insert(std::make_pair(0x0855,"MANDAIC LETTER AT"));
        data.insert(std::make_pair(0x0856,"MANDAIC LETTER DUSHENNA"));
        data.insert(std::make_pair(0x0857,"MANDAIC LETTER KAD"));
        data.insert(std::make_pair(0x0858,"MANDAIC LETTER AIN"));
        data.insert(std::make_pair(0x0859,"MANDAIC AFFRICATION MARK"));
        data.insert(std::make_pair(0x085a,"MANDAIC VOCALIZATION MARK"));
        data.insert(std::make_pair(0x085b,"MANDAIC GEMINATION MARK"));
        data.insert(std::make_pair(0x085e,"MANDAIC PUNCTUATION"));
        data.insert(std::make_pair(0x0860,"SYRIAC LETTER MALAYALAM NGA"));
        data.insert(std::make_pair(0x0861,"SYRIAC LETTER MALAYALAM JA"));
        data.insert(std::make_pair(0x0862,"SYRIAC LETTER MALAYALAM NYA"));
        data.insert(std::make_pair(0x0863,"SYRIAC LETTER MALAYALAM TTA"));
        data.insert(std::make_pair(0x0864,"SYRIAC LETTER MALAYALAM NNA"));
        data.insert(std::make_pair(0x0865,"SYRIAC LETTER MALAYALAM NNNA"));
        data.insert(std::make_pair(0x0866,"SYRIAC LETTER MALAYALAM BHA"));
        data.insert(std::make_pair(0x0867,"SYRIAC LETTER MALAYALAM RA"));
        data.insert(std::make_pair(0x0868,"SYRIAC LETTER MALAYALAM LLA"));
        data.insert(std::make_pair(0x0869,"SYRIAC LETTER MALAYALAM LLLA"));
        data.insert(std::make_pair(0x086a,"SYRIAC LETTER MALAYALAM SSA"));
        data.insert(std::make_pair(0x0870,"ARABIC LETTER ALEF WITH ATTACHED FATHA"));
        data.insert(std::make_pair(0x0871,"ARABIC LETTER ALEF WITH ATTACHED TOP RIGHT FATHA"));
        data.insert(std::make_pair(0x0872,"ARABIC LETTER ALEF WITH RIGHT MIDDLE STROKE"));
        data.insert(std::make_pair(0x0873,"ARABIC LETTER ALEF WITH LEFT MIDDLE STROKE"));
        data.insert(std::make_pair(0x0874,"ARABIC LETTER ALEF WITH ATTACHED KASRA"));
        data.insert(std::make_pair(0x0875,"ARABIC LETTER ALEF WITH ATTACHED BOTTOM RIGHT KASRA"));
        data.insert(std::make_pair(0x0876,"ARABIC LETTER ALEF WITH ATTACHED ROUND DOT ABOVE"));
        data.insert(std::make_pair(0x0877,"ARABIC LETTER ALEF WITH ATTACHED RIGHT ROUND DOT"));
        data.insert(std::make_pair(0x0878,"ARABIC LETTER ALEF WITH ATTACHED LEFT ROUND DOT"));
        data.insert(std::make_pair(0x0879,"ARABIC LETTER ALEF WITH ATTACHED ROUND DOT BELOW"));
        data.insert(std::make_pair(0x087a,"ARABIC LETTER ALEF WITH DOT ABOVE"));
        data.insert(std::make_pair(0x087b,"ARABIC LETTER ALEF WITH ATTACHED TOP RIGHT FATHA AND DOT ABOVE"));
        data.insert(std::make_pair(0x087c,"ARABIC LETTER ALEF WITH RIGHT MIDDLE STROKE AND DOT ABOVE"));
        data.insert(std::make_pair(0x087d,"ARABIC LETTER ALEF WITH ATTACHED BOTTOM RIGHT KASRA AND DOT ABOVE"));
        data.insert(std::make_pair(0x087e,"ARABIC LETTER ALEF WITH ATTACHED TOP RIGHT FATHA AND LEFT RING"));
        data.insert(std::make_pair(0x087f,"ARABIC LETTER ALEF WITH RIGHT MIDDLE STROKE AND LEFT RING"));
        data.insert(std::make_pair(0x0880,"ARABIC LETTER ALEF WITH ATTACHED BOTTOM RIGHT KASRA AND LEFT RING"));
        data.insert(std::make_pair(0x0881,"ARABIC LETTER ALEF WITH ATTACHED RIGHT HAMZA"));
        data.insert(std::make_pair(0x0882,"ARABIC LETTER ALEF WITH ATTACHED LEFT HAMZA"));
        data.insert(std::make_pair(0x0883,"ARABIC TATWEEL WITH OVERSTRUCK HAMZA"));
        data.insert(std::make_pair(0x0884,"ARABIC TATWEEL WITH OVERSTRUCK WAW"));
        data.insert(std::make_pair(0x0885,"ARABIC TATWEEL WITH TWO DOTS BELOW"));
        data.insert(std::make_pair(0x0886,"ARABIC LETTER THIN YEH"));
        data.insert(std::make_pair(0x0887,"ARABIC BASELINE ROUND DOT"));
        data.insert(std::make_pair(0x0888,"ARABIC RAISED ROUND DOT"));
        data.insert(std::make_pair(0x0889,"ARABIC LETTER NOON WITH INVERTED SMALL V"));
        data.insert(std::make_pair(0x088a,"ARABIC LETTER HAH WITH INVERTED SMALL V BELOW"));
        data.insert(std::make_pair(0x088b,"ARABIC LETTER TAH WITH DOT BELOW"));
        data.insert(std::make_pair(0x088c,"ARABIC LETTER TAH WITH THREE DOTS BELOW"));
        data.insert(std::make_pair(0x088d,"ARABIC LETTER KEHEH WITH TWO DOTS VERTICALLY BELOW"));
        data.insert(std::make_pair(0x088e,"ARABIC VERTICAL TAIL"));
        data.insert(std::make_pair(0x0890,"ARABIC POUND MARK ABOVE"));
        data.insert(std::make_pair(0x0891,"ARABIC PIASTRE MARK ABOVE"));
        data.insert(std::make_pair(0x0898,"ARABIC SMALL HIGH WORD AL-JUZ"));
        data.insert(std::make_pair(0x0899,"ARABIC SMALL LOW WORD ISHMAAM"));
        data.insert(std::make_pair(0x089a,"ARABIC SMALL LOW WORD IMAALA"));
        data.insert(std::make_pair(0x089b,"ARABIC SMALL LOW WORD TASHEEL"));
        data.insert(std::make_pair(0x089c,"ARABIC MADDA WAAJIB"));
        data.insert(std::make_pair(0x089d,"ARABIC SUPERSCRIPT ALEF MOKHASSAS"));
        data.insert(std::make_pair(0x089e,"ARABIC DOUBLED MADDA"));
        data.insert(std::make_pair(0x089f,"ARABIC HALF MADDA OVER MADDA"));
        data.insert(std::make_pair(0x08a0,"ARABIC LETTER BEH WITH SMALL V BELOW"));
        data.insert(std::make_pair(0x08a1,"ARABIC LETTER BEH WITH HAMZA ABOVE"));
        data.insert(std::make_pair(0x08a2,"ARABIC LETTER JEEM WITH TWO DOTS ABOVE"));
        data.insert(std::make_pair(0x08a3,"ARABIC LETTER TAH WITH TWO DOTS ABOVE"));
        data.insert(std::make_pair(0x08a4,"ARABIC LETTER FEH WITH DOT BELOW AND THREE DOTS ABOVE"));
        data.insert(std::make_pair(0x08a5,"ARABIC LETTER QAF WITH DOT BELOW"));
        data.insert(std::make_pair(0x08a6,"ARABIC LETTER LAM WITH DOUBLE BAR"));
        data.insert(std::make_pair(0x08a7,"ARABIC LETTER MEEM WITH THREE DOTS ABOVE"));
        data.insert(std::make_pair(0x08a8,"ARABIC LETTER YEH WITH TWO DOTS BELOW AND HAMZA ABOVE"));
        data.insert(std::make_pair(0x08a9,"ARABIC LETTER YEH WITH TWO DOTS BELOW AND DOT ABOVE"));
        data.insert(std::make_pair(0x08aa,"ARABIC LETTER REH WITH LOOP"));
        data.insert(std::make_pair(0x08ab,"ARABIC LETTER WAW WITH DOT WITHIN"));
        data.insert(std::make_pair(0x08ac,"ARABIC LETTER ROHINGYA YEH"));
        data.insert(std::make_pair(0x08ad,"ARABIC LETTER LOW ALEF"));
        data.insert(std::make_pair(0x08ae,"ARABIC LETTER DAL WITH THREE DOTS BELOW"));
        data.insert(std::make_pair(0x08af,"ARABIC LETTER SAD WITH THREE DOTS BELOW"));
        data.insert(std::make_pair(0x08b0,"ARABIC LETTER GAF WITH INVERTED STROKE"));
        data.insert(std::make_pair(0x08b1,"ARABIC LETTER STRAIGHT WAW"));
        data.insert(std::make_pair(0x08b2,"ARABIC LETTER ZAIN WITH INVERTED V ABOVE"));
        data.insert(std::make_pair(0x08b3,"ARABIC LETTER AIN WITH THREE DOTS BELOW"));
        data.insert(std::make_pair(0x08b4,"ARABIC LETTER KAF WITH DOT BELOW"));
        data.insert(std::make_pair(0x08b5,"ARABIC LETTER QAF WITH DOT BELOW AND NO DOTS ABOVE"));
        data.insert(std::make_pair(0x08b6,"ARABIC LETTER BEH WITH SMALL MEEM ABOVE"));
        data.insert(std::make_pair(0x08b7,"ARABIC LETTER PEH WITH SMALL MEEM ABOVE"));
        data.insert(std::make_pair(0x08b8,"ARABIC LETTER TEH WITH SMALL TEH ABOVE"));
        data.insert(std::make_pair(0x08b9,"ARABIC LETTER REH WITH SMALL NOON ABOVE"));
        data.insert(std::make_pair(0x08ba,"ARABIC LETTER YEH WITH TWO DOTS BELOW AND SMALL NOON ABOVE"));
        data.insert(std::make_pair(0x08bb,"ARABIC LETTER AFRICAN FEH"));
        data.insert(std::make_pair(0x08bc,"ARABIC LETTER AFRICAN QAF"));
        data.insert(std::make_pair(0x08bd,"ARABIC LETTER AFRICAN NOON"));
        data.insert(std::make_pair(0x08be,"ARABIC LETTER PEH WITH SMALL V"));
        data.insert(std::make_pair(0x08bf,"ARABIC LETTER TEH WITH SMALL V"));
        data.insert(std::make_pair(0x08c0,"ARABIC LETTER TTEH WITH SMALL V"));
        data.insert(std::make_pair(0x08c1,"ARABIC LETTER TCHEH WITH SMALL V"));
        data.insert(std::make_pair(0x08c2,"ARABIC LETTER KEHEH WITH SMALL V"));
        data.insert(std::make_pair(0x08c3,"ARABIC LETTER GHAIN WITH THREE DOTS ABOVE"));
        data.insert(std::make_pair(0x08c4,"ARABIC LETTER AFRICAN QAF WITH THREE DOTS ABOVE"));
        data.insert(std::make_pair(0x08c5,"ARABIC LETTER JEEM WITH THREE DOTS ABOVE"));
        data.insert(std::make_pair(0x08c6,"ARABIC LETTER JEEM WITH THREE DOTS BELOW"));
        data.insert(std::make_pair(0x08c7,"ARABIC LETTER LAM WITH SMALL ARABIC LETTER TAH ABOVE"));
        data.insert(std::make_pair(0x08c8,"ARABIC LETTER GRAF"));
        data.insert(std::make_pair(0x08c9,"ARABIC SMALL FARSI YEH"));
        data.insert(std::make_pair(0x08ca,"ARABIC SMALL HIGH FARSI YEH"));
        data.insert(std::make_pair(0x08cb,"ARABIC SMALL HIGH YEH BARREE WITH TWO DOTS BELOW"));
        data.insert(std::make_pair(0x08cc,"ARABIC SMALL HIGH WORD SAH"));
        data.insert(std::make_pair(0x08cd,"ARABIC SMALL HIGH ZAH"));
        data.insert(std::make_pair(0x08ce,"ARABIC LARGE ROUND DOT ABOVE"));
        data.insert(std::make_pair(0x08cf,"ARABIC LARGE ROUND DOT BELOW"));
        data.insert(std::make_pair(0x08d0,"ARABIC SUKUN BELOW"));
        data.insert(std::make_pair(0x08d1,"ARABIC LARGE CIRCLE BELOW"));
        data.insert(std::make_pair(0x08d2,"ARABIC LARGE ROUND DOT INSIDE CIRCLE BELOW"));
        data.insert(std::make_pair(0x08d3,"ARABIC SMALL LOW WAW"));
        data.insert(std::make_pair(0x08d4,"ARABIC SMALL HIGH WORD AR-RUB"));
        data.insert(std::make_pair(0x08d5,"ARABIC SMALL HIGH SAD"));
        data.insert(std::make_pair(0x08d6,"ARABIC SMALL HIGH AIN"));
        data.insert(std::make_pair(0x08d7,"ARABIC SMALL HIGH QAF"));
        data.insert(std::make_pair(0x08d8,"ARABIC SMALL HIGH NOON WITH KASRA"));
        data.insert(std::make_pair(0x08d9,"ARABIC SMALL LOW NOON WITH KASRA"));
        data.insert(std::make_pair(0x08da,"ARABIC SMALL HIGH WORD ATH-THALATHA"));
        data.insert(std::make_pair(0x08db,"ARABIC SMALL HIGH WORD AS-SAJDA"));
        data.insert(std::make_pair(0x08dc,"ARABIC SMALL HIGH WORD AN-NISF"));
        data.insert(std::make_pair(0x08dd,"ARABIC SMALL HIGH WORD SAKTA"));
        data.insert(std::make_pair(0x08de,"ARABIC SMALL HIGH WORD QIF"));
        data.insert(std::make_pair(0x08df,"ARABIC SMALL HIGH WORD WAQFA"));
        data.insert(std::make_pair(0x08e0,"ARABIC SMALL HIGH FOOTNOTE MARKER"));
        data.insert(std::make_pair(0x08e1,"ARABIC SMALL HIGH SIGN SAFHA"));
        data.insert(std::make_pair(0x08e2,"ARABIC DISPUTED END OF AYAH"));
        data.insert(std::make_pair(0x08e3,"ARABIC TURNED DAMMA BELOW"));
        data.insert(std::make_pair(0x08e4,"ARABIC CURLY FATHA"));
        data.insert(std::make_pair(0x08e5,"ARABIC CURLY DAMMA"));
        data.insert(std::make_pair(0x08e6,"ARABIC CURLY KASRA"));
        data.insert(std::make_pair(0x08e7,"ARABIC CURLY FATHATAN"));
        data.insert(std::make_pair(0x08e8,"ARABIC CURLY DAMMATAN"));
        data.insert(std::make_pair(0x08e9,"ARABIC CURLY KASRATAN"));
        data.insert(std::make_pair(0x08ea,"ARABIC TONE ONE DOT ABOVE"));
        data.insert(std::make_pair(0x08eb,"ARABIC TONE TWO DOTS ABOVE"));
        data.insert(std::make_pair(0x08ec,"ARABIC TONE LOOP ABOVE"));
        data.insert(std::make_pair(0x08ed,"ARABIC TONE ONE DOT BELOW"));
        data.insert(std::make_pair(0x08ee,"ARABIC TONE TWO DOTS BELOW"));
        data.insert(std::make_pair(0x08ef,"ARABIC TONE LOOP BELOW"));
        data.insert(std::make_pair(0x08f0,"ARABIC OPEN FATHATAN"));
        data.insert(std::make_pair(0x08f1,"ARABIC OPEN DAMMATAN"));
        data.insert(std::make_pair(0x08f2,"ARABIC OPEN KASRATAN"));
        data.insert(std::make_pair(0x08f3,"ARABIC SMALL HIGH WAW"));
        data.insert(std::make_pair(0x08f4,"ARABIC FATHA WITH RING"));
        data.insert(std::make_pair(0x08f5,"ARABIC FATHA WITH DOT ABOVE"));
        data.insert(std::make_pair(0x08f6,"ARABIC KASRA WITH DOT BELOW"));
        data.insert(std::make_pair(0x08f7,"ARABIC LEFT ARROWHEAD ABOVE"));
        data.insert(std::make_pair(0x08f8,"ARABIC RIGHT ARROWHEAD ABOVE"));
        data.insert(std::make_pair(0x08f9,"ARABIC LEFT ARROWHEAD BELOW"));
        data.insert(std::make_pair(0x08fa,"ARABIC RIGHT ARROWHEAD BELOW"));
        data.insert(std::make_pair(0x08fb,"ARABIC DOUBLE RIGHT ARROWHEAD ABOVE"));
        data.insert(std::make_pair(0x08fc,"ARABIC DOUBLE RIGHT ARROWHEAD ABOVE WITH DOT"));
        data.insert(std::make_pair(0x08fd,"ARABIC RIGHT ARROWHEAD ABOVE WITH DOT"));
        data.insert(std::make_pair(0x08fe,"ARABIC DAMMA WITH DOT"));
        data.insert(std::make_pair(0x08ff,"ARABIC MARK SIDEWAYS NOON GHUNNA"));
        data.insert(std::make_pair(0x0900,"DEVANAGARI SIGN INVERTED CANDRABINDU"));
        data.insert(std::make_pair(0x0901,"DEVANAGARI SIGN CANDRABINDU"));
        data.insert(std::make_pair(0x0902,"DEVANAGARI SIGN ANUSVARA"));
        data.insert(std::make_pair(0x0903,"DEVANAGARI SIGN VISARGA"));
        data.insert(std::make_pair(0x0904,"DEVANAGARI LETTER SHORT A"));
        data.insert(std::make_pair(0x0905,"DEVANAGARI LETTER A"));
        data.insert(std::make_pair(0x0906,"DEVANAGARI LETTER AA"));
        data.insert(std::make_pair(0x0907,"DEVANAGARI LETTER I"));
        data.insert(std::make_pair(0x0908,"DEVANAGARI LETTER II"));
        data.insert(std::make_pair(0x0909,"DEVANAGARI LETTER U"));
        data.insert(std::make_pair(0x090a,"DEVANAGARI LETTER UU"));
        data.insert(std::make_pair(0x090b,"DEVANAGARI LETTER VOCALIC R"));
        data.insert(std::make_pair(0x090c,"DEVANAGARI LETTER VOCALIC L"));
        data.insert(std::make_pair(0x090d,"DEVANAGARI LETTER CANDRA E"));
        data.insert(std::make_pair(0x090e,"DEVANAGARI LETTER SHORT E"));
        data.insert(std::make_pair(0x090f,"DEVANAGARI LETTER E"));
        data.insert(std::make_pair(0x0910,"DEVANAGARI LETTER AI"));
        data.insert(std::make_pair(0x0911,"DEVANAGARI LETTER CANDRA O"));
        data.insert(std::make_pair(0x0912,"DEVANAGARI LETTER SHORT O"));
        data.insert(std::make_pair(0x0913,"DEVANAGARI LETTER O"));
        data.insert(std::make_pair(0x0914,"DEVANAGARI LETTER AU"));
        data.insert(std::make_pair(0x0915,"DEVANAGARI LETTER KA"));
        data.insert(std::make_pair(0x0916,"DEVANAGARI LETTER KHA"));
        data.insert(std::make_pair(0x0917,"DEVANAGARI LETTER GA"));
        data.insert(std::make_pair(0x0918,"DEVANAGARI LETTER GHA"));
        data.insert(std::make_pair(0x0919,"DEVANAGARI LETTER NGA"));
        data.insert(std::make_pair(0x091a,"DEVANAGARI LETTER CA"));
        data.insert(std::make_pair(0x091b,"DEVANAGARI LETTER CHA"));
        data.insert(std::make_pair(0x091c,"DEVANAGARI LETTER JA"));
        data.insert(std::make_pair(0x091d,"DEVANAGARI LETTER JHA"));
        data.insert(std::make_pair(0x091e,"DEVANAGARI LETTER NYA"));
        data.insert(std::make_pair(0x091f,"DEVANAGARI LETTER TTA"));
        data.insert(std::make_pair(0x0920,"DEVANAGARI LETTER TTHA"));
        data.insert(std::make_pair(0x0921,"DEVANAGARI LETTER DDA"));
        data.insert(std::make_pair(0x0922,"DEVANAGARI LETTER DDHA"));
        data.insert(std::make_pair(0x0923,"DEVANAGARI LETTER NNA"));
        data.insert(std::make_pair(0x0924,"DEVANAGARI LETTER TA"));
        data.insert(std::make_pair(0x0925,"DEVANAGARI LETTER THA"));
        data.insert(std::make_pair(0x0926,"DEVANAGARI LETTER DA"));
        data.insert(std::make_pair(0x0927,"DEVANAGARI LETTER DHA"));
        data.insert(std::make_pair(0x0928,"DEVANAGARI LETTER NA"));
        data.insert(std::make_pair(0x0929,"DEVANAGARI LETTER NNNA"));
        data.insert(std::make_pair(0x092a,"DEVANAGARI LETTER PA"));
        data.insert(std::make_pair(0x092b,"DEVANAGARI LETTER PHA"));
        data.insert(std::make_pair(0x092c,"DEVANAGARI LETTER BA"));
        data.insert(std::make_pair(0x092d,"DEVANAGARI LETTER BHA"));
        data.insert(std::make_pair(0x092e,"DEVANAGARI LETTER MA"));
        data.insert(std::make_pair(0x092f,"DEVANAGARI LETTER YA"));
        data.insert(std::make_pair(0x0930,"DEVANAGARI LETTER RA"));
        data.insert(std::make_pair(0x0931,"DEVANAGARI LETTER RRA"));
        data.insert(std::make_pair(0x0932,"DEVANAGARI LETTER LA"));
        data.insert(std::make_pair(0x0933,"DEVANAGARI LETTER LLA"));
        data.insert(std::make_pair(0x0934,"DEVANAGARI LETTER LLLA"));
        data.insert(std::make_pair(0x0935,"DEVANAGARI LETTER VA"));
        data.insert(std::make_pair(0x0936,"DEVANAGARI LETTER SHA"));
        data.insert(std::make_pair(0x0937,"DEVANAGARI LETTER SSA"));
        data.insert(std::make_pair(0x0938,"DEVANAGARI LETTER SA"));
        data.insert(std::make_pair(0x0939,"DEVANAGARI LETTER HA"));
        data.insert(std::make_pair(0x093a,"DEVANAGARI VOWEL SIGN OE"));
        data.insert(std::make_pair(0x093b,"DEVANAGARI VOWEL SIGN OOE"));
        data.insert(std::make_pair(0x093c,"DEVANAGARI SIGN NUKTA"));
        data.insert(std::make_pair(0x093d,"DEVANAGARI SIGN AVAGRAHA"));
        data.insert(std::make_pair(0x093e,"DEVANAGARI VOWEL SIGN AA"));
        data.insert(std::make_pair(0x093f,"DEVANAGARI VOWEL SIGN I"));
        data.insert(std::make_pair(0x0940,"DEVANAGARI VOWEL SIGN II"));
        data.insert(std::make_pair(0x0941,"DEVANAGARI VOWEL SIGN U"));
        data.insert(std::make_pair(0x0942,"DEVANAGARI VOWEL SIGN UU"));
        data.insert(std::make_pair(0x0943,"DEVANAGARI VOWEL SIGN VOCALIC R"));
        data.insert(std::make_pair(0x0944,"DEVANAGARI VOWEL SIGN VOCALIC RR"));
        data.insert(std::make_pair(0x0945,"DEVANAGARI VOWEL SIGN CANDRA E"));
        data.insert(std::make_pair(0x0946,"DEVANAGARI VOWEL SIGN SHORT E"));
        data.insert(std::make_pair(0x0947,"DEVANAGARI VOWEL SIGN E"));
        data.insert(std::make_pair(0x0948,"DEVANAGARI VOWEL SIGN AI"));
        data.insert(std::make_pair(0x0949,"DEVANAGARI VOWEL SIGN CANDRA O"));
        data.insert(std::make_pair(0x094a,"DEVANAGARI VOWEL SIGN SHORT O"));
        data.insert(std::make_pair(0x094b,"DEVANAGARI VOWEL SIGN O"));
        data.insert(std::make_pair(0x094c,"DEVANAGARI VOWEL SIGN AU"));
        data.insert(std::make_pair(0x094d,"DEVANAGARI SIGN VIRAMA"));
        data.insert(std::make_pair(0x094e,"DEVANAGARI VOWEL SIGN PRISHTHAMATRA E"));
        data.insert(std::make_pair(0x094f,"DEVANAGARI VOWEL SIGN AW"));
        data.insert(std::make_pair(0x0950,"DEVANAGARI OM"));
        data.insert(std::make_pair(0x0951,"DEVANAGARI STRESS SIGN UDATTA"));
        data.insert(std::make_pair(0x0952,"DEVANAGARI STRESS SIGN ANUDATTA"));
        data.insert(std::make_pair(0x0953,"DEVANAGARI GRAVE ACCENT"));
        data.insert(std::make_pair(0x0954,"DEVANAGARI ACUTE ACCENT"));
        data.insert(std::make_pair(0x0955,"DEVANAGARI VOWEL SIGN CANDRA LONG E"));
        data.insert(std::make_pair(0x0956,"DEVANAGARI VOWEL SIGN UE"));
        data.insert(std::make_pair(0x0957,"DEVANAGARI VOWEL SIGN UUE"));
        data.insert(std::make_pair(0x0958,"DEVANAGARI LETTER QA"));
        data.insert(std::make_pair(0x0959,"DEVANAGARI LETTER KHHA"));
        data.insert(std::make_pair(0x095a,"DEVANAGARI LETTER GHHA"));
        data.insert(std::make_pair(0x095b,"DEVANAGARI LETTER ZA"));
        data.insert(std::make_pair(0x095c,"DEVANAGARI LETTER DDDHA"));
        data.insert(std::make_pair(0x095d,"DEVANAGARI LETTER RHA"));
        data.insert(std::make_pair(0x095e,"DEVANAGARI LETTER FA"));
        data.insert(std::make_pair(0x095f,"DEVANAGARI LETTER YYA"));
        data.insert(std::make_pair(0x0960,"DEVANAGARI LETTER VOCALIC RR"));
        data.insert(std::make_pair(0x0961,"DEVANAGARI LETTER VOCALIC LL"));
        data.insert(std::make_pair(0x0962,"DEVANAGARI VOWEL SIGN VOCALIC L"));
        data.insert(std::make_pair(0x0963,"DEVANAGARI VOWEL SIGN VOCALIC LL"));
        data.insert(std::make_pair(0x0964,"DEVANAGARI DANDA"));
        data.insert(std::make_pair(0x0965,"DEVANAGARI DOUBLE DANDA"));
        data.insert(std::make_pair(0x0966,"DEVANAGARI DIGIT ZERO"));
        data.insert(std::make_pair(0x0967,"DEVANAGARI DIGIT ONE"));
        data.insert(std::make_pair(0x0968,"DEVANAGARI DIGIT TWO"));
        data.insert(std::make_pair(0x0969,"DEVANAGARI DIGIT THREE"));
        data.insert(std::make_pair(0x096a,"DEVANAGARI DIGIT FOUR"));
        data.insert(std::make_pair(0x096b,"DEVANAGARI DIGIT FIVE"));
        data.insert(std::make_pair(0x096c,"DEVANAGARI DIGIT SIX"));
        data.insert(std::make_pair(0x096d,"DEVANAGARI DIGIT SEVEN"));
        data.insert(std::make_pair(0x096e,"DEVANAGARI DIGIT EIGHT"));
        data.insert(std::make_pair(0x096f,"DEVANAGARI DIGIT NINE"));
        data.insert(std::make_pair(0x0970,"DEVANAGARI ABBREVIATION SIGN"));
        data.insert(std::make_pair(0x0971,"DEVANAGARI SIGN HIGH SPACING DOT"));
        data.insert(std::make_pair(0x0972,"DEVANAGARI LETTER CANDRA A"));
        data.insert(std::make_pair(0x0973,"DEVANAGARI LETTER OE"));
        data.insert(std::make_pair(0x0974,"DEVANAGARI LETTER OOE"));
        data.insert(std::make_pair(0x0975,"DEVANAGARI LETTER AW"));
        data.insert(std::make_pair(0x0976,"DEVANAGARI LETTER UE"));
        data.insert(std::make_pair(0x0977,"DEVANAGARI LETTER UUE"));
        data.insert(std::make_pair(0x0978,"DEVANAGARI LETTER MARWARI DDA"));
        data.insert(std::make_pair(0x0979,"DEVANAGARI LETTER ZHA"));
        data.insert(std::make_pair(0x097a,"DEVANAGARI LETTER HEAVY YA"));
        data.insert(std::make_pair(0x097b,"DEVANAGARI LETTER GGA"));
        data.insert(std::make_pair(0x097c,"DEVANAGARI LETTER JJA"));
        data.insert(std::make_pair(0x097d,"DEVANAGARI LETTER GLOTTAL STOP"));
        data.insert(std::make_pair(0x097e,"DEVANAGARI LETTER DDDA"));
        data.insert(std::make_pair(0x097f,"DEVANAGARI LETTER BBA"));
        data.insert(std::make_pair(0x0980,"BENGALI ANJI"));
        data.insert(std::make_pair(0x0981,"BENGALI SIGN CANDRABINDU"));
        data.insert(std::make_pair(0x0982,"BENGALI SIGN ANUSVARA"));
        data.insert(std::make_pair(0x0983,"BENGALI SIGN VISARGA"));
        data.insert(std::make_pair(0x0985,"BENGALI LETTER A"));
        data.insert(std::make_pair(0x0986,"BENGALI LETTER AA"));
        data.insert(std::make_pair(0x0987,"BENGALI LETTER I"));
        data.insert(std::make_pair(0x0988,"BENGALI LETTER II"));
        data.insert(std::make_pair(0x0989,"BENGALI LETTER U"));
        data.insert(std::make_pair(0x098a,"BENGALI LETTER UU"));
        data.insert(std::make_pair(0x098b,"BENGALI LETTER VOCALIC R"));
        data.insert(std::make_pair(0x098c,"BENGALI LETTER VOCALIC L"));
        data.insert(std::make_pair(0x098f,"BENGALI LETTER E"));
        data.insert(std::make_pair(0x0990,"BENGALI LETTER AI"));
        data.insert(std::make_pair(0x0993,"BENGALI LETTER O"));
        data.insert(std::make_pair(0x0994,"BENGALI LETTER AU"));
        data.insert(std::make_pair(0x0995,"BENGALI LETTER KA"));
        data.insert(std::make_pair(0x0996,"BENGALI LETTER KHA"));
        data.insert(std::make_pair(0x0997,"BENGALI LETTER GA"));
        data.insert(std::make_pair(0x0998,"BENGALI LETTER GHA"));
        data.insert(std::make_pair(0x0999,"BENGALI LETTER NGA"));
        data.insert(std::make_pair(0x099a,"BENGALI LETTER CA"));
        data.insert(std::make_pair(0x099b,"BENGALI LETTER CHA"));
        data.insert(std::make_pair(0x099c,"BENGALI LETTER JA"));
        data.insert(std::make_pair(0x099d,"BENGALI LETTER JHA"));
        data.insert(std::make_pair(0x099e,"BENGALI LETTER NYA"));
        data.insert(std::make_pair(0x099f,"BENGALI LETTER TTA"));
        data.insert(std::make_pair(0x09a0,"BENGALI LETTER TTHA"));
        data.insert(std::make_pair(0x09a1,"BENGALI LETTER DDA"));
        data.insert(std::make_pair(0x09a2,"BENGALI LETTER DDHA"));
        data.insert(std::make_pair(0x09a3,"BENGALI LETTER NNA"));
        data.insert(std::make_pair(0x09a4,"BENGALI LETTER TA"));
        data.insert(std::make_pair(0x09a5,"BENGALI LETTER THA"));
        data.insert(std::make_pair(0x09a6,"BENGALI LETTER DA"));
        data.insert(std::make_pair(0x09a7,"BENGALI LETTER DHA"));
        data.insert(std::make_pair(0x09a8,"BENGALI LETTER NA"));
        data.insert(std::make_pair(0x09aa,"BENGALI LETTER PA"));
        data.insert(std::make_pair(0x09ab,"BENGALI LETTER PHA"));
        data.insert(std::make_pair(0x09ac,"BENGALI LETTER BA"));
        data.insert(std::make_pair(0x09ad,"BENGALI LETTER BHA"));
        data.insert(std::make_pair(0x09ae,"BENGALI LETTER MA"));
        data.insert(std::make_pair(0x09af,"BENGALI LETTER YA"));
        data.insert(std::make_pair(0x09b0,"BENGALI LETTER RA"));
        data.insert(std::make_pair(0x09b2,"BENGALI LETTER LA"));
        data.insert(std::make_pair(0x09b6,"BENGALI LETTER SHA"));
        data.insert(std::make_pair(0x09b7,"BENGALI LETTER SSA"));
        data.insert(std::make_pair(0x09b8,"BENGALI LETTER SA"));
        data.insert(std::make_pair(0x09b9,"BENGALI LETTER HA"));
        data.insert(std::make_pair(0x09bc,"BENGALI SIGN NUKTA"));
        data.insert(std::make_pair(0x09bd,"BENGALI SIGN AVAGRAHA"));
        data.insert(std::make_pair(0x09be,"BENGALI VOWEL SIGN AA"));
        data.insert(std::make_pair(0x09bf,"BENGALI VOWEL SIGN I"));
        data.insert(std::make_pair(0x09c0,"BENGALI VOWEL SIGN II"));
        data.insert(std::make_pair(0x09c1,"BENGALI VOWEL SIGN U"));
        data.insert(std::make_pair(0x09c2,"BENGALI VOWEL SIGN UU"));
        data.insert(std::make_pair(0x09c3,"BENGALI VOWEL SIGN VOCALIC R"));
        data.insert(std::make_pair(0x09c4,"BENGALI VOWEL SIGN VOCALIC RR"));
        data.insert(std::make_pair(0x09c7,"BENGALI VOWEL SIGN E"));
        data.insert(std::make_pair(0x09c8,"BENGALI VOWEL SIGN AI"));
        data.insert(std::make_pair(0x09cb,"BENGALI VOWEL SIGN O"));
        data.insert(std::make_pair(0x09cc,"BENGALI VOWEL SIGN AU"));
        data.insert(std::make_pair(0x09cd,"BENGALI SIGN VIRAMA"));
        data.insert(std::make_pair(0x09ce,"BENGALI LETTER KHANDA TA"));
        data.insert(std::make_pair(0x09d7,"BENGALI AU LENGTH MARK"));
        data.insert(std::make_pair(0x09dc,"BENGALI LETTER RRA"));
        data.insert(std::make_pair(0x09dd,"BENGALI LETTER RHA"));
        data.insert(std::make_pair(0x09df,"BENGALI LETTER YYA"));
        data.insert(std::make_pair(0x09e0,"BENGALI LETTER VOCALIC RR"));
        data.insert(std::make_pair(0x09e1,"BENGALI LETTER VOCALIC LL"));
        data.insert(std::make_pair(0x09e2,"BENGALI VOWEL SIGN VOCALIC L"));
        data.insert(std::make_pair(0x09e3,"BENGALI VOWEL SIGN VOCALIC LL"));
        data.insert(std::make_pair(0x09e6,"BENGALI DIGIT ZERO"));
        data.insert(std::make_pair(0x09e7,"BENGALI DIGIT ONE"));
        data.insert(std::make_pair(0x09e8,"BENGALI DIGIT TWO"));
        data.insert(std::make_pair(0x09e9,"BENGALI DIGIT THREE"));
        data.insert(std::make_pair(0x09ea,"BENGALI DIGIT FOUR"));
        data.insert(std::make_pair(0x09eb,"BENGALI DIGIT FIVE"));
        data.insert(std::make_pair(0x09ec,"BENGALI DIGIT SIX"));
        data.insert(std::make_pair(0x09ed,"BENGALI DIGIT SEVEN"));
        data.insert(std::make_pair(0x09ee,"BENGALI DIGIT EIGHT"));
        data.insert(std::make_pair(0x09ef,"BENGALI DIGIT NINE"));
        data.insert(std::make_pair(0x09f0,"BENGALI LETTER RA WITH MIDDLE DIAGONAL"));
        data.insert(std::make_pair(0x09f1,"BENGALI LETTER RA WITH LOWER DIAGONAL"));
        data.insert(std::make_pair(0x09f2,"BENGALI RUPEE MARK"));
        data.insert(std::make_pair(0x09f3,"BENGALI RUPEE SIGN"));
        data.insert(std::make_pair(0x09f4,"BENGALI CURRENCY NUMERATOR ONE"));
        data.insert(std::make_pair(0x09f5,"BENGALI CURRENCY NUMERATOR TWO"));
        data.insert(std::make_pair(0x09f6,"BENGALI CURRENCY NUMERATOR THREE"));
        data.insert(std::make_pair(0x09f7,"BENGALI CURRENCY NUMERATOR FOUR"));
        data.insert(std::make_pair(0x09f8,"BENGALI CURRENCY NUMERATOR ONE LESS THAN THE DENOMINATOR"));
        data.insert(std::make_pair(0x09f9,"BENGALI CURRENCY DENOMINATOR SIXTEEN"));
        data.insert(std::make_pair(0x09fa,"BENGALI ISSHAR"));
        data.insert(std::make_pair(0x09fb,"BENGALI GANDA MARK"));
        data.insert(std::make_pair(0x09fc,"BENGALI LETTER VEDIC ANUSVARA"));
        data.insert(std::make_pair(0x09fd,"BENGALI ABBREVIATION SIGN"));
        data.insert(std::make_pair(0x09fe,"BENGALI SANDHI MARK"));
        data.insert(std::make_pair(0x0a01,"GURMUKHI SIGN ADAK BINDI"));
        data.insert(std::make_pair(0x0a02,"GURMUKHI SIGN BINDI"));
        data.insert(std::make_pair(0x0a03,"GURMUKHI SIGN VISARGA"));
        data.insert(std::make_pair(0x0a05,"GURMUKHI LETTER A"));
        data.insert(std::make_pair(0x0a06,"GURMUKHI LETTER AA"));
        data.insert(std::make_pair(0x0a07,"GURMUKHI LETTER I"));
        data.insert(std::make_pair(0x0a08,"GURMUKHI LETTER II"));
        data.insert(std::make_pair(0x0a09,"GURMUKHI LETTER U"));
        data.insert(std::make_pair(0x0a0a,"GURMUKHI LETTER UU"));
        data.insert(std::make_pair(0x0a0f,"GURMUKHI LETTER EE"));
        data.insert(std::make_pair(0x0a10,"GURMUKHI LETTER AI"));
        data.insert(std::make_pair(0x0a13,"GURMUKHI LETTER OO"));
        data.insert(std::make_pair(0x0a14,"GURMUKHI LETTER AU"));
        data.insert(std::make_pair(0x0a15,"GURMUKHI LETTER KA"));
        data.insert(std::make_pair(0x0a16,"GURMUKHI LETTER KHA"));
        data.insert(std::make_pair(0x0a17,"GURMUKHI LETTER GA"));
        data.insert(std::make_pair(0x0a18,"GURMUKHI LETTER GHA"));
        data.insert(std::make_pair(0x0a19,"GURMUKHI LETTER NGA"));
        data.insert(std::make_pair(0x0a1a,"GURMUKHI LETTER CA"));
        data.insert(std::make_pair(0x0a1b,"GURMUKHI LETTER CHA"));
        data.insert(std::make_pair(0x0a1c,"GURMUKHI LETTER JA"));
        data.insert(std::make_pair(0x0a1d,"GURMUKHI LETTER JHA"));
        data.insert(std::make_pair(0x0a1e,"GURMUKHI LETTER NYA"));
        data.insert(std::make_pair(0x0a1f,"GURMUKHI LETTER TTA"));
        data.insert(std::make_pair(0x0a20,"GURMUKHI LETTER TTHA"));
        data.insert(std::make_pair(0x0a21,"GURMUKHI LETTER DDA"));
        data.insert(std::make_pair(0x0a22,"GURMUKHI LETTER DDHA"));
        data.insert(std::make_pair(0x0a23,"GURMUKHI LETTER NNA"));
        data.insert(std::make_pair(0x0a24,"GURMUKHI LETTER TA"));
        data.insert(std::make_pair(0x0a25,"GURMUKHI LETTER THA"));
        data.insert(std::make_pair(0x0a26,"GURMUKHI LETTER DA"));
        data.insert(std::make_pair(0x0a27,"GURMUKHI LETTER DHA"));
        data.insert(std::make_pair(0x0a28,"GURMUKHI LETTER NA"));
        data.insert(std::make_pair(0x0a2a,"GURMUKHI LETTER PA"));
        data.insert(std::make_pair(0x0a2b,"GURMUKHI LETTER PHA"));
        data.insert(std::make_pair(0x0a2c,"GURMUKHI LETTER BA"));
        data.insert(std::make_pair(0x0a2d,"GURMUKHI LETTER BHA"));
        data.insert(std::make_pair(0x0a2e,"GURMUKHI LETTER MA"));
        data.insert(std::make_pair(0x0a2f,"GURMUKHI LETTER YA"));
        data.insert(std::make_pair(0x0a30,"GURMUKHI LETTER RA"));
        data.insert(std::make_pair(0x0a32,"GURMUKHI LETTER LA"));
        data.insert(std::make_pair(0x0a33,"GURMUKHI LETTER LLA"));
        data.insert(std::make_pair(0x0a35,"GURMUKHI LETTER VA"));
        data.insert(std::make_pair(0x0a36,"GURMUKHI LETTER SHA"));
        data.insert(std::make_pair(0x0a38,"GURMUKHI LETTER SA"));
        data.insert(std::make_pair(0x0a39,"GURMUKHI LETTER HA"));
        data.insert(std::make_pair(0x0a3c,"GURMUKHI SIGN NUKTA"));
        data.insert(std::make_pair(0x0a3e,"GURMUKHI VOWEL SIGN AA"));
        data.insert(std::make_pair(0x0a3f,"GURMUKHI VOWEL SIGN I"));
        data.insert(std::make_pair(0x0a40,"GURMUKHI VOWEL SIGN II"));
        data.insert(std::make_pair(0x0a41,"GURMUKHI VOWEL SIGN U"));
        data.insert(std::make_pair(0x0a42,"GURMUKHI VOWEL SIGN UU"));
        data.insert(std::make_pair(0x0a47,"GURMUKHI VOWEL SIGN EE"));
        data.insert(std::make_pair(0x0a48,"GURMUKHI VOWEL SIGN AI"));
        data.insert(std::make_pair(0x0a4b,"GURMUKHI VOWEL SIGN OO"));
        data.insert(std::make_pair(0x0a4c,"GURMUKHI VOWEL SIGN AU"));
        data.insert(std::make_pair(0x0a4d,"GURMUKHI SIGN VIRAMA"));
        data.insert(std::make_pair(0x0a51,"GURMUKHI SIGN UDAAT"));
        data.insert(std::make_pair(0x0a59,"GURMUKHI LETTER KHHA"));
        data.insert(std::make_pair(0x0a5a,"GURMUKHI LETTER GHHA"));
        data.insert(std::make_pair(0x0a5b,"GURMUKHI LETTER ZA"));
        data.insert(std::make_pair(0x0a5c,"GURMUKHI LETTER RRA"));
        data.insert(std::make_pair(0x0a5e,"GURMUKHI LETTER FA"));
        data.insert(std::make_pair(0x0a66,"GURMUKHI DIGIT ZERO"));
        data.insert(std::make_pair(0x0a67,"GURMUKHI DIGIT ONE"));
        data.insert(std::make_pair(0x0a68,"GURMUKHI DIGIT TWO"));
        data.insert(std::make_pair(0x0a69,"GURMUKHI DIGIT THREE"));
        data.insert(std::make_pair(0x0a6a,"GURMUKHI DIGIT FOUR"));
        data.insert(std::make_pair(0x0a6b,"GURMUKHI DIGIT FIVE"));
        data.insert(std::make_pair(0x0a6c,"GURMUKHI DIGIT SIX"));
        data.insert(std::make_pair(0x0a6d,"GURMUKHI DIGIT SEVEN"));
        data.insert(std::make_pair(0x0a6e,"GURMUKHI DIGIT EIGHT"));
        data.insert(std::make_pair(0x0a6f,"GURMUKHI DIGIT NINE"));
        data.insert(std::make_pair(0x0a70,"GURMUKHI TIPPI"));
        data.insert(std::make_pair(0x0a71,"GURMUKHI ADDAK"));
        data.insert(std::make_pair(0x0a72,"GURMUKHI IRI"));
        data.insert(std::make_pair(0x0a73,"GURMUKHI URA"));
        data.insert(std::make_pair(0x0a74,"GURMUKHI EK ONKAR"));
        data.insert(std::make_pair(0x0a75,"GURMUKHI SIGN YAKASH"));
        data.insert(std::make_pair(0x0a76,"GURMUKHI ABBREVIATION SIGN"));
        data.insert(std::make_pair(0x0a81,"GUJARATI SIGN CANDRABINDU"));
        data.insert(std::make_pair(0x0a82,"GUJARATI SIGN ANUSVARA"));
        data.insert(std::make_pair(0x0a83,"GUJARATI SIGN VISARGA"));
        data.insert(std::make_pair(0x0a85,"GUJARATI LETTER A"));
        data.insert(std::make_pair(0x0a86,"GUJARATI LETTER AA"));
        data.insert(std::make_pair(0x0a87,"GUJARATI LETTER I"));
        data.insert(std::make_pair(0x0a88,"GUJARATI LETTER II"));
        data.insert(std::make_pair(0x0a89,"GUJARATI LETTER U"));
        data.insert(std::make_pair(0x0a8a,"GUJARATI LETTER UU"));
        data.insert(std::make_pair(0x0a8b,"GUJARATI LETTER VOCALIC R"));
        data.insert(std::make_pair(0x0a8c,"GUJARATI LETTER VOCALIC L"));
        data.insert(std::make_pair(0x0a8d,"GUJARATI VOWEL CANDRA E"));
        data.insert(std::make_pair(0x0a8f,"GUJARATI LETTER E"));
        data.insert(std::make_pair(0x0a90,"GUJARATI LETTER AI"));
        data.insert(std::make_pair(0x0a91,"GUJARATI VOWEL CANDRA O"));
        data.insert(std::make_pair(0x0a93,"GUJARATI LETTER O"));
        data.insert(std::make_pair(0x0a94,"GUJARATI LETTER AU"));
        data.insert(std::make_pair(0x0a95,"GUJARATI LETTER KA"));
        data.insert(std::make_pair(0x0a96,"GUJARATI LETTER KHA"));
        data.insert(std::make_pair(0x0a97,"GUJARATI LETTER GA"));
        data.insert(std::make_pair(0x0a98,"GUJARATI LETTER GHA"));
        data.insert(std::make_pair(0x0a99,"GUJARATI LETTER NGA"));
        data.insert(std::make_pair(0x0a9a,"GUJARATI LETTER CA"));
        data.insert(std::make_pair(0x0a9b,"GUJARATI LETTER CHA"));
        data.insert(std::make_pair(0x0a9c,"GUJARATI LETTER JA"));
        data.insert(std::make_pair(0x0a9d,"GUJARATI LETTER JHA"));
        data.insert(std::make_pair(0x0a9e,"GUJARATI LETTER NYA"));
        data.insert(std::make_pair(0x0a9f,"GUJARATI LETTER TTA"));
        data.insert(std::make_pair(0x0aa0,"GUJARATI LETTER TTHA"));
        data.insert(std::make_pair(0x0aa1,"GUJARATI LETTER DDA"));
        data.insert(std::make_pair(0x0aa2,"GUJARATI LETTER DDHA"));
        data.insert(std::make_pair(0x0aa3,"GUJARATI LETTER NNA"));
        data.insert(std::make_pair(0x0aa4,"GUJARATI LETTER TA"));
        data.insert(std::make_pair(0x0aa5,"GUJARATI LETTER THA"));
        data.insert(std::make_pair(0x0aa6,"GUJARATI LETTER DA"));
        data.insert(std::make_pair(0x0aa7,"GUJARATI LETTER DHA"));
        data.insert(std::make_pair(0x0aa8,"GUJARATI LETTER NA"));
        data.insert(std::make_pair(0x0aaa,"GUJARATI LETTER PA"));
        data.insert(std::make_pair(0x0aab,"GUJARATI LETTER PHA"));
        data.insert(std::make_pair(0x0aac,"GUJARATI LETTER BA"));
        data.insert(std::make_pair(0x0aad,"GUJARATI LETTER BHA"));
        data.insert(std::make_pair(0x0aae,"GUJARATI LETTER MA"));
        data.insert(std::make_pair(0x0aaf,"GUJARATI LETTER YA"));
        data.insert(std::make_pair(0x0ab0,"GUJARATI LETTER RA"));
        data.insert(std::make_pair(0x0ab2,"GUJARATI LETTER LA"));
        data.insert(std::make_pair(0x0ab3,"GUJARATI LETTER LLA"));
        data.insert(std::make_pair(0x0ab5,"GUJARATI LETTER VA"));
        data.insert(std::make_pair(0x0ab6,"GUJARATI LETTER SHA"));
        data.insert(std::make_pair(0x0ab7,"GUJARATI LETTER SSA"));
        data.insert(std::make_pair(0x0ab8,"GUJARATI LETTER SA"));
        data.insert(std::make_pair(0x0ab9,"GUJARATI LETTER HA"));
        data.insert(std::make_pair(0x0abc,"GUJARATI SIGN NUKTA"));
        data.insert(std::make_pair(0x0abd,"GUJARATI SIGN AVAGRAHA"));
        data.insert(std::make_pair(0x0abe,"GUJARATI VOWEL SIGN AA"));
        data.insert(std::make_pair(0x0abf,"GUJARATI VOWEL SIGN I"));
        data.insert(std::make_pair(0x0ac0,"GUJARATI VOWEL SIGN II"));
        data.insert(std::make_pair(0x0ac1,"GUJARATI VOWEL SIGN U"));
        data.insert(std::make_pair(0x0ac2,"GUJARATI VOWEL SIGN UU"));
        data.insert(std::make_pair(0x0ac3,"GUJARATI VOWEL SIGN VOCALIC R"));
        data.insert(std::make_pair(0x0ac4,"GUJARATI VOWEL SIGN VOCALIC RR"));
        data.insert(std::make_pair(0x0ac5,"GUJARATI VOWEL SIGN CANDRA E"));
        data.insert(std::make_pair(0x0ac7,"GUJARATI VOWEL SIGN E"));
        data.insert(std::make_pair(0x0ac8,"GUJARATI VOWEL SIGN AI"));
        data.insert(std::make_pair(0x0ac9,"GUJARATI VOWEL SIGN CANDRA O"));
        data.insert(std::make_pair(0x0acb,"GUJARATI VOWEL SIGN O"));
        data.insert(std::make_pair(0x0acc,"GUJARATI VOWEL SIGN AU"));
        data.insert(std::make_pair(0x0acd,"GUJARATI SIGN VIRAMA"));
        data.insert(std::make_pair(0x0ad0,"GUJARATI OM"));
        data.insert(std::make_pair(0x0ae0,"GUJARATI LETTER VOCALIC RR"));
        data.insert(std::make_pair(0x0ae1,"GUJARATI LETTER VOCALIC LL"));
        data.insert(std::make_pair(0x0ae2,"GUJARATI VOWEL SIGN VOCALIC L"));
        data.insert(std::make_pair(0x0ae3,"GUJARATI VOWEL SIGN VOCALIC LL"));
        data.insert(std::make_pair(0x0ae6,"GUJARATI DIGIT ZERO"));
        data.insert(std::make_pair(0x0ae7,"GUJARATI DIGIT ONE"));
        data.insert(std::make_pair(0x0ae8,"GUJARATI DIGIT TWO"));
        data.insert(std::make_pair(0x0ae9,"GUJARATI DIGIT THREE"));
        data.insert(std::make_pair(0x0aea,"GUJARATI DIGIT FOUR"));
        data.insert(std::make_pair(0x0aeb,"GUJARATI DIGIT FIVE"));
        data.insert(std::make_pair(0x0aec,"GUJARATI DIGIT SIX"));
        data.insert(std::make_pair(0x0aed,"GUJARATI DIGIT SEVEN"));
        data.insert(std::make_pair(0x0aee,"GUJARATI DIGIT EIGHT"));
        data.insert(std::make_pair(0x0aef,"GUJARATI DIGIT NINE"));
        data.insert(std::make_pair(0x0af0,"GUJARATI ABBREVIATION SIGN"));
        data.insert(std::make_pair(0x0af1,"GUJARATI RUPEE SIGN"));
        data.insert(std::make_pair(0x0af9,"GUJARATI LETTER ZHA"));
        data.insert(std::make_pair(0x0afa,"GUJARATI SIGN SUKUN"));
        data.insert(std::make_pair(0x0afb,"GUJARATI SIGN SHADDA"));
        data.insert(std::make_pair(0x0afc,"GUJARATI SIGN MADDAH"));
        data.insert(std::make_pair(0x0afd,"GUJARATI SIGN THREE-DOT NUKTA ABOVE"));
        data.insert(std::make_pair(0x0afe,"GUJARATI SIGN CIRCLE NUKTA ABOVE"));
        data.insert(std::make_pair(0x0aff,"GUJARATI SIGN TWO-CIRCLE NUKTA ABOVE"));
        data.insert(std::make_pair(0x0b01,"ORIYA SIGN CANDRABINDU"));
        data.insert(std::make_pair(0x0b02,"ORIYA SIGN ANUSVARA"));
        data.insert(std::make_pair(0x0b03,"ORIYA SIGN VISARGA"));
        data.insert(std::make_pair(0x0b05,"ORIYA LETTER A"));
        data.insert(std::make_pair(0x0b06,"ORIYA LETTER AA"));
        data.insert(std::make_pair(0x0b07,"ORIYA LETTER I"));
        data.insert(std::make_pair(0x0b08,"ORIYA LETTER II"));
        data.insert(std::make_pair(0x0b09,"ORIYA LETTER U"));
        data.insert(std::make_pair(0x0b0a,"ORIYA LETTER UU"));
        data.insert(std::make_pair(0x0b0b,"ORIYA LETTER VOCALIC R"));
        data.insert(std::make_pair(0x0b0c,"ORIYA LETTER VOCALIC L"));
        data.insert(std::make_pair(0x0b0f,"ORIYA LETTER E"));
        data.insert(std::make_pair(0x0b10,"ORIYA LETTER AI"));
        data.insert(std::make_pair(0x0b13,"ORIYA LETTER O"));
        data.insert(std::make_pair(0x0b14,"ORIYA LETTER AU"));
        data.insert(std::make_pair(0x0b15,"ORIYA LETTER KA"));
        data.insert(std::make_pair(0x0b16,"ORIYA LETTER KHA"));
        data.insert(std::make_pair(0x0b17,"ORIYA LETTER GA"));
        data.insert(std::make_pair(0x0b18,"ORIYA LETTER GHA"));
        data.insert(std::make_pair(0x0b19,"ORIYA LETTER NGA"));
        data.insert(std::make_pair(0x0b1a,"ORIYA LETTER CA"));
        data.insert(std::make_pair(0x0b1b,"ORIYA LETTER CHA"));
        data.insert(std::make_pair(0x0b1c,"ORIYA LETTER JA"));
        data.insert(std::make_pair(0x0b1d,"ORIYA LETTER JHA"));
        data.insert(std::make_pair(0x0b1e,"ORIYA LETTER NYA"));
        data.insert(std::make_pair(0x0b1f,"ORIYA LETTER TTA"));
        data.insert(std::make_pair(0x0b20,"ORIYA LETTER TTHA"));
        data.insert(std::make_pair(0x0b21,"ORIYA LETTER DDA"));
        data.insert(std::make_pair(0x0b22,"ORIYA LETTER DDHA"));
        data.insert(std::make_pair(0x0b23,"ORIYA LETTER NNA"));
        data.insert(std::make_pair(0x0b24,"ORIYA LETTER TA"));
        data.insert(std::make_pair(0x0b25,"ORIYA LETTER THA"));
        data.insert(std::make_pair(0x0b26,"ORIYA LETTER DA"));
        data.insert(std::make_pair(0x0b27,"ORIYA LETTER DHA"));
        data.insert(std::make_pair(0x0b28,"ORIYA LETTER NA"));
        data.insert(std::make_pair(0x0b2a,"ORIYA LETTER PA"));
        data.insert(std::make_pair(0x0b2b,"ORIYA LETTER PHA"));
        data.insert(std::make_pair(0x0b2c,"ORIYA LETTER BA"));
        data.insert(std::make_pair(0x0b2d,"ORIYA LETTER BHA"));
        data.insert(std::make_pair(0x0b2e,"ORIYA LETTER MA"));
        data.insert(std::make_pair(0x0b2f,"ORIYA LETTER YA"));
        data.insert(std::make_pair(0x0b30,"ORIYA LETTER RA"));
        data.insert(std::make_pair(0x0b32,"ORIYA LETTER LA"));
        data.insert(std::make_pair(0x0b33,"ORIYA LETTER LLA"));
        data.insert(std::make_pair(0x0b35,"ORIYA LETTER VA"));
        data.insert(std::make_pair(0x0b36,"ORIYA LETTER SHA"));
        data.insert(std::make_pair(0x0b37,"ORIYA LETTER SSA"));
        data.insert(std::make_pair(0x0b38,"ORIYA LETTER SA"));
        data.insert(std::make_pair(0x0b39,"ORIYA LETTER HA"));
        data.insert(std::make_pair(0x0b3c,"ORIYA SIGN NUKTA"));
        data.insert(std::make_pair(0x0b3d,"ORIYA SIGN AVAGRAHA"));
        data.insert(std::make_pair(0x0b3e,"ORIYA VOWEL SIGN AA"));
        data.insert(std::make_pair(0x0b3f,"ORIYA VOWEL SIGN I"));
        data.insert(std::make_pair(0x0b40,"ORIYA VOWEL SIGN II"));
        data.insert(std::make_pair(0x0b41,"ORIYA VOWEL SIGN U"));
        data.insert(std::make_pair(0x0b42,"ORIYA VOWEL SIGN UU"));
        data.insert(std::make_pair(0x0b43,"ORIYA VOWEL SIGN VOCALIC R"));
        data.insert(std::make_pair(0x0b44,"ORIYA VOWEL SIGN VOCALIC RR"));
        data.insert(std::make_pair(0x0b47,"ORIYA VOWEL SIGN E"));
        data.insert(std::make_pair(0x0b48,"ORIYA VOWEL SIGN AI"));
        data.insert(std::make_pair(0x0b4b,"ORIYA VOWEL SIGN O"));
        data.insert(std::make_pair(0x0b4c,"ORIYA VOWEL SIGN AU"));
        data.insert(std::make_pair(0x0b4d,"ORIYA SIGN VIRAMA"));
        data.insert(std::make_pair(0x0b55,"ORIYA SIGN OVERLINE"));
        data.insert(std::make_pair(0x0b56,"ORIYA AI LENGTH MARK"));
        data.insert(std::make_pair(0x0b57,"ORIYA AU LENGTH MARK"));
        data.insert(std::make_pair(0x0b5c,"ORIYA LETTER RRA"));
        data.insert(std::make_pair(0x0b5d,"ORIYA LETTER RHA"));
        data.insert(std::make_pair(0x0b5f,"ORIYA LETTER YYA"));
        data.insert(std::make_pair(0x0b60,"ORIYA LETTER VOCALIC RR"));
        data.insert(std::make_pair(0x0b61,"ORIYA LETTER VOCALIC LL"));
        data.insert(std::make_pair(0x0b62,"ORIYA VOWEL SIGN VOCALIC L"));
        data.insert(std::make_pair(0x0b63,"ORIYA VOWEL SIGN VOCALIC LL"));
        data.insert(std::make_pair(0x0b66,"ORIYA DIGIT ZERO"));
        data.insert(std::make_pair(0x0b67,"ORIYA DIGIT ONE"));
        data.insert(std::make_pair(0x0b68,"ORIYA DIGIT TWO"));
        data.insert(std::make_pair(0x0b69,"ORIYA DIGIT THREE"));
        data.insert(std::make_pair(0x0b6a,"ORIYA DIGIT FOUR"));
        data.insert(std::make_pair(0x0b6b,"ORIYA DIGIT FIVE"));
        data.insert(std::make_pair(0x0b6c,"ORIYA DIGIT SIX"));
        data.insert(std::make_pair(0x0b6d,"ORIYA DIGIT SEVEN"));
        data.insert(std::make_pair(0x0b6e,"ORIYA DIGIT EIGHT"));
        data.insert(std::make_pair(0x0b6f,"ORIYA DIGIT NINE"));
        data.insert(std::make_pair(0x0b70,"ORIYA ISSHAR"));
        data.insert(std::make_pair(0x0b71,"ORIYA LETTER WA"));
        data.insert(std::make_pair(0x0b72,"ORIYA FRACTION ONE QUARTER"));
        data.insert(std::make_pair(0x0b73,"ORIYA FRACTION ONE HALF"));
        data.insert(std::make_pair(0x0b74,"ORIYA FRACTION THREE QUARTERS"));
        data.insert(std::make_pair(0x0b75,"ORIYA FRACTION ONE SIXTEENTH"));
        data.insert(std::make_pair(0x0b76,"ORIYA FRACTION ONE EIGHTH"));
        data.insert(std::make_pair(0x0b77,"ORIYA FRACTION THREE SIXTEENTHS"));
        data.insert(std::make_pair(0x0b82,"TAMIL SIGN ANUSVARA"));
        data.insert(std::make_pair(0x0b83,"TAMIL SIGN VISARGA"));
        data.insert(std::make_pair(0x0b85,"TAMIL LETTER A"));
        data.insert(std::make_pair(0x0b86,"TAMIL LETTER AA"));
        data.insert(std::make_pair(0x0b87,"TAMIL LETTER I"));
        data.insert(std::make_pair(0x0b88,"TAMIL LETTER II"));
        data.insert(std::make_pair(0x0b89,"TAMIL LETTER U"));
        data.insert(std::make_pair(0x0b8a,"TAMIL LETTER UU"));
        data.insert(std::make_pair(0x0b8e,"TAMIL LETTER E"));
        data.insert(std::make_pair(0x0b8f,"TAMIL LETTER EE"));
        data.insert(std::make_pair(0x0b90,"TAMIL LETTER AI"));
        data.insert(std::make_pair(0x0b92,"TAMIL LETTER O"));
        data.insert(std::make_pair(0x0b93,"TAMIL LETTER OO"));
        data.insert(std::make_pair(0x0b94,"TAMIL LETTER AU"));
        data.insert(std::make_pair(0x0b95,"TAMIL LETTER KA"));
        data.insert(std::make_pair(0x0b99,"TAMIL LETTER NGA"));
        data.insert(std::make_pair(0x0b9a,"TAMIL LETTER CA"));
        data.insert(std::make_pair(0x0b9c,"TAMIL LETTER JA"));
        data.insert(std::make_pair(0x0b9e,"TAMIL LETTER NYA"));
        data.insert(std::make_pair(0x0b9f,"TAMIL LETTER TTA"));
        data.insert(std::make_pair(0x0ba3,"TAMIL LETTER NNA"));
        data.insert(std::make_pair(0x0ba4,"TAMIL LETTER TA"));
        data.insert(std::make_pair(0x0ba8,"TAMIL LETTER NA"));
        data.insert(std::make_pair(0x0ba9,"TAMIL LETTER NNNA"));
        data.insert(std::make_pair(0x0baa,"TAMIL LETTER PA"));
        data.insert(std::make_pair(0x0bae,"TAMIL LETTER MA"));
        data.insert(std::make_pair(0x0baf,"TAMIL LETTER YA"));
        data.insert(std::make_pair(0x0bb0,"TAMIL LETTER RA"));
        data.insert(std::make_pair(0x0bb1,"TAMIL LETTER RRA"));
        data.insert(std::make_pair(0x0bb2,"TAMIL LETTER LA"));
        data.insert(std::make_pair(0x0bb3,"TAMIL LETTER LLA"));
        data.insert(std::make_pair(0x0bb4,"TAMIL LETTER LLLA"));
        data.insert(std::make_pair(0x0bb5,"TAMIL LETTER VA"));
        data.insert(std::make_pair(0x0bb6,"TAMIL LETTER SHA"));
        data.insert(std::make_pair(0x0bb7,"TAMIL LETTER SSA"));
        data.insert(std::make_pair(0x0bb8,"TAMIL LETTER SA"));
        data.insert(std::make_pair(0x0bb9,"TAMIL LETTER HA"));
        data.insert(std::make_pair(0x0bbe,"TAMIL VOWEL SIGN AA"));
        data.insert(std::make_pair(0x0bbf,"TAMIL VOWEL SIGN I"));
        data.insert(std::make_pair(0x0bc0,"TAMIL VOWEL SIGN II"));
        data.insert(std::make_pair(0x0bc1,"TAMIL VOWEL SIGN U"));
        data.insert(std::make_pair(0x0bc2,"TAMIL VOWEL SIGN UU"));
        data.insert(std::make_pair(0x0bc6,"TAMIL VOWEL SIGN E"));
        data.insert(std::make_pair(0x0bc7,"TAMIL VOWEL SIGN EE"));
        data.insert(std::make_pair(0x0bc8,"TAMIL VOWEL SIGN AI"));
        data.insert(std::make_pair(0x0bca,"TAMIL VOWEL SIGN O"));
        data.insert(std::make_pair(0x0bcb,"TAMIL VOWEL SIGN OO"));
        data.insert(std::make_pair(0x0bcc,"TAMIL VOWEL SIGN AU"));
        data.insert(std::make_pair(0x0bcd,"TAMIL SIGN VIRAMA"));
        data.insert(std::make_pair(0x0bd0,"TAMIL OM"));
        data.insert(std::make_pair(0x0bd7,"TAMIL AU LENGTH MARK"));
        data.insert(std::make_pair(0x0be6,"TAMIL DIGIT ZERO"));
        data.insert(std::make_pair(0x0be7,"TAMIL DIGIT ONE"));
        data.insert(std::make_pair(0x0be8,"TAMIL DIGIT TWO"));
        data.insert(std::make_pair(0x0be9,"TAMIL DIGIT THREE"));
        data.insert(std::make_pair(0x0bea,"TAMIL DIGIT FOUR"));
        data.insert(std::make_pair(0x0beb,"TAMIL DIGIT FIVE"));
        data.insert(std::make_pair(0x0bec,"TAMIL DIGIT SIX"));
        data.insert(std::make_pair(0x0bed,"TAMIL DIGIT SEVEN"));
        data.insert(std::make_pair(0x0bee,"TAMIL DIGIT EIGHT"));
        data.insert(std::make_pair(0x0bef,"TAMIL DIGIT NINE"));
        data.insert(std::make_pair(0x0bf0,"TAMIL NUMBER TEN"));
        data.insert(std::make_pair(0x0bf1,"TAMIL NUMBER ONE HUNDRED"));
        data.insert(std::make_pair(0x0bf2,"TAMIL NUMBER ONE THOUSAND"));
        data.insert(std::make_pair(0x0bf3,"TAMIL DAY SIGN"));
        data.insert(std::make_pair(0x0bf4,"TAMIL MONTH SIGN"));
        data.insert(std::make_pair(0x0bf5,"TAMIL YEAR SIGN"));
        data.insert(std::make_pair(0x0bf6,"TAMIL DEBIT SIGN"));
        data.insert(std::make_pair(0x0bf7,"TAMIL CREDIT SIGN"));
        data.insert(std::make_pair(0x0bf8,"TAMIL AS ABOVE SIGN"));
        data.insert(std::make_pair(0x0bf9,"TAMIL RUPEE SIGN"));
        data.insert(std::make_pair(0x0bfa,"TAMIL NUMBER SIGN"));
        data.insert(std::make_pair(0x0c00,"TELUGU SIGN COMBINING CANDRABINDU ABOVE"));
        data.insert(std::make_pair(0x0c01,"TELUGU SIGN CANDRABINDU"));
        data.insert(std::make_pair(0x0c02,"TELUGU SIGN ANUSVARA"));
        data.insert(std::make_pair(0x0c03,"TELUGU SIGN VISARGA"));
        data.insert(std::make_pair(0x0c04,"TELUGU SIGN COMBINING ANUSVARA ABOVE"));
        data.insert(std::make_pair(0x0c05,"TELUGU LETTER A"));
        data.insert(std::make_pair(0x0c06,"TELUGU LETTER AA"));
        data.insert(std::make_pair(0x0c07,"TELUGU LETTER I"));
        data.insert(std::make_pair(0x0c08,"TELUGU LETTER II"));
        data.insert(std::make_pair(0x0c09,"TELUGU LETTER U"));
        data.insert(std::make_pair(0x0c0a,"TELUGU LETTER UU"));
        data.insert(std::make_pair(0x0c0b,"TELUGU LETTER VOCALIC R"));
        data.insert(std::make_pair(0x0c0c,"TELUGU LETTER VOCALIC L"));
        data.insert(std::make_pair(0x0c0e,"TELUGU LETTER E"));
        data.insert(std::make_pair(0x0c0f,"TELUGU LETTER EE"));
        data.insert(std::make_pair(0x0c10,"TELUGU LETTER AI"));
        data.insert(std::make_pair(0x0c12,"TELUGU LETTER O"));
        data.insert(std::make_pair(0x0c13,"TELUGU LETTER OO"));
        data.insert(std::make_pair(0x0c14,"TELUGU LETTER AU"));
        data.insert(std::make_pair(0x0c15,"TELUGU LETTER KA"));
        data.insert(std::make_pair(0x0c16,"TELUGU LETTER KHA"));
        data.insert(std::make_pair(0x0c17,"TELUGU LETTER GA"));
        data.insert(std::make_pair(0x0c18,"TELUGU LETTER GHA"));
        data.insert(std::make_pair(0x0c19,"TELUGU LETTER NGA"));
        data.insert(std::make_pair(0x0c1a,"TELUGU LETTER CA"));
        data.insert(std::make_pair(0x0c1b,"TELUGU LETTER CHA"));
        data.insert(std::make_pair(0x0c1c,"TELUGU LETTER JA"));
        data.insert(std::make_pair(0x0c1d,"TELUGU LETTER JHA"));
        data.insert(std::make_pair(0x0c1e,"TELUGU LETTER NYA"));
        data.insert(std::make_pair(0x0c1f,"TELUGU LETTER TTA"));
        data.insert(std::make_pair(0x0c20,"TELUGU LETTER TTHA"));
        data.insert(std::make_pair(0x0c21,"TELUGU LETTER DDA"));
        data.insert(std::make_pair(0x0c22,"TELUGU LETTER DDHA"));
        data.insert(std::make_pair(0x0c23,"TELUGU LETTER NNA"));
        data.insert(std::make_pair(0x0c24,"TELUGU LETTER TA"));
        data.insert(std::make_pair(0x0c25,"TELUGU LETTER THA"));
        data.insert(std::make_pair(0x0c26,"TELUGU LETTER DA"));
        data.insert(std::make_pair(0x0c27,"TELUGU LETTER DHA"));
        data.insert(std::make_pair(0x0c28,"TELUGU LETTER NA"));
        data.insert(std::make_pair(0x0c2a,"TELUGU LETTER PA"));
        data.insert(std::make_pair(0x0c2b,"TELUGU LETTER PHA"));
        data.insert(std::make_pair(0x0c2c,"TELUGU LETTER BA"));
        data.insert(std::make_pair(0x0c2d,"TELUGU LETTER BHA"));
        data.insert(std::make_pair(0x0c2e,"TELUGU LETTER MA"));
        data.insert(std::make_pair(0x0c2f,"TELUGU LETTER YA"));
        data.insert(std::make_pair(0x0c30,"TELUGU LETTER RA"));
        data.insert(std::make_pair(0x0c31,"TELUGU LETTER RRA"));
        data.insert(std::make_pair(0x0c32,"TELUGU LETTER LA"));
        data.insert(std::make_pair(0x0c33,"TELUGU LETTER LLA"));
        data.insert(std::make_pair(0x0c34,"TELUGU LETTER LLLA"));
        data.insert(std::make_pair(0x0c35,"TELUGU LETTER VA"));
        data.insert(std::make_pair(0x0c36,"TELUGU LETTER SHA"));
        data.insert(std::make_pair(0x0c37,"TELUGU LETTER SSA"));
        data.insert(std::make_pair(0x0c38,"TELUGU LETTER SA"));
        data.insert(std::make_pair(0x0c39,"TELUGU LETTER HA"));
        data.insert(std::make_pair(0x0c3c,"TELUGU SIGN NUKTA"));
        data.insert(std::make_pair(0x0c3d,"TELUGU SIGN AVAGRAHA"));
        data.insert(std::make_pair(0x0c3e,"TELUGU VOWEL SIGN AA"));
        data.insert(std::make_pair(0x0c3f,"TELUGU VOWEL SIGN I"));
        data.insert(std::make_pair(0x0c40,"TELUGU VOWEL SIGN II"));
        data.insert(std::make_pair(0x0c41,"TELUGU VOWEL SIGN U"));
        data.insert(std::make_pair(0x0c42,"TELUGU VOWEL SIGN UU"));
        data.insert(std::make_pair(0x0c43,"TELUGU VOWEL SIGN VOCALIC R"));
        data.insert(std::make_pair(0x0c44,"TELUGU VOWEL SIGN VOCALIC RR"));
        data.insert(std::make_pair(0x0c46,"TELUGU VOWEL SIGN E"));
        data.insert(std::make_pair(0x0c47,"TELUGU VOWEL SIGN EE"));
        data.insert(std::make_pair(0x0c48,"TELUGU VOWEL SIGN AI"));
        data.insert(std::make_pair(0x0c4a,"TELUGU VOWEL SIGN O"));
        data.insert(std::make_pair(0x0c4b,"TELUGU VOWEL SIGN OO"));
        data.insert(std::make_pair(0x0c4c,"TELUGU VOWEL SIGN AU"));
        data.insert(std::make_pair(0x0c4d,"TELUGU SIGN VIRAMA"));
        data.insert(std::make_pair(0x0c55,"TELUGU LENGTH MARK"));
        data.insert(std::make_pair(0x0c56,"TELUGU AI LENGTH MARK"));
        data.insert(std::make_pair(0x0c58,"TELUGU LETTER TSA"));
        data.insert(std::make_pair(0x0c59,"TELUGU LETTER DZA"));
        data.insert(std::make_pair(0x0c5a,"TELUGU LETTER RRRA"));
        data.insert(std::make_pair(0x0c5d,"TELUGU LETTER NAKAARA POLLU"));
        data.insert(std::make_pair(0x0c60,"TELUGU LETTER VOCALIC RR"));
        data.insert(std::make_pair(0x0c61,"TELUGU LETTER VOCALIC LL"));
        data.insert(std::make_pair(0x0c62,"TELUGU VOWEL SIGN VOCALIC L"));
        data.insert(std::make_pair(0x0c63,"TELUGU VOWEL SIGN VOCALIC LL"));
        data.insert(std::make_pair(0x0c66,"TELUGU DIGIT ZERO"));
        data.insert(std::make_pair(0x0c67,"TELUGU DIGIT ONE"));
        data.insert(std::make_pair(0x0c68,"TELUGU DIGIT TWO"));
        data.insert(std::make_pair(0x0c69,"TELUGU DIGIT THREE"));
        data.insert(std::make_pair(0x0c6a,"TELUGU DIGIT FOUR"));
        data.insert(std::make_pair(0x0c6b,"TELUGU DIGIT FIVE"));
        data.insert(std::make_pair(0x0c6c,"TELUGU DIGIT SIX"));
        data.insert(std::make_pair(0x0c6d,"TELUGU DIGIT SEVEN"));
        data.insert(std::make_pair(0x0c6e,"TELUGU DIGIT EIGHT"));
        data.insert(std::make_pair(0x0c6f,"TELUGU DIGIT NINE"));
        data.insert(std::make_pair(0x0c77,"TELUGU SIGN SIDDHAM"));
        data.insert(std::make_pair(0x0c78,"TELUGU FRACTION DIGIT ZERO FOR ODD POWERS OF FOUR"));
        data.insert(std::make_pair(0x0c79,"TELUGU FRACTION DIGIT ONE FOR ODD POWERS OF FOUR"));
        data.insert(std::make_pair(0x0c7a,"TELUGU FRACTION DIGIT TWO FOR ODD POWERS OF FOUR"));
        data.insert(std::make_pair(0x0c7b,"TELUGU FRACTION DIGIT THREE FOR ODD POWERS OF FOUR"));
        data.insert(std::make_pair(0x0c7c,"TELUGU FRACTION DIGIT ONE FOR EVEN POWERS OF FOUR"));
        data.insert(std::make_pair(0x0c7d,"TELUGU FRACTION DIGIT TWO FOR EVEN POWERS OF FOUR"));
        data.insert(std::make_pair(0x0c7e,"TELUGU FRACTION DIGIT THREE FOR EVEN POWERS OF FOUR"));
        data.insert(std::make_pair(0x0c7f,"TELUGU SIGN TUUMU"));
        data.insert(std::make_pair(0x0c80,"KANNADA SIGN SPACING CANDRABINDU"));
        data.insert(std::make_pair(0x0c81,"KANNADA SIGN CANDRABINDU"));
        data.insert(std::make_pair(0x0c82,"KANNADA SIGN ANUSVARA"));
        data.insert(std::make_pair(0x0c83,"KANNADA SIGN VISARGA"));
        data.insert(std::make_pair(0x0c84,"KANNADA SIGN SIDDHAM"));
        data.insert(std::make_pair(0x0c85,"KANNADA LETTER A"));
        data.insert(std::make_pair(0x0c86,"KANNADA LETTER AA"));
        data.insert(std::make_pair(0x0c87,"KANNADA LETTER I"));
        data.insert(std::make_pair(0x0c88,"KANNADA LETTER II"));
        data.insert(std::make_pair(0x0c89,"KANNADA LETTER U"));
        data.insert(std::make_pair(0x0c8a,"KANNADA LETTER UU"));
        data.insert(std::make_pair(0x0c8b,"KANNADA LETTER VOCALIC R"));
        data.insert(std::make_pair(0x0c8c,"KANNADA LETTER VOCALIC L"));
        data.insert(std::make_pair(0x0c8e,"KANNADA LETTER E"));
        data.insert(std::make_pair(0x0c8f,"KANNADA LETTER EE"));
        data.insert(std::make_pair(0x0c90,"KANNADA LETTER AI"));
        data.insert(std::make_pair(0x0c92,"KANNADA LETTER O"));
        data.insert(std::make_pair(0x0c93,"KANNADA LETTER OO"));
        data.insert(std::make_pair(0x0c94,"KANNADA LETTER AU"));
        data.insert(std::make_pair(0x0c95,"KANNADA LETTER KA"));
        data.insert(std::make_pair(0x0c96,"KANNADA LETTER KHA"));
        data.insert(std::make_pair(0x0c97,"KANNADA LETTER GA"));
        data.insert(std::make_pair(0x0c98,"KANNADA LETTER GHA"));
        data.insert(std::make_pair(0x0c99,"KANNADA LETTER NGA"));
        data.insert(std::make_pair(0x0c9a,"KANNADA LETTER CA"));
        data.insert(std::make_pair(0x0c9b,"KANNADA LETTER CHA"));
        data.insert(std::make_pair(0x0c9c,"KANNADA LETTER JA"));
        data.insert(std::make_pair(0x0c9d,"KANNADA LETTER JHA"));
        data.insert(std::make_pair(0x0c9e,"KANNADA LETTER NYA"));
        data.insert(std::make_pair(0x0c9f,"KANNADA LETTER TTA"));
        data.insert(std::make_pair(0x0ca0,"KANNADA LETTER TTHA"));
        data.insert(std::make_pair(0x0ca1,"KANNADA LETTER DDA"));
        data.insert(std::make_pair(0x0ca2,"KANNADA LETTER DDHA"));
        data.insert(std::make_pair(0x0ca3,"KANNADA LETTER NNA"));
        data.insert(std::make_pair(0x0ca4,"KANNADA LETTER TA"));
        data.insert(std::make_pair(0x0ca5,"KANNADA LETTER THA"));
        data.insert(std::make_pair(0x0ca6,"KANNADA LETTER DA"));
        data.insert(std::make_pair(0x0ca7,"KANNADA LETTER DHA"));
        data.insert(std::make_pair(0x0ca8,"KANNADA LETTER NA"));
        data.insert(std::make_pair(0x0caa,"KANNADA LETTER PA"));
        data.insert(std::make_pair(0x0cab,"KANNADA LETTER PHA"));
        data.insert(std::make_pair(0x0cac,"KANNADA LETTER BA"));
        data.insert(std::make_pair(0x0cad,"KANNADA LETTER BHA"));
        data.insert(std::make_pair(0x0cae,"KANNADA LETTER MA"));
        data.insert(std::make_pair(0x0caf,"KANNADA LETTER YA"));
        data.insert(std::make_pair(0x0cb0,"KANNADA LETTER RA"));
        data.insert(std::make_pair(0x0cb1,"KANNADA LETTER RRA"));
        data.insert(std::make_pair(0x0cb2,"KANNADA LETTER LA"));
        data.insert(std::make_pair(0x0cb3,"KANNADA LETTER LLA"));
        data.insert(std::make_pair(0x0cb5,"KANNADA LETTER VA"));
        data.insert(std::make_pair(0x0cb6,"KANNADA LETTER SHA"));
        data.insert(std::make_pair(0x0cb7,"KANNADA LETTER SSA"));
        data.insert(std::make_pair(0x0cb8,"KANNADA LETTER SA"));
        data.insert(std::make_pair(0x0cb9,"KANNADA LETTER HA"));
        data.insert(std::make_pair(0x0cbc,"KANNADA SIGN NUKTA"));
        data.insert(std::make_pair(0x0cbd,"KANNADA SIGN AVAGRAHA"));
        data.insert(std::make_pair(0x0cbe,"KANNADA VOWEL SIGN AA"));
        data.insert(std::make_pair(0x0cbf,"KANNADA VOWEL SIGN I"));
        data.insert(std::make_pair(0x0cc0,"KANNADA VOWEL SIGN II"));
        data.insert(std::make_pair(0x0cc1,"KANNADA VOWEL SIGN U"));
        data.insert(std::make_pair(0x0cc2,"KANNADA VOWEL SIGN UU"));
        data.insert(std::make_pair(0x0cc3,"KANNADA VOWEL SIGN VOCALIC R"));
        data.insert(std::make_pair(0x0cc4,"KANNADA VOWEL SIGN VOCALIC RR"));
        data.insert(std::make_pair(0x0cc6,"KANNADA VOWEL SIGN E"));
        data.insert(std::make_pair(0x0cc7,"KANNADA VOWEL SIGN EE"));
        data.insert(std::make_pair(0x0cc8,"KANNADA VOWEL SIGN AI"));
        data.insert(std::make_pair(0x0cca,"KANNADA VOWEL SIGN O"));
        data.insert(std::make_pair(0x0ccb,"KANNADA VOWEL SIGN OO"));
        data.insert(std::make_pair(0x0ccc,"KANNADA VOWEL SIGN AU"));
        data.insert(std::make_pair(0x0ccd,"KANNADA SIGN VIRAMA"));
        data.insert(std::make_pair(0x0cd5,"KANNADA LENGTH MARK"));
        data.insert(std::make_pair(0x0cd6,"KANNADA AI LENGTH MARK"));
        data.insert(std::make_pair(0x0cdd,"KANNADA LETTER NAKAARA POLLU"));
        data.insert(std::make_pair(0x0cde,"KANNADA LETTER FA"));
        data.insert(std::make_pair(0x0ce0,"KANNADA LETTER VOCALIC RR"));
        data.insert(std::make_pair(0x0ce1,"KANNADA LETTER VOCALIC LL"));
        data.insert(std::make_pair(0x0ce2,"KANNADA VOWEL SIGN VOCALIC L"));
        data.insert(std::make_pair(0x0ce3,"KANNADA VOWEL SIGN VOCALIC LL"));
        data.insert(std::make_pair(0x0ce6,"KANNADA DIGIT ZERO"));
        data.insert(std::make_pair(0x0ce7,"KANNADA DIGIT ONE"));
        data.insert(std::make_pair(0x0ce8,"KANNADA DIGIT TWO"));
        data.insert(std::make_pair(0x0ce9,"KANNADA DIGIT THREE"));
        data.insert(std::make_pair(0x0cea,"KANNADA DIGIT FOUR"));
        data.insert(std::make_pair(0x0ceb,"KANNADA DIGIT FIVE"));
        data.insert(std::make_pair(0x0cec,"KANNADA DIGIT SIX"));
        data.insert(std::make_pair(0x0ced,"KANNADA DIGIT SEVEN"));
        data.insert(std::make_pair(0x0cee,"KANNADA DIGIT EIGHT"));
        data.insert(std::make_pair(0x0cef,"KANNADA DIGIT NINE"));
        data.insert(std::make_pair(0x0cf1,"KANNADA SIGN JIHVAMULIYA"));
        data.insert(std::make_pair(0x0cf2,"KANNADA SIGN UPADHMANIYA"));
        data.insert(std::make_pair(0x0cf3,"KANNADA SIGN COMBINING ANUSVARA ABOVE RIGHT"));
        data.insert(std::make_pair(0x0d00,"MALAYALAM SIGN COMBINING ANUSVARA ABOVE"));
        data.insert(std::make_pair(0x0d01,"MALAYALAM SIGN CANDRABINDU"));
        data.insert(std::make_pair(0x0d02,"MALAYALAM SIGN ANUSVARA"));
        data.insert(std::make_pair(0x0d03,"MALAYALAM SIGN VISARGA"));
        data.insert(std::make_pair(0x0d04,"MALAYALAM LETTER VEDIC ANUSVARA"));
        data.insert(std::make_pair(0x0d05,"MALAYALAM LETTER A"));
        data.insert(std::make_pair(0x0d06,"MALAYALAM LETTER AA"));
        data.insert(std::make_pair(0x0d07,"MALAYALAM LETTER I"));
        data.insert(std::make_pair(0x0d08,"MALAYALAM LETTER II"));
        data.insert(std::make_pair(0x0d09,"MALAYALAM LETTER U"));
        data.insert(std::make_pair(0x0d0a,"MALAYALAM LETTER UU"));
        data.insert(std::make_pair(0x0d0b,"MALAYALAM LETTER VOCALIC R"));
        data.insert(std::make_pair(0x0d0c,"MALAYALAM LETTER VOCALIC L"));
        data.insert(std::make_pair(0x0d0e,"MALAYALAM LETTER E"));
        data.insert(std::make_pair(0x0d0f,"MALAYALAM LETTER EE"));
        data.insert(std::make_pair(0x0d10,"MALAYALAM LETTER AI"));
        data.insert(std::make_pair(0x0d12,"MALAYALAM LETTER O"));
        data.insert(std::make_pair(0x0d13,"MALAYALAM LETTER OO"));
        data.insert(std::make_pair(0x0d14,"MALAYALAM LETTER AU"));
        data.insert(std::make_pair(0x0d15,"MALAYALAM LETTER KA"));
        data.insert(std::make_pair(0x0d16,"MALAYALAM LETTER KHA"));
        data.insert(std::make_pair(0x0d17,"MALAYALAM LETTER GA"));
        data.insert(std::make_pair(0x0d18,"MALAYALAM LETTER GHA"));
        data.insert(std::make_pair(0x0d19,"MALAYALAM LETTER NGA"));
        data.insert(std::make_pair(0x0d1a,"MALAYALAM LETTER CA"));
        data.insert(std::make_pair(0x0d1b,"MALAYALAM LETTER CHA"));
        data.insert(std::make_pair(0x0d1c,"MALAYALAM LETTER JA"));
        data.insert(std::make_pair(0x0d1d,"MALAYALAM LETTER JHA"));
        data.insert(std::make_pair(0x0d1e,"MALAYALAM LETTER NYA"));
        data.insert(std::make_pair(0x0d1f,"MALAYALAM LETTER TTA"));
        data.insert(std::make_pair(0x0d20,"MALAYALAM LETTER TTHA"));
        data.insert(std::make_pair(0x0d21,"MALAYALAM LETTER DDA"));
        data.insert(std::make_pair(0x0d22,"MALAYALAM LETTER DDHA"));
        data.insert(std::make_pair(0x0d23,"MALAYALAM LETTER NNA"));
        data.insert(std::make_pair(0x0d24,"MALAYALAM LETTER TA"));
        data.insert(std::make_pair(0x0d25,"MALAYALAM LETTER THA"));
        data.insert(std::make_pair(0x0d26,"MALAYALAM LETTER DA"));
        data.insert(std::make_pair(0x0d27,"MALAYALAM LETTER DHA"));
        data.insert(std::make_pair(0x0d28,"MALAYALAM LETTER NA"));
        data.insert(std::make_pair(0x0d29,"MALAYALAM LETTER NNNA"));
        data.insert(std::make_pair(0x0d2a,"MALAYALAM LETTER PA"));
        data.insert(std::make_pair(0x0d2b,"MALAYALAM LETTER PHA"));
        data.insert(std::make_pair(0x0d2c,"MALAYALAM LETTER BA"));
        data.insert(std::make_pair(0x0d2d,"MALAYALAM LETTER BHA"));
        data.insert(std::make_pair(0x0d2e,"MALAYALAM LETTER MA"));
        data.insert(std::make_pair(0x0d2f,"MALAYALAM LETTER YA"));
        data.insert(std::make_pair(0x0d30,"MALAYALAM LETTER RA"));
        data.insert(std::make_pair(0x0d31,"MALAYALAM LETTER RRA"));
        data.insert(std::make_pair(0x0d32,"MALAYALAM LETTER LA"));
        data.insert(std::make_pair(0x0d33,"MALAYALAM LETTER LLA"));
        data.insert(std::make_pair(0x0d34,"MALAYALAM LETTER LLLA"));
        data.insert(std::make_pair(0x0d35,"MALAYALAM LETTER VA"));
        data.insert(std::make_pair(0x0d36,"MALAYALAM LETTER SHA"));
        data.insert(std::make_pair(0x0d37,"MALAYALAM LETTER SSA"));
        data.insert(std::make_pair(0x0d38,"MALAYALAM LETTER SA"));
        data.insert(std::make_pair(0x0d39,"MALAYALAM LETTER HA"));
        data.insert(std::make_pair(0x0d3a,"MALAYALAM LETTER TTTA"));
        data.insert(std::make_pair(0x0d3b,"MALAYALAM SIGN VERTICAL BAR VIRAMA"));
        data.insert(std::make_pair(0x0d3c,"MALAYALAM SIGN CIRCULAR VIRAMA"));
        data.insert(std::make_pair(0x0d3d,"MALAYALAM SIGN AVAGRAHA"));
        data.insert(std::make_pair(0x0d3e,"MALAYALAM VOWEL SIGN AA"));
        data.insert(std::make_pair(0x0d3f,"MALAYALAM VOWEL SIGN I"));
        data.insert(std::make_pair(0x0d40,"MALAYALAM VOWEL SIGN II"));
        data.insert(std::make_pair(0x0d41,"MALAYALAM VOWEL SIGN U"));
        data.insert(std::make_pair(0x0d42,"MALAYALAM VOWEL SIGN UU"));
        data.insert(std::make_pair(0x0d43,"MALAYALAM VOWEL SIGN VOCALIC R"));
        data.insert(std::make_pair(0x0d44,"MALAYALAM VOWEL SIGN VOCALIC RR"));
        data.insert(std::make_pair(0x0d46,"MALAYALAM VOWEL SIGN E"));
        data.insert(std::make_pair(0x0d47,"MALAYALAM VOWEL SIGN EE"));
        data.insert(std::make_pair(0x0d48,"MALAYALAM VOWEL SIGN AI"));
        data.insert(std::make_pair(0x0d4a,"MALAYALAM VOWEL SIGN O"));
        data.insert(std::make_pair(0x0d4b,"MALAYALAM VOWEL SIGN OO"));
        data.insert(std::make_pair(0x0d4c,"MALAYALAM VOWEL SIGN AU"));
        data.insert(std::make_pair(0x0d4d,"MALAYALAM SIGN VIRAMA"));
        data.insert(std::make_pair(0x0d4e,"MALAYALAM LETTER DOT REPH"));
        data.insert(std::make_pair(0x0d4f,"MALAYALAM SIGN PARA"));
        data.insert(std::make_pair(0x0d54,"MALAYALAM LETTER CHILLU M"));
        data.insert(std::make_pair(0x0d55,"MALAYALAM LETTER CHILLU Y"));
        data.insert(std::make_pair(0x0d56,"MALAYALAM LETTER CHILLU LLL"));
        data.insert(std::make_pair(0x0d57,"MALAYALAM AU LENGTH MARK"));
        data.insert(std::make_pair(0x0d58,"MALAYALAM FRACTION ONE ONE-HUNDRED-AND-SIXTIETH"));
        data.insert(std::make_pair(0x0d59,"MALAYALAM FRACTION ONE FORTIETH"));
        data.insert(std::make_pair(0x0d5a,"MALAYALAM FRACTION THREE EIGHTIETHS"));
        data.insert(std::make_pair(0x0d5b,"MALAYALAM FRACTION ONE TWENTIETH"));
        data.insert(std::make_pair(0x0d5c,"MALAYALAM FRACTION ONE TENTH"));
        data.insert(std::make_pair(0x0d5d,"MALAYALAM FRACTION THREE TWENTIETHS"));
        data.insert(std::make_pair(0x0d5e,"MALAYALAM FRACTION ONE FIFTH"));
        data.insert(std::make_pair(0x0d5f,"MALAYALAM LETTER ARCHAIC II"));
        data.insert(std::make_pair(0x0d60,"MALAYALAM LETTER VOCALIC RR"));
        data.insert(std::make_pair(0x0d61,"MALAYALAM LETTER VOCALIC LL"));
        data.insert(std::make_pair(0x0d62,"MALAYALAM VOWEL SIGN VOCALIC L"));
        data.insert(std::make_pair(0x0d63,"MALAYALAM VOWEL SIGN VOCALIC LL"));
        data.insert(std::make_pair(0x0d66,"MALAYALAM DIGIT ZERO"));
        data.insert(std::make_pair(0x0d67,"MALAYALAM DIGIT ONE"));
        data.insert(std::make_pair(0x0d68,"MALAYALAM DIGIT TWO"));
        data.insert(std::make_pair(0x0d69,"MALAYALAM DIGIT THREE"));
        data.insert(std::make_pair(0x0d6a,"MALAYALAM DIGIT FOUR"));
        data.insert(std::make_pair(0x0d6b,"MALAYALAM DIGIT FIVE"));
        data.insert(std::make_pair(0x0d6c,"MALAYALAM DIGIT SIX"));
        data.insert(std::make_pair(0x0d6d,"MALAYALAM DIGIT SEVEN"));
        data.insert(std::make_pair(0x0d6e,"MALAYALAM DIGIT EIGHT"));
        data.insert(std::make_pair(0x0d6f,"MALAYALAM DIGIT NINE"));
        data.insert(std::make_pair(0x0d70,"MALAYALAM NUMBER TEN"));
        data.insert(std::make_pair(0x0d71,"MALAYALAM NUMBER ONE HUNDRED"));
        data.insert(std::make_pair(0x0d72,"MALAYALAM NUMBER ONE THOUSAND"));
        data.insert(std::make_pair(0x0d73,"MALAYALAM FRACTION ONE QUARTER"));
        data.insert(std::make_pair(0x0d74,"MALAYALAM FRACTION ONE HALF"));
        data.insert(std::make_pair(0x0d75,"MALAYALAM FRACTION THREE QUARTERS"));
        data.insert(std::make_pair(0x0d76,"MALAYALAM FRACTION ONE SIXTEENTH"));
        data.insert(std::make_pair(0x0d77,"MALAYALAM FRACTION ONE EIGHTH"));
        data.insert(std::make_pair(0x0d78,"MALAYALAM FRACTION THREE SIXTEENTHS"));
        data.insert(std::make_pair(0x0d79,"MALAYALAM DATE MARK"));
        data.insert(std::make_pair(0x0d7a,"MALAYALAM LETTER CHILLU NN"));
        data.insert(std::make_pair(0x0d7b,"MALAYALAM LETTER CHILLU N"));
        data.insert(std::make_pair(0x0d7c,"MALAYALAM LETTER CHILLU RR"));
        data.insert(std::make_pair(0x0d7d,"MALAYALAM LETTER CHILLU L"));
        data.insert(std::make_pair(0x0d7e,"MALAYALAM LETTER CHILLU LL"));
        data.insert(std::make_pair(0x0d7f,"MALAYALAM LETTER CHILLU K"));
        data.insert(std::make_pair(0x0d81,"SINHALA SIGN CANDRABINDU"));
        data.insert(std::make_pair(0x0d82,"SINHALA SIGN ANUSVARAYA"));
        data.insert(std::make_pair(0x0d83,"SINHALA SIGN VISARGAYA"));
        data.insert(std::make_pair(0x0d85,"SINHALA LETTER AYANNA"));
        data.insert(std::make_pair(0x0d86,"SINHALA LETTER AAYANNA"));
        data.insert(std::make_pair(0x0d87,"SINHALA LETTER AEYANNA"));
        data.insert(std::make_pair(0x0d88,"SINHALA LETTER AEEYANNA"));
        data.insert(std::make_pair(0x0d89,"SINHALA LETTER IYANNA"));
        data.insert(std::make_pair(0x0d8a,"SINHALA LETTER IIYANNA"));
        data.insert(std::make_pair(0x0d8b,"SINHALA LETTER UYANNA"));
        data.insert(std::make_pair(0x0d8c,"SINHALA LETTER UUYANNA"));
        data.insert(std::make_pair(0x0d8d,"SINHALA LETTER IRUYANNA"));
        data.insert(std::make_pair(0x0d8e,"SINHALA LETTER IRUUYANNA"));
        data.insert(std::make_pair(0x0d8f,"SINHALA LETTER ILUYANNA"));
        data.insert(std::make_pair(0x0d90,"SINHALA LETTER ILUUYANNA"));
        data.insert(std::make_pair(0x0d91,"SINHALA LETTER EYANNA"));
        data.insert(std::make_pair(0x0d92,"SINHALA LETTER EEYANNA"));
        data.insert(std::make_pair(0x0d93,"SINHALA LETTER AIYANNA"));
        data.insert(std::make_pair(0x0d94,"SINHALA LETTER OYANNA"));
        data.insert(std::make_pair(0x0d95,"SINHALA LETTER OOYANNA"));
        data.insert(std::make_pair(0x0d96,"SINHALA LETTER AUYANNA"));
        data.insert(std::make_pair(0x0d9a,"SINHALA LETTER ALPAPRAANA KAYANNA"));
        data.insert(std::make_pair(0x0d9b,"SINHALA LETTER MAHAAPRAANA KAYANNA"));
        data.insert(std::make_pair(0x0d9c,"SINHALA LETTER ALPAPRAANA GAYANNA"));
        data.insert(std::make_pair(0x0d9d,"SINHALA LETTER MAHAAPRAANA GAYANNA"));
        data.insert(std::make_pair(0x0d9e,"SINHALA LETTER KANTAJA NAASIKYAYA"));
        data.insert(std::make_pair(0x0d9f,"SINHALA LETTER SANYAKA GAYANNA"));
        data.insert(std::make_pair(0x0da0,"SINHALA LETTER ALPAPRAANA CAYANNA"));
        data.insert(std::make_pair(0x0da1,"SINHALA LETTER MAHAAPRAANA CAYANNA"));
        data.insert(std::make_pair(0x0da2,"SINHALA LETTER ALPAPRAANA JAYANNA"));
        data.insert(std::make_pair(0x0da3,"SINHALA LETTER MAHAAPRAANA JAYANNA"));
        data.insert(std::make_pair(0x0da4,"SINHALA LETTER TAALUJA NAASIKYAYA"));
        data.insert(std::make_pair(0x0da5,"SINHALA LETTER TAALUJA SANYOOGA NAAKSIKYAYA"));
        data.insert(std::make_pair(0x0da6,"SINHALA LETTER SANYAKA JAYANNA"));
        data.insert(std::make_pair(0x0da7,"SINHALA LETTER ALPAPRAANA TTAYANNA"));
        data.insert(std::make_pair(0x0da8,"SINHALA LETTER MAHAAPRAANA TTAYANNA"));
        data.insert(std::make_pair(0x0da9,"SINHALA LETTER ALPAPRAANA DDAYANNA"));
        data.insert(std::make_pair(0x0daa,"SINHALA LETTER MAHAAPRAANA DDAYANNA"));
        data.insert(std::make_pair(0x0dab,"SINHALA LETTER MUURDHAJA NAYANNA"));
        data.insert(std::make_pair(0x0dac,"SINHALA LETTER SANYAKA DDAYANNA"));
        data.insert(std::make_pair(0x0dad,"SINHALA LETTER ALPAPRAANA TAYANNA"));
        data.insert(std::make_pair(0x0dae,"SINHALA LETTER MAHAAPRAANA TAYANNA"));
        data.insert(std::make_pair(0x0daf,"SINHALA LETTER ALPAPRAANA DAYANNA"));
        data.insert(std::make_pair(0x0db0,"SINHALA LETTER MAHAAPRAANA DAYANNA"));
        data.insert(std::make_pair(0x0db1,"SINHALA LETTER DANTAJA NAYANNA"));
        data.insert(std::make_pair(0x0db3,"SINHALA LETTER SANYAKA DAYANNA"));
        data.insert(std::make_pair(0x0db4,"SINHALA LETTER ALPAPRAANA PAYANNA"));
        data.insert(std::make_pair(0x0db5,"SINHALA LETTER MAHAAPRAANA PAYANNA"));
        data.insert(std::make_pair(0x0db6,"SINHALA LETTER ALPAPRAANA BAYANNA"));
        data.insert(std::make_pair(0x0db7,"SINHALA LETTER MAHAAPRAANA BAYANNA"));
        data.insert(std::make_pair(0x0db8,"SINHALA LETTER MAYANNA"));
        data.insert(std::make_pair(0x0db9,"SINHALA LETTER AMBA BAYANNA"));
        data.insert(std::make_pair(0x0dba,"SINHALA LETTER YAYANNA"));
        data.insert(std::make_pair(0x0dbb,"SINHALA LETTER RAYANNA"));
        data.insert(std::make_pair(0x0dbd,"SINHALA LETTER DANTAJA LAYANNA"));
        data.insert(std::make_pair(0x0dc0,"SINHALA LETTER VAYANNA"));
        data.insert(std::make_pair(0x0dc1,"SINHALA LETTER TAALUJA SAYANNA"));
        data.insert(std::make_pair(0x0dc2,"SINHALA LETTER MUURDHAJA SAYANNA"));
        data.insert(std::make_pair(0x0dc3,"SINHALA LETTER DANTAJA SAYANNA"));
        data.insert(std::make_pair(0x0dc4,"SINHALA LETTER HAYANNA"));
        data.insert(std::make_pair(0x0dc5,"SINHALA LETTER MUURDHAJA LAYANNA"));
        data.insert(std::make_pair(0x0dc6,"SINHALA LETTER FAYANNA"));
        data.insert(std::make_pair(0x0dca,"SINHALA SIGN AL-LAKUNA"));
        data.insert(std::make_pair(0x0dcf,"SINHALA VOWEL SIGN AELA-PILLA"));
        data.insert(std::make_pair(0x0dd0,"SINHALA VOWEL SIGN KETTI AEDA-PILLA"));
        data.insert(std::make_pair(0x0dd1,"SINHALA VOWEL SIGN DIGA AEDA-PILLA"));
        data.insert(std::make_pair(0x0dd2,"SINHALA VOWEL SIGN KETTI IS-PILLA"));
        data.insert(std::make_pair(0x0dd3,"SINHALA VOWEL SIGN DIGA IS-PILLA"));
        data.insert(std::make_pair(0x0dd4,"SINHALA VOWEL SIGN KETTI PAA-PILLA"));
        data.insert(std::make_pair(0x0dd6,"SINHALA VOWEL SIGN DIGA PAA-PILLA"));
        data.insert(std::make_pair(0x0dd8,"SINHALA VOWEL SIGN GAETTA-PILLA"));
        data.insert(std::make_pair(0x0dd9,"SINHALA VOWEL SIGN KOMBUVA"));
        data.insert(std::make_pair(0x0dda,"SINHALA VOWEL SIGN DIGA KOMBUVA"));
        data.insert(std::make_pair(0x0ddb,"SINHALA VOWEL SIGN KOMBU DEKA"));
        data.insert(std::make_pair(0x0ddc,"SINHALA VOWEL SIGN KOMBUVA HAA AELA-PILLA"));
        data.insert(std::make_pair(0x0ddd,"SINHALA VOWEL SIGN KOMBUVA HAA DIGA AELA-PILLA"));
        data.insert(std::make_pair(0x0dde,"SINHALA VOWEL SIGN KOMBUVA HAA GAYANUKITTA"));
        data.insert(std::make_pair(0x0ddf,"SINHALA VOWEL SIGN GAYANUKITTA"));
        data.insert(std::make_pair(0x0de6,"SINHALA LITH DIGIT ZERO"));
        data.insert(std::make_pair(0x0de7,"SINHALA LITH DIGIT ONE"));
        data.insert(std::make_pair(0x0de8,"SINHALA LITH DIGIT TWO"));
        data.insert(std::make_pair(0x0de9,"SINHALA LITH DIGIT THREE"));
        data.insert(std::make_pair(0x0dea,"SINHALA LITH DIGIT FOUR"));
        data.insert(std::make_pair(0x0deb,"SINHALA LITH DIGIT FIVE"));
        data.insert(std::make_pair(0x0dec,"SINHALA LITH DIGIT SIX"));
        data.insert(std::make_pair(0x0ded,"SINHALA LITH DIGIT SEVEN"));
        data.insert(std::make_pair(0x0dee,"SINHALA LITH DIGIT EIGHT"));
        data.insert(std::make_pair(0x0def,"SINHALA LITH DIGIT NINE"));
        data.insert(std::make_pair(0x0df2,"SINHALA VOWEL SIGN DIGA GAETTA-PILLA"));
        data.insert(std::make_pair(0x0df3,"SINHALA VOWEL SIGN DIGA GAYANUKITTA"));
        data.insert(std::make_pair(0x0df4,"SINHALA PUNCTUATION KUNDDALIYA"));
        data.insert(std::make_pair(0x0e01,"THAI CHARACTER KO KAI"));
        data.insert(std::make_pair(0x0e02,"THAI CHARACTER KHO KHAI"));
        data.insert(std::make_pair(0x0e03,"THAI CHARACTER KHO KHUAT"));
        data.insert(std::make_pair(0x0e04,"THAI CHARACTER KHO KHWAI"));
        data.insert(std::make_pair(0x0e05,"THAI CHARACTER KHO KHON"));
        data.insert(std::make_pair(0x0e06,"THAI CHARACTER KHO RAKHANG"));
        data.insert(std::make_pair(0x0e07,"THAI CHARACTER NGO NGU"));
        data.insert(std::make_pair(0x0e08,"THAI CHARACTER CHO CHAN"));
        data.insert(std::make_pair(0x0e09,"THAI CHARACTER CHO CHING"));
        data.insert(std::make_pair(0x0e0a,"THAI CHARACTER CHO CHANG"));
        data.insert(std::make_pair(0x0e0b,"THAI CHARACTER SO SO"));
        data.insert(std::make_pair(0x0e0c,"THAI CHARACTER CHO CHOE"));
        data.insert(std::make_pair(0x0e0d,"THAI CHARACTER YO YING"));
        data.insert(std::make_pair(0x0e0e,"THAI CHARACTER DO CHADA"));
        data.insert(std::make_pair(0x0e0f,"THAI CHARACTER TO PATAK"));
        data.insert(std::make_pair(0x0e10,"THAI CHARACTER THO THAN"));
        data.insert(std::make_pair(0x0e11,"THAI CHARACTER THO NANGMONTHO"));
        data.insert(std::make_pair(0x0e12,"THAI CHARACTER THO PHUTHAO"));
        data.insert(std::make_pair(0x0e13,"THAI CHARACTER NO NEN"));
        data.insert(std::make_pair(0x0e14,"THAI CHARACTER DO DEK"));
        data.insert(std::make_pair(0x0e15,"THAI CHARACTER TO TAO"));
        data.insert(std::make_pair(0x0e16,"THAI CHARACTER THO THUNG"));
        data.insert(std::make_pair(0x0e17,"THAI CHARACTER THO THAHAN"));
        data.insert(std::make_pair(0x0e18,"THAI CHARACTER THO THONG"));
        data.insert(std::make_pair(0x0e19,"THAI CHARACTER NO NU"));
        data.insert(std::make_pair(0x0e1a,"THAI CHARACTER BO BAIMAI"));
        data.insert(std::make_pair(0x0e1b,"THAI CHARACTER PO PLA"));
        data.insert(std::make_pair(0x0e1c,"THAI CHARACTER PHO PHUNG"));
        data.insert(std::make_pair(0x0e1d,"THAI CHARACTER FO FA"));
        data.insert(std::make_pair(0x0e1e,"THAI CHARACTER PHO PHAN"));
        data.insert(std::make_pair(0x0e1f,"THAI CHARACTER FO FAN"));
        data.insert(std::make_pair(0x0e20,"THAI CHARACTER PHO SAMPHAO"));
        data.insert(std::make_pair(0x0e21,"THAI CHARACTER MO MA"));
        data.insert(std::make_pair(0x0e22,"THAI CHARACTER YO YAK"));
        data.insert(std::make_pair(0x0e23,"THAI CHARACTER RO RUA"));
        data.insert(std::make_pair(0x0e24,"THAI CHARACTER RU"));
        data.insert(std::make_pair(0x0e25,"THAI CHARACTER LO LING"));
        data.insert(std::make_pair(0x0e26,"THAI CHARACTER LU"));
        data.insert(std::make_pair(0x0e27,"THAI CHARACTER WO WAEN"));
        data.insert(std::make_pair(0x0e28,"THAI CHARACTER SO SALA"));
        data.insert(std::make_pair(0x0e29,"THAI CHARACTER SO RUSI"));
        data.insert(std::make_pair(0x0e2a,"THAI CHARACTER SO SUA"));
        data.insert(std::make_pair(0x0e2b,"THAI CHARACTER HO HIP"));
        data.insert(std::make_pair(0x0e2c,"THAI CHARACTER LO CHULA"));
        data.insert(std::make_pair(0x0e2d,"THAI CHARACTER O ANG"));
        data.insert(std::make_pair(0x0e2e,"THAI CHARACTER HO NOKHUK"));
        data.insert(std::make_pair(0x0e2f,"THAI CHARACTER PAIYANNOI"));
        data.insert(std::make_pair(0x0e30,"THAI CHARACTER SARA A"));
        data.insert(std::make_pair(0x0e31,"THAI CHARACTER MAI HAN-AKAT"));
        data.insert(std::make_pair(0x0e32,"THAI CHARACTER SARA AA"));
        data.insert(std::make_pair(0x0e33,"THAI CHARACTER SARA AM"));
        data.insert(std::make_pair(0x0e34,"THAI CHARACTER SARA I"));
        data.insert(std::make_pair(0x0e35,"THAI CHARACTER SARA II"));
        data.insert(std::make_pair(0x0e36,"THAI CHARACTER SARA UE"));
        data.insert(std::make_pair(0x0e37,"THAI CHARACTER SARA UEE"));
        data.insert(std::make_pair(0x0e38,"THAI CHARACTER SARA U"));
        data.insert(std::make_pair(0x0e39,"THAI CHARACTER SARA UU"));
        data.insert(std::make_pair(0x0e3a,"THAI CHARACTER PHINTHU"));
        data.insert(std::make_pair(0x0e3f,"THAI CURRENCY SYMBOL BAHT"));
        data.insert(std::make_pair(0x0e40,"THAI CHARACTER SARA E"));
        data.insert(std::make_pair(0x0e41,"THAI CHARACTER SARA AE"));
        data.insert(std::make_pair(0x0e42,"THAI CHARACTER SARA O"));
        data.insert(std::make_pair(0x0e43,"THAI CHARACTER SARA AI MAIMUAN"));
        data.insert(std::make_pair(0x0e44,"THAI CHARACTER SARA AI MAIMALAI"));
        data.insert(std::make_pair(0x0e45,"THAI CHARACTER LAKKHANGYAO"));
        data.insert(std::make_pair(0x0e46,"THAI CHARACTER MAIYAMOK"));
        data.insert(std::make_pair(0x0e47,"THAI CHARACTER MAITAIKHU"));
        data.insert(std::make_pair(0x0e48,"THAI CHARACTER MAI EK"));
        data.insert(std::make_pair(0x0e49,"THAI CHARACTER MAI THO"));
        data.insert(std::make_pair(0x0e4a,"THAI CHARACTER MAI TRI"));
        data.insert(std::make_pair(0x0e4b,"THAI CHARACTER MAI CHATTAWA"));
        data.insert(std::make_pair(0x0e4c,"THAI CHARACTER THANTHAKHAT"));
        data.insert(std::make_pair(0x0e4d,"THAI CHARACTER NIKHAHIT"));
        data.insert(std::make_pair(0x0e4e,"THAI CHARACTER YAMAKKAN"));
        data.insert(std::make_pair(0x0e4f,"THAI CHARACTER FONGMAN"));
        data.insert(std::make_pair(0x0e50,"THAI DIGIT ZERO"));
        data.insert(std::make_pair(0x0e51,"THAI DIGIT ONE"));
        data.insert(std::make_pair(0x0e52,"THAI DIGIT TWO"));
        data.insert(std::make_pair(0x0e53,"THAI DIGIT THREE"));
        data.insert(std::make_pair(0x0e54,"THAI DIGIT FOUR"));
        data.insert(std::make_pair(0x0e55,"THAI DIGIT FIVE"));
        data.insert(std::make_pair(0x0e56,"THAI DIGIT SIX"));
        data.insert(std::make_pair(0x0e57,"THAI DIGIT SEVEN"));
        data.insert(std::make_pair(0x0e58,"THAI DIGIT EIGHT"));
        data.insert(std::make_pair(0x0e59,"THAI DIGIT NINE"));
        data.insert(std::make_pair(0x0e5a,"THAI CHARACTER ANGKHANKHU"));
        data.insert(std::make_pair(0x0e5b,"THAI CHARACTER KHOMUT"));
        data.insert(std::make_pair(0x0e81,"LAO LETTER KO"));
        data.insert(std::make_pair(0x0e82,"LAO LETTER KHO SUNG"));
        data.insert(std::make_pair(0x0e84,"LAO LETTER KHO TAM"));
        data.insert(std::make_pair(0x0e86,"LAO LETTER PALI GHA"));
        data.insert(std::make_pair(0x0e87,"LAO LETTER NGO"));
        data.insert(std::make_pair(0x0e88,"LAO LETTER CO"));
        data.insert(std::make_pair(0x0e89,"LAO LETTER PALI CHA"));
        data.insert(std::make_pair(0x0e8a,"LAO LETTER SO TAM"));
        data.insert(std::make_pair(0x0e8c,"LAO LETTER PALI JHA"));
        data.insert(std::make_pair(0x0e8d,"LAO LETTER NYO"));
        data.insert(std::make_pair(0x0e8e,"LAO LETTER PALI NYA"));
        data.insert(std::make_pair(0x0e8f,"LAO LETTER PALI TTA"));
        data.insert(std::make_pair(0x0e90,"LAO LETTER PALI TTHA"));
        data.insert(std::make_pair(0x0e91,"LAO LETTER PALI DDA"));
        data.insert(std::make_pair(0x0e92,"LAO LETTER PALI DDHA"));
        data.insert(std::make_pair(0x0e93,"LAO LETTER PALI NNA"));
        data.insert(std::make_pair(0x0e94,"LAO LETTER DO"));
        data.insert(std::make_pair(0x0e95,"LAO LETTER TO"));
        data.insert(std::make_pair(0x0e96,"LAO LETTER THO SUNG"));
        data.insert(std::make_pair(0x0e97,"LAO LETTER THO TAM"));
        data.insert(std::make_pair(0x0e98,"LAO LETTER PALI DHA"));
        data.insert(std::make_pair(0x0e99,"LAO LETTER NO"));
        data.insert(std::make_pair(0x0e9a,"LAO LETTER BO"));
        data.insert(std::make_pair(0x0e9b,"LAO LETTER PO"));
        data.insert(std::make_pair(0x0e9c,"LAO LETTER PHO SUNG"));
        data.insert(std::make_pair(0x0e9d,"LAO LETTER FO TAM"));
        data.insert(std::make_pair(0x0e9e,"LAO LETTER PHO TAM"));
        data.insert(std::make_pair(0x0e9f,"LAO LETTER FO SUNG"));
        data.insert(std::make_pair(0x0ea0,"LAO LETTER PALI BHA"));
        data.insert(std::make_pair(0x0ea1,"LAO LETTER MO"));
        data.insert(std::make_pair(0x0ea2,"LAO LETTER YO"));
        data.insert(std::make_pair(0x0ea3,"LAO LETTER LO LING"));
        data.insert(std::make_pair(0x0ea5,"LAO LETTER LO LOOT"));
        data.insert(std::make_pair(0x0ea7,"LAO LETTER WO"));
        data.insert(std::make_pair(0x0ea8,"LAO LETTER SANSKRIT SHA"));
        data.insert(std::make_pair(0x0ea9,"LAO LETTER SANSKRIT SSA"));
        data.insert(std::make_pair(0x0eaa,"LAO LETTER SO SUNG"));
        data.insert(std::make_pair(0x0eab,"LAO LETTER HO SUNG"));
        data.insert(std::make_pair(0x0eac,"LAO LETTER PALI LLA"));
        data.insert(std::make_pair(0x0ead,"LAO LETTER O"));
        data.insert(std::make_pair(0x0eae,"LAO LETTER HO TAM"));
        data.insert(std::make_pair(0x0eaf,"LAO ELLIPSIS"));
        data.insert(std::make_pair(0x0eb0,"LAO VOWEL SIGN A"));
        data.insert(std::make_pair(0x0eb1,"LAO VOWEL SIGN MAI KAN"));
        data.insert(std::make_pair(0x0eb2,"LAO VOWEL SIGN AA"));
        data.insert(std::make_pair(0x0eb3,"LAO VOWEL SIGN AM"));
        data.insert(std::make_pair(0x0eb4,"LAO VOWEL SIGN I"));
        data.insert(std::make_pair(0x0eb5,"LAO VOWEL SIGN II"));
        data.insert(std::make_pair(0x0eb6,"LAO VOWEL SIGN Y"));
        data.insert(std::make_pair(0x0eb7,"LAO VOWEL SIGN YY"));
        data.insert(std::make_pair(0x0eb8,"LAO VOWEL SIGN U"));
        data.insert(std::make_pair(0x0eb9,"LAO VOWEL SIGN UU"));
        data.insert(std::make_pair(0x0eba,"LAO SIGN PALI VIRAMA"));
        data.insert(std::make_pair(0x0ebb,"LAO VOWEL SIGN MAI KON"));
        data.insert(std::make_pair(0x0ebc,"LAO SEMIVOWEL SIGN LO"));
        data.insert(std::make_pair(0x0ebd,"LAO SEMIVOWEL SIGN NYO"));
        data.insert(std::make_pair(0x0ec0,"LAO VOWEL SIGN E"));
        data.insert(std::make_pair(0x0ec1,"LAO VOWEL SIGN EI"));
        data.insert(std::make_pair(0x0ec2,"LAO VOWEL SIGN O"));
        data.insert(std::make_pair(0x0ec3,"LAO VOWEL SIGN AY"));
        data.insert(std::make_pair(0x0ec4,"LAO VOWEL SIGN AI"));
        data.insert(std::make_pair(0x0ec6,"LAO KO LA"));
        data.insert(std::make_pair(0x0ec8,"LAO TONE MAI EK"));
        data.insert(std::make_pair(0x0ec9,"LAO TONE MAI THO"));
        data.insert(std::make_pair(0x0eca,"LAO TONE MAI TI"));
        data.insert(std::make_pair(0x0ecb,"LAO TONE MAI CATAWA"));
        data.insert(std::make_pair(0x0ecc,"LAO CANCELLATION MARK"));
        data.insert(std::make_pair(0x0ecd,"LAO NIGGAHITA"));
        data.insert(std::make_pair(0x0ece,"LAO YAMAKKAN"));
        data.insert(std::make_pair(0x0ed0,"LAO DIGIT ZERO"));
        data.insert(std::make_pair(0x0ed1,"LAO DIGIT ONE"));
        data.insert(std::make_pair(0x0ed2,"LAO DIGIT TWO"));
        data.insert(std::make_pair(0x0ed3,"LAO DIGIT THREE"));
        data.insert(std::make_pair(0x0ed4,"LAO DIGIT FOUR"));
        data.insert(std::make_pair(0x0ed5,"LAO DIGIT FIVE"));
        data.insert(std::make_pair(0x0ed6,"LAO DIGIT SIX"));
        data.insert(std::make_pair(0x0ed7,"LAO DIGIT SEVEN"));
        data.insert(std::make_pair(0x0ed8,"LAO DIGIT EIGHT"));
        data.insert(std::make_pair(0x0ed9,"LAO DIGIT NINE"));
        data.insert(std::make_pair(0x0edc,"LAO HO NO"));
        data.insert(std::make_pair(0x0edd,"LAO HO MO"));
        data.insert(std::make_pair(0x0ede,"LAO LETTER KHMU GO"));
        data.insert(std::make_pair(0x0edf,"LAO LETTER KHMU NYO"));
        data.insert(std::make_pair(0x0f00,"TIBETAN SYLLABLE OM"));
        data.insert(std::make_pair(0x0f01,"TIBETAN MARK GTER YIG MGO TRUNCATED A"));
        data.insert(std::make_pair(0x0f02,"TIBETAN MARK GTER YIG MGO -UM RNAM BCAD MA"));
        data.insert(std::make_pair(0x0f03,"TIBETAN MARK GTER YIG MGO -UM GTER TSHEG MA"));
        data.insert(std::make_pair(0x0f04,"TIBETAN MARK INITIAL YIG MGO MDUN MA"));
        data.insert(std::make_pair(0x0f05,"TIBETAN MARK CLOSING YIG MGO SGAB MA"));
        data.insert(std::make_pair(0x0f06,"TIBETAN MARK CARET YIG MGO PHUR SHAD MA"));
        data.insert(std::make_pair(0x0f07,"TIBETAN MARK YIG MGO TSHEG SHAD MA"));
        data.insert(std::make_pair(0x0f08,"TIBETAN MARK SBRUL SHAD"));
        data.insert(std::make_pair(0x0f09,"TIBETAN MARK BSKUR YIG MGO"));
        data.insert(std::make_pair(0x0f0a,"TIBETAN MARK BKA- SHOG YIG MGO"));
        data.insert(std::make_pair(0x0f0b,"TIBETAN MARK INTERSYLLABIC TSHEG"));
        data.insert(std::make_pair(0x0f0c,"TIBETAN MARK DELIMITER TSHEG BSTAR"));
        data.insert(std::make_pair(0x0f0d,"TIBETAN MARK SHAD"));
        data.insert(std::make_pair(0x0f0e,"TIBETAN MARK NYIS SHAD"));
        data.insert(std::make_pair(0x0f0f,"TIBETAN MARK TSHEG SHAD"));
        data.insert(std::make_pair(0x0f10,"TIBETAN MARK NYIS TSHEG SHAD"));
        data.insert(std::make_pair(0x0f11,"TIBETAN MARK RIN CHEN SPUNGS SHAD"));
        data.insert(std::make_pair(0x0f12,"TIBETAN MARK RGYA GRAM SHAD"));
        data.insert(std::make_pair(0x0f13,"TIBETAN MARK CARET -DZUD RTAGS ME LONG CAN"));
        data.insert(std::make_pair(0x0f14,"TIBETAN MARK GTER TSHEG"));
        data.insert(std::make_pair(0x0f15,"TIBETAN LOGOTYPE SIGN CHAD RTAGS"));
        data.insert(std::make_pair(0x0f16,"TIBETAN LOGOTYPE SIGN LHAG RTAGS"));
        data.insert(std::make_pair(0x0f17,"TIBETAN ASTROLOGICAL SIGN SGRA GCAN -CHAR RTAGS"));
        data.insert(std::make_pair(0x0f18,"TIBETAN ASTROLOGICAL SIGN -KHYUD PA"));
        data.insert(std::make_pair(0x0f19,"TIBETAN ASTROLOGICAL SIGN SDONG TSHUGS"));
        data.insert(std::make_pair(0x0f1a,"TIBETAN SIGN RDEL DKAR GCIG"));
        data.insert(std::make_pair(0x0f1b,"TIBETAN SIGN RDEL DKAR GNYIS"));
        data.insert(std::make_pair(0x0f1c,"TIBETAN SIGN RDEL DKAR GSUM"));
        data.insert(std::make_pair(0x0f1d,"TIBETAN SIGN RDEL NAG GCIG"));
        data.insert(std::make_pair(0x0f1e,"TIBETAN SIGN RDEL NAG GNYIS"));
        data.insert(std::make_pair(0x0f1f,"TIBETAN SIGN RDEL DKAR RDEL NAG"));
        data.insert(std::make_pair(0x0f20,"TIBETAN DIGIT ZERO"));
        data.insert(std::make_pair(0x0f21,"TIBETAN DIGIT ONE"));
        data.insert(std::make_pair(0x0f22,"TIBETAN DIGIT TWO"));
        data.insert(std::make_pair(0x0f23,"TIBETAN DIGIT THREE"));
        data.insert(std::make_pair(0x0f24,"TIBETAN DIGIT FOUR"));
        data.insert(std::make_pair(0x0f25,"TIBETAN DIGIT FIVE"));
        data.insert(std::make_pair(0x0f26,"TIBETAN DIGIT SIX"));
        data.insert(std::make_pair(0x0f27,"TIBETAN DIGIT SEVEN"));
        data.insert(std::make_pair(0x0f28,"TIBETAN DIGIT EIGHT"));
        data.insert(std::make_pair(0x0f29,"TIBETAN DIGIT NINE"));
        data.insert(std::make_pair(0x0f2a,"TIBETAN DIGIT HALF ONE"));
        data.insert(std::make_pair(0x0f2b,"TIBETAN DIGIT HALF TWO"));
        data.insert(std::make_pair(0x0f2c,"TIBETAN DIGIT HALF THREE"));
        data.insert(std::make_pair(0x0f2d,"TIBETAN DIGIT HALF FOUR"));
        data.insert(std::make_pair(0x0f2e,"TIBETAN DIGIT HALF FIVE"));
        data.insert(std::make_pair(0x0f2f,"TIBETAN DIGIT HALF SIX"));
        data.insert(std::make_pair(0x0f30,"TIBETAN DIGIT HALF SEVEN"));
        data.insert(std::make_pair(0x0f31,"TIBETAN DIGIT HALF EIGHT"));
        data.insert(std::make_pair(0x0f32,"TIBETAN DIGIT HALF NINE"));
        data.insert(std::make_pair(0x0f33,"TIBETAN DIGIT HALF ZERO"));
        data.insert(std::make_pair(0x0f34,"TIBETAN MARK BSDUS RTAGS"));
        data.insert(std::make_pair(0x0f35,"TIBETAN MARK NGAS BZUNG NYI ZLA"));
        data.insert(std::make_pair(0x0f36,"TIBETAN MARK CARET -DZUD RTAGS BZHI MIG CAN"));
        data.insert(std::make_pair(0x0f37,"TIBETAN MARK NGAS BZUNG SGOR RTAGS"));
        data.insert(std::make_pair(0x0f38,"TIBETAN MARK CHE MGO"));
        data.insert(std::make_pair(0x0f39,"TIBETAN MARK TSA -PHRU"));
        data.insert(std::make_pair(0x0f3a,"TIBETAN MARK GUG RTAGS GYON"));
        data.insert(std::make_pair(0x0f3b,"TIBETAN MARK GUG RTAGS GYAS"));
        data.insert(std::make_pair(0x0f3c,"TIBETAN MARK ANG KHANG GYON"));
        data.insert(std::make_pair(0x0f3d,"TIBETAN MARK ANG KHANG GYAS"));
        data.insert(std::make_pair(0x0f3e,"TIBETAN SIGN YAR TSHES"));
        data.insert(std::make_pair(0x0f3f,"TIBETAN SIGN MAR TSHES"));
        data.insert(std::make_pair(0x0f40,"TIBETAN LETTER KA"));
        data.insert(std::make_pair(0x0f41,"TIBETAN LETTER KHA"));
        data.insert(std::make_pair(0x0f42,"TIBETAN LETTER GA"));
        data.insert(std::make_pair(0x0f43,"TIBETAN LETTER GHA"));
        data.insert(std::make_pair(0x0f44,"TIBETAN LETTER NGA"));
        data.insert(std::make_pair(0x0f45,"TIBETAN LETTER CA"));
        data.insert(std::make_pair(0x0f46,"TIBETAN LETTER CHA"));
        data.insert(std::make_pair(0x0f47,"TIBETAN LETTER JA"));
        data.insert(std::make_pair(0x0f49,"TIBETAN LETTER NYA"));
        data.insert(std::make_pair(0x0f4a,"TIBETAN LETTER TTA"));
        data.insert(std::make_pair(0x0f4b,"TIBETAN LETTER TTHA"));
        data.insert(std::make_pair(0x0f4c,"TIBETAN LETTER DDA"));
        data.insert(std::make_pair(0x0f4d,"TIBETAN LETTER DDHA"));
        data.insert(std::make_pair(0x0f4e,"TIBETAN LETTER NNA"));
        data.insert(std::make_pair(0x0f4f,"TIBETAN LETTER TA"));
        data.insert(std::make_pair(0x0f50,"TIBETAN LETTER THA"));
        data.insert(std::make_pair(0x0f51,"TIBETAN LETTER DA"));
        data.insert(std::make_pair(0x0f52,"TIBETAN LETTER DHA"));
        data.insert(std::make_pair(0x0f53,"TIBETAN LETTER NA"));
        data.insert(std::make_pair(0x0f54,"TIBETAN LETTER PA"));
        data.insert(std::make_pair(0x0f55,"TIBETAN LETTER PHA"));
        data.insert(std::make_pair(0x0f56,"TIBETAN LETTER BA"));
        data.insert(std::make_pair(0x0f57,"TIBETAN LETTER BHA"));
        data.insert(std::make_pair(0x0f58,"TIBETAN LETTER MA"));
        data.insert(std::make_pair(0x0f59,"TIBETAN LETTER TSA"));
        data.insert(std::make_pair(0x0f5a,"TIBETAN LETTER TSHA"));
        data.insert(std::make_pair(0x0f5b,"TIBETAN LETTER DZA"));
        data.insert(std::make_pair(0x0f5c,"TIBETAN LETTER DZHA"));
        data.insert(std::make_pair(0x0f5d,"TIBETAN LETTER WA"));
        data.insert(std::make_pair(0x0f5e,"TIBETAN LETTER ZHA"));
        data.insert(std::make_pair(0x0f5f,"TIBETAN LETTER ZA"));
        data.insert(std::make_pair(0x0f60,"TIBETAN LETTER -A"));
        data.insert(std::make_pair(0x0f61,"TIBETAN LETTER YA"));
        data.insert(std::make_pair(0x0f62,"TIBETAN LETTER RA"));
        data.insert(std::make_pair(0x0f63,"TIBETAN LETTER LA"));
        data.insert(std::make_pair(0x0f64,"TIBETAN LETTER SHA"));
        data.insert(std::make_pair(0x0f65,"TIBETAN LETTER SSA"));
        data.insert(std::make_pair(0x0f66,"TIBETAN LETTER SA"));
        data.insert(std::make_pair(0x0f67,"TIBETAN LETTER HA"));
        data.insert(std::make_pair(0x0f68,"TIBETAN LETTER A"));
        data.insert(std::make_pair(0x0f69,"TIBETAN LETTER KSSA"));
        data.insert(std::make_pair(0x0f6a,"TIBETAN LETTER FIXED-FORM RA"));
        data.insert(std::make_pair(0x0f6b,"TIBETAN LETTER KKA"));
        data.insert(std::make_pair(0x0f6c,"TIBETAN LETTER RRA"));
        data.insert(std::make_pair(0x0f71,"TIBETAN VOWEL SIGN AA"));
        data.insert(std::make_pair(0x0f72,"TIBETAN VOWEL SIGN I"));
        data.insert(std::make_pair(0x0f73,"TIBETAN VOWEL SIGN II"));
        data.insert(std::make_pair(0x0f74,"TIBETAN VOWEL SIGN U"));
        data.insert(std::make_pair(0x0f75,"TIBETAN VOWEL SIGN UU"));
        data.insert(std::make_pair(0x0f76,"TIBETAN VOWEL SIGN VOCALIC R"));
        data.insert(std::make_pair(0x0f77,"TIBETAN VOWEL SIGN VOCALIC RR"));
        data.insert(std::make_pair(0x0f78,"TIBETAN VOWEL SIGN VOCALIC L"));
        data.insert(std::make_pair(0x0f79,"TIBETAN VOWEL SIGN VOCALIC LL"));
        data.insert(std::make_pair(0x0f7a,"TIBETAN VOWEL SIGN E"));
        data.insert(std::make_pair(0x0f7b,"TIBETAN VOWEL SIGN EE"));
        data.insert(std::make_pair(0x0f7c,"TIBETAN VOWEL SIGN O"));
        data.insert(std::make_pair(0x0f7d,"TIBETAN VOWEL SIGN OO"));
        data.insert(std::make_pair(0x0f7e,"TIBETAN SIGN RJES SU NGA RO"));
        data.insert(std::make_pair(0x0f7f,"TIBETAN SIGN RNAM BCAD"));
        data.insert(std::make_pair(0x0f80,"TIBETAN VOWEL SIGN REVERSED I"));
        data.insert(std::make_pair(0x0f81,"TIBETAN VOWEL SIGN REVERSED II"));
        data.insert(std::make_pair(0x0f82,"TIBETAN SIGN NYI ZLA NAA DA"));
        data.insert(std::make_pair(0x0f83,"TIBETAN SIGN SNA LDAN"));
        data.insert(std::make_pair(0x0f84,"TIBETAN MARK HALANTA"));
        data.insert(std::make_pair(0x0f85,"TIBETAN MARK PALUTA"));
        data.insert(std::make_pair(0x0f86,"TIBETAN SIGN LCI RTAGS"));
        data.insert(std::make_pair(0x0f87,"TIBETAN SIGN YANG RTAGS"));
        data.insert(std::make_pair(0x0f88,"TIBETAN SIGN LCE TSA CAN"));
        data.insert(std::make_pair(0x0f89,"TIBETAN SIGN MCHU CAN"));
        data.insert(std::make_pair(0x0f8a,"TIBETAN SIGN GRU CAN RGYINGS"));
        data.insert(std::make_pair(0x0f8b,"TIBETAN SIGN GRU MED RGYINGS"));
        data.insert(std::make_pair(0x0f8c,"TIBETAN SIGN INVERTED MCHU CAN"));
        data.insert(std::make_pair(0x0f8d,"TIBETAN SUBJOINED SIGN LCE TSA CAN"));
        data.insert(std::make_pair(0x0f8e,"TIBETAN SUBJOINED SIGN MCHU CAN"));
        data.insert(std::make_pair(0x0f8f,"TIBETAN SUBJOINED SIGN INVERTED MCHU CAN"));
        data.insert(std::make_pair(0x0f90,"TIBETAN SUBJOINED LETTER KA"));
        data.insert(std::make_pair(0x0f91,"TIBETAN SUBJOINED LETTER KHA"));
        data.insert(std::make_pair(0x0f92,"TIBETAN SUBJOINED LETTER GA"));
        data.insert(std::make_pair(0x0f93,"TIBETAN SUBJOINED LETTER GHA"));
        data.insert(std::make_pair(0x0f94,"TIBETAN SUBJOINED LETTER NGA"));
        data.insert(std::make_pair(0x0f95,"TIBETAN SUBJOINED LETTER CA"));
        data.insert(std::make_pair(0x0f96,"TIBETAN SUBJOINED LETTER CHA"));
        data.insert(std::make_pair(0x0f97,"TIBETAN SUBJOINED LETTER JA"));
        data.insert(std::make_pair(0x0f99,"TIBETAN SUBJOINED LETTER NYA"));
        data.insert(std::make_pair(0x0f9a,"TIBETAN SUBJOINED LETTER TTA"));
        data.insert(std::make_pair(0x0f9b,"TIBETAN SUBJOINED LETTER TTHA"));
        data.insert(std::make_pair(0x0f9c,"TIBETAN SUBJOINED LETTER DDA"));
        data.insert(std::make_pair(0x0f9d,"TIBETAN SUBJOINED LETTER DDHA"));
        data.insert(std::make_pair(0x0f9e,"TIBETAN SUBJOINED LETTER NNA"));
        data.insert(std::make_pair(0x0f9f,"TIBETAN SUBJOINED LETTER TA"));
        data.insert(std::make_pair(0x0fa0,"TIBETAN SUBJOINED LETTER THA"));
        data.insert(std::make_pair(0x0fa1,"TIBETAN SUBJOINED LETTER DA"));
        data.insert(std::make_pair(0x0fa2,"TIBETAN SUBJOINED LETTER DHA"));
        data.insert(std::make_pair(0x0fa3,"TIBETAN SUBJOINED LETTER NA"));
        data.insert(std::make_pair(0x0fa4,"TIBETAN SUBJOINED LETTER PA"));
        data.insert(std::make_pair(0x0fa5,"TIBETAN SUBJOINED LETTER PHA"));
        data.insert(std::make_pair(0x0fa6,"TIBETAN SUBJOINED LETTER BA"));
        data.insert(std::make_pair(0x0fa7,"TIBETAN SUBJOINED LETTER BHA"));
        data.insert(std::make_pair(0x0fa8,"TIBETAN SUBJOINED LETTER MA"));
        data.insert(std::make_pair(0x0fa9,"TIBETAN SUBJOINED LETTER TSA"));
        data.insert(std::make_pair(0x0faa,"TIBETAN SUBJOINED LETTER TSHA"));
        data.insert(std::make_pair(0x0fab,"TIBETAN SUBJOINED LETTER DZA"));
        data.insert(std::make_pair(0x0fac,"TIBETAN SUBJOINED LETTER DZHA"));
        data.insert(std::make_pair(0x0fad,"TIBETAN SUBJOINED LETTER WA"));
        data.insert(std::make_pair(0x0fae,"TIBETAN SUBJOINED LETTER ZHA"));
        data.insert(std::make_pair(0x0faf,"TIBETAN SUBJOINED LETTER ZA"));
        data.insert(std::make_pair(0x0fb0,"TIBETAN SUBJOINED LETTER -A"));
        data.insert(std::make_pair(0x0fb1,"TIBETAN SUBJOINED LETTER YA"));
        data.insert(std::make_pair(0x0fb2,"TIBETAN SUBJOINED LETTER RA"));
        data.insert(std::make_pair(0x0fb3,"TIBETAN SUBJOINED LETTER LA"));
        data.insert(std::make_pair(0x0fb4,"TIBETAN SUBJOINED LETTER SHA"));
        data.insert(std::make_pair(0x0fb5,"TIBETAN SUBJOINED LETTER SSA"));
        data.insert(std::make_pair(0x0fb6,"TIBETAN SUBJOINED LETTER SA"));
        data.insert(std::make_pair(0x0fb7,"TIBETAN SUBJOINED LETTER HA"));
        data.insert(std::make_pair(0x0fb8,"TIBETAN SUBJOINED LETTER A"));
        data.insert(std::make_pair(0x0fb9,"TIBETAN SUBJOINED LETTER KSSA"));
        data.insert(std::make_pair(0x0fba,"TIBETAN SUBJOINED LETTER FIXED-FORM WA"));
        data.insert(std::make_pair(0x0fbb,"TIBETAN SUBJOINED LETTER FIXED-FORM YA"));
        data.insert(std::make_pair(0x0fbc,"TIBETAN SUBJOINED LETTER FIXED-FORM RA"));
        data.insert(std::make_pair(0x0fbe,"TIBETAN KU RU KHA"));
        data.insert(std::make_pair(0x0fbf,"TIBETAN KU RU KHA BZHI MIG CAN"));
        data.insert(std::make_pair(0x0fc0,"TIBETAN CANTILLATION SIGN HEAVY BEAT"));
        data.insert(std::make_pair(0x0fc1,"TIBETAN CANTILLATION SIGN LIGHT BEAT"));
        data.insert(std::make_pair(0x0fc2,"TIBETAN CANTILLATION SIGN CANG TE-U"));
        data.insert(std::make_pair(0x0fc3,"TIBETAN CANTILLATION SIGN SBUB -CHAL"));
        data.insert(std::make_pair(0x0fc4,"TIBETAN SYMBOL DRIL BU"));
        data.insert(std::make_pair(0x0fc5,"TIBETAN SYMBOL RDO RJE"));
        data.insert(std::make_pair(0x0fc6,"TIBETAN SYMBOL PADMA GDAN"));
        data.insert(std::make_pair(0x0fc7,"TIBETAN SYMBOL RDO RJE RGYA GRAM"));
        data.insert(std::make_pair(0x0fc8,"TIBETAN SYMBOL PHUR PA"));
        data.insert(std::make_pair(0x0fc9,"TIBETAN SYMBOL NOR BU"));
        data.insert(std::make_pair(0x0fca,"TIBETAN SYMBOL NOR BU NYIS -KHYIL"));
        data.insert(std::make_pair(0x0fcb,"TIBETAN SYMBOL NOR BU GSUM -KHYIL"));
        data.insert(std::make_pair(0x0fcc,"TIBETAN SYMBOL NOR BU BZHI -KHYIL"));
        data.insert(std::make_pair(0x0fce,"TIBETAN SIGN RDEL NAG RDEL DKAR"));
        data.insert(std::make_pair(0x0fcf,"TIBETAN SIGN RDEL NAG GSUM"));
        data.insert(std::make_pair(0x0fd0,"TIBETAN MARK BSKA- SHOG GI MGO RGYAN"));
        data.insert(std::make_pair(0x0fd1,"TIBETAN MARK MNYAM YIG GI MGO RGYAN"));
        data.insert(std::make_pair(0x0fd2,"TIBETAN MARK NYIS TSHEG"));
        data.insert(std::make_pair(0x0fd3,"TIBETAN MARK INITIAL BRDA RNYING YIG MGO MDUN MA"));
        data.insert(std::make_pair(0x0fd4,"TIBETAN MARK CLOSING BRDA RNYING YIG MGO SGAB MA"));
        data.insert(std::make_pair(0x0fd5,"RIGHT-FACING SVASTI SIGN"));
        data.insert(std::make_pair(0x0fd6,"LEFT-FACING SVASTI SIGN"));
        data.insert(std::make_pair(0x0fd7,"RIGHT-FACING SVASTI SIGN WITH DOTS"));
        data.insert(std::make_pair(0x0fd8,"LEFT-FACING SVASTI SIGN WITH DOTS"));
        data.insert(std::make_pair(0x0fd9,"TIBETAN MARK LEADING MCHAN RTAGS"));
        data.insert(std::make_pair(0x0fda,"TIBETAN MARK TRAILING MCHAN RTAGS"));
        data.insert(std::make_pair(0x1000,"MYANMAR LETTER KA"));
        data.insert(std::make_pair(0x1001,"MYANMAR LETTER KHA"));
        data.insert(std::make_pair(0x1002,"MYANMAR LETTER GA"));
        data.insert(std::make_pair(0x1003,"MYANMAR LETTER GHA"));
        data.insert(std::make_pair(0x1004,"MYANMAR LETTER NGA"));
        data.insert(std::make_pair(0x1005,"MYANMAR LETTER CA"));
        data.insert(std::make_pair(0x1006,"MYANMAR LETTER CHA"));
        data.insert(std::make_pair(0x1007,"MYANMAR LETTER JA"));
        data.insert(std::make_pair(0x1008,"MYANMAR LETTER JHA"));
        data.insert(std::make_pair(0x1009,"MYANMAR LETTER NYA"));
        data.insert(std::make_pair(0x100a,"MYANMAR LETTER NNYA"));
        data.insert(std::make_pair(0x100b,"MYANMAR LETTER TTA"));
        data.insert(std::make_pair(0x100c,"MYANMAR LETTER TTHA"));
        data.insert(std::make_pair(0x100d,"MYANMAR LETTER DDA"));
        data.insert(std::make_pair(0x100e,"MYANMAR LETTER DDHA"));
        data.insert(std::make_pair(0x100f,"MYANMAR LETTER NNA"));
        data.insert(std::make_pair(0x1010,"MYANMAR LETTER TA"));
        data.insert(std::make_pair(0x1011,"MYANMAR LETTER THA"));
        data.insert(std::make_pair(0x1012,"MYANMAR LETTER DA"));
        data.insert(std::make_pair(0x1013,"MYANMAR LETTER DHA"));
        data.insert(std::make_pair(0x1014,"MYANMAR LETTER NA"));
        data.insert(std::make_pair(0x1015,"MYANMAR LETTER PA"));
        data.insert(std::make_pair(0x1016,"MYANMAR LETTER PHA"));
        data.insert(std::make_pair(0x1017,"MYANMAR LETTER BA"));
        data.insert(std::make_pair(0x1018,"MYANMAR LETTER BHA"));
        data.insert(std::make_pair(0x1019,"MYANMAR LETTER MA"));
        data.insert(std::make_pair(0x101a,"MYANMAR LETTER YA"));
        data.insert(std::make_pair(0x101b,"MYANMAR LETTER RA"));
        data.insert(std::make_pair(0x101c,"MYANMAR LETTER LA"));
        data.insert(std::make_pair(0x101d,"MYANMAR LETTER WA"));
        data.insert(std::make_pair(0x101e,"MYANMAR LETTER SA"));
        data.insert(std::make_pair(0x101f,"MYANMAR LETTER HA"));
        data.insert(std::make_pair(0x1020,"MYANMAR LETTER LLA"));
        data.insert(std::make_pair(0x1021,"MYANMAR LETTER A"));
        data.insert(std::make_pair(0x1022,"MYANMAR LETTER SHAN A"));
        data.insert(std::make_pair(0x1023,"MYANMAR LETTER I"));
        data.insert(std::make_pair(0x1024,"MYANMAR LETTER II"));
        data.insert(std::make_pair(0x1025,"MYANMAR LETTER U"));
        data.insert(std::make_pair(0x1026,"MYANMAR LETTER UU"));
        data.insert(std::make_pair(0x1027,"MYANMAR LETTER E"));
        data.insert(std::make_pair(0x1028,"MYANMAR LETTER MON E"));
        data.insert(std::make_pair(0x1029,"MYANMAR LETTER O"));
        data.insert(std::make_pair(0x102a,"MYANMAR LETTER AU"));
        data.insert(std::make_pair(0x102b,"MYANMAR VOWEL SIGN TALL AA"));
        data.insert(std::make_pair(0x102c,"MYANMAR VOWEL SIGN AA"));
        data.insert(std::make_pair(0x102d,"MYANMAR VOWEL SIGN I"));
        data.insert(std::make_pair(0x102e,"MYANMAR VOWEL SIGN II"));
        data.insert(std::make_pair(0x102f,"MYANMAR VOWEL SIGN U"));
        data.insert(std::make_pair(0x1030,"MYANMAR VOWEL SIGN UU"));
        data.insert(std::make_pair(0x1031,"MYANMAR VOWEL SIGN E"));
        data.insert(std::make_pair(0x1032,"MYANMAR VOWEL SIGN AI"));
        data.insert(std::make_pair(0x1033,"MYANMAR VOWEL SIGN MON II"));
        data.insert(std::make_pair(0x1034,"MYANMAR VOWEL SIGN MON O"));
        data.insert(std::make_pair(0x1035,"MYANMAR VOWEL SIGN E ABOVE"));
        data.insert(std::make_pair(0x1036,"MYANMAR SIGN ANUSVARA"));
        data.insert(std::make_pair(0x1037,"MYANMAR SIGN DOT BELOW"));
        data.insert(std::make_pair(0x1038,"MYANMAR SIGN VISARGA"));
        data.insert(std::make_pair(0x1039,"MYANMAR SIGN VIRAMA"));
        data.insert(std::make_pair(0x103a,"MYANMAR SIGN ASAT"));
        data.insert(std::make_pair(0x103b,"MYANMAR CONSONANT SIGN MEDIAL YA"));
        data.insert(std::make_pair(0x103c,"MYANMAR CONSONANT SIGN MEDIAL RA"));
        data.insert(std::make_pair(0x103d,"MYANMAR CONSONANT SIGN MEDIAL WA"));
        data.insert(std::make_pair(0x103e,"MYANMAR CONSONANT SIGN MEDIAL HA"));
        data.insert(std::make_pair(0x103f,"MYANMAR LETTER GREAT SA"));
        data.insert(std::make_pair(0x1040,"MYANMAR DIGIT ZERO"));
        data.insert(std::make_pair(0x1041,"MYANMAR DIGIT ONE"));
        data.insert(std::make_pair(0x1042,"MYANMAR DIGIT TWO"));
        data.insert(std::make_pair(0x1043,"MYANMAR DIGIT THREE"));
        data.insert(std::make_pair(0x1044,"MYANMAR DIGIT FOUR"));
        data.insert(std::make_pair(0x1045,"MYANMAR DIGIT FIVE"));
        data.insert(std::make_pair(0x1046,"MYANMAR DIGIT SIX"));
        data.insert(std::make_pair(0x1047,"MYANMAR DIGIT SEVEN"));
        data.insert(std::make_pair(0x1048,"MYANMAR DIGIT EIGHT"));
        data.insert(std::make_pair(0x1049,"MYANMAR DIGIT NINE"));
        data.insert(std::make_pair(0x104a,"MYANMAR SIGN LITTLE SECTION"));
        data.insert(std::make_pair(0x104b,"MYANMAR SIGN SECTION"));
        data.insert(std::make_pair(0x104c,"MYANMAR SYMBOL LOCATIVE"));
        data.insert(std::make_pair(0x104d,"MYANMAR SYMBOL COMPLETED"));
        data.insert(std::make_pair(0x104e,"MYANMAR SYMBOL AFOREMENTIONED"));
        data.insert(std::make_pair(0x104f,"MYANMAR SYMBOL GENITIVE"));
        data.insert(std::make_pair(0x1050,"MYANMAR LETTER SHA"));
        data.insert(std::make_pair(0x1051,"MYANMAR LETTER SSA"));
        data.insert(std::make_pair(0x1052,"MYANMAR LETTER VOCALIC R"));
        data.insert(std::make_pair(0x1053,"MYANMAR LETTER VOCALIC RR"));
        data.insert(std::make_pair(0x1054,"MYANMAR LETTER VOCALIC L"));
        data.insert(std::make_pair(0x1055,"MYANMAR LETTER VOCALIC LL"));
        data.insert(std::make_pair(0x1056,"MYANMAR VOWEL SIGN VOCALIC R"));
        data.insert(std::make_pair(0x1057,"MYANMAR VOWEL SIGN VOCALIC RR"));
        data.insert(std::make_pair(0x1058,"MYANMAR VOWEL SIGN VOCALIC L"));
        data.insert(std::make_pair(0x1059,"MYANMAR VOWEL SIGN VOCALIC LL"));
        data.insert(std::make_pair(0x105a,"MYANMAR LETTER MON NGA"));
        data.insert(std::make_pair(0x105b,"MYANMAR LETTER MON JHA"));
        data.insert(std::make_pair(0x105c,"MYANMAR LETTER MON BBA"));
        data.insert(std::make_pair(0x105d,"MYANMAR LETTER MON BBE"));
        data.insert(std::make_pair(0x105e,"MYANMAR CONSONANT SIGN MON MEDIAL NA"));
        data.insert(std::make_pair(0x105f,"MYANMAR CONSONANT SIGN MON MEDIAL MA"));
        data.insert(std::make_pair(0x1060,"MYANMAR CONSONANT SIGN MON MEDIAL LA"));
        data.insert(std::make_pair(0x1061,"MYANMAR LETTER SGAW KAREN SHA"));
        data.insert(std::make_pair(0x1062,"MYANMAR VOWEL SIGN SGAW KAREN EU"));
        data.insert(std::make_pair(0x1063,"MYANMAR TONE MARK SGAW KAREN HATHI"));
        data.insert(std::make_pair(0x1064,"MYANMAR TONE MARK SGAW KAREN KE PHO"));
        data.insert(std::make_pair(0x1065,"MYANMAR LETTER WESTERN PWO KAREN THA"));
        data.insert(std::make_pair(0x1066,"MYANMAR LETTER WESTERN PWO KAREN PWA"));
        data.insert(std::make_pair(0x1067,"MYANMAR VOWEL SIGN WESTERN PWO KAREN EU"));
        data.insert(std::make_pair(0x1068,"MYANMAR VOWEL SIGN WESTERN PWO KAREN UE"));
        data.insert(std::make_pair(0x1069,"MYANMAR SIGN WESTERN PWO KAREN TONE-1"));
        data.insert(std::make_pair(0x106a,"MYANMAR SIGN WESTERN PWO KAREN TONE-2"));
        data.insert(std::make_pair(0x106b,"MYANMAR SIGN WESTERN PWO KAREN TONE-3"));
        data.insert(std::make_pair(0x106c,"MYANMAR SIGN WESTERN PWO KAREN TONE-4"));
        data.insert(std::make_pair(0x106d,"MYANMAR SIGN WESTERN PWO KAREN TONE-5"));
        data.insert(std::make_pair(0x106e,"MYANMAR LETTER EASTERN PWO KAREN NNA"));
        data.insert(std::make_pair(0x106f,"MYANMAR LETTER EASTERN PWO KAREN YWA"));
        data.insert(std::make_pair(0x1070,"MYANMAR LETTER EASTERN PWO KAREN GHWA"));
        data.insert(std::make_pair(0x1071,"MYANMAR VOWEL SIGN GEBA KAREN I"));
        data.insert(std::make_pair(0x1072,"MYANMAR VOWEL SIGN KAYAH OE"));
        data.insert(std::make_pair(0x1073,"MYANMAR VOWEL SIGN KAYAH U"));
        data.insert(std::make_pair(0x1074,"MYANMAR VOWEL SIGN KAYAH EE"));
        data.insert(std::make_pair(0x1075,"MYANMAR LETTER SHAN KA"));
        data.insert(std::make_pair(0x1076,"MYANMAR LETTER SHAN KHA"));
        data.insert(std::make_pair(0x1077,"MYANMAR LETTER SHAN GA"));
        data.insert(std::make_pair(0x1078,"MYANMAR LETTER SHAN CA"));
        data.insert(std::make_pair(0x1079,"MYANMAR LETTER SHAN ZA"));
        data.insert(std::make_pair(0x107a,"MYANMAR LETTER SHAN NYA"));
        data.insert(std::make_pair(0x107b,"MYANMAR LETTER SHAN DA"));
        data.insert(std::make_pair(0x107c,"MYANMAR LETTER SHAN NA"));
        data.insert(std::make_pair(0x107d,"MYANMAR LETTER SHAN PHA"));
        data.insert(std::make_pair(0x107e,"MYANMAR LETTER SHAN FA"));
        data.insert(std::make_pair(0x107f,"MYANMAR LETTER SHAN BA"));
        data.insert(std::make_pair(0x1080,"MYANMAR LETTER SHAN THA"));
        data.insert(std::make_pair(0x1081,"MYANMAR LETTER SHAN HA"));
        data.insert(std::make_pair(0x1082,"MYANMAR CONSONANT SIGN SHAN MEDIAL WA"));
        data.insert(std::make_pair(0x1083,"MYANMAR VOWEL SIGN SHAN AA"));
        data.insert(std::make_pair(0x1084,"MYANMAR VOWEL SIGN SHAN E"));
        data.insert(std::make_pair(0x1085,"MYANMAR VOWEL SIGN SHAN E ABOVE"));
        data.insert(std::make_pair(0x1086,"MYANMAR VOWEL SIGN SHAN FINAL Y"));
        data.insert(std::make_pair(0x1087,"MYANMAR SIGN SHAN TONE-2"));
        data.insert(std::make_pair(0x1088,"MYANMAR SIGN SHAN TONE-3"));
        data.insert(std::make_pair(0x1089,"MYANMAR SIGN SHAN TONE-5"));
        data.insert(std::make_pair(0x108a,"MYANMAR SIGN SHAN TONE-6"));
        data.insert(std::make_pair(0x108b,"MYANMAR SIGN SHAN COUNCIL TONE-2"));
        data.insert(std::make_pair(0x108c,"MYANMAR SIGN SHAN COUNCIL TONE-3"));
        data.insert(std::make_pair(0x108d,"MYANMAR SIGN SHAN COUNCIL EMPHATIC TONE"));
        data.insert(std::make_pair(0x108e,"MYANMAR LETTER RUMAI PALAUNG FA"));
        data.insert(std::make_pair(0x108f,"MYANMAR SIGN RUMAI PALAUNG TONE-5"));
        data.insert(std::make_pair(0x1090,"MYANMAR SHAN DIGIT ZERO"));
        data.insert(std::make_pair(0x1091,"MYANMAR SHAN DIGIT ONE"));
        data.insert(std::make_pair(0x1092,"MYANMAR SHAN DIGIT TWO"));
        data.insert(std::make_pair(0x1093,"MYANMAR SHAN DIGIT THREE"));
        data.insert(std::make_pair(0x1094,"MYANMAR SHAN DIGIT FOUR"));
        data.insert(std::make_pair(0x1095,"MYANMAR SHAN DIGIT FIVE"));
        data.insert(std::make_pair(0x1096,"MYANMAR SHAN DIGIT SIX"));
        data.insert(std::make_pair(0x1097,"MYANMAR SHAN DIGIT SEVEN"));
        data.insert(std::make_pair(0x1098,"MYANMAR SHAN DIGIT EIGHT"));
        data.insert(std::make_pair(0x1099,"MYANMAR SHAN DIGIT NINE"));
        data.insert(std::make_pair(0x109a,"MYANMAR SIGN KHAMTI TONE-1"));
        data.insert(std::make_pair(0x109b,"MYANMAR SIGN KHAMTI TONE-3"));
        data.insert(std::make_pair(0x109c,"MYANMAR VOWEL SIGN AITON A"));
        data.insert(std::make_pair(0x109d,"MYANMAR VOWEL SIGN AITON AI"));
        data.insert(std::make_pair(0x109e,"MYANMAR SYMBOL SHAN ONE"));
        data.insert(std::make_pair(0x109f,"MYANMAR SYMBOL SHAN EXCLAMATION"));
        data.insert(std::make_pair(0x10a0,"GEORGIAN CAPITAL LETTER AN"));
        data.insert(std::make_pair(0x10a1,"GEORGIAN CAPITAL LETTER BAN"));
        data.insert(std::make_pair(0x10a2,"GEORGIAN CAPITAL LETTER GAN"));
        data.insert(std::make_pair(0x10a3,"GEORGIAN CAPITAL LETTER DON"));
        data.insert(std::make_pair(0x10a4,"GEORGIAN CAPITAL LETTER EN"));
        data.insert(std::make_pair(0x10a5,"GEORGIAN CAPITAL LETTER VIN"));
        data.insert(std::make_pair(0x10a6,"GEORGIAN CAPITAL LETTER ZEN"));
        data.insert(std::make_pair(0x10a7,"GEORGIAN CAPITAL LETTER TAN"));
        data.insert(std::make_pair(0x10a8,"GEORGIAN CAPITAL LETTER IN"));
        data.insert(std::make_pair(0x10a9,"GEORGIAN CAPITAL LETTER KAN"));
        data.insert(std::make_pair(0x10aa,"GEORGIAN CAPITAL LETTER LAS"));
        data.insert(std::make_pair(0x10ab,"GEORGIAN CAPITAL LETTER MAN"));
        data.insert(std::make_pair(0x10ac,"GEORGIAN CAPITAL LETTER NAR"));
        data.insert(std::make_pair(0x10ad,"GEORGIAN CAPITAL LETTER ON"));
        data.insert(std::make_pair(0x10ae,"GEORGIAN CAPITAL LETTER PAR"));
        data.insert(std::make_pair(0x10af,"GEORGIAN CAPITAL LETTER ZHAR"));
        data.insert(std::make_pair(0x10b0,"GEORGIAN CAPITAL LETTER RAE"));
        data.insert(std::make_pair(0x10b1,"GEORGIAN CAPITAL LETTER SAN"));
        data.insert(std::make_pair(0x10b2,"GEORGIAN CAPITAL LETTER TAR"));
        data.insert(std::make_pair(0x10b3,"GEORGIAN CAPITAL LETTER UN"));
        data.insert(std::make_pair(0x10b4,"GEORGIAN CAPITAL LETTER PHAR"));
        data.insert(std::make_pair(0x10b5,"GEORGIAN CAPITAL LETTER KHAR"));
        data.insert(std::make_pair(0x10b6,"GEORGIAN CAPITAL LETTER GHAN"));
        data.insert(std::make_pair(0x10b7,"GEORGIAN CAPITAL LETTER QAR"));
        data.insert(std::make_pair(0x10b8,"GEORGIAN CAPITAL LETTER SHIN"));
        data.insert(std::make_pair(0x10b9,"GEORGIAN CAPITAL LETTER CHIN"));
        data.insert(std::make_pair(0x10ba,"GEORGIAN CAPITAL LETTER CAN"));
        data.insert(std::make_pair(0x10bb,"GEORGIAN CAPITAL LETTER JIL"));
        data.insert(std::make_pair(0x10bc,"GEORGIAN CAPITAL LETTER CIL"));
        data.insert(std::make_pair(0x10bd,"GEORGIAN CAPITAL LETTER CHAR"));
        data.insert(std::make_pair(0x10be,"GEORGIAN CAPITAL LETTER XAN"));
        data.insert(std::make_pair(0x10bf,"GEORGIAN CAPITAL LETTER JHAN"));
        data.insert(std::make_pair(0x10c0,"GEORGIAN CAPITAL LETTER HAE"));
        data.insert(std::make_pair(0x10c1,"GEORGIAN CAPITAL LETTER HE"));
        data.insert(std::make_pair(0x10c2,"GEORGIAN CAPITAL LETTER HIE"));
        data.insert(std::make_pair(0x10c3,"GEORGIAN CAPITAL LETTER WE"));
        data.insert(std::make_pair(0x10c4,"GEORGIAN CAPITAL LETTER HAR"));
        data.insert(std::make_pair(0x10c5,"GEORGIAN CAPITAL LETTER HOE"));
        data.insert(std::make_pair(0x10c7,"GEORGIAN CAPITAL LETTER YN"));
        data.insert(std::make_pair(0x10cd,"GEORGIAN CAPITAL LETTER AEN"));
        data.insert(std::make_pair(0x10d0,"GEORGIAN LETTER AN"));
        data.insert(std::make_pair(0x10d1,"GEORGIAN LETTER BAN"));
        data.insert(std::make_pair(0x10d2,"GEORGIAN LETTER GAN"));
        data.insert(std::make_pair(0x10d3,"GEORGIAN LETTER DON"));
        data.insert(std::make_pair(0x10d4,"GEORGIAN LETTER EN"));
        data.insert(std::make_pair(0x10d5,"GEORGIAN LETTER VIN"));
        data.insert(std::make_pair(0x10d6,"GEORGIAN LETTER ZEN"));
        data.insert(std::make_pair(0x10d7,"GEORGIAN LETTER TAN"));
        data.insert(std::make_pair(0x10d8,"GEORGIAN LETTER IN"));
        data.insert(std::make_pair(0x10d9,"GEORGIAN LETTER KAN"));
        data.insert(std::make_pair(0x10da,"GEORGIAN LETTER LAS"));
        data.insert(std::make_pair(0x10db,"GEORGIAN LETTER MAN"));
        data.insert(std::make_pair(0x10dc,"GEORGIAN LETTER NAR"));
        data.insert(std::make_pair(0x10dd,"GEORGIAN LETTER ON"));
        data.insert(std::make_pair(0x10de,"GEORGIAN LETTER PAR"));
        data.insert(std::make_pair(0x10df,"GEORGIAN LETTER ZHAR"));
        data.insert(std::make_pair(0x10e0,"GEORGIAN LETTER RAE"));
        data.insert(std::make_pair(0x10e1,"GEORGIAN LETTER SAN"));
        data.insert(std::make_pair(0x10e2,"GEORGIAN LETTER TAR"));
        data.insert(std::make_pair(0x10e3,"GEORGIAN LETTER UN"));
        data.insert(std::make_pair(0x10e4,"GEORGIAN LETTER PHAR"));
        data.insert(std::make_pair(0x10e5,"GEORGIAN LETTER KHAR"));
        data.insert(std::make_pair(0x10e6,"GEORGIAN LETTER GHAN"));
        data.insert(std::make_pair(0x10e7,"GEORGIAN LETTER QAR"));
        data.insert(std::make_pair(0x10e8,"GEORGIAN LETTER SHIN"));
        data.insert(std::make_pair(0x10e9,"GEORGIAN LETTER CHIN"));
        data.insert(std::make_pair(0x10ea,"GEORGIAN LETTER CAN"));
        data.insert(std::make_pair(0x10eb,"GEORGIAN LETTER JIL"));
        data.insert(std::make_pair(0x10ec,"GEORGIAN LETTER CIL"));
        data.insert(std::make_pair(0x10ed,"GEORGIAN LETTER CHAR"));
        data.insert(std::make_pair(0x10ee,"GEORGIAN LETTER XAN"));
        data.insert(std::make_pair(0x10ef,"GEORGIAN LETTER JHAN"));
        data.insert(std::make_pair(0x10f0,"GEORGIAN LETTER HAE"));
        data.insert(std::make_pair(0x10f1,"GEORGIAN LETTER HE"));
        data.insert(std::make_pair(0x10f2,"GEORGIAN LETTER HIE"));
        data.insert(std::make_pair(0x10f3,"GEORGIAN LETTER WE"));
        data.insert(std::make_pair(0x10f4,"GEORGIAN LETTER HAR"));
        data.insert(std::make_pair(0x10f5,"GEORGIAN LETTER HOE"));
        data.insert(std::make_pair(0x10f6,"GEORGIAN LETTER FI"));
        data.insert(std::make_pair(0x10f7,"GEORGIAN LETTER YN"));
        data.insert(std::make_pair(0x10f8,"GEORGIAN LETTER ELIFI"));
        data.insert(std::make_pair(0x10f9,"GEORGIAN LETTER TURNED GAN"));
        data.insert(std::make_pair(0x10fa,"GEORGIAN LETTER AIN"));
        data.insert(std::make_pair(0x10fb,"GEORGIAN PARAGRAPH SEPARATOR"));
        data.insert(std::make_pair(0x10fc,"MODIFIER LETTER GEORGIAN NAR"));
        data.insert(std::make_pair(0x10fd,"GEORGIAN LETTER AEN"));
        data.insert(std::make_pair(0x10fe,"GEORGIAN LETTER HARD SIGN"));
        data.insert(std::make_pair(0x10ff,"GEORGIAN LETTER LABIAL SIGN"));
        data.insert(std::make_pair(0x1100,"HANGUL CHOSEONG KIYEOK"));
        data.insert(std::make_pair(0x1101,"HANGUL CHOSEONG SSANGKIYEOK"));
        data.insert(std::make_pair(0x1102,"HANGUL CHOSEONG NIEUN"));
        data.insert(std::make_pair(0x1103,"HANGUL CHOSEONG TIKEUT"));
        data.insert(std::make_pair(0x1104,"HANGUL CHOSEONG SSANGTIKEUT"));
        data.insert(std::make_pair(0x1105,"HANGUL CHOSEONG RIEUL"));
        data.insert(std::make_pair(0x1106,"HANGUL CHOSEONG MIEUM"));
        data.insert(std::make_pair(0x1107,"HANGUL CHOSEONG PIEUP"));
        data.insert(std::make_pair(0x1108,"HANGUL CHOSEONG SSANGPIEUP"));
        data.insert(std::make_pair(0x1109,"HANGUL CHOSEONG SIOS"));
        data.insert(std::make_pair(0x110a,"HANGUL CHOSEONG SSANGSIOS"));
        data.insert(std::make_pair(0x110b,"HANGUL CHOSEONG IEUNG"));
        data.insert(std::make_pair(0x110c,"HANGUL CHOSEONG CIEUC"));
        data.insert(std::make_pair(0x110d,"HANGUL CHOSEONG SSANGCIEUC"));
        data.insert(std::make_pair(0x110e,"HANGUL CHOSEONG CHIEUCH"));
        data.insert(std::make_pair(0x110f,"HANGUL CHOSEONG KHIEUKH"));
        data.insert(std::make_pair(0x1110,"HANGUL CHOSEONG THIEUTH"));
        data.insert(std::make_pair(0x1111,"HANGUL CHOSEONG PHIEUPH"));
        data.insert(std::make_pair(0x1112,"HANGUL CHOSEONG HIEUH"));
        data.insert(std::make_pair(0x1113,"HANGUL CHOSEONG NIEUN-KIYEOK"));
        data.insert(std::make_pair(0x1114,"HANGUL CHOSEONG SSANGNIEUN"));
        data.insert(std::make_pair(0x1115,"HANGUL CHOSEONG NIEUN-TIKEUT"));
        data.insert(std::make_pair(0x1116,"HANGUL CHOSEONG NIEUN-PIEUP"));
        data.insert(std::make_pair(0x1117,"HANGUL CHOSEONG TIKEUT-KIYEOK"));
        data.insert(std::make_pair(0x1118,"HANGUL CHOSEONG RIEUL-NIEUN"));
        data.insert(std::make_pair(0x1119,"HANGUL CHOSEONG SSANGRIEUL"));
        data.insert(std::make_pair(0x111a,"HANGUL CHOSEONG RIEUL-HIEUH"));
        data.insert(std::make_pair(0x111b,"HANGUL CHOSEONG KAPYEOUNRIEUL"));
        data.insert(std::make_pair(0x111c,"HANGUL CHOSEONG MIEUM-PIEUP"));
        data.insert(std::make_pair(0x111d,"HANGUL CHOSEONG KAPYEOUNMIEUM"));
        data.insert(std::make_pair(0x111e,"HANGUL CHOSEONG PIEUP-KIYEOK"));
        data.insert(std::make_pair(0x111f,"HANGUL CHOSEONG PIEUP-NIEUN"));
        data.insert(std::make_pair(0x1120,"HANGUL CHOSEONG PIEUP-TIKEUT"));
        data.insert(std::make_pair(0x1121,"HANGUL CHOSEONG PIEUP-SIOS"));
        data.insert(std::make_pair(0x1122,"HANGUL CHOSEONG PIEUP-SIOS-KIYEOK"));
        data.insert(std::make_pair(0x1123,"HANGUL CHOSEONG PIEUP-SIOS-TIKEUT"));
        data.insert(std::make_pair(0x1124,"HANGUL CHOSEONG PIEUP-SIOS-PIEUP"));
        data.insert(std::make_pair(0x1125,"HANGUL CHOSEONG PIEUP-SSANGSIOS"));
        data.insert(std::make_pair(0x1126,"HANGUL CHOSEONG PIEUP-SIOS-CIEUC"));
        data.insert(std::make_pair(0x1127,"HANGUL CHOSEONG PIEUP-CIEUC"));
        data.insert(std::make_pair(0x1128,"HANGUL CHOSEONG PIEUP-CHIEUCH"));
        data.insert(std::make_pair(0x1129,"HANGUL CHOSEONG PIEUP-THIEUTH"));
        data.insert(std::make_pair(0x112a,"HANGUL CHOSEONG PIEUP-PHIEUPH"));
        data.insert(std::make_pair(0x112b,"HANGUL CHOSEONG KAPYEOUNPIEUP"));
        data.insert(std::make_pair(0x112c,"HANGUL CHOSEONG KAPYEOUNSSANGPIEUP"));
        data.insert(std::make_pair(0x112d,"HANGUL CHOSEONG SIOS-KIYEOK"));
        data.insert(std::make_pair(0x112e,"HANGUL CHOSEONG SIOS-NIEUN"));
        data.insert(std::make_pair(0x112f,"HANGUL CHOSEONG SIOS-TIKEUT"));
        data.insert(std::make_pair(0x1130,"HANGUL CHOSEONG SIOS-RIEUL"));
        data.insert(std::make_pair(0x1131,"HANGUL CHOSEONG SIOS-MIEUM"));
        data.insert(std::make_pair(0x1132,"HANGUL CHOSEONG SIOS-PIEUP"));
        data.insert(std::make_pair(0x1133,"HANGUL CHOSEONG SIOS-PIEUP-KIYEOK"));
        data.insert(std::make_pair(0x1134,"HANGUL CHOSEONG SIOS-SSANGSIOS"));
        data.insert(std::make_pair(0x1135,"HANGUL CHOSEONG SIOS-IEUNG"));
        data.insert(std::make_pair(0x1136,"HANGUL CHOSEONG SIOS-CIEUC"));
        data.insert(std::make_pair(0x1137,"HANGUL CHOSEONG SIOS-CHIEUCH"));
        data.insert(std::make_pair(0x1138,"HANGUL CHOSEONG SIOS-KHIEUKH"));
        data.insert(std::make_pair(0x1139,"HANGUL CHOSEONG SIOS-THIEUTH"));
        data.insert(std::make_pair(0x113a,"HANGUL CHOSEONG SIOS-PHIEUPH"));
        data.insert(std::make_pair(0x113b,"HANGUL CHOSEONG SIOS-HIEUH"));
        data.insert(std::make_pair(0x113c,"HANGUL CHOSEONG CHITUEUMSIOS"));
        data.insert(std::make_pair(0x113d,"HANGUL CHOSEONG CHITUEUMSSANGSIOS"));
        data.insert(std::make_pair(0x113e,"HANGUL CHOSEONG CEONGCHIEUMSIOS"));
        data.insert(std::make_pair(0x113f,"HANGUL CHOSEONG CEONGCHIEUMSSANGSIOS"));
        data.insert(std::make_pair(0x1140,"HANGUL CHOSEONG PANSIOS"));
        data.insert(std::make_pair(0x1141,"HANGUL CHOSEONG IEUNG-KIYEOK"));
        data.insert(std::make_pair(0x1142,"HANGUL CHOSEONG IEUNG-TIKEUT"));
        data.insert(std::make_pair(0x1143,"HANGUL CHOSEONG IEUNG-MIEUM"));
        data.insert(std::make_pair(0x1144,"HANGUL CHOSEONG IEUNG-PIEUP"));
        data.insert(std::make_pair(0x1145,"HANGUL CHOSEONG IEUNG-SIOS"));
        data.insert(std::make_pair(0x1146,"HANGUL CHOSEONG IEUNG-PANSIOS"));
        data.insert(std::make_pair(0x1147,"HANGUL CHOSEONG SSANGIEUNG"));
        data.insert(std::make_pair(0x1148,"HANGUL CHOSEONG IEUNG-CIEUC"));
        data.insert(std::make_pair(0x1149,"HANGUL CHOSEONG IEUNG-CHIEUCH"));
        data.insert(std::make_pair(0x114a,"HANGUL CHOSEONG IEUNG-THIEUTH"));
        data.insert(std::make_pair(0x114b,"HANGUL CHOSEONG IEUNG-PHIEUPH"));
        data.insert(std::make_pair(0x114c,"HANGUL CHOSEONG YESIEUNG"));
        data.insert(std::make_pair(0x114d,"HANGUL CHOSEONG CIEUC-IEUNG"));
        data.insert(std::make_pair(0x114e,"HANGUL CHOSEONG CHITUEUMCIEUC"));
        data.insert(std::make_pair(0x114f,"HANGUL CHOSEONG CHITUEUMSSANGCIEUC"));
        data.insert(std::make_pair(0x1150,"HANGUL CHOSEONG CEONGCHIEUMCIEUC"));
        data.insert(std::make_pair(0x1151,"HANGUL CHOSEONG CEONGCHIEUMSSANGCIEUC"));
        data.insert(std::make_pair(0x1152,"HANGUL CHOSEONG CHIEUCH-KHIEUKH"));
        data.insert(std::make_pair(0x1153,"HANGUL CHOSEONG CHIEUCH-HIEUH"));
        data.insert(std::make_pair(0x1154,"HANGUL CHOSEONG CHITUEUMCHIEUCH"));
        data.insert(std::make_pair(0x1155,"HANGUL CHOSEONG CEONGCHIEUMCHIEUCH"));
        data.insert(std::make_pair(0x1156,"HANGUL CHOSEONG PHIEUPH-PIEUP"));
        data.insert(std::make_pair(0x1157,"HANGUL CHOSEONG KAPYEOUNPHIEUPH"));
        data.insert(std::make_pair(0x1158,"HANGUL CHOSEONG SSANGHIEUH"));
        data.insert(std::make_pair(0x1159,"HANGUL CHOSEONG YEORINHIEUH"));
        data.insert(std::make_pair(0x115a,"HANGUL CHOSEONG KIYEOK-TIKEUT"));
        data.insert(std::make_pair(0x115b,"HANGUL CHOSEONG NIEUN-SIOS"));
        data.insert(std::make_pair(0x115c,"HANGUL CHOSEONG NIEUN-CIEUC"));
        data.insert(std::make_pair(0x115d,"HANGUL CHOSEONG NIEUN-HIEUH"));
        data.insert(std::make_pair(0x115e,"HANGUL CHOSEONG TIKEUT-RIEUL"));
        data.insert(std::make_pair(0x115f,"HANGUL CHOSEONG FILLER"));
        data.insert(std::make_pair(0x1160,"HANGUL JUNGSEONG FILLER"));
        data.insert(std::make_pair(0x1161,"HANGUL JUNGSEONG A"));
        data.insert(std::make_pair(0x1162,"HANGUL JUNGSEONG AE"));
        data.insert(std::make_pair(0x1163,"HANGUL JUNGSEONG YA"));
        data.insert(std::make_pair(0x1164,"HANGUL JUNGSEONG YAE"));
        data.insert(std::make_pair(0x1165,"HANGUL JUNGSEONG EO"));
        data.insert(std::make_pair(0x1166,"HANGUL JUNGSEONG E"));
        data.insert(std::make_pair(0x1167,"HANGUL JUNGSEONG YEO"));
        data.insert(std::make_pair(0x1168,"HANGUL JUNGSEONG YE"));
        data.insert(std::make_pair(0x1169,"HANGUL JUNGSEONG O"));
        data.insert(std::make_pair(0x116a,"HANGUL JUNGSEONG WA"));
        data.insert(std::make_pair(0x116b,"HANGUL JUNGSEONG WAE"));
        data.insert(std::make_pair(0x116c,"HANGUL JUNGSEONG OE"));
        data.insert(std::make_pair(0x116d,"HANGUL JUNGSEONG YO"));
        data.insert(std::make_pair(0x116e,"HANGUL JUNGSEONG U"));
        data.insert(std::make_pair(0x116f,"HANGUL JUNGSEONG WEO"));
        data.insert(std::make_pair(0x1170,"HANGUL JUNGSEONG WE"));
        data.insert(std::make_pair(0x1171,"HANGUL JUNGSEONG WI"));
        data.insert(std::make_pair(0x1172,"HANGUL JUNGSEONG YU"));
        data.insert(std::make_pair(0x1173,"HANGUL JUNGSEONG EU"));
        data.insert(std::make_pair(0x1174,"HANGUL JUNGSEONG YI"));
        data.insert(std::make_pair(0x1175,"HANGUL JUNGSEONG I"));
        data.insert(std::make_pair(0x1176,"HANGUL JUNGSEONG A-O"));
        data.insert(std::make_pair(0x1177,"HANGUL JUNGSEONG A-U"));
        data.insert(std::make_pair(0x1178,"HANGUL JUNGSEONG YA-O"));
        data.insert(std::make_pair(0x1179,"HANGUL JUNGSEONG YA-YO"));
        data.insert(std::make_pair(0x117a,"HANGUL JUNGSEONG EO-O"));
        data.insert(std::make_pair(0x117b,"HANGUL JUNGSEONG EO-U"));
        data.insert(std::make_pair(0x117c,"HANGUL JUNGSEONG EO-EU"));
        data.insert(std::make_pair(0x117d,"HANGUL JUNGSEONG YEO-O"));
        data.insert(std::make_pair(0x117e,"HANGUL JUNGSEONG YEO-U"));
        data.insert(std::make_pair(0x117f,"HANGUL JUNGSEONG O-EO"));
        data.insert(std::make_pair(0x1180,"HANGUL JUNGSEONG O-E"));
        data.insert(std::make_pair(0x1181,"HANGUL JUNGSEONG O-YE"));
        data.insert(std::make_pair(0x1182,"HANGUL JUNGSEONG O-O"));
        data.insert(std::make_pair(0x1183,"HANGUL JUNGSEONG O-U"));
        data.insert(std::make_pair(0x1184,"HANGUL JUNGSEONG YO-YA"));
        data.insert(std::make_pair(0x1185,"HANGUL JUNGSEONG YO-YAE"));
        data.insert(std::make_pair(0x1186,"HANGUL JUNGSEONG YO-YEO"));
        data.insert(std::make_pair(0x1187,"HANGUL JUNGSEONG YO-O"));
        data.insert(std::make_pair(0x1188,"HANGUL JUNGSEONG YO-I"));
        data.insert(std::make_pair(0x1189,"HANGUL JUNGSEONG U-A"));
        data.insert(std::make_pair(0x118a,"HANGUL JUNGSEONG U-AE"));
        data.insert(std::make_pair(0x118b,"HANGUL JUNGSEONG U-EO-EU"));
        data.insert(std::make_pair(0x118c,"HANGUL JUNGSEONG U-YE"));
        data.insert(std::make_pair(0x118d,"HANGUL JUNGSEONG U-U"));
        data.insert(std::make_pair(0x118e,"HANGUL JUNGSEONG YU-A"));
        data.insert(std::make_pair(0x118f,"HANGUL JUNGSEONG YU-EO"));
        data.insert(std::make_pair(0x1190,"HANGUL JUNGSEONG YU-E"));
        data.insert(std::make_pair(0x1191,"HANGUL JUNGSEONG YU-YEO"));
        data.insert(std::make_pair(0x1192,"HANGUL JUNGSEONG YU-YE"));
        data.insert(std::make_pair(0x1193,"HANGUL JUNGSEONG YU-U"));
        data.insert(std::make_pair(0x1194,"HANGUL JUNGSEONG YU-I"));
        data.insert(std::make_pair(0x1195,"HANGUL JUNGSEONG EU-U"));
        data.insert(std::make_pair(0x1196,"HANGUL JUNGSEONG EU-EU"));
        data.insert(std::make_pair(0x1197,"HANGUL JUNGSEONG YI-U"));
        data.insert(std::make_pair(0x1198,"HANGUL JUNGSEONG I-A"));
        data.insert(std::make_pair(0x1199,"HANGUL JUNGSEONG I-YA"));
        data.insert(std::make_pair(0x119a,"HANGUL JUNGSEONG I-O"));
        data.insert(std::make_pair(0x119b,"HANGUL JUNGSEONG I-U"));
        data.insert(std::make_pair(0x119c,"HANGUL JUNGSEONG I-EU"));
        data.insert(std::make_pair(0x119d,"HANGUL JUNGSEONG I-ARAEA"));
        data.insert(std::make_pair(0x119e,"HANGUL JUNGSEONG ARAEA"));
        data.insert(std::make_pair(0x119f,"HANGUL JUNGSEONG ARAEA-EO"));
        data.insert(std::make_pair(0x11a0,"HANGUL JUNGSEONG ARAEA-U"));
        data.insert(std::make_pair(0x11a1,"HANGUL JUNGSEONG ARAEA-I"));
        data.insert(std::make_pair(0x11a2,"HANGUL JUNGSEONG SSANGARAEA"));
        data.insert(std::make_pair(0x11a3,"HANGUL JUNGSEONG A-EU"));
        data.insert(std::make_pair(0x11a4,"HANGUL JUNGSEONG YA-U"));
        data.insert(std::make_pair(0x11a5,"HANGUL JUNGSEONG YEO-YA"));
        data.insert(std::make_pair(0x11a6,"HANGUL JUNGSEONG O-YA"));
        data.insert(std::make_pair(0x11a7,"HANGUL JUNGSEONG O-YAE"));
        data.insert(std::make_pair(0x11a8,"HANGUL JONGSEONG KIYEOK"));
        data.insert(std::make_pair(0x11a9,"HANGUL JONGSEONG SSANGKIYEOK"));
        data.insert(std::make_pair(0x11aa,"HANGUL JONGSEONG KIYEOK-SIOS"));
        data.insert(std::make_pair(0x11ab,"HANGUL JONGSEONG NIEUN"));
        data.insert(std::make_pair(0x11ac,"HANGUL JONGSEONG NIEUN-CIEUC"));
        data.insert(std::make_pair(0x11ad,"HANGUL JONGSEONG NIEUN-HIEUH"));
        data.insert(std::make_pair(0x11ae,"HANGUL JONGSEONG TIKEUT"));
        data.insert(std::make_pair(0x11af,"HANGUL JONGSEONG RIEUL"));
        data.insert(std::make_pair(0x11b0,"HANGUL JONGSEONG RIEUL-KIYEOK"));
        data.insert(std::make_pair(0x11b1,"HANGUL JONGSEONG RIEUL-MIEUM"));
        data.insert(std::make_pair(0x11b2,"HANGUL JONGSEONG RIEUL-PIEUP"));
        data.insert(std::make_pair(0x11b3,"HANGUL JONGSEONG RIEUL-SIOS"));
        data.insert(std::make_pair(0x11b4,"HANGUL JONGSEONG RIEUL-THIEUTH"));
        data.insert(std::make_pair(0x11b5,"HANGUL JONGSEONG RIEUL-PHIEUPH"));
        data.insert(std::make_pair(0x11b6,"HANGUL JONGSEONG RIEUL-HIEUH"));
        data.insert(std::make_pair(0x11b7,"HANGUL JONGSEONG MIEUM"));
        data.insert(std::make_pair(0x11b8,"HANGUL JONGSEONG PIEUP"));
        data.insert(std::make_pair(0x11b9,"HANGUL JONGSEONG PIEUP-SIOS"));
        data.insert(std::make_pair(0x11ba,"HANGUL JONGSEONG SIOS"));
        data.insert(std::make_pair(0x11bb,"HANGUL JONGSEONG SSANGSIOS"));
        data.insert(std::make_pair(0x11bc,"HANGUL JONGSEONG IEUNG"));
        data.insert(std::make_pair(0x11bd,"HANGUL JONGSEONG CIEUC"));
        data.insert(std::make_pair(0x11be,"HANGUL JONGSEONG CHIEUCH"));
        data.insert(std::make_pair(0x11bf,"HANGUL JONGSEONG KHIEUKH"));
        data.insert(std::make_pair(0x11c0,"HANGUL JONGSEONG THIEUTH"));
        data.insert(std::make_pair(0x11c1,"HANGUL JONGSEONG PHIEUPH"));
        data.insert(std::make_pair(0x11c2,"HANGUL JONGSEONG HIEUH"));
        data.insert(std::make_pair(0x11c3,"HANGUL JONGSEONG KIYEOK-RIEUL"));
        data.insert(std::make_pair(0x11c4,"HANGUL JONGSEONG KIYEOK-SIOS-KIYEOK"));
        data.insert(std::make_pair(0x11c5,"HANGUL JONGSEONG NIEUN-KIYEOK"));
        data.insert(std::make_pair(0x11c6,"HANGUL JONGSEONG NIEUN-TIKEUT"));
        data.insert(std::make_pair(0x11c7,"HANGUL JONGSEONG NIEUN-SIOS"));
        data.insert(std::make_pair(0x11c8,"HANGUL JONGSEONG NIEUN-PANSIOS"));
        data.insert(std::make_pair(0x11c9,"HANGUL JONGSEONG NIEUN-THIEUTH"));
        data.insert(std::make_pair(0x11ca,"HANGUL JONGSEONG TIKEUT-KIYEOK"));
        data.insert(std::make_pair(0x11cb,"HANGUL JONGSEONG TIKEUT-RIEUL"));
        data.insert(std::make_pair(0x11cc,"HANGUL JONGSEONG RIEUL-KIYEOK-SIOS"));
        data.insert(std::make_pair(0x11cd,"HANGUL JONGSEONG RIEUL-NIEUN"));
        data.insert(std::make_pair(0x11ce,"HANGUL JONGSEONG RIEUL-TIKEUT"));
        data.insert(std::make_pair(0x11cf,"HANGUL JONGSEONG RIEUL-TIKEUT-HIEUH"));
        data.insert(std::make_pair(0x11d0,"HANGUL JONGSEONG SSANGRIEUL"));
        data.insert(std::make_pair(0x11d1,"HANGUL JONGSEONG RIEUL-MIEUM-KIYEOK"));
        data.insert(std::make_pair(0x11d2,"HANGUL JONGSEONG RIEUL-MIEUM-SIOS"));
        data.insert(std::make_pair(0x11d3,"HANGUL JONGSEONG RIEUL-PIEUP-SIOS"));
        data.insert(std::make_pair(0x11d4,"HANGUL JONGSEONG RIEUL-PIEUP-HIEUH"));
        data.insert(std::make_pair(0x11d5,"HANGUL JONGSEONG RIEUL-KAPYEOUNPIEUP"));
        data.insert(std::make_pair(0x11d6,"HANGUL JONGSEONG RIEUL-SSANGSIOS"));
        data.insert(std::make_pair(0x11d7,"HANGUL JONGSEONG RIEUL-PANSIOS"));
        data.insert(std::make_pair(0x11d8,"HANGUL JONGSEONG RIEUL-KHIEUKH"));
        data.insert(std::make_pair(0x11d9,"HANGUL JONGSEONG RIEUL-YEORINHIEUH"));
        data.insert(std::make_pair(0x11da,"HANGUL JONGSEONG MIEUM-KIYEOK"));
        data.insert(std::make_pair(0x11db,"HANGUL JONGSEONG MIEUM-RIEUL"));
        data.insert(std::make_pair(0x11dc,"HANGUL JONGSEONG MIEUM-PIEUP"));
        data.insert(std::make_pair(0x11dd,"HANGUL JONGSEONG MIEUM-SIOS"));
        data.insert(std::make_pair(0x11de,"HANGUL JONGSEONG MIEUM-SSANGSIOS"));
        data.insert(std::make_pair(0x11df,"HANGUL JONGSEONG MIEUM-PANSIOS"));
        data.insert(std::make_pair(0x11e0,"HANGUL JONGSEONG MIEUM-CHIEUCH"));
        data.insert(std::make_pair(0x11e1,"HANGUL JONGSEONG MIEUM-HIEUH"));
        data.insert(std::make_pair(0x11e2,"HANGUL JONGSEONG KAPYEOUNMIEUM"));
        data.insert(std::make_pair(0x11e3,"HANGUL JONGSEONG PIEUP-RIEUL"));
        data.insert(std::make_pair(0x11e4,"HANGUL JONGSEONG PIEUP-PHIEUPH"));
        data.insert(std::make_pair(0x11e5,"HANGUL JONGSEONG PIEUP-HIEUH"));
        data.insert(std::make_pair(0x11e6,"HANGUL JONGSEONG KAPYEOUNPIEUP"));
        data.insert(std::make_pair(0x11e7,"HANGUL JONGSEONG SIOS-KIYEOK"));
        data.insert(std::make_pair(0x11e8,"HANGUL JONGSEONG SIOS-TIKEUT"));
        data.insert(std::make_pair(0x11e9,"HANGUL JONGSEONG SIOS-RIEUL"));
        data.insert(std::make_pair(0x11ea,"HANGUL JONGSEONG SIOS-PIEUP"));
        data.insert(std::make_pair(0x11eb,"HANGUL JONGSEONG PANSIOS"));
        data.insert(std::make_pair(0x11ec,"HANGUL JONGSEONG IEUNG-KIYEOK"));
        data.insert(std::make_pair(0x11ed,"HANGUL JONGSEONG IEUNG-SSANGKIYEOK"));
        data.insert(std::make_pair(0x11ee,"HANGUL JONGSEONG SSANGIEUNG"));
        data.insert(std::make_pair(0x11ef,"HANGUL JONGSEONG IEUNG-KHIEUKH"));
        data.insert(std::make_pair(0x11f0,"HANGUL JONGSEONG YESIEUNG"));
        data.insert(std::make_pair(0x11f1,"HANGUL JONGSEONG YESIEUNG-SIOS"));
        data.insert(std::make_pair(0x11f2,"HANGUL JONGSEONG YESIEUNG-PANSIOS"));
        data.insert(std::make_pair(0x11f3,"HANGUL JONGSEONG PHIEUPH-PIEUP"));
        data.insert(std::make_pair(0x11f4,"HANGUL JONGSEONG KAPYEOUNPHIEUPH"));
        data.insert(std::make_pair(0x11f5,"HANGUL JONGSEONG HIEUH-NIEUN"));
        data.insert(std::make_pair(0x11f6,"HANGUL JONGSEONG HIEUH-RIEUL"));
        data.insert(std::make_pair(0x11f7,"HANGUL JONGSEONG HIEUH-MIEUM"));
        data.insert(std::make_pair(0x11f8,"HANGUL JONGSEONG HIEUH-PIEUP"));
        data.insert(std::make_pair(0x11f9,"HANGUL JONGSEONG YEORINHIEUH"));
        data.insert(std::make_pair(0x11fa,"HANGUL JONGSEONG KIYEOK-NIEUN"));
        data.insert(std::make_pair(0x11fb,"HANGUL JONGSEONG KIYEOK-PIEUP"));
        data.insert(std::make_pair(0x11fc,"HANGUL JONGSEONG KIYEOK-CHIEUCH"));
        data.insert(std::make_pair(0x11fd,"HANGUL JONGSEONG KIYEOK-KHIEUKH"));
        data.insert(std::make_pair(0x11fe,"HANGUL JONGSEONG KIYEOK-HIEUH"));
        data.insert(std::make_pair(0x11ff,"HANGUL JONGSEONG SSANGNIEUN"));
        data.insert(std::make_pair(0x1200,"ETHIOPIC SYLLABLE HA"));
        data.insert(std::make_pair(0x1201,"ETHIOPIC SYLLABLE HU"));
        data.insert(std::make_pair(0x1202,"ETHIOPIC SYLLABLE HI"));
        data.insert(std::make_pair(0x1203,"ETHIOPIC SYLLABLE HAA"));
        data.insert(std::make_pair(0x1204,"ETHIOPIC SYLLABLE HEE"));
        data.insert(std::make_pair(0x1205,"ETHIOPIC SYLLABLE HE"));
        data.insert(std::make_pair(0x1206,"ETHIOPIC SYLLABLE HO"));
        data.insert(std::make_pair(0x1207,"ETHIOPIC SYLLABLE HOA"));
        data.insert(std::make_pair(0x1208,"ETHIOPIC SYLLABLE LA"));
        data.insert(std::make_pair(0x1209,"ETHIOPIC SYLLABLE LU"));
        data.insert(std::make_pair(0x120a,"ETHIOPIC SYLLABLE LI"));
        data.insert(std::make_pair(0x120b,"ETHIOPIC SYLLABLE LAA"));
        data.insert(std::make_pair(0x120c,"ETHIOPIC SYLLABLE LEE"));
        data.insert(std::make_pair(0x120d,"ETHIOPIC SYLLABLE LE"));
        data.insert(std::make_pair(0x120e,"ETHIOPIC SYLLABLE LO"));
        data.insert(std::make_pair(0x120f,"ETHIOPIC SYLLABLE LWA"));
        data.insert(std::make_pair(0x1210,"ETHIOPIC SYLLABLE HHA"));
        data.insert(std::make_pair(0x1211,"ETHIOPIC SYLLABLE HHU"));
        data.insert(std::make_pair(0x1212,"ETHIOPIC SYLLABLE HHI"));
        data.insert(std::make_pair(0x1213,"ETHIOPIC SYLLABLE HHAA"));
        data.insert(std::make_pair(0x1214,"ETHIOPIC SYLLABLE HHEE"));
        data.insert(std::make_pair(0x1215,"ETHIOPIC SYLLABLE HHE"));
        data.insert(std::make_pair(0x1216,"ETHIOPIC SYLLABLE HHO"));
        data.insert(std::make_pair(0x1217,"ETHIOPIC SYLLABLE HHWA"));
        data.insert(std::make_pair(0x1218,"ETHIOPIC SYLLABLE MA"));
        data.insert(std::make_pair(0x1219,"ETHIOPIC SYLLABLE MU"));
        data.insert(std::make_pair(0x121a,"ETHIOPIC SYLLABLE MI"));
        data.insert(std::make_pair(0x121b,"ETHIOPIC SYLLABLE MAA"));
        data.insert(std::make_pair(0x121c,"ETHIOPIC SYLLABLE MEE"));
        data.insert(std::make_pair(0x121d,"ETHIOPIC SYLLABLE ME"));
        data.insert(std::make_pair(0x121e,"ETHIOPIC SYLLABLE MO"));
        data.insert(std::make_pair(0x121f,"ETHIOPIC SYLLABLE MWA"));
        data.insert(std::make_pair(0x1220,"ETHIOPIC SYLLABLE SZA"));
        data.insert(std::make_pair(0x1221,"ETHIOPIC SYLLABLE SZU"));
        data.insert(std::make_pair(0x1222,"ETHIOPIC SYLLABLE SZI"));
        data.insert(std::make_pair(0x1223,"ETHIOPIC SYLLABLE SZAA"));
        data.insert(std::make_pair(0x1224,"ETHIOPIC SYLLABLE SZEE"));
        data.insert(std::make_pair(0x1225,"ETHIOPIC SYLLABLE SZE"));
        data.insert(std::make_pair(0x1226,"ETHIOPIC SYLLABLE SZO"));
        data.insert(std::make_pair(0x1227,"ETHIOPIC SYLLABLE SZWA"));
        data.insert(std::make_pair(0x1228,"ETHIOPIC SYLLABLE RA"));
        data.insert(std::make_pair(0x1229,"ETHIOPIC SYLLABLE RU"));
        data.insert(std::make_pair(0x122a,"ETHIOPIC SYLLABLE RI"));
        data.insert(std::make_pair(0x122b,"ETHIOPIC SYLLABLE RAA"));
        data.insert(std::make_pair(0x122c,"ETHIOPIC SYLLABLE REE"));
        data.insert(std::make_pair(0x122d,"ETHIOPIC SYLLABLE RE"));
        data.insert(std::make_pair(0x122e,"ETHIOPIC SYLLABLE RO"));
        data.insert(std::make_pair(0x122f,"ETHIOPIC SYLLABLE RWA"));
        data.insert(std::make_pair(0x1230,"ETHIOPIC SYLLABLE SA"));
        data.insert(std::make_pair(0x1231,"ETHIOPIC SYLLABLE SU"));
        data.insert(std::make_pair(0x1232,"ETHIOPIC SYLLABLE SI"));
        data.insert(std::make_pair(0x1233,"ETHIOPIC SYLLABLE SAA"));
        data.insert(std::make_pair(0x1234,"ETHIOPIC SYLLABLE SEE"));
        data.insert(std::make_pair(0x1235,"ETHIOPIC SYLLABLE SE"));
        data.insert(std::make_pair(0x1236,"ETHIOPIC SYLLABLE SO"));
        data.insert(std::make_pair(0x1237,"ETHIOPIC SYLLABLE SWA"));
        data.insert(std::make_pair(0x1238,"ETHIOPIC SYLLABLE SHA"));
        data.insert(std::make_pair(0x1239,"ETHIOPIC SYLLABLE SHU"));
        data.insert(std::make_pair(0x123a,"ETHIOPIC SYLLABLE SHI"));
        data.insert(std::make_pair(0x123b,"ETHIOPIC SYLLABLE SHAA"));
        data.insert(std::make_pair(0x123c,"ETHIOPIC SYLLABLE SHEE"));
        data.insert(std::make_pair(0x123d,"ETHIOPIC SYLLABLE SHE"));
        data.insert(std::make_pair(0x123e,"ETHIOPIC SYLLABLE SHO"));
        data.insert(std::make_pair(0x123f,"ETHIOPIC SYLLABLE SHWA"));
        data.insert(std::make_pair(0x1240,"ETHIOPIC SYLLABLE QA"));
        data.insert(std::make_pair(0x1241,"ETHIOPIC SYLLABLE QU"));
        data.insert(std::make_pair(0x1242,"ETHIOPIC SYLLABLE QI"));
        data.insert(std::make_pair(0x1243,"ETHIOPIC SYLLABLE QAA"));
        data.insert(std::make_pair(0x1244,"ETHIOPIC SYLLABLE QEE"));
        data.insert(std::make_pair(0x1245,"ETHIOPIC SYLLABLE QE"));
        data.insert(std::make_pair(0x1246,"ETHIOPIC SYLLABLE QO"));
        data.insert(std::make_pair(0x1247,"ETHIOPIC SYLLABLE QOA"));
        data.insert(std::make_pair(0x1248,"ETHIOPIC SYLLABLE QWA"));
        data.insert(std::make_pair(0x124a,"ETHIOPIC SYLLABLE QWI"));
        data.insert(std::make_pair(0x124b,"ETHIOPIC SYLLABLE QWAA"));
        data.insert(std::make_pair(0x124c,"ETHIOPIC SYLLABLE QWEE"));
        data.insert(std::make_pair(0x124d,"ETHIOPIC SYLLABLE QWE"));
        data.insert(std::make_pair(0x1250,"ETHIOPIC SYLLABLE QHA"));
        data.insert(std::make_pair(0x1251,"ETHIOPIC SYLLABLE QHU"));
        data.insert(std::make_pair(0x1252,"ETHIOPIC SYLLABLE QHI"));
        data.insert(std::make_pair(0x1253,"ETHIOPIC SYLLABLE QHAA"));
        data.insert(std::make_pair(0x1254,"ETHIOPIC SYLLABLE QHEE"));
        data.insert(std::make_pair(0x1255,"ETHIOPIC SYLLABLE QHE"));
        data.insert(std::make_pair(0x1256,"ETHIOPIC SYLLABLE QHO"));
        data.insert(std::make_pair(0x1258,"ETHIOPIC SYLLABLE QHWA"));
        data.insert(std::make_pair(0x125a,"ETHIOPIC SYLLABLE QHWI"));
        data.insert(std::make_pair(0x125b,"ETHIOPIC SYLLABLE QHWAA"));
        data.insert(std::make_pair(0x125c,"ETHIOPIC SYLLABLE QHWEE"));
        data.insert(std::make_pair(0x125d,"ETHIOPIC SYLLABLE QHWE"));
        data.insert(std::make_pair(0x1260,"ETHIOPIC SYLLABLE BA"));
        data.insert(std::make_pair(0x1261,"ETHIOPIC SYLLABLE BU"));
        data.insert(std::make_pair(0x1262,"ETHIOPIC SYLLABLE BI"));
        data.insert(std::make_pair(0x1263,"ETHIOPIC SYLLABLE BAA"));
        data.insert(std::make_pair(0x1264,"ETHIOPIC SYLLABLE BEE"));
        data.insert(std::make_pair(0x1265,"ETHIOPIC SYLLABLE BE"));
        data.insert(std::make_pair(0x1266,"ETHIOPIC SYLLABLE BO"));
        data.insert(std::make_pair(0x1267,"ETHIOPIC SYLLABLE BWA"));
        data.insert(std::make_pair(0x1268,"ETHIOPIC SYLLABLE VA"));
        data.insert(std::make_pair(0x1269,"ETHIOPIC SYLLABLE VU"));
        data.insert(std::make_pair(0x126a,"ETHIOPIC SYLLABLE VI"));
        data.insert(std::make_pair(0x126b,"ETHIOPIC SYLLABLE VAA"));
        data.insert(std::make_pair(0x126c,"ETHIOPIC SYLLABLE VEE"));
        data.insert(std::make_pair(0x126d,"ETHIOPIC SYLLABLE VE"));
        data.insert(std::make_pair(0x126e,"ETHIOPIC SYLLABLE VO"));
        data.insert(std::make_pair(0x126f,"ETHIOPIC SYLLABLE VWA"));
        data.insert(std::make_pair(0x1270,"ETHIOPIC SYLLABLE TA"));
        data.insert(std::make_pair(0x1271,"ETHIOPIC SYLLABLE TU"));
        data.insert(std::make_pair(0x1272,"ETHIOPIC SYLLABLE TI"));
        data.insert(std::make_pair(0x1273,"ETHIOPIC SYLLABLE TAA"));
        data.insert(std::make_pair(0x1274,"ETHIOPIC SYLLABLE TEE"));
        data.insert(std::make_pair(0x1275,"ETHIOPIC SYLLABLE TE"));
        data.insert(std::make_pair(0x1276,"ETHIOPIC SYLLABLE TO"));
        data.insert(std::make_pair(0x1277,"ETHIOPIC SYLLABLE TWA"));
        data.insert(std::make_pair(0x1278,"ETHIOPIC SYLLABLE CA"));
        data.insert(std::make_pair(0x1279,"ETHIOPIC SYLLABLE CU"));
        data.insert(std::make_pair(0x127a,"ETHIOPIC SYLLABLE CI"));
        data.insert(std::make_pair(0x127b,"ETHIOPIC SYLLABLE CAA"));
        data.insert(std::make_pair(0x127c,"ETHIOPIC SYLLABLE CEE"));
        data.insert(std::make_pair(0x127d,"ETHIOPIC SYLLABLE CE"));
        data.insert(std::make_pair(0x127e,"ETHIOPIC SYLLABLE CO"));
        data.insert(std::make_pair(0x127f,"ETHIOPIC SYLLABLE CWA"));
        data.insert(std::make_pair(0x1280,"ETHIOPIC SYLLABLE XA"));
        data.insert(std::make_pair(0x1281,"ETHIOPIC SYLLABLE XU"));
        data.insert(std::make_pair(0x1282,"ETHIOPIC SYLLABLE XI"));
        data.insert(std::make_pair(0x1283,"ETHIOPIC SYLLABLE XAA"));
        data.insert(std::make_pair(0x1284,"ETHIOPIC SYLLABLE XEE"));
        data.insert(std::make_pair(0x1285,"ETHIOPIC SYLLABLE XE"));
        data.insert(std::make_pair(0x1286,"ETHIOPIC SYLLABLE XO"));
        data.insert(std::make_pair(0x1287,"ETHIOPIC SYLLABLE XOA"));
        data.insert(std::make_pair(0x1288,"ETHIOPIC SYLLABLE XWA"));
        data.insert(std::make_pair(0x128a,"ETHIOPIC SYLLABLE XWI"));
        data.insert(std::make_pair(0x128b,"ETHIOPIC SYLLABLE XWAA"));
        data.insert(std::make_pair(0x128c,"ETHIOPIC SYLLABLE XWEE"));
        data.insert(std::make_pair(0x128d,"ETHIOPIC SYLLABLE XWE"));
        data.insert(std::make_pair(0x1290,"ETHIOPIC SYLLABLE NA"));
        data.insert(std::make_pair(0x1291,"ETHIOPIC SYLLABLE NU"));
        data.insert(std::make_pair(0x1292,"ETHIOPIC SYLLABLE NI"));
        data.insert(std::make_pair(0x1293,"ETHIOPIC SYLLABLE NAA"));
        data.insert(std::make_pair(0x1294,"ETHIOPIC SYLLABLE NEE"));
        data.insert(std::make_pair(0x1295,"ETHIOPIC SYLLABLE NE"));
        data.insert(std::make_pair(0x1296,"ETHIOPIC SYLLABLE NO"));
        data.insert(std::make_pair(0x1297,"ETHIOPIC SYLLABLE NWA"));
        data.insert(std::make_pair(0x1298,"ETHIOPIC SYLLABLE NYA"));
        data.insert(std::make_pair(0x1299,"ETHIOPIC SYLLABLE NYU"));
        data.insert(std::make_pair(0x129a,"ETHIOPIC SYLLABLE NYI"));
        data.insert(std::make_pair(0x129b,"ETHIOPIC SYLLABLE NYAA"));
        data.insert(std::make_pair(0x129c,"ETHIOPIC SYLLABLE NYEE"));
        data.insert(std::make_pair(0x129d,"ETHIOPIC SYLLABLE NYE"));
        data.insert(std::make_pair(0x129e,"ETHIOPIC SYLLABLE NYO"));
        data.insert(std::make_pair(0x129f,"ETHIOPIC SYLLABLE NYWA"));
        data.insert(std::make_pair(0x12a0,"ETHIOPIC SYLLABLE GLOTTAL A"));
        data.insert(std::make_pair(0x12a1,"ETHIOPIC SYLLABLE GLOTTAL U"));
        data.insert(std::make_pair(0x12a2,"ETHIOPIC SYLLABLE GLOTTAL I"));
        data.insert(std::make_pair(0x12a3,"ETHIOPIC SYLLABLE GLOTTAL AA"));
        data.insert(std::make_pair(0x12a4,"ETHIOPIC SYLLABLE GLOTTAL EE"));
        data.insert(std::make_pair(0x12a5,"ETHIOPIC SYLLABLE GLOTTAL E"));
        data.insert(std::make_pair(0x12a6,"ETHIOPIC SYLLABLE GLOTTAL O"));
        data.insert(std::make_pair(0x12a7,"ETHIOPIC SYLLABLE GLOTTAL WA"));
        data.insert(std::make_pair(0x12a8,"ETHIOPIC SYLLABLE KA"));
        data.insert(std::make_pair(0x12a9,"ETHIOPIC SYLLABLE KU"));
        data.insert(std::make_pair(0x12aa,"ETHIOPIC SYLLABLE KI"));
        data.insert(std::make_pair(0x12ab,"ETHIOPIC SYLLABLE KAA"));
        data.insert(std::make_pair(0x12ac,"ETHIOPIC SYLLABLE KEE"));
        data.insert(std::make_pair(0x12ad,"ETHIOPIC SYLLABLE KE"));
        data.insert(std::make_pair(0x12ae,"ETHIOPIC SYLLABLE KO"));
        data.insert(std::make_pair(0x12af,"ETHIOPIC SYLLABLE KOA"));
        data.insert(std::make_pair(0x12b0,"ETHIOPIC SYLLABLE KWA"));
        data.insert(std::make_pair(0x12b2,"ETHIOPIC SYLLABLE KWI"));
        data.insert(std::make_pair(0x12b3,"ETHIOPIC SYLLABLE KWAA"));
        data.insert(std::make_pair(0x12b4,"ETHIOPIC SYLLABLE KWEE"));
        data.insert(std::make_pair(0x12b5,"ETHIOPIC SYLLABLE KWE"));
        data.insert(std::make_pair(0x12b8,"ETHIOPIC SYLLABLE KXA"));
        data.insert(std::make_pair(0x12b9,"ETHIOPIC SYLLABLE KXU"));
        data.insert(std::make_pair(0x12ba,"ETHIOPIC SYLLABLE KXI"));
        data.insert(std::make_pair(0x12bb,"ETHIOPIC SYLLABLE KXAA"));
        data.insert(std::make_pair(0x12bc,"ETHIOPIC SYLLABLE KXEE"));
        data.insert(std::make_pair(0x12bd,"ETHIOPIC SYLLABLE KXE"));
        data.insert(std::make_pair(0x12be,"ETHIOPIC SYLLABLE KXO"));
        data.insert(std::make_pair(0x12c0,"ETHIOPIC SYLLABLE KXWA"));
        data.insert(std::make_pair(0x12c2,"ETHIOPIC SYLLABLE KXWI"));
        data.insert(std::make_pair(0x12c3,"ETHIOPIC SYLLABLE KXWAA"));
        data.insert(std::make_pair(0x12c4,"ETHIOPIC SYLLABLE KXWEE"));
        data.insert(std::make_pair(0x12c5,"ETHIOPIC SYLLABLE KXWE"));
        data.insert(std::make_pair(0x12c8,"ETHIOPIC SYLLABLE WA"));
        data.insert(std::make_pair(0x12c9,"ETHIOPIC SYLLABLE WU"));
        data.insert(std::make_pair(0x12ca,"ETHIOPIC SYLLABLE WI"));
        data.insert(std::make_pair(0x12cb,"ETHIOPIC SYLLABLE WAA"));
        data.insert(std::make_pair(0x12cc,"ETHIOPIC SYLLABLE WEE"));
        data.insert(std::make_pair(0x12cd,"ETHIOPIC SYLLABLE WE"));
        data.insert(std::make_pair(0x12ce,"ETHIOPIC SYLLABLE WO"));
        data.insert(std::make_pair(0x12cf,"ETHIOPIC SYLLABLE WOA"));
        data.insert(std::make_pair(0x12d0,"ETHIOPIC SYLLABLE PHARYNGEAL A"));
        data.insert(std::make_pair(0x12d1,"ETHIOPIC SYLLABLE PHARYNGEAL U"));
        data.insert(std::make_pair(0x12d2,"ETHIOPIC SYLLABLE PHARYNGEAL I"));
        data.insert(std::make_pair(0x12d3,"ETHIOPIC SYLLABLE PHARYNGEAL AA"));
        data.insert(std::make_pair(0x12d4,"ETHIOPIC SYLLABLE PHARYNGEAL EE"));
        data.insert(std::make_pair(0x12d5,"ETHIOPIC SYLLABLE PHARYNGEAL E"));
        data.insert(std::make_pair(0x12d6,"ETHIOPIC SYLLABLE PHARYNGEAL O"));
        data.insert(std::make_pair(0x12d8,"ETHIOPIC SYLLABLE ZA"));
        data.insert(std::make_pair(0x12d9,"ETHIOPIC SYLLABLE ZU"));
        data.insert(std::make_pair(0x12da,"ETHIOPIC SYLLABLE ZI"));
        data.insert(std::make_pair(0x12db,"ETHIOPIC SYLLABLE ZAA"));
        data.insert(std::make_pair(0x12dc,"ETHIOPIC SYLLABLE ZEE"));
        data.insert(std::make_pair(0x12dd,"ETHIOPIC SYLLABLE ZE"));
        data.insert(std::make_pair(0x12de,"ETHIOPIC SYLLABLE ZO"));
        data.insert(std::make_pair(0x12df,"ETHIOPIC SYLLABLE ZWA"));
        data.insert(std::make_pair(0x12e0,"ETHIOPIC SYLLABLE ZHA"));
        data.insert(std::make_pair(0x12e1,"ETHIOPIC SYLLABLE ZHU"));
        data.insert(std::make_pair(0x12e2,"ETHIOPIC SYLLABLE ZHI"));
        data.insert(std::make_pair(0x12e3,"ETHIOPIC SYLLABLE ZHAA"));
        data.insert(std::make_pair(0x12e4,"ETHIOPIC SYLLABLE ZHEE"));
        data.insert(std::make_pair(0x12e5,"ETHIOPIC SYLLABLE ZHE"));
        data.insert(std::make_pair(0x12e6,"ETHIOPIC SYLLABLE ZHO"));
        data.insert(std::make_pair(0x12e7,"ETHIOPIC SYLLABLE ZHWA"));
        data.insert(std::make_pair(0x12e8,"ETHIOPIC SYLLABLE YA"));
        data.insert(std::make_pair(0x12e9,"ETHIOPIC SYLLABLE YU"));
        data.insert(std::make_pair(0x12ea,"ETHIOPIC SYLLABLE YI"));
        data.insert(std::make_pair(0x12eb,"ETHIOPIC SYLLABLE YAA"));
        data.insert(std::make_pair(0x12ec,"ETHIOPIC SYLLABLE YEE"));
        data.insert(std::make_pair(0x12ed,"ETHIOPIC SYLLABLE YE"));
        data.insert(std::make_pair(0x12ee,"ETHIOPIC SYLLABLE YO"));
        data.insert(std::make_pair(0x12ef,"ETHIOPIC SYLLABLE YOA"));
        data.insert(std::make_pair(0x12f0,"ETHIOPIC SYLLABLE DA"));
        data.insert(std::make_pair(0x12f1,"ETHIOPIC SYLLABLE DU"));
        data.insert(std::make_pair(0x12f2,"ETHIOPIC SYLLABLE DI"));
        data.insert(std::make_pair(0x12f3,"ETHIOPIC SYLLABLE DAA"));
        data.insert(std::make_pair(0x12f4,"ETHIOPIC SYLLABLE DEE"));
        data.insert(std::make_pair(0x12f5,"ETHIOPIC SYLLABLE DE"));
        data.insert(std::make_pair(0x12f6,"ETHIOPIC SYLLABLE DO"));
        data.insert(std::make_pair(0x12f7,"ETHIOPIC SYLLABLE DWA"));
        data.insert(std::make_pair(0x12f8,"ETHIOPIC SYLLABLE DDA"));
        data.insert(std::make_pair(0x12f9,"ETHIOPIC SYLLABLE DDU"));
        data.insert(std::make_pair(0x12fa,"ETHIOPIC SYLLABLE DDI"));
        data.insert(std::make_pair(0x12fb,"ETHIOPIC SYLLABLE DDAA"));
        data.insert(std::make_pair(0x12fc,"ETHIOPIC SYLLABLE DDEE"));
        data.insert(std::make_pair(0x12fd,"ETHIOPIC SYLLABLE DDE"));
        data.insert(std::make_pair(0x12fe,"ETHIOPIC SYLLABLE DDO"));
        data.insert(std::make_pair(0x12ff,"ETHIOPIC SYLLABLE DDWA"));
        data.insert(std::make_pair(0x1300,"ETHIOPIC SYLLABLE JA"));
        data.insert(std::make_pair(0x1301,"ETHIOPIC SYLLABLE JU"));
        data.insert(std::make_pair(0x1302,"ETHIOPIC SYLLABLE JI"));
        data.insert(std::make_pair(0x1303,"ETHIOPIC SYLLABLE JAA"));
        data.insert(std::make_pair(0x1304,"ETHIOPIC SYLLABLE JEE"));
        data.insert(std::make_pair(0x1305,"ETHIOPIC SYLLABLE JE"));
        data.insert(std::make_pair(0x1306,"ETHIOPIC SYLLABLE JO"));
        data.insert(std::make_pair(0x1307,"ETHIOPIC SYLLABLE JWA"));
        data.insert(std::make_pair(0x1308,"ETHIOPIC SYLLABLE GA"));
        data.insert(std::make_pair(0x1309,"ETHIOPIC SYLLABLE GU"));
        data.insert(std::make_pair(0x130a,"ETHIOPIC SYLLABLE GI"));
        data.insert(std::make_pair(0x130b,"ETHIOPIC SYLLABLE GAA"));
        data.insert(std::make_pair(0x130c,"ETHIOPIC SYLLABLE GEE"));
        data.insert(std::make_pair(0x130d,"ETHIOPIC SYLLABLE GE"));
        data.insert(std::make_pair(0x130e,"ETHIOPIC SYLLABLE GO"));
        data.insert(std::make_pair(0x130f,"ETHIOPIC SYLLABLE GOA"));
        data.insert(std::make_pair(0x1310,"ETHIOPIC SYLLABLE GWA"));
        data.insert(std::make_pair(0x1312,"ETHIOPIC SYLLABLE GWI"));
        data.insert(std::make_pair(0x1313,"ETHIOPIC SYLLABLE GWAA"));
        data.insert(std::make_pair(0x1314,"ETHIOPIC SYLLABLE GWEE"));
        data.insert(std::make_pair(0x1315,"ETHIOPIC SYLLABLE GWE"));
        data.insert(std::make_pair(0x1318,"ETHIOPIC SYLLABLE GGA"));
        data.insert(std::make_pair(0x1319,"ETHIOPIC SYLLABLE GGU"));
        data.insert(std::make_pair(0x131a,"ETHIOPIC SYLLABLE GGI"));
        data.insert(std::make_pair(0x131b,"ETHIOPIC SYLLABLE GGAA"));
        data.insert(std::make_pair(0x131c,"ETHIOPIC SYLLABLE GGEE"));
        data.insert(std::make_pair(0x131d,"ETHIOPIC SYLLABLE GGE"));
        data.insert(std::make_pair(0x131e,"ETHIOPIC SYLLABLE GGO"));
        data.insert(std::make_pair(0x131f,"ETHIOPIC SYLLABLE GGWAA"));
        data.insert(std::make_pair(0x1320,"ETHIOPIC SYLLABLE THA"));
        data.insert(std::make_pair(0x1321,"ETHIOPIC SYLLABLE THU"));
        data.insert(std::make_pair(0x1322,"ETHIOPIC SYLLABLE THI"));
        data.insert(std::make_pair(0x1323,"ETHIOPIC SYLLABLE THAA"));
        data.insert(std::make_pair(0x1324,"ETHIOPIC SYLLABLE THEE"));
        data.insert(std::make_pair(0x1325,"ETHIOPIC SYLLABLE THE"));
        data.insert(std::make_pair(0x1326,"ETHIOPIC SYLLABLE THO"));
        data.insert(std::make_pair(0x1327,"ETHIOPIC SYLLABLE THWA"));
        data.insert(std::make_pair(0x1328,"ETHIOPIC SYLLABLE CHA"));
        data.insert(std::make_pair(0x1329,"ETHIOPIC SYLLABLE CHU"));
        data.insert(std::make_pair(0x132a,"ETHIOPIC SYLLABLE CHI"));
        data.insert(std::make_pair(0x132b,"ETHIOPIC SYLLABLE CHAA"));
        data.insert(std::make_pair(0x132c,"ETHIOPIC SYLLABLE CHEE"));
        data.insert(std::make_pair(0x132d,"ETHIOPIC SYLLABLE CHE"));
        data.insert(std::make_pair(0x132e,"ETHIOPIC SYLLABLE CHO"));
        data.insert(std::make_pair(0x132f,"ETHIOPIC SYLLABLE CHWA"));
        data.insert(std::make_pair(0x1330,"ETHIOPIC SYLLABLE PHA"));
        data.insert(std::make_pair(0x1331,"ETHIOPIC SYLLABLE PHU"));
        data.insert(std::make_pair(0x1332,"ETHIOPIC SYLLABLE PHI"));
        data.insert(std::make_pair(0x1333,"ETHIOPIC SYLLABLE PHAA"));
        data.insert(std::make_pair(0x1334,"ETHIOPIC SYLLABLE PHEE"));
        data.insert(std::make_pair(0x1335,"ETHIOPIC SYLLABLE PHE"));
        data.insert(std::make_pair(0x1336,"ETHIOPIC SYLLABLE PHO"));
        data.insert(std::make_pair(0x1337,"ETHIOPIC SYLLABLE PHWA"));
        data.insert(std::make_pair(0x1338,"ETHIOPIC SYLLABLE TSA"));
        data.insert(std::make_pair(0x1339,"ETHIOPIC SYLLABLE TSU"));
        data.insert(std::make_pair(0x133a,"ETHIOPIC SYLLABLE TSI"));
        data.insert(std::make_pair(0x133b,"ETHIOPIC SYLLABLE TSAA"));
        data.insert(std::make_pair(0x133c,"ETHIOPIC SYLLABLE TSEE"));
        data.insert(std::make_pair(0x133d,"ETHIOPIC SYLLABLE TSE"));
        data.insert(std::make_pair(0x133e,"ETHIOPIC SYLLABLE TSO"));
        data.insert(std::make_pair(0x133f,"ETHIOPIC SYLLABLE TSWA"));
        data.insert(std::make_pair(0x1340,"ETHIOPIC SYLLABLE TZA"));
        data.insert(std::make_pair(0x1341,"ETHIOPIC SYLLABLE TZU"));
        data.insert(std::make_pair(0x1342,"ETHIOPIC SYLLABLE TZI"));
        data.insert(std::make_pair(0x1343,"ETHIOPIC SYLLABLE TZAA"));
        data.insert(std::make_pair(0x1344,"ETHIOPIC SYLLABLE TZEE"));
        data.insert(std::make_pair(0x1345,"ETHIOPIC SYLLABLE TZE"));
        data.insert(std::make_pair(0x1346,"ETHIOPIC SYLLABLE TZO"));
        data.insert(std::make_pair(0x1347,"ETHIOPIC SYLLABLE TZOA"));
        data.insert(std::make_pair(0x1348,"ETHIOPIC SYLLABLE FA"));
        data.insert(std::make_pair(0x1349,"ETHIOPIC SYLLABLE FU"));
        data.insert(std::make_pair(0x134a,"ETHIOPIC SYLLABLE FI"));
        data.insert(std::make_pair(0x134b,"ETHIOPIC SYLLABLE FAA"));
        data.insert(std::make_pair(0x134c,"ETHIOPIC SYLLABLE FEE"));
        data.insert(std::make_pair(0x134d,"ETHIOPIC SYLLABLE FE"));
        data.insert(std::make_pair(0x134e,"ETHIOPIC SYLLABLE FO"));
        data.insert(std::make_pair(0x134f,"ETHIOPIC SYLLABLE FWA"));
        data.insert(std::make_pair(0x1350,"ETHIOPIC SYLLABLE PA"));
        data.insert(std::make_pair(0x1351,"ETHIOPIC SYLLABLE PU"));
        data.insert(std::make_pair(0x1352,"ETHIOPIC SYLLABLE PI"));
        data.insert(std::make_pair(0x1353,"ETHIOPIC SYLLABLE PAA"));
        data.insert(std::make_pair(0x1354,"ETHIOPIC SYLLABLE PEE"));
        data.insert(std::make_pair(0x1355,"ETHIOPIC SYLLABLE PE"));
        data.insert(std::make_pair(0x1356,"ETHIOPIC SYLLABLE PO"));
        data.insert(std::make_pair(0x1357,"ETHIOPIC SYLLABLE PWA"));
        data.insert(std::make_pair(0x1358,"ETHIOPIC SYLLABLE RYA"));
        data.insert(std::make_pair(0x1359,"ETHIOPIC SYLLABLE MYA"));
        data.insert(std::make_pair(0x135a,"ETHIOPIC SYLLABLE FYA"));
        data.insert(std::make_pair(0x135d,"ETHIOPIC COMBINING GEMINATION AND VOWEL LENGTH MARK"));
        data.insert(std::make_pair(0x135e,"ETHIOPIC COMBINING VOWEL LENGTH MARK"));
        data.insert(std::make_pair(0x135f,"ETHIOPIC COMBINING GEMINATION MARK"));
        data.insert(std::make_pair(0x1360,"ETHIOPIC SECTION MARK"));
        data.insert(std::make_pair(0x1361,"ETHIOPIC WORDSPACE"));
        data.insert(std::make_pair(0x1362,"ETHIOPIC FULL STOP"));
        data.insert(std::make_pair(0x1363,"ETHIOPIC COMMA"));
        data.insert(std::make_pair(0x1364,"ETHIOPIC SEMICOLON"));
        data.insert(std::make_pair(0x1365,"ETHIOPIC COLON"));
        data.insert(std::make_pair(0x1366,"ETHIOPIC PREFACE COLON"));
        data.insert(std::make_pair(0x1367,"ETHIOPIC QUESTION MARK"));
        data.insert(std::make_pair(0x1368,"ETHIOPIC PARAGRAPH SEPARATOR"));
        data.insert(std::make_pair(0x1369,"ETHIOPIC DIGIT ONE"));
        data.insert(std::make_pair(0x136a,"ETHIOPIC DIGIT TWO"));
        data.insert(std::make_pair(0x136b,"ETHIOPIC DIGIT THREE"));
        data.insert(std::make_pair(0x136c,"ETHIOPIC DIGIT FOUR"));
        data.insert(std::make_pair(0x136d,"ETHIOPIC DIGIT FIVE"));
        data.insert(std::make_pair(0x136e,"ETHIOPIC DIGIT SIX"));
        data.insert(std::make_pair(0x136f,"ETHIOPIC DIGIT SEVEN"));
        data.insert(std::make_pair(0x1370,"ETHIOPIC DIGIT EIGHT"));
        data.insert(std::make_pair(0x1371,"ETHIOPIC DIGIT NINE"));
        data.insert(std::make_pair(0x1372,"ETHIOPIC NUMBER TEN"));
        data.insert(std::make_pair(0x1373,"ETHIOPIC NUMBER TWENTY"));
        data.insert(std::make_pair(0x1374,"ETHIOPIC NUMBER THIRTY"));
        data.insert(std::make_pair(0x1375,"ETHIOPIC NUMBER FORTY"));
        data.insert(std::make_pair(0x1376,"ETHIOPIC NUMBER FIFTY"));
        data.insert(std::make_pair(0x1377,"ETHIOPIC NUMBER SIXTY"));
        data.insert(std::make_pair(0x1378,"ETHIOPIC NUMBER SEVENTY"));
        data.insert(std::make_pair(0x1379,"ETHIOPIC NUMBER EIGHTY"));
        data.insert(std::make_pair(0x137a,"ETHIOPIC NUMBER NINETY"));
        data.insert(std::make_pair(0x137b,"ETHIOPIC NUMBER HUNDRED"));
        data.insert(std::make_pair(0x137c,"ETHIOPIC NUMBER TEN THOUSAND"));
        data.insert(std::make_pair(0x1380,"ETHIOPIC SYLLABLE SEBATBEIT MWA"));
        data.insert(std::make_pair(0x1381,"ETHIOPIC SYLLABLE MWI"));
        data.insert(std::make_pair(0x1382,"ETHIOPIC SYLLABLE MWEE"));
        data.insert(std::make_pair(0x1383,"ETHIOPIC SYLLABLE MWE"));
        data.insert(std::make_pair(0x1384,"ETHIOPIC SYLLABLE SEBATBEIT BWA"));
        data.insert(std::make_pair(0x1385,"ETHIOPIC SYLLABLE BWI"));
        data.insert(std::make_pair(0x1386,"ETHIOPIC SYLLABLE BWEE"));
        data.insert(std::make_pair(0x1387,"ETHIOPIC SYLLABLE BWE"));
        data.insert(std::make_pair(0x1388,"ETHIOPIC SYLLABLE SEBATBEIT FWA"));
        data.insert(std::make_pair(0x1389,"ETHIOPIC SYLLABLE FWI"));
        data.insert(std::make_pair(0x138a,"ETHIOPIC SYLLABLE FWEE"));
        data.insert(std::make_pair(0x138b,"ETHIOPIC SYLLABLE FWE"));
        data.insert(std::make_pair(0x138c,"ETHIOPIC SYLLABLE SEBATBEIT PWA"));
        data.insert(std::make_pair(0x138d,"ETHIOPIC SYLLABLE PWI"));
        data.insert(std::make_pair(0x138e,"ETHIOPIC SYLLABLE PWEE"));
        data.insert(std::make_pair(0x138f,"ETHIOPIC SYLLABLE PWE"));
        data.insert(std::make_pair(0x1390,"ETHIOPIC TONAL MARK YIZET"));
        data.insert(std::make_pair(0x1391,"ETHIOPIC TONAL MARK DERET"));
        data.insert(std::make_pair(0x1392,"ETHIOPIC TONAL MARK RIKRIK"));
        data.insert(std::make_pair(0x1393,"ETHIOPIC TONAL MARK SHORT RIKRIK"));
        data.insert(std::make_pair(0x1394,"ETHIOPIC TONAL MARK DIFAT"));
        data.insert(std::make_pair(0x1395,"ETHIOPIC TONAL MARK KENAT"));
        data.insert(std::make_pair(0x1396,"ETHIOPIC TONAL MARK CHIRET"));
        data.insert(std::make_pair(0x1397,"ETHIOPIC TONAL MARK HIDET"));
        data.insert(std::make_pair(0x1398,"ETHIOPIC TONAL MARK DERET-HIDET"));
        data.insert(std::make_pair(0x1399,"ETHIOPIC TONAL MARK KURT"));
        data.insert(std::make_pair(0x13a0,"CHEROKEE LETTER A"));
        data.insert(std::make_pair(0x13a1,"CHEROKEE LETTER E"));
        data.insert(std::make_pair(0x13a2,"CHEROKEE LETTER I"));
        data.insert(std::make_pair(0x13a3,"CHEROKEE LETTER O"));
        data.insert(std::make_pair(0x13a4,"CHEROKEE LETTER U"));
        data.insert(std::make_pair(0x13a5,"CHEROKEE LETTER V"));
        data.insert(std::make_pair(0x13a6,"CHEROKEE LETTER GA"));
        data.insert(std::make_pair(0x13a7,"CHEROKEE LETTER KA"));
        data.insert(std::make_pair(0x13a8,"CHEROKEE LETTER GE"));
        data.insert(std::make_pair(0x13a9,"CHEROKEE LETTER GI"));
        data.insert(std::make_pair(0x13aa,"CHEROKEE LETTER GO"));
        data.insert(std::make_pair(0x13ab,"CHEROKEE LETTER GU"));
        data.insert(std::make_pair(0x13ac,"CHEROKEE LETTER GV"));
        data.insert(std::make_pair(0x13ad,"CHEROKEE LETTER HA"));
        data.insert(std::make_pair(0x13ae,"CHEROKEE LETTER HE"));
        data.insert(std::make_pair(0x13af,"CHEROKEE LETTER HI"));
        data.insert(std::make_pair(0x13b0,"CHEROKEE LETTER HO"));
        data.insert(std::make_pair(0x13b1,"CHEROKEE LETTER HU"));
        data.insert(std::make_pair(0x13b2,"CHEROKEE LETTER HV"));
        data.insert(std::make_pair(0x13b3,"CHEROKEE LETTER LA"));
        data.insert(std::make_pair(0x13b4,"CHEROKEE LETTER LE"));
        data.insert(std::make_pair(0x13b5,"CHEROKEE LETTER LI"));
        data.insert(std::make_pair(0x13b6,"CHEROKEE LETTER LO"));
        data.insert(std::make_pair(0x13b7,"CHEROKEE LETTER LU"));
        data.insert(std::make_pair(0x13b8,"CHEROKEE LETTER LV"));
        data.insert(std::make_pair(0x13b9,"CHEROKEE LETTER MA"));
        data.insert(std::make_pair(0x13ba,"CHEROKEE LETTER ME"));
        data.insert(std::make_pair(0x13bb,"CHEROKEE LETTER MI"));
        data.insert(std::make_pair(0x13bc,"CHEROKEE LETTER MO"));
        data.insert(std::make_pair(0x13bd,"CHEROKEE LETTER MU"));
        data.insert(std::make_pair(0x13be,"CHEROKEE LETTER NA"));
        data.insert(std::make_pair(0x13bf,"CHEROKEE LETTER HNA"));
        data.insert(std::make_pair(0x13c0,"CHEROKEE LETTER NAH"));
        data.insert(std::make_pair(0x13c1,"CHEROKEE LETTER NE"));
        data.insert(std::make_pair(0x13c2,"CHEROKEE LETTER NI"));
        data.insert(std::make_pair(0x13c3,"CHEROKEE LETTER NO"));
        data.insert(std::make_pair(0x13c4,"CHEROKEE LETTER NU"));
        data.insert(std::make_pair(0x13c5,"CHEROKEE LETTER NV"));
        data.insert(std::make_pair(0x13c6,"CHEROKEE LETTER QUA"));
        data.insert(std::make_pair(0x13c7,"CHEROKEE LETTER QUE"));
        data.insert(std::make_pair(0x13c8,"CHEROKEE LETTER QUI"));
        data.insert(std::make_pair(0x13c9,"CHEROKEE LETTER QUO"));
        data.insert(std::make_pair(0x13ca,"CHEROKEE LETTER QUU"));
        data.insert(std::make_pair(0x13cb,"CHEROKEE LETTER QUV"));
        data.insert(std::make_pair(0x13cc,"CHEROKEE LETTER SA"));
        data.insert(std::make_pair(0x13cd,"CHEROKEE LETTER S"));
        data.insert(std::make_pair(0x13ce,"CHEROKEE LETTER SE"));
        data.insert(std::make_pair(0x13cf,"CHEROKEE LETTER SI"));
        data.insert(std::make_pair(0x13d0,"CHEROKEE LETTER SO"));
        data.insert(std::make_pair(0x13d1,"CHEROKEE LETTER SU"));
        data.insert(std::make_pair(0x13d2,"CHEROKEE LETTER SV"));
        data.insert(std::make_pair(0x13d3,"CHEROKEE LETTER DA"));
        data.insert(std::make_pair(0x13d4,"CHEROKEE LETTER TA"));
        data.insert(std::make_pair(0x13d5,"CHEROKEE LETTER DE"));
        data.insert(std::make_pair(0x13d6,"CHEROKEE LETTER TE"));
        data.insert(std::make_pair(0x13d7,"CHEROKEE LETTER DI"));
        data.insert(std::make_pair(0x13d8,"CHEROKEE LETTER TI"));
        data.insert(std::make_pair(0x13d9,"CHEROKEE LETTER DO"));
        data.insert(std::make_pair(0x13da,"CHEROKEE LETTER DU"));
        data.insert(std::make_pair(0x13db,"CHEROKEE LETTER DV"));
        data.insert(std::make_pair(0x13dc,"CHEROKEE LETTER DLA"));
        data.insert(std::make_pair(0x13dd,"CHEROKEE LETTER TLA"));
        data.insert(std::make_pair(0x13de,"CHEROKEE LETTER TLE"));
        data.insert(std::make_pair(0x13df,"CHEROKEE LETTER TLI"));
        data.insert(std::make_pair(0x13e0,"CHEROKEE LETTER TLO"));
        data.insert(std::make_pair(0x13e1,"CHEROKEE LETTER TLU"));
        data.insert(std::make_pair(0x13e2,"CHEROKEE LETTER TLV"));
        data.insert(std::make_pair(0x13e3,"CHEROKEE LETTER TSA"));
        data.insert(std::make_pair(0x13e4,"CHEROKEE LETTER TSE"));
        data.insert(std::make_pair(0x13e5,"CHEROKEE LETTER TSI"));
        data.insert(std::make_pair(0x13e6,"CHEROKEE LETTER TSO"));
        data.insert(std::make_pair(0x13e7,"CHEROKEE LETTER TSU"));
        data.insert(std::make_pair(0x13e8,"CHEROKEE LETTER TSV"));
        data.insert(std::make_pair(0x13e9,"CHEROKEE LETTER WA"));
        data.insert(std::make_pair(0x13ea,"CHEROKEE LETTER WE"));
        data.insert(std::make_pair(0x13eb,"CHEROKEE LETTER WI"));
        data.insert(std::make_pair(0x13ec,"CHEROKEE LETTER WO"));
        data.insert(std::make_pair(0x13ed,"CHEROKEE LETTER WU"));
        data.insert(std::make_pair(0x13ee,"CHEROKEE LETTER WV"));
        data.insert(std::make_pair(0x13ef,"CHEROKEE LETTER YA"));
        data.insert(std::make_pair(0x13f0,"CHEROKEE LETTER YE"));
        data.insert(std::make_pair(0x13f1,"CHEROKEE LETTER YI"));
        data.insert(std::make_pair(0x13f2,"CHEROKEE LETTER YO"));
        data.insert(std::make_pair(0x13f3,"CHEROKEE LETTER YU"));
        data.insert(std::make_pair(0x13f4,"CHEROKEE LETTER YV"));
        data.insert(std::make_pair(0x13f5,"CHEROKEE LETTER MV"));
        data.insert(std::make_pair(0x13f8,"CHEROKEE SMALL LETTER YE"));
        data.insert(std::make_pair(0x13f9,"CHEROKEE SMALL LETTER YI"));
        data.insert(std::make_pair(0x13fa,"CHEROKEE SMALL LETTER YO"));
        data.insert(std::make_pair(0x13fb,"CHEROKEE SMALL LETTER YU"));
        data.insert(std::make_pair(0x13fc,"CHEROKEE SMALL LETTER YV"));
        data.insert(std::make_pair(0x13fd,"CHEROKEE SMALL LETTER MV"));
        data.insert(std::make_pair(0x1400,"CANADIAN SYLLABICS HYPHEN"));
        data.insert(std::make_pair(0x1401,"CANADIAN SYLLABICS E"));
        data.insert(std::make_pair(0x1402,"CANADIAN SYLLABICS AAI"));
        data.insert(std::make_pair(0x1403,"CANADIAN SYLLABICS I"));
        data.insert(std::make_pair(0x1404,"CANADIAN SYLLABICS II"));
        data.insert(std::make_pair(0x1405,"CANADIAN SYLLABICS O"));
        data.insert(std::make_pair(0x1406,"CANADIAN SYLLABICS OO"));
        data.insert(std::make_pair(0x1407,"CANADIAN SYLLABICS Y-CREE OO"));
        data.insert(std::make_pair(0x1408,"CANADIAN SYLLABICS CARRIER EE"));
        data.insert(std::make_pair(0x1409,"CANADIAN SYLLABICS CARRIER I"));
        data.insert(std::make_pair(0x140a,"CANADIAN SYLLABICS A"));
        data.insert(std::make_pair(0x140b,"CANADIAN SYLLABICS AA"));
        data.insert(std::make_pair(0x140c,"CANADIAN SYLLABICS WE"));
        data.insert(std::make_pair(0x140d,"CANADIAN SYLLABICS WEST-CREE WE"));
        data.insert(std::make_pair(0x140e,"CANADIAN SYLLABICS WI"));
        data.insert(std::make_pair(0x140f,"CANADIAN SYLLABICS WEST-CREE WI"));
        data.insert(std::make_pair(0x1410,"CANADIAN SYLLABICS WII"));
        data.insert(std::make_pair(0x1411,"CANADIAN SYLLABICS WEST-CREE WII"));
        data.insert(std::make_pair(0x1412,"CANADIAN SYLLABICS WO"));
        data.insert(std::make_pair(0x1413,"CANADIAN SYLLABICS WEST-CREE WO"));
        data.insert(std::make_pair(0x1414,"CANADIAN SYLLABICS WOO"));
        data.insert(std::make_pair(0x1415,"CANADIAN SYLLABICS WEST-CREE WOO"));
        data.insert(std::make_pair(0x1416,"CANADIAN SYLLABICS NASKAPI WOO"));
        data.insert(std::make_pair(0x1417,"CANADIAN SYLLABICS WA"));
        data.insert(std::make_pair(0x1418,"CANADIAN SYLLABICS WEST-CREE WA"));
        data.insert(std::make_pair(0x1419,"CANADIAN SYLLABICS WAA"));
        data.insert(std::make_pair(0x141a,"CANADIAN SYLLABICS WEST-CREE WAA"));
        data.insert(std::make_pair(0x141b,"CANADIAN SYLLABICS NASKAPI WAA"));
        data.insert(std::make_pair(0x141c,"CANADIAN SYLLABICS AI"));
        data.insert(std::make_pair(0x141d,"CANADIAN SYLLABICS Y-CREE W"));
        data.insert(std::make_pair(0x141e,"CANADIAN SYLLABICS GLOTTAL STOP"));
        data.insert(std::make_pair(0x141f,"CANADIAN SYLLABICS FINAL ACUTE"));
        data.insert(std::make_pair(0x1420,"CANADIAN SYLLABICS FINAL GRAVE"));
        data.insert(std::make_pair(0x1421,"CANADIAN SYLLABICS FINAL BOTTOM HALF RING"));
        data.insert(std::make_pair(0x1422,"CANADIAN SYLLABICS FINAL TOP HALF RING"));
        data.insert(std::make_pair(0x1423,"CANADIAN SYLLABICS FINAL RIGHT HALF RING"));
        data.insert(std::make_pair(0x1424,"CANADIAN SYLLABICS FINAL RING"));
        data.insert(std::make_pair(0x1425,"CANADIAN SYLLABICS FINAL DOUBLE ACUTE"));
        data.insert(std::make_pair(0x1426,"CANADIAN SYLLABICS FINAL DOUBLE SHORT VERTICAL STROKES"));
        data.insert(std::make_pair(0x1427,"CANADIAN SYLLABICS FINAL MIDDLE DOT"));
        data.insert(std::make_pair(0x1428,"CANADIAN SYLLABICS FINAL SHORT HORIZONTAL STROKE"));
        data.insert(std::make_pair(0x1429,"CANADIAN SYLLABICS FINAL PLUS"));
        data.insert(std::make_pair(0x142a,"CANADIAN SYLLABICS FINAL DOWN TACK"));
        data.insert(std::make_pair(0x142b,"CANADIAN SYLLABICS EN"));
        data.insert(std::make_pair(0x142c,"CANADIAN SYLLABICS IN"));
        data.insert(std::make_pair(0x142d,"CANADIAN SYLLABICS ON"));
        data.insert(std::make_pair(0x142e,"CANADIAN SYLLABICS AN"));
        data.insert(std::make_pair(0x142f,"CANADIAN SYLLABICS PE"));
        data.insert(std::make_pair(0x1430,"CANADIAN SYLLABICS PAAI"));
        data.insert(std::make_pair(0x1431,"CANADIAN SYLLABICS PI"));
        data.insert(std::make_pair(0x1432,"CANADIAN SYLLABICS PII"));
        data.insert(std::make_pair(0x1433,"CANADIAN SYLLABICS PO"));
        data.insert(std::make_pair(0x1434,"CANADIAN SYLLABICS POO"));
        data.insert(std::make_pair(0x1435,"CANADIAN SYLLABICS Y-CREE POO"));
        data.insert(std::make_pair(0x1436,"CANADIAN SYLLABICS CARRIER HEE"));
        data.insert(std::make_pair(0x1437,"CANADIAN SYLLABICS CARRIER HI"));
        data.insert(std::make_pair(0x1438,"CANADIAN SYLLABICS PA"));
        data.insert(std::make_pair(0x1439,"CANADIAN SYLLABICS PAA"));
        data.insert(std::make_pair(0x143a,"CANADIAN SYLLABICS PWE"));
        data.insert(std::make_pair(0x143b,"CANADIAN SYLLABICS WEST-CREE PWE"));
        data.insert(std::make_pair(0x143c,"CANADIAN SYLLABICS PWI"));
        data.insert(std::make_pair(0x143d,"CANADIAN SYLLABICS WEST-CREE PWI"));
        data.insert(std::make_pair(0x143e,"CANADIAN SYLLABICS PWII"));
        data.insert(std::make_pair(0x143f,"CANADIAN SYLLABICS WEST-CREE PWII"));
        data.insert(std::make_pair(0x1440,"CANADIAN SYLLABICS PWO"));
        data.insert(std::make_pair(0x1441,"CANADIAN SYLLABICS WEST-CREE PWO"));
        data.insert(std::make_pair(0x1442,"CANADIAN SYLLABICS PWOO"));
        data.insert(std::make_pair(0x1443,"CANADIAN SYLLABICS WEST-CREE PWOO"));
        data.insert(std::make_pair(0x1444,"CANADIAN SYLLABICS PWA"));
        data.insert(std::make_pair(0x1445,"CANADIAN SYLLABICS WEST-CREE PWA"));
        data.insert(std::make_pair(0x1446,"CANADIAN SYLLABICS PWAA"));
        data.insert(std::make_pair(0x1447,"CANADIAN SYLLABICS WEST-CREE PWAA"));
        data.insert(std::make_pair(0x1448,"CANADIAN SYLLABICS Y-CREE PWAA"));
        data.insert(std::make_pair(0x1449,"CANADIAN SYLLABICS P"));
        data.insert(std::make_pair(0x144a,"CANADIAN SYLLABICS WEST-CREE P"));
        data.insert(std::make_pair(0x144b,"CANADIAN SYLLABICS CARRIER H"));
        data.insert(std::make_pair(0x144c,"CANADIAN SYLLABICS TE"));
        data.insert(std::make_pair(0x144d,"CANADIAN SYLLABICS TAAI"));
        data.insert(std::make_pair(0x144e,"CANADIAN SYLLABICS TI"));
        data.insert(std::make_pair(0x144f,"CANADIAN SYLLABICS TII"));
        data.insert(std::make_pair(0x1450,"CANADIAN SYLLABICS TO"));
        data.insert(std::make_pair(0x1451,"CANADIAN SYLLABICS TOO"));
        data.insert(std::make_pair(0x1452,"CANADIAN SYLLABICS Y-CREE TOO"));
        data.insert(std::make_pair(0x1453,"CANADIAN SYLLABICS CARRIER DEE"));
        data.insert(std::make_pair(0x1454,"CANADIAN SYLLABICS CARRIER DI"));
        data.insert(std::make_pair(0x1455,"CANADIAN SYLLABICS TA"));
        data.insert(std::make_pair(0x1456,"CANADIAN SYLLABICS TAA"));
        data.insert(std::make_pair(0x1457,"CANADIAN SYLLABICS TWE"));
        data.insert(std::make_pair(0x1458,"CANADIAN SYLLABICS WEST-CREE TWE"));
        data.insert(std::make_pair(0x1459,"CANADIAN SYLLABICS TWI"));
        data.insert(std::make_pair(0x145a,"CANADIAN SYLLABICS WEST-CREE TWI"));
        data.insert(std::make_pair(0x145b,"CANADIAN SYLLABICS TWII"));
        data.insert(std::make_pair(0x145c,"CANADIAN SYLLABICS WEST-CREE TWII"));
        data.insert(std::make_pair(0x145d,"CANADIAN SYLLABICS TWO"));
        data.insert(std::make_pair(0x145e,"CANADIAN SYLLABICS WEST-CREE TWO"));
        data.insert(std::make_pair(0x145f,"CANADIAN SYLLABICS TWOO"));
        data.insert(std::make_pair(0x1460,"CANADIAN SYLLABICS WEST-CREE TWOO"));
        data.insert(std::make_pair(0x1461,"CANADIAN SYLLABICS TWA"));
        data.insert(std::make_pair(0x1462,"CANADIAN SYLLABICS WEST-CREE TWA"));
        data.insert(std::make_pair(0x1463,"CANADIAN SYLLABICS TWAA"));
        data.insert(std::make_pair(0x1464,"CANADIAN SYLLABICS WEST-CREE TWAA"));
        data.insert(std::make_pair(0x1465,"CANADIAN SYLLABICS NASKAPI TWAA"));
        data.insert(std::make_pair(0x1466,"CANADIAN SYLLABICS T"));
        data.insert(std::make_pair(0x1467,"CANADIAN SYLLABICS TTE"));
        data.insert(std::make_pair(0x1468,"CANADIAN SYLLABICS TTI"));
        data.insert(std::make_pair(0x1469,"CANADIAN SYLLABICS TTO"));
        data.insert(std::make_pair(0x146a,"CANADIAN SYLLABICS TTA"));
        data.insert(std::make_pair(0x146b,"CANADIAN SYLLABICS KE"));
        data.insert(std::make_pair(0x146c,"CANADIAN SYLLABICS KAAI"));
        data.insert(std::make_pair(0x146d,"CANADIAN SYLLABICS KI"));
        data.insert(std::make_pair(0x146e,"CANADIAN SYLLABICS KII"));
        data.insert(std::make_pair(0x146f,"CANADIAN SYLLABICS KO"));
        data.insert(std::make_pair(0x1470,"CANADIAN SYLLABICS KOO"));
        data.insert(std::make_pair(0x1471,"CANADIAN SYLLABICS Y-CREE KOO"));
        data.insert(std::make_pair(0x1472,"CANADIAN SYLLABICS KA"));
        data.insert(std::make_pair(0x1473,"CANADIAN SYLLABICS KAA"));
        data.insert(std::make_pair(0x1474,"CANADIAN SYLLABICS KWE"));
        data.insert(std::make_pair(0x1475,"CANADIAN SYLLABICS WEST-CREE KWE"));
        data.insert(std::make_pair(0x1476,"CANADIAN SYLLABICS KWI"));
        data.insert(std::make_pair(0x1477,"CANADIAN SYLLABICS WEST-CREE KWI"));
        data.insert(std::make_pair(0x1478,"CANADIAN SYLLABICS KWII"));
        data.insert(std::make_pair(0x1479,"CANADIAN SYLLABICS WEST-CREE KWII"));
        data.insert(std::make_pair(0x147a,"CANADIAN SYLLABICS KWO"));
        data.insert(std::make_pair(0x147b,"CANADIAN SYLLABICS WEST-CREE KWO"));
        data.insert(std::make_pair(0x147c,"CANADIAN SYLLABICS KWOO"));
        data.insert(std::make_pair(0x147d,"CANADIAN SYLLABICS WEST-CREE KWOO"));
        data.insert(std::make_pair(0x147e,"CANADIAN SYLLABICS KWA"));
        data.insert(std::make_pair(0x147f,"CANADIAN SYLLABICS WEST-CREE KWA"));
        data.insert(std::make_pair(0x1480,"CANADIAN SYLLABICS KWAA"));
        data.insert(std::make_pair(0x1481,"CANADIAN SYLLABICS WEST-CREE KWAA"));
        data.insert(std::make_pair(0x1482,"CANADIAN SYLLABICS NASKAPI KWAA"));
        data.insert(std::make_pair(0x1483,"CANADIAN SYLLABICS K"));
        data.insert(std::make_pair(0x1484,"CANADIAN SYLLABICS KW"));
        data.insert(std::make_pair(0x1485,"CANADIAN SYLLABICS SOUTH-SLAVEY KEH"));
        data.insert(std::make_pair(0x1486,"CANADIAN SYLLABICS SOUTH-SLAVEY KIH"));
        data.insert(std::make_pair(0x1487,"CANADIAN SYLLABICS SOUTH-SLAVEY KOH"));
        data.insert(std::make_pair(0x1488,"CANADIAN SYLLABICS SOUTH-SLAVEY KAH"));
        data.insert(std::make_pair(0x1489,"CANADIAN SYLLABICS CE"));
        data.insert(std::make_pair(0x148a,"CANADIAN SYLLABICS CAAI"));
        data.insert(std::make_pair(0x148b,"CANADIAN SYLLABICS CI"));
        data.insert(std::make_pair(0x148c,"CANADIAN SYLLABICS CII"));
        data.insert(std::make_pair(0x148d,"CANADIAN SYLLABICS CO"));
        data.insert(std::make_pair(0x148e,"CANADIAN SYLLABICS COO"));
        data.insert(std::make_pair(0x148f,"CANADIAN SYLLABICS Y-CREE COO"));
        data.insert(std::make_pair(0x1490,"CANADIAN SYLLABICS CA"));
        data.insert(std::make_pair(0x1491,"CANADIAN SYLLABICS CAA"));
        data.insert(std::make_pair(0x1492,"CANADIAN SYLLABICS CWE"));
        data.insert(std::make_pair(0x1493,"CANADIAN SYLLABICS WEST-CREE CWE"));
        data.insert(std::make_pair(0x1494,"CANADIAN SYLLABICS CWI"));
        data.insert(std::make_pair(0x1495,"CANADIAN SYLLABICS WEST-CREE CWI"));
        data.insert(std::make_pair(0x1496,"CANADIAN SYLLABICS CWII"));
        data.insert(std::make_pair(0x1497,"CANADIAN SYLLABICS WEST-CREE CWII"));
        data.insert(std::make_pair(0x1498,"CANADIAN SYLLABICS CWO"));
        data.insert(std::make_pair(0x1499,"CANADIAN SYLLABICS WEST-CREE CWO"));
        data.insert(std::make_pair(0x149a,"CANADIAN SYLLABICS CWOO"));
        data.insert(std::make_pair(0x149b,"CANADIAN SYLLABICS WEST-CREE CWOO"));
        data.insert(std::make_pair(0x149c,"CANADIAN SYLLABICS CWA"));
        data.insert(std::make_pair(0x149d,"CANADIAN SYLLABICS WEST-CREE CWA"));
        data.insert(std::make_pair(0x149e,"CANADIAN SYLLABICS CWAA"));
        data.insert(std::make_pair(0x149f,"CANADIAN SYLLABICS WEST-CREE CWAA"));
        data.insert(std::make_pair(0x14a0,"CANADIAN SYLLABICS NASKAPI CWAA"));
        data.insert(std::make_pair(0x14a1,"CANADIAN SYLLABICS C"));
        data.insert(std::make_pair(0x14a2,"CANADIAN SYLLABICS SAYISI TH"));
        data.insert(std::make_pair(0x14a3,"CANADIAN SYLLABICS ME"));
        data.insert(std::make_pair(0x14a4,"CANADIAN SYLLABICS MAAI"));
        data.insert(std::make_pair(0x14a5,"CANADIAN SYLLABICS MI"));
        data.insert(std::make_pair(0x14a6,"CANADIAN SYLLABICS MII"));
        data.insert(std::make_pair(0x14a7,"CANADIAN SYLLABICS MO"));
        data.insert(std::make_pair(0x14a8,"CANADIAN SYLLABICS MOO"));
        data.insert(std::make_pair(0x14a9,"CANADIAN SYLLABICS Y-CREE MOO"));
        data.insert(std::make_pair(0x14aa,"CANADIAN SYLLABICS MA"));
        data.insert(std::make_pair(0x14ab,"CANADIAN SYLLABICS MAA"));
        data.insert(std::make_pair(0x14ac,"CANADIAN SYLLABICS MWE"));
        data.insert(std::make_pair(0x14ad,"CANADIAN SYLLABICS WEST-CREE MWE"));
        data.insert(std::make_pair(0x14ae,"CANADIAN SYLLABICS MWI"));
        data.insert(std::make_pair(0x14af,"CANADIAN SYLLABICS WEST-CREE MWI"));
        data.insert(std::make_pair(0x14b0,"CANADIAN SYLLABICS MWII"));
        data.insert(std::make_pair(0x14b1,"CANADIAN SYLLABICS WEST-CREE MWII"));
        data.insert(std::make_pair(0x14b2,"CANADIAN SYLLABICS MWO"));
        data.insert(std::make_pair(0x14b3,"CANADIAN SYLLABICS WEST-CREE MWO"));
        data.insert(std::make_pair(0x14b4,"CANADIAN SYLLABICS MWOO"));
        data.insert(std::make_pair(0x14b5,"CANADIAN SYLLABICS WEST-CREE MWOO"));
        data.insert(std::make_pair(0x14b6,"CANADIAN SYLLABICS MWA"));
        data.insert(std::make_pair(0x14b7,"CANADIAN SYLLABICS WEST-CREE MWA"));
        data.insert(std::make_pair(0x14b8,"CANADIAN SYLLABICS MWAA"));
        data.insert(std::make_pair(0x14b9,"CANADIAN SYLLABICS WEST-CREE MWAA"));
        data.insert(std::make_pair(0x14ba,"CANADIAN SYLLABICS NASKAPI MWAA"));
        data.insert(std::make_pair(0x14bb,"CANADIAN SYLLABICS M"));
        data.insert(std::make_pair(0x14bc,"CANADIAN SYLLABICS WEST-CREE M"));
        data.insert(std::make_pair(0x14bd,"CANADIAN SYLLABICS MH"));
        data.insert(std::make_pair(0x14be,"CANADIAN SYLLABICS ATHAPASCAN M"));
        data.insert(std::make_pair(0x14bf,"CANADIAN SYLLABICS SAYISI M"));
        data.insert(std::make_pair(0x14c0,"CANADIAN SYLLABICS NE"));
        data.insert(std::make_pair(0x14c1,"CANADIAN SYLLABICS NAAI"));
        data.insert(std::make_pair(0x14c2,"CANADIAN SYLLABICS NI"));
        data.insert(std::make_pair(0x14c3,"CANADIAN SYLLABICS NII"));
        data.insert(std::make_pair(0x14c4,"CANADIAN SYLLABICS NO"));
        data.insert(std::make_pair(0x14c5,"CANADIAN SYLLABICS NOO"));
        data.insert(std::make_pair(0x14c6,"CANADIAN SYLLABICS Y-CREE NOO"));
        data.insert(std::make_pair(0x14c7,"CANADIAN SYLLABICS NA"));
        data.insert(std::make_pair(0x14c8,"CANADIAN SYLLABICS NAA"));
        data.insert(std::make_pair(0x14c9,"CANADIAN SYLLABICS NWE"));
        data.insert(std::make_pair(0x14ca,"CANADIAN SYLLABICS WEST-CREE NWE"));
        data.insert(std::make_pair(0x14cb,"CANADIAN SYLLABICS NWA"));
        data.insert(std::make_pair(0x14cc,"CANADIAN SYLLABICS WEST-CREE NWA"));
        data.insert(std::make_pair(0x14cd,"CANADIAN SYLLABICS NWAA"));
        data.insert(std::make_pair(0x14ce,"CANADIAN SYLLABICS WEST-CREE NWAA"));
        data.insert(std::make_pair(0x14cf,"CANADIAN SYLLABICS NASKAPI NWAA"));
        data.insert(std::make_pair(0x14d0,"CANADIAN SYLLABICS N"));
        data.insert(std::make_pair(0x14d1,"CANADIAN SYLLABICS CARRIER NG"));
        data.insert(std::make_pair(0x14d2,"CANADIAN SYLLABICS NH"));
        data.insert(std::make_pair(0x14d3,"CANADIAN SYLLABICS LE"));
        data.insert(std::make_pair(0x14d4,"CANADIAN SYLLABICS LAAI"));
        data.insert(std::make_pair(0x14d5,"CANADIAN SYLLABICS LI"));
        data.insert(std::make_pair(0x14d6,"CANADIAN SYLLABICS LII"));
        data.insert(std::make_pair(0x14d7,"CANADIAN SYLLABICS LO"));
        data.insert(std::make_pair(0x14d8,"CANADIAN SYLLABICS LOO"));
        data.insert(std::make_pair(0x14d9,"CANADIAN SYLLABICS Y-CREE LOO"));
        data.insert(std::make_pair(0x14da,"CANADIAN SYLLABICS LA"));
        data.insert(std::make_pair(0x14db,"CANADIAN SYLLABICS LAA"));
        data.insert(std::make_pair(0x14dc,"CANADIAN SYLLABICS LWE"));
        data.insert(std::make_pair(0x14dd,"CANADIAN SYLLABICS WEST-CREE LWE"));
        data.insert(std::make_pair(0x14de,"CANADIAN SYLLABICS LWI"));
        data.insert(std::make_pair(0x14df,"CANADIAN SYLLABICS WEST-CREE LWI"));
        data.insert(std::make_pair(0x14e0,"CANADIAN SYLLABICS LWII"));
        data.insert(std::make_pair(0x14e1,"CANADIAN SYLLABICS WEST-CREE LWII"));
        data.insert(std::make_pair(0x14e2,"CANADIAN SYLLABICS LWO"));
        data.insert(std::make_pair(0x14e3,"CANADIAN SYLLABICS WEST-CREE LWO"));
        data.insert(std::make_pair(0x14e4,"CANADIAN SYLLABICS LWOO"));
        data.insert(std::make_pair(0x14e5,"CANADIAN SYLLABICS WEST-CREE LWOO"));
        data.insert(std::make_pair(0x14e6,"CANADIAN SYLLABICS LWA"));
        data.insert(std::make_pair(0x14e7,"CANADIAN SYLLABICS WEST-CREE LWA"));
        data.insert(std::make_pair(0x14e8,"CANADIAN SYLLABICS LWAA"));
        data.insert(std::make_pair(0x14e9,"CANADIAN SYLLABICS WEST-CREE LWAA"));
        data.insert(std::make_pair(0x14ea,"CANADIAN SYLLABICS L"));
        data.insert(std::make_pair(0x14eb,"CANADIAN SYLLABICS WEST-CREE L"));
        data.insert(std::make_pair(0x14ec,"CANADIAN SYLLABICS MEDIAL L"));
        data.insert(std::make_pair(0x14ed,"CANADIAN SYLLABICS SE"));
        data.insert(std::make_pair(0x14ee,"CANADIAN SYLLABICS SAAI"));
        data.insert(std::make_pair(0x14ef,"CANADIAN SYLLABICS SI"));
        data.insert(std::make_pair(0x14f0,"CANADIAN SYLLABICS SII"));
        data.insert(std::make_pair(0x14f1,"CANADIAN SYLLABICS SO"));
        data.insert(std::make_pair(0x14f2,"CANADIAN SYLLABICS SOO"));
        data.insert(std::make_pair(0x14f3,"CANADIAN SYLLABICS Y-CREE SOO"));
        data.insert(std::make_pair(0x14f4,"CANADIAN SYLLABICS SA"));
        data.insert(std::make_pair(0x14f5,"CANADIAN SYLLABICS SAA"));
        data.insert(std::make_pair(0x14f6,"CANADIAN SYLLABICS SWE"));
        data.insert(std::make_pair(0x14f7,"CANADIAN SYLLABICS WEST-CREE SWE"));
        data.insert(std::make_pair(0x14f8,"CANADIAN SYLLABICS SWI"));
        data.insert(std::make_pair(0x14f9,"CANADIAN SYLLABICS WEST-CREE SWI"));
        data.insert(std::make_pair(0x14fa,"CANADIAN SYLLABICS SWII"));
        data.insert(std::make_pair(0x14fb,"CANADIAN SYLLABICS WEST-CREE SWII"));
        data.insert(std::make_pair(0x14fc,"CANADIAN SYLLABICS SWO"));
        data.insert(std::make_pair(0x14fd,"CANADIAN SYLLABICS WEST-CREE SWO"));
        data.insert(std::make_pair(0x14fe,"CANADIAN SYLLABICS SWOO"));
        data.insert(std::make_pair(0x14ff,"CANADIAN SYLLABICS WEST-CREE SWOO"));
        data.insert(std::make_pair(0x1500,"CANADIAN SYLLABICS SWA"));
        data.insert(std::make_pair(0x1501,"CANADIAN SYLLABICS WEST-CREE SWA"));
        data.insert(std::make_pair(0x1502,"CANADIAN SYLLABICS SWAA"));
        data.insert(std::make_pair(0x1503,"CANADIAN SYLLABICS WEST-CREE SWAA"));
        data.insert(std::make_pair(0x1504,"CANADIAN SYLLABICS NASKAPI SWAA"));
        data.insert(std::make_pair(0x1505,"CANADIAN SYLLABICS S"));
        data.insert(std::make_pair(0x1506,"CANADIAN SYLLABICS ATHAPASCAN S"));
        data.insert(std::make_pair(0x1507,"CANADIAN SYLLABICS SW"));
        data.insert(std::make_pair(0x1508,"CANADIAN SYLLABICS BLACKFOOT S"));
        data.insert(std::make_pair(0x1509,"CANADIAN SYLLABICS MOOSE-CREE SK"));
        data.insert(std::make_pair(0x150a,"CANADIAN SYLLABICS NASKAPI SKW"));
        data.insert(std::make_pair(0x150b,"CANADIAN SYLLABICS NASKAPI S-W"));
        data.insert(std::make_pair(0x150c,"CANADIAN SYLLABICS NASKAPI SPWA"));
        data.insert(std::make_pair(0x150d,"CANADIAN SYLLABICS NASKAPI STWA"));
        data.insert(std::make_pair(0x150e,"CANADIAN SYLLABICS NASKAPI SKWA"));
        data.insert(std::make_pair(0x150f,"CANADIAN SYLLABICS NASKAPI SCWA"));
        data.insert(std::make_pair(0x1510,"CANADIAN SYLLABICS SHE"));
        data.insert(std::make_pair(0x1511,"CANADIAN SYLLABICS SHI"));
        data.insert(std::make_pair(0x1512,"CANADIAN SYLLABICS SHII"));
        data.insert(std::make_pair(0x1513,"CANADIAN SYLLABICS SHO"));
        data.insert(std::make_pair(0x1514,"CANADIAN SYLLABICS SHOO"));
        data.insert(std::make_pair(0x1515,"CANADIAN SYLLABICS SHA"));
        data.insert(std::make_pair(0x1516,"CANADIAN SYLLABICS SHAA"));
        data.insert(std::make_pair(0x1517,"CANADIAN SYLLABICS SHWE"));
        data.insert(std::make_pair(0x1518,"CANADIAN SYLLABICS WEST-CREE SHWE"));
        data.insert(std::make_pair(0x1519,"CANADIAN SYLLABICS SHWI"));
        data.insert(std::make_pair(0x151a,"CANADIAN SYLLABICS WEST-CREE SHWI"));
        data.insert(std::make_pair(0x151b,"CANADIAN SYLLABICS SHWII"));
        data.insert(std::make_pair(0x151c,"CANADIAN SYLLABICS WEST-CREE SHWII"));
        data.insert(std::make_pair(0x151d,"CANADIAN SYLLABICS SHWO"));
        data.insert(std::make_pair(0x151e,"CANADIAN SYLLABICS WEST-CREE SHWO"));
        data.insert(std::make_pair(0x151f,"CANADIAN SYLLABICS SHWOO"));
        data.insert(std::make_pair(0x1520,"CANADIAN SYLLABICS WEST-CREE SHWOO"));
        data.insert(std::make_pair(0x1521,"CANADIAN SYLLABICS SHWA"));
        data.insert(std::make_pair(0x1522,"CANADIAN SYLLABICS WEST-CREE SHWA"));
        data.insert(std::make_pair(0x1523,"CANADIAN SYLLABICS SHWAA"));
        data.insert(std::make_pair(0x1524,"CANADIAN SYLLABICS WEST-CREE SHWAA"));
        data.insert(std::make_pair(0x1525,"CANADIAN SYLLABICS SH"));
        data.insert(std::make_pair(0x1526,"CANADIAN SYLLABICS YE"));
        data.insert(std::make_pair(0x1527,"CANADIAN SYLLABICS YAAI"));
        data.insert(std::make_pair(0x1528,"CANADIAN SYLLABICS YI"));
        data.insert(std::make_pair(0x1529,"CANADIAN SYLLABICS YII"));
        data.insert(std::make_pair(0x152a,"CANADIAN SYLLABICS YO"));
        data.insert(std::make_pair(0x152b,"CANADIAN SYLLABICS YOO"));
        data.insert(std::make_pair(0x152c,"CANADIAN SYLLABICS Y-CREE YOO"));
        data.insert(std::make_pair(0x152d,"CANADIAN SYLLABICS YA"));
        data.insert(std::make_pair(0x152e,"CANADIAN SYLLABICS YAA"));
        data.insert(std::make_pair(0x152f,"CANADIAN SYLLABICS YWE"));
        data.insert(std::make_pair(0x1530,"CANADIAN SYLLABICS WEST-CREE YWE"));
        data.insert(std::make_pair(0x1531,"CANADIAN SYLLABICS YWI"));
        data.insert(std::make_pair(0x1532,"CANADIAN SYLLABICS WEST-CREE YWI"));
        data.insert(std::make_pair(0x1533,"CANADIAN SYLLABICS YWII"));
        data.insert(std::make_pair(0x1534,"CANADIAN SYLLABICS WEST-CREE YWII"));
        data.insert(std::make_pair(0x1535,"CANADIAN SYLLABICS YWO"));
        data.insert(std::make_pair(0x1536,"CANADIAN SYLLABICS WEST-CREE YWO"));
        data.insert(std::make_pair(0x1537,"CANADIAN SYLLABICS YWOO"));
        data.insert(std::make_pair(0x1538,"CANADIAN SYLLABICS WEST-CREE YWOO"));
        data.insert(std::make_pair(0x1539,"CANADIAN SYLLABICS YWA"));
        data.insert(std::make_pair(0x153a,"CANADIAN SYLLABICS WEST-CREE YWA"));
        data.insert(std::make_pair(0x153b,"CANADIAN SYLLABICS YWAA"));
        data.insert(std::make_pair(0x153c,"CANADIAN SYLLABICS WEST-CREE YWAA"));
        data.insert(std::make_pair(0x153d,"CANADIAN SYLLABICS NASKAPI YWAA"));
        data.insert(std::make_pair(0x153e,"CANADIAN SYLLABICS Y"));
        data.insert(std::make_pair(0x153f,"CANADIAN SYLLABICS BIBLE-CREE Y"));
        data.insert(std::make_pair(0x1540,"CANADIAN SYLLABICS WEST-CREE Y"));
        data.insert(std::make_pair(0x1541,"CANADIAN SYLLABICS SAYISI YI"));
        data.insert(std::make_pair(0x1542,"CANADIAN SYLLABICS RE"));
        data.insert(std::make_pair(0x1543,"CANADIAN SYLLABICS R-CREE RE"));
        data.insert(std::make_pair(0x1544,"CANADIAN SYLLABICS WEST-CREE LE"));
        data.insert(std::make_pair(0x1545,"CANADIAN SYLLABICS RAAI"));
        data.insert(std::make_pair(0x1546,"CANADIAN SYLLABICS RI"));
        data.insert(std::make_pair(0x1547,"CANADIAN SYLLABICS RII"));
        data.insert(std::make_pair(0x1548,"CANADIAN SYLLABICS RO"));
        data.insert(std::make_pair(0x1549,"CANADIAN SYLLABICS ROO"));
        data.insert(std::make_pair(0x154a,"CANADIAN SYLLABICS WEST-CREE LO"));
        data.insert(std::make_pair(0x154b,"CANADIAN SYLLABICS RA"));
        data.insert(std::make_pair(0x154c,"CANADIAN SYLLABICS RAA"));
        data.insert(std::make_pair(0x154d,"CANADIAN SYLLABICS WEST-CREE LA"));
        data.insert(std::make_pair(0x154e,"CANADIAN SYLLABICS RWAA"));
        data.insert(std::make_pair(0x154f,"CANADIAN SYLLABICS WEST-CREE RWAA"));
        data.insert(std::make_pair(0x1550,"CANADIAN SYLLABICS R"));
        data.insert(std::make_pair(0x1551,"CANADIAN SYLLABICS WEST-CREE R"));
        data.insert(std::make_pair(0x1552,"CANADIAN SYLLABICS MEDIAL R"));
        data.insert(std::make_pair(0x1553,"CANADIAN SYLLABICS FE"));
        data.insert(std::make_pair(0x1554,"CANADIAN SYLLABICS FAAI"));
        data.insert(std::make_pair(0x1555,"CANADIAN SYLLABICS FI"));
        data.insert(std::make_pair(0x1556,"CANADIAN SYLLABICS FII"));
        data.insert(std::make_pair(0x1557,"CANADIAN SYLLABICS FO"));
        data.insert(std::make_pair(0x1558,"CANADIAN SYLLABICS FOO"));
        data.insert(std::make_pair(0x1559,"CANADIAN SYLLABICS FA"));
        data.insert(std::make_pair(0x155a,"CANADIAN SYLLABICS FAA"));
        data.insert(std::make_pair(0x155b,"CANADIAN SYLLABICS FWAA"));
        data.insert(std::make_pair(0x155c,"CANADIAN SYLLABICS WEST-CREE FWAA"));
        data.insert(std::make_pair(0x155d,"CANADIAN SYLLABICS F"));
        data.insert(std::make_pair(0x155e,"CANADIAN SYLLABICS THE"));
        data.insert(std::make_pair(0x155f,"CANADIAN SYLLABICS N-CREE THE"));
        data.insert(std::make_pair(0x1560,"CANADIAN SYLLABICS THI"));
        data.insert(std::make_pair(0x1561,"CANADIAN SYLLABICS N-CREE THI"));
        data.insert(std::make_pair(0x1562,"CANADIAN SYLLABICS THII"));
        data.insert(std::make_pair(0x1563,"CANADIAN SYLLABICS N-CREE THII"));
        data.insert(std::make_pair(0x1564,"CANADIAN SYLLABICS THO"));
        data.insert(std::make_pair(0x1565,"CANADIAN SYLLABICS THOO"));
        data.insert(std::make_pair(0x1566,"CANADIAN SYLLABICS THA"));
        data.insert(std::make_pair(0x1567,"CANADIAN SYLLABICS THAA"));
        data.insert(std::make_pair(0x1568,"CANADIAN SYLLABICS THWAA"));
        data.insert(std::make_pair(0x1569,"CANADIAN SYLLABICS WEST-CREE THWAA"));
        data.insert(std::make_pair(0x156a,"CANADIAN SYLLABICS TH"));
        data.insert(std::make_pair(0x156b,"CANADIAN SYLLABICS TTHE"));
        data.insert(std::make_pair(0x156c,"CANADIAN SYLLABICS TTHI"));
        data.insert(std::make_pair(0x156d,"CANADIAN SYLLABICS TTHO"));
        data.insert(std::make_pair(0x156e,"CANADIAN SYLLABICS TTHA"));
        data.insert(std::make_pair(0x156f,"CANADIAN SYLLABICS TTH"));
        data.insert(std::make_pair(0x1570,"CANADIAN SYLLABICS TYE"));
        data.insert(std::make_pair(0x1571,"CANADIAN SYLLABICS TYI"));
        data.insert(std::make_pair(0x1572,"CANADIAN SYLLABICS TYO"));
        data.insert(std::make_pair(0x1573,"CANADIAN SYLLABICS TYA"));
        data.insert(std::make_pair(0x1574,"CANADIAN SYLLABICS NUNAVIK HE"));
        data.insert(std::make_pair(0x1575,"CANADIAN SYLLABICS NUNAVIK HI"));
        data.insert(std::make_pair(0x1576,"CANADIAN SYLLABICS NUNAVIK HII"));
        data.insert(std::make_pair(0x1577,"CANADIAN SYLLABICS NUNAVIK HO"));
        data.insert(std::make_pair(0x1578,"CANADIAN SYLLABICS NUNAVIK HOO"));
        data.insert(std::make_pair(0x1579,"CANADIAN SYLLABICS NUNAVIK HA"));
        data.insert(std::make_pair(0x157a,"CANADIAN SYLLABICS NUNAVIK HAA"));
        data.insert(std::make_pair(0x157b,"CANADIAN SYLLABICS NUNAVIK H"));
        data.insert(std::make_pair(0x157c,"CANADIAN SYLLABICS NUNAVUT H"));
        data.insert(std::make_pair(0x157d,"CANADIAN SYLLABICS HK"));
        data.insert(std::make_pair(0x157e,"CANADIAN SYLLABICS QAAI"));
        data.insert(std::make_pair(0x157f,"CANADIAN SYLLABICS QI"));
        data.insert(std::make_pair(0x1580,"CANADIAN SYLLABICS QII"));
        data.insert(std::make_pair(0x1581,"CANADIAN SYLLABICS QO"));
        data.insert(std::make_pair(0x1582,"CANADIAN SYLLABICS QOO"));
        data.insert(std::make_pair(0x1583,"CANADIAN SYLLABICS QA"));
        data.insert(std::make_pair(0x1584,"CANADIAN SYLLABICS QAA"));
        data.insert(std::make_pair(0x1585,"CANADIAN SYLLABICS Q"));
        data.insert(std::make_pair(0x1586,"CANADIAN SYLLABICS TLHE"));
        data.insert(std::make_pair(0x1587,"CANADIAN SYLLABICS TLHI"));
        data.insert(std::make_pair(0x1588,"CANADIAN SYLLABICS TLHO"));
        data.insert(std::make_pair(0x1589,"CANADIAN SYLLABICS TLHA"));
        data.insert(std::make_pair(0x158a,"CANADIAN SYLLABICS WEST-CREE RE"));
        data.insert(std::make_pair(0x158b,"CANADIAN SYLLABICS WEST-CREE RI"));
        data.insert(std::make_pair(0x158c,"CANADIAN SYLLABICS WEST-CREE RO"));
        data.insert(std::make_pair(0x158d,"CANADIAN SYLLABICS WEST-CREE RA"));
        data.insert(std::make_pair(0x158e,"CANADIAN SYLLABICS NGAAI"));
        data.insert(std::make_pair(0x158f,"CANADIAN SYLLABICS NGI"));
        data.insert(std::make_pair(0x1590,"CANADIAN SYLLABICS NGII"));
        data.insert(std::make_pair(0x1591,"CANADIAN SYLLABICS NGO"));
        data.insert(std::make_pair(0x1592,"CANADIAN SYLLABICS NGOO"));
        data.insert(std::make_pair(0x1593,"CANADIAN SYLLABICS NGA"));
        data.insert(std::make_pair(0x1594,"CANADIAN SYLLABICS NGAA"));
        data.insert(std::make_pair(0x1595,"CANADIAN SYLLABICS NG"));
        data.insert(std::make_pair(0x1596,"CANADIAN SYLLABICS NNG"));
        data.insert(std::make_pair(0x1597,"CANADIAN SYLLABICS SAYISI SHE"));
        data.insert(std::make_pair(0x1598,"CANADIAN SYLLABICS SAYISI SHI"));
        data.insert(std::make_pair(0x1599,"CANADIAN SYLLABICS SAYISI SHO"));
        data.insert(std::make_pair(0x159a,"CANADIAN SYLLABICS SAYISI SHA"));
        data.insert(std::make_pair(0x159b,"CANADIAN SYLLABICS WOODS-CREE THE"));
        data.insert(std::make_pair(0x159c,"CANADIAN SYLLABICS WOODS-CREE THI"));
        data.insert(std::make_pair(0x159d,"CANADIAN SYLLABICS WOODS-CREE THO"));
        data.insert(std::make_pair(0x159e,"CANADIAN SYLLABICS WOODS-CREE THA"));
        data.insert(std::make_pair(0x159f,"CANADIAN SYLLABICS WOODS-CREE TH"));
        data.insert(std::make_pair(0x15a0,"CANADIAN SYLLABICS LHI"));
        data.insert(std::make_pair(0x15a1,"CANADIAN SYLLABICS LHII"));
        data.insert(std::make_pair(0x15a2,"CANADIAN SYLLABICS LHO"));
        data.insert(std::make_pair(0x15a3,"CANADIAN SYLLABICS LHOO"));
        data.insert(std::make_pair(0x15a4,"CANADIAN SYLLABICS LHA"));
        data.insert(std::make_pair(0x15a5,"CANADIAN SYLLABICS LHAA"));
        data.insert(std::make_pair(0x15a6,"CANADIAN SYLLABICS LH"));
        data.insert(std::make_pair(0x15a7,"CANADIAN SYLLABICS TH-CREE THE"));
        data.insert(std::make_pair(0x15a8,"CANADIAN SYLLABICS TH-CREE THI"));
        data.insert(std::make_pair(0x15a9,"CANADIAN SYLLABICS TH-CREE THII"));
        data.insert(std::make_pair(0x15aa,"CANADIAN SYLLABICS TH-CREE THO"));
        data.insert(std::make_pair(0x15ab,"CANADIAN SYLLABICS TH-CREE THOO"));
        data.insert(std::make_pair(0x15ac,"CANADIAN SYLLABICS TH-CREE THA"));
        data.insert(std::make_pair(0x15ad,"CANADIAN SYLLABICS TH-CREE THAA"));
        data.insert(std::make_pair(0x15ae,"CANADIAN SYLLABICS TH-CREE TH"));
        data.insert(std::make_pair(0x15af,"CANADIAN SYLLABICS AIVILIK B"));
        data.insert(std::make_pair(0x15b0,"CANADIAN SYLLABICS BLACKFOOT E"));
        data.insert(std::make_pair(0x15b1,"CANADIAN SYLLABICS BLACKFOOT I"));
        data.insert(std::make_pair(0x15b2,"CANADIAN SYLLABICS BLACKFOOT O"));
        data.insert(std::make_pair(0x15b3,"CANADIAN SYLLABICS BLACKFOOT A"));
        data.insert(std::make_pair(0x15b4,"CANADIAN SYLLABICS BLACKFOOT WE"));
        data.insert(std::make_pair(0x15b5,"CANADIAN SYLLABICS BLACKFOOT WI"));
        data.insert(std::make_pair(0x15b6,"CANADIAN SYLLABICS BLACKFOOT WO"));
        data.insert(std::make_pair(0x15b7,"CANADIAN SYLLABICS BLACKFOOT WA"));
        data.insert(std::make_pair(0x15b8,"CANADIAN SYLLABICS BLACKFOOT NE"));
        data.insert(std::make_pair(0x15b9,"CANADIAN SYLLABICS BLACKFOOT NI"));
        data.insert(std::make_pair(0x15ba,"CANADIAN SYLLABICS BLACKFOOT NO"));
        data.insert(std::make_pair(0x15bb,"CANADIAN SYLLABICS BLACKFOOT NA"));
        data.insert(std::make_pair(0x15bc,"CANADIAN SYLLABICS BLACKFOOT KE"));
        data.insert(std::make_pair(0x15bd,"CANADIAN SYLLABICS BLACKFOOT KI"));
        data.insert(std::make_pair(0x15be,"CANADIAN SYLLABICS BLACKFOOT KO"));
        data.insert(std::make_pair(0x15bf,"CANADIAN SYLLABICS BLACKFOOT KA"));
        data.insert(std::make_pair(0x15c0,"CANADIAN SYLLABICS SAYISI HE"));
        data.insert(std::make_pair(0x15c1,"CANADIAN SYLLABICS SAYISI HI"));
        data.insert(std::make_pair(0x15c2,"CANADIAN SYLLABICS SAYISI HO"));
        data.insert(std::make_pair(0x15c3,"CANADIAN SYLLABICS SAYISI HA"));
        data.insert(std::make_pair(0x15c4,"CANADIAN SYLLABICS CARRIER GHU"));
        data.insert(std::make_pair(0x15c5,"CANADIAN SYLLABICS CARRIER GHO"));
        data.insert(std::make_pair(0x15c6,"CANADIAN SYLLABICS CARRIER GHE"));
        data.insert(std::make_pair(0x15c7,"CANADIAN SYLLABICS CARRIER GHEE"));
        data.insert(std::make_pair(0x15c8,"CANADIAN SYLLABICS CARRIER GHI"));
        data.insert(std::make_pair(0x15c9,"CANADIAN SYLLABICS CARRIER GHA"));
        data.insert(std::make_pair(0x15ca,"CANADIAN SYLLABICS CARRIER RU"));
        data.insert(std::make_pair(0x15cb,"CANADIAN SYLLABICS CARRIER RO"));
        data.insert(std::make_pair(0x15cc,"CANADIAN SYLLABICS CARRIER RE"));
        data.insert(std::make_pair(0x15cd,"CANADIAN SYLLABICS CARRIER REE"));
        data.insert(std::make_pair(0x15ce,"CANADIAN SYLLABICS CARRIER RI"));
        data.insert(std::make_pair(0x15cf,"CANADIAN SYLLABICS CARRIER RA"));
        data.insert(std::make_pair(0x15d0,"CANADIAN SYLLABICS CARRIER WU"));
        data.insert(std::make_pair(0x15d1,"CANADIAN SYLLABICS CARRIER WO"));
        data.insert(std::make_pair(0x15d2,"CANADIAN SYLLABICS CARRIER WE"));
        data.insert(std::make_pair(0x15d3,"CANADIAN SYLLABICS CARRIER WEE"));
        data.insert(std::make_pair(0x15d4,"CANADIAN SYLLABICS CARRIER WI"));
        data.insert(std::make_pair(0x15d5,"CANADIAN SYLLABICS CARRIER WA"));
        data.insert(std::make_pair(0x15d6,"CANADIAN SYLLABICS CARRIER HWU"));
        data.insert(std::make_pair(0x15d7,"CANADIAN SYLLABICS CARRIER HWO"));
        data.insert(std::make_pair(0x15d8,"CANADIAN SYLLABICS CARRIER HWE"));
        data.insert(std::make_pair(0x15d9,"CANADIAN SYLLABICS CARRIER HWEE"));
        data.insert(std::make_pair(0x15da,"CANADIAN SYLLABICS CARRIER HWI"));
        data.insert(std::make_pair(0x15db,"CANADIAN SYLLABICS CARRIER HWA"));
        data.insert(std::make_pair(0x15dc,"CANADIAN SYLLABICS CARRIER THU"));
        data.insert(std::make_pair(0x15dd,"CANADIAN SYLLABICS CARRIER THO"));
        data.insert(std::make_pair(0x15de,"CANADIAN SYLLABICS CARRIER THE"));
        data.insert(std::make_pair(0x15df,"CANADIAN SYLLABICS CARRIER THEE"));
        data.insert(std::make_pair(0x15e0,"CANADIAN SYLLABICS CARRIER THI"));
        data.insert(std::make_pair(0x15e1,"CANADIAN SYLLABICS CARRIER THA"));
        data.insert(std::make_pair(0x15e2,"CANADIAN SYLLABICS CARRIER TTU"));
        data.insert(std::make_pair(0x15e3,"CANADIAN SYLLABICS CARRIER TTO"));
        data.insert(std::make_pair(0x15e4,"CANADIAN SYLLABICS CARRIER TTE"));
        data.insert(std::make_pair(0x15e5,"CANADIAN SYLLABICS CARRIER TTEE"));
        data.insert(std::make_pair(0x15e6,"CANADIAN SYLLABICS CARRIER TTI"));
        data.insert(std::make_pair(0x15e7,"CANADIAN SYLLABICS CARRIER TTA"));
        data.insert(std::make_pair(0x15e8,"CANADIAN SYLLABICS CARRIER PU"));
        data.insert(std::make_pair(0x15e9,"CANADIAN SYLLABICS CARRIER PO"));
        data.insert(std::make_pair(0x15ea,"CANADIAN SYLLABICS CARRIER PE"));
        data.insert(std::make_pair(0x15eb,"CANADIAN SYLLABICS CARRIER PEE"));
        data.insert(std::make_pair(0x15ec,"CANADIAN SYLLABICS CARRIER PI"));
        data.insert(std::make_pair(0x15ed,"CANADIAN SYLLABICS CARRIER PA"));
        data.insert(std::make_pair(0x15ee,"CANADIAN SYLLABICS CARRIER P"));
        data.insert(std::make_pair(0x15ef,"CANADIAN SYLLABICS CARRIER GU"));
        data.insert(std::make_pair(0x15f0,"CANADIAN SYLLABICS CARRIER GO"));
        data.insert(std::make_pair(0x15f1,"CANADIAN SYLLABICS CARRIER GE"));
        data.insert(std::make_pair(0x15f2,"CANADIAN SYLLABICS CARRIER GEE"));
        data.insert(std::make_pair(0x15f3,"CANADIAN SYLLABICS CARRIER GI"));
        data.insert(std::make_pair(0x15f4,"CANADIAN SYLLABICS CARRIER GA"));
        data.insert(std::make_pair(0x15f5,"CANADIAN SYLLABICS CARRIER KHU"));
        data.insert(std::make_pair(0x15f6,"CANADIAN SYLLABICS CARRIER KHO"));
        data.insert(std::make_pair(0x15f7,"CANADIAN SYLLABICS CARRIER KHE"));
        data.insert(std::make_pair(0x15f8,"CANADIAN SYLLABICS CARRIER KHEE"));
        data.insert(std::make_pair(0x15f9,"CANADIAN SYLLABICS CARRIER KHI"));
        data.insert(std::make_pair(0x15fa,"CANADIAN SYLLABICS CARRIER KHA"));
        data.insert(std::make_pair(0x15fb,"CANADIAN SYLLABICS CARRIER KKU"));
        data.insert(std::make_pair(0x15fc,"CANADIAN SYLLABICS CARRIER KKO"));
        data.insert(std::make_pair(0x15fd,"CANADIAN SYLLABICS CARRIER KKE"));
        data.insert(std::make_pair(0x15fe,"CANADIAN SYLLABICS CARRIER KKEE"));
        data.insert(std::make_pair(0x15ff,"CANADIAN SYLLABICS CARRIER KKI"));
        data.insert(std::make_pair(0x1600,"CANADIAN SYLLABICS CARRIER KKA"));
        data.insert(std::make_pair(0x1601,"CANADIAN SYLLABICS CARRIER KK"));
        data.insert(std::make_pair(0x1602,"CANADIAN SYLLABICS CARRIER NU"));
        data.insert(std::make_pair(0x1603,"CANADIAN SYLLABICS CARRIER NO"));
        data.insert(std::make_pair(0x1604,"CANADIAN SYLLABICS CARRIER NE"));
        data.insert(std::make_pair(0x1605,"CANADIAN SYLLABICS CARRIER NEE"));
        data.insert(std::make_pair(0x1606,"CANADIAN SYLLABICS CARRIER NI"));
        data.insert(std::make_pair(0x1607,"CANADIAN SYLLABICS CARRIER NA"));
        data.insert(std::make_pair(0x1608,"CANADIAN SYLLABICS CARRIER MU"));
        data.insert(std::make_pair(0x1609,"CANADIAN SYLLABICS CARRIER MO"));
        data.insert(std::make_pair(0x160a,"CANADIAN SYLLABICS CARRIER ME"));
        data.insert(std::make_pair(0x160b,"CANADIAN SYLLABICS CARRIER MEE"));
        data.insert(std::make_pair(0x160c,"CANADIAN SYLLABICS CARRIER MI"));
        data.insert(std::make_pair(0x160d,"CANADIAN SYLLABICS CARRIER MA"));
        data.insert(std::make_pair(0x160e,"CANADIAN SYLLABICS CARRIER YU"));
        data.insert(std::make_pair(0x160f,"CANADIAN SYLLABICS CARRIER YO"));
        data.insert(std::make_pair(0x1610,"CANADIAN SYLLABICS CARRIER YE"));
        data.insert(std::make_pair(0x1611,"CANADIAN SYLLABICS CARRIER YEE"));
        data.insert(std::make_pair(0x1612,"CANADIAN SYLLABICS CARRIER YI"));
        data.insert(std::make_pair(0x1613,"CANADIAN SYLLABICS CARRIER YA"));
        data.insert(std::make_pair(0x1614,"CANADIAN SYLLABICS CARRIER JU"));
        data.insert(std::make_pair(0x1615,"CANADIAN SYLLABICS SAYISI JU"));
        data.insert(std::make_pair(0x1616,"CANADIAN SYLLABICS CARRIER JO"));
        data.insert(std::make_pair(0x1617,"CANADIAN SYLLABICS CARRIER JE"));
        data.insert(std::make_pair(0x1618,"CANADIAN SYLLABICS CARRIER JEE"));
        data.insert(std::make_pair(0x1619,"CANADIAN SYLLABICS CARRIER JI"));
        data.insert(std::make_pair(0x161a,"CANADIAN SYLLABICS SAYISI JI"));
        data.insert(std::make_pair(0x161b,"CANADIAN SYLLABICS CARRIER JA"));
        data.insert(std::make_pair(0x161c,"CANADIAN SYLLABICS CARRIER JJU"));
        data.insert(std::make_pair(0x161d,"CANADIAN SYLLABICS CARRIER JJO"));
        data.insert(std::make_pair(0x161e,"CANADIAN SYLLABICS CARRIER JJE"));
        data.insert(std::make_pair(0x161f,"CANADIAN SYLLABICS CARRIER JJEE"));
        data.insert(std::make_pair(0x1620,"CANADIAN SYLLABICS CARRIER JJI"));
        data.insert(std::make_pair(0x1621,"CANADIAN SYLLABICS CARRIER JJA"));
        data.insert(std::make_pair(0x1622,"CANADIAN SYLLABICS CARRIER LU"));
        data.insert(std::make_pair(0x1623,"CANADIAN SYLLABICS CARRIER LO"));
        data.insert(std::make_pair(0x1624,"CANADIAN SYLLABICS CARRIER LE"));
        data.insert(std::make_pair(0x1625,"CANADIAN SYLLABICS CARRIER LEE"));
        data.insert(std::make_pair(0x1626,"CANADIAN SYLLABICS CARRIER LI"));
        data.insert(std::make_pair(0x1627,"CANADIAN SYLLABICS CARRIER LA"));
        data.insert(std::make_pair(0x1628,"CANADIAN SYLLABICS CARRIER DLU"));
        data.insert(std::make_pair(0x1629,"CANADIAN SYLLABICS CARRIER DLO"));
        data.insert(std::make_pair(0x162a,"CANADIAN SYLLABICS CARRIER DLE"));
        data.insert(std::make_pair(0x162b,"CANADIAN SYLLABICS CARRIER DLEE"));
        data.insert(std::make_pair(0x162c,"CANADIAN SYLLABICS CARRIER DLI"));
        data.insert(std::make_pair(0x162d,"CANADIAN SYLLABICS CARRIER DLA"));
        data.insert(std::make_pair(0x162e,"CANADIAN SYLLABICS CARRIER LHU"));
        data.insert(std::make_pair(0x162f,"CANADIAN SYLLABICS CARRIER LHO"));
        data.insert(std::make_pair(0x1630,"CANADIAN SYLLABICS CARRIER LHE"));
        data.insert(std::make_pair(0x1631,"CANADIAN SYLLABICS CARRIER LHEE"));
        data.insert(std::make_pair(0x1632,"CANADIAN SYLLABICS CARRIER LHI"));
        data.insert(std::make_pair(0x1633,"CANADIAN SYLLABICS CARRIER LHA"));
        data.insert(std::make_pair(0x1634,"CANADIAN SYLLABICS CARRIER TLHU"));
        data.insert(std::make_pair(0x1635,"CANADIAN SYLLABICS CARRIER TLHO"));
        data.insert(std::make_pair(0x1636,"CANADIAN SYLLABICS CARRIER TLHE"));
        data.insert(std::make_pair(0x1637,"CANADIAN SYLLABICS CARRIER TLHEE"));
        data.insert(std::make_pair(0x1638,"CANADIAN SYLLABICS CARRIER TLHI"));
        data.insert(std::make_pair(0x1639,"CANADIAN SYLLABICS CARRIER TLHA"));
        data.insert(std::make_pair(0x163a,"CANADIAN SYLLABICS CARRIER TLU"));
        data.insert(std::make_pair(0x163b,"CANADIAN SYLLABICS CARRIER TLO"));
        data.insert(std::make_pair(0x163c,"CANADIAN SYLLABICS CARRIER TLE"));
        data.insert(std::make_pair(0x163d,"CANADIAN SYLLABICS CARRIER TLEE"));
        data.insert(std::make_pair(0x163e,"CANADIAN SYLLABICS CARRIER TLI"));
        data.insert(std::make_pair(0x163f,"CANADIAN SYLLABICS CARRIER TLA"));
        data.insert(std::make_pair(0x1640,"CANADIAN SYLLABICS CARRIER ZU"));
        data.insert(std::make_pair(0x1641,"CANADIAN SYLLABICS CARRIER ZO"));
        data.insert(std::make_pair(0x1642,"CANADIAN SYLLABICS CARRIER ZE"));
        data.insert(std::make_pair(0x1643,"CANADIAN SYLLABICS CARRIER ZEE"));
        data.insert(std::make_pair(0x1644,"CANADIAN SYLLABICS CARRIER ZI"));
        data.insert(std::make_pair(0x1645,"CANADIAN SYLLABICS CARRIER ZA"));
        data.insert(std::make_pair(0x1646,"CANADIAN SYLLABICS CARRIER Z"));
        data.insert(std::make_pair(0x1647,"CANADIAN SYLLABICS CARRIER INITIAL Z"));
        data.insert(std::make_pair(0x1648,"CANADIAN SYLLABICS CARRIER DZU"));
        data.insert(std::make_pair(0x1649,"CANADIAN SYLLABICS CARRIER DZO"));
        data.insert(std::make_pair(0x164a,"CANADIAN SYLLABICS CARRIER DZE"));
        data.insert(std::make_pair(0x164b,"CANADIAN SYLLABICS CARRIER DZEE"));
        data.insert(std::make_pair(0x164c,"CANADIAN SYLLABICS CARRIER DZI"));
        data.insert(std::make_pair(0x164d,"CANADIAN SYLLABICS CARRIER DZA"));
        data.insert(std::make_pair(0x164e,"CANADIAN SYLLABICS CARRIER SU"));
        data.insert(std::make_pair(0x164f,"CANADIAN SYLLABICS CARRIER SO"));
        data.insert(std::make_pair(0x1650,"CANADIAN SYLLABICS CARRIER SE"));
        data.insert(std::make_pair(0x1651,"CANADIAN SYLLABICS CARRIER SEE"));
        data.insert(std::make_pair(0x1652,"CANADIAN SYLLABICS CARRIER SI"));
        data.insert(std::make_pair(0x1653,"CANADIAN SYLLABICS CARRIER SA"));
        data.insert(std::make_pair(0x1654,"CANADIAN SYLLABICS CARRIER SHU"));
        data.insert(std::make_pair(0x1655,"CANADIAN SYLLABICS CARRIER SHO"));
        data.insert(std::make_pair(0x1656,"CANADIAN SYLLABICS CARRIER SHE"));
        data.insert(std::make_pair(0x1657,"CANADIAN SYLLABICS CARRIER SHEE"));
        data.insert(std::make_pair(0x1658,"CANADIAN SYLLABICS CARRIER SHI"));
        data.insert(std::make_pair(0x1659,"CANADIAN SYLLABICS CARRIER SHA"));
        data.insert(std::make_pair(0x165a,"CANADIAN SYLLABICS CARRIER SH"));
        data.insert(std::make_pair(0x165b,"CANADIAN SYLLABICS CARRIER TSU"));
        data.insert(std::make_pair(0x165c,"CANADIAN SYLLABICS CARRIER TSO"));
        data.insert(std::make_pair(0x165d,"CANADIAN SYLLABICS CARRIER TSE"));
        data.insert(std::make_pair(0x165e,"CANADIAN SYLLABICS CARRIER TSEE"));
        data.insert(std::make_pair(0x165f,"CANADIAN SYLLABICS CARRIER TSI"));
        data.insert(std::make_pair(0x1660,"CANADIAN SYLLABICS CARRIER TSA"));
        data.insert(std::make_pair(0x1661,"CANADIAN SYLLABICS CARRIER CHU"));
        data.insert(std::make_pair(0x1662,"CANADIAN SYLLABICS CARRIER CHO"));
        data.insert(std::make_pair(0x1663,"CANADIAN SYLLABICS CARRIER CHE"));
        data.insert(std::make_pair(0x1664,"CANADIAN SYLLABICS CARRIER CHEE"));
        data.insert(std::make_pair(0x1665,"CANADIAN SYLLABICS CARRIER CHI"));
        data.insert(std::make_pair(0x1666,"CANADIAN SYLLABICS CARRIER CHA"));
        data.insert(std::make_pair(0x1667,"CANADIAN SYLLABICS CARRIER TTSU"));
        data.insert(std::make_pair(0x1668,"CANADIAN SYLLABICS CARRIER TTSO"));
        data.insert(std::make_pair(0x1669,"CANADIAN SYLLABICS CARRIER TTSE"));
        data.insert(std::make_pair(0x166a,"CANADIAN SYLLABICS CARRIER TTSEE"));
        data.insert(std::make_pair(0x166b,"CANADIAN SYLLABICS CARRIER TTSI"));
        data.insert(std::make_pair(0x166c,"CANADIAN SYLLABICS CARRIER TTSA"));
        data.insert(std::make_pair(0x166d,"CANADIAN SYLLABICS CHI SIGN"));
        data.insert(std::make_pair(0x166e,"CANADIAN SYLLABICS FULL STOP"));
        data.insert(std::make_pair(0x166f,"CANADIAN SYLLABICS QAI"));
        data.insert(std::make_pair(0x1670,"CANADIAN SYLLABICS NGAI"));
        data.insert(std::make_pair(0x1671,"CANADIAN SYLLABICS NNGI"));
        data.insert(std::make_pair(0x1672,"CANADIAN SYLLABICS NNGII"));
        data.insert(std::make_pair(0x1673,"CANADIAN SYLLABICS NNGO"));
        data.insert(std::make_pair(0x1674,"CANADIAN SYLLABICS NNGOO"));
        data.insert(std::make_pair(0x1675,"CANADIAN SYLLABICS NNGA"));
        data.insert(std::make_pair(0x1676,"CANADIAN SYLLABICS NNGAA"));
        data.insert(std::make_pair(0x1677,"CANADIAN SYLLABICS WOODS-CREE THWEE"));
        data.insert(std::make_pair(0x1678,"CANADIAN SYLLABICS WOODS-CREE THWI"));
        data.insert(std::make_pair(0x1679,"CANADIAN SYLLABICS WOODS-CREE THWII"));
        data.insert(std::make_pair(0x167a,"CANADIAN SYLLABICS WOODS-CREE THWO"));
        data.insert(std::make_pair(0x167b,"CANADIAN SYLLABICS WOODS-CREE THWOO"));
        data.insert(std::make_pair(0x167c,"CANADIAN SYLLABICS WOODS-CREE THWA"));
        data.insert(std::make_pair(0x167d,"CANADIAN SYLLABICS WOODS-CREE THWAA"));
        data.insert(std::make_pair(0x167e,"CANADIAN SYLLABICS WOODS-CREE FINAL TH"));
        data.insert(std::make_pair(0x167f,"CANADIAN SYLLABICS BLACKFOOT W"));
        data.insert(std::make_pair(0x1680,"OGHAM SPACE MARK"));
        data.insert(std::make_pair(0x1681,"OGHAM LETTER BEITH"));
        data.insert(std::make_pair(0x1682,"OGHAM LETTER LUIS"));
        data.insert(std::make_pair(0x1683,"OGHAM LETTER FEARN"));
        data.insert(std::make_pair(0x1684,"OGHAM LETTER SAIL"));
        data.insert(std::make_pair(0x1685,"OGHAM LETTER NION"));
        data.insert(std::make_pair(0x1686,"OGHAM LETTER UATH"));
        data.insert(std::make_pair(0x1687,"OGHAM LETTER DAIR"));
        data.insert(std::make_pair(0x1688,"OGHAM LETTER TINNE"));
        data.insert(std::make_pair(0x1689,"OGHAM LETTER COLL"));
        data.insert(std::make_pair(0x168a,"OGHAM LETTER CEIRT"));
        data.insert(std::make_pair(0x168b,"OGHAM LETTER MUIN"));
        data.insert(std::make_pair(0x168c,"OGHAM LETTER GORT"));
        data.insert(std::make_pair(0x168d,"OGHAM LETTER NGEADAL"));
        data.insert(std::make_pair(0x168e,"OGHAM LETTER STRAIF"));
        data.insert(std::make_pair(0x168f,"OGHAM LETTER RUIS"));
        data.insert(std::make_pair(0x1690,"OGHAM LETTER AILM"));
        data.insert(std::make_pair(0x1691,"OGHAM LETTER ONN"));
        data.insert(std::make_pair(0x1692,"OGHAM LETTER UR"));
        data.insert(std::make_pair(0x1693,"OGHAM LETTER EADHADH"));
        data.insert(std::make_pair(0x1694,"OGHAM LETTER IODHADH"));
        data.insert(std::make_pair(0x1695,"OGHAM LETTER EABHADH"));
        data.insert(std::make_pair(0x1696,"OGHAM LETTER OR"));
        data.insert(std::make_pair(0x1697,"OGHAM LETTER UILLEANN"));
        data.insert(std::make_pair(0x1698,"OGHAM LETTER IFIN"));
        data.insert(std::make_pair(0x1699,"OGHAM LETTER EAMHANCHOLL"));
        data.insert(std::make_pair(0x169a,"OGHAM LETTER PEITH"));
        data.insert(std::make_pair(0x169b,"OGHAM FEATHER MARK"));
        data.insert(std::make_pair(0x169c,"OGHAM REVERSED FEATHER MARK"));
        data.insert(std::make_pair(0x16a0,"RUNIC LETTER FEHU FEOH FE F"));
        data.insert(std::make_pair(0x16a1,"RUNIC LETTER V"));
        data.insert(std::make_pair(0x16a2,"RUNIC LETTER URUZ UR U"));
        data.insert(std::make_pair(0x16a3,"RUNIC LETTER YR"));
        data.insert(std::make_pair(0x16a4,"RUNIC LETTER Y"));
        data.insert(std::make_pair(0x16a5,"RUNIC LETTER W"));
        data.insert(std::make_pair(0x16a6,"RUNIC LETTER THURISAZ THURS THORN"));
        data.insert(std::make_pair(0x16a7,"RUNIC LETTER ETH"));
        data.insert(std::make_pair(0x16a8,"RUNIC LETTER ANSUZ A"));
        data.insert(std::make_pair(0x16a9,"RUNIC LETTER OS O"));
        data.insert(std::make_pair(0x16aa,"RUNIC LETTER AC A"));
        data.insert(std::make_pair(0x16ab,"RUNIC LETTER AESC"));
        data.insert(std::make_pair(0x16ac,"RUNIC LETTER LONG-BRANCH-OSS O"));
        data.insert(std::make_pair(0x16ad,"RUNIC LETTER SHORT-TWIG-OSS O"));
        data.insert(std::make_pair(0x16ae,"RUNIC LETTER O"));
        data.insert(std::make_pair(0x16af,"RUNIC LETTER OE"));
        data.insert(std::make_pair(0x16b0,"RUNIC LETTER ON"));
        data.insert(std::make_pair(0x16b1,"RUNIC LETTER RAIDO RAD REID R"));
        data.insert(std::make_pair(0x16b2,"RUNIC LETTER KAUNA"));
        data.insert(std::make_pair(0x16b3,"RUNIC LETTER CEN"));
        data.insert(std::make_pair(0x16b4,"RUNIC LETTER KAUN K"));
        data.insert(std::make_pair(0x16b5,"RUNIC LETTER G"));
        data.insert(std::make_pair(0x16b6,"RUNIC LETTER ENG"));
        data.insert(std::make_pair(0x16b7,"RUNIC LETTER GEBO GYFU G"));
        data.insert(std::make_pair(0x16b8,"RUNIC LETTER GAR"));
        data.insert(std::make_pair(0x16b9,"RUNIC LETTER WUNJO WYNN W"));
        data.insert(std::make_pair(0x16ba,"RUNIC LETTER HAGLAZ H"));
        data.insert(std::make_pair(0x16bb,"RUNIC LETTER HAEGL H"));
        data.insert(std::make_pair(0x16bc,"RUNIC LETTER LONG-BRANCH-HAGALL H"));
        data.insert(std::make_pair(0x16bd,"RUNIC LETTER SHORT-TWIG-HAGALL H"));
        data.insert(std::make_pair(0x16be,"RUNIC LETTER NAUDIZ NYD NAUD N"));
        data.insert(std::make_pair(0x16bf,"RUNIC LETTER SHORT-TWIG-NAUD N"));
        data.insert(std::make_pair(0x16c0,"RUNIC LETTER DOTTED-N"));
        data.insert(std::make_pair(0x16c1,"RUNIC LETTER ISAZ IS ISS I"));
        data.insert(std::make_pair(0x16c2,"RUNIC LETTER E"));
        data.insert(std::make_pair(0x16c3,"RUNIC LETTER JERAN J"));
        data.insert(std::make_pair(0x16c4,"RUNIC LETTER GER"));
        data.insert(std::make_pair(0x16c5,"RUNIC LETTER LONG-BRANCH-AR AE"));
        data.insert(std::make_pair(0x16c6,"RUNIC LETTER SHORT-TWIG-AR A"));
        data.insert(std::make_pair(0x16c7,"RUNIC LETTER IWAZ EOH"));
        data.insert(std::make_pair(0x16c8,"RUNIC LETTER PERTHO PEORTH P"));
        data.insert(std::make_pair(0x16c9,"RUNIC LETTER ALGIZ EOLHX"));
        data.insert(std::make_pair(0x16ca,"RUNIC LETTER SOWILO S"));
        data.insert(std::make_pair(0x16cb,"RUNIC LETTER SIGEL LONG-BRANCH-SOL S"));
        data.insert(std::make_pair(0x16cc,"RUNIC LETTER SHORT-TWIG-SOL S"));
        data.insert(std::make_pair(0x16cd,"RUNIC LETTER C"));
        data.insert(std::make_pair(0x16ce,"RUNIC LETTER Z"));
        data.insert(std::make_pair(0x16cf,"RUNIC LETTER TIWAZ TIR TYR T"));
        data.insert(std::make_pair(0x16d0,"RUNIC LETTER SHORT-TWIG-TYR T"));
        data.insert(std::make_pair(0x16d1,"RUNIC LETTER D"));
        data.insert(std::make_pair(0x16d2,"RUNIC LETTER BERKANAN BEORC BJARKAN B"));
        data.insert(std::make_pair(0x16d3,"RUNIC LETTER SHORT-TWIG-BJARKAN B"));
        data.insert(std::make_pair(0x16d4,"RUNIC LETTER DOTTED-P"));
        data.insert(std::make_pair(0x16d5,"RUNIC LETTER OPEN-P"));
        data.insert(std::make_pair(0x16d6,"RUNIC LETTER EHWAZ EH E"));
        data.insert(std::make_pair(0x16d7,"RUNIC LETTER MANNAZ MAN M"));
        data.insert(std::make_pair(0x16d8,"RUNIC LETTER LONG-BRANCH-MADR M"));
        data.insert(std::make_pair(0x16d9,"RUNIC LETTER SHORT-TWIG-MADR M"));
        data.insert(std::make_pair(0x16da,"RUNIC LETTER LAUKAZ LAGU LOGR L"));
        data.insert(std::make_pair(0x16db,"RUNIC LETTER DOTTED-L"));
        data.insert(std::make_pair(0x16dc,"RUNIC LETTER INGWAZ"));
        data.insert(std::make_pair(0x16dd,"RUNIC LETTER ING"));
        data.insert(std::make_pair(0x16de,"RUNIC LETTER DAGAZ DAEG D"));
        data.insert(std::make_pair(0x16df,"RUNIC LETTER OTHALAN ETHEL O"));
        data.insert(std::make_pair(0x16e0,"RUNIC LETTER EAR"));
        data.insert(std::make_pair(0x16e1,"RUNIC LETTER IOR"));
        data.insert(std::make_pair(0x16e2,"RUNIC LETTER CWEORTH"));
        data.insert(std::make_pair(0x16e3,"RUNIC LETTER CALC"));
        data.insert(std::make_pair(0x16e4,"RUNIC LETTER CEALC"));
        data.insert(std::make_pair(0x16e5,"RUNIC LETTER STAN"));
        data.insert(std::make_pair(0x16e6,"RUNIC LETTER LONG-BRANCH-YR"));
        data.insert(std::make_pair(0x16e7,"RUNIC LETTER SHORT-TWIG-YR"));
        data.insert(std::make_pair(0x16e8,"RUNIC LETTER ICELANDIC-YR"));
        data.insert(std::make_pair(0x16e9,"RUNIC LETTER Q"));
        data.insert(std::make_pair(0x16ea,"RUNIC LETTER X"));
        data.insert(std::make_pair(0x16eb,"RUNIC SINGLE PUNCTUATION"));
        data.insert(std::make_pair(0x16ec,"RUNIC MULTIPLE PUNCTUATION"));
        data.insert(std::make_pair(0x16ed,"RUNIC CROSS PUNCTUATION"));
        data.insert(std::make_pair(0x16ee,"RUNIC ARLAUG SYMBOL"));
        data.insert(std::make_pair(0x16ef,"RUNIC TVIMADUR SYMBOL"));
        data.insert(std::make_pair(0x16f0,"RUNIC BELGTHOR SYMBOL"));
        data.insert(std::make_pair(0x16f1,"RUNIC LETTER K"));
        data.insert(std::make_pair(0x16f2,"RUNIC LETTER SH"));
        data.insert(std::make_pair(0x16f3,"RUNIC LETTER OO"));
        data.insert(std::make_pair(0x16f4,"RUNIC LETTER FRANKS CASKET OS"));
        data.insert(std::make_pair(0x16f5,"RUNIC LETTER FRANKS CASKET IS"));
        data.insert(std::make_pair(0x16f6,"RUNIC LETTER FRANKS CASKET EH"));
        data.insert(std::make_pair(0x16f7,"RUNIC LETTER FRANKS CASKET AC"));
        data.insert(std::make_pair(0x16f8,"RUNIC LETTER FRANKS CASKET AESC"));
        data.insert(std::make_pair(0x1700,"TAGALOG LETTER A"));
        data.insert(std::make_pair(0x1701,"TAGALOG LETTER I"));
        data.insert(std::make_pair(0x1702,"TAGALOG LETTER U"));
        data.insert(std::make_pair(0x1703,"TAGALOG LETTER KA"));
        data.insert(std::make_pair(0x1704,"TAGALOG LETTER GA"));
        data.insert(std::make_pair(0x1705,"TAGALOG LETTER NGA"));
        data.insert(std::make_pair(0x1706,"TAGALOG LETTER TA"));
        data.insert(std::make_pair(0x1707,"TAGALOG LETTER DA"));
        data.insert(std::make_pair(0x1708,"TAGALOG LETTER NA"));
        data.insert(std::make_pair(0x1709,"TAGALOG LETTER PA"));
        data.insert(std::make_pair(0x170a,"TAGALOG LETTER BA"));
        data.insert(std::make_pair(0x170b,"TAGALOG LETTER MA"));
        data.insert(std::make_pair(0x170c,"TAGALOG LETTER YA"));
        data.insert(std::make_pair(0x170d,"TAGALOG LETTER RA"));
        data.insert(std::make_pair(0x170e,"TAGALOG LETTER LA"));
        data.insert(std::make_pair(0x170f,"TAGALOG LETTER WA"));
        data.insert(std::make_pair(0x1710,"TAGALOG LETTER SA"));
        data.insert(std::make_pair(0x1711,"TAGALOG LETTER HA"));
        data.insert(std::make_pair(0x1712,"TAGALOG VOWEL SIGN I"));
        data.insert(std::make_pair(0x1713,"TAGALOG VOWEL SIGN U"));
        data.insert(std::make_pair(0x1714,"TAGALOG SIGN VIRAMA"));
        data.insert(std::make_pair(0x1715,"TAGALOG SIGN PAMUDPOD"));
        data.insert(std::make_pair(0x171f,"TAGALOG LETTER ARCHAIC RA"));
        data.insert(std::make_pair(0x1720,"HANUNOO LETTER A"));
        data.insert(std::make_pair(0x1721,"HANUNOO LETTER I"));
        data.insert(std::make_pair(0x1722,"HANUNOO LETTER U"));
        data.insert(std::make_pair(0x1723,"HANUNOO LETTER KA"));
        data.insert(std::make_pair(0x1724,"HANUNOO LETTER GA"));
        data.insert(std::make_pair(0x1725,"HANUNOO LETTER NGA"));
        data.insert(std::make_pair(0x1726,"HANUNOO LETTER TA"));
        data.insert(std::make_pair(0x1727,"HANUNOO LETTER DA"));
        data.insert(std::make_pair(0x1728,"HANUNOO LETTER NA"));
        data.insert(std::make_pair(0x1729,"HANUNOO LETTER PA"));
        data.insert(std::make_pair(0x172a,"HANUNOO LETTER BA"));
        data.insert(std::make_pair(0x172b,"HANUNOO LETTER MA"));
        data.insert(std::make_pair(0x172c,"HANUNOO LETTER YA"));
        data.insert(std::make_pair(0x172d,"HANUNOO LETTER RA"));
        data.insert(std::make_pair(0x172e,"HANUNOO LETTER LA"));
        data.insert(std::make_pair(0x172f,"HANUNOO LETTER WA"));
        data.insert(std::make_pair(0x1730,"HANUNOO LETTER SA"));
        data.insert(std::make_pair(0x1731,"HANUNOO LETTER HA"));
        data.insert(std::make_pair(0x1732,"HANUNOO VOWEL SIGN I"));
        data.insert(std::make_pair(0x1733,"HANUNOO VOWEL SIGN U"));
        data.insert(std::make_pair(0x1734,"HANUNOO SIGN PAMUDPOD"));
        data.insert(std::make_pair(0x1735,"PHILIPPINE SINGLE PUNCTUATION"));
        data.insert(std::make_pair(0x1736,"PHILIPPINE DOUBLE PUNCTUATION"));
        data.insert(std::make_pair(0x1740,"BUHID LETTER A"));
        data.insert(std::make_pair(0x1741,"BUHID LETTER I"));
        data.insert(std::make_pair(0x1742,"BUHID LETTER U"));
        data.insert(std::make_pair(0x1743,"BUHID LETTER KA"));
        data.insert(std::make_pair(0x1744,"BUHID LETTER GA"));
        data.insert(std::make_pair(0x1745,"BUHID LETTER NGA"));
        data.insert(std::make_pair(0x1746,"BUHID LETTER TA"));
        data.insert(std::make_pair(0x1747,"BUHID LETTER DA"));
        data.insert(std::make_pair(0x1748,"BUHID LETTER NA"));
        data.insert(std::make_pair(0x1749,"BUHID LETTER PA"));
        data.insert(std::make_pair(0x174a,"BUHID LETTER BA"));
        data.insert(std::make_pair(0x174b,"BUHID LETTER MA"));
        data.insert(std::make_pair(0x174c,"BUHID LETTER YA"));
        data.insert(std::make_pair(0x174d,"BUHID LETTER RA"));
        data.insert(std::make_pair(0x174e,"BUHID LETTER LA"));
        data.insert(std::make_pair(0x174f,"BUHID LETTER WA"));
        data.insert(std::make_pair(0x1750,"BUHID LETTER SA"));
        data.insert(std::make_pair(0x1751,"BUHID LETTER HA"));
        data.insert(std::make_pair(0x1752,"BUHID VOWEL SIGN I"));
        data.insert(std::make_pair(0x1753,"BUHID VOWEL SIGN U"));
        data.insert(std::make_pair(0x1760,"TAGBANWA LETTER A"));
        data.insert(std::make_pair(0x1761,"TAGBANWA LETTER I"));
        data.insert(std::make_pair(0x1762,"TAGBANWA LETTER U"));
        data.insert(std::make_pair(0x1763,"TAGBANWA LETTER KA"));
        data.insert(std::make_pair(0x1764,"TAGBANWA LETTER GA"));
        data.insert(std::make_pair(0x1765,"TAGBANWA LETTER NGA"));
        data.insert(std::make_pair(0x1766,"TAGBANWA LETTER TA"));
        data.insert(std::make_pair(0x1767,"TAGBANWA LETTER DA"));
        data.insert(std::make_pair(0x1768,"TAGBANWA LETTER NA"));
        data.insert(std::make_pair(0x1769,"TAGBANWA LETTER PA"));
        data.insert(std::make_pair(0x176a,"TAGBANWA LETTER BA"));
        data.insert(std::make_pair(0x176b,"TAGBANWA LETTER MA"));
        data.insert(std::make_pair(0x176c,"TAGBANWA LETTER YA"));
        data.insert(std::make_pair(0x176e,"TAGBANWA LETTER LA"));
        data.insert(std::make_pair(0x176f,"TAGBANWA LETTER WA"));
        data.insert(std::make_pair(0x1770,"TAGBANWA LETTER SA"));
        data.insert(std::make_pair(0x1772,"TAGBANWA VOWEL SIGN I"));
        data.insert(std::make_pair(0x1773,"TAGBANWA VOWEL SIGN U"));
        data.insert(std::make_pair(0x1780,"KHMER LETTER KA"));
        data.insert(std::make_pair(0x1781,"KHMER LETTER KHA"));
        data.insert(std::make_pair(0x1782,"KHMER LETTER KO"));
        data.insert(std::make_pair(0x1783,"KHMER LETTER KHO"));
        data.insert(std::make_pair(0x1784,"KHMER LETTER NGO"));
        data.insert(std::make_pair(0x1785,"KHMER LETTER CA"));
        data.insert(std::make_pair(0x1786,"KHMER LETTER CHA"));
        data.insert(std::make_pair(0x1787,"KHMER LETTER CO"));
        data.insert(std::make_pair(0x1788,"KHMER LETTER CHO"));
        data.insert(std::make_pair(0x1789,"KHMER LETTER NYO"));
        data.insert(std::make_pair(0x178a,"KHMER LETTER DA"));
        data.insert(std::make_pair(0x178b,"KHMER LETTER TTHA"));
        data.insert(std::make_pair(0x178c,"KHMER LETTER DO"));
        data.insert(std::make_pair(0x178d,"KHMER LETTER TTHO"));
        data.insert(std::make_pair(0x178e,"KHMER LETTER NNO"));
        data.insert(std::make_pair(0x178f,"KHMER LETTER TA"));
        data.insert(std::make_pair(0x1790,"KHMER LETTER THA"));
        data.insert(std::make_pair(0x1791,"KHMER LETTER TO"));
        data.insert(std::make_pair(0x1792,"KHMER LETTER THO"));
        data.insert(std::make_pair(0x1793,"KHMER LETTER NO"));
        data.insert(std::make_pair(0x1794,"KHMER LETTER BA"));
        data.insert(std::make_pair(0x1795,"KHMER LETTER PHA"));
        data.insert(std::make_pair(0x1796,"KHMER LETTER PO"));
        data.insert(std::make_pair(0x1797,"KHMER LETTER PHO"));
        data.insert(std::make_pair(0x1798,"KHMER LETTER MO"));
        data.insert(std::make_pair(0x1799,"KHMER LETTER YO"));
        data.insert(std::make_pair(0x179a,"KHMER LETTER RO"));
        data.insert(std::make_pair(0x179b,"KHMER LETTER LO"));
        data.insert(std::make_pair(0x179c,"KHMER LETTER VO"));
        data.insert(std::make_pair(0x179d,"KHMER LETTER SHA"));
        data.insert(std::make_pair(0x179e,"KHMER LETTER SSO"));
        data.insert(std::make_pair(0x179f,"KHMER LETTER SA"));
        data.insert(std::make_pair(0x17a0,"KHMER LETTER HA"));
        data.insert(std::make_pair(0x17a1,"KHMER LETTER LA"));
        data.insert(std::make_pair(0x17a2,"KHMER LETTER QA"));
        data.insert(std::make_pair(0x17a3,"KHMER INDEPENDENT VOWEL QAQ"));
        data.insert(std::make_pair(0x17a4,"KHMER INDEPENDENT VOWEL QAA"));
        data.insert(std::make_pair(0x17a5,"KHMER INDEPENDENT VOWEL QI"));
        data.insert(std::make_pair(0x17a6,"KHMER INDEPENDENT VOWEL QII"));
        data.insert(std::make_pair(0x17a7,"KHMER INDEPENDENT VOWEL QU"));
        data.insert(std::make_pair(0x17a8,"KHMER INDEPENDENT VOWEL QUK"));
        data.insert(std::make_pair(0x17a9,"KHMER INDEPENDENT VOWEL QUU"));
        data.insert(std::make_pair(0x17aa,"KHMER INDEPENDENT VOWEL QUUV"));
        data.insert(std::make_pair(0x17ab,"KHMER INDEPENDENT VOWEL RY"));
        data.insert(std::make_pair(0x17ac,"KHMER INDEPENDENT VOWEL RYY"));
        data.insert(std::make_pair(0x17ad,"KHMER INDEPENDENT VOWEL LY"));
        data.insert(std::make_pair(0x17ae,"KHMER INDEPENDENT VOWEL LYY"));
        data.insert(std::make_pair(0x17af,"KHMER INDEPENDENT VOWEL QE"));
        data.insert(std::make_pair(0x17b0,"KHMER INDEPENDENT VOWEL QAI"));
        data.insert(std::make_pair(0x17b1,"KHMER INDEPENDENT VOWEL QOO TYPE ONE"));
        data.insert(std::make_pair(0x17b2,"KHMER INDEPENDENT VOWEL QOO TYPE TWO"));
        data.insert(std::make_pair(0x17b3,"KHMER INDEPENDENT VOWEL QAU"));
        data.insert(std::make_pair(0x17b4,"KHMER VOWEL INHERENT AQ"));
        data.insert(std::make_pair(0x17b5,"KHMER VOWEL INHERENT AA"));
        data.insert(std::make_pair(0x17b6,"KHMER VOWEL SIGN AA"));
        data.insert(std::make_pair(0x17b7,"KHMER VOWEL SIGN I"));
        data.insert(std::make_pair(0x17b8,"KHMER VOWEL SIGN II"));
        data.insert(std::make_pair(0x17b9,"KHMER VOWEL SIGN Y"));
        data.insert(std::make_pair(0x17ba,"KHMER VOWEL SIGN YY"));
        data.insert(std::make_pair(0x17bb,"KHMER VOWEL SIGN U"));
        data.insert(std::make_pair(0x17bc,"KHMER VOWEL SIGN UU"));
        data.insert(std::make_pair(0x17bd,"KHMER VOWEL SIGN UA"));
        data.insert(std::make_pair(0x17be,"KHMER VOWEL SIGN OE"));
        data.insert(std::make_pair(0x17bf,"KHMER VOWEL SIGN YA"));
        data.insert(std::make_pair(0x17c0,"KHMER VOWEL SIGN IE"));
        data.insert(std::make_pair(0x17c1,"KHMER VOWEL SIGN E"));
        data.insert(std::make_pair(0x17c2,"KHMER VOWEL SIGN AE"));
        data.insert(std::make_pair(0x17c3,"KHMER VOWEL SIGN AI"));
        data.insert(std::make_pair(0x17c4,"KHMER VOWEL SIGN OO"));
        data.insert(std::make_pair(0x17c5,"KHMER VOWEL SIGN AU"));
        data.insert(std::make_pair(0x17c6,"KHMER SIGN NIKAHIT"));
        data.insert(std::make_pair(0x17c7,"KHMER SIGN REAHMUK"));
        data.insert(std::make_pair(0x17c8,"KHMER SIGN YUUKALEAPINTU"));
        data.insert(std::make_pair(0x17c9,"KHMER SIGN MUUSIKATOAN"));
        data.insert(std::make_pair(0x17ca,"KHMER SIGN TRIISAP"));
        data.insert(std::make_pair(0x17cb,"KHMER SIGN BANTOC"));
        data.insert(std::make_pair(0x17cc,"KHMER SIGN ROBAT"));
        data.insert(std::make_pair(0x17cd,"KHMER SIGN TOANDAKHIAT"));
        data.insert(std::make_pair(0x17ce,"KHMER SIGN KAKABAT"));
        data.insert(std::make_pair(0x17cf,"KHMER SIGN AHSDA"));
        data.insert(std::make_pair(0x17d0,"KHMER SIGN SAMYOK SANNYA"));
        data.insert(std::make_pair(0x17d1,"KHMER SIGN VIRIAM"));
        data.insert(std::make_pair(0x17d2,"KHMER SIGN COENG"));
        data.insert(std::make_pair(0x17d3,"KHMER SIGN BATHAMASAT"));
        data.insert(std::make_pair(0x17d4,"KHMER SIGN KHAN"));
        data.insert(std::make_pair(0x17d5,"KHMER SIGN BARIYOOSAN"));
        data.insert(std::make_pair(0x17d6,"KHMER SIGN CAMNUC PII KUUH"));
        data.insert(std::make_pair(0x17d7,"KHMER SIGN LEK TOO"));
        data.insert(std::make_pair(0x17d8,"KHMER SIGN BEYYAL"));
        data.insert(std::make_pair(0x17d9,"KHMER SIGN PHNAEK MUAN"));
        data.insert(std::make_pair(0x17da,"KHMER SIGN KOOMUUT"));
        data.insert(std::make_pair(0x17db,"KHMER CURRENCY SYMBOL RIEL"));
        data.insert(std::make_pair(0x17dc,"KHMER SIGN AVAKRAHASANYA"));
        data.insert(std::make_pair(0x17dd,"KHMER SIGN ATTHACAN"));
        data.insert(std::make_pair(0x17e0,"KHMER DIGIT ZERO"));
        data.insert(std::make_pair(0x17e1,"KHMER DIGIT ONE"));
        data.insert(std::make_pair(0x17e2,"KHMER DIGIT TWO"));
        data.insert(std::make_pair(0x17e3,"KHMER DIGIT THREE"));
        data.insert(std::make_pair(0x17e4,"KHMER DIGIT FOUR"));
        data.insert(std::make_pair(0x17e5,"KHMER DIGIT FIVE"));
        data.insert(std::make_pair(0x17e6,"KHMER DIGIT SIX"));
        data.insert(std::make_pair(0x17e7,"KHMER DIGIT SEVEN"));
        data.insert(std::make_pair(0x17e8,"KHMER DIGIT EIGHT"));
        data.insert(std::make_pair(0x17e9,"KHMER DIGIT NINE"));
        data.insert(std::make_pair(0x17f0,"KHMER SYMBOL LEK ATTAK SON"));
        data.insert(std::make_pair(0x17f1,"KHMER SYMBOL LEK ATTAK MUOY"));
        data.insert(std::make_pair(0x17f2,"KHMER SYMBOL LEK ATTAK PII"));
        data.insert(std::make_pair(0x17f3,"KHMER SYMBOL LEK ATTAK BEI"));
        data.insert(std::make_pair(0x17f4,"KHMER SYMBOL LEK ATTAK BUON"));
        data.insert(std::make_pair(0x17f5,"KHMER SYMBOL LEK ATTAK PRAM"));
        data.insert(std::make_pair(0x17f6,"KHMER SYMBOL LEK ATTAK PRAM-MUOY"));
        data.insert(std::make_pair(0x17f7,"KHMER SYMBOL LEK ATTAK PRAM-PII"));
        data.insert(std::make_pair(0x17f8,"KHMER SYMBOL LEK ATTAK PRAM-BEI"));
        data.insert(std::make_pair(0x17f9,"KHMER SYMBOL LEK ATTAK PRAM-BUON"));
        data.insert(std::make_pair(0x1800,"MONGOLIAN BIRGA"));
        data.insert(std::make_pair(0x1801,"MONGOLIAN ELLIPSIS"));
        data.insert(std::make_pair(0x1802,"MONGOLIAN COMMA"));
        data.insert(std::make_pair(0x1803,"MONGOLIAN FULL STOP"));
        data.insert(std::make_pair(0x1804,"MONGOLIAN COLON"));
        data.insert(std::make_pair(0x1805,"MONGOLIAN FOUR DOTS"));
        data.insert(std::make_pair(0x1806,"MONGOLIAN TODO SOFT HYPHEN"));
        data.insert(std::make_pair(0x1807,"MONGOLIAN SIBE SYLLABLE BOUNDARY MARKER"));
        data.insert(std::make_pair(0x1808,"MONGOLIAN MANCHU COMMA"));
        data.insert(std::make_pair(0x1809,"MONGOLIAN MANCHU FULL STOP"));
        data.insert(std::make_pair(0x180a,"MONGOLIAN NIRUGU"));
        data.insert(std::make_pair(0x180b,"MONGOLIAN FREE VARIATION SELECTOR ONE"));
        data.insert(std::make_pair(0x180c,"MONGOLIAN FREE VARIATION SELECTOR TWO"));
        data.insert(std::make_pair(0x180d,"MONGOLIAN FREE VARIATION SELECTOR THREE"));
        data.insert(std::make_pair(0x180e,"MONGOLIAN VOWEL SEPARATOR"));
        data.insert(std::make_pair(0x180f,"MONGOLIAN FREE VARIATION SELECTOR FOUR"));
        data.insert(std::make_pair(0x1810,"MONGOLIAN DIGIT ZERO"));
        data.insert(std::make_pair(0x1811,"MONGOLIAN DIGIT ONE"));
        data.insert(std::make_pair(0x1812,"MONGOLIAN DIGIT TWO"));
        data.insert(std::make_pair(0x1813,"MONGOLIAN DIGIT THREE"));
        data.insert(std::make_pair(0x1814,"MONGOLIAN DIGIT FOUR"));
        data.insert(std::make_pair(0x1815,"MONGOLIAN DIGIT FIVE"));
        data.insert(std::make_pair(0x1816,"MONGOLIAN DIGIT SIX"));
        data.insert(std::make_pair(0x1817,"MONGOLIAN DIGIT SEVEN"));
        data.insert(std::make_pair(0x1818,"MONGOLIAN DIGIT EIGHT"));
        data.insert(std::make_pair(0x1819,"MONGOLIAN DIGIT NINE"));
        data.insert(std::make_pair(0x1820,"MONGOLIAN LETTER A"));
        data.insert(std::make_pair(0x1821,"MONGOLIAN LETTER E"));
        data.insert(std::make_pair(0x1822,"MONGOLIAN LETTER I"));
        data.insert(std::make_pair(0x1823,"MONGOLIAN LETTER O"));
        data.insert(std::make_pair(0x1824,"MONGOLIAN LETTER U"));
        data.insert(std::make_pair(0x1825,"MONGOLIAN LETTER OE"));
        data.insert(std::make_pair(0x1826,"MONGOLIAN LETTER UE"));
        data.insert(std::make_pair(0x1827,"MONGOLIAN LETTER EE"));
        data.insert(std::make_pair(0x1828,"MONGOLIAN LETTER NA"));
        data.insert(std::make_pair(0x1829,"MONGOLIAN LETTER ANG"));
        data.insert(std::make_pair(0x182a,"MONGOLIAN LETTER BA"));
        data.insert(std::make_pair(0x182b,"MONGOLIAN LETTER PA"));
        data.insert(std::make_pair(0x182c,"MONGOLIAN LETTER QA"));
        data.insert(std::make_pair(0x182d,"MONGOLIAN LETTER GA"));
        data.insert(std::make_pair(0x182e,"MONGOLIAN LETTER MA"));
        data.insert(std::make_pair(0x182f,"MONGOLIAN LETTER LA"));
        data.insert(std::make_pair(0x1830,"MONGOLIAN LETTER SA"));
        data.insert(std::make_pair(0x1831,"MONGOLIAN LETTER SHA"));
        data.insert(std::make_pair(0x1832,"MONGOLIAN LETTER TA"));
        data.insert(std::make_pair(0x1833,"MONGOLIAN LETTER DA"));
        data.insert(std::make_pair(0x1834,"MONGOLIAN LETTER CHA"));
        data.insert(std::make_pair(0x1835,"MONGOLIAN LETTER JA"));
        data.insert(std::make_pair(0x1836,"MONGOLIAN LETTER YA"));
        data.insert(std::make_pair(0x1837,"MONGOLIAN LETTER RA"));
        data.insert(std::make_pair(0x1838,"MONGOLIAN LETTER WA"));
        data.insert(std::make_pair(0x1839,"MONGOLIAN LETTER FA"));
        data.insert(std::make_pair(0x183a,"MONGOLIAN LETTER KA"));
        data.insert(std::make_pair(0x183b,"MONGOLIAN LETTER KHA"));
        data.insert(std::make_pair(0x183c,"MONGOLIAN LETTER TSA"));
        data.insert(std::make_pair(0x183d,"MONGOLIAN LETTER ZA"));
        data.insert(std::make_pair(0x183e,"MONGOLIAN LETTER HAA"));
        data.insert(std::make_pair(0x183f,"MONGOLIAN LETTER ZRA"));
        data.insert(std::make_pair(0x1840,"MONGOLIAN LETTER LHA"));
        data.insert(std::make_pair(0x1841,"MONGOLIAN LETTER ZHI"));
        data.insert(std::make_pair(0x1842,"MONGOLIAN LETTER CHI"));
        data.insert(std::make_pair(0x1843,"MONGOLIAN LETTER TODO LONG VOWEL SIGN"));
        data.insert(std::make_pair(0x1844,"MONGOLIAN LETTER TODO E"));
        data.insert(std::make_pair(0x1845,"MONGOLIAN LETTER TODO I"));
        data.insert(std::make_pair(0x1846,"MONGOLIAN LETTER TODO O"));
        data.insert(std::make_pair(0x1847,"MONGOLIAN LETTER TODO U"));
        data.insert(std::make_pair(0x1848,"MONGOLIAN LETTER TODO OE"));
        data.insert(std::make_pair(0x1849,"MONGOLIAN LETTER TODO UE"));
        data.insert(std::make_pair(0x184a,"MONGOLIAN LETTER TODO ANG"));
        data.insert(std::make_pair(0x184b,"MONGOLIAN LETTER TODO BA"));
        data.insert(std::make_pair(0x184c,"MONGOLIAN LETTER TODO PA"));
        data.insert(std::make_pair(0x184d,"MONGOLIAN LETTER TODO QA"));
        data.insert(std::make_pair(0x184e,"MONGOLIAN LETTER TODO GA"));
        data.insert(std::make_pair(0x184f,"MONGOLIAN LETTER TODO MA"));
        data.insert(std::make_pair(0x1850,"MONGOLIAN LETTER TODO TA"));
        data.insert(std::make_pair(0x1851,"MONGOLIAN LETTER TODO DA"));
        data.insert(std::make_pair(0x1852,"MONGOLIAN LETTER TODO CHA"));
        data.insert(std::make_pair(0x1853,"MONGOLIAN LETTER TODO JA"));
        data.insert(std::make_pair(0x1854,"MONGOLIAN LETTER TODO TSA"));
        data.insert(std::make_pair(0x1855,"MONGOLIAN LETTER TODO YA"));
        data.insert(std::make_pair(0x1856,"MONGOLIAN LETTER TODO WA"));
        data.insert(std::make_pair(0x1857,"MONGOLIAN LETTER TODO KA"));
        data.insert(std::make_pair(0x1858,"MONGOLIAN LETTER TODO GAA"));
        data.insert(std::make_pair(0x1859,"MONGOLIAN LETTER TODO HAA"));
        data.insert(std::make_pair(0x185a,"MONGOLIAN LETTER TODO JIA"));
        data.insert(std::make_pair(0x185b,"MONGOLIAN LETTER TODO NIA"));
        data.insert(std::make_pair(0x185c,"MONGOLIAN LETTER TODO DZA"));
        data.insert(std::make_pair(0x185d,"MONGOLIAN LETTER SIBE E"));
        data.insert(std::make_pair(0x185e,"MONGOLIAN LETTER SIBE I"));
        data.insert(std::make_pair(0x185f,"MONGOLIAN LETTER SIBE IY"));
        data.insert(std::make_pair(0x1860,"MONGOLIAN LETTER SIBE UE"));
        data.insert(std::make_pair(0x1861,"MONGOLIAN LETTER SIBE U"));
        data.insert(std::make_pair(0x1862,"MONGOLIAN LETTER SIBE ANG"));
        data.insert(std::make_pair(0x1863,"MONGOLIAN LETTER SIBE KA"));
        data.insert(std::make_pair(0x1864,"MONGOLIAN LETTER SIBE GA"));
        data.insert(std::make_pair(0x1865,"MONGOLIAN LETTER SIBE HA"));
        data.insert(std::make_pair(0x1866,"MONGOLIAN LETTER SIBE PA"));
        data.insert(std::make_pair(0x1867,"MONGOLIAN LETTER SIBE SHA"));
        data.insert(std::make_pair(0x1868,"MONGOLIAN LETTER SIBE TA"));
        data.insert(std::make_pair(0x1869,"MONGOLIAN LETTER SIBE DA"));
        data.insert(std::make_pair(0x186a,"MONGOLIAN LETTER SIBE JA"));
        data.insert(std::make_pair(0x186b,"MONGOLIAN LETTER SIBE FA"));
        data.insert(std::make_pair(0x186c,"MONGOLIAN LETTER SIBE GAA"));
        data.insert(std::make_pair(0x186d,"MONGOLIAN LETTER SIBE HAA"));
        data.insert(std::make_pair(0x186e,"MONGOLIAN LETTER SIBE TSA"));
        data.insert(std::make_pair(0x186f,"MONGOLIAN LETTER SIBE ZA"));
        data.insert(std::make_pair(0x1870,"MONGOLIAN LETTER SIBE RAA"));
        data.insert(std::make_pair(0x1871,"MONGOLIAN LETTER SIBE CHA"));
        data.insert(std::make_pair(0x1872,"MONGOLIAN LETTER SIBE ZHA"));
        data.insert(std::make_pair(0x1873,"MONGOLIAN LETTER MANCHU I"));
        data.insert(std::make_pair(0x1874,"MONGOLIAN LETTER MANCHU KA"));
        data.insert(std::make_pair(0x1875,"MONGOLIAN LETTER MANCHU RA"));
        data.insert(std::make_pair(0x1876,"MONGOLIAN LETTER MANCHU FA"));
        data.insert(std::make_pair(0x1877,"MONGOLIAN LETTER MANCHU ZHA"));
        data.insert(std::make_pair(0x1878,"MONGOLIAN LETTER CHA WITH TWO DOTS"));
        data.insert(std::make_pair(0x1880,"MONGOLIAN LETTER ALI GALI ANUSVARA ONE"));
        data.insert(std::make_pair(0x1881,"MONGOLIAN LETTER ALI GALI VISARGA ONE"));
        data.insert(std::make_pair(0x1882,"MONGOLIAN LETTER ALI GALI DAMARU"));
        data.insert(std::make_pair(0x1883,"MONGOLIAN LETTER ALI GALI UBADAMA"));
        data.insert(std::make_pair(0x1884,"MONGOLIAN LETTER ALI GALI INVERTED UBADAMA"));
        data.insert(std::make_pair(0x1885,"MONGOLIAN LETTER ALI GALI BALUDA"));
        data.insert(std::make_pair(0x1886,"MONGOLIAN LETTER ALI GALI THREE BALUDA"));
        data.insert(std::make_pair(0x1887,"MONGOLIAN LETTER ALI GALI A"));
        data.insert(std::make_pair(0x1888,"MONGOLIAN LETTER ALI GALI I"));
        data.insert(std::make_pair(0x1889,"MONGOLIAN LETTER ALI GALI KA"));
        data.insert(std::make_pair(0x188a,"MONGOLIAN LETTER ALI GALI NGA"));
        data.insert(std::make_pair(0x188b,"MONGOLIAN LETTER ALI GALI CA"));
        data.insert(std::make_pair(0x188c,"MONGOLIAN LETTER ALI GALI TTA"));
        data.insert(std::make_pair(0x188d,"MONGOLIAN LETTER ALI GALI TTHA"));
        data.insert(std::make_pair(0x188e,"MONGOLIAN LETTER ALI GALI DDA"));
        data.insert(std::make_pair(0x188f,"MONGOLIAN LETTER ALI GALI NNA"));
        data.insert(std::make_pair(0x1890,"MONGOLIAN LETTER ALI GALI TA"));
        data.insert(std::make_pair(0x1891,"MONGOLIAN LETTER ALI GALI DA"));
        data.insert(std::make_pair(0x1892,"MONGOLIAN LETTER ALI GALI PA"));
        data.insert(std::make_pair(0x1893,"MONGOLIAN LETTER ALI GALI PHA"));
        data.insert(std::make_pair(0x1894,"MONGOLIAN LETTER ALI GALI SSA"));
        data.insert(std::make_pair(0x1895,"MONGOLIAN LETTER ALI GALI ZHA"));
        data.insert(std::make_pair(0x1896,"MONGOLIAN LETTER ALI GALI ZA"));
        data.insert(std::make_pair(0x1897,"MONGOLIAN LETTER ALI GALI AH"));
        data.insert(std::make_pair(0x1898,"MONGOLIAN LETTER TODO ALI GALI TA"));
        data.insert(std::make_pair(0x1899,"MONGOLIAN LETTER TODO ALI GALI ZHA"));
        data.insert(std::make_pair(0x189a,"MONGOLIAN LETTER MANCHU ALI GALI GHA"));
        data.insert(std::make_pair(0x189b,"MONGOLIAN LETTER MANCHU ALI GALI NGA"));
        data.insert(std::make_pair(0x189c,"MONGOLIAN LETTER MANCHU ALI GALI CA"));
        data.insert(std::make_pair(0x189d,"MONGOLIAN LETTER MANCHU ALI GALI JHA"));
        data.insert(std::make_pair(0x189e,"MONGOLIAN LETTER MANCHU ALI GALI TTA"));
        data.insert(std::make_pair(0x189f,"MONGOLIAN LETTER MANCHU ALI GALI DDHA"));
        data.insert(std::make_pair(0x18a0,"MONGOLIAN LETTER MANCHU ALI GALI TA"));
        data.insert(std::make_pair(0x18a1,"MONGOLIAN LETTER MANCHU ALI GALI DHA"));
        data.insert(std::make_pair(0x18a2,"MONGOLIAN LETTER MANCHU ALI GALI SSA"));
        data.insert(std::make_pair(0x18a3,"MONGOLIAN LETTER MANCHU ALI GALI CYA"));
        data.insert(std::make_pair(0x18a4,"MONGOLIAN LETTER MANCHU ALI GALI ZHA"));
        data.insert(std::make_pair(0x18a5,"MONGOLIAN LETTER MANCHU ALI GALI ZA"));
        data.insert(std::make_pair(0x18a6,"MONGOLIAN LETTER ALI GALI HALF U"));
        data.insert(std::make_pair(0x18a7,"MONGOLIAN LETTER ALI GALI HALF YA"));
        data.insert(std::make_pair(0x18a8,"MONGOLIAN LETTER MANCHU ALI GALI BHA"));
        data.insert(std::make_pair(0x18a9,"MONGOLIAN LETTER ALI GALI DAGALGA"));
        data.insert(std::make_pair(0x18aa,"MONGOLIAN LETTER MANCHU ALI GALI LHA"));
        data.insert(std::make_pair(0x18b0,"CANADIAN SYLLABICS OY"));
        data.insert(std::make_pair(0x18b1,"CANADIAN SYLLABICS AY"));
        data.insert(std::make_pair(0x18b2,"CANADIAN SYLLABICS AAY"));
        data.insert(std::make_pair(0x18b3,"CANADIAN SYLLABICS WAY"));
        data.insert(std::make_pair(0x18b4,"CANADIAN SYLLABICS POY"));
        data.insert(std::make_pair(0x18b5,"CANADIAN SYLLABICS PAY"));
        data.insert(std::make_pair(0x18b6,"CANADIAN SYLLABICS PWOY"));
        data.insert(std::make_pair(0x18b7,"CANADIAN SYLLABICS TAY"));
        data.insert(std::make_pair(0x18b8,"CANADIAN SYLLABICS KAY"));
        data.insert(std::make_pair(0x18b9,"CANADIAN SYLLABICS KWAY"));
        data.insert(std::make_pair(0x18ba,"CANADIAN SYLLABICS MAY"));
        data.insert(std::make_pair(0x18bb,"CANADIAN SYLLABICS NOY"));
        data.insert(std::make_pair(0x18bc,"CANADIAN SYLLABICS NAY"));
        data.insert(std::make_pair(0x18bd,"CANADIAN SYLLABICS LAY"));
        data.insert(std::make_pair(0x18be,"CANADIAN SYLLABICS SOY"));
        data.insert(std::make_pair(0x18bf,"CANADIAN SYLLABICS SAY"));
        data.insert(std::make_pair(0x18c0,"CANADIAN SYLLABICS SHOY"));
        data.insert(std::make_pair(0x18c1,"CANADIAN SYLLABICS SHAY"));
        data.insert(std::make_pair(0x18c2,"CANADIAN SYLLABICS SHWOY"));
        data.insert(std::make_pair(0x18c3,"CANADIAN SYLLABICS YOY"));
        data.insert(std::make_pair(0x18c4,"CANADIAN SYLLABICS YAY"));
        data.insert(std::make_pair(0x18c5,"CANADIAN SYLLABICS RAY"));
        data.insert(std::make_pair(0x18c6,"CANADIAN SYLLABICS NWI"));
        data.insert(std::make_pair(0x18c7,"CANADIAN SYLLABICS OJIBWAY NWI"));
        data.insert(std::make_pair(0x18c8,"CANADIAN SYLLABICS NWII"));
        data.insert(std::make_pair(0x18c9,"CANADIAN SYLLABICS OJIBWAY NWII"));
        data.insert(std::make_pair(0x18ca,"CANADIAN SYLLABICS NWO"));
        data.insert(std::make_pair(0x18cb,"CANADIAN SYLLABICS OJIBWAY NWO"));
        data.insert(std::make_pair(0x18cc,"CANADIAN SYLLABICS NWOO"));
        data.insert(std::make_pair(0x18cd,"CANADIAN SYLLABICS OJIBWAY NWOO"));
        data.insert(std::make_pair(0x18ce,"CANADIAN SYLLABICS RWEE"));
        data.insert(std::make_pair(0x18cf,"CANADIAN SYLLABICS RWI"));
        data.insert(std::make_pair(0x18d0,"CANADIAN SYLLABICS RWII"));
        data.insert(std::make_pair(0x18d1,"CANADIAN SYLLABICS RWO"));
        data.insert(std::make_pair(0x18d2,"CANADIAN SYLLABICS RWOO"));
        data.insert(std::make_pair(0x18d3,"CANADIAN SYLLABICS RWA"));
        data.insert(std::make_pair(0x18d4,"CANADIAN SYLLABICS OJIBWAY P"));
        data.insert(std::make_pair(0x18d5,"CANADIAN SYLLABICS OJIBWAY T"));
        data.insert(std::make_pair(0x18d6,"CANADIAN SYLLABICS OJIBWAY K"));
        data.insert(std::make_pair(0x18d7,"CANADIAN SYLLABICS OJIBWAY C"));
        data.insert(std::make_pair(0x18d8,"CANADIAN SYLLABICS OJIBWAY M"));
        data.insert(std::make_pair(0x18d9,"CANADIAN SYLLABICS OJIBWAY N"));
        data.insert(std::make_pair(0x18da,"CANADIAN SYLLABICS OJIBWAY S"));
        data.insert(std::make_pair(0x18db,"CANADIAN SYLLABICS OJIBWAY SH"));
        data.insert(std::make_pair(0x18dc,"CANADIAN SYLLABICS EASTERN W"));
        data.insert(std::make_pair(0x18dd,"CANADIAN SYLLABICS WESTERN W"));
        data.insert(std::make_pair(0x18de,"CANADIAN SYLLABICS FINAL SMALL RING"));
        data.insert(std::make_pair(0x18df,"CANADIAN SYLLABICS FINAL RAISED DOT"));
        data.insert(std::make_pair(0x18e0,"CANADIAN SYLLABICS R-CREE RWE"));
        data.insert(std::make_pair(0x18e1,"CANADIAN SYLLABICS WEST-CREE LOO"));
        data.insert(std::make_pair(0x18e2,"CANADIAN SYLLABICS WEST-CREE LAA"));
        data.insert(std::make_pair(0x18e3,"CANADIAN SYLLABICS THWE"));
        data.insert(std::make_pair(0x18e4,"CANADIAN SYLLABICS THWA"));
        data.insert(std::make_pair(0x18e5,"CANADIAN SYLLABICS TTHWE"));
        data.insert(std::make_pair(0x18e6,"CANADIAN SYLLABICS TTHOO"));
        data.insert(std::make_pair(0x18e7,"CANADIAN SYLLABICS TTHAA"));
        data.insert(std::make_pair(0x18e8,"CANADIAN SYLLABICS TLHWE"));
        data.insert(std::make_pair(0x18e9,"CANADIAN SYLLABICS TLHOO"));
        data.insert(std::make_pair(0x18ea,"CANADIAN SYLLABICS SAYISI SHWE"));
        data.insert(std::make_pair(0x18eb,"CANADIAN SYLLABICS SAYISI SHOO"));
        data.insert(std::make_pair(0x18ec,"CANADIAN SYLLABICS SAYISI HOO"));
        data.insert(std::make_pair(0x18ed,"CANADIAN SYLLABICS CARRIER GWU"));
        data.insert(std::make_pair(0x18ee,"CANADIAN SYLLABICS CARRIER DENE GEE"));
        data.insert(std::make_pair(0x18ef,"CANADIAN SYLLABICS CARRIER GAA"));
        data.insert(std::make_pair(0x18f0,"CANADIAN SYLLABICS CARRIER GWA"));
        data.insert(std::make_pair(0x18f1,"CANADIAN SYLLABICS SAYISI JUU"));
        data.insert(std::make_pair(0x18f2,"CANADIAN SYLLABICS CARRIER JWA"));
        data.insert(std::make_pair(0x18f3,"CANADIAN SYLLABICS BEAVER DENE L"));
        data.insert(std::make_pair(0x18f4,"CANADIAN SYLLABICS BEAVER DENE R"));
        data.insert(std::make_pair(0x18f5,"CANADIAN SYLLABICS CARRIER DENTAL S"));
        data.insert(std::make_pair(0x1900,"LIMBU VOWEL-CARRIER LETTER"));
        data.insert(std::make_pair(0x1901,"LIMBU LETTER KA"));
        data.insert(std::make_pair(0x1902,"LIMBU LETTER KHA"));
        data.insert(std::make_pair(0x1903,"LIMBU LETTER GA"));
        data.insert(std::make_pair(0x1904,"LIMBU LETTER GHA"));
        data.insert(std::make_pair(0x1905,"LIMBU LETTER NGA"));
        data.insert(std::make_pair(0x1906,"LIMBU LETTER CA"));
        data.insert(std::make_pair(0x1907,"LIMBU LETTER CHA"));
        data.insert(std::make_pair(0x1908,"LIMBU LETTER JA"));
        data.insert(std::make_pair(0x1909,"LIMBU LETTER JHA"));
        data.insert(std::make_pair(0x190a,"LIMBU LETTER YAN"));
        data.insert(std::make_pair(0x190b,"LIMBU LETTER TA"));
        data.insert(std::make_pair(0x190c,"LIMBU LETTER THA"));
        data.insert(std::make_pair(0x190d,"LIMBU LETTER DA"));
        data.insert(std::make_pair(0x190e,"LIMBU LETTER DHA"));
        data.insert(std::make_pair(0x190f,"LIMBU LETTER NA"));
        data.insert(std::make_pair(0x1910,"LIMBU LETTER PA"));
        data.insert(std::make_pair(0x1911,"LIMBU LETTER PHA"));
        data.insert(std::make_pair(0x1912,"LIMBU LETTER BA"));
        data.insert(std::make_pair(0x1913,"LIMBU LETTER BHA"));
        data.insert(std::make_pair(0x1914,"LIMBU LETTER MA"));
        data.insert(std::make_pair(0x1915,"LIMBU LETTER YA"));
        data.insert(std::make_pair(0x1916,"LIMBU LETTER RA"));
        data.insert(std::make_pair(0x1917,"LIMBU LETTER LA"));
        data.insert(std::make_pair(0x1918,"LIMBU LETTER WA"));
        data.insert(std::make_pair(0x1919,"LIMBU LETTER SHA"));
        data.insert(std::make_pair(0x191a,"LIMBU LETTER SSA"));
        data.insert(std::make_pair(0x191b,"LIMBU LETTER SA"));
        data.insert(std::make_pair(0x191c,"LIMBU LETTER HA"));
        data.insert(std::make_pair(0x191d,"LIMBU LETTER GYAN"));
        data.insert(std::make_pair(0x191e,"LIMBU LETTER TRA"));
        data.insert(std::make_pair(0x1920,"LIMBU VOWEL SIGN A"));
        data.insert(std::make_pair(0x1921,"LIMBU VOWEL SIGN I"));
        data.insert(std::make_pair(0x1922,"LIMBU VOWEL SIGN U"));
        data.insert(std::make_pair(0x1923,"LIMBU VOWEL SIGN EE"));
        data.insert(std::make_pair(0x1924,"LIMBU VOWEL SIGN AI"));
        data.insert(std::make_pair(0x1925,"LIMBU VOWEL SIGN OO"));
        data.insert(std::make_pair(0x1926,"LIMBU VOWEL SIGN AU"));
        data.insert(std::make_pair(0x1927,"LIMBU VOWEL SIGN E"));
        data.insert(std::make_pair(0x1928,"LIMBU VOWEL SIGN O"));
        data.insert(std::make_pair(0x1929,"LIMBU SUBJOINED LETTER YA"));
        data.insert(std::make_pair(0x192a,"LIMBU SUBJOINED LETTER RA"));
        data.insert(std::make_pair(0x192b,"LIMBU SUBJOINED LETTER WA"));
        data.insert(std::make_pair(0x1930,"LIMBU SMALL LETTER KA"));
        data.insert(std::make_pair(0x1931,"LIMBU SMALL LETTER NGA"));
        data.insert(std::make_pair(0x1932,"LIMBU SMALL LETTER ANUSVARA"));
        data.insert(std::make_pair(0x1933,"LIMBU SMALL LETTER TA"));
        data.insert(std::make_pair(0x1934,"LIMBU SMALL LETTER NA"));
        data.insert(std::make_pair(0x1935,"LIMBU SMALL LETTER PA"));
        data.insert(std::make_pair(0x1936,"LIMBU SMALL LETTER MA"));
        data.insert(std::make_pair(0x1937,"LIMBU SMALL LETTER RA"));
        data.insert(std::make_pair(0x1938,"LIMBU SMALL LETTER LA"));
        data.insert(std::make_pair(0x1939,"LIMBU SIGN MUKPHRENG"));
        data.insert(std::make_pair(0x193a,"LIMBU SIGN KEMPHRENG"));
        data.insert(std::make_pair(0x193b,"LIMBU SIGN SA-I"));
        data.insert(std::make_pair(0x1940,"LIMBU SIGN LOO"));
        data.insert(std::make_pair(0x1944,"LIMBU EXCLAMATION MARK"));
        data.insert(std::make_pair(0x1945,"LIMBU QUESTION MARK"));
        data.insert(std::make_pair(0x1946,"LIMBU DIGIT ZERO"));
        data.insert(std::make_pair(0x1947,"LIMBU DIGIT ONE"));
        data.insert(std::make_pair(0x1948,"LIMBU DIGIT TWO"));
        data.insert(std::make_pair(0x1949,"LIMBU DIGIT THREE"));
        data.insert(std::make_pair(0x194a,"LIMBU DIGIT FOUR"));
        data.insert(std::make_pair(0x194b,"LIMBU DIGIT FIVE"));
        data.insert(std::make_pair(0x194c,"LIMBU DIGIT SIX"));
        data.insert(std::make_pair(0x194d,"LIMBU DIGIT SEVEN"));
        data.insert(std::make_pair(0x194e,"LIMBU DIGIT EIGHT"));
        data.insert(std::make_pair(0x194f,"LIMBU DIGIT NINE"));
        data.insert(std::make_pair(0x1950,"TAI LE LETTER KA"));
        data.insert(std::make_pair(0x1951,"TAI LE LETTER XA"));
        data.insert(std::make_pair(0x1952,"TAI LE LETTER NGA"));
        data.insert(std::make_pair(0x1953,"TAI LE LETTER TSA"));
        data.insert(std::make_pair(0x1954,"TAI LE LETTER SA"));
        data.insert(std::make_pair(0x1955,"TAI LE LETTER YA"));
        data.insert(std::make_pair(0x1956,"TAI LE LETTER TA"));
        data.insert(std::make_pair(0x1957,"TAI LE LETTER THA"));
        data.insert(std::make_pair(0x1958,"TAI LE LETTER LA"));
        data.insert(std::make_pair(0x1959,"TAI LE LETTER PA"));
        data.insert(std::make_pair(0x195a,"TAI LE LETTER PHA"));
        data.insert(std::make_pair(0x195b,"TAI LE LETTER MA"));
        data.insert(std::make_pair(0x195c,"TAI LE LETTER FA"));
        data.insert(std::make_pair(0x195d,"TAI LE LETTER VA"));
        data.insert(std::make_pair(0x195e,"TAI LE LETTER HA"));
        data.insert(std::make_pair(0x195f,"TAI LE LETTER QA"));
        data.insert(std::make_pair(0x1960,"TAI LE LETTER KHA"));
        data.insert(std::make_pair(0x1961,"TAI LE LETTER TSHA"));
        data.insert(std::make_pair(0x1962,"TAI LE LETTER NA"));
        data.insert(std::make_pair(0x1963,"TAI LE LETTER A"));
        data.insert(std::make_pair(0x1964,"TAI LE LETTER I"));
        data.insert(std::make_pair(0x1965,"TAI LE LETTER EE"));
        data.insert(std::make_pair(0x1966,"TAI LE LETTER EH"));
        data.insert(std::make_pair(0x1967,"TAI LE LETTER U"));
        data.insert(std::make_pair(0x1968,"TAI LE LETTER OO"));
        data.insert(std::make_pair(0x1969,"TAI LE LETTER O"));
        data.insert(std::make_pair(0x196a,"TAI LE LETTER UE"));
        data.insert(std::make_pair(0x196b,"TAI LE LETTER E"));
        data.insert(std::make_pair(0x196c,"TAI LE LETTER AUE"));
        data.insert(std::make_pair(0x196d,"TAI LE LETTER AI"));
        data.insert(std::make_pair(0x1970,"TAI LE LETTER TONE-2"));
        data.insert(std::make_pair(0x1971,"TAI LE LETTER TONE-3"));
        data.insert(std::make_pair(0x1972,"TAI LE LETTER TONE-4"));
        data.insert(std::make_pair(0x1973,"TAI LE LETTER TONE-5"));
        data.insert(std::make_pair(0x1974,"TAI LE LETTER TONE-6"));
        data.insert(std::make_pair(0x1980,"NEW TAI LUE LETTER HIGH QA"));
        data.insert(std::make_pair(0x1981,"NEW TAI LUE LETTER LOW QA"));
        data.insert(std::make_pair(0x1982,"NEW TAI LUE LETTER HIGH KA"));
        data.insert(std::make_pair(0x1983,"NEW TAI LUE LETTER HIGH XA"));
        data.insert(std::make_pair(0x1984,"NEW TAI LUE LETTER HIGH NGA"));
        data.insert(std::make_pair(0x1985,"NEW TAI LUE LETTER LOW KA"));
        data.insert(std::make_pair(0x1986,"NEW TAI LUE LETTER LOW XA"));
        data.insert(std::make_pair(0x1987,"NEW TAI LUE LETTER LOW NGA"));
        data.insert(std::make_pair(0x1988,"NEW TAI LUE LETTER HIGH TSA"));
        data.insert(std::make_pair(0x1989,"NEW TAI LUE LETTER HIGH SA"));
        data.insert(std::make_pair(0x198a,"NEW TAI LUE LETTER HIGH YA"));
        data.insert(std::make_pair(0x198b,"NEW TAI LUE LETTER LOW TSA"));
        data.insert(std::make_pair(0x198c,"NEW TAI LUE LETTER LOW SA"));
        data.insert(std::make_pair(0x198d,"NEW TAI LUE LETTER LOW YA"));
        data.insert(std::make_pair(0x198e,"NEW TAI LUE LETTER HIGH TA"));
        data.insert(std::make_pair(0x198f,"NEW TAI LUE LETTER HIGH THA"));
        data.insert(std::make_pair(0x1990,"NEW TAI LUE LETTER HIGH NA"));
        data.insert(std::make_pair(0x1991,"NEW TAI LUE LETTER LOW TA"));
        data.insert(std::make_pair(0x1992,"NEW TAI LUE LETTER LOW THA"));
        data.insert(std::make_pair(0x1993,"NEW TAI LUE LETTER LOW NA"));
        data.insert(std::make_pair(0x1994,"NEW TAI LUE LETTER HIGH PA"));
        data.insert(std::make_pair(0x1995,"NEW TAI LUE LETTER HIGH PHA"));
        data.insert(std::make_pair(0x1996,"NEW TAI LUE LETTER HIGH MA"));
        data.insert(std::make_pair(0x1997,"NEW TAI LUE LETTER LOW PA"));
        data.insert(std::make_pair(0x1998,"NEW TAI LUE LETTER LOW PHA"));
        data.insert(std::make_pair(0x1999,"NEW TAI LUE LETTER LOW MA"));
        data.insert(std::make_pair(0x199a,"NEW TAI LUE LETTER HIGH FA"));
        data.insert(std::make_pair(0x199b,"NEW TAI LUE LETTER HIGH VA"));
        data.insert(std::make_pair(0x199c,"NEW TAI LUE LETTER HIGH LA"));
        data.insert(std::make_pair(0x199d,"NEW TAI LUE LETTER LOW FA"));
        data.insert(std::make_pair(0x199e,"NEW TAI LUE LETTER LOW VA"));
        data.insert(std::make_pair(0x199f,"NEW TAI LUE LETTER LOW LA"));
        data.insert(std::make_pair(0x19a0,"NEW TAI LUE LETTER HIGH HA"));
        data.insert(std::make_pair(0x19a1,"NEW TAI LUE LETTER HIGH DA"));
        data.insert(std::make_pair(0x19a2,"NEW TAI LUE LETTER HIGH BA"));
        data.insert(std::make_pair(0x19a3,"NEW TAI LUE LETTER LOW HA"));
        data.insert(std::make_pair(0x19a4,"NEW TAI LUE LETTER LOW DA"));
        data.insert(std::make_pair(0x19a5,"NEW TAI LUE LETTER LOW BA"));
        data.insert(std::make_pair(0x19a6,"NEW TAI LUE LETTER HIGH KVA"));
        data.insert(std::make_pair(0x19a7,"NEW TAI LUE LETTER HIGH XVA"));
        data.insert(std::make_pair(0x19a8,"NEW TAI LUE LETTER LOW KVA"));
        data.insert(std::make_pair(0x19a9,"NEW TAI LUE LETTER LOW XVA"));
        data.insert(std::make_pair(0x19aa,"NEW TAI LUE LETTER HIGH SUA"));
        data.insert(std::make_pair(0x19ab,"NEW TAI LUE LETTER LOW SUA"));
        data.insert(std::make_pair(0x19b0,"NEW TAI LUE VOWEL SIGN VOWEL SHORTENER"));
        data.insert(std::make_pair(0x19b1,"NEW TAI LUE VOWEL SIGN AA"));
        data.insert(std::make_pair(0x19b2,"NEW TAI LUE VOWEL SIGN II"));
        data.insert(std::make_pair(0x19b3,"NEW TAI LUE VOWEL SIGN U"));
        data.insert(std::make_pair(0x19b4,"NEW TAI LUE VOWEL SIGN UU"));
        data.insert(std::make_pair(0x19b5,"NEW TAI LUE VOWEL SIGN E"));
        data.insert(std::make_pair(0x19b6,"NEW TAI LUE VOWEL SIGN AE"));
        data.insert(std::make_pair(0x19b7,"NEW TAI LUE VOWEL SIGN O"));
        data.insert(std::make_pair(0x19b8,"NEW TAI LUE VOWEL SIGN OA"));
        data.insert(std::make_pair(0x19b9,"NEW TAI LUE VOWEL SIGN UE"));
        data.insert(std::make_pair(0x19ba,"NEW TAI LUE VOWEL SIGN AY"));
        data.insert(std::make_pair(0x19bb,"NEW TAI LUE VOWEL SIGN AAY"));
        data.insert(std::make_pair(0x19bc,"NEW TAI LUE VOWEL SIGN UY"));
        data.insert(std::make_pair(0x19bd,"NEW TAI LUE VOWEL SIGN OY"));
        data.insert(std::make_pair(0x19be,"NEW TAI LUE VOWEL SIGN OAY"));
        data.insert(std::make_pair(0x19bf,"NEW TAI LUE VOWEL SIGN UEY"));
        data.insert(std::make_pair(0x19c0,"NEW TAI LUE VOWEL SIGN IY"));
        data.insert(std::make_pair(0x19c1,"NEW TAI LUE LETTER FINAL V"));
        data.insert(std::make_pair(0x19c2,"NEW TAI LUE LETTER FINAL NG"));
        data.insert(std::make_pair(0x19c3,"NEW TAI LUE LETTER FINAL N"));
        data.insert(std::make_pair(0x19c4,"NEW TAI LUE LETTER FINAL M"));
        data.insert(std::make_pair(0x19c5,"NEW TAI LUE LETTER FINAL K"));
        data.insert(std::make_pair(0x19c6,"NEW TAI LUE LETTER FINAL D"));
        data.insert(std::make_pair(0x19c7,"NEW TAI LUE LETTER FINAL B"));
        data.insert(std::make_pair(0x19c8,"NEW TAI LUE TONE MARK-1"));
        data.insert(std::make_pair(0x19c9,"NEW TAI LUE TONE MARK-2"));
        data.insert(std::make_pair(0x19d0,"NEW TAI LUE DIGIT ZERO"));
        data.insert(std::make_pair(0x19d1,"NEW TAI LUE DIGIT ONE"));
        data.insert(std::make_pair(0x19d2,"NEW TAI LUE DIGIT TWO"));
        data.insert(std::make_pair(0x19d3,"NEW TAI LUE DIGIT THREE"));
        data.insert(std::make_pair(0x19d4,"NEW TAI LUE DIGIT FOUR"));
        data.insert(std::make_pair(0x19d5,"NEW TAI LUE DIGIT FIVE"));
        data.insert(std::make_pair(0x19d6,"NEW TAI LUE DIGIT SIX"));
        data.insert(std::make_pair(0x19d7,"NEW TAI LUE DIGIT SEVEN"));
        data.insert(std::make_pair(0x19d8,"NEW TAI LUE DIGIT EIGHT"));
        data.insert(std::make_pair(0x19d9,"NEW TAI LUE DIGIT NINE"));
        data.insert(std::make_pair(0x19da,"NEW TAI LUE THAM DIGIT ONE"));
        data.insert(std::make_pair(0x19de,"NEW TAI LUE SIGN LAE"));
        data.insert(std::make_pair(0x19df,"NEW TAI LUE SIGN LAEV"));
        data.insert(std::make_pair(0x19e0,"KHMER SYMBOL PATHAMASAT"));
        data.insert(std::make_pair(0x19e1,"KHMER SYMBOL MUOY KOET"));
        data.insert(std::make_pair(0x19e2,"KHMER SYMBOL PII KOET"));
        data.insert(std::make_pair(0x19e3,"KHMER SYMBOL BEI KOET"));
        data.insert(std::make_pair(0x19e4,"KHMER SYMBOL BUON KOET"));
        data.insert(std::make_pair(0x19e5,"KHMER SYMBOL PRAM KOET"));
        data.insert(std::make_pair(0x19e6,"KHMER SYMBOL PRAM-MUOY KOET"));
        data.insert(std::make_pair(0x19e7,"KHMER SYMBOL PRAM-PII KOET"));
        data.insert(std::make_pair(0x19e8,"KHMER SYMBOL PRAM-BEI KOET"));
        data.insert(std::make_pair(0x19e9,"KHMER SYMBOL PRAM-BUON KOET"));
        data.insert(std::make_pair(0x19ea,"KHMER SYMBOL DAP KOET"));
        data.insert(std::make_pair(0x19eb,"KHMER SYMBOL DAP-MUOY KOET"));
        data.insert(std::make_pair(0x19ec,"KHMER SYMBOL DAP-PII KOET"));
        data.insert(std::make_pair(0x19ed,"KHMER SYMBOL DAP-BEI KOET"));
        data.insert(std::make_pair(0x19ee,"KHMER SYMBOL DAP-BUON KOET"));
        data.insert(std::make_pair(0x19ef,"KHMER SYMBOL DAP-PRAM KOET"));
        data.insert(std::make_pair(0x19f0,"KHMER SYMBOL TUTEYASAT"));
        data.insert(std::make_pair(0x19f1,"KHMER SYMBOL MUOY ROC"));
        data.insert(std::make_pair(0x19f2,"KHMER SYMBOL PII ROC"));
        data.insert(std::make_pair(0x19f3,"KHMER SYMBOL BEI ROC"));
        data.insert(std::make_pair(0x19f4,"KHMER SYMBOL BUON ROC"));
        data.insert(std::make_pair(0x19f5,"KHMER SYMBOL PRAM ROC"));
        data.insert(std::make_pair(0x19f6,"KHMER SYMBOL PRAM-MUOY ROC"));
        data.insert(std::make_pair(0x19f7,"KHMER SYMBOL PRAM-PII ROC"));
        data.insert(std::make_pair(0x19f8,"KHMER SYMBOL PRAM-BEI ROC"));
        data.insert(std::make_pair(0x19f9,"KHMER SYMBOL PRAM-BUON ROC"));
        data.insert(std::make_pair(0x19fa,"KHMER SYMBOL DAP ROC"));
        data.insert(std::make_pair(0x19fb,"KHMER SYMBOL DAP-MUOY ROC"));
        data.insert(std::make_pair(0x19fc,"KHMER SYMBOL DAP-PII ROC"));
        data.insert(std::make_pair(0x19fd,"KHMER SYMBOL DAP-BEI ROC"));
        data.insert(std::make_pair(0x19fe,"KHMER SYMBOL DAP-BUON ROC"));
        data.insert(std::make_pair(0x19ff,"KHMER SYMBOL DAP-PRAM ROC"));
        data.insert(std::make_pair(0x1a00,"BUGINESE LETTER KA"));
        data.insert(std::make_pair(0x1a01,"BUGINESE LETTER GA"));
        data.insert(std::make_pair(0x1a02,"BUGINESE LETTER NGA"));
        data.insert(std::make_pair(0x1a03,"BUGINESE LETTER NGKA"));
        data.insert(std::make_pair(0x1a04,"BUGINESE LETTER PA"));
        data.insert(std::make_pair(0x1a05,"BUGINESE LETTER BA"));
        data.insert(std::make_pair(0x1a06,"BUGINESE LETTER MA"));
        data.insert(std::make_pair(0x1a07,"BUGINESE LETTER MPA"));
        data.insert(std::make_pair(0x1a08,"BUGINESE LETTER TA"));
        data.insert(std::make_pair(0x1a09,"BUGINESE LETTER DA"));
        data.insert(std::make_pair(0x1a0a,"BUGINESE LETTER NA"));
        data.insert(std::make_pair(0x1a0b,"BUGINESE LETTER NRA"));
        data.insert(std::make_pair(0x1a0c,"BUGINESE LETTER CA"));
        data.insert(std::make_pair(0x1a0d,"BUGINESE LETTER JA"));
        data.insert(std::make_pair(0x1a0e,"BUGINESE LETTER NYA"));
        data.insert(std::make_pair(0x1a0f,"BUGINESE LETTER NYCA"));
        data.insert(std::make_pair(0x1a10,"BUGINESE LETTER YA"));
        data.insert(std::make_pair(0x1a11,"BUGINESE LETTER RA"));
        data.insert(std::make_pair(0x1a12,"BUGINESE LETTER LA"));
        data.insert(std::make_pair(0x1a13,"BUGINESE LETTER VA"));
        data.insert(std::make_pair(0x1a14,"BUGINESE LETTER SA"));
        data.insert(std::make_pair(0x1a15,"BUGINESE LETTER A"));
        data.insert(std::make_pair(0x1a16,"BUGINESE LETTER HA"));
        data.insert(std::make_pair(0x1a17,"BUGINESE VOWEL SIGN I"));
        data.insert(std::make_pair(0x1a18,"BUGINESE VOWEL SIGN U"));
        data.insert(std::make_pair(0x1a19,"BUGINESE VOWEL SIGN E"));
        data.insert(std::make_pair(0x1a1a,"BUGINESE VOWEL SIGN O"));
        data.insert(std::make_pair(0x1a1b,"BUGINESE VOWEL SIGN AE"));
        data.insert(std::make_pair(0x1a1e,"BUGINESE PALLAWA"));
        data.insert(std::make_pair(0x1a1f,"BUGINESE END OF SECTION"));
        data.insert(std::make_pair(0x1a20,"TAI THAM LETTER HIGH KA"));
        data.insert(std::make_pair(0x1a21,"TAI THAM LETTER HIGH KHA"));
        data.insert(std::make_pair(0x1a22,"TAI THAM LETTER HIGH KXA"));
        data.insert(std::make_pair(0x1a23,"TAI THAM LETTER LOW KA"));
        data.insert(std::make_pair(0x1a24,"TAI THAM LETTER LOW KXA"));
        data.insert(std::make_pair(0x1a25,"TAI THAM LETTER LOW KHA"));
        data.insert(std::make_pair(0x1a26,"TAI THAM LETTER NGA"));
        data.insert(std::make_pair(0x1a27,"TAI THAM LETTER HIGH CA"));
        data.insert(std::make_pair(0x1a28,"TAI THAM LETTER HIGH CHA"));
        data.insert(std::make_pair(0x1a29,"TAI THAM LETTER LOW CA"));
        data.insert(std::make_pair(0x1a2a,"TAI THAM LETTER LOW SA"));
        data.insert(std::make_pair(0x1a2b,"TAI THAM LETTER LOW CHA"));
        data.insert(std::make_pair(0x1a2c,"TAI THAM LETTER NYA"));
        data.insert(std::make_pair(0x1a2d,"TAI THAM LETTER RATA"));
        data.insert(std::make_pair(0x1a2e,"TAI THAM LETTER HIGH RATHA"));
        data.insert(std::make_pair(0x1a2f,"TAI THAM LETTER DA"));
        data.insert(std::make_pair(0x1a30,"TAI THAM LETTER LOW RATHA"));
        data.insert(std::make_pair(0x1a31,"TAI THAM LETTER RANA"));
        data.insert(std::make_pair(0x1a32,"TAI THAM LETTER HIGH TA"));
        data.insert(std::make_pair(0x1a33,"TAI THAM LETTER HIGH THA"));
        data.insert(std::make_pair(0x1a34,"TAI THAM LETTER LOW TA"));
        data.insert(std::make_pair(0x1a35,"TAI THAM LETTER LOW THA"));
        data.insert(std::make_pair(0x1a36,"TAI THAM LETTER NA"));
        data.insert(std::make_pair(0x1a37,"TAI THAM LETTER BA"));
        data.insert(std::make_pair(0x1a38,"TAI THAM LETTER HIGH PA"));
        data.insert(std::make_pair(0x1a39,"TAI THAM LETTER HIGH PHA"));
        data.insert(std::make_pair(0x1a3a,"TAI THAM LETTER HIGH FA"));
        data.insert(std::make_pair(0x1a3b,"TAI THAM LETTER LOW PA"));
        data.insert(std::make_pair(0x1a3c,"TAI THAM LETTER LOW FA"));
        data.insert(std::make_pair(0x1a3d,"TAI THAM LETTER LOW PHA"));
        data.insert(std::make_pair(0x1a3e,"TAI THAM LETTER MA"));
        data.insert(std::make_pair(0x1a3f,"TAI THAM LETTER LOW YA"));
        data.insert(std::make_pair(0x1a40,"TAI THAM LETTER HIGH YA"));
        data.insert(std::make_pair(0x1a41,"TAI THAM LETTER RA"));
        data.insert(std::make_pair(0x1a42,"TAI THAM LETTER RUE"));
        data.insert(std::make_pair(0x1a43,"TAI THAM LETTER LA"));
        data.insert(std::make_pair(0x1a44,"TAI THAM LETTER LUE"));
        data.insert(std::make_pair(0x1a45,"TAI THAM LETTER WA"));
        data.insert(std::make_pair(0x1a46,"TAI THAM LETTER HIGH SHA"));
        data.insert(std::make_pair(0x1a47,"TAI THAM LETTER HIGH SSA"));
        data.insert(std::make_pair(0x1a48,"TAI THAM LETTER HIGH SA"));
        data.insert(std::make_pair(0x1a49,"TAI THAM LETTER HIGH HA"));
        data.insert(std::make_pair(0x1a4a,"TAI THAM LETTER LLA"));
        data.insert(std::make_pair(0x1a4b,"TAI THAM LETTER A"));
        data.insert(std::make_pair(0x1a4c,"TAI THAM LETTER LOW HA"));
        data.insert(std::make_pair(0x1a4d,"TAI THAM LETTER I"));
        data.insert(std::make_pair(0x1a4e,"TAI THAM LETTER II"));
        data.insert(std::make_pair(0x1a4f,"TAI THAM LETTER U"));
        data.insert(std::make_pair(0x1a50,"TAI THAM LETTER UU"));
        data.insert(std::make_pair(0x1a51,"TAI THAM LETTER EE"));
        data.insert(std::make_pair(0x1a52,"TAI THAM LETTER OO"));
        data.insert(std::make_pair(0x1a53,"TAI THAM LETTER LAE"));
        data.insert(std::make_pair(0x1a54,"TAI THAM LETTER GREAT SA"));
        data.insert(std::make_pair(0x1a55,"TAI THAM CONSONANT SIGN MEDIAL RA"));
        data.insert(std::make_pair(0x1a56,"TAI THAM CONSONANT SIGN MEDIAL LA"));
        data.insert(std::make_pair(0x1a57,"TAI THAM CONSONANT SIGN LA TANG LAI"));
        data.insert(std::make_pair(0x1a58,"TAI THAM SIGN MAI KANG LAI"));
        data.insert(std::make_pair(0x1a59,"TAI THAM CONSONANT SIGN FINAL NGA"));
        data.insert(std::make_pair(0x1a5a,"TAI THAM CONSONANT SIGN LOW PA"));
        data.insert(std::make_pair(0x1a5b,"TAI THAM CONSONANT SIGN HIGH RATHA OR LOW PA"));
        data.insert(std::make_pair(0x1a5c,"TAI THAM CONSONANT SIGN MA"));
        data.insert(std::make_pair(0x1a5d,"TAI THAM CONSONANT SIGN BA"));
        data.insert(std::make_pair(0x1a5e,"TAI THAM CONSONANT SIGN SA"));
        data.insert(std::make_pair(0x1a60,"TAI THAM SIGN SAKOT"));
        data.insert(std::make_pair(0x1a61,"TAI THAM VOWEL SIGN A"));
        data.insert(std::make_pair(0x1a62,"TAI THAM VOWEL SIGN MAI SAT"));
        data.insert(std::make_pair(0x1a63,"TAI THAM VOWEL SIGN AA"));
        data.insert(std::make_pair(0x1a64,"TAI THAM VOWEL SIGN TALL AA"));
        data.insert(std::make_pair(0x1a65,"TAI THAM VOWEL SIGN I"));
        data.insert(std::make_pair(0x1a66,"TAI THAM VOWEL SIGN II"));
        data.insert(std::make_pair(0x1a67,"TAI THAM VOWEL SIGN UE"));
        data.insert(std::make_pair(0x1a68,"TAI THAM VOWEL SIGN UUE"));
        data.insert(std::make_pair(0x1a69,"TAI THAM VOWEL SIGN U"));
        data.insert(std::make_pair(0x1a6a,"TAI THAM VOWEL SIGN UU"));
        data.insert(std::make_pair(0x1a6b,"TAI THAM VOWEL SIGN O"));
        data.insert(std::make_pair(0x1a6c,"TAI THAM VOWEL SIGN OA BELOW"));
        data.insert(std::make_pair(0x1a6d,"TAI THAM VOWEL SIGN OY"));
        data.insert(std::make_pair(0x1a6e,"TAI THAM VOWEL SIGN E"));
        data.insert(std::make_pair(0x1a6f,"TAI THAM VOWEL SIGN AE"));
        data.insert(std::make_pair(0x1a70,"TAI THAM VOWEL SIGN OO"));
        data.insert(std::make_pair(0x1a71,"TAI THAM VOWEL SIGN AI"));
        data.insert(std::make_pair(0x1a72,"TAI THAM VOWEL SIGN THAM AI"));
        data.insert(std::make_pair(0x1a73,"TAI THAM VOWEL SIGN OA ABOVE"));
        data.insert(std::make_pair(0x1a74,"TAI THAM SIGN MAI KANG"));
        data.insert(std::make_pair(0x1a75,"TAI THAM SIGN TONE-1"));
        data.insert(std::make_pair(0x1a76,"TAI THAM SIGN TONE-2"));
        data.insert(std::make_pair(0x1a77,"TAI THAM SIGN KHUEN TONE-3"));
        data.insert(std::make_pair(0x1a78,"TAI THAM SIGN KHUEN TONE-4"));
        data.insert(std::make_pair(0x1a79,"TAI THAM SIGN KHUEN TONE-5"));
        data.insert(std::make_pair(0x1a7a,"TAI THAM SIGN RA HAAM"));
        data.insert(std::make_pair(0x1a7b,"TAI THAM SIGN MAI SAM"));
        data.insert(std::make_pair(0x1a7c,"TAI THAM SIGN KHUEN-LUE KARAN"));
        data.insert(std::make_pair(0x1a7f,"TAI THAM COMBINING CRYPTOGRAMMIC DOT"));
        data.insert(std::make_pair(0x1a80,"TAI THAM HORA DIGIT ZERO"));
        data.insert(std::make_pair(0x1a81,"TAI THAM HORA DIGIT ONE"));
        data.insert(std::make_pair(0x1a82,"TAI THAM HORA DIGIT TWO"));
        data.insert(std::make_pair(0x1a83,"TAI THAM HORA DIGIT THREE"));
        data.insert(std::make_pair(0x1a84,"TAI THAM HORA DIGIT FOUR"));
        data.insert(std::make_pair(0x1a85,"TAI THAM HORA DIGIT FIVE"));
        data.insert(std::make_pair(0x1a86,"TAI THAM HORA DIGIT SIX"));
        data.insert(std::make_pair(0x1a87,"TAI THAM HORA DIGIT SEVEN"));
        data.insert(std::make_pair(0x1a88,"TAI THAM HORA DIGIT EIGHT"));
        data.insert(std::make_pair(0x1a89,"TAI THAM HORA DIGIT NINE"));
        data.insert(std::make_pair(0x1a90,"TAI THAM THAM DIGIT ZERO"));
        data.insert(std::make_pair(0x1a91,"TAI THAM THAM DIGIT ONE"));
        data.insert(std::make_pair(0x1a92,"TAI THAM THAM DIGIT TWO"));
        data.insert(std::make_pair(0x1a93,"TAI THAM THAM DIGIT THREE"));
        data.insert(std::make_pair(0x1a94,"TAI THAM THAM DIGIT FOUR"));
        data.insert(std::make_pair(0x1a95,"TAI THAM THAM DIGIT FIVE"));
        data.insert(std::make_pair(0x1a96,"TAI THAM THAM DIGIT SIX"));
        data.insert(std::make_pair(0x1a97,"TAI THAM THAM DIGIT SEVEN"));
        data.insert(std::make_pair(0x1a98,"TAI THAM THAM DIGIT EIGHT"));
        data.insert(std::make_pair(0x1a99,"TAI THAM THAM DIGIT NINE"));
        data.insert(std::make_pair(0x1aa0,"TAI THAM SIGN WIANG"));
        data.insert(std::make_pair(0x1aa1,"TAI THAM SIGN WIANGWAAK"));
        data.insert(std::make_pair(0x1aa2,"TAI THAM SIGN SAWAN"));
        data.insert(std::make_pair(0x1aa3,"TAI THAM SIGN KEOW"));
        data.insert(std::make_pair(0x1aa4,"TAI THAM SIGN HOY"));
        data.insert(std::make_pair(0x1aa5,"TAI THAM SIGN DOKMAI"));
        data.insert(std::make_pair(0x1aa6,"TAI THAM SIGN REVERSED ROTATED RANA"));
        data.insert(std::make_pair(0x1aa7,"TAI THAM SIGN MAI YAMOK"));
        data.insert(std::make_pair(0x1aa8,"TAI THAM SIGN KAAN"));
        data.insert(std::make_pair(0x1aa9,"TAI THAM SIGN KAANKUU"));
        data.insert(std::make_pair(0x1aaa,"TAI THAM SIGN SATKAAN"));
        data.insert(std::make_pair(0x1aab,"TAI THAM SIGN SATKAANKUU"));
        data.insert(std::make_pair(0x1aac,"TAI THAM SIGN HANG"));
        data.insert(std::make_pair(0x1aad,"TAI THAM SIGN CAANG"));
        data.insert(std::make_pair(0x1ab0,"COMBINING DOUBLED CIRCUMFLEX ACCENT"));
        data.insert(std::make_pair(0x1ab1,"COMBINING DIAERESIS-RING"));
        data.insert(std::make_pair(0x1ab2,"COMBINING INFINITY"));
        data.insert(std::make_pair(0x1ab3,"COMBINING DOWNWARDS ARROW"));
        data.insert(std::make_pair(0x1ab4,"COMBINING TRIPLE DOT"));
        data.insert(std::make_pair(0x1ab5,"COMBINING X-X BELOW"));
        data.insert(std::make_pair(0x1ab6,"COMBINING WIGGLY LINE BELOW"));
        data.insert(std::make_pair(0x1ab7,"COMBINING OPEN MARK BELOW"));
        data.insert(std::make_pair(0x1ab8,"COMBINING DOUBLE OPEN MARK BELOW"));
        data.insert(std::make_pair(0x1ab9,"COMBINING LIGHT CENTRALIZATION STROKE BELOW"));
        data.insert(std::make_pair(0x1aba,"COMBINING STRONG CENTRALIZATION STROKE BELOW"));
        data.insert(std::make_pair(0x1abb,"COMBINING PARENTHESES ABOVE"));
        data.insert(std::make_pair(0x1abc,"COMBINING DOUBLE PARENTHESES ABOVE"));
        data.insert(std::make_pair(0x1abd,"COMBINING PARENTHESES BELOW"));
        data.insert(std::make_pair(0x1abe,"COMBINING PARENTHESES OVERLAY"));
        data.insert(std::make_pair(0x1abf,"COMBINING LATIN SMALL LETTER W BELOW"));
        data.insert(std::make_pair(0x1ac0,"COMBINING LATIN SMALL LETTER TURNED W BELOW"));
        data.insert(std::make_pair(0x1ac1,"COMBINING LEFT PARENTHESIS ABOVE LEFT"));
        data.insert(std::make_pair(0x1ac2,"COMBINING RIGHT PARENTHESIS ABOVE RIGHT"));
        data.insert(std::make_pair(0x1ac3,"COMBINING LEFT PARENTHESIS BELOW LEFT"));
        data.insert(std::make_pair(0x1ac4,"COMBINING RIGHT PARENTHESIS BELOW RIGHT"));
        data.insert(std::make_pair(0x1ac5,"COMBINING SQUARE BRACKETS ABOVE"));
        data.insert(std::make_pair(0x1ac6,"COMBINING NUMBER SIGN ABOVE"));
        data.insert(std::make_pair(0x1ac7,"COMBINING INVERTED DOUBLE ARCH ABOVE"));
        data.insert(std::make_pair(0x1ac8,"COMBINING PLUS SIGN ABOVE"));
        data.insert(std::make_pair(0x1ac9,"COMBINING DOUBLE PLUS SIGN ABOVE"));
        data.insert(std::make_pair(0x1aca,"COMBINING DOUBLE PLUS SIGN BELOW"));
        data.insert(std::make_pair(0x1acb,"COMBINING TRIPLE ACUTE ACCENT"));
        data.insert(std::make_pair(0x1acc,"COMBINING LATIN SMALL LETTER INSULAR G"));
        data.insert(std::make_pair(0x1acd,"COMBINING LATIN SMALL LETTER INSULAR R"));
        data.insert(std::make_pair(0x1ace,"COMBINING LATIN SMALL LETTER INSULAR T"));
        data.insert(std::make_pair(0x1b00,"BALINESE SIGN ULU RICEM"));
        data.insert(std::make_pair(0x1b01,"BALINESE SIGN ULU CANDRA"));
        data.insert(std::make_pair(0x1b02,"BALINESE SIGN CECEK"));
        data.insert(std::make_pair(0x1b03,"BALINESE SIGN SURANG"));
        data.insert(std::make_pair(0x1b04,"BALINESE SIGN BISAH"));
        data.insert(std::make_pair(0x1b05,"BALINESE LETTER AKARA"));
        data.insert(std::make_pair(0x1b06,"BALINESE LETTER AKARA TEDUNG"));
        data.insert(std::make_pair(0x1b07,"BALINESE LETTER IKARA"));
        data.insert(std::make_pair(0x1b08,"BALINESE LETTER IKARA TEDUNG"));
        data.insert(std::make_pair(0x1b09,"BALINESE LETTER UKARA"));
        data.insert(std::make_pair(0x1b0a,"BALINESE LETTER UKARA TEDUNG"));
        data.insert(std::make_pair(0x1b0b,"BALINESE LETTER RA REPA"));
        data.insert(std::make_pair(0x1b0c,"BALINESE LETTER RA REPA TEDUNG"));
        data.insert(std::make_pair(0x1b0d,"BALINESE LETTER LA LENGA"));
        data.insert(std::make_pair(0x1b0e,"BALINESE LETTER LA LENGA TEDUNG"));
        data.insert(std::make_pair(0x1b0f,"BALINESE LETTER EKARA"));
        data.insert(std::make_pair(0x1b10,"BALINESE LETTER AIKARA"));
        data.insert(std::make_pair(0x1b11,"BALINESE LETTER OKARA"));
        data.insert(std::make_pair(0x1b12,"BALINESE LETTER OKARA TEDUNG"));
        data.insert(std::make_pair(0x1b13,"BALINESE LETTER KA"));
        data.insert(std::make_pair(0x1b14,"BALINESE LETTER KA MAHAPRANA"));
        data.insert(std::make_pair(0x1b15,"BALINESE LETTER GA"));
        data.insert(std::make_pair(0x1b16,"BALINESE LETTER GA GORA"));
        data.insert(std::make_pair(0x1b17,"BALINESE LETTER NGA"));
        data.insert(std::make_pair(0x1b18,"BALINESE LETTER CA"));
        data.insert(std::make_pair(0x1b19,"BALINESE LETTER CA LACA"));
        data.insert(std::make_pair(0x1b1a,"BALINESE LETTER JA"));
        data.insert(std::make_pair(0x1b1b,"BALINESE LETTER JA JERA"));
        data.insert(std::make_pair(0x1b1c,"BALINESE LETTER NYA"));
        data.insert(std::make_pair(0x1b1d,"BALINESE LETTER TA LATIK"));
        data.insert(std::make_pair(0x1b1e,"BALINESE LETTER TA MURDA MAHAPRANA"));
        data.insert(std::make_pair(0x1b1f,"BALINESE LETTER DA MURDA ALPAPRANA"));
        data.insert(std::make_pair(0x1b20,"BALINESE LETTER DA MURDA MAHAPRANA"));
        data.insert(std::make_pair(0x1b21,"BALINESE LETTER NA RAMBAT"));
        data.insert(std::make_pair(0x1b22,"BALINESE LETTER TA"));
        data.insert(std::make_pair(0x1b23,"BALINESE LETTER TA TAWA"));
        data.insert(std::make_pair(0x1b24,"BALINESE LETTER DA"));
        data.insert(std::make_pair(0x1b25,"BALINESE LETTER DA MADU"));
        data.insert(std::make_pair(0x1b26,"BALINESE LETTER NA"));
        data.insert(std::make_pair(0x1b27,"BALINESE LETTER PA"));
        data.insert(std::make_pair(0x1b28,"BALINESE LETTER PA KAPAL"));
        data.insert(std::make_pair(0x1b29,"BALINESE LETTER BA"));
        data.insert(std::make_pair(0x1b2a,"BALINESE LETTER BA KEMBANG"));
        data.insert(std::make_pair(0x1b2b,"BALINESE LETTER MA"));
        data.insert(std::make_pair(0x1b2c,"BALINESE LETTER YA"));
        data.insert(std::make_pair(0x1b2d,"BALINESE LETTER RA"));
        data.insert(std::make_pair(0x1b2e,"BALINESE LETTER LA"));
        data.insert(std::make_pair(0x1b2f,"BALINESE LETTER WA"));
        data.insert(std::make_pair(0x1b30,"BALINESE LETTER SA SAGA"));
        data.insert(std::make_pair(0x1b31,"BALINESE LETTER SA SAPA"));
        data.insert(std::make_pair(0x1b32,"BALINESE LETTER SA"));
        data.insert(std::make_pair(0x1b33,"BALINESE LETTER HA"));
        data.insert(std::make_pair(0x1b34,"BALINESE SIGN REREKAN"));
        data.insert(std::make_pair(0x1b35,"BALINESE VOWEL SIGN TEDUNG"));
        data.insert(std::make_pair(0x1b36,"BALINESE VOWEL SIGN ULU"));
        data.insert(std::make_pair(0x1b37,"BALINESE VOWEL SIGN ULU SARI"));
        data.insert(std::make_pair(0x1b38,"BALINESE VOWEL SIGN SUKU"));
        data.insert(std::make_pair(0x1b39,"BALINESE VOWEL SIGN SUKU ILUT"));
        data.insert(std::make_pair(0x1b3a,"BALINESE VOWEL SIGN RA REPA"));
        data.insert(std::make_pair(0x1b3b,"BALINESE VOWEL SIGN RA REPA TEDUNG"));
        data.insert(std::make_pair(0x1b3c,"BALINESE VOWEL SIGN LA LENGA"));
        data.insert(std::make_pair(0x1b3d,"BALINESE VOWEL SIGN LA LENGA TEDUNG"));
        data.insert(std::make_pair(0x1b3e,"BALINESE VOWEL SIGN TALING"));
        data.insert(std::make_pair(0x1b3f,"BALINESE VOWEL SIGN TALING REPA"));
        data.insert(std::make_pair(0x1b40,"BALINESE VOWEL SIGN TALING TEDUNG"));
        data.insert(std::make_pair(0x1b41,"BALINESE VOWEL SIGN TALING REPA TEDUNG"));
        data.insert(std::make_pair(0x1b42,"BALINESE VOWEL SIGN PEPET"));
        data.insert(std::make_pair(0x1b43,"BALINESE VOWEL SIGN PEPET TEDUNG"));
        data.insert(std::make_pair(0x1b44,"BALINESE ADEG ADEG"));
        data.insert(std::make_pair(0x1b45,"BALINESE LETTER KAF SASAK"));
        data.insert(std::make_pair(0x1b46,"BALINESE LETTER KHOT SASAK"));
        data.insert(std::make_pair(0x1b47,"BALINESE LETTER TZIR SASAK"));
        data.insert(std::make_pair(0x1b48,"BALINESE LETTER EF SASAK"));
        data.insert(std::make_pair(0x1b49,"BALINESE LETTER VE SASAK"));
        data.insert(std::make_pair(0x1b4a,"BALINESE LETTER ZAL SASAK"));
        data.insert(std::make_pair(0x1b4b,"BALINESE LETTER ASYURA SASAK"));
        data.insert(std::make_pair(0x1b4c,"BALINESE LETTER ARCHAIC JNYA"));
        data.insert(std::make_pair(0x1b50,"BALINESE DIGIT ZERO"));
        data.insert(std::make_pair(0x1b51,"BALINESE DIGIT ONE"));
        data.insert(std::make_pair(0x1b52,"BALINESE DIGIT TWO"));
        data.insert(std::make_pair(0x1b53,"BALINESE DIGIT THREE"));
        data.insert(std::make_pair(0x1b54,"BALINESE DIGIT FOUR"));
        data.insert(std::make_pair(0x1b55,"BALINESE DIGIT FIVE"));
        data.insert(std::make_pair(0x1b56,"BALINESE DIGIT SIX"));
        data.insert(std::make_pair(0x1b57,"BALINESE DIGIT SEVEN"));
        data.insert(std::make_pair(0x1b58,"BALINESE DIGIT EIGHT"));
        data.insert(std::make_pair(0x1b59,"BALINESE DIGIT NINE"));
        data.insert(std::make_pair(0x1b5a,"BALINESE PANTI"));
        data.insert(std::make_pair(0x1b5b,"BALINESE PAMADA"));
        data.insert(std::make_pair(0x1b5c,"BALINESE WINDU"));
        data.insert(std::make_pair(0x1b5d,"BALINESE CARIK PAMUNGKAH"));
        data.insert(std::make_pair(0x1b5e,"BALINESE CARIK SIKI"));
        data.insert(std::make_pair(0x1b5f,"BALINESE CARIK PAREREN"));
        data.insert(std::make_pair(0x1b60,"BALINESE PAMENENG"));
        data.insert(std::make_pair(0x1b61,"BALINESE MUSICAL SYMBOL DONG"));
        data.insert(std::make_pair(0x1b62,"BALINESE MUSICAL SYMBOL DENG"));
        data.insert(std::make_pair(0x1b63,"BALINESE MUSICAL SYMBOL DUNG"));
        data.insert(std::make_pair(0x1b64,"BALINESE MUSICAL SYMBOL DANG"));
        data.insert(std::make_pair(0x1b65,"BALINESE MUSICAL SYMBOL DANG SURANG"));
        data.insert(std::make_pair(0x1b66,"BALINESE MUSICAL SYMBOL DING"));
        data.insert(std::make_pair(0x1b67,"BALINESE MUSICAL SYMBOL DAENG"));
        data.insert(std::make_pair(0x1b68,"BALINESE MUSICAL SYMBOL DEUNG"));
        data.insert(std::make_pair(0x1b69,"BALINESE MUSICAL SYMBOL DAING"));
        data.insert(std::make_pair(0x1b6a,"BALINESE MUSICAL SYMBOL DANG GEDE"));
        data.insert(std::make_pair(0x1b6b,"BALINESE MUSICAL SYMBOL COMBINING TEGEH"));
        data.insert(std::make_pair(0x1b6c,"BALINESE MUSICAL SYMBOL COMBINING ENDEP"));
        data.insert(std::make_pair(0x1b6d,"BALINESE MUSICAL SYMBOL COMBINING KEMPUL"));
        data.insert(std::make_pair(0x1b6e,"BALINESE MUSICAL SYMBOL COMBINING KEMPLI"));
        data.insert(std::make_pair(0x1b6f,"BALINESE MUSICAL SYMBOL COMBINING JEGOGAN"));
        data.insert(std::make_pair(0x1b70,"BALINESE MUSICAL SYMBOL COMBINING KEMPUL WITH JEGOGAN"));
        data.insert(std::make_pair(0x1b71,"BALINESE MUSICAL SYMBOL COMBINING KEMPLI WITH JEGOGAN"));
        data.insert(std::make_pair(0x1b72,"BALINESE MUSICAL SYMBOL COMBINING BENDE"));
        data.insert(std::make_pair(0x1b73,"BALINESE MUSICAL SYMBOL COMBINING GONG"));
        data.insert(std::make_pair(0x1b74,"BALINESE MUSICAL SYMBOL RIGHT-HAND OPEN DUG"));
        data.insert(std::make_pair(0x1b75,"BALINESE MUSICAL SYMBOL RIGHT-HAND OPEN DAG"));
        data.insert(std::make_pair(0x1b76,"BALINESE MUSICAL SYMBOL RIGHT-HAND CLOSED TUK"));
        data.insert(std::make_pair(0x1b77,"BALINESE MUSICAL SYMBOL RIGHT-HAND CLOSED TAK"));
        data.insert(std::make_pair(0x1b78,"BALINESE MUSICAL SYMBOL LEFT-HAND OPEN PANG"));
        data.insert(std::make_pair(0x1b79,"BALINESE MUSICAL SYMBOL LEFT-HAND OPEN PUNG"));
        data.insert(std::make_pair(0x1b7a,"BALINESE MUSICAL SYMBOL LEFT-HAND CLOSED PLAK"));
        data.insert(std::make_pair(0x1b7b,"BALINESE MUSICAL SYMBOL LEFT-HAND CLOSED PLUK"));
        data.insert(std::make_pair(0x1b7c,"BALINESE MUSICAL SYMBOL LEFT-HAND OPEN PING"));
        data.insert(std::make_pair(0x1b7d,"BALINESE PANTI LANTANG"));
        data.insert(std::make_pair(0x1b7e,"BALINESE PAMADA LANTANG"));
        data.insert(std::make_pair(0x1b80,"SUNDANESE SIGN PANYECEK"));
        data.insert(std::make_pair(0x1b81,"SUNDANESE SIGN PANGLAYAR"));
        data.insert(std::make_pair(0x1b82,"SUNDANESE SIGN PANGWISAD"));
        data.insert(std::make_pair(0x1b83,"SUNDANESE LETTER A"));
        data.insert(std::make_pair(0x1b84,"SUNDANESE LETTER I"));
        data.insert(std::make_pair(0x1b85,"SUNDANESE LETTER U"));
        data.insert(std::make_pair(0x1b86,"SUNDANESE LETTER AE"));
        data.insert(std::make_pair(0x1b87,"SUNDANESE LETTER O"));
        data.insert(std::make_pair(0x1b88,"SUNDANESE LETTER E"));
        data.insert(std::make_pair(0x1b89,"SUNDANESE LETTER EU"));
        data.insert(std::make_pair(0x1b8a,"SUNDANESE LETTER KA"));
        data.insert(std::make_pair(0x1b8b,"SUNDANESE LETTER QA"));
        data.insert(std::make_pair(0x1b8c,"SUNDANESE LETTER GA"));
        data.insert(std::make_pair(0x1b8d,"SUNDANESE LETTER NGA"));
        data.insert(std::make_pair(0x1b8e,"SUNDANESE LETTER CA"));
        data.insert(std::make_pair(0x1b8f,"SUNDANESE LETTER JA"));
        data.insert(std::make_pair(0x1b90,"SUNDANESE LETTER ZA"));
        data.insert(std::make_pair(0x1b91,"SUNDANESE LETTER NYA"));
        data.insert(std::make_pair(0x1b92,"SUNDANESE LETTER TA"));
        data.insert(std::make_pair(0x1b93,"SUNDANESE LETTER DA"));
        data.insert(std::make_pair(0x1b94,"SUNDANESE LETTER NA"));
        data.insert(std::make_pair(0x1b95,"SUNDANESE LETTER PA"));
        data.insert(std::make_pair(0x1b96,"SUNDANESE LETTER FA"));
        data.insert(std::make_pair(0x1b97,"SUNDANESE LETTER VA"));
        data.insert(std::make_pair(0x1b98,"SUNDANESE LETTER BA"));
        data.insert(std::make_pair(0x1b99,"SUNDANESE LETTER MA"));
        data.insert(std::make_pair(0x1b9a,"SUNDANESE LETTER YA"));
        data.insert(std::make_pair(0x1b9b,"SUNDANESE LETTER RA"));
        data.insert(std::make_pair(0x1b9c,"SUNDANESE LETTER LA"));
        data.insert(std::make_pair(0x1b9d,"SUNDANESE LETTER WA"));
        data.insert(std::make_pair(0x1b9e,"SUNDANESE LETTER SA"));
        data.insert(std::make_pair(0x1b9f,"SUNDANESE LETTER XA"));
        data.insert(std::make_pair(0x1ba0,"SUNDANESE LETTER HA"));
        data.insert(std::make_pair(0x1ba1,"SUNDANESE CONSONANT SIGN PAMINGKAL"));
        data.insert(std::make_pair(0x1ba2,"SUNDANESE CONSONANT SIGN PANYAKRA"));
        data.insert(std::make_pair(0x1ba3,"SUNDANESE CONSONANT SIGN PANYIKU"));
        data.insert(std::make_pair(0x1ba4,"SUNDANESE VOWEL SIGN PANGHULU"));
        data.insert(std::make_pair(0x1ba5,"SUNDANESE VOWEL SIGN PANYUKU"));
        data.insert(std::make_pair(0x1ba6,"SUNDANESE VOWEL SIGN PANAELAENG"));
        data.insert(std::make_pair(0x1ba7,"SUNDANESE VOWEL SIGN PANOLONG"));
        data.insert(std::make_pair(0x1ba8,"SUNDANESE VOWEL SIGN PAMEPET"));
        data.insert(std::make_pair(0x1ba9,"SUNDANESE VOWEL SIGN PANEULEUNG"));
        data.insert(std::make_pair(0x1baa,"SUNDANESE SIGN PAMAAEH"));
        data.insert(std::make_pair(0x1bab,"SUNDANESE SIGN VIRAMA"));
        data.insert(std::make_pair(0x1bac,"SUNDANESE CONSONANT SIGN PASANGAN MA"));
        data.insert(std::make_pair(0x1bad,"SUNDANESE CONSONANT SIGN PASANGAN WA"));
        data.insert(std::make_pair(0x1bae,"SUNDANESE LETTER KHA"));
        data.insert(std::make_pair(0x1baf,"SUNDANESE LETTER SYA"));
        data.insert(std::make_pair(0x1bb0,"SUNDANESE DIGIT ZERO"));
        data.insert(std::make_pair(0x1bb1,"SUNDANESE DIGIT ONE"));
        data.insert(std::make_pair(0x1bb2,"SUNDANESE DIGIT TWO"));
        data.insert(std::make_pair(0x1bb3,"SUNDANESE DIGIT THREE"));
        data.insert(std::make_pair(0x1bb4,"SUNDANESE DIGIT FOUR"));
        data.insert(std::make_pair(0x1bb5,"SUNDANESE DIGIT FIVE"));
        data.insert(std::make_pair(0x1bb6,"SUNDANESE DIGIT SIX"));
        data.insert(std::make_pair(0x1bb7,"SUNDANESE DIGIT SEVEN"));
        data.insert(std::make_pair(0x1bb8,"SUNDANESE DIGIT EIGHT"));
        data.insert(std::make_pair(0x1bb9,"SUNDANESE DIGIT NINE"));
        data.insert(std::make_pair(0x1bba,"SUNDANESE AVAGRAHA"));
        data.insert(std::make_pair(0x1bbb,"SUNDANESE LETTER REU"));
        data.insert(std::make_pair(0x1bbc,"SUNDANESE LETTER LEU"));
        data.insert(std::make_pair(0x1bbd,"SUNDANESE LETTER BHA"));
        data.insert(std::make_pair(0x1bbe,"SUNDANESE LETTER FINAL K"));
        data.insert(std::make_pair(0x1bbf,"SUNDANESE LETTER FINAL M"));
        data.insert(std::make_pair(0x1bc0,"BATAK LETTER A"));
        data.insert(std::make_pair(0x1bc1,"BATAK LETTER SIMALUNGUN A"));
        data.insert(std::make_pair(0x1bc2,"BATAK LETTER HA"));
        data.insert(std::make_pair(0x1bc3,"BATAK LETTER SIMALUNGUN HA"));
        data.insert(std::make_pair(0x1bc4,"BATAK LETTER MANDAILING HA"));
        data.insert(std::make_pair(0x1bc5,"BATAK LETTER BA"));
        data.insert(std::make_pair(0x1bc6,"BATAK LETTER KARO BA"));
        data.insert(std::make_pair(0x1bc7,"BATAK LETTER PA"));
        data.insert(std::make_pair(0x1bc8,"BATAK LETTER SIMALUNGUN PA"));
        data.insert(std::make_pair(0x1bc9,"BATAK LETTER NA"));
        data.insert(std::make_pair(0x1bca,"BATAK LETTER MANDAILING NA"));
        data.insert(std::make_pair(0x1bcb,"BATAK LETTER WA"));
        data.insert(std::make_pair(0x1bcc,"BATAK LETTER SIMALUNGUN WA"));
        data.insert(std::make_pair(0x1bcd,"BATAK LETTER PAKPAK WA"));
        data.insert(std::make_pair(0x1bce,"BATAK LETTER GA"));
        data.insert(std::make_pair(0x1bcf,"BATAK LETTER SIMALUNGUN GA"));
        data.insert(std::make_pair(0x1bd0,"BATAK LETTER JA"));
        data.insert(std::make_pair(0x1bd1,"BATAK LETTER DA"));
        data.insert(std::make_pair(0x1bd2,"BATAK LETTER RA"));
        data.insert(std::make_pair(0x1bd3,"BATAK LETTER SIMALUNGUN RA"));
        data.insert(std::make_pair(0x1bd4,"BATAK LETTER MA"));
        data.insert(std::make_pair(0x1bd5,"BATAK LETTER SIMALUNGUN MA"));
        data.insert(std::make_pair(0x1bd6,"BATAK LETTER SOUTHERN TA"));
        data.insert(std::make_pair(0x1bd7,"BATAK LETTER NORTHERN TA"));
        data.insert(std::make_pair(0x1bd8,"BATAK LETTER SA"));
        data.insert(std::make_pair(0x1bd9,"BATAK LETTER SIMALUNGUN SA"));
        data.insert(std::make_pair(0x1bda,"BATAK LETTER MANDAILING SA"));
        data.insert(std::make_pair(0x1bdb,"BATAK LETTER YA"));
        data.insert(std::make_pair(0x1bdc,"BATAK LETTER SIMALUNGUN YA"));
        data.insert(std::make_pair(0x1bdd,"BATAK LETTER NGA"));
        data.insert(std::make_pair(0x1bde,"BATAK LETTER LA"));
        data.insert(std::make_pair(0x1bdf,"BATAK LETTER SIMALUNGUN LA"));
        data.insert(std::make_pair(0x1be0,"BATAK LETTER NYA"));
        data.insert(std::make_pair(0x1be1,"BATAK LETTER CA"));
        data.insert(std::make_pair(0x1be2,"BATAK LETTER NDA"));
        data.insert(std::make_pair(0x1be3,"BATAK LETTER MBA"));
        data.insert(std::make_pair(0x1be4,"BATAK LETTER I"));
        data.insert(std::make_pair(0x1be5,"BATAK LETTER U"));
        data.insert(std::make_pair(0x1be6,"BATAK SIGN TOMPI"));
        data.insert(std::make_pair(0x1be7,"BATAK VOWEL SIGN E"));
        data.insert(std::make_pair(0x1be8,"BATAK VOWEL SIGN PAKPAK E"));
        data.insert(std::make_pair(0x1be9,"BATAK VOWEL SIGN EE"));
        data.insert(std::make_pair(0x1bea,"BATAK VOWEL SIGN I"));
        data.insert(std::make_pair(0x1beb,"BATAK VOWEL SIGN KARO I"));
        data.insert(std::make_pair(0x1bec,"BATAK VOWEL SIGN O"));
        data.insert(std::make_pair(0x1bed,"BATAK VOWEL SIGN KARO O"));
        data.insert(std::make_pair(0x1bee,"BATAK VOWEL SIGN U"));
        data.insert(std::make_pair(0x1bef,"BATAK VOWEL SIGN U FOR SIMALUNGUN SA"));
        data.insert(std::make_pair(0x1bf0,"BATAK CONSONANT SIGN NG"));
        data.insert(std::make_pair(0x1bf1,"BATAK CONSONANT SIGN H"));
        data.insert(std::make_pair(0x1bf2,"BATAK PANGOLAT"));
        data.insert(std::make_pair(0x1bf3,"BATAK PANONGONAN"));
        data.insert(std::make_pair(0x1bfc,"BATAK SYMBOL BINDU NA METEK"));
        data.insert(std::make_pair(0x1bfd,"BATAK SYMBOL BINDU PINARBORAS"));
        data.insert(std::make_pair(0x1bfe,"BATAK SYMBOL BINDU JUDUL"));
        data.insert(std::make_pair(0x1bff,"BATAK SYMBOL BINDU PANGOLAT"));
        data.insert(std::make_pair(0x1c00,"LEPCHA LETTER KA"));
        data.insert(std::make_pair(0x1c01,"LEPCHA LETTER KLA"));
        data.insert(std::make_pair(0x1c02,"LEPCHA LETTER KHA"));
        data.insert(std::make_pair(0x1c03,"LEPCHA LETTER GA"));
        data.insert(std::make_pair(0x1c04,"LEPCHA LETTER GLA"));
        data.insert(std::make_pair(0x1c05,"LEPCHA LETTER NGA"));
        data.insert(std::make_pair(0x1c06,"LEPCHA LETTER CA"));
        data.insert(std::make_pair(0x1c07,"LEPCHA LETTER CHA"));
        data.insert(std::make_pair(0x1c08,"LEPCHA LETTER JA"));
        data.insert(std::make_pair(0x1c09,"LEPCHA LETTER NYA"));
        data.insert(std::make_pair(0x1c0a,"LEPCHA LETTER TA"));
        data.insert(std::make_pair(0x1c0b,"LEPCHA LETTER THA"));
        data.insert(std::make_pair(0x1c0c,"LEPCHA LETTER DA"));
        data.insert(std::make_pair(0x1c0d,"LEPCHA LETTER NA"));
        data.insert(std::make_pair(0x1c0e,"LEPCHA LETTER PA"));
        data.insert(std::make_pair(0x1c0f,"LEPCHA LETTER PLA"));
        data.insert(std::make_pair(0x1c10,"LEPCHA LETTER PHA"));
        data.insert(std::make_pair(0x1c11,"LEPCHA LETTER FA"));
        data.insert(std::make_pair(0x1c12,"LEPCHA LETTER FLA"));
        data.insert(std::make_pair(0x1c13,"LEPCHA LETTER BA"));
        data.insert(std::make_pair(0x1c14,"LEPCHA LETTER BLA"));
        data.insert(std::make_pair(0x1c15,"LEPCHA LETTER MA"));
        data.insert(std::make_pair(0x1c16,"LEPCHA LETTER MLA"));
        data.insert(std::make_pair(0x1c17,"LEPCHA LETTER TSA"));
        data.insert(std::make_pair(0x1c18,"LEPCHA LETTER TSHA"));
        data.insert(std::make_pair(0x1c19,"LEPCHA LETTER DZA"));
        data.insert(std::make_pair(0x1c1a,"LEPCHA LETTER YA"));
        data.insert(std::make_pair(0x1c1b,"LEPCHA LETTER RA"));
        data.insert(std::make_pair(0x1c1c,"LEPCHA LETTER LA"));
        data.insert(std::make_pair(0x1c1d,"LEPCHA LETTER HA"));
        data.insert(std::make_pair(0x1c1e,"LEPCHA LETTER HLA"));
        data.insert(std::make_pair(0x1c1f,"LEPCHA LETTER VA"));
        data.insert(std::make_pair(0x1c20,"LEPCHA LETTER SA"));
        data.insert(std::make_pair(0x1c21,"LEPCHA LETTER SHA"));
        data.insert(std::make_pair(0x1c22,"LEPCHA LETTER WA"));
        data.insert(std::make_pair(0x1c23,"LEPCHA LETTER A"));
        data.insert(std::make_pair(0x1c24,"LEPCHA SUBJOINED LETTER YA"));
        data.insert(std::make_pair(0x1c25,"LEPCHA SUBJOINED LETTER RA"));
        data.insert(std::make_pair(0x1c26,"LEPCHA VOWEL SIGN AA"));
        data.insert(std::make_pair(0x1c27,"LEPCHA VOWEL SIGN I"));
        data.insert(std::make_pair(0x1c28,"LEPCHA VOWEL SIGN O"));
        data.insert(std::make_pair(0x1c29,"LEPCHA VOWEL SIGN OO"));
        data.insert(std::make_pair(0x1c2a,"LEPCHA VOWEL SIGN U"));
        data.insert(std::make_pair(0x1c2b,"LEPCHA VOWEL SIGN UU"));
        data.insert(std::make_pair(0x1c2c,"LEPCHA VOWEL SIGN E"));
        data.insert(std::make_pair(0x1c2d,"LEPCHA CONSONANT SIGN K"));
        data.insert(std::make_pair(0x1c2e,"LEPCHA CONSONANT SIGN M"));
        data.insert(std::make_pair(0x1c2f,"LEPCHA CONSONANT SIGN L"));
        data.insert(std::make_pair(0x1c30,"LEPCHA CONSONANT SIGN N"));
        data.insert(std::make_pair(0x1c31,"LEPCHA CONSONANT SIGN P"));
        data.insert(std::make_pair(0x1c32,"LEPCHA CONSONANT SIGN R"));
        data.insert(std::make_pair(0x1c33,"LEPCHA CONSONANT SIGN T"));
        data.insert(std::make_pair(0x1c34,"LEPCHA CONSONANT SIGN NYIN-DO"));
        data.insert(std::make_pair(0x1c35,"LEPCHA CONSONANT SIGN KANG"));
        data.insert(std::make_pair(0x1c36,"LEPCHA SIGN RAN"));
        data.insert(std::make_pair(0x1c37,"LEPCHA SIGN NUKTA"));
        data.insert(std::make_pair(0x1c3b,"LEPCHA PUNCTUATION TA-ROL"));
        data.insert(std::make_pair(0x1c3c,"LEPCHA PUNCTUATION NYET THYOOM TA-ROL"));
        data.insert(std::make_pair(0x1c3d,"LEPCHA PUNCTUATION CER-WA"));
        data.insert(std::make_pair(0x1c3e,"LEPCHA PUNCTUATION TSHOOK CER-WA"));
        data.insert(std::make_pair(0x1c3f,"LEPCHA PUNCTUATION TSHOOK"));
        data.insert(std::make_pair(0x1c40,"LEPCHA DIGIT ZERO"));
        data.insert(std::make_pair(0x1c41,"LEPCHA DIGIT ONE"));
        data.insert(std::make_pair(0x1c42,"LEPCHA DIGIT TWO"));
        data.insert(std::make_pair(0x1c43,"LEPCHA DIGIT THREE"));
        data.insert(std::make_pair(0x1c44,"LEPCHA DIGIT FOUR"));
        data.insert(std::make_pair(0x1c45,"LEPCHA DIGIT FIVE"));
        data.insert(std::make_pair(0x1c46,"LEPCHA DIGIT SIX"));
        data.insert(std::make_pair(0x1c47,"LEPCHA DIGIT SEVEN"));
        data.insert(std::make_pair(0x1c48,"LEPCHA DIGIT EIGHT"));
        data.insert(std::make_pair(0x1c49,"LEPCHA DIGIT NINE"));
        data.insert(std::make_pair(0x1c4d,"LEPCHA LETTER TTA"));
        data.insert(std::make_pair(0x1c4e,"LEPCHA LETTER TTHA"));
        data.insert(std::make_pair(0x1c4f,"LEPCHA LETTER DDA"));
        data.insert(std::make_pair(0x1c50,"OL CHIKI DIGIT ZERO"));
        data.insert(std::make_pair(0x1c51,"OL CHIKI DIGIT ONE"));
        data.insert(std::make_pair(0x1c52,"OL CHIKI DIGIT TWO"));
        data.insert(std::make_pair(0x1c53,"OL CHIKI DIGIT THREE"));
        data.insert(std::make_pair(0x1c54,"OL CHIKI DIGIT FOUR"));
        data.insert(std::make_pair(0x1c55,"OL CHIKI DIGIT FIVE"));
        data.insert(std::make_pair(0x1c56,"OL CHIKI DIGIT SIX"));
        data.insert(std::make_pair(0x1c57,"OL CHIKI DIGIT SEVEN"));
        data.insert(std::make_pair(0x1c58,"OL CHIKI DIGIT EIGHT"));
        data.insert(std::make_pair(0x1c59,"OL CHIKI DIGIT NINE"));
        data.insert(std::make_pair(0x1c5a,"OL CHIKI LETTER LA"));
        data.insert(std::make_pair(0x1c5b,"OL CHIKI LETTER AT"));
        data.insert(std::make_pair(0x1c5c,"OL CHIKI LETTER AG"));
        data.insert(std::make_pair(0x1c5d,"OL CHIKI LETTER ANG"));
        data.insert(std::make_pair(0x1c5e,"OL CHIKI LETTER AL"));
        data.insert(std::make_pair(0x1c5f,"OL CHIKI LETTER LAA"));
        data.insert(std::make_pair(0x1c60,"OL CHIKI LETTER AAK"));
        data.insert(std::make_pair(0x1c61,"OL CHIKI LETTER AAJ"));
        data.insert(std::make_pair(0x1c62,"OL CHIKI LETTER AAM"));
        data.insert(std::make_pair(0x1c63,"OL CHIKI LETTER AAW"));
        data.insert(std::make_pair(0x1c64,"OL CHIKI LETTER LI"));
        data.insert(std::make_pair(0x1c65,"OL CHIKI LETTER IS"));
        data.insert(std::make_pair(0x1c66,"OL CHIKI LETTER IH"));
        data.insert(std::make_pair(0x1c67,"OL CHIKI LETTER INY"));
        data.insert(std::make_pair(0x1c68,"OL CHIKI LETTER IR"));
        data.insert(std::make_pair(0x1c69,"OL CHIKI LETTER LU"));
        data.insert(std::make_pair(0x1c6a,"OL CHIKI LETTER UC"));
        data.insert(std::make_pair(0x1c6b,"OL CHIKI LETTER UD"));
        data.insert(std::make_pair(0x1c6c,"OL CHIKI LETTER UNN"));
        data.insert(std::make_pair(0x1c6d,"OL CHIKI LETTER UY"));
        data.insert(std::make_pair(0x1c6e,"OL CHIKI LETTER LE"));
        data.insert(std::make_pair(0x1c6f,"OL CHIKI LETTER EP"));
        data.insert(std::make_pair(0x1c70,"OL CHIKI LETTER EDD"));
        data.insert(std::make_pair(0x1c71,"OL CHIKI LETTER EN"));
        data.insert(std::make_pair(0x1c72,"OL CHIKI LETTER ERR"));
        data.insert(std::make_pair(0x1c73,"OL CHIKI LETTER LO"));
        data.insert(std::make_pair(0x1c74,"OL CHIKI LETTER OTT"));
        data.insert(std::make_pair(0x1c75,"OL CHIKI LETTER OB"));
        data.insert(std::make_pair(0x1c76,"OL CHIKI LETTER OV"));
        data.insert(std::make_pair(0x1c77,"OL CHIKI LETTER OH"));
        data.insert(std::make_pair(0x1c78,"OL CHIKI MU TTUDDAG"));
        data.insert(std::make_pair(0x1c79,"OL CHIKI GAAHLAA TTUDDAAG"));
        data.insert(std::make_pair(0x1c7a,"OL CHIKI MU-GAAHLAA TTUDDAAG"));
        data.insert(std::make_pair(0x1c7b,"OL CHIKI RELAA"));
        data.insert(std::make_pair(0x1c7c,"OL CHIKI PHAARKAA"));
        data.insert(std::make_pair(0x1c7d,"OL CHIKI AHAD"));
        data.insert(std::make_pair(0x1c7e,"OL CHIKI PUNCTUATION MUCAAD"));
        data.insert(std::make_pair(0x1c7f,"OL CHIKI PUNCTUATION DOUBLE MUCAAD"));
        data.insert(std::make_pair(0x1c80,"CYRILLIC SMALL LETTER ROUNDED VE"));
        data.insert(std::make_pair(0x1c81,"CYRILLIC SMALL LETTER LONG-LEGGED DE"));
        data.insert(std::make_pair(0x1c82,"CYRILLIC SMALL LETTER NARROW O"));
        data.insert(std::make_pair(0x1c83,"CYRILLIC SMALL LETTER WIDE ES"));
        data.insert(std::make_pair(0x1c84,"CYRILLIC SMALL LETTER TALL TE"));
        data.insert(std::make_pair(0x1c85,"CYRILLIC SMALL LETTER THREE-LEGGED TE"));
        data.insert(std::make_pair(0x1c86,"CYRILLIC SMALL LETTER TALL HARD SIGN"));
        data.insert(std::make_pair(0x1c87,"CYRILLIC SMALL LETTER TALL YAT"));
        data.insert(std::make_pair(0x1c88,"CYRILLIC SMALL LETTER UNBLENDED UK"));
        data.insert(std::make_pair(0x1c90,"GEORGIAN MTAVRULI CAPITAL LETTER AN"));
        data.insert(std::make_pair(0x1c91,"GEORGIAN MTAVRULI CAPITAL LETTER BAN"));
        data.insert(std::make_pair(0x1c92,"GEORGIAN MTAVRULI CAPITAL LETTER GAN"));
        data.insert(std::make_pair(0x1c93,"GEORGIAN MTAVRULI CAPITAL LETTER DON"));
        data.insert(std::make_pair(0x1c94,"GEORGIAN MTAVRULI CAPITAL LETTER EN"));
        data.insert(std::make_pair(0x1c95,"GEORGIAN MTAVRULI CAPITAL LETTER VIN"));
        data.insert(std::make_pair(0x1c96,"GEORGIAN MTAVRULI CAPITAL LETTER ZEN"));
        data.insert(std::make_pair(0x1c97,"GEORGIAN MTAVRULI CAPITAL LETTER TAN"));
        data.insert(std::make_pair(0x1c98,"GEORGIAN MTAVRULI CAPITAL LETTER IN"));
        data.insert(std::make_pair(0x1c99,"GEORGIAN MTAVRULI CAPITAL LETTER KAN"));
        data.insert(std::make_pair(0x1c9a,"GEORGIAN MTAVRULI CAPITAL LETTER LAS"));
        data.insert(std::make_pair(0x1c9b,"GEORGIAN MTAVRULI CAPITAL LETTER MAN"));
        data.insert(std::make_pair(0x1c9c,"GEORGIAN MTAVRULI CAPITAL LETTER NAR"));
        data.insert(std::make_pair(0x1c9d,"GEORGIAN MTAVRULI CAPITAL LETTER ON"));
        data.insert(std::make_pair(0x1c9e,"GEORGIAN MTAVRULI CAPITAL LETTER PAR"));
        data.insert(std::make_pair(0x1c9f,"GEORGIAN MTAVRULI CAPITAL LETTER ZHAR"));
        data.insert(std::make_pair(0x1ca0,"GEORGIAN MTAVRULI CAPITAL LETTER RAE"));
        data.insert(std::make_pair(0x1ca1,"GEORGIAN MTAVRULI CAPITAL LETTER SAN"));
        data.insert(std::make_pair(0x1ca2,"GEORGIAN MTAVRULI CAPITAL LETTER TAR"));
        data.insert(std::make_pair(0x1ca3,"GEORGIAN MTAVRULI CAPITAL LETTER UN"));
        data.insert(std::make_pair(0x1ca4,"GEORGIAN MTAVRULI CAPITAL LETTER PHAR"));
        data.insert(std::make_pair(0x1ca5,"GEORGIAN MTAVRULI CAPITAL LETTER KHAR"));
        data.insert(std::make_pair(0x1ca6,"GEORGIAN MTAVRULI CAPITAL LETTER GHAN"));
        data.insert(std::make_pair(0x1ca7,"GEORGIAN MTAVRULI CAPITAL LETTER QAR"));
        data.insert(std::make_pair(0x1ca8,"GEORGIAN MTAVRULI CAPITAL LETTER SHIN"));
        data.insert(std::make_pair(0x1ca9,"GEORGIAN MTAVRULI CAPITAL LETTER CHIN"));
        data.insert(std::make_pair(0x1caa,"GEORGIAN MTAVRULI CAPITAL LETTER CAN"));
        data.insert(std::make_pair(0x1cab,"GEORGIAN MTAVRULI CAPITAL LETTER JIL"));
        data.insert(std::make_pair(0x1cac,"GEORGIAN MTAVRULI CAPITAL LETTER CIL"));
        data.insert(std::make_pair(0x1cad,"GEORGIAN MTAVRULI CAPITAL LETTER CHAR"));
        data.insert(std::make_pair(0x1cae,"GEORGIAN MTAVRULI CAPITAL LETTER XAN"));
        data.insert(std::make_pair(0x1caf,"GEORGIAN MTAVRULI CAPITAL LETTER JHAN"));
        data.insert(std::make_pair(0x1cb0,"GEORGIAN MTAVRULI CAPITAL LETTER HAE"));
        data.insert(std::make_pair(0x1cb1,"GEORGIAN MTAVRULI CAPITAL LETTER HE"));
        data.insert(std::make_pair(0x1cb2,"GEORGIAN MTAVRULI CAPITAL LETTER HIE"));
        data.insert(std::make_pair(0x1cb3,"GEORGIAN MTAVRULI CAPITAL LETTER WE"));
        data.insert(std::make_pair(0x1cb4,"GEORGIAN MTAVRULI CAPITAL LETTER HAR"));
        data.insert(std::make_pair(0x1cb5,"GEORGIAN MTAVRULI CAPITAL LETTER HOE"));
        data.insert(std::make_pair(0x1cb6,"GEORGIAN MTAVRULI CAPITAL LETTER FI"));
        data.insert(std::make_pair(0x1cb7,"GEORGIAN MTAVRULI CAPITAL LETTER YN"));
        data.insert(std::make_pair(0x1cb8,"GEORGIAN MTAVRULI CAPITAL LETTER ELIFI"));
        data.insert(std::make_pair(0x1cb9,"GEORGIAN MTAVRULI CAPITAL LETTER TURNED GAN"));
        data.insert(std::make_pair(0x1cba,"GEORGIAN MTAVRULI CAPITAL LETTER AIN"));
        data.insert(std::make_pair(0x1cbd,"GEORGIAN MTAVRULI CAPITAL LETTER AEN"));
        data.insert(std::make_pair(0x1cbe,"GEORGIAN MTAVRULI CAPITAL LETTER HARD SIGN"));
        data.insert(std::make_pair(0x1cbf,"GEORGIAN MTAVRULI CAPITAL LETTER LABIAL SIGN"));
        data.insert(std::make_pair(0x1cc0,"SUNDANESE PUNCTUATION BINDU SURYA"));
        data.insert(std::make_pair(0x1cc1,"SUNDANESE PUNCTUATION BINDU PANGLONG"));
        data.insert(std::make_pair(0x1cc2,"SUNDANESE PUNCTUATION BINDU PURNAMA"));
        data.insert(std::make_pair(0x1cc3,"SUNDANESE PUNCTUATION BINDU CAKRA"));
        data.insert(std::make_pair(0x1cc4,"SUNDANESE PUNCTUATION BINDU LEU SATANGA"));
        data.insert(std::make_pair(0x1cc5,"SUNDANESE PUNCTUATION BINDU KA SATANGA"));
        data.insert(std::make_pair(0x1cc6,"SUNDANESE PUNCTUATION BINDU DA SATANGA"));
        data.insert(std::make_pair(0x1cc7,"SUNDANESE PUNCTUATION BINDU BA SATANGA"));
        data.insert(std::make_pair(0x1cd0,"VEDIC TONE KARSHANA"));
        data.insert(std::make_pair(0x1cd1,"VEDIC TONE SHARA"));
        data.insert(std::make_pair(0x1cd2,"VEDIC TONE PRENKHA"));
        data.insert(std::make_pair(0x1cd3,"VEDIC SIGN NIHSHVASA"));
        data.insert(std::make_pair(0x1cd4,"VEDIC SIGN YAJURVEDIC MIDLINE SVARITA"));
        data.insert(std::make_pair(0x1cd5,"VEDIC TONE YAJURVEDIC AGGRAVATED INDEPENDENT SVARITA"));
        data.insert(std::make_pair(0x1cd6,"VEDIC TONE YAJURVEDIC INDEPENDENT SVARITA"));
        data.insert(std::make_pair(0x1cd7,"VEDIC TONE YAJURVEDIC KATHAKA INDEPENDENT SVARITA"));
        data.insert(std::make_pair(0x1cd8,"VEDIC TONE CANDRA BELOW"));
        data.insert(std::make_pair(0x1cd9,"VEDIC TONE YAJURVEDIC KATHAKA INDEPENDENT SVARITA SCHROEDER"));
        data.insert(std::make_pair(0x1cda,"VEDIC TONE DOUBLE SVARITA"));
        data.insert(std::make_pair(0x1cdb,"VEDIC TONE TRIPLE SVARITA"));
        data.insert(std::make_pair(0x1cdc,"VEDIC TONE KATHAKA ANUDATTA"));
        data.insert(std::make_pair(0x1cdd,"VEDIC TONE DOT BELOW"));
        data.insert(std::make_pair(0x1cde,"VEDIC TONE TWO DOTS BELOW"));
        data.insert(std::make_pair(0x1cdf,"VEDIC TONE THREE DOTS BELOW"));
        data.insert(std::make_pair(0x1ce0,"VEDIC TONE RIGVEDIC KASHMIRI INDEPENDENT SVARITA"));
        data.insert(std::make_pair(0x1ce1,"VEDIC TONE ATHARVAVEDIC INDEPENDENT SVARITA"));
        data.insert(std::make_pair(0x1ce2,"VEDIC SIGN VISARGA SVARITA"));
        data.insert(std::make_pair(0x1ce3,"VEDIC SIGN VISARGA UDATTA"));
        data.insert(std::make_pair(0x1ce4,"VEDIC SIGN REVERSED VISARGA UDATTA"));
        data.insert(std::make_pair(0x1ce5,"VEDIC SIGN VISARGA ANUDATTA"));
        data.insert(std::make_pair(0x1ce6,"VEDIC SIGN REVERSED VISARGA ANUDATTA"));
        data.insert(std::make_pair(0x1ce7,"VEDIC SIGN VISARGA UDATTA WITH TAIL"));
        data.insert(std::make_pair(0x1ce8,"VEDIC SIGN VISARGA ANUDATTA WITH TAIL"));
        data.insert(std::make_pair(0x1ce9,"VEDIC SIGN ANUSVARA ANTARGOMUKHA"));
        data.insert(std::make_pair(0x1cea,"VEDIC SIGN ANUSVARA BAHIRGOMUKHA"));
        data.insert(std::make_pair(0x1ceb,"VEDIC SIGN ANUSVARA VAMAGOMUKHA"));
        data.insert(std::make_pair(0x1cec,"VEDIC SIGN ANUSVARA VAMAGOMUKHA WITH TAIL"));
        data.insert(std::make_pair(0x1ced,"VEDIC SIGN TIRYAK"));
        data.insert(std::make_pair(0x1cee,"VEDIC SIGN HEXIFORM LONG ANUSVARA"));
        data.insert(std::make_pair(0x1cef,"VEDIC SIGN LONG ANUSVARA"));
        data.insert(std::make_pair(0x1cf0,"VEDIC SIGN RTHANG LONG ANUSVARA"));
        data.insert(std::make_pair(0x1cf1,"VEDIC SIGN ANUSVARA UBHAYATO MUKHA"));
        data.insert(std::make_pair(0x1cf2,"VEDIC SIGN ARDHAVISARGA"));
        data.insert(std::make_pair(0x1cf3,"VEDIC SIGN ROTATED ARDHAVISARGA"));
        data.insert(std::make_pair(0x1cf4,"VEDIC TONE CANDRA ABOVE"));
        data.insert(std::make_pair(0x1cf5,"VEDIC SIGN JIHVAMULIYA"));
        data.insert(std::make_pair(0x1cf6,"VEDIC SIGN UPADHMANIYA"));
        data.insert(std::make_pair(0x1cf7,"VEDIC SIGN ATIKRAMA"));
        data.insert(std::make_pair(0x1cf8,"VEDIC TONE RING ABOVE"));
        data.insert(std::make_pair(0x1cf9,"VEDIC TONE DOUBLE RING ABOVE"));
        data.insert(std::make_pair(0x1cfa,"VEDIC SIGN DOUBLE ANUSVARA ANTARGOMUKHA"));
        data.insert(std::make_pair(0x1d00,"LATIN LETTER SMALL CAPITAL A"));
        data.insert(std::make_pair(0x1d01,"LATIN LETTER SMALL CAPITAL AE"));
        data.insert(std::make_pair(0x1d02,"LATIN SMALL LETTER TURNED AE"));
        data.insert(std::make_pair(0x1d03,"LATIN LETTER SMALL CAPITAL BARRED B"));
        data.insert(std::make_pair(0x1d04,"LATIN LETTER SMALL CAPITAL C"));
        data.insert(std::make_pair(0x1d05,"LATIN LETTER SMALL CAPITAL D"));
        data.insert(std::make_pair(0x1d06,"LATIN LETTER SMALL CAPITAL ETH"));
        data.insert(std::make_pair(0x1d07,"LATIN LETTER SMALL CAPITAL E"));
        data.insert(std::make_pair(0x1d08,"LATIN SMALL LETTER TURNED OPEN E"));
        data.insert(std::make_pair(0x1d09,"LATIN SMALL LETTER TURNED I"));
        data.insert(std::make_pair(0x1d0a,"LATIN LETTER SMALL CAPITAL J"));
        data.insert(std::make_pair(0x1d0b,"LATIN LETTER SMALL CAPITAL K"));
        data.insert(std::make_pair(0x1d0c,"LATIN LETTER SMALL CAPITAL L WITH STROKE"));
        data.insert(std::make_pair(0x1d0d,"LATIN LETTER SMALL CAPITAL M"));
        data.insert(std::make_pair(0x1d0e,"LATIN LETTER SMALL CAPITAL REVERSED N"));
        data.insert(std::make_pair(0x1d0f,"LATIN LETTER SMALL CAPITAL O"));
        data.insert(std::make_pair(0x1d10,"LATIN LETTER SMALL CAPITAL OPEN O"));
        data.insert(std::make_pair(0x1d11,"LATIN SMALL LETTER SIDEWAYS O"));
        data.insert(std::make_pair(0x1d12,"LATIN SMALL LETTER SIDEWAYS OPEN O"));
        data.insert(std::make_pair(0x1d13,"LATIN SMALL LETTER SIDEWAYS O WITH STROKE"));
        data.insert(std::make_pair(0x1d14,"LATIN SMALL LETTER TURNED OE"));
        data.insert(std::make_pair(0x1d15,"LATIN LETTER SMALL CAPITAL OU"));
        data.insert(std::make_pair(0x1d16,"LATIN SMALL LETTER TOP HALF O"));
        data.insert(std::make_pair(0x1d17,"LATIN SMALL LETTER BOTTOM HALF O"));
        data.insert(std::make_pair(0x1d18,"LATIN LETTER SMALL CAPITAL P"));
        data.insert(std::make_pair(0x1d19,"LATIN LETTER SMALL CAPITAL REVERSED R"));
        data.insert(std::make_pair(0x1d1a,"LATIN LETTER SMALL CAPITAL TURNED R"));
        data.insert(std::make_pair(0x1d1b,"LATIN LETTER SMALL CAPITAL T"));
        data.insert(std::make_pair(0x1d1c,"LATIN LETTER SMALL CAPITAL U"));
        data.insert(std::make_pair(0x1d1d,"LATIN SMALL LETTER SIDEWAYS U"));
        data.insert(std::make_pair(0x1d1e,"LATIN SMALL LETTER SIDEWAYS DIAERESIZED U"));
        data.insert(std::make_pair(0x1d1f,"LATIN SMALL LETTER SIDEWAYS TURNED M"));
        data.insert(std::make_pair(0x1d20,"LATIN LETTER SMALL CAPITAL V"));
        data.insert(std::make_pair(0x1d21,"LATIN LETTER SMALL CAPITAL W"));
        data.insert(std::make_pair(0x1d22,"LATIN LETTER SMALL CAPITAL Z"));
        data.insert(std::make_pair(0x1d23,"LATIN LETTER SMALL CAPITAL EZH"));
        data.insert(std::make_pair(0x1d24,"LATIN LETTER VOICED LARYNGEAL SPIRANT"));
        data.insert(std::make_pair(0x1d25,"LATIN LETTER AIN"));
        data.insert(std::make_pair(0x1d26,"GREEK LETTER SMALL CAPITAL GAMMA"));
        data.insert(std::make_pair(0x1d27,"GREEK LETTER SMALL CAPITAL LAMDA"));
        data.insert(std::make_pair(0x1d28,"GREEK LETTER SMALL CAPITAL PI"));
        data.insert(std::make_pair(0x1d29,"GREEK LETTER SMALL CAPITAL RHO"));
        data.insert(std::make_pair(0x1d2a,"GREEK LETTER SMALL CAPITAL PSI"));
        data.insert(std::make_pair(0x1d2b,"CYRILLIC LETTER SMALL CAPITAL EL"));
        data.insert(std::make_pair(0x1d2c,"MODIFIER LETTER CAPITAL A"));
        data.insert(std::make_pair(0x1d2d,"MODIFIER LETTER CAPITAL AE"));
        data.insert(std::make_pair(0x1d2e,"MODIFIER LETTER CAPITAL B"));
        data.insert(std::make_pair(0x1d2f,"MODIFIER LETTER CAPITAL BARRED B"));
        data.insert(std::make_pair(0x1d30,"MODIFIER LETTER CAPITAL D"));
        data.insert(std::make_pair(0x1d31,"MODIFIER LETTER CAPITAL E"));
        data.insert(std::make_pair(0x1d32,"MODIFIER LETTER CAPITAL REVERSED E"));
        data.insert(std::make_pair(0x1d33,"MODIFIER LETTER CAPITAL G"));
        data.insert(std::make_pair(0x1d34,"MODIFIER LETTER CAPITAL H"));
        data.insert(std::make_pair(0x1d35,"MODIFIER LETTER CAPITAL I"));
        data.insert(std::make_pair(0x1d36,"MODIFIER LETTER CAPITAL J"));
        data.insert(std::make_pair(0x1d37,"MODIFIER LETTER CAPITAL K"));
        data.insert(std::make_pair(0x1d38,"MODIFIER LETTER CAPITAL L"));
        data.insert(std::make_pair(0x1d39,"MODIFIER LETTER CAPITAL M"));
        data.insert(std::make_pair(0x1d3a,"MODIFIER LETTER CAPITAL N"));
        data.insert(std::make_pair(0x1d3b,"MODIFIER LETTER CAPITAL REVERSED N"));
        data.insert(std::make_pair(0x1d3c,"MODIFIER LETTER CAPITAL O"));
        data.insert(std::make_pair(0x1d3d,"MODIFIER LETTER CAPITAL OU"));
        data.insert(std::make_pair(0x1d3e,"MODIFIER LETTER CAPITAL P"));
        data.insert(std::make_pair(0x1d3f,"MODIFIER LETTER CAPITAL R"));
        data.insert(std::make_pair(0x1d40,"MODIFIER LETTER CAPITAL T"));
        data.insert(std::make_pair(0x1d41,"MODIFIER LETTER CAPITAL U"));
        data.insert(std::make_pair(0x1d42,"MODIFIER LETTER CAPITAL W"));
        data.insert(std::make_pair(0x1d43,"MODIFIER LETTER SMALL A"));
        data.insert(std::make_pair(0x1d44,"MODIFIER LETTER SMALL TURNED A"));
        data.insert(std::make_pair(0x1d45,"MODIFIER LETTER SMALL ALPHA"));
        data.insert(std::make_pair(0x1d46,"MODIFIER LETTER SMALL TURNED AE"));
        data.insert(std::make_pair(0x1d47,"MODIFIER LETTER SMALL B"));
        data.insert(std::make_pair(0x1d48,"MODIFIER LETTER SMALL D"));
        data.insert(std::make_pair(0x1d49,"MODIFIER LETTER SMALL E"));
        data.insert(std::make_pair(0x1d4a,"MODIFIER LETTER SMALL SCHWA"));
        data.insert(std::make_pair(0x1d4b,"MODIFIER LETTER SMALL OPEN E"));
        data.insert(std::make_pair(0x1d4c,"MODIFIER LETTER SMALL TURNED OPEN E"));
        data.insert(std::make_pair(0x1d4d,"MODIFIER LETTER SMALL G"));
        data.insert(std::make_pair(0x1d4e,"MODIFIER LETTER SMALL TURNED I"));
        data.insert(std::make_pair(0x1d4f,"MODIFIER LETTER SMALL K"));
        data.insert(std::make_pair(0x1d50,"MODIFIER LETTER SMALL M"));
        data.insert(std::make_pair(0x1d51,"MODIFIER LETTER SMALL ENG"));
        data.insert(std::make_pair(0x1d52,"MODIFIER LETTER SMALL O"));
        data.insert(std::make_pair(0x1d53,"MODIFIER LETTER SMALL OPEN O"));
        data.insert(std::make_pair(0x1d54,"MODIFIER LETTER SMALL TOP HALF O"));
        data.insert(std::make_pair(0x1d55,"MODIFIER LETTER SMALL BOTTOM HALF O"));
        data.insert(std::make_pair(0x1d56,"MODIFIER LETTER SMALL P"));
        data.insert(std::make_pair(0x1d57,"MODIFIER LETTER SMALL T"));
        data.insert(std::make_pair(0x1d58,"MODIFIER LETTER SMALL U"));
        data.insert(std::make_pair(0x1d59,"MODIFIER LETTER SMALL SIDEWAYS U"));
        data.insert(std::make_pair(0x1d5a,"MODIFIER LETTER SMALL TURNED M"));
        data.insert(std::make_pair(0x1d5b,"MODIFIER LETTER SMALL V"));
        data.insert(std::make_pair(0x1d5c,"MODIFIER LETTER SMALL AIN"));
        data.insert(std::make_pair(0x1d5d,"MODIFIER LETTER SMALL BETA"));
        data.insert(std::make_pair(0x1d5e,"MODIFIER LETTER SMALL GREEK GAMMA"));
        data.insert(std::make_pair(0x1d5f,"MODIFIER LETTER SMALL DELTA"));
        data.insert(std::make_pair(0x1d60,"MODIFIER LETTER SMALL GREEK PHI"));
        data.insert(std::make_pair(0x1d61,"MODIFIER LETTER SMALL CHI"));
        data.insert(std::make_pair(0x1d62,"LATIN SUBSCRIPT SMALL LETTER I"));
        data.insert(std::make_pair(0x1d63,"LATIN SUBSCRIPT SMALL LETTER R"));
        data.insert(std::make_pair(0x1d64,"LATIN SUBSCRIPT SMALL LETTER U"));
        data.insert(std::make_pair(0x1d65,"LATIN SUBSCRIPT SMALL LETTER V"));
        data.insert(std::make_pair(0x1d66,"GREEK SUBSCRIPT SMALL LETTER BETA"));
        data.insert(std::make_pair(0x1d67,"GREEK SUBSCRIPT SMALL LETTER GAMMA"));
        data.insert(std::make_pair(0x1d68,"GREEK SUBSCRIPT SMALL LETTER RHO"));
        data.insert(std::make_pair(0x1d69,"GREEK SUBSCRIPT SMALL LETTER PHI"));
        data.insert(std::make_pair(0x1d6a,"GREEK SUBSCRIPT SMALL LETTER CHI"));
        data.insert(std::make_pair(0x1d6b,"LATIN SMALL LETTER UE"));
        data.insert(std::make_pair(0x1d6c,"LATIN SMALL LETTER B WITH MIDDLE TILDE"));
        data.insert(std::make_pair(0x1d6d,"LATIN SMALL LETTER D WITH MIDDLE TILDE"));
        data.insert(std::make_pair(0x1d6e,"LATIN SMALL LETTER F WITH MIDDLE TILDE"));
        data.insert(std::make_pair(0x1d6f,"LATIN SMALL LETTER M WITH MIDDLE TILDE"));
        data.insert(std::make_pair(0x1d70,"LATIN SMALL LETTER N WITH MIDDLE TILDE"));
        data.insert(std::make_pair(0x1d71,"LATIN SMALL LETTER P WITH MIDDLE TILDE"));
        data.insert(std::make_pair(0x1d72,"LATIN SMALL LETTER R WITH MIDDLE TILDE"));
        data.insert(std::make_pair(0x1d73,"LATIN SMALL LETTER R WITH FISHHOOK AND MIDDLE TILDE"));
        data.insert(std::make_pair(0x1d74,"LATIN SMALL LETTER S WITH MIDDLE TILDE"));
        data.insert(std::make_pair(0x1d75,"LATIN SMALL LETTER T WITH MIDDLE TILDE"));
        data.insert(std::make_pair(0x1d76,"LATIN SMALL LETTER Z WITH MIDDLE TILDE"));
        data.insert(std::make_pair(0x1d77,"LATIN SMALL LETTER TURNED G"));
        data.insert(std::make_pair(0x1d78,"MODIFIER LETTER CYRILLIC EN"));
        data.insert(std::make_pair(0x1d79,"LATIN SMALL LETTER INSULAR G"));
        data.insert(std::make_pair(0x1d7a,"LATIN SMALL LETTER TH WITH STRIKETHROUGH"));
        data.insert(std::make_pair(0x1d7b,"LATIN SMALL CAPITAL LETTER I WITH STROKE"));
        data.insert(std::make_pair(0x1d7c,"LATIN SMALL LETTER IOTA WITH STROKE"));
        data.insert(std::make_pair(0x1d7d,"LATIN SMALL LETTER P WITH STROKE"));
        data.insert(std::make_pair(0x1d7e,"LATIN SMALL CAPITAL LETTER U WITH STROKE"));
        data.insert(std::make_pair(0x1d7f,"LATIN SMALL LETTER UPSILON WITH STROKE"));
        data.insert(std::make_pair(0x1d80,"LATIN SMALL LETTER B WITH PALATAL HOOK"));
        data.insert(std::make_pair(0x1d81,"LATIN SMALL LETTER D WITH PALATAL HOOK"));
        data.insert(std::make_pair(0x1d82,"LATIN SMALL LETTER F WITH PALATAL HOOK"));
        data.insert(std::make_pair(0x1d83,"LATIN SMALL LETTER G WITH PALATAL HOOK"));
        data.insert(std::make_pair(0x1d84,"LATIN SMALL LETTER K WITH PALATAL HOOK"));
        data.insert(std::make_pair(0x1d85,"LATIN SMALL LETTER L WITH PALATAL HOOK"));
        data.insert(std::make_pair(0x1d86,"LATIN SMALL LETTER M WITH PALATAL HOOK"));
        data.insert(std::make_pair(0x1d87,"LATIN SMALL LETTER N WITH PALATAL HOOK"));
        data.insert(std::make_pair(0x1d88,"LATIN SMALL LETTER P WITH PALATAL HOOK"));
        data.insert(std::make_pair(0x1d89,"LATIN SMALL LETTER R WITH PALATAL HOOK"));
        data.insert(std::make_pair(0x1d8a,"LATIN SMALL LETTER S WITH PALATAL HOOK"));
        data.insert(std::make_pair(0x1d8b,"LATIN SMALL LETTER ESH WITH PALATAL HOOK"));
        data.insert(std::make_pair(0x1d8c,"LATIN SMALL LETTER V WITH PALATAL HOOK"));
        data.insert(std::make_pair(0x1d8d,"LATIN SMALL LETTER X WITH PALATAL HOOK"));
        data.insert(std::make_pair(0x1d8e,"LATIN SMALL LETTER Z WITH PALATAL HOOK"));
        data.insert(std::make_pair(0x1d8f,"LATIN SMALL LETTER A WITH RETROFLEX HOOK"));
        data.insert(std::make_pair(0x1d90,"LATIN SMALL LETTER ALPHA WITH RETROFLEX HOOK"));
        data.insert(std::make_pair(0x1d91,"LATIN SMALL LETTER D WITH HOOK AND TAIL"));
        data.insert(std::make_pair(0x1d92,"LATIN SMALL LETTER E WITH RETROFLEX HOOK"));
        data.insert(std::make_pair(0x1d93,"LATIN SMALL LETTER OPEN E WITH RETROFLEX HOOK"));
        data.insert(std::make_pair(0x1d94,"LATIN SMALL LETTER REVERSED OPEN E WITH RETROFLEX HOOK"));
        data.insert(std::make_pair(0x1d95,"LATIN SMALL LETTER SCHWA WITH RETROFLEX HOOK"));
        data.insert(std::make_pair(0x1d96,"LATIN SMALL LETTER I WITH RETROFLEX HOOK"));
        data.insert(std::make_pair(0x1d97,"LATIN SMALL LETTER OPEN O WITH RETROFLEX HOOK"));
        data.insert(std::make_pair(0x1d98,"LATIN SMALL LETTER ESH WITH RETROFLEX HOOK"));
        data.insert(std::make_pair(0x1d99,"LATIN SMALL LETTER U WITH RETROFLEX HOOK"));
        data.insert(std::make_pair(0x1d9a,"LATIN SMALL LETTER EZH WITH RETROFLEX HOOK"));
        data.insert(std::make_pair(0x1d9b,"MODIFIER LETTER SMALL TURNED ALPHA"));
        data.insert(std::make_pair(0x1d9c,"MODIFIER LETTER SMALL C"));
        data.insert(std::make_pair(0x1d9d,"MODIFIER LETTER SMALL C WITH CURL"));
        data.insert(std::make_pair(0x1d9e,"MODIFIER LETTER SMALL ETH"));
        data.insert(std::make_pair(0x1d9f,"MODIFIER LETTER SMALL REVERSED OPEN E"));
        data.insert(std::make_pair(0x1da0,"MODIFIER LETTER SMALL F"));
        data.insert(std::make_pair(0x1da1,"MODIFIER LETTER SMALL DOTLESS J WITH STROKE"));
        data.insert(std::make_pair(0x1da2,"MODIFIER LETTER SMALL SCRIPT G"));
        data.insert(std::make_pair(0x1da3,"MODIFIER LETTER SMALL TURNED H"));
        data.insert(std::make_pair(0x1da4,"MODIFIER LETTER SMALL I WITH STROKE"));
        data.insert(std::make_pair(0x1da5,"MODIFIER LETTER SMALL IOTA"));
        data.insert(std::make_pair(0x1da6,"MODIFIER LETTER SMALL CAPITAL I"));
        data.insert(std::make_pair(0x1da7,"MODIFIER LETTER SMALL CAPITAL I WITH STROKE"));
        data.insert(std::make_pair(0x1da8,"MODIFIER LETTER SMALL J WITH CROSSED-TAIL"));
        data.insert(std::make_pair(0x1da9,"MODIFIER LETTER SMALL L WITH RETROFLEX HOOK"));
        data.insert(std::make_pair(0x1daa,"MODIFIER LETTER SMALL L WITH PALATAL HOOK"));
        data.insert(std::make_pair(0x1dab,"MODIFIER LETTER SMALL CAPITAL L"));
        data.insert(std::make_pair(0x1dac,"MODIFIER LETTER SMALL M WITH HOOK"));
        data.insert(std::make_pair(0x1dad,"MODIFIER LETTER SMALL TURNED M WITH LONG LEG"));
        data.insert(std::make_pair(0x1dae,"MODIFIER LETTER SMALL N WITH LEFT HOOK"));
        data.insert(std::make_pair(0x1daf,"MODIFIER LETTER SMALL N WITH RETROFLEX HOOK"));
        data.insert(std::make_pair(0x1db0,"MODIFIER LETTER SMALL CAPITAL N"));
        data.insert(std::make_pair(0x1db1,"MODIFIER LETTER SMALL BARRED O"));
        data.insert(std::make_pair(0x1db2,"MODIFIER LETTER SMALL PHI"));
        data.insert(std::make_pair(0x1db3,"MODIFIER LETTER SMALL S WITH HOOK"));
        data.insert(std::make_pair(0x1db4,"MODIFIER LETTER SMALL ESH"));
        data.insert(std::make_pair(0x1db5,"MODIFIER LETTER SMALL T WITH PALATAL HOOK"));
        data.insert(std::make_pair(0x1db6,"MODIFIER LETTER SMALL U BAR"));
        data.insert(std::make_pair(0x1db7,"MODIFIER LETTER SMALL UPSILON"));
        data.insert(std::make_pair(0x1db8,"MODIFIER LETTER SMALL CAPITAL U"));
        data.insert(std::make_pair(0x1db9,"MODIFIER LETTER SMALL V WITH HOOK"));
        data.insert(std::make_pair(0x1dba,"MODIFIER LETTER SMALL TURNED V"));
        data.insert(std::make_pair(0x1dbb,"MODIFIER LETTER SMALL Z"));
        data.insert(std::make_pair(0x1dbc,"MODIFIER LETTER SMALL Z WITH RETROFLEX HOOK"));
        data.insert(std::make_pair(0x1dbd,"MODIFIER LETTER SMALL Z WITH CURL"));
        data.insert(std::make_pair(0x1dbe,"MODIFIER LETTER SMALL EZH"));
        data.insert(std::make_pair(0x1dbf,"MODIFIER LETTER SMALL THETA"));
        data.insert(std::make_pair(0x1dc0,"COMBINING DOTTED GRAVE ACCENT"));
        data.insert(std::make_pair(0x1dc1,"COMBINING DOTTED ACUTE ACCENT"));
        data.insert(std::make_pair(0x1dc2,"COMBINING SNAKE BELOW"));
        data.insert(std::make_pair(0x1dc3,"COMBINING SUSPENSION MARK"));
        data.insert(std::make_pair(0x1dc4,"COMBINING MACRON-ACUTE"));
        data.insert(std::make_pair(0x1dc5,"COMBINING GRAVE-MACRON"));
        data.insert(std::make_pair(0x1dc6,"COMBINING MACRON-GRAVE"));
        data.insert(std::make_pair(0x1dc7,"COMBINING ACUTE-MACRON"));
        data.insert(std::make_pair(0x1dc8,"COMBINING GRAVE-ACUTE-GRAVE"));
        data.insert(std::make_pair(0x1dc9,"COMBINING ACUTE-GRAVE-ACUTE"));
        data.insert(std::make_pair(0x1dca,"COMBINING LATIN SMALL LETTER R BELOW"));
        data.insert(std::make_pair(0x1dcb,"COMBINING BREVE-MACRON"));
        data.insert(std::make_pair(0x1dcc,"COMBINING MACRON-BREVE"));
        data.insert(std::make_pair(0x1dcd,"COMBINING DOUBLE CIRCUMFLEX ABOVE"));
        data.insert(std::make_pair(0x1dce,"COMBINING OGONEK ABOVE"));
        data.insert(std::make_pair(0x1dcf,"COMBINING ZIGZAG BELOW"));
        data.insert(std::make_pair(0x1dd0,"COMBINING IS BELOW"));
        data.insert(std::make_pair(0x1dd1,"COMBINING UR ABOVE"));
        data.insert(std::make_pair(0x1dd2,"COMBINING US ABOVE"));
        data.insert(std::make_pair(0x1dd3,"COMBINING LATIN SMALL LETTER FLATTENED OPEN A ABOVE"));
        data.insert(std::make_pair(0x1dd4,"COMBINING LATIN SMALL LETTER AE"));
        data.insert(std::make_pair(0x1dd5,"COMBINING LATIN SMALL LETTER AO"));
        data.insert(std::make_pair(0x1dd6,"COMBINING LATIN SMALL LETTER AV"));
        data.insert(std::make_pair(0x1dd7,"COMBINING LATIN SMALL LETTER C CEDILLA"));
        data.insert(std::make_pair(0x1dd8,"COMBINING LATIN SMALL LETTER INSULAR D"));
        data.insert(std::make_pair(0x1dd9,"COMBINING LATIN SMALL LETTER ETH"));
        data.insert(std::make_pair(0x1dda,"COMBINING LATIN SMALL LETTER G"));
        data.insert(std::make_pair(0x1ddb,"COMBINING LATIN LETTER SMALL CAPITAL G"));
        data.insert(std::make_pair(0x1ddc,"COMBINING LATIN SMALL LETTER K"));
        data.insert(std::make_pair(0x1ddd,"COMBINING LATIN SMALL LETTER L"));
        data.insert(std::make_pair(0x1dde,"COMBINING LATIN LETTER SMALL CAPITAL L"));
        data.insert(std::make_pair(0x1ddf,"COMBINING LATIN LETTER SMALL CAPITAL M"));
        data.insert(std::make_pair(0x1de0,"COMBINING LATIN SMALL LETTER N"));
        data.insert(std::make_pair(0x1de1,"COMBINING LATIN LETTER SMALL CAPITAL N"));
        data.insert(std::make_pair(0x1de2,"COMBINING LATIN LETTER SMALL CAPITAL R"));
        data.insert(std::make_pair(0x1de3,"COMBINING LATIN SMALL LETTER R ROTUNDA"));
        data.insert(std::make_pair(0x1de4,"COMBINING LATIN SMALL LETTER S"));
        data.insert(std::make_pair(0x1de5,"COMBINING LATIN SMALL LETTER LONG S"));
        data.insert(std::make_pair(0x1de6,"COMBINING LATIN SMALL LETTER Z"));
        data.insert(std::make_pair(0x1de7,"COMBINING LATIN SMALL LETTER ALPHA"));
        data.insert(std::make_pair(0x1de8,"COMBINING LATIN SMALL LETTER B"));
        data.insert(std::make_pair(0x1de9,"COMBINING LATIN SMALL LETTER BETA"));
        data.insert(std::make_pair(0x1dea,"COMBINING LATIN SMALL LETTER SCHWA"));
        data.insert(std::make_pair(0x1deb,"COMBINING LATIN SMALL LETTER F"));
        data.insert(std::make_pair(0x1dec,"COMBINING LATIN SMALL LETTER L WITH DOUBLE MIDDLE TILDE"));
        data.insert(std::make_pair(0x1ded,"COMBINING LATIN SMALL LETTER O WITH LIGHT CENTRALIZATION STROKE"));
        data.insert(std::make_pair(0x1dee,"COMBINING LATIN SMALL LETTER P"));
        data.insert(std::make_pair(0x1def,"COMBINING LATIN SMALL LETTER ESH"));
        data.insert(std::make_pair(0x1df0,"COMBINING LATIN SMALL LETTER U WITH LIGHT CENTRALIZATION STROKE"));
        data.insert(std::make_pair(0x1df1,"COMBINING LATIN SMALL LETTER W"));
        data.insert(std::make_pair(0x1df2,"COMBINING LATIN SMALL LETTER A WITH DIAERESIS"));
        data.insert(std::make_pair(0x1df3,"COMBINING LATIN SMALL LETTER O WITH DIAERESIS"));
        data.insert(std::make_pair(0x1df4,"COMBINING LATIN SMALL LETTER U WITH DIAERESIS"));
        data.insert(std::make_pair(0x1df5,"COMBINING UP TACK ABOVE"));
        data.insert(std::make_pair(0x1df6,"COMBINING KAVYKA ABOVE RIGHT"));
        data.insert(std::make_pair(0x1df7,"COMBINING KAVYKA ABOVE LEFT"));
        data.insert(std::make_pair(0x1df8,"COMBINING DOT ABOVE LEFT"));
        data.insert(std::make_pair(0x1df9,"COMBINING WIDE INVERTED BRIDGE BELOW"));
        data.insert(std::make_pair(0x1dfa,"COMBINING DOT BELOW LEFT"));
        data.insert(std::make_pair(0x1dfb,"COMBINING DELETION MARK"));
        data.insert(std::make_pair(0x1dfc,"COMBINING DOUBLE INVERTED BREVE BELOW"));
        data.insert(std::make_pair(0x1dfd,"COMBINING ALMOST EQUAL TO BELOW"));
        data.insert(std::make_pair(0x1dfe,"COMBINING LEFT ARROWHEAD ABOVE"));
        data.insert(std::make_pair(0x1dff,"COMBINING RIGHT ARROWHEAD AND DOWN ARROWHEAD BELOW"));
        data.insert(std::make_pair(0x1e00,"LATIN CAPITAL LETTER A WITH RING BELOW"));
        data.insert(std::make_pair(0x1e01,"LATIN SMALL LETTER A WITH RING BELOW"));
        data.insert(std::make_pair(0x1e02,"LATIN CAPITAL LETTER B WITH DOT ABOVE"));
        data.insert(std::make_pair(0x1e03,"LATIN SMALL LETTER B WITH DOT ABOVE"));
        data.insert(std::make_pair(0x1e04,"LATIN CAPITAL LETTER B WITH DOT BELOW"));
        data.insert(std::make_pair(0x1e05,"LATIN SMALL LETTER B WITH DOT BELOW"));
        data.insert(std::make_pair(0x1e06,"LATIN CAPITAL LETTER B WITH LINE BELOW"));
        data.insert(std::make_pair(0x1e07,"LATIN SMALL LETTER B WITH LINE BELOW"));
        data.insert(std::make_pair(0x1e08,"LATIN CAPITAL LETTER C WITH CEDILLA AND ACUTE"));
        data.insert(std::make_pair(0x1e09,"LATIN SMALL LETTER C WITH CEDILLA AND ACUTE"));
        data.insert(std::make_pair(0x1e0a,"LATIN CAPITAL LETTER D WITH DOT ABOVE"));
        data.insert(std::make_pair(0x1e0b,"LATIN SMALL LETTER D WITH DOT ABOVE"));
        data.insert(std::make_pair(0x1e0c,"LATIN CAPITAL LETTER D WITH DOT BELOW"));
        data.insert(std::make_pair(0x1e0d,"LATIN SMALL LETTER D WITH DOT BELOW"));
        data.insert(std::make_pair(0x1e0e,"LATIN CAPITAL LETTER D WITH LINE BELOW"));
        data.insert(std::make_pair(0x1e0f,"LATIN SMALL LETTER D WITH LINE BELOW"));
        data.insert(std::make_pair(0x1e10,"LATIN CAPITAL LETTER D WITH CEDILLA"));
        data.insert(std::make_pair(0x1e11,"LATIN SMALL LETTER D WITH CEDILLA"));
        data.insert(std::make_pair(0x1e12,"LATIN CAPITAL LETTER D WITH CIRCUMFLEX BELOW"));
        data.insert(std::make_pair(0x1e13,"LATIN SMALL LETTER D WITH CIRCUMFLEX BELOW"));
        data.insert(std::make_pair(0x1e14,"LATIN CAPITAL LETTER E WITH MACRON AND GRAVE"));
        data.insert(std::make_pair(0x1e15,"LATIN SMALL LETTER E WITH MACRON AND GRAVE"));
        data.insert(std::make_pair(0x1e16,"LATIN CAPITAL LETTER E WITH MACRON AND ACUTE"));
        data.insert(std::make_pair(0x1e17,"LATIN SMALL LETTER E WITH MACRON AND ACUTE"));
        data.insert(std::make_pair(0x1e18,"LATIN CAPITAL LETTER E WITH CIRCUMFLEX BELOW"));
        data.insert(std::make_pair(0x1e19,"LATIN SMALL LETTER E WITH CIRCUMFLEX BELOW"));
        data.insert(std::make_pair(0x1e1a,"LATIN CAPITAL LETTER E WITH TILDE BELOW"));
        data.insert(std::make_pair(0x1e1b,"LATIN SMALL LETTER E WITH TILDE BELOW"));
        data.insert(std::make_pair(0x1e1c,"LATIN CAPITAL LETTER E WITH CEDILLA AND BREVE"));
        data.insert(std::make_pair(0x1e1d,"LATIN SMALL LETTER E WITH CEDILLA AND BREVE"));
        data.insert(std::make_pair(0x1e1e,"LATIN CAPITAL LETTER F WITH DOT ABOVE"));
        data.insert(std::make_pair(0x1e1f,"LATIN SMALL LETTER F WITH DOT ABOVE"));
        data.insert(std::make_pair(0x1e20,"LATIN CAPITAL LETTER G WITH MACRON"));
        data.insert(std::make_pair(0x1e21,"LATIN SMALL LETTER G WITH MACRON"));
        data.insert(std::make_pair(0x1e22,"LATIN CAPITAL LETTER H WITH DOT ABOVE"));
        data.insert(std::make_pair(0x1e23,"LATIN SMALL LETTER H WITH DOT ABOVE"));
        data.insert(std::make_pair(0x1e24,"LATIN CAPITAL LETTER H WITH DOT BELOW"));
        data.insert(std::make_pair(0x1e25,"LATIN SMALL LETTER H WITH DOT BELOW"));
        data.insert(std::make_pair(0x1e26,"LATIN CAPITAL LETTER H WITH DIAERESIS"));
        data.insert(std::make_pair(0x1e27,"LATIN SMALL LETTER H WITH DIAERESIS"));
        data.insert(std::make_pair(0x1e28,"LATIN CAPITAL LETTER H WITH CEDILLA"));
        data.insert(std::make_pair(0x1e29,"LATIN SMALL LETTER H WITH CEDILLA"));
        data.insert(std::make_pair(0x1e2a,"LATIN CAPITAL LETTER H WITH BREVE BELOW"));
        data.insert(std::make_pair(0x1e2b,"LATIN SMALL LETTER H WITH BREVE BELOW"));
        data.insert(std::make_pair(0x1e2c,"LATIN CAPITAL LETTER I WITH TILDE BELOW"));
        data.insert(std::make_pair(0x1e2d,"LATIN SMALL LETTER I WITH TILDE BELOW"));
        data.insert(std::make_pair(0x1e2e,"LATIN CAPITAL LETTER I WITH DIAERESIS AND ACUTE"));
        data.insert(std::make_pair(0x1e2f,"LATIN SMALL LETTER I WITH DIAERESIS AND ACUTE"));
        data.insert(std::make_pair(0x1e30,"LATIN CAPITAL LETTER K WITH ACUTE"));
        data.insert(std::make_pair(0x1e31,"LATIN SMALL LETTER K WITH ACUTE"));
        data.insert(std::make_pair(0x1e32,"LATIN CAPITAL LETTER K WITH DOT BELOW"));
        data.insert(std::make_pair(0x1e33,"LATIN SMALL LETTER K WITH DOT BELOW"));
        data.insert(std::make_pair(0x1e34,"LATIN CAPITAL LETTER K WITH LINE BELOW"));
        data.insert(std::make_pair(0x1e35,"LATIN SMALL LETTER K WITH LINE BELOW"));
        data.insert(std::make_pair(0x1e36,"LATIN CAPITAL LETTER L WITH DOT BELOW"));
        data.insert(std::make_pair(0x1e37,"LATIN SMALL LETTER L WITH DOT BELOW"));
        data.insert(std::make_pair(0x1e38,"LATIN CAPITAL LETTER L WITH DOT BELOW AND MACRON"));
        data.insert(std::make_pair(0x1e39,"LATIN SMALL LETTER L WITH DOT BELOW AND MACRON"));
        data.insert(std::make_pair(0x1e3a,"LATIN CAPITAL LETTER L WITH LINE BELOW"));
        data.insert(std::make_pair(0x1e3b,"LATIN SMALL LETTER L WITH LINE BELOW"));
        data.insert(std::make_pair(0x1e3c,"LATIN CAPITAL LETTER L WITH CIRCUMFLEX BELOW"));
        data.insert(std::make_pair(0x1e3d,"LATIN SMALL LETTER L WITH CIRCUMFLEX BELOW"));
        data.insert(std::make_pair(0x1e3e,"LATIN CAPITAL LETTER M WITH ACUTE"));
        data.insert(std::make_pair(0x1e3f,"LATIN SMALL LETTER M WITH ACUTE"));
        data.insert(std::make_pair(0x1e40,"LATIN CAPITAL LETTER M WITH DOT ABOVE"));
        data.insert(std::make_pair(0x1e41,"LATIN SMALL LETTER M WITH DOT ABOVE"));
        data.insert(std::make_pair(0x1e42,"LATIN CAPITAL LETTER M WITH DOT BELOW"));
        data.insert(std::make_pair(0x1e43,"LATIN SMALL LETTER M WITH DOT BELOW"));
        data.insert(std::make_pair(0x1e44,"LATIN CAPITAL LETTER N WITH DOT ABOVE"));
        data.insert(std::make_pair(0x1e45,"LATIN SMALL LETTER N WITH DOT ABOVE"));
        data.insert(std::make_pair(0x1e46,"LATIN CAPITAL LETTER N WITH DOT BELOW"));
        data.insert(std::make_pair(0x1e47,"LATIN SMALL LETTER N WITH DOT BELOW"));
        data.insert(std::make_pair(0x1e48,"LATIN CAPITAL LETTER N WITH LINE BELOW"));
        data.insert(std::make_pair(0x1e49,"LATIN SMALL LETTER N WITH LINE BELOW"));
        data.insert(std::make_pair(0x1e4a,"LATIN CAPITAL LETTER N WITH CIRCUMFLEX BELOW"));
        data.insert(std::make_pair(0x1e4b,"LATIN SMALL LETTER N WITH CIRCUMFLEX BELOW"));
        data.insert(std::make_pair(0x1e4c,"LATIN CAPITAL LETTER O WITH TILDE AND ACUTE"));
        data.insert(std::make_pair(0x1e4d,"LATIN SMALL LETTER O WITH TILDE AND ACUTE"));
        data.insert(std::make_pair(0x1e4e,"LATIN CAPITAL LETTER O WITH TILDE AND DIAERESIS"));
        data.insert(std::make_pair(0x1e4f,"LATIN SMALL LETTER O WITH TILDE AND DIAERESIS"));
        data.insert(std::make_pair(0x1e50,"LATIN CAPITAL LETTER O WITH MACRON AND GRAVE"));
        data.insert(std::make_pair(0x1e51,"LATIN SMALL LETTER O WITH MACRON AND GRAVE"));
        data.insert(std::make_pair(0x1e52,"LATIN CAPITAL LETTER O WITH MACRON AND ACUTE"));
        data.insert(std::make_pair(0x1e53,"LATIN SMALL LETTER O WITH MACRON AND ACUTE"));
        data.insert(std::make_pair(0x1e54,"LATIN CAPITAL LETTER P WITH ACUTE"));
        data.insert(std::make_pair(0x1e55,"LATIN SMALL LETTER P WITH ACUTE"));
        data.insert(std::make_pair(0x1e56,"LATIN CAPITAL LETTER P WITH DOT ABOVE"));
        data.insert(std::make_pair(0x1e57,"LATIN SMALL LETTER P WITH DOT ABOVE"));
        data.insert(std::make_pair(0x1e58,"LATIN CAPITAL LETTER R WITH DOT ABOVE"));
        data.insert(std::make_pair(0x1e59,"LATIN SMALL LETTER R WITH DOT ABOVE"));
        data.insert(std::make_pair(0x1e5a,"LATIN CAPITAL LETTER R WITH DOT BELOW"));
        data.insert(std::make_pair(0x1e5b,"LATIN SMALL LETTER R WITH DOT BELOW"));
        data.insert(std::make_pair(0x1e5c,"LATIN CAPITAL LETTER R WITH DOT BELOW AND MACRON"));
        data.insert(std::make_pair(0x1e5d,"LATIN SMALL LETTER R WITH DOT BELOW AND MACRON"));
        data.insert(std::make_pair(0x1e5e,"LATIN CAPITAL LETTER R WITH LINE BELOW"));
        data.insert(std::make_pair(0x1e5f,"LATIN SMALL LETTER R WITH LINE BELOW"));
        data.insert(std::make_pair(0x1e60,"LATIN CAPITAL LETTER S WITH DOT ABOVE"));
        data.insert(std::make_pair(0x1e61,"LATIN SMALL LETTER S WITH DOT ABOVE"));
        data.insert(std::make_pair(0x1e62,"LATIN CAPITAL LETTER S WITH DOT BELOW"));
        data.insert(std::make_pair(0x1e63,"LATIN SMALL LETTER S WITH DOT BELOW"));
        data.insert(std::make_pair(0x1e64,"LATIN CAPITAL LETTER S WITH ACUTE AND DOT ABOVE"));
        data.insert(std::make_pair(0x1e65,"LATIN SMALL LETTER S WITH ACUTE AND DOT ABOVE"));
        data.insert(std::make_pair(0x1e66,"LATIN CAPITAL LETTER S WITH CARON AND DOT ABOVE"));
        data.insert(std::make_pair(0x1e67,"LATIN SMALL LETTER S WITH CARON AND DOT ABOVE"));
        data.insert(std::make_pair(0x1e68,"LATIN CAPITAL LETTER S WITH DOT BELOW AND DOT ABOVE"));
        data.insert(std::make_pair(0x1e69,"LATIN SMALL LETTER S WITH DOT BELOW AND DOT ABOVE"));
        data.insert(std::make_pair(0x1e6a,"LATIN CAPITAL LETTER T WITH DOT ABOVE"));
        data.insert(std::make_pair(0x1e6b,"LATIN SMALL LETTER T WITH DOT ABOVE"));
        data.insert(std::make_pair(0x1e6c,"LATIN CAPITAL LETTER T WITH DOT BELOW"));
        data.insert(std::make_pair(0x1e6d,"LATIN SMALL LETTER T WITH DOT BELOW"));
        data.insert(std::make_pair(0x1e6e,"LATIN CAPITAL LETTER T WITH LINE BELOW"));
        data.insert(std::make_pair(0x1e6f,"LATIN SMALL LETTER T WITH LINE BELOW"));
        data.insert(std::make_pair(0x1e70,"LATIN CAPITAL LETTER T WITH CIRCUMFLEX BELOW"));
        data.insert(std::make_pair(0x1e71,"LATIN SMALL LETTER T WITH CIRCUMFLEX BELOW"));
        data.insert(std::make_pair(0x1e72,"LATIN CAPITAL LETTER U WITH DIAERESIS BELOW"));
        data.insert(std::make_pair(0x1e73,"LATIN SMALL LETTER U WITH DIAERESIS BELOW"));
        data.insert(std::make_pair(0x1e74,"LATIN CAPITAL LETTER U WITH TILDE BELOW"));
        data.insert(std::make_pair(0x1e75,"LATIN SMALL LETTER U WITH TILDE BELOW"));
        data.insert(std::make_pair(0x1e76,"LATIN CAPITAL LETTER U WITH CIRCUMFLEX BELOW"));
        data.insert(std::make_pair(0x1e77,"LATIN SMALL LETTER U WITH CIRCUMFLEX BELOW"));
        data.insert(std::make_pair(0x1e78,"LATIN CAPITAL LETTER U WITH TILDE AND ACUTE"));
        data.insert(std::make_pair(0x1e79,"LATIN SMALL LETTER U WITH TILDE AND ACUTE"));
        data.insert(std::make_pair(0x1e7a,"LATIN CAPITAL LETTER U WITH MACRON AND DIAERESIS"));
        data.insert(std::make_pair(0x1e7b,"LATIN SMALL LETTER U WITH MACRON AND DIAERESIS"));
        data.insert(std::make_pair(0x1e7c,"LATIN CAPITAL LETTER V WITH TILDE"));
        data.insert(std::make_pair(0x1e7d,"LATIN SMALL LETTER V WITH TILDE"));
        data.insert(std::make_pair(0x1e7e,"LATIN CAPITAL LETTER V WITH DOT BELOW"));
        data.insert(std::make_pair(0x1e7f,"LATIN SMALL LETTER V WITH DOT BELOW"));
        data.insert(std::make_pair(0x1e80,"LATIN CAPITAL LETTER W WITH GRAVE"));
        data.insert(std::make_pair(0x1e81,"LATIN SMALL LETTER W WITH GRAVE"));
        data.insert(std::make_pair(0x1e82,"LATIN CAPITAL LETTER W WITH ACUTE"));
        data.insert(std::make_pair(0x1e83,"LATIN SMALL LETTER W WITH ACUTE"));
        data.insert(std::make_pair(0x1e84,"LATIN CAPITAL LETTER W WITH DIAERESIS"));
        data.insert(std::make_pair(0x1e85,"LATIN SMALL LETTER W WITH DIAERESIS"));
        data.insert(std::make_pair(0x1e86,"LATIN CAPITAL LETTER W WITH DOT ABOVE"));
        data.insert(std::make_pair(0x1e87,"LATIN SMALL LETTER W WITH DOT ABOVE"));
        data.insert(std::make_pair(0x1e88,"LATIN CAPITAL LETTER W WITH DOT BELOW"));
        data.insert(std::make_pair(0x1e89,"LATIN SMALL LETTER W WITH DOT BELOW"));
        data.insert(std::make_pair(0x1e8a,"LATIN CAPITAL LETTER X WITH DOT ABOVE"));
        data.insert(std::make_pair(0x1e8b,"LATIN SMALL LETTER X WITH DOT ABOVE"));
        data.insert(std::make_pair(0x1e8c,"LATIN CAPITAL LETTER X WITH DIAERESIS"));
        data.insert(std::make_pair(0x1e8d,"LATIN SMALL LETTER X WITH DIAERESIS"));
        data.insert(std::make_pair(0x1e8e,"LATIN CAPITAL LETTER Y WITH DOT ABOVE"));
        data.insert(std::make_pair(0x1e8f,"LATIN SMALL LETTER Y WITH DOT ABOVE"));
        data.insert(std::make_pair(0x1e90,"LATIN CAPITAL LETTER Z WITH CIRCUMFLEX"));
        data.insert(std::make_pair(0x1e91,"LATIN SMALL LETTER Z WITH CIRCUMFLEX"));
        data.insert(std::make_pair(0x1e92,"LATIN CAPITAL LETTER Z WITH DOT BELOW"));
        data.insert(std::make_pair(0x1e93,"LATIN SMALL LETTER Z WITH DOT BELOW"));
        data.insert(std::make_pair(0x1e94,"LATIN CAPITAL LETTER Z WITH LINE BELOW"));
        data.insert(std::make_pair(0x1e95,"LATIN SMALL LETTER Z WITH LINE BELOW"));
        data.insert(std::make_pair(0x1e96,"LATIN SMALL LETTER H WITH LINE BELOW"));
        data.insert(std::make_pair(0x1e97,"LATIN SMALL LETTER T WITH DIAERESIS"));
        data.insert(std::make_pair(0x1e98,"LATIN SMALL LETTER W WITH RING ABOVE"));
        data.insert(std::make_pair(0x1e99,"LATIN SMALL LETTER Y WITH RING ABOVE"));
        data.insert(std::make_pair(0x1e9a,"LATIN SMALL LETTER A WITH RIGHT HALF RING"));
        data.insert(std::make_pair(0x1e9b,"LATIN SMALL LETTER LONG S WITH DOT ABOVE"));
        data.insert(std::make_pair(0x1e9c,"LATIN SMALL LETTER LONG S WITH DIAGONAL STROKE"));
        data.insert(std::make_pair(0x1e9d,"LATIN SMALL LETTER LONG S WITH HIGH STROKE"));
        data.insert(std::make_pair(0x1e9e,"LATIN CAPITAL LETTER SHARP S"));
        data.insert(std::make_pair(0x1e9f,"LATIN SMALL LETTER DELTA"));
        data.insert(std::make_pair(0x1ea0,"LATIN CAPITAL LETTER A WITH DOT BELOW"));
        data.insert(std::make_pair(0x1ea1,"LATIN SMALL LETTER A WITH DOT BELOW"));
        data.insert(std::make_pair(0x1ea2,"LATIN CAPITAL LETTER A WITH HOOK ABOVE"));
        data.insert(std::make_pair(0x1ea3,"LATIN SMALL LETTER A WITH HOOK ABOVE"));
        data.insert(std::make_pair(0x1ea4,"LATIN CAPITAL LETTER A WITH CIRCUMFLEX AND ACUTE"));
        data.insert(std::make_pair(0x1ea5,"LATIN SMALL LETTER A WITH CIRCUMFLEX AND ACUTE"));
        data.insert(std::make_pair(0x1ea6,"LATIN CAPITAL LETTER A WITH CIRCUMFLEX AND GRAVE"));
        data.insert(std::make_pair(0x1ea7,"LATIN SMALL LETTER A WITH CIRCUMFLEX AND GRAVE"));
        data.insert(std::make_pair(0x1ea8,"LATIN CAPITAL LETTER A WITH CIRCUMFLEX AND HOOK ABOVE"));
        data.insert(std::make_pair(0x1ea9,"LATIN SMALL LETTER A WITH CIRCUMFLEX AND HOOK ABOVE"));
        data.insert(std::make_pair(0x1eaa,"LATIN CAPITAL LETTER A WITH CIRCUMFLEX AND TILDE"));
        data.insert(std::make_pair(0x1eab,"LATIN SMALL LETTER A WITH CIRCUMFLEX AND TILDE"));
        data.insert(std::make_pair(0x1eac,"LATIN CAPITAL LETTER A WITH CIRCUMFLEX AND DOT BELOW"));
        data.insert(std::make_pair(0x1ead,"LATIN SMALL LETTER A WITH CIRCUMFLEX AND DOT BELOW"));
        data.insert(std::make_pair(0x1eae,"LATIN CAPITAL LETTER A WITH BREVE AND ACUTE"));
        data.insert(std::make_pair(0x1eaf,"LATIN SMALL LETTER A WITH BREVE AND ACUTE"));
        data.insert(std::make_pair(0x1eb0,"LATIN CAPITAL LETTER A WITH BREVE AND GRAVE"));
        data.insert(std::make_pair(0x1eb1,"LATIN SMALL LETTER A WITH BREVE AND GRAVE"));
        data.insert(std::make_pair(0x1eb2,"LATIN CAPITAL LETTER A WITH BREVE AND HOOK ABOVE"));
        data.insert(std::make_pair(0x1eb3,"LATIN SMALL LETTER A WITH BREVE AND HOOK ABOVE"));
        data.insert(std::make_pair(0x1eb4,"LATIN CAPITAL LETTER A WITH BREVE AND TILDE"));
        data.insert(std::make_pair(0x1eb5,"LATIN SMALL LETTER A WITH BREVE AND TILDE"));
        data.insert(std::make_pair(0x1eb6,"LATIN CAPITAL LETTER A WITH BREVE AND DOT BELOW"));
        data.insert(std::make_pair(0x1eb7,"LATIN SMALL LETTER A WITH BREVE AND DOT BELOW"));
        data.insert(std::make_pair(0x1eb8,"LATIN CAPITAL LETTER E WITH DOT BELOW"));
        data.insert(std::make_pair(0x1eb9,"LATIN SMALL LETTER E WITH DOT BELOW"));
        data.insert(std::make_pair(0x1eba,"LATIN CAPITAL LETTER E WITH HOOK ABOVE"));
        data.insert(std::make_pair(0x1ebb,"LATIN SMALL LETTER E WITH HOOK ABOVE"));
        data.insert(std::make_pair(0x1ebc,"LATIN CAPITAL LETTER E WITH TILDE"));
        data.insert(std::make_pair(0x1ebd,"LATIN SMALL LETTER E WITH TILDE"));
        data.insert(std::make_pair(0x1ebe,"LATIN CAPITAL LETTER E WITH CIRCUMFLEX AND ACUTE"));
        data.insert(std::make_pair(0x1ebf,"LATIN SMALL LETTER E WITH CIRCUMFLEX AND ACUTE"));
        data.insert(std::make_pair(0x1ec0,"LATIN CAPITAL LETTER E WITH CIRCUMFLEX AND GRAVE"));
        data.insert(std::make_pair(0x1ec1,"LATIN SMALL LETTER E WITH CIRCUMFLEX AND GRAVE"));
        data.insert(std::make_pair(0x1ec2,"LATIN CAPITAL LETTER E WITH CIRCUMFLEX AND HOOK ABOVE"));
        data.insert(std::make_pair(0x1ec3,"LATIN SMALL LETTER E WITH CIRCUMFLEX AND HOOK ABOVE"));
        data.insert(std::make_pair(0x1ec4,"LATIN CAPITAL LETTER E WITH CIRCUMFLEX AND TILDE"));
        data.insert(std::make_pair(0x1ec5,"LATIN SMALL LETTER E WITH CIRCUMFLEX AND TILDE"));
        data.insert(std::make_pair(0x1ec6,"LATIN CAPITAL LETTER E WITH CIRCUMFLEX AND DOT BELOW"));
        data.insert(std::make_pair(0x1ec7,"LATIN SMALL LETTER E WITH CIRCUMFLEX AND DOT BELOW"));
        data.insert(std::make_pair(0x1ec8,"LATIN CAPITAL LETTER I WITH HOOK ABOVE"));
        data.insert(std::make_pair(0x1ec9,"LATIN SMALL LETTER I WITH HOOK ABOVE"));
        data.insert(std::make_pair(0x1eca,"LATIN CAPITAL LETTER I WITH DOT BELOW"));
        data.insert(std::make_pair(0x1ecb,"LATIN SMALL LETTER I WITH DOT BELOW"));
        data.insert(std::make_pair(0x1ecc,"LATIN CAPITAL LETTER O WITH DOT BELOW"));
        data.insert(std::make_pair(0x1ecd,"LATIN SMALL LETTER O WITH DOT BELOW"));
        data.insert(std::make_pair(0x1ece,"LATIN CAPITAL LETTER O WITH HOOK ABOVE"));
        data.insert(std::make_pair(0x1ecf,"LATIN SMALL LETTER O WITH HOOK ABOVE"));
        data.insert(std::make_pair(0x1ed0,"LATIN CAPITAL LETTER O WITH CIRCUMFLEX AND ACUTE"));
        data.insert(std::make_pair(0x1ed1,"LATIN SMALL LETTER O WITH CIRCUMFLEX AND ACUTE"));
        data.insert(std::make_pair(0x1ed2,"LATIN CAPITAL LETTER O WITH CIRCUMFLEX AND GRAVE"));
        data.insert(std::make_pair(0x1ed3,"LATIN SMALL LETTER O WITH CIRCUMFLEX AND GRAVE"));
        data.insert(std::make_pair(0x1ed4,"LATIN CAPITAL LETTER O WITH CIRCUMFLEX AND HOOK ABOVE"));
        data.insert(std::make_pair(0x1ed5,"LATIN SMALL LETTER O WITH CIRCUMFLEX AND HOOK ABOVE"));
        data.insert(std::make_pair(0x1ed6,"LATIN CAPITAL LETTER O WITH CIRCUMFLEX AND TILDE"));
        data.insert(std::make_pair(0x1ed7,"LATIN SMALL LETTER O WITH CIRCUMFLEX AND TILDE"));
        data.insert(std::make_pair(0x1ed8,"LATIN CAPITAL LETTER O WITH CIRCUMFLEX AND DOT BELOW"));
        data.insert(std::make_pair(0x1ed9,"LATIN SMALL LETTER O WITH CIRCUMFLEX AND DOT BELOW"));
        data.insert(std::make_pair(0x1eda,"LATIN CAPITAL LETTER O WITH HORN AND ACUTE"));
        data.insert(std::make_pair(0x1edb,"LATIN SMALL LETTER O WITH HORN AND ACUTE"));
        data.insert(std::make_pair(0x1edc,"LATIN CAPITAL LETTER O WITH HORN AND GRAVE"));
        data.insert(std::make_pair(0x1edd,"LATIN SMALL LETTER O WITH HORN AND GRAVE"));
        data.insert(std::make_pair(0x1ede,"LATIN CAPITAL LETTER O WITH HORN AND HOOK ABOVE"));
        data.insert(std::make_pair(0x1edf,"LATIN SMALL LETTER O WITH HORN AND HOOK ABOVE"));
        data.insert(std::make_pair(0x1ee0,"LATIN CAPITAL LETTER O WITH HORN AND TILDE"));
        data.insert(std::make_pair(0x1ee1,"LATIN SMALL LETTER O WITH HORN AND TILDE"));
        data.insert(std::make_pair(0x1ee2,"LATIN CAPITAL LETTER O WITH HORN AND DOT BELOW"));
        data.insert(std::make_pair(0x1ee3,"LATIN SMALL LETTER O WITH HORN AND DOT BELOW"));
        data.insert(std::make_pair(0x1ee4,"LATIN CAPITAL LETTER U WITH DOT BELOW"));
        data.insert(std::make_pair(0x1ee5,"LATIN SMALL LETTER U WITH DOT BELOW"));
        data.insert(std::make_pair(0x1ee6,"LATIN CAPITAL LETTER U WITH HOOK ABOVE"));
        data.insert(std::make_pair(0x1ee7,"LATIN SMALL LETTER U WITH HOOK ABOVE"));
        data.insert(std::make_pair(0x1ee8,"LATIN CAPITAL LETTER U WITH HORN AND ACUTE"));
        data.insert(std::make_pair(0x1ee9,"LATIN SMALL LETTER U WITH HORN AND ACUTE"));
        data.insert(std::make_pair(0x1eea,"LATIN CAPITAL LETTER U WITH HORN AND GRAVE"));
        data.insert(std::make_pair(0x1eeb,"LATIN SMALL LETTER U WITH HORN AND GRAVE"));
        data.insert(std::make_pair(0x1eec,"LATIN CAPITAL LETTER U WITH HORN AND HOOK ABOVE"));
        data.insert(std::make_pair(0x1eed,"LATIN SMALL LETTER U WITH HORN AND HOOK ABOVE"));
        data.insert(std::make_pair(0x1eee,"LATIN CAPITAL LETTER U WITH HORN AND TILDE"));
        data.insert(std::make_pair(0x1eef,"LATIN SMALL LETTER U WITH HORN AND TILDE"));
        data.insert(std::make_pair(0x1ef0,"LATIN CAPITAL LETTER U WITH HORN AND DOT BELOW"));
        data.insert(std::make_pair(0x1ef1,"LATIN SMALL LETTER U WITH HORN AND DOT BELOW"));
        data.insert(std::make_pair(0x1ef2,"LATIN CAPITAL LETTER Y WITH GRAVE"));
        data.insert(std::make_pair(0x1ef3,"LATIN SMALL LETTER Y WITH GRAVE"));
        data.insert(std::make_pair(0x1ef4,"LATIN CAPITAL LETTER Y WITH DOT BELOW"));
        data.insert(std::make_pair(0x1ef5,"LATIN SMALL LETTER Y WITH DOT BELOW"));
        data.insert(std::make_pair(0x1ef6,"LATIN CAPITAL LETTER Y WITH HOOK ABOVE"));
        data.insert(std::make_pair(0x1ef7,"LATIN SMALL LETTER Y WITH HOOK ABOVE"));
        data.insert(std::make_pair(0x1ef8,"LATIN CAPITAL LETTER Y WITH TILDE"));
        data.insert(std::make_pair(0x1ef9,"LATIN SMALL LETTER Y WITH TILDE"));
        data.insert(std::make_pair(0x1efa,"LATIN CAPITAL LETTER MIDDLE-WELSH LL"));
        data.insert(std::make_pair(0x1efb,"LATIN SMALL LETTER MIDDLE-WELSH LL"));
        data.insert(std::make_pair(0x1efc,"LATIN CAPITAL LETTER MIDDLE-WELSH V"));
        data.insert(std::make_pair(0x1efd,"LATIN SMALL LETTER MIDDLE-WELSH V"));
        data.insert(std::make_pair(0x1efe,"LATIN CAPITAL LETTER Y WITH LOOP"));
        data.insert(std::make_pair(0x1eff,"LATIN SMALL LETTER Y WITH LOOP"));
        data.insert(std::make_pair(0x1f00,"GREEK SMALL LETTER ALPHA WITH PSILI"));
        data.insert(std::make_pair(0x1f01,"GREEK SMALL LETTER ALPHA WITH DASIA"));
        data.insert(std::make_pair(0x1f02,"GREEK SMALL LETTER ALPHA WITH PSILI AND VARIA"));
        data.insert(std::make_pair(0x1f03,"GREEK SMALL LETTER ALPHA WITH DASIA AND VARIA"));
        data.insert(std::make_pair(0x1f04,"GREEK SMALL LETTER ALPHA WITH PSILI AND OXIA"));
        data.insert(std::make_pair(0x1f05,"GREEK SMALL LETTER ALPHA WITH DASIA AND OXIA"));
        data.insert(std::make_pair(0x1f06,"GREEK SMALL LETTER ALPHA WITH PSILI AND PERISPOMENI"));
        data.insert(std::make_pair(0x1f07,"GREEK SMALL LETTER ALPHA WITH DASIA AND PERISPOMENI"));
        data.insert(std::make_pair(0x1f08,"GREEK CAPITAL LETTER ALPHA WITH PSILI"));
        data.insert(std::make_pair(0x1f09,"GREEK CAPITAL LETTER ALPHA WITH DASIA"));
        data.insert(std::make_pair(0x1f0a,"GREEK CAPITAL LETTER ALPHA WITH PSILI AND VARIA"));
        data.insert(std::make_pair(0x1f0b,"GREEK CAPITAL LETTER ALPHA WITH DASIA AND VARIA"));
        data.insert(std::make_pair(0x1f0c,"GREEK CAPITAL LETTER ALPHA WITH PSILI AND OXIA"));
        data.insert(std::make_pair(0x1f0d,"GREEK CAPITAL LETTER ALPHA WITH DASIA AND OXIA"));
        data.insert(std::make_pair(0x1f0e,"GREEK CAPITAL LETTER ALPHA WITH PSILI AND PERISPOMENI"));
        data.insert(std::make_pair(0x1f0f,"GREEK CAPITAL LETTER ALPHA WITH DASIA AND PERISPOMENI"));
        data.insert(std::make_pair(0x1f10,"GREEK SMALL LETTER EPSILON WITH PSILI"));
        data.insert(std::make_pair(0x1f11,"GREEK SMALL LETTER EPSILON WITH DASIA"));
        data.insert(std::make_pair(0x1f12,"GREEK SMALL LETTER EPSILON WITH PSILI AND VARIA"));
        data.insert(std::make_pair(0x1f13,"GREEK SMALL LETTER EPSILON WITH DASIA AND VARIA"));
        data.insert(std::make_pair(0x1f14,"GREEK SMALL LETTER EPSILON WITH PSILI AND OXIA"));
        data.insert(std::make_pair(0x1f15,"GREEK SMALL LETTER EPSILON WITH DASIA AND OXIA"));
        data.insert(std::make_pair(0x1f18,"GREEK CAPITAL LETTER EPSILON WITH PSILI"));
        data.insert(std::make_pair(0x1f19,"GREEK CAPITAL LETTER EPSILON WITH DASIA"));
        data.insert(std::make_pair(0x1f1a,"GREEK CAPITAL LETTER EPSILON WITH PSILI AND VARIA"));
        data.insert(std::make_pair(0x1f1b,"GREEK CAPITAL LETTER EPSILON WITH DASIA AND VARIA"));
        data.insert(std::make_pair(0x1f1c,"GREEK CAPITAL LETTER EPSILON WITH PSILI AND OXIA"));
        data.insert(std::make_pair(0x1f1d,"GREEK CAPITAL LETTER EPSILON WITH DASIA AND OXIA"));
        data.insert(std::make_pair(0x1f20,"GREEK SMALL LETTER ETA WITH PSILI"));
        data.insert(std::make_pair(0x1f21,"GREEK SMALL LETTER ETA WITH DASIA"));
        data.insert(std::make_pair(0x1f22,"GREEK SMALL LETTER ETA WITH PSILI AND VARIA"));
        data.insert(std::make_pair(0x1f23,"GREEK SMALL LETTER ETA WITH DASIA AND VARIA"));
        data.insert(std::make_pair(0x1f24,"GREEK SMALL LETTER ETA WITH PSILI AND OXIA"));
        data.insert(std::make_pair(0x1f25,"GREEK SMALL LETTER ETA WITH DASIA AND OXIA"));
        data.insert(std::make_pair(0x1f26,"GREEK SMALL LETTER ETA WITH PSILI AND PERISPOMENI"));
        data.insert(std::make_pair(0x1f27,"GREEK SMALL LETTER ETA WITH DASIA AND PERISPOMENI"));
        data.insert(std::make_pair(0x1f28,"GREEK CAPITAL LETTER ETA WITH PSILI"));
        data.insert(std::make_pair(0x1f29,"GREEK CAPITAL LETTER ETA WITH DASIA"));
        data.insert(std::make_pair(0x1f2a,"GREEK CAPITAL LETTER ETA WITH PSILI AND VARIA"));
        data.insert(std::make_pair(0x1f2b,"GREEK CAPITAL LETTER ETA WITH DASIA AND VARIA"));
        data.insert(std::make_pair(0x1f2c,"GREEK CAPITAL LETTER ETA WITH PSILI AND OXIA"));
        data.insert(std::make_pair(0x1f2d,"GREEK CAPITAL LETTER ETA WITH DASIA AND OXIA"));
        data.insert(std::make_pair(0x1f2e,"GREEK CAPITAL LETTER ETA WITH PSILI AND PERISPOMENI"));
        data.insert(std::make_pair(0x1f2f,"GREEK CAPITAL LETTER ETA WITH DASIA AND PERISPOMENI"));
        data.insert(std::make_pair(0x1f30,"GREEK SMALL LETTER IOTA WITH PSILI"));
        data.insert(std::make_pair(0x1f31,"GREEK SMALL LETTER IOTA WITH DASIA"));
        data.insert(std::make_pair(0x1f32,"GREEK SMALL LETTER IOTA WITH PSILI AND VARIA"));
        data.insert(std::make_pair(0x1f33,"GREEK SMALL LETTER IOTA WITH DASIA AND VARIA"));
        data.insert(std::make_pair(0x1f34,"GREEK SMALL LETTER IOTA WITH PSILI AND OXIA"));
        data.insert(std::make_pair(0x1f35,"GREEK SMALL LETTER IOTA WITH DASIA AND OXIA"));
        data.insert(std::make_pair(0x1f36,"GREEK SMALL LETTER IOTA WITH PSILI AND PERISPOMENI"));
        data.insert(std::make_pair(0x1f37,"GREEK SMALL LETTER IOTA WITH DASIA AND PERISPOMENI"));
        data.insert(std::make_pair(0x1f38,"GREEK CAPITAL LETTER IOTA WITH PSILI"));
        data.insert(std::make_pair(0x1f39,"GREEK CAPITAL LETTER IOTA WITH DASIA"));
        data.insert(std::make_pair(0x1f3a,"GREEK CAPITAL LETTER IOTA WITH PSILI AND VARIA"));
        data.insert(std::make_pair(0x1f3b,"GREEK CAPITAL LETTER IOTA WITH DASIA AND VARIA"));
        data.insert(std::make_pair(0x1f3c,"GREEK CAPITAL LETTER IOTA WITH PSILI AND OXIA"));
        data.insert(std::make_pair(0x1f3d,"GREEK CAPITAL LETTER IOTA WITH DASIA AND OXIA"));
        data.insert(std::make_pair(0x1f3e,"GREEK CAPITAL LETTER IOTA WITH PSILI AND PERISPOMENI"));
        data.insert(std::make_pair(0x1f3f,"GREEK CAPITAL LETTER IOTA WITH DASIA AND PERISPOMENI"));
        data.insert(std::make_pair(0x1f40,"GREEK SMALL LETTER OMICRON WITH PSILI"));
        data.insert(std::make_pair(0x1f41,"GREEK SMALL LETTER OMICRON WITH DASIA"));
        data.insert(std::make_pair(0x1f42,"GREEK SMALL LETTER OMICRON WITH PSILI AND VARIA"));
        data.insert(std::make_pair(0x1f43,"GREEK SMALL LETTER OMICRON WITH DASIA AND VARIA"));
        data.insert(std::make_pair(0x1f44,"GREEK SMALL LETTER OMICRON WITH PSILI AND OXIA"));
        data.insert(std::make_pair(0x1f45,"GREEK SMALL LETTER OMICRON WITH DASIA AND OXIA"));
        data.insert(std::make_pair(0x1f48,"GREEK CAPITAL LETTER OMICRON WITH PSILI"));
        data.insert(std::make_pair(0x1f49,"GREEK CAPITAL LETTER OMICRON WITH DASIA"));
        data.insert(std::make_pair(0x1f4a,"GREEK CAPITAL LETTER OMICRON WITH PSILI AND VARIA"));
        data.insert(std::make_pair(0x1f4b,"GREEK CAPITAL LETTER OMICRON WITH DASIA AND VARIA"));
        data.insert(std::make_pair(0x1f4c,"GREEK CAPITAL LETTER OMICRON WITH PSILI AND OXIA"));
        data.insert(std::make_pair(0x1f4d,"GREEK CAPITAL LETTER OMICRON WITH DASIA AND OXIA"));
        data.insert(std::make_pair(0x1f50,"GREEK SMALL LETTER UPSILON WITH PSILI"));
        data.insert(std::make_pair(0x1f51,"GREEK SMALL LETTER UPSILON WITH DASIA"));
        data.insert(std::make_pair(0x1f52,"GREEK SMALL LETTER UPSILON WITH PSILI AND VARIA"));
        data.insert(std::make_pair(0x1f53,"GREEK SMALL LETTER UPSILON WITH DASIA AND VARIA"));
        data.insert(std::make_pair(0x1f54,"GREEK SMALL LETTER UPSILON WITH PSILI AND OXIA"));
        data.insert(std::make_pair(0x1f55,"GREEK SMALL LETTER UPSILON WITH DASIA AND OXIA"));
        data.insert(std::make_pair(0x1f56,"GREEK SMALL LETTER UPSILON WITH PSILI AND PERISPOMENI"));
        data.insert(std::make_pair(0x1f57,"GREEK SMALL LETTER UPSILON WITH DASIA AND PERISPOMENI"));
        data.insert(std::make_pair(0x1f59,"GREEK CAPITAL LETTER UPSILON WITH DASIA"));
        data.insert(std::make_pair(0x1f5b,"GREEK CAPITAL LETTER UPSILON WITH DASIA AND VARIA"));
        data.insert(std::make_pair(0x1f5d,"GREEK CAPITAL LETTER UPSILON WITH DASIA AND OXIA"));
        data.insert(std::make_pair(0x1f5f,"GREEK CAPITAL LETTER UPSILON WITH DASIA AND PERISPOMENI"));
        data.insert(std::make_pair(0x1f60,"GREEK SMALL LETTER OMEGA WITH PSILI"));
        data.insert(std::make_pair(0x1f61,"GREEK SMALL LETTER OMEGA WITH DASIA"));
        data.insert(std::make_pair(0x1f62,"GREEK SMALL LETTER OMEGA WITH PSILI AND VARIA"));
        data.insert(std::make_pair(0x1f63,"GREEK SMALL LETTER OMEGA WITH DASIA AND VARIA"));
        data.insert(std::make_pair(0x1f64,"GREEK SMALL LETTER OMEGA WITH PSILI AND OXIA"));
        data.insert(std::make_pair(0x1f65,"GREEK SMALL LETTER OMEGA WITH DASIA AND OXIA"));
        data.insert(std::make_pair(0x1f66,"GREEK SMALL LETTER OMEGA WITH PSILI AND PERISPOMENI"));
        data.insert(std::make_pair(0x1f67,"GREEK SMALL LETTER OMEGA WITH DASIA AND PERISPOMENI"));
        data.insert(std::make_pair(0x1f68,"GREEK CAPITAL LETTER OMEGA WITH PSILI"));
        data.insert(std::make_pair(0x1f69,"GREEK CAPITAL LETTER OMEGA WITH DASIA"));
        data.insert(std::make_pair(0x1f6a,"GREEK CAPITAL LETTER OMEGA WITH PSILI AND VARIA"));
        data.insert(std::make_pair(0x1f6b,"GREEK CAPITAL LETTER OMEGA WITH DASIA AND VARIA"));
        data.insert(std::make_pair(0x1f6c,"GREEK CAPITAL LETTER OMEGA WITH PSILI AND OXIA"));
        data.insert(std::make_pair(0x1f6d,"GREEK CAPITAL LETTER OMEGA WITH DASIA AND OXIA"));
        data.insert(std::make_pair(0x1f6e,"GREEK CAPITAL LETTER OMEGA WITH PSILI AND PERISPOMENI"));
        data.insert(std::make_pair(0x1f6f,"GREEK CAPITAL LETTER OMEGA WITH DASIA AND PERISPOMENI"));
        data.insert(std::make_pair(0x1f70,"GREEK SMALL LETTER ALPHA WITH VARIA"));
        data.insert(std::make_pair(0x1f71,"GREEK SMALL LETTER ALPHA WITH OXIA"));
        data.insert(std::make_pair(0x1f72,"GREEK SMALL LETTER EPSILON WITH VARIA"));
        data.insert(std::make_pair(0x1f73,"GREEK SMALL LETTER EPSILON WITH OXIA"));
        data.insert(std::make_pair(0x1f74,"GREEK SMALL LETTER ETA WITH VARIA"));
        data.insert(std::make_pair(0x1f75,"GREEK SMALL LETTER ETA WITH OXIA"));
        data.insert(std::make_pair(0x1f76,"GREEK SMALL LETTER IOTA WITH VARIA"));
        data.insert(std::make_pair(0x1f77,"GREEK SMALL LETTER IOTA WITH OXIA"));
        data.insert(std::make_pair(0x1f78,"GREEK SMALL LETTER OMICRON WITH VARIA"));
        data.insert(std::make_pair(0x1f79,"GREEK SMALL LETTER OMICRON WITH OXIA"));
        data.insert(std::make_pair(0x1f7a,"GREEK SMALL LETTER UPSILON WITH VARIA"));
        data.insert(std::make_pair(0x1f7b,"GREEK SMALL LETTER UPSILON WITH OXIA"));
        data.insert(std::make_pair(0x1f7c,"GREEK SMALL LETTER OMEGA WITH VARIA"));
        data.insert(std::make_pair(0x1f7d,"GREEK SMALL LETTER OMEGA WITH OXIA"));
        data.insert(std::make_pair(0x1f80,"GREEK SMALL LETTER ALPHA WITH PSILI AND YPOGEGRAMMENI"));
        data.insert(std::make_pair(0x1f81,"GREEK SMALL LETTER ALPHA WITH DASIA AND YPOGEGRAMMENI"));
        data.insert(std::make_pair(0x1f82,"GREEK SMALL LETTER ALPHA WITH PSILI AND VARIA AND YPOGEGRAMMENI"));
        data.insert(std::make_pair(0x1f83,"GREEK SMALL LETTER ALPHA WITH DASIA AND VARIA AND YPOGEGRAMMENI"));
        data.insert(std::make_pair(0x1f84,"GREEK SMALL LETTER ALPHA WITH PSILI AND OXIA AND YPOGEGRAMMENI"));
        data.insert(std::make_pair(0x1f85,"GREEK SMALL LETTER ALPHA WITH DASIA AND OXIA AND YPOGEGRAMMENI"));
        data.insert(std::make_pair(0x1f86,"GREEK SMALL LETTER ALPHA WITH PSILI AND PERISPOMENI AND YPOGEGRAMMENI"));
        data.insert(std::make_pair(0x1f87,"GREEK SMALL LETTER ALPHA WITH DASIA AND PERISPOMENI AND YPOGEGRAMMENI"));
        data.insert(std::make_pair(0x1f88,"GREEK CAPITAL LETTER ALPHA WITH PSILI AND PROSGEGRAMMENI"));
        data.insert(std::make_pair(0x1f89,"GREEK CAPITAL LETTER ALPHA WITH DASIA AND PROSGEGRAMMENI"));
        data.insert(std::make_pair(0x1f8a,"GREEK CAPITAL LETTER ALPHA WITH PSILI AND VARIA AND PROSGEGRAMMENI"));
        data.insert(std::make_pair(0x1f8b,"GREEK CAPITAL LETTER ALPHA WITH DASIA AND VARIA AND PROSGEGRAMMENI"));
        data.insert(std::make_pair(0x1f8c,"GREEK CAPITAL LETTER ALPHA WITH PSILI AND OXIA AND PROSGEGRAMMENI"));
        data.insert(std::make_pair(0x1f8d,"GREEK CAPITAL LETTER ALPHA WITH DASIA AND OXIA AND PROSGEGRAMMENI"));
        data.insert(std::make_pair(0x1f8e,"GREEK CAPITAL LETTER ALPHA WITH PSILI AND PERISPOMENI AND PROSGEGRAMMENI"));
        data.insert(std::make_pair(0x1f8f,"GREEK CAPITAL LETTER ALPHA WITH DASIA AND PERISPOMENI AND PROSGEGRAMMENI"));
        data.insert(std::make_pair(0x1f90,"GREEK SMALL LETTER ETA WITH PSILI AND YPOGEGRAMMENI"));
        data.insert(std::make_pair(0x1f91,"GREEK SMALL LETTER ETA WITH DASIA AND YPOGEGRAMMENI"));
        data.insert(std::make_pair(0x1f92,"GREEK SMALL LETTER ETA WITH PSILI AND VARIA AND YPOGEGRAMMENI"));
        data.insert(std::make_pair(0x1f93,"GREEK SMALL LETTER ETA WITH DASIA AND VARIA AND YPOGEGRAMMENI"));
        data.insert(std::make_pair(0x1f94,"GREEK SMALL LETTER ETA WITH PSILI AND OXIA AND YPOGEGRAMMENI"));
        data.insert(std::make_pair(0x1f95,"GREEK SMALL LETTER ETA WITH DASIA AND OXIA AND YPOGEGRAMMENI"));
        data.insert(std::make_pair(0x1f96,"GREEK SMALL LETTER ETA WITH PSILI AND PERISPOMENI AND YPOGEGRAMMENI"));
        data.insert(std::make_pair(0x1f97,"GREEK SMALL LETTER ETA WITH DASIA AND PERISPOMENI AND YPOGEGRAMMENI"));
        data.insert(std::make_pair(0x1f98,"GREEK CAPITAL LETTER ETA WITH PSILI AND PROSGEGRAMMENI"));
        data.insert(std::make_pair(0x1f99,"GREEK CAPITAL LETTER ETA WITH DASIA AND PROSGEGRAMMENI"));
        data.insert(std::make_pair(0x1f9a,"GREEK CAPITAL LETTER ETA WITH PSILI AND VARIA AND PROSGEGRAMMENI"));
        data.insert(std::make_pair(0x1f9b,"GREEK CAPITAL LETTER ETA WITH DASIA AND VARIA AND PROSGEGRAMMENI"));
        data.insert(std::make_pair(0x1f9c,"GREEK CAPITAL LETTER ETA WITH PSILI AND OXIA AND PROSGEGRAMMENI"));
        data.insert(std::make_pair(0x1f9d,"GREEK CAPITAL LETTER ETA WITH DASIA AND OXIA AND PROSGEGRAMMENI"));
        data.insert(std::make_pair(0x1f9e,"GREEK CAPITAL LETTER ETA WITH PSILI AND PERISPOMENI AND PROSGEGRAMMENI"));
        data.insert(std::make_pair(0x1f9f,"GREEK CAPITAL LETTER ETA WITH DASIA AND PERISPOMENI AND PROSGEGRAMMENI"));
        data.insert(std::make_pair(0x1fa0,"GREEK SMALL LETTER OMEGA WITH PSILI AND YPOGEGRAMMENI"));
        data.insert(std::make_pair(0x1fa1,"GREEK SMALL LETTER OMEGA WITH DASIA AND YPOGEGRAMMENI"));
        data.insert(std::make_pair(0x1fa2,"GREEK SMALL LETTER OMEGA WITH PSILI AND VARIA AND YPOGEGRAMMENI"));
        data.insert(std::make_pair(0x1fa3,"GREEK SMALL LETTER OMEGA WITH DASIA AND VARIA AND YPOGEGRAMMENI"));
        data.insert(std::make_pair(0x1fa4,"GREEK SMALL LETTER OMEGA WITH PSILI AND OXIA AND YPOGEGRAMMENI"));
        data.insert(std::make_pair(0x1fa5,"GREEK SMALL LETTER OMEGA WITH DASIA AND OXIA AND YPOGEGRAMMENI"));
        data.insert(std::make_pair(0x1fa6,"GREEK SMALL LETTER OMEGA WITH PSILI AND PERISPOMENI AND YPOGEGRAMMENI"));
        data.insert(std::make_pair(0x1fa7,"GREEK SMALL LETTER OMEGA WITH DASIA AND PERISPOMENI AND YPOGEGRAMMENI"));
        data.insert(std::make_pair(0x1fa8,"GREEK CAPITAL LETTER OMEGA WITH PSILI AND PROSGEGRAMMENI"));
        data.insert(std::make_pair(0x1fa9,"GREEK CAPITAL LETTER OMEGA WITH DASIA AND PROSGEGRAMMENI"));
        data.insert(std::make_pair(0x1faa,"GREEK CAPITAL LETTER OMEGA WITH PSILI AND VARIA AND PROSGEGRAMMENI"));
        data.insert(std::make_pair(0x1fab,"GREEK CAPITAL LETTER OMEGA WITH DASIA AND VARIA AND PROSGEGRAMMENI"));
        data.insert(std::make_pair(0x1fac,"GREEK CAPITAL LETTER OMEGA WITH PSILI AND OXIA AND PROSGEGRAMMENI"));
        data.insert(std::make_pair(0x1fad,"GREEK CAPITAL LETTER OMEGA WITH DASIA AND OXIA AND PROSGEGRAMMENI"));
        data.insert(std::make_pair(0x1fae,"GREEK CAPITAL LETTER OMEGA WITH PSILI AND PERISPOMENI AND PROSGEGRAMMENI"));
        data.insert(std::make_pair(0x1faf,"GREEK CAPITAL LETTER OMEGA WITH DASIA AND PERISPOMENI AND PROSGEGRAMMENI"));
        data.insert(std::make_pair(0x1fb0,"GREEK SMALL LETTER ALPHA WITH VRACHY"));
        data.insert(std::make_pair(0x1fb1,"GREEK SMALL LETTER ALPHA WITH MACRON"));
        data.insert(std::make_pair(0x1fb2,"GREEK SMALL LETTER ALPHA WITH VARIA AND YPOGEGRAMMENI"));
        data.insert(std::make_pair(0x1fb3,"GREEK SMALL LETTER ALPHA WITH YPOGEGRAMMENI"));
        data.insert(std::make_pair(0x1fb4,"GREEK SMALL LETTER ALPHA WITH OXIA AND YPOGEGRAMMENI"));
        data.insert(std::make_pair(0x1fb6,"GREEK SMALL LETTER ALPHA WITH PERISPOMENI"));
        data.insert(std::make_pair(0x1fb7,"GREEK SMALL LETTER ALPHA WITH PERISPOMENI AND YPOGEGRAMMENI"));
        data.insert(std::make_pair(0x1fb8,"GREEK CAPITAL LETTER ALPHA WITH VRACHY"));
        data.insert(std::make_pair(0x1fb9,"GREEK CAPITAL LETTER ALPHA WITH MACRON"));
        data.insert(std::make_pair(0x1fba,"GREEK CAPITAL LETTER ALPHA WITH VARIA"));
        data.insert(std::make_pair(0x1fbb,"GREEK CAPITAL LETTER ALPHA WITH OXIA"));
        data.insert(std::make_pair(0x1fbc,"GREEK CAPITAL LETTER ALPHA WITH PROSGEGRAMMENI"));
        data.insert(std::make_pair(0x1fbd,"GREEK KORONIS"));
        data.insert(std::make_pair(0x1fbe,"GREEK PROSGEGRAMMENI"));
        data.insert(std::make_pair(0x1fbf,"GREEK PSILI"));
        data.insert(std::make_pair(0x1fc0,"GREEK PERISPOMENI"));
        data.insert(std::make_pair(0x1fc1,"GREEK DIALYTIKA AND PERISPOMENI"));
        data.insert(std::make_pair(0x1fc2,"GREEK SMALL LETTER ETA WITH VARIA AND YPOGEGRAMMENI"));
        data.insert(std::make_pair(0x1fc3,"GREEK SMALL LETTER ETA WITH YPOGEGRAMMENI"));
        data.insert(std::make_pair(0x1fc4,"GREEK SMALL LETTER ETA WITH OXIA AND YPOGEGRAMMENI"));
        data.insert(std::make_pair(0x1fc6,"GREEK SMALL LETTER ETA WITH PERISPOMENI"));
        data.insert(std::make_pair(0x1fc7,"GREEK SMALL LETTER ETA WITH PERISPOMENI AND YPOGEGRAMMENI"));
        data.insert(std::make_pair(0x1fc8,"GREEK CAPITAL LETTER EPSILON WITH VARIA"));
        data.insert(std::make_pair(0x1fc9,"GREEK CAPITAL LETTER EPSILON WITH OXIA"));
        data.insert(std::make_pair(0x1fca,"GREEK CAPITAL LETTER ETA WITH VARIA"));
        data.insert(std::make_pair(0x1fcb,"GREEK CAPITAL LETTER ETA WITH OXIA"));
        data.insert(std::make_pair(0x1fcc,"GREEK CAPITAL LETTER ETA WITH PROSGEGRAMMENI"));
        data.insert(std::make_pair(0x1fcd,"GREEK PSILI AND VARIA"));
        data.insert(std::make_pair(0x1fce,"GREEK PSILI AND OXIA"));
        data.insert(std::make_pair(0x1fcf,"GREEK PSILI AND PERISPOMENI"));
        data.insert(std::make_pair(0x1fd0,"GREEK SMALL LETTER IOTA WITH VRACHY"));
        data.insert(std::make_pair(0x1fd1,"GREEK SMALL LETTER IOTA WITH MACRON"));
        data.insert(std::make_pair(0x1fd2,"GREEK SMALL LETTER IOTA WITH DIALYTIKA AND VARIA"));
        data.insert(std::make_pair(0x1fd3,"GREEK SMALL LETTER IOTA WITH DIALYTIKA AND OXIA"));
        data.insert(std::make_pair(0x1fd6,"GREEK SMALL LETTER IOTA WITH PERISPOMENI"));
        data.insert(std::make_pair(0x1fd7,"GREEK SMALL LETTER IOTA WITH DIALYTIKA AND PERISPOMENI"));
        data.insert(std::make_pair(0x1fd8,"GREEK CAPITAL LETTER IOTA WITH VRACHY"));
        data.insert(std::make_pair(0x1fd9,"GREEK CAPITAL LETTER IOTA WITH MACRON"));
        data.insert(std::make_pair(0x1fda,"GREEK CAPITAL LETTER IOTA WITH VARIA"));
        data.insert(std::make_pair(0x1fdb,"GREEK CAPITAL LETTER IOTA WITH OXIA"));
        data.insert(std::make_pair(0x1fdd,"GREEK DASIA AND VARIA"));
        data.insert(std::make_pair(0x1fde,"GREEK DASIA AND OXIA"));
        data.insert(std::make_pair(0x1fdf,"GREEK DASIA AND PERISPOMENI"));
        data.insert(std::make_pair(0x1fe0,"GREEK SMALL LETTER UPSILON WITH VRACHY"));
        data.insert(std::make_pair(0x1fe1,"GREEK SMALL LETTER UPSILON WITH MACRON"));
        data.insert(std::make_pair(0x1fe2,"GREEK SMALL LETTER UPSILON WITH DIALYTIKA AND VARIA"));
        data.insert(std::make_pair(0x1fe3,"GREEK SMALL LETTER UPSILON WITH DIALYTIKA AND OXIA"));
        data.insert(std::make_pair(0x1fe4,"GREEK SMALL LETTER RHO WITH PSILI"));
        data.insert(std::make_pair(0x1fe5,"GREEK SMALL LETTER RHO WITH DASIA"));
        data.insert(std::make_pair(0x1fe6,"GREEK SMALL LETTER UPSILON WITH PERISPOMENI"));
        data.insert(std::make_pair(0x1fe7,"GREEK SMALL LETTER UPSILON WITH DIALYTIKA AND PERISPOMENI"));
        data.insert(std::make_pair(0x1fe8,"GREEK CAPITAL LETTER UPSILON WITH VRACHY"));
        data.insert(std::make_pair(0x1fe9,"GREEK CAPITAL LETTER UPSILON WITH MACRON"));
        data.insert(std::make_pair(0x1fea,"GREEK CAPITAL LETTER UPSILON WITH VARIA"));
        data.insert(std::make_pair(0x1feb,"GREEK CAPITAL LETTER UPSILON WITH OXIA"));
        data.insert(std::make_pair(0x1fec,"GREEK CAPITAL LETTER RHO WITH DASIA"));
        data.insert(std::make_pair(0x1fed,"GREEK DIALYTIKA AND VARIA"));
        data.insert(std::make_pair(0x1fee,"GREEK DIALYTIKA AND OXIA"));
        data.insert(std::make_pair(0x1fef,"GREEK VARIA"));
        data.insert(std::make_pair(0x1ff2,"GREEK SMALL LETTER OMEGA WITH VARIA AND YPOGEGRAMMENI"));
        data.insert(std::make_pair(0x1ff3,"GREEK SMALL LETTER OMEGA WITH YPOGEGRAMMENI"));
        data.insert(std::make_pair(0x1ff4,"GREEK SMALL LETTER OMEGA WITH OXIA AND YPOGEGRAMMENI"));
        data.insert(std::make_pair(0x1ff6,"GREEK SMALL LETTER OMEGA WITH PERISPOMENI"));
        data.insert(std::make_pair(0x1ff7,"GREEK SMALL LETTER OMEGA WITH PERISPOMENI AND YPOGEGRAMMENI"));
        data.insert(std::make_pair(0x1ff8,"GREEK CAPITAL LETTER OMICRON WITH VARIA"));
        data.insert(std::make_pair(0x1ff9,"GREEK CAPITAL LETTER OMICRON WITH OXIA"));
        data.insert(std::make_pair(0x1ffa,"GREEK CAPITAL LETTER OMEGA WITH VARIA"));
        data.insert(std::make_pair(0x1ffb,"GREEK CAPITAL LETTER OMEGA WITH OXIA"));
        data.insert(std::make_pair(0x1ffc,"GREEK CAPITAL LETTER OMEGA WITH PROSGEGRAMMENI"));
        data.insert(std::make_pair(0x1ffd,"GREEK OXIA"));
        data.insert(std::make_pair(0x1ffe,"GREEK DASIA"));
        data.insert(std::make_pair(0x2000,"EN QUAD"));
        data.insert(std::make_pair(0x2001,"EM QUAD"));
        data.insert(std::make_pair(0x2002,"EN SPACE"));
        data.insert(std::make_pair(0x2003,"EM SPACE"));
        data.insert(std::make_pair(0x2004,"THREE-PER-EM SPACE"));
        data.insert(std::make_pair(0x2005,"FOUR-PER-EM SPACE"));
        data.insert(std::make_pair(0x2006,"SIX-PER-EM SPACE"));
        data.insert(std::make_pair(0x2007,"FIGURE SPACE"));
        data.insert(std::make_pair(0x2008,"PUNCTUATION SPACE"));
        data.insert(std::make_pair(0x2009,"THIN SPACE"));
        data.insert(std::make_pair(0x200a,"HAIR SPACE"));
        data.insert(std::make_pair(0x200b,"ZERO WIDTH SPACE"));
        data.insert(std::make_pair(0x200c,"ZERO WIDTH NON-JOINER"));
        data.insert(std::make_pair(0x200d,"ZERO WIDTH JOINER"));
        data.insert(std::make_pair(0x200e,"LEFT-TO-RIGHT MARK"));
        data.insert(std::make_pair(0x200f,"RIGHT-TO-LEFT MARK"));
        data.insert(std::make_pair(0x2010,"HYPHEN"));
        data.insert(std::make_pair(0x2011,"NON-BREAKING HYPHEN"));
        data.insert(std::make_pair(0x2012,"FIGURE DASH"));
        data.insert(std::make_pair(0x2013,"EN DASH"));
        data.insert(std::make_pair(0x2014,"EM DASH"));
        data.insert(std::make_pair(0x2015,"HORIZONTAL BAR"));
        data.insert(std::make_pair(0x2016,"DOUBLE VERTICAL LINE"));
        data.insert(std::make_pair(0x2017,"DOUBLE LOW LINE"));
        data.insert(std::make_pair(0x2018,"LEFT SINGLE QUOTATION MARK"));
        data.insert(std::make_pair(0x2019,"RIGHT SINGLE QUOTATION MARK"));
        data.insert(std::make_pair(0x201a,"SINGLE LOW-9 QUOTATION MARK"));
        data.insert(std::make_pair(0x201b,"SINGLE HIGH-REVERSED-9 QUOTATION MARK"));
        data.insert(std::make_pair(0x201c,"LEFT DOUBLE QUOTATION MARK"));
        data.insert(std::make_pair(0x201d,"RIGHT DOUBLE QUOTATION MARK"));
        data.insert(std::make_pair(0x201e,"DOUBLE LOW-9 QUOTATION MARK"));
        data.insert(std::make_pair(0x201f,"DOUBLE HIGH-REVERSED-9 QUOTATION MARK"));
        data.insert(std::make_pair(0x2020,"DAGGER"));
        data.insert(std::make_pair(0x2021,"DOUBLE DAGGER"));
        data.insert(std::make_pair(0x2022,"BULLET"));
        data.insert(std::make_pair(0x2023,"TRIANGULAR BULLET"));
        data.insert(std::make_pair(0x2024,"ONE DOT LEADER"));
        data.insert(std::make_pair(0x2025,"TWO DOT LEADER"));
        data.insert(std::make_pair(0x2026,"HORIZONTAL ELLIPSIS"));
        data.insert(std::make_pair(0x2027,"HYPHENATION POINT"));
        data.insert(std::make_pair(0x2028,"LINE SEPARATOR"));
        data.insert(std::make_pair(0x2029,"PARAGRAPH SEPARATOR"));
        data.insert(std::make_pair(0x202a,"LEFT-TO-RIGHT EMBEDDING"));
        data.insert(std::make_pair(0x202b,"RIGHT-TO-LEFT EMBEDDING"));
        data.insert(std::make_pair(0x202c,"POP DIRECTIONAL FORMATTING"));
        data.insert(std::make_pair(0x202d,"LEFT-TO-RIGHT OVERRIDE"));
        data.insert(std::make_pair(0x202e,"RIGHT-TO-LEFT OVERRIDE"));
        data.insert(std::make_pair(0x202f,"NARROW NO-BREAK SPACE"));
        data.insert(std::make_pair(0x2030,"PER MILLE SIGN"));
        data.insert(std::make_pair(0x2031,"PER TEN THOUSAND SIGN"));
        data.insert(std::make_pair(0x2032,"PRIME"));
        data.insert(std::make_pair(0x2033,"DOUBLE PRIME"));
        data.insert(std::make_pair(0x2034,"TRIPLE PRIME"));
        data.insert(std::make_pair(0x2035,"REVERSED PRIME"));
        data.insert(std::make_pair(0x2036,"REVERSED DOUBLE PRIME"));
        data.insert(std::make_pair(0x2037,"REVERSED TRIPLE PRIME"));
        data.insert(std::make_pair(0x2038,"CARET"));
        data.insert(std::make_pair(0x2039,"SINGLE LEFT-POINTING ANGLE QUOTATION MARK"));
        data.insert(std::make_pair(0x203a,"SINGLE RIGHT-POINTING ANGLE QUOTATION MARK"));
        data.insert(std::make_pair(0x203b,"REFERENCE MARK"));
        data.insert(std::make_pair(0x203c,"DOUBLE EXCLAMATION MARK"));
        data.insert(std::make_pair(0x203d,"INTERROBANG"));
        data.insert(std::make_pair(0x203e,"OVERLINE"));
        data.insert(std::make_pair(0x203f,"UNDERTIE"));
        data.insert(std::make_pair(0x2040,"CHARACTER TIE"));
        data.insert(std::make_pair(0x2041,"CARET INSERTION POINT"));
        data.insert(std::make_pair(0x2042,"ASTERISM"));
        data.insert(std::make_pair(0x2043,"HYPHEN BULLET"));
        data.insert(std::make_pair(0x2044,"FRACTION SLASH"));
        data.insert(std::make_pair(0x2045,"LEFT SQUARE BRACKET WITH QUILL"));
        data.insert(std::make_pair(0x2046,"RIGHT SQUARE BRACKET WITH QUILL"));
        data.insert(std::make_pair(0x2047,"DOUBLE QUESTION MARK"));
        data.insert(std::make_pair(0x2048,"QUESTION EXCLAMATION MARK"));
        data.insert(std::make_pair(0x2049,"EXCLAMATION QUESTION MARK"));
        data.insert(std::make_pair(0x204a,"TIRONIAN SIGN ET"));
        data.insert(std::make_pair(0x204b,"REVERSED PILCROW SIGN"));
        data.insert(std::make_pair(0x204c,"BLACK LEFTWARDS BULLET"));
        data.insert(std::make_pair(0x204d,"BLACK RIGHTWARDS BULLET"));
        data.insert(std::make_pair(0x204e,"LOW ASTERISK"));
        data.insert(std::make_pair(0x204f,"REVERSED SEMICOLON"));
        data.insert(std::make_pair(0x2050,"CLOSE UP"));
        data.insert(std::make_pair(0x2051,"TWO ASTERISKS ALIGNED VERTICALLY"));
        data.insert(std::make_pair(0x2052,"COMMERCIAL MINUS SIGN"));
        data.insert(std::make_pair(0x2053,"SWUNG DASH"));
        data.insert(std::make_pair(0x2054,"INVERTED UNDERTIE"));
        data.insert(std::make_pair(0x2055,"FLOWER PUNCTUATION MARK"));
        data.insert(std::make_pair(0x2056,"THREE DOT PUNCTUATION"));
        data.insert(std::make_pair(0x2057,"QUADRUPLE PRIME"));
        data.insert(std::make_pair(0x2058,"FOUR DOT PUNCTUATION"));
        data.insert(std::make_pair(0x2059,"FIVE DOT PUNCTUATION"));
        data.insert(std::make_pair(0x205a,"TWO DOT PUNCTUATION"));
        data.insert(std::make_pair(0x205b,"FOUR DOT MARK"));
        data.insert(std::make_pair(0x205c,"DOTTED CROSS"));
        data.insert(std::make_pair(0x205d,"TRICOLON"));
        data.insert(std::make_pair(0x205e,"VERTICAL FOUR DOTS"));
        data.insert(std::make_pair(0x205f,"MEDIUM MATHEMATICAL SPACE"));
        data.insert(std::make_pair(0x2060,"WORD JOINER"));
        data.insert(std::make_pair(0x2061,"FUNCTION APPLICATION"));
        data.insert(std::make_pair(0x2062,"INVISIBLE TIMES"));
        data.insert(std::make_pair(0x2063,"INVISIBLE SEPARATOR"));
        data.insert(std::make_pair(0x2064,"INVISIBLE PLUS"));
        data.insert(std::make_pair(0x2066,"LEFT-TO-RIGHT ISOLATE"));
        data.insert(std::make_pair(0x2067,"RIGHT-TO-LEFT ISOLATE"));
        data.insert(std::make_pair(0x2068,"FIRST STRONG ISOLATE"));
        data.insert(std::make_pair(0x2069,"POP DIRECTIONAL ISOLATE"));
        data.insert(std::make_pair(0x206a,"INHIBIT SYMMETRIC SWAPPING"));
        data.insert(std::make_pair(0x206b,"ACTIVATE SYMMETRIC SWAPPING"));
        data.insert(std::make_pair(0x206c,"INHIBIT ARABIC FORM SHAPING"));
        data.insert(std::make_pair(0x206d,"ACTIVATE ARABIC FORM SHAPING"));
        data.insert(std::make_pair(0x206e,"NATIONAL DIGIT SHAPES"));
        data.insert(std::make_pair(0x206f,"NOMINAL DIGIT SHAPES"));
        data.insert(std::make_pair(0x2070,"SUPERSCRIPT ZERO"));
        data.insert(std::make_pair(0x2071,"SUPERSCRIPT LATIN SMALL LETTER I"));
        data.insert(std::make_pair(0x2074,"SUPERSCRIPT FOUR"));
        data.insert(std::make_pair(0x2075,"SUPERSCRIPT FIVE"));
        data.insert(std::make_pair(0x2076,"SUPERSCRIPT SIX"));
        data.insert(std::make_pair(0x2077,"SUPERSCRIPT SEVEN"));
        data.insert(std::make_pair(0x2078,"SUPERSCRIPT EIGHT"));
        data.insert(std::make_pair(0x2079,"SUPERSCRIPT NINE"));
        data.insert(std::make_pair(0x207a,"SUPERSCRIPT PLUS SIGN"));
        data.insert(std::make_pair(0x207b,"SUPERSCRIPT MINUS"));
        data.insert(std::make_pair(0x207c,"SUPERSCRIPT EQUALS SIGN"));
        data.insert(std::make_pair(0x207d,"SUPERSCRIPT LEFT PARENTHESIS"));
        data.insert(std::make_pair(0x207e,"SUPERSCRIPT RIGHT PARENTHESIS"));
        data.insert(std::make_pair(0x207f,"SUPERSCRIPT LATIN SMALL LETTER N"));
        data.insert(std::make_pair(0x2080,"SUBSCRIPT ZERO"));
        data.insert(std::make_pair(0x2081,"SUBSCRIPT ONE"));
        data.insert(std::make_pair(0x2082,"SUBSCRIPT TWO"));
        data.insert(std::make_pair(0x2083,"SUBSCRIPT THREE"));
        data.insert(std::make_pair(0x2084,"SUBSCRIPT FOUR"));
        data.insert(std::make_pair(0x2085,"SUBSCRIPT FIVE"));
        data.insert(std::make_pair(0x2086,"SUBSCRIPT SIX"));
        data.insert(std::make_pair(0x2087,"SUBSCRIPT SEVEN"));
        data.insert(std::make_pair(0x2088,"SUBSCRIPT EIGHT"));
        data.insert(std::make_pair(0x2089,"SUBSCRIPT NINE"));
        data.insert(std::make_pair(0x208a,"SUBSCRIPT PLUS SIGN"));
        data.insert(std::make_pair(0x208b,"SUBSCRIPT MINUS"));
        data.insert(std::make_pair(0x208c,"SUBSCRIPT EQUALS SIGN"));
        data.insert(std::make_pair(0x208d,"SUBSCRIPT LEFT PARENTHESIS"));
        data.insert(std::make_pair(0x208e,"SUBSCRIPT RIGHT PARENTHESIS"));
        data.insert(std::make_pair(0x2090,"LATIN SUBSCRIPT SMALL LETTER A"));
        data.insert(std::make_pair(0x2091,"LATIN SUBSCRIPT SMALL LETTER E"));
        data.insert(std::make_pair(0x2092,"LATIN SUBSCRIPT SMALL LETTER O"));
        data.insert(std::make_pair(0x2093,"LATIN SUBSCRIPT SMALL LETTER X"));
        data.insert(std::make_pair(0x2094,"LATIN SUBSCRIPT SMALL LETTER SCHWA"));
        data.insert(std::make_pair(0x2095,"LATIN SUBSCRIPT SMALL LETTER H"));
        data.insert(std::make_pair(0x2096,"LATIN SUBSCRIPT SMALL LETTER K"));
        data.insert(std::make_pair(0x2097,"LATIN SUBSCRIPT SMALL LETTER L"));
        data.insert(std::make_pair(0x2098,"LATIN SUBSCRIPT SMALL LETTER M"));
        data.insert(std::make_pair(0x2099,"LATIN SUBSCRIPT SMALL LETTER N"));
        data.insert(std::make_pair(0x209a,"LATIN SUBSCRIPT SMALL LETTER P"));
        data.insert(std::make_pair(0x209b,"LATIN SUBSCRIPT SMALL LETTER S"));
        data.insert(std::make_pair(0x209c,"LATIN SUBSCRIPT SMALL LETTER T"));
        data.insert(std::make_pair(0x20a0,"EURO-CURRENCY SIGN"));
        data.insert(std::make_pair(0x20a1,"COLON SIGN"));
        data.insert(std::make_pair(0x20a2,"CRUZEIRO SIGN"));
        data.insert(std::make_pair(0x20a3,"FRENCH FRANC SIGN"));
        data.insert(std::make_pair(0x20a4,"LIRA SIGN"));
        data.insert(std::make_pair(0x20a5,"MILL SIGN"));
        data.insert(std::make_pair(0x20a6,"NAIRA SIGN"));
        data.insert(std::make_pair(0x20a7,"PESETA SIGN"));
        data.insert(std::make_pair(0x20a8,"RUPEE SIGN"));
        data.insert(std::make_pair(0x20a9,"WON SIGN"));
        data.insert(std::make_pair(0x20aa,"NEW SHEQEL SIGN"));
        data.insert(std::make_pair(0x20ab,"DONG SIGN"));
        data.insert(std::make_pair(0x20ac,"EURO SIGN"));
        data.insert(std::make_pair(0x20ad,"KIP SIGN"));
        data.insert(std::make_pair(0x20ae,"TUGRIK SIGN"));
        data.insert(std::make_pair(0x20af,"DRACHMA SIGN"));
        data.insert(std::make_pair(0x20b0,"GERMAN PENNY SIGN"));
        data.insert(std::make_pair(0x20b1,"PESO SIGN"));
        data.insert(std::make_pair(0x20b2,"GUARANI SIGN"));
        data.insert(std::make_pair(0x20b3,"AUSTRAL SIGN"));
        data.insert(std::make_pair(0x20b4,"HRYVNIA SIGN"));
        data.insert(std::make_pair(0x20b5,"CEDI SIGN"));
        data.insert(std::make_pair(0x20b6,"LIVRE TOURNOIS SIGN"));
        data.insert(std::make_pair(0x20b7,"SPESMILO SIGN"));
        data.insert(std::make_pair(0x20b8,"TENGE SIGN"));
        data.insert(std::make_pair(0x20b9,"INDIAN RUPEE SIGN"));
        data.insert(std::make_pair(0x20ba,"TURKISH LIRA SIGN"));
        data.insert(std::make_pair(0x20bb,"NORDIC MARK SIGN"));
        data.insert(std::make_pair(0x20bc,"MANAT SIGN"));
        data.insert(std::make_pair(0x20bd,"RUBLE SIGN"));
        data.insert(std::make_pair(0x20be,"LARI SIGN"));
        data.insert(std::make_pair(0x20bf,"BITCOIN SIGN"));
        data.insert(std::make_pair(0x20c0,"SOM SIGN"));
        data.insert(std::make_pair(0x20d0,"COMBINING LEFT HARPOON ABOVE"));
        data.insert(std::make_pair(0x20d1,"COMBINING RIGHT HARPOON ABOVE"));
        data.insert(std::make_pair(0x20d2,"COMBINING LONG VERTICAL LINE OVERLAY"));
        data.insert(std::make_pair(0x20d3,"COMBINING SHORT VERTICAL LINE OVERLAY"));
        data.insert(std::make_pair(0x20d4,"COMBINING ANTICLOCKWISE ARROW ABOVE"));
        data.insert(std::make_pair(0x20d5,"COMBINING CLOCKWISE ARROW ABOVE"));
        data.insert(std::make_pair(0x20d6,"COMBINING LEFT ARROW ABOVE"));
        data.insert(std::make_pair(0x20d7,"COMBINING RIGHT ARROW ABOVE"));
        data.insert(std::make_pair(0x20d8,"COMBINING RING OVERLAY"));
        data.insert(std::make_pair(0x20d9,"COMBINING CLOCKWISE RING OVERLAY"));
        data.insert(std::make_pair(0x20da,"COMBINING ANTICLOCKWISE RING OVERLAY"));
        data.insert(std::make_pair(0x20db,"COMBINING THREE DOTS ABOVE"));
        data.insert(std::make_pair(0x20dc,"COMBINING FOUR DOTS ABOVE"));
        data.insert(std::make_pair(0x20dd,"COMBINING ENCLOSING CIRCLE"));
        data.insert(std::make_pair(0x20de,"COMBINING ENCLOSING SQUARE"));
        data.insert(std::make_pair(0x20df,"COMBINING ENCLOSING DIAMOND"));
        data.insert(std::make_pair(0x20e0,"COMBINING ENCLOSING CIRCLE BACKSLASH"));
        data.insert(std::make_pair(0x20e1,"COMBINING LEFT RIGHT ARROW ABOVE"));
        data.insert(std::make_pair(0x20e2,"COMBINING ENCLOSING SCREEN"));
        data.insert(std::make_pair(0x20e3,"COMBINING ENCLOSING KEYCAP"));
        data.insert(std::make_pair(0x20e4,"COMBINING ENCLOSING UPWARD POINTING TRIANGLE"));
        data.insert(std::make_pair(0x20e5,"COMBINING REVERSE SOLIDUS OVERLAY"));
        data.insert(std::make_pair(0x20e6,"COMBINING DOUBLE VERTICAL STROKE OVERLAY"));
        data.insert(std::make_pair(0x20e7,"COMBINING ANNUITY SYMBOL"));
        data.insert(std::make_pair(0x20e8,"COMBINING TRIPLE UNDERDOT"));
        data.insert(std::make_pair(0x20e9,"COMBINING WIDE BRIDGE ABOVE"));
        data.insert(std::make_pair(0x20ea,"COMBINING LEFTWARDS ARROW OVERLAY"));
        data.insert(std::make_pair(0x20eb,"COMBINING LONG DOUBLE SOLIDUS OVERLAY"));
        data.insert(std::make_pair(0x20ec,"COMBINING RIGHTWARDS HARPOON WITH BARB DOWNWARDS"));
        data.insert(std::make_pair(0x20ed,"COMBINING LEFTWARDS HARPOON WITH BARB DOWNWARDS"));
        data.insert(std::make_pair(0x20ee,"COMBINING LEFT ARROW BELOW"));
        data.insert(std::make_pair(0x20ef,"COMBINING RIGHT ARROW BELOW"));
        data.insert(std::make_pair(0x20f0,"COMBINING ASTERISK ABOVE"));
        data.insert(std::make_pair(0x2100,"ACCOUNT OF"));
        data.insert(std::make_pair(0x2101,"ADDRESSED TO THE SUBJECT"));
        data.insert(std::make_pair(0x2102,"DOUBLE-STRUCK CAPITAL C"));
        data.insert(std::make_pair(0x2103,"DEGREE CELSIUS"));
        data.insert(std::make_pair(0x2104,"CENTRE LINE SYMBOL"));
        data.insert(std::make_pair(0x2105,"CARE OF"));
        data.insert(std::make_pair(0x2106,"CADA UNA"));
        data.insert(std::make_pair(0x2107,"EULER CONSTANT"));
        data.insert(std::make_pair(0x2108,"SCRUPLE"));
        data.insert(std::make_pair(0x2109,"DEGREE FAHRENHEIT"));
        data.insert(std::make_pair(0x210a,"SCRIPT SMALL G"));
        data.insert(std::make_pair(0x210b,"SCRIPT CAPITAL H"));
        data.insert(std::make_pair(0x210c,"BLACK-LETTER CAPITAL H"));
        data.insert(std::make_pair(0x210d,"DOUBLE-STRUCK CAPITAL H"));
        data.insert(std::make_pair(0x210e,"PLANCK CONSTANT"));
        data.insert(std::make_pair(0x210f,"PLANCK CONSTANT OVER TWO PI"));
        data.insert(std::make_pair(0x2110,"SCRIPT CAPITAL I"));
        data.insert(std::make_pair(0x2111,"BLACK-LETTER CAPITAL I"));
        data.insert(std::make_pair(0x2112,"SCRIPT CAPITAL L"));
        data.insert(std::make_pair(0x2113,"SCRIPT SMALL L"));
        data.insert(std::make_pair(0x2114,"L B BAR SYMBOL"));
        data.insert(std::make_pair(0x2115,"DOUBLE-STRUCK CAPITAL N"));
        data.insert(std::make_pair(0x2116,"NUMERO SIGN"));
        data.insert(std::make_pair(0x2117,"SOUND RECORDING COPYRIGHT"));
        data.insert(std::make_pair(0x2118,"SCRIPT CAPITAL P"));
        data.insert(std::make_pair(0x2119,"DOUBLE-STRUCK CAPITAL P"));
        data.insert(std::make_pair(0x211a,"DOUBLE-STRUCK CAPITAL Q"));
        data.insert(std::make_pair(0x211b,"SCRIPT CAPITAL R"));
        data.insert(std::make_pair(0x211c,"BLACK-LETTER CAPITAL R"));
        data.insert(std::make_pair(0x211d,"DOUBLE-STRUCK CAPITAL R"));
        data.insert(std::make_pair(0x211e,"PRESCRIPTION TAKE"));
        data.insert(std::make_pair(0x211f,"RESPONSE"));
        data.insert(std::make_pair(0x2120,"SERVICE MARK"));
        data.insert(std::make_pair(0x2121,"TELEPHONE SIGN"));
        data.insert(std::make_pair(0x2122,"TRADE MARK SIGN"));
        data.insert(std::make_pair(0x2123,"VERSICLE"));
        data.insert(std::make_pair(0x2124,"DOUBLE-STRUCK CAPITAL Z"));
        data.insert(std::make_pair(0x2125,"OUNCE SIGN"));
        data.insert(std::make_pair(0x2126,"OHM SIGN"));
        data.insert(std::make_pair(0x2127,"INVERTED OHM SIGN"));
        data.insert(std::make_pair(0x2128,"BLACK-LETTER CAPITAL Z"));
        data.insert(std::make_pair(0x2129,"TURNED GREEK SMALL LETTER IOTA"));
        data.insert(std::make_pair(0x212a,"KELVIN SIGN"));
        data.insert(std::make_pair(0x212b,"ANGSTROM SIGN"));
        data.insert(std::make_pair(0x212c,"SCRIPT CAPITAL B"));
        data.insert(std::make_pair(0x212d,"BLACK-LETTER CAPITAL C"));
        data.insert(std::make_pair(0x212e,"ESTIMATED SYMBOL"));
        data.insert(std::make_pair(0x212f,"SCRIPT SMALL E"));
        data.insert(std::make_pair(0x2130,"SCRIPT CAPITAL E"));
        data.insert(std::make_pair(0x2131,"SCRIPT CAPITAL F"));
        data.insert(std::make_pair(0x2132,"TURNED CAPITAL F"));
        data.insert(std::make_pair(0x2133,"SCRIPT CAPITAL M"));
        data.insert(std::make_pair(0x2134,"SCRIPT SMALL O"));
        data.insert(std::make_pair(0x2135,"ALEF SYMBOL"));
        data.insert(std::make_pair(0x2136,"BET SYMBOL"));
        data.insert(std::make_pair(0x2137,"GIMEL SYMBOL"));
        data.insert(std::make_pair(0x2138,"DALET SYMBOL"));
        data.insert(std::make_pair(0x2139,"INFORMATION SOURCE"));
        data.insert(std::make_pair(0x213a,"ROTATED CAPITAL Q"));
        data.insert(std::make_pair(0x213b,"FACSIMILE SIGN"));
        data.insert(std::make_pair(0x213c,"DOUBLE-STRUCK SMALL PI"));
        data.insert(std::make_pair(0x213d,"DOUBLE-STRUCK SMALL GAMMA"));
        data.insert(std::make_pair(0x213e,"DOUBLE-STRUCK CAPITAL GAMMA"));
        data.insert(std::make_pair(0x213f,"DOUBLE-STRUCK CAPITAL PI"));
        data.insert(std::make_pair(0x2140,"DOUBLE-STRUCK N-ARY SUMMATION"));
        data.insert(std::make_pair(0x2141,"TURNED SANS-SERIF CAPITAL G"));
        data.insert(std::make_pair(0x2142,"TURNED SANS-SERIF CAPITAL L"));
        data.insert(std::make_pair(0x2143,"REVERSED SANS-SERIF CAPITAL L"));
        data.insert(std::make_pair(0x2144,"TURNED SANS-SERIF CAPITAL Y"));
        data.insert(std::make_pair(0x2145,"DOUBLE-STRUCK ITALIC CAPITAL D"));
        data.insert(std::make_pair(0x2146,"DOUBLE-STRUCK ITALIC SMALL D"));
        data.insert(std::make_pair(0x2147,"DOUBLE-STRUCK ITALIC SMALL E"));
        data.insert(std::make_pair(0x2148,"DOUBLE-STRUCK ITALIC SMALL I"));
        data.insert(std::make_pair(0x2149,"DOUBLE-STRUCK ITALIC SMALL J"));
        data.insert(std::make_pair(0x214a,"PROPERTY LINE"));
        data.insert(std::make_pair(0x214b,"TURNED AMPERSAND"));
        data.insert(std::make_pair(0x214c,"PER SIGN"));
        data.insert(std::make_pair(0x214d,"AKTIESELSKAB"));
        data.insert(std::make_pair(0x214e,"TURNED SMALL F"));
        data.insert(std::make_pair(0x214f,"SYMBOL FOR SAMARITAN SOURCE"));
        data.insert(std::make_pair(0x2150,"VULGAR FRACTION ONE SEVENTH"));
        data.insert(std::make_pair(0x2151,"VULGAR FRACTION ONE NINTH"));
        data.insert(std::make_pair(0x2152,"VULGAR FRACTION ONE TENTH"));
        data.insert(std::make_pair(0x2153,"VULGAR FRACTION ONE THIRD"));
        data.insert(std::make_pair(0x2154,"VULGAR FRACTION TWO THIRDS"));
        data.insert(std::make_pair(0x2155,"VULGAR FRACTION ONE FIFTH"));
        data.insert(std::make_pair(0x2156,"VULGAR FRACTION TWO FIFTHS"));
        data.insert(std::make_pair(0x2157,"VULGAR FRACTION THREE FIFTHS"));
        data.insert(std::make_pair(0x2158,"VULGAR FRACTION FOUR FIFTHS"));
        data.insert(std::make_pair(0x2159,"VULGAR FRACTION ONE SIXTH"));
        data.insert(std::make_pair(0x215a,"VULGAR FRACTION FIVE SIXTHS"));
        data.insert(std::make_pair(0x215b,"VULGAR FRACTION ONE EIGHTH"));
        data.insert(std::make_pair(0x215c,"VULGAR FRACTION THREE EIGHTHS"));
        data.insert(std::make_pair(0x215d,"VULGAR FRACTION FIVE EIGHTHS"));
        data.insert(std::make_pair(0x215e,"VULGAR FRACTION SEVEN EIGHTHS"));
        data.insert(std::make_pair(0x215f,"FRACTION NUMERATOR ONE"));
        data.insert(std::make_pair(0x2160,"ROMAN NUMERAL ONE"));
        data.insert(std::make_pair(0x2161,"ROMAN NUMERAL TWO"));
        data.insert(std::make_pair(0x2162,"ROMAN NUMERAL THREE"));
        data.insert(std::make_pair(0x2163,"ROMAN NUMERAL FOUR"));
        data.insert(std::make_pair(0x2164,"ROMAN NUMERAL FIVE"));
        data.insert(std::make_pair(0x2165,"ROMAN NUMERAL SIX"));
        data.insert(std::make_pair(0x2166,"ROMAN NUMERAL SEVEN"));
        data.insert(std::make_pair(0x2167,"ROMAN NUMERAL EIGHT"));
        data.insert(std::make_pair(0x2168,"ROMAN NUMERAL NINE"));
        data.insert(std::make_pair(0x2169,"ROMAN NUMERAL TEN"));
        data.insert(std::make_pair(0x216a,"ROMAN NUMERAL ELEVEN"));
        data.insert(std::make_pair(0x216b,"ROMAN NUMERAL TWELVE"));
        data.insert(std::make_pair(0x216c,"ROMAN NUMERAL FIFTY"));
        data.insert(std::make_pair(0x216d,"ROMAN NUMERAL ONE HUNDRED"));
        data.insert(std::make_pair(0x216e,"ROMAN NUMERAL FIVE HUNDRED"));
        data.insert(std::make_pair(0x216f,"ROMAN NUMERAL ONE THOUSAND"));
        data.insert(std::make_pair(0x2170,"SMALL ROMAN NUMERAL ONE"));
        data.insert(std::make_pair(0x2171,"SMALL ROMAN NUMERAL TWO"));
        data.insert(std::make_pair(0x2172,"SMALL ROMAN NUMERAL THREE"));
        data.insert(std::make_pair(0x2173,"SMALL ROMAN NUMERAL FOUR"));
        data.insert(std::make_pair(0x2174,"SMALL ROMAN NUMERAL FIVE"));
        data.insert(std::make_pair(0x2175,"SMALL ROMAN NUMERAL SIX"));
        data.insert(std::make_pair(0x2176,"SMALL ROMAN NUMERAL SEVEN"));
        data.insert(std::make_pair(0x2177,"SMALL ROMAN NUMERAL EIGHT"));
        data.insert(std::make_pair(0x2178,"SMALL ROMAN NUMERAL NINE"));
        data.insert(std::make_pair(0x2179,"SMALL ROMAN NUMERAL TEN"));
        data.insert(std::make_pair(0x217a,"SMALL ROMAN NUMERAL ELEVEN"));
        data.insert(std::make_pair(0x217b,"SMALL ROMAN NUMERAL TWELVE"));
        data.insert(std::make_pair(0x217c,"SMALL ROMAN NUMERAL FIFTY"));
        data.insert(std::make_pair(0x217d,"SMALL ROMAN NUMERAL ONE HUNDRED"));
        data.insert(std::make_pair(0x217e,"SMALL ROMAN NUMERAL FIVE HUNDRED"));
        data.insert(std::make_pair(0x217f,"SMALL ROMAN NUMERAL ONE THOUSAND"));
        data.insert(std::make_pair(0x2180,"ROMAN NUMERAL ONE THOUSAND C D"));
        data.insert(std::make_pair(0x2181,"ROMAN NUMERAL FIVE THOUSAND"));
        data.insert(std::make_pair(0x2182,"ROMAN NUMERAL TEN THOUSAND"));
        data.insert(std::make_pair(0x2183,"ROMAN NUMERAL REVERSED ONE HUNDRED"));
        data.insert(std::make_pair(0x2184,"LATIN SMALL LETTER REVERSED C"));
        data.insert(std::make_pair(0x2185,"ROMAN NUMERAL SIX LATE FORM"));
        data.insert(std::make_pair(0x2186,"ROMAN NUMERAL FIFTY EARLY FORM"));
        data.insert(std::make_pair(0x2187,"ROMAN NUMERAL FIFTY THOUSAND"));
        data.insert(std::make_pair(0x2188,"ROMAN NUMERAL ONE HUNDRED THOUSAND"));
        data.insert(std::make_pair(0x2189,"VULGAR FRACTION ZERO THIRDS"));
        data.insert(std::make_pair(0x218a,"TURNED DIGIT TWO"));
        data.insert(std::make_pair(0x218b,"TURNED DIGIT THREE"));
        data.insert(std::make_pair(0x2190,"LEFTWARDS ARROW"));
        data.insert(std::make_pair(0x2191,"UPWARDS ARROW"));
        data.insert(std::make_pair(0x2192,"RIGHTWARDS ARROW"));
        data.insert(std::make_pair(0x2193,"DOWNWARDS ARROW"));
        data.insert(std::make_pair(0x2194,"LEFT RIGHT ARROW"));
        data.insert(std::make_pair(0x2195,"UP DOWN ARROW"));
        data.insert(std::make_pair(0x2196,"NORTH WEST ARROW"));
        data.insert(std::make_pair(0x2197,"NORTH EAST ARROW"));
        data.insert(std::make_pair(0x2198,"SOUTH EAST ARROW"));
        data.insert(std::make_pair(0x2199,"SOUTH WEST ARROW"));
        data.insert(std::make_pair(0x219a,"LEFTWARDS ARROW WITH STROKE"));
        data.insert(std::make_pair(0x219b,"RIGHTWARDS ARROW WITH STROKE"));
        data.insert(std::make_pair(0x219c,"LEFTWARDS WAVE ARROW"));
        data.insert(std::make_pair(0x219d,"RIGHTWARDS WAVE ARROW"));
        data.insert(std::make_pair(0x219e,"LEFTWARDS TWO HEADED ARROW"));
        data.insert(std::make_pair(0x219f,"UPWARDS TWO HEADED ARROW"));
        data.insert(std::make_pair(0x21a0,"RIGHTWARDS TWO HEADED ARROW"));
        data.insert(std::make_pair(0x21a1,"DOWNWARDS TWO HEADED ARROW"));
        data.insert(std::make_pair(0x21a2,"LEFTWARDS ARROW WITH TAIL"));
        data.insert(std::make_pair(0x21a3,"RIGHTWARDS ARROW WITH TAIL"));
        data.insert(std::make_pair(0x21a4,"LEFTWARDS ARROW FROM BAR"));
        data.insert(std::make_pair(0x21a5,"UPWARDS ARROW FROM BAR"));
        data.insert(std::make_pair(0x21a6,"RIGHTWARDS ARROW FROM BAR"));
        data.insert(std::make_pair(0x21a7,"DOWNWARDS ARROW FROM BAR"));
        data.insert(std::make_pair(0x21a8,"UP DOWN ARROW WITH BASE"));
        data.insert(std::make_pair(0x21a9,"LEFTWARDS ARROW WITH HOOK"));
        data.insert(std::make_pair(0x21aa,"RIGHTWARDS ARROW WITH HOOK"));
        data.insert(std::make_pair(0x21ab,"LEFTWARDS ARROW WITH LOOP"));
        data.insert(std::make_pair(0x21ac,"RIGHTWARDS ARROW WITH LOOP"));
        data.insert(std::make_pair(0x21ad,"LEFT RIGHT WAVE ARROW"));
        data.insert(std::make_pair(0x21ae,"LEFT RIGHT ARROW WITH STROKE"));
        data.insert(std::make_pair(0x21af,"DOWNWARDS ZIGZAG ARROW"));
        data.insert(std::make_pair(0x21b0,"UPWARDS ARROW WITH TIP LEFTWARDS"));
        data.insert(std::make_pair(0x21b1,"UPWARDS ARROW WITH TIP RIGHTWARDS"));
        data.insert(std::make_pair(0x21b2,"DOWNWARDS ARROW WITH TIP LEFTWARDS"));
        data.insert(std::make_pair(0x21b3,"DOWNWARDS ARROW WITH TIP RIGHTWARDS"));
        data.insert(std::make_pair(0x21b4,"RIGHTWARDS ARROW WITH CORNER DOWNWARDS"));
        data.insert(std::make_pair(0x21b5,"DOWNWARDS ARROW WITH CORNER LEFTWARDS"));
        data.insert(std::make_pair(0x21b6,"ANTICLOCKWISE TOP SEMICIRCLE ARROW"));
        data.insert(std::make_pair(0x21b7,"CLOCKWISE TOP SEMICIRCLE ARROW"));
        data.insert(std::make_pair(0x21b8,"NORTH WEST ARROW TO LONG BAR"));
        data.insert(std::make_pair(0x21b9,"LEFTWARDS ARROW TO BAR OVER RIGHTWARDS ARROW TO BAR"));
        data.insert(std::make_pair(0x21ba,"ANTICLOCKWISE OPEN CIRCLE ARROW"));
        data.insert(std::make_pair(0x21bb,"CLOCKWISE OPEN CIRCLE ARROW"));
        data.insert(std::make_pair(0x21bc,"LEFTWARDS HARPOON WITH BARB UPWARDS"));
        data.insert(std::make_pair(0x21bd,"LEFTWARDS HARPOON WITH BARB DOWNWARDS"));
        data.insert(std::make_pair(0x21be,"UPWARDS HARPOON WITH BARB RIGHTWARDS"));
        data.insert(std::make_pair(0x21bf,"UPWARDS HARPOON WITH BARB LEFTWARDS"));
        data.insert(std::make_pair(0x21c0,"RIGHTWARDS HARPOON WITH BARB UPWARDS"));
        data.insert(std::make_pair(0x21c1,"RIGHTWARDS HARPOON WITH BARB DOWNWARDS"));
        data.insert(std::make_pair(0x21c2,"DOWNWARDS HARPOON WITH BARB RIGHTWARDS"));
        data.insert(std::make_pair(0x21c3,"DOWNWARDS HARPOON WITH BARB LEFTWARDS"));
        data.insert(std::make_pair(0x21c4,"RIGHTWARDS ARROW OVER LEFTWARDS ARROW"));
        data.insert(std::make_pair(0x21c5,"UPWARDS ARROW LEFTWARDS OF DOWNWARDS ARROW"));
        data.insert(std::make_pair(0x21c6,"LEFTWARDS ARROW OVER RIGHTWARDS ARROW"));
        data.insert(std::make_pair(0x21c7,"LEFTWARDS PAIRED ARROWS"));
        data.insert(std::make_pair(0x21c8,"UPWARDS PAIRED ARROWS"));
        data.insert(std::make_pair(0x21c9,"RIGHTWARDS PAIRED ARROWS"));
        data.insert(std::make_pair(0x21ca,"DOWNWARDS PAIRED ARROWS"));
        data.insert(std::make_pair(0x21cb,"LEFTWARDS HARPOON OVER RIGHTWARDS HARPOON"));
        data.insert(std::make_pair(0x21cc,"RIGHTWARDS HARPOON OVER LEFTWARDS HARPOON"));
        data.insert(std::make_pair(0x21cd,"LEFTWARDS DOUBLE ARROW WITH STROKE"));
        data.insert(std::make_pair(0x21ce,"LEFT RIGHT DOUBLE ARROW WITH STROKE"));
        data.insert(std::make_pair(0x21cf,"RIGHTWARDS DOUBLE ARROW WITH STROKE"));
        data.insert(std::make_pair(0x21d0,"LEFTWARDS DOUBLE ARROW"));
        data.insert(std::make_pair(0x21d1,"UPWARDS DOUBLE ARROW"));
        data.insert(std::make_pair(0x21d2,"RIGHTWARDS DOUBLE ARROW"));
        data.insert(std::make_pair(0x21d3,"DOWNWARDS DOUBLE ARROW"));
        data.insert(std::make_pair(0x21d4,"LEFT RIGHT DOUBLE ARROW"));
        data.insert(std::make_pair(0x21d5,"UP DOWN DOUBLE ARROW"));
        data.insert(std::make_pair(0x21d6,"NORTH WEST DOUBLE ARROW"));
        data.insert(std::make_pair(0x21d7,"NORTH EAST DOUBLE ARROW"));
        data.insert(std::make_pair(0x21d8,"SOUTH EAST DOUBLE ARROW"));
        data.insert(std::make_pair(0x21d9,"SOUTH WEST DOUBLE ARROW"));
        data.insert(std::make_pair(0x21da,"LEFTWARDS TRIPLE ARROW"));
        data.insert(std::make_pair(0x21db,"RIGHTWARDS TRIPLE ARROW"));
        data.insert(std::make_pair(0x21dc,"LEFTWARDS SQUIGGLE ARROW"));
        data.insert(std::make_pair(0x21dd,"RIGHTWARDS SQUIGGLE ARROW"));
        data.insert(std::make_pair(0x21de,"UPWARDS ARROW WITH DOUBLE STROKE"));
        data.insert(std::make_pair(0x21df,"DOWNWARDS ARROW WITH DOUBLE STROKE"));
        data.insert(std::make_pair(0x21e0,"LEFTWARDS DASHED ARROW"));
        data.insert(std::make_pair(0x21e1,"UPWARDS DASHED ARROW"));
        data.insert(std::make_pair(0x21e2,"RIGHTWARDS DASHED ARROW"));
        data.insert(std::make_pair(0x21e3,"DOWNWARDS DASHED ARROW"));
        data.insert(std::make_pair(0x21e4,"LEFTWARDS ARROW TO BAR"));
        data.insert(std::make_pair(0x21e5,"RIGHTWARDS ARROW TO BAR"));
        data.insert(std::make_pair(0x21e6,"LEFTWARDS WHITE ARROW"));
        data.insert(std::make_pair(0x21e7,"UPWARDS WHITE ARROW"));
        data.insert(std::make_pair(0x21e8,"RIGHTWARDS WHITE ARROW"));
        data.insert(std::make_pair(0x21e9,"DOWNWARDS WHITE ARROW"));
        data.insert(std::make_pair(0x21ea,"UPWARDS WHITE ARROW FROM BAR"));
        data.insert(std::make_pair(0x21eb,"UPWARDS WHITE ARROW ON PEDESTAL"));
        data.insert(std::make_pair(0x21ec,"UPWARDS WHITE ARROW ON PEDESTAL WITH HORIZONTAL BAR"));
        data.insert(std::make_pair(0x21ed,"UPWARDS WHITE ARROW ON PEDESTAL WITH VERTICAL BAR"));
        data.insert(std::make_pair(0x21ee,"UPWARDS WHITE DOUBLE ARROW"));
        data.insert(std::make_pair(0x21ef,"UPWARDS WHITE DOUBLE ARROW ON PEDESTAL"));
        data.insert(std::make_pair(0x21f0,"RIGHTWARDS WHITE ARROW FROM WALL"));
        data.insert(std::make_pair(0x21f1,"NORTH WEST ARROW TO CORNER"));
        data.insert(std::make_pair(0x21f2,"SOUTH EAST ARROW TO CORNER"));
        data.insert(std::make_pair(0x21f3,"UP DOWN WHITE ARROW"));
        data.insert(std::make_pair(0x21f4,"RIGHT ARROW WITH SMALL CIRCLE"));
        data.insert(std::make_pair(0x21f5,"DOWNWARDS ARROW LEFTWARDS OF UPWARDS ARROW"));
        data.insert(std::make_pair(0x21f6,"THREE RIGHTWARDS ARROWS"));
        data.insert(std::make_pair(0x21f7,"LEFTWARDS ARROW WITH VERTICAL STROKE"));
        data.insert(std::make_pair(0x21f8,"RIGHTWARDS ARROW WITH VERTICAL STROKE"));
        data.insert(std::make_pair(0x21f9,"LEFT RIGHT ARROW WITH VERTICAL STROKE"));
        data.insert(std::make_pair(0x21fa,"LEFTWARDS ARROW WITH DOUBLE VERTICAL STROKE"));
        data.insert(std::make_pair(0x21fb,"RIGHTWARDS ARROW WITH DOUBLE VERTICAL STROKE"));
        data.insert(std::make_pair(0x21fc,"LEFT RIGHT ARROW WITH DOUBLE VERTICAL STROKE"));
        data.insert(std::make_pair(0x21fd,"LEFTWARDS OPEN-HEADED ARROW"));
        data.insert(std::make_pair(0x21fe,"RIGHTWARDS OPEN-HEADED ARROW"));
        data.insert(std::make_pair(0x21ff,"LEFT RIGHT OPEN-HEADED ARROW"));
        data.insert(std::make_pair(0x2200,"FOR ALL"));
        data.insert(std::make_pair(0x2201,"COMPLEMENT"));
        data.insert(std::make_pair(0x2202,"PARTIAL DIFFERENTIAL"));
        data.insert(std::make_pair(0x2203,"THERE EXISTS"));
        data.insert(std::make_pair(0x2204,"THERE DOES NOT EXIST"));
        data.insert(std::make_pair(0x2205,"EMPTY SET"));
        data.insert(std::make_pair(0x2206,"INCREMENT"));
        data.insert(std::make_pair(0x2207,"NABLA"));
        data.insert(std::make_pair(0x2208,"ELEMENT OF"));
        data.insert(std::make_pair(0x2209,"NOT AN ELEMENT OF"));
        data.insert(std::make_pair(0x220a,"SMALL ELEMENT OF"));
        data.insert(std::make_pair(0x220b,"CONTAINS AS MEMBER"));
        data.insert(std::make_pair(0x220c,"DOES NOT CONTAIN AS MEMBER"));
        data.insert(std::make_pair(0x220d,"SMALL CONTAINS AS MEMBER"));
        data.insert(std::make_pair(0x220e,"END OF PROOF"));
        data.insert(std::make_pair(0x220f,"N-ARY PRODUCT"));
        data.insert(std::make_pair(0x2210,"N-ARY COPRODUCT"));
        data.insert(std::make_pair(0x2211,"N-ARY SUMMATION"));
        data.insert(std::make_pair(0x2212,"MINUS SIGN"));
        data.insert(std::make_pair(0x2213,"MINUS-OR-PLUS SIGN"));
        data.insert(std::make_pair(0x2214,"DOT PLUS"));
        data.insert(std::make_pair(0x2215,"DIVISION SLASH"));
        data.insert(std::make_pair(0x2216,"SET MINUS"));
        data.insert(std::make_pair(0x2217,"ASTERISK OPERATOR"));
        data.insert(std::make_pair(0x2218,"RING OPERATOR"));
        data.insert(std::make_pair(0x2219,"BULLET OPERATOR"));
        data.insert(std::make_pair(0x221a,"SQUARE ROOT"));
        data.insert(std::make_pair(0x221b,"CUBE ROOT"));
        data.insert(std::make_pair(0x221c,"FOURTH ROOT"));
        data.insert(std::make_pair(0x221d,"PROPORTIONAL TO"));
        data.insert(std::make_pair(0x221e,"INFINITY"));
        data.insert(std::make_pair(0x221f,"RIGHT ANGLE"));
        data.insert(std::make_pair(0x2220,"ANGLE"));
        data.insert(std::make_pair(0x2221,"MEASURED ANGLE"));
        data.insert(std::make_pair(0x2222,"SPHERICAL ANGLE"));
        data.insert(std::make_pair(0x2223,"DIVIDES"));
        data.insert(std::make_pair(0x2224,"DOES NOT DIVIDE"));
        data.insert(std::make_pair(0x2225,"PARALLEL TO"));
        data.insert(std::make_pair(0x2226,"NOT PARALLEL TO"));
        data.insert(std::make_pair(0x2227,"LOGICAL AND"));
        data.insert(std::make_pair(0x2228,"LOGICAL OR"));
        data.insert(std::make_pair(0x2229,"INTERSECTION"));
        data.insert(std::make_pair(0x222a,"UNION"));
        data.insert(std::make_pair(0x222b,"INTEGRAL"));
        data.insert(std::make_pair(0x222c,"DOUBLE INTEGRAL"));
        data.insert(std::make_pair(0x222d,"TRIPLE INTEGRAL"));
        data.insert(std::make_pair(0x222e,"CONTOUR INTEGRAL"));
        data.insert(std::make_pair(0x222f,"SURFACE INTEGRAL"));
        data.insert(std::make_pair(0x2230,"VOLUME INTEGRAL"));
        data.insert(std::make_pair(0x2231,"CLOCKWISE INTEGRAL"));
        data.insert(std::make_pair(0x2232,"CLOCKWISE CONTOUR INTEGRAL"));
        data.insert(std::make_pair(0x2233,"ANTICLOCKWISE CONTOUR INTEGRAL"));
        data.insert(std::make_pair(0x2234,"THEREFORE"));
        data.insert(std::make_pair(0x2235,"BECAUSE"));
        data.insert(std::make_pair(0x2236,"RATIO"));
        data.insert(std::make_pair(0x2237,"PROPORTION"));
        data.insert(std::make_pair(0x2238,"DOT MINUS"));
        data.insert(std::make_pair(0x2239,"EXCESS"));
        data.insert(std::make_pair(0x223a,"GEOMETRIC PROPORTION"));
        data.insert(std::make_pair(0x223b,"HOMOTHETIC"));
        data.insert(std::make_pair(0x223c,"TILDE OPERATOR"));
        data.insert(std::make_pair(0x223d,"REVERSED TILDE"));
        data.insert(std::make_pair(0x223e,"INVERTED LAZY S"));
        data.insert(std::make_pair(0x223f,"SINE WAVE"));
        data.insert(std::make_pair(0x2240,"WREATH PRODUCT"));
        data.insert(std::make_pair(0x2241,"NOT TILDE"));
        data.insert(std::make_pair(0x2242,"MINUS TILDE"));
        data.insert(std::make_pair(0x2243,"ASYMPTOTICALLY EQUAL TO"));
        data.insert(std::make_pair(0x2244,"NOT ASYMPTOTICALLY EQUAL TO"));
        data.insert(std::make_pair(0x2245,"APPROXIMATELY EQUAL TO"));
        data.insert(std::make_pair(0x2246,"APPROXIMATELY BUT NOT ACTUALLY EQUAL TO"));
        data.insert(std::make_pair(0x2247,"NEITHER APPROXIMATELY NOR ACTUALLY EQUAL TO"));
        data.insert(std::make_pair(0x2248,"ALMOST EQUAL TO"));
        data.insert(std::make_pair(0x2249,"NOT ALMOST EQUAL TO"));
        data.insert(std::make_pair(0x224a,"ALMOST EQUAL OR EQUAL TO"));
        data.insert(std::make_pair(0x224b,"TRIPLE TILDE"));
        data.insert(std::make_pair(0x224c,"ALL EQUAL TO"));
        data.insert(std::make_pair(0x224d,"EQUIVALENT TO"));
        data.insert(std::make_pair(0x224e,"GEOMETRICALLY EQUIVALENT TO"));
        data.insert(std::make_pair(0x224f,"DIFFERENCE BETWEEN"));
        data.insert(std::make_pair(0x2250,"APPROACHES THE LIMIT"));
        data.insert(std::make_pair(0x2251,"GEOMETRICALLY EQUAL TO"));
        data.insert(std::make_pair(0x2252,"APPROXIMATELY EQUAL TO OR THE IMAGE OF"));
        data.insert(std::make_pair(0x2253,"IMAGE OF OR APPROXIMATELY EQUAL TO"));
        data.insert(std::make_pair(0x2254,"COLON EQUALS"));
        data.insert(std::make_pair(0x2255,"EQUALS COLON"));
        data.insert(std::make_pair(0x2256,"RING IN EQUAL TO"));
        data.insert(std::make_pair(0x2257,"RING EQUAL TO"));
        data.insert(std::make_pair(0x2258,"CORRESPONDS TO"));
        data.insert(std::make_pair(0x2259,"ESTIMATES"));
        data.insert(std::make_pair(0x225a,"EQUIANGULAR TO"));
        data.insert(std::make_pair(0x225b,"STAR EQUALS"));
        data.insert(std::make_pair(0x225c,"DELTA EQUAL TO"));
        data.insert(std::make_pair(0x225d,"EQUAL TO BY DEFINITION"));
        data.insert(std::make_pair(0x225e,"MEASURED BY"));
        data.insert(std::make_pair(0x225f,"QUESTIONED EQUAL TO"));
        data.insert(std::make_pair(0x2260,"NOT EQUAL TO"));
        data.insert(std::make_pair(0x2261,"IDENTICAL TO"));
        data.insert(std::make_pair(0x2262,"NOT IDENTICAL TO"));
        data.insert(std::make_pair(0x2263,"STRICTLY EQUIVALENT TO"));
        data.insert(std::make_pair(0x2264,"LESS-THAN OR EQUAL TO"));
        data.insert(std::make_pair(0x2265,"GREATER-THAN OR EQUAL TO"));
        data.insert(std::make_pair(0x2266,"LESS-THAN OVER EQUAL TO"));
        data.insert(std::make_pair(0x2267,"GREATER-THAN OVER EQUAL TO"));
        data.insert(std::make_pair(0x2268,"LESS-THAN BUT NOT EQUAL TO"));
        data.insert(std::make_pair(0x2269,"GREATER-THAN BUT NOT EQUAL TO"));
        data.insert(std::make_pair(0x226a,"MUCH LESS-THAN"));
        data.insert(std::make_pair(0x226b,"MUCH GREATER-THAN"));
        data.insert(std::make_pair(0x226c,"BETWEEN"));
        data.insert(std::make_pair(0x226d,"NOT EQUIVALENT TO"));
        data.insert(std::make_pair(0x226e,"NOT LESS-THAN"));
        data.insert(std::make_pair(0x226f,"NOT GREATER-THAN"));
        data.insert(std::make_pair(0x2270,"NEITHER LESS-THAN NOR EQUAL TO"));
        data.insert(std::make_pair(0x2271,"NEITHER GREATER-THAN NOR EQUAL TO"));
        data.insert(std::make_pair(0x2272,"LESS-THAN OR EQUIVALENT TO"));
        data.insert(std::make_pair(0x2273,"GREATER-THAN OR EQUIVALENT TO"));
        data.insert(std::make_pair(0x2274,"NEITHER LESS-THAN NOR EQUIVALENT TO"));
        data.insert(std::make_pair(0x2275,"NEITHER GREATER-THAN NOR EQUIVALENT TO"));
        data.insert(std::make_pair(0x2276,"LESS-THAN OR GREATER-THAN"));
        data.insert(std::make_pair(0x2277,"GREATER-THAN OR LESS-THAN"));
        data.insert(std::make_pair(0x2278,"NEITHER LESS-THAN NOR GREATER-THAN"));
        data.insert(std::make_pair(0x2279,"NEITHER GREATER-THAN NOR LESS-THAN"));
        data.insert(std::make_pair(0x227a,"PRECEDES"));
        data.insert(std::make_pair(0x227b,"SUCCEEDS"));
        data.insert(std::make_pair(0x227c,"PRECEDES OR EQUAL TO"));
        data.insert(std::make_pair(0x227d,"SUCCEEDS OR EQUAL TO"));
        data.insert(std::make_pair(0x227e,"PRECEDES OR EQUIVALENT TO"));
        data.insert(std::make_pair(0x227f,"SUCCEEDS OR EQUIVALENT TO"));
        data.insert(std::make_pair(0x2280,"DOES NOT PRECEDE"));
        data.insert(std::make_pair(0x2281,"DOES NOT SUCCEED"));
        data.insert(std::make_pair(0x2282,"SUBSET OF"));
        data.insert(std::make_pair(0x2283,"SUPERSET OF"));
        data.insert(std::make_pair(0x2284,"NOT A SUBSET OF"));
        data.insert(std::make_pair(0x2285,"NOT A SUPERSET OF"));
        data.insert(std::make_pair(0x2286,"SUBSET OF OR EQUAL TO"));
        data.insert(std::make_pair(0x2287,"SUPERSET OF OR EQUAL TO"));
        data.insert(std::make_pair(0x2288,"NEITHER A SUBSET OF NOR EQUAL TO"));
        data.insert(std::make_pair(0x2289,"NEITHER A SUPERSET OF NOR EQUAL TO"));
        data.insert(std::make_pair(0x228a,"SUBSET OF WITH NOT EQUAL TO"));
        data.insert(std::make_pair(0x228b,"SUPERSET OF WITH NOT EQUAL TO"));
        data.insert(std::make_pair(0x228c,"MULTISET"));
        data.insert(std::make_pair(0x228d,"MULTISET MULTIPLICATION"));
        data.insert(std::make_pair(0x228e,"MULTISET UNION"));
        data.insert(std::make_pair(0x228f,"SQUARE IMAGE OF"));
        data.insert(std::make_pair(0x2290,"SQUARE ORIGINAL OF"));
        data.insert(std::make_pair(0x2291,"SQUARE IMAGE OF OR EQUAL TO"));
        data.insert(std::make_pair(0x2292,"SQUARE ORIGINAL OF OR EQUAL TO"));
        data.insert(std::make_pair(0x2293,"SQUARE CAP"));
        data.insert(std::make_pair(0x2294,"SQUARE CUP"));
        data.insert(std::make_pair(0x2295,"CIRCLED PLUS"));
        data.insert(std::make_pair(0x2296,"CIRCLED MINUS"));
        data.insert(std::make_pair(0x2297,"CIRCLED TIMES"));
        data.insert(std::make_pair(0x2298,"CIRCLED DIVISION SLASH"));
        data.insert(std::make_pair(0x2299,"CIRCLED DOT OPERATOR"));
        data.insert(std::make_pair(0x229a,"CIRCLED RING OPERATOR"));
        data.insert(std::make_pair(0x229b,"CIRCLED ASTERISK OPERATOR"));
        data.insert(std::make_pair(0x229c,"CIRCLED EQUALS"));
        data.insert(std::make_pair(0x229d,"CIRCLED DASH"));
        data.insert(std::make_pair(0x229e,"SQUARED PLUS"));
        data.insert(std::make_pair(0x229f,"SQUARED MINUS"));
        data.insert(std::make_pair(0x22a0,"SQUARED TIMES"));
        data.insert(std::make_pair(0x22a1,"SQUARED DOT OPERATOR"));
        data.insert(std::make_pair(0x22a2,"RIGHT TACK"));
        data.insert(std::make_pair(0x22a3,"LEFT TACK"));
        data.insert(std::make_pair(0x22a4,"DOWN TACK"));
        data.insert(std::make_pair(0x22a5,"UP TACK"));
        data.insert(std::make_pair(0x22a6,"ASSERTION"));
        data.insert(std::make_pair(0x22a7,"MODELS"));
        data.insert(std::make_pair(0x22a8,"TRUE"));
        data.insert(std::make_pair(0x22a9,"FORCES"));
        data.insert(std::make_pair(0x22aa,"TRIPLE VERTICAL BAR RIGHT TURNSTILE"));
        data.insert(std::make_pair(0x22ab,"DOUBLE VERTICAL BAR DOUBLE RIGHT TURNSTILE"));
        data.insert(std::make_pair(0x22ac,"DOES NOT PROVE"));
        data.insert(std::make_pair(0x22ad,"NOT TRUE"));
        data.insert(std::make_pair(0x22ae,"DOES NOT FORCE"));
        data.insert(std::make_pair(0x22af,"NEGATED DOUBLE VERTICAL BAR DOUBLE RIGHT TURNSTILE"));
        data.insert(std::make_pair(0x22b0,"PRECEDES UNDER RELATION"));
        data.insert(std::make_pair(0x22b1,"SUCCEEDS UNDER RELATION"));
        data.insert(std::make_pair(0x22b2,"NORMAL SUBGROUP OF"));
        data.insert(std::make_pair(0x22b3,"CONTAINS AS NORMAL SUBGROUP"));
        data.insert(std::make_pair(0x22b4,"NORMAL SUBGROUP OF OR EQUAL TO"));
        data.insert(std::make_pair(0x22b5,"CONTAINS AS NORMAL SUBGROUP OR EQUAL TO"));
        data.insert(std::make_pair(0x22b6,"ORIGINAL OF"));
        data.insert(std::make_pair(0x22b7,"IMAGE OF"));
        data.insert(std::make_pair(0x22b8,"MULTIMAP"));
        data.insert(std::make_pair(0x22b9,"HERMITIAN CONJUGATE MATRIX"));
        data.insert(std::make_pair(0x22ba,"INTERCALATE"));
        data.insert(std::make_pair(0x22bb,"XOR"));
        data.insert(std::make_pair(0x22bc,"NAND"));
        data.insert(std::make_pair(0x22bd,"NOR"));
        data.insert(std::make_pair(0x22be,"RIGHT ANGLE WITH ARC"));
        data.insert(std::make_pair(0x22bf,"RIGHT TRIANGLE"));
        data.insert(std::make_pair(0x22c0,"N-ARY LOGICAL AND"));
        data.insert(std::make_pair(0x22c1,"N-ARY LOGICAL OR"));
        data.insert(std::make_pair(0x22c2,"N-ARY INTERSECTION"));
        data.insert(std::make_pair(0x22c3,"N-ARY UNION"));
        data.insert(std::make_pair(0x22c4,"DIAMOND OPERATOR"));
        data.insert(std::make_pair(0x22c5,"DOT OPERATOR"));
        data.insert(std::make_pair(0x22c6,"STAR OPERATOR"));
        data.insert(std::make_pair(0x22c7,"DIVISION TIMES"));
        data.insert(std::make_pair(0x22c8,"BOWTIE"));
        data.insert(std::make_pair(0x22c9,"LEFT NORMAL FACTOR SEMIDIRECT PRODUCT"));
        data.insert(std::make_pair(0x22ca,"RIGHT NORMAL FACTOR SEMIDIRECT PRODUCT"));
        data.insert(std::make_pair(0x22cb,"LEFT SEMIDIRECT PRODUCT"));
        data.insert(std::make_pair(0x22cc,"RIGHT SEMIDIRECT PRODUCT"));
        data.insert(std::make_pair(0x22cd,"REVERSED TILDE EQUALS"));
        data.insert(std::make_pair(0x22ce,"CURLY LOGICAL OR"));
        data.insert(std::make_pair(0x22cf,"CURLY LOGICAL AND"));
        data.insert(std::make_pair(0x22d0,"DOUBLE SUBSET"));
        data.insert(std::make_pair(0x22d1,"DOUBLE SUPERSET"));
        data.insert(std::make_pair(0x22d2,"DOUBLE INTERSECTION"));
        data.insert(std::make_pair(0x22d3,"DOUBLE UNION"));
        data.insert(std::make_pair(0x22d4,"PITCHFORK"));
        data.insert(std::make_pair(0x22d5,"EQUAL AND PARALLEL TO"));
        data.insert(std::make_pair(0x22d6,"LESS-THAN WITH DOT"));
        data.insert(std::make_pair(0x22d7,"GREATER-THAN WITH DOT"));
        data.insert(std::make_pair(0x22d8,"VERY MUCH LESS-THAN"));
        data.insert(std::make_pair(0x22d9,"VERY MUCH GREATER-THAN"));
        data.insert(std::make_pair(0x22da,"LESS-THAN EQUAL TO OR GREATER-THAN"));
        data.insert(std::make_pair(0x22db,"GREATER-THAN EQUAL TO OR LESS-THAN"));
        data.insert(std::make_pair(0x22dc,"EQUAL TO OR LESS-THAN"));
        data.insert(std::make_pair(0x22dd,"EQUAL TO OR GREATER-THAN"));
        data.insert(std::make_pair(0x22de,"EQUAL TO OR PRECEDES"));
        data.insert(std::make_pair(0x22df,"EQUAL TO OR SUCCEEDS"));
        data.insert(std::make_pair(0x22e0,"DOES NOT PRECEDE OR EQUAL"));
        data.insert(std::make_pair(0x22e1,"DOES NOT SUCCEED OR EQUAL"));
        data.insert(std::make_pair(0x22e2,"NOT SQUARE IMAGE OF OR EQUAL TO"));
        data.insert(std::make_pair(0x22e3,"NOT SQUARE ORIGINAL OF OR EQUAL TO"));
        data.insert(std::make_pair(0x22e4,"SQUARE IMAGE OF OR NOT EQUAL TO"));
        data.insert(std::make_pair(0x22e5,"SQUARE ORIGINAL OF OR NOT EQUAL TO"));
        data.insert(std::make_pair(0x22e6,"LESS-THAN BUT NOT EQUIVALENT TO"));
        data.insert(std::make_pair(0x22e7,"GREATER-THAN BUT NOT EQUIVALENT TO"));
        data.insert(std::make_pair(0x22e8,"PRECEDES BUT NOT EQUIVALENT TO"));
        data.insert(std::make_pair(0x22e9,"SUCCEEDS BUT NOT EQUIVALENT TO"));
        data.insert(std::make_pair(0x22ea,"NOT NORMAL SUBGROUP OF"));
        data.insert(std::make_pair(0x22eb,"DOES NOT CONTAIN AS NORMAL SUBGROUP"));
        data.insert(std::make_pair(0x22ec,"NOT NORMAL SUBGROUP OF OR EQUAL TO"));
        data.insert(std::make_pair(0x22ed,"DOES NOT CONTAIN AS NORMAL SUBGROUP OR EQUAL"));
        data.insert(std::make_pair(0x22ee,"VERTICAL ELLIPSIS"));
        data.insert(std::make_pair(0x22ef,"MIDLINE HORIZONTAL ELLIPSIS"));
        data.insert(std::make_pair(0x22f0,"UP RIGHT DIAGONAL ELLIPSIS"));
        data.insert(std::make_pair(0x22f1,"DOWN RIGHT DIAGONAL ELLIPSIS"));
        data.insert(std::make_pair(0x22f2,"ELEMENT OF WITH LONG HORIZONTAL STROKE"));
        data.insert(std::make_pair(0x22f3,"ELEMENT OF WITH VERTICAL BAR AT END OF HORIZONTAL STROKE"));
        data.insert(std::make_pair(0x22f4,"SMALL ELEMENT OF WITH VERTICAL BAR AT END OF HORIZONTAL STROKE"));
        data.insert(std::make_pair(0x22f5,"ELEMENT OF WITH DOT ABOVE"));
        data.insert(std::make_pair(0x22f6,"ELEMENT OF WITH OVERBAR"));
        data.insert(std::make_pair(0x22f7,"SMALL ELEMENT OF WITH OVERBAR"));
        data.insert(std::make_pair(0x22f8,"ELEMENT OF WITH UNDERBAR"));
        data.insert(std::make_pair(0x22f9,"ELEMENT OF WITH TWO HORIZONTAL STROKES"));
        data.insert(std::make_pair(0x22fa,"CONTAINS WITH LONG HORIZONTAL STROKE"));
        data.insert(std::make_pair(0x22fb,"CONTAINS WITH VERTICAL BAR AT END OF HORIZONTAL STROKE"));
        data.insert(std::make_pair(0x22fc,"SMALL CONTAINS WITH VERTICAL BAR AT END OF HORIZONTAL STROKE"));
        data.insert(std::make_pair(0x22fd,"CONTAINS WITH OVERBAR"));
        data.insert(std::make_pair(0x22fe,"SMALL CONTAINS WITH OVERBAR"));
        data.insert(std::make_pair(0x22ff,"Z NOTATION BAG MEMBERSHIP"));
        data.insert(std::make_pair(0x2300,"DIAMETER SIGN"));
        data.insert(std::make_pair(0x2301,"ELECTRIC ARROW"));
        data.insert(std::make_pair(0x2302,"HOUSE"));
        data.insert(std::make_pair(0x2303,"UP ARROWHEAD"));
        data.insert(std::make_pair(0x2304,"DOWN ARROWHEAD"));
        data.insert(std::make_pair(0x2305,"PROJECTIVE"));
        data.insert(std::make_pair(0x2306,"PERSPECTIVE"));
        data.insert(std::make_pair(0x2307,"WAVY LINE"));
        data.insert(std::make_pair(0x2308,"LEFT CEILING"));
        data.insert(std::make_pair(0x2309,"RIGHT CEILING"));
        data.insert(std::make_pair(0x230a,"LEFT FLOOR"));
        data.insert(std::make_pair(0x230b,"RIGHT FLOOR"));
        data.insert(std::make_pair(0x230c,"BOTTOM RIGHT CROP"));
        data.insert(std::make_pair(0x230d,"BOTTOM LEFT CROP"));
        data.insert(std::make_pair(0x230e,"TOP RIGHT CROP"));
        data.insert(std::make_pair(0x230f,"TOP LEFT CROP"));
        data.insert(std::make_pair(0x2310,"REVERSED NOT SIGN"));
        data.insert(std::make_pair(0x2311,"SQUARE LOZENGE"));
        data.insert(std::make_pair(0x2312,"ARC"));
        data.insert(std::make_pair(0x2313,"SEGMENT"));
        data.insert(std::make_pair(0x2314,"SECTOR"));
        data.insert(std::make_pair(0x2315,"TELEPHONE RECORDER"));
        data.insert(std::make_pair(0x2316,"POSITION INDICATOR"));
        data.insert(std::make_pair(0x2317,"VIEWDATA SQUARE"));
        data.insert(std::make_pair(0x2318,"PLACE OF INTEREST SIGN"));
        data.insert(std::make_pair(0x2319,"TURNED NOT SIGN"));
        data.insert(std::make_pair(0x231a,"WATCH"));
        data.insert(std::make_pair(0x231b,"HOURGLASS"));
        data.insert(std::make_pair(0x231c,"TOP LEFT CORNER"));
        data.insert(std::make_pair(0x231d,"TOP RIGHT CORNER"));
        data.insert(std::make_pair(0x231e,"BOTTOM LEFT CORNER"));
        data.insert(std::make_pair(0x231f,"BOTTOM RIGHT CORNER"));
        data.insert(std::make_pair(0x2320,"TOP HALF INTEGRAL"));
        data.insert(std::make_pair(0x2321,"BOTTOM HALF INTEGRAL"));
        data.insert(std::make_pair(0x2322,"FROWN"));
        data.insert(std::make_pair(0x2323,"SMILE"));
        data.insert(std::make_pair(0x2324,"UP ARROWHEAD BETWEEN TWO HORIZONTAL BARS"));
        data.insert(std::make_pair(0x2325,"OPTION KEY"));
        data.insert(std::make_pair(0x2326,"ERASE TO THE RIGHT"));
        data.insert(std::make_pair(0x2327,"X IN A RECTANGLE BOX"));
        data.insert(std::make_pair(0x2328,"KEYBOARD"));
        data.insert(std::make_pair(0x2329,"LEFT-POINTING ANGLE BRACKET"));
        data.insert(std::make_pair(0x232a,"RIGHT-POINTING ANGLE BRACKET"));
        data.insert(std::make_pair(0x232b,"ERASE TO THE LEFT"));
        data.insert(std::make_pair(0x232c,"BENZENE RING"));
        data.insert(std::make_pair(0x232d,"CYLINDRICITY"));
        data.insert(std::make_pair(0x232e,"ALL AROUND-PROFILE"));
        data.insert(std::make_pair(0x232f,"SYMMETRY"));
        data.insert(std::make_pair(0x2330,"TOTAL RUNOUT"));
        data.insert(std::make_pair(0x2331,"DIMENSION ORIGIN"));
        data.insert(std::make_pair(0x2332,"CONICAL TAPER"));
        data.insert(std::make_pair(0x2333,"SLOPE"));
        data.insert(std::make_pair(0x2334,"COUNTERBORE"));
        data.insert(std::make_pair(0x2335,"COUNTERSINK"));
        data.insert(std::make_pair(0x2336,"APL FUNCTIONAL SYMBOL I-BEAM"));
        data.insert(std::make_pair(0x2337,"APL FUNCTIONAL SYMBOL SQUISH QUAD"));
        data.insert(std::make_pair(0x2338,"APL FUNCTIONAL SYMBOL QUAD EQUAL"));
        data.insert(std::make_pair(0x2339,"APL FUNCTIONAL SYMBOL QUAD DIVIDE"));
        data.insert(std::make_pair(0x233a,"APL FUNCTIONAL SYMBOL QUAD DIAMOND"));
        data.insert(std::make_pair(0x233b,"APL FUNCTIONAL SYMBOL QUAD JOT"));
        data.insert(std::make_pair(0x233c,"APL FUNCTIONAL SYMBOL QUAD CIRCLE"));
        data.insert(std::make_pair(0x233d,"APL FUNCTIONAL SYMBOL CIRCLE STILE"));
        data.insert(std::make_pair(0x233e,"APL FUNCTIONAL SYMBOL CIRCLE JOT"));
        data.insert(std::make_pair(0x233f,"APL FUNCTIONAL SYMBOL SLASH BAR"));
        data.insert(std::make_pair(0x2340,"APL FUNCTIONAL SYMBOL BACKSLASH BAR"));
        data.insert(std::make_pair(0x2341,"APL FUNCTIONAL SYMBOL QUAD SLASH"));
        data.insert(std::make_pair(0x2342,"APL FUNCTIONAL SYMBOL QUAD BACKSLASH"));
        data.insert(std::make_pair(0x2343,"APL FUNCTIONAL SYMBOL QUAD LESS-THAN"));
        data.insert(std::make_pair(0x2344,"APL FUNCTIONAL SYMBOL QUAD GREATER-THAN"));
        data.insert(std::make_pair(0x2345,"APL FUNCTIONAL SYMBOL LEFTWARDS VANE"));
        data.insert(std::make_pair(0x2346,"APL FUNCTIONAL SYMBOL RIGHTWARDS VANE"));
        data.insert(std::make_pair(0x2347,"APL FUNCTIONAL SYMBOL QUAD LEFTWARDS ARROW"));
        data.insert(std::make_pair(0x2348,"APL FUNCTIONAL SYMBOL QUAD RIGHTWARDS ARROW"));
        data.insert(std::make_pair(0x2349,"APL FUNCTIONAL SYMBOL CIRCLE BACKSLASH"));
        data.insert(std::make_pair(0x234a,"APL FUNCTIONAL SYMBOL DOWN TACK UNDERBAR"));
        data.insert(std::make_pair(0x234b,"APL FUNCTIONAL SYMBOL DELTA STILE"));
        data.insert(std::make_pair(0x234c,"APL FUNCTIONAL SYMBOL QUAD DOWN CARET"));
        data.insert(std::make_pair(0x234d,"APL FUNCTIONAL SYMBOL QUAD DELTA"));
        data.insert(std::make_pair(0x234e,"APL FUNCTIONAL SYMBOL DOWN TACK JOT"));
        data.insert(std::make_pair(0x234f,"APL FUNCTIONAL SYMBOL UPWARDS VANE"));
        data.insert(std::make_pair(0x2350,"APL FUNCTIONAL SYMBOL QUAD UPWARDS ARROW"));
        data.insert(std::make_pair(0x2351,"APL FUNCTIONAL SYMBOL UP TACK OVERBAR"));
        data.insert(std::make_pair(0x2352,"APL FUNCTIONAL SYMBOL DEL STILE"));
        data.insert(std::make_pair(0x2353,"APL FUNCTIONAL SYMBOL QUAD UP CARET"));
        data.insert(std::make_pair(0x2354,"APL FUNCTIONAL SYMBOL QUAD DEL"));
        data.insert(std::make_pair(0x2355,"APL FUNCTIONAL SYMBOL UP TACK JOT"));
        data.insert(std::make_pair(0x2356,"APL FUNCTIONAL SYMBOL DOWNWARDS VANE"));
        data.insert(std::make_pair(0x2357,"APL FUNCTIONAL SYMBOL QUAD DOWNWARDS ARROW"));
        data.insert(std::make_pair(0x2358,"APL FUNCTIONAL SYMBOL QUOTE UNDERBAR"));
        data.insert(std::make_pair(0x2359,"APL FUNCTIONAL SYMBOL DELTA UNDERBAR"));
        data.insert(std::make_pair(0x235a,"APL FUNCTIONAL SYMBOL DIAMOND UNDERBAR"));
        data.insert(std::make_pair(0x235b,"APL FUNCTIONAL SYMBOL JOT UNDERBAR"));
        data.insert(std::make_pair(0x235c,"APL FUNCTIONAL SYMBOL CIRCLE UNDERBAR"));
        data.insert(std::make_pair(0x235d,"APL FUNCTIONAL SYMBOL UP SHOE JOT"));
        data.insert(std::make_pair(0x235e,"APL FUNCTIONAL SYMBOL QUOTE QUAD"));
        data.insert(std::make_pair(0x235f,"APL FUNCTIONAL SYMBOL CIRCLE STAR"));
        data.insert(std::make_pair(0x2360,"APL FUNCTIONAL SYMBOL QUAD COLON"));
        data.insert(std::make_pair(0x2361,"APL FUNCTIONAL SYMBOL UP TACK DIAERESIS"));
        data.insert(std::make_pair(0x2362,"APL FUNCTIONAL SYMBOL DEL DIAERESIS"));
        data.insert(std::make_pair(0x2363,"APL FUNCTIONAL SYMBOL STAR DIAERESIS"));
        data.insert(std::make_pair(0x2364,"APL FUNCTIONAL SYMBOL JOT DIAERESIS"));
        data.insert(std::make_pair(0x2365,"APL FUNCTIONAL SYMBOL CIRCLE DIAERESIS"));
        data.insert(std::make_pair(0x2366,"APL FUNCTIONAL SYMBOL DOWN SHOE STILE"));
        data.insert(std::make_pair(0x2367,"APL FUNCTIONAL SYMBOL LEFT SHOE STILE"));
        data.insert(std::make_pair(0x2368,"APL FUNCTIONAL SYMBOL TILDE DIAERESIS"));
        data.insert(std::make_pair(0x2369,"APL FUNCTIONAL SYMBOL GREATER-THAN DIAERESIS"));
        data.insert(std::make_pair(0x236a,"APL FUNCTIONAL SYMBOL COMMA BAR"));
        data.insert(std::make_pair(0x236b,"APL FUNCTIONAL SYMBOL DEL TILDE"));
        data.insert(std::make_pair(0x236c,"APL FUNCTIONAL SYMBOL ZILDE"));
        data.insert(std::make_pair(0x236d,"APL FUNCTIONAL SYMBOL STILE TILDE"));
        data.insert(std::make_pair(0x236e,"APL FUNCTIONAL SYMBOL SEMICOLON UNDERBAR"));
        data.insert(std::make_pair(0x236f,"APL FUNCTIONAL SYMBOL QUAD NOT EQUAL"));
        data.insert(std::make_pair(0x2370,"APL FUNCTIONAL SYMBOL QUAD QUESTION"));
        data.insert(std::make_pair(0x2371,"APL FUNCTIONAL SYMBOL DOWN CARET TILDE"));
        data.insert(std::make_pair(0x2372,"APL FUNCTIONAL SYMBOL UP CARET TILDE"));
        data.insert(std::make_pair(0x2373,"APL FUNCTIONAL SYMBOL IOTA"));
        data.insert(std::make_pair(0x2374,"APL FUNCTIONAL SYMBOL RHO"));
        data.insert(std::make_pair(0x2375,"APL FUNCTIONAL SYMBOL OMEGA"));
        data.insert(std::make_pair(0x2376,"APL FUNCTIONAL SYMBOL ALPHA UNDERBAR"));
        data.insert(std::make_pair(0x2377,"APL FUNCTIONAL SYMBOL EPSILON UNDERBAR"));
        data.insert(std::make_pair(0x2378,"APL FUNCTIONAL SYMBOL IOTA UNDERBAR"));
        data.insert(std::make_pair(0x2379,"APL FUNCTIONAL SYMBOL OMEGA UNDERBAR"));
        data.insert(std::make_pair(0x237a,"APL FUNCTIONAL SYMBOL ALPHA"));
        data.insert(std::make_pair(0x237b,"NOT CHECK MARK"));
        data.insert(std::make_pair(0x237c,"RIGHT ANGLE WITH DOWNWARDS ZIGZAG ARROW"));
        data.insert(std::make_pair(0x237d,"SHOULDERED OPEN BOX"));
        data.insert(std::make_pair(0x237e,"BELL SYMBOL"));
        data.insert(std::make_pair(0x237f,"VERTICAL LINE WITH MIDDLE DOT"));
        data.insert(std::make_pair(0x2380,"INSERTION SYMBOL"));
        data.insert(std::make_pair(0x2381,"CONTINUOUS UNDERLINE SYMBOL"));
        data.insert(std::make_pair(0x2382,"DISCONTINUOUS UNDERLINE SYMBOL"));
        data.insert(std::make_pair(0x2383,"EMPHASIS SYMBOL"));
        data.insert(std::make_pair(0x2384,"COMPOSITION SYMBOL"));
        data.insert(std::make_pair(0x2385,"WHITE SQUARE WITH CENTRE VERTICAL LINE"));
        data.insert(std::make_pair(0x2386,"ENTER SYMBOL"));
        data.insert(std::make_pair(0x2387,"ALTERNATIVE KEY SYMBOL"));
        data.insert(std::make_pair(0x2388,"HELM SYMBOL"));
        data.insert(std::make_pair(0x2389,"CIRCLED HORIZONTAL BAR WITH NOTCH"));
        data.insert(std::make_pair(0x238a,"CIRCLED TRIANGLE DOWN"));
        data.insert(std::make_pair(0x238b,"BROKEN CIRCLE WITH NORTHWEST ARROW"));
        data.insert(std::make_pair(0x238c,"UNDO SYMBOL"));
        data.insert(std::make_pair(0x238d,"MONOSTABLE SYMBOL"));
        data.insert(std::make_pair(0x238e,"HYSTERESIS SYMBOL"));
        data.insert(std::make_pair(0x238f,"OPEN-CIRCUIT-OUTPUT H-TYPE SYMBOL"));
        data.insert(std::make_pair(0x2390,"OPEN-CIRCUIT-OUTPUT L-TYPE SYMBOL"));
        data.insert(std::make_pair(0x2391,"PASSIVE-PULL-DOWN-OUTPUT SYMBOL"));
        data.insert(std::make_pair(0x2392,"PASSIVE-PULL-UP-OUTPUT SYMBOL"));
        data.insert(std::make_pair(0x2393,"DIRECT CURRENT SYMBOL FORM TWO"));
        data.insert(std::make_pair(0x2394,"SOFTWARE-FUNCTION SYMBOL"));
        data.insert(std::make_pair(0x2395,"APL FUNCTIONAL SYMBOL QUAD"));
        data.insert(std::make_pair(0x2396,"DECIMAL SEPARATOR KEY SYMBOL"));
        data.insert(std::make_pair(0x2397,"PREVIOUS PAGE"));
        data.insert(std::make_pair(0x2398,"NEXT PAGE"));
        data.insert(std::make_pair(0x2399,"PRINT SCREEN SYMBOL"));
        data.insert(std::make_pair(0x239a,"CLEAR SCREEN SYMBOL"));
        data.insert(std::make_pair(0x239b,"LEFT PARENTHESIS UPPER HOOK"));
        data.insert(std::make_pair(0x239c,"LEFT PARENTHESIS EXTENSION"));
        data.insert(std::make_pair(0x239d,"LEFT PARENTHESIS LOWER HOOK"));
        data.insert(std::make_pair(0x239e,"RIGHT PARENTHESIS UPPER HOOK"));
        data.insert(std::make_pair(0x239f,"RIGHT PARENTHESIS EXTENSION"));
        data.insert(std::make_pair(0x23a0,"RIGHT PARENTHESIS LOWER HOOK"));
        data.insert(std::make_pair(0x23a1,"LEFT SQUARE BRACKET UPPER CORNER"));
        data.insert(std::make_pair(0x23a2,"LEFT SQUARE BRACKET EXTENSION"));
        data.insert(std::make_pair(0x23a3,"LEFT SQUARE BRACKET LOWER CORNER"));
        data.insert(std::make_pair(0x23a4,"RIGHT SQUARE BRACKET UPPER CORNER"));
        data.insert(std::make_pair(0x23a5,"RIGHT SQUARE BRACKET EXTENSION"));
        data.insert(std::make_pair(0x23a6,"RIGHT SQUARE BRACKET LOWER CORNER"));
        data.insert(std::make_pair(0x23a7,"LEFT CURLY BRACKET UPPER HOOK"));
        data.insert(std::make_pair(0x23a8,"LEFT CURLY BRACKET MIDDLE PIECE"));
        data.insert(std::make_pair(0x23a9,"LEFT CURLY BRACKET LOWER HOOK"));
        data.insert(std::make_pair(0x23aa,"CURLY BRACKET EXTENSION"));
        data.insert(std::make_pair(0x23ab,"RIGHT CURLY BRACKET UPPER HOOK"));
        data.insert(std::make_pair(0x23ac,"RIGHT CURLY BRACKET MIDDLE PIECE"));
        data.insert(std::make_pair(0x23ad,"RIGHT CURLY BRACKET LOWER HOOK"));
        data.insert(std::make_pair(0x23ae,"INTEGRAL EXTENSION"));
        data.insert(std::make_pair(0x23af,"HORIZONTAL LINE EXTENSION"));
        data.insert(std::make_pair(0x23b0,"UPPER LEFT OR LOWER RIGHT CURLY BRACKET SECTION"));
        data.insert(std::make_pair(0x23b1,"UPPER RIGHT OR LOWER LEFT CURLY BRACKET SECTION"));
        data.insert(std::make_pair(0x23b2,"SUMMATION TOP"));
        data.insert(std::make_pair(0x23b3,"SUMMATION BOTTOM"));
        data.insert(std::make_pair(0x23b4,"TOP SQUARE BRACKET"));
        data.insert(std::make_pair(0x23b5,"BOTTOM SQUARE BRACKET"));
        data.insert(std::make_pair(0x23b6,"BOTTOM SQUARE BRACKET OVER TOP SQUARE BRACKET"));
        data.insert(std::make_pair(0x23b7,"RADICAL SYMBOL BOTTOM"));
        data.insert(std::make_pair(0x23b8,"LEFT VERTICAL BOX LINE"));
        data.insert(std::make_pair(0x23b9,"RIGHT VERTICAL BOX LINE"));
        data.insert(std::make_pair(0x23ba,"HORIZONTAL SCAN LINE-1"));
        data.insert(std::make_pair(0x23bb,"HORIZONTAL SCAN LINE-3"));
        data.insert(std::make_pair(0x23bc,"HORIZONTAL SCAN LINE-7"));
        data.insert(std::make_pair(0x23bd,"HORIZONTAL SCAN LINE-9"));
        data.insert(std::make_pair(0x23be,"DENTISTRY SYMBOL LIGHT VERTICAL AND TOP RIGHT"));
        data.insert(std::make_pair(0x23bf,"DENTISTRY SYMBOL LIGHT VERTICAL AND BOTTOM RIGHT"));
        data.insert(std::make_pair(0x23c0,"DENTISTRY SYMBOL LIGHT VERTICAL WITH CIRCLE"));
        data.insert(std::make_pair(0x23c1,"DENTISTRY SYMBOL LIGHT DOWN AND HORIZONTAL WITH CIRCLE"));
        data.insert(std::make_pair(0x23c2,"DENTISTRY SYMBOL LIGHT UP AND HORIZONTAL WITH CIRCLE"));
        data.insert(std::make_pair(0x23c3,"DENTISTRY SYMBOL LIGHT VERTICAL WITH TRIANGLE"));
        data.insert(std::make_pair(0x23c4,"DENTISTRY SYMBOL LIGHT DOWN AND HORIZONTAL WITH TRIANGLE"));
        data.insert(std::make_pair(0x23c5,"DENTISTRY SYMBOL LIGHT UP AND HORIZONTAL WITH TRIANGLE"));
        data.insert(std::make_pair(0x23c6,"DENTISTRY SYMBOL LIGHT VERTICAL AND WAVE"));
        data.insert(std::make_pair(0x23c7,"DENTISTRY SYMBOL LIGHT DOWN AND HORIZONTAL WITH WAVE"));
        data.insert(std::make_pair(0x23c8,"DENTISTRY SYMBOL LIGHT UP AND HORIZONTAL WITH WAVE"));
        data.insert(std::make_pair(0x23c9,"DENTISTRY SYMBOL LIGHT DOWN AND HORIZONTAL"));
        data.insert(std::make_pair(0x23ca,"DENTISTRY SYMBOL LIGHT UP AND HORIZONTAL"));
        data.insert(std::make_pair(0x23cb,"DENTISTRY SYMBOL LIGHT VERTICAL AND TOP LEFT"));
        data.insert(std::make_pair(0x23cc,"DENTISTRY SYMBOL LIGHT VERTICAL AND BOTTOM LEFT"));
        data.insert(std::make_pair(0x23cd,"SQUARE FOOT"));
        data.insert(std::make_pair(0x23ce,"RETURN SYMBOL"));
        data.insert(std::make_pair(0x23cf,"EJECT SYMBOL"));
        data.insert(std::make_pair(0x23d0,"VERTICAL LINE EXTENSION"));
        data.insert(std::make_pair(0x23d1,"METRICAL BREVE"));
        data.insert(std::make_pair(0x23d2,"METRICAL LONG OVER SHORT"));
        data.insert(std::make_pair(0x23d3,"METRICAL SHORT OVER LONG"));
        data.insert(std::make_pair(0x23d4,"METRICAL LONG OVER TWO SHORTS"));
        data.insert(std::make_pair(0x23d5,"METRICAL TWO SHORTS OVER LONG"));
        data.insert(std::make_pair(0x23d6,"METRICAL TWO SHORTS JOINED"));
        data.insert(std::make_pair(0x23d7,"METRICAL TRISEME"));
        data.insert(std::make_pair(0x23d8,"METRICAL TETRASEME"));
        data.insert(std::make_pair(0x23d9,"METRICAL PENTASEME"));
        data.insert(std::make_pair(0x23da,"EARTH GROUND"));
        data.insert(std::make_pair(0x23db,"FUSE"));
        data.insert(std::make_pair(0x23dc,"TOP PARENTHESIS"));
        data.insert(std::make_pair(0x23dd,"BOTTOM PARENTHESIS"));
        data.insert(std::make_pair(0x23de,"TOP CURLY BRACKET"));
        data.insert(std::make_pair(0x23df,"BOTTOM CURLY BRACKET"));
        data.insert(std::make_pair(0x23e0,"TOP TORTOISE SHELL BRACKET"));
        data.insert(std::make_pair(0x23e1,"BOTTOM TORTOISE SHELL BRACKET"));
        data.insert(std::make_pair(0x23e2,"WHITE TRAPEZIUM"));
        data.insert(std::make_pair(0x23e3,"BENZENE RING WITH CIRCLE"));
        data.insert(std::make_pair(0x23e4,"STRAIGHTNESS"));
        data.insert(std::make_pair(0x23e5,"FLATNESS"));
        data.insert(std::make_pair(0x23e6,"AC CURRENT"));
        data.insert(std::make_pair(0x23e7,"ELECTRICAL INTERSECTION"));
        data.insert(std::make_pair(0x23e8,"DECIMAL EXPONENT SYMBOL"));
        data.insert(std::make_pair(0x23e9,"BLACK RIGHT-POINTING DOUBLE TRIANGLE"));
        data.insert(std::make_pair(0x23ea,"BLACK LEFT-POINTING DOUBLE TRIANGLE"));
        data.insert(std::make_pair(0x23eb,"BLACK UP-POINTING DOUBLE TRIANGLE"));
        data.insert(std::make_pair(0x23ec,"BLACK DOWN-POINTING DOUBLE TRIANGLE"));
        data.insert(std::make_pair(0x23ed,"BLACK RIGHT-POINTING DOUBLE TRIANGLE WITH VERTICAL BAR"));
        data.insert(std::make_pair(0x23ee,"BLACK LEFT-POINTING DOUBLE TRIANGLE WITH VERTICAL BAR"));
        data.insert(std::make_pair(0x23ef,"BLACK RIGHT-POINTING TRIANGLE WITH DOUBLE VERTICAL BAR"));
        data.insert(std::make_pair(0x23f0,"ALARM CLOCK"));
        data.insert(std::make_pair(0x23f1,"STOPWATCH"));
        data.insert(std::make_pair(0x23f2,"TIMER CLOCK"));
        data.insert(std::make_pair(0x23f3,"HOURGLASS WITH FLOWING SAND"));
        data.insert(std::make_pair(0x23f4,"BLACK MEDIUM LEFT-POINTING TRIANGLE"));
        data.insert(std::make_pair(0x23f5,"BLACK MEDIUM RIGHT-POINTING TRIANGLE"));
        data.insert(std::make_pair(0x23f6,"BLACK MEDIUM UP-POINTING TRIANGLE"));
        data.insert(std::make_pair(0x23f7,"BLACK MEDIUM DOWN-POINTING TRIANGLE"));
        data.insert(std::make_pair(0x23f8,"DOUBLE VERTICAL BAR"));
        data.insert(std::make_pair(0x23f9,"BLACK SQUARE FOR STOP"));
        data.insert(std::make_pair(0x23fa,"BLACK CIRCLE FOR RECORD"));
        data.insert(std::make_pair(0x23fb,"POWER SYMBOL"));
        data.insert(std::make_pair(0x23fc,"POWER ON-OFF SYMBOL"));
        data.insert(std::make_pair(0x23fd,"POWER ON SYMBOL"));
        data.insert(std::make_pair(0x23fe,"POWER SLEEP SYMBOL"));
        data.insert(std::make_pair(0x23ff,"OBSERVER EYE SYMBOL"));
        data.insert(std::make_pair(0x2400,"SYMBOL FOR NULL"));
        data.insert(std::make_pair(0x2401,"SYMBOL FOR START OF HEADING"));
        data.insert(std::make_pair(0x2402,"SYMBOL FOR START OF TEXT"));
        data.insert(std::make_pair(0x2403,"SYMBOL FOR END OF TEXT"));
        data.insert(std::make_pair(0x2404,"SYMBOL FOR END OF TRANSMISSION"));
        data.insert(std::make_pair(0x2405,"SYMBOL FOR ENQUIRY"));
        data.insert(std::make_pair(0x2406,"SYMBOL FOR ACKNOWLEDGE"));
        data.insert(std::make_pair(0x2407,"SYMBOL FOR BELL"));
        data.insert(std::make_pair(0x2408,"SYMBOL FOR BACKSPACE"));
        data.insert(std::make_pair(0x2409,"SYMBOL FOR HORIZONTAL TABULATION"));
        data.insert(std::make_pair(0x240a,"SYMBOL FOR LINE FEED"));
        data.insert(std::make_pair(0x240b,"SYMBOL FOR VERTICAL TABULATION"));
        data.insert(std::make_pair(0x240c,"SYMBOL FOR FORM FEED"));
        data.insert(std::make_pair(0x240d,"SYMBOL FOR CARRIAGE RETURN"));
        data.insert(std::make_pair(0x240e,"SYMBOL FOR SHIFT OUT"));
        data.insert(std::make_pair(0x240f,"SYMBOL FOR SHIFT IN"));
        data.insert(std::make_pair(0x2410,"SYMBOL FOR DATA LINK ESCAPE"));
        data.insert(std::make_pair(0x2411,"SYMBOL FOR DEVICE CONTROL ONE"));
        data.insert(std::make_pair(0x2412,"SYMBOL FOR DEVICE CONTROL TWO"));
        data.insert(std::make_pair(0x2413,"SYMBOL FOR DEVICE CONTROL THREE"));
        data.insert(std::make_pair(0x2414,"SYMBOL FOR DEVICE CONTROL FOUR"));
        data.insert(std::make_pair(0x2415,"SYMBOL FOR NEGATIVE ACKNOWLEDGE"));
        data.insert(std::make_pair(0x2416,"SYMBOL FOR SYNCHRONOUS IDLE"));
        data.insert(std::make_pair(0x2417,"SYMBOL FOR END OF TRANSMISSION BLOCK"));
        data.insert(std::make_pair(0x2418,"SYMBOL FOR CANCEL"));
        data.insert(std::make_pair(0x2419,"SYMBOL FOR END OF MEDIUM"));
        data.insert(std::make_pair(0x241a,"SYMBOL FOR SUBSTITUTE"));
        data.insert(std::make_pair(0x241b,"SYMBOL FOR ESCAPE"));
        data.insert(std::make_pair(0x241c,"SYMBOL FOR FILE SEPARATOR"));
        data.insert(std::make_pair(0x241d,"SYMBOL FOR GROUP SEPARATOR"));
        data.insert(std::make_pair(0x241e,"SYMBOL FOR RECORD SEPARATOR"));
        data.insert(std::make_pair(0x241f,"SYMBOL FOR UNIT SEPARATOR"));
        data.insert(std::make_pair(0x2420,"SYMBOL FOR SPACE"));
        data.insert(std::make_pair(0x2421,"SYMBOL FOR DELETE"));
        data.insert(std::make_pair(0x2422,"BLANK SYMBOL"));
        data.insert(std::make_pair(0x2423,"OPEN BOX"));
        data.insert(std::make_pair(0x2424,"SYMBOL FOR NEWLINE"));
        data.insert(std::make_pair(0x2425,"SYMBOL FOR DELETE FORM TWO"));
        data.insert(std::make_pair(0x2426,"SYMBOL FOR SUBSTITUTE FORM TWO"));
        data.insert(std::make_pair(0x2440,"OCR HOOK"));
        data.insert(std::make_pair(0x2441,"OCR CHAIR"));
        data.insert(std::make_pair(0x2442,"OCR FORK"));
        data.insert(std::make_pair(0x2443,"OCR INVERTED FORK"));
        data.insert(std::make_pair(0x2444,"OCR BELT BUCKLE"));
        data.insert(std::make_pair(0x2445,"OCR BOW TIE"));
        data.insert(std::make_pair(0x2446,"OCR BRANCH BANK IDENTIFICATION"));
        data.insert(std::make_pair(0x2447,"OCR AMOUNT OF CHECK"));
        data.insert(std::make_pair(0x2448,"OCR DASH"));
        data.insert(std::make_pair(0x2449,"OCR CUSTOMER ACCOUNT NUMBER"));
        data.insert(std::make_pair(0x244a,"OCR DOUBLE BACKSLASH"));
        data.insert(std::make_pair(0x2460,"CIRCLED DIGIT ONE"));
        data.insert(std::make_pair(0x2461,"CIRCLED DIGIT TWO"));
        data.insert(std::make_pair(0x2462,"CIRCLED DIGIT THREE"));
        data.insert(std::make_pair(0x2463,"CIRCLED DIGIT FOUR"));
        data.insert(std::make_pair(0x2464,"CIRCLED DIGIT FIVE"));
        data.insert(std::make_pair(0x2465,"CIRCLED DIGIT SIX"));
        data.insert(std::make_pair(0x2466,"CIRCLED DIGIT SEVEN"));
        data.insert(std::make_pair(0x2467,"CIRCLED DIGIT EIGHT"));
        data.insert(std::make_pair(0x2468,"CIRCLED DIGIT NINE"));
        data.insert(std::make_pair(0x2469,"CIRCLED NUMBER TEN"));
        data.insert(std::make_pair(0x246a,"CIRCLED NUMBER ELEVEN"));
        data.insert(std::make_pair(0x246b,"CIRCLED NUMBER TWELVE"));
        data.insert(std::make_pair(0x246c,"CIRCLED NUMBER THIRTEEN"));
        data.insert(std::make_pair(0x246d,"CIRCLED NUMBER FOURTEEN"));
        data.insert(std::make_pair(0x246e,"CIRCLED NUMBER FIFTEEN"));
        data.insert(std::make_pair(0x246f,"CIRCLED NUMBER SIXTEEN"));
        data.insert(std::make_pair(0x2470,"CIRCLED NUMBER SEVENTEEN"));
        data.insert(std::make_pair(0x2471,"CIRCLED NUMBER EIGHTEEN"));
        data.insert(std::make_pair(0x2472,"CIRCLED NUMBER NINETEEN"));
        data.insert(std::make_pair(0x2473,"CIRCLED NUMBER TWENTY"));
        data.insert(std::make_pair(0x2474,"PARENTHESIZED DIGIT ONE"));
        data.insert(std::make_pair(0x2475,"PARENTHESIZED DIGIT TWO"));
        data.insert(std::make_pair(0x2476,"PARENTHESIZED DIGIT THREE"));
        data.insert(std::make_pair(0x2477,"PARENTHESIZED DIGIT FOUR"));
        data.insert(std::make_pair(0x2478,"PARENTHESIZED DIGIT FIVE"));
        data.insert(std::make_pair(0x2479,"PARENTHESIZED DIGIT SIX"));
        data.insert(std::make_pair(0x247a,"PARENTHESIZED DIGIT SEVEN"));
        data.insert(std::make_pair(0x247b,"PARENTHESIZED DIGIT EIGHT"));
        data.insert(std::make_pair(0x247c,"PARENTHESIZED DIGIT NINE"));
        data.insert(std::make_pair(0x247d,"PARENTHESIZED NUMBER TEN"));
        data.insert(std::make_pair(0x247e,"PARENTHESIZED NUMBER ELEVEN"));
        data.insert(std::make_pair(0x247f,"PARENTHESIZED NUMBER TWELVE"));
        data.insert(std::make_pair(0x2480,"PARENTHESIZED NUMBER THIRTEEN"));
        data.insert(std::make_pair(0x2481,"PARENTHESIZED NUMBER FOURTEEN"));
        data.insert(std::make_pair(0x2482,"PARENTHESIZED NUMBER FIFTEEN"));
        data.insert(std::make_pair(0x2483,"PARENTHESIZED NUMBER SIXTEEN"));
        data.insert(std::make_pair(0x2484,"PARENTHESIZED NUMBER SEVENTEEN"));
        data.insert(std::make_pair(0x2485,"PARENTHESIZED NUMBER EIGHTEEN"));
        data.insert(std::make_pair(0x2486,"PARENTHESIZED NUMBER NINETEEN"));
        data.insert(std::make_pair(0x2487,"PARENTHESIZED NUMBER TWENTY"));
        data.insert(std::make_pair(0x2488,"DIGIT ONE FULL STOP"));
        data.insert(std::make_pair(0x2489,"DIGIT TWO FULL STOP"));
        data.insert(std::make_pair(0x248a,"DIGIT THREE FULL STOP"));
        data.insert(std::make_pair(0x248b,"DIGIT FOUR FULL STOP"));
        data.insert(std::make_pair(0x248c,"DIGIT FIVE FULL STOP"));
        data.insert(std::make_pair(0x248d,"DIGIT SIX FULL STOP"));
        data.insert(std::make_pair(0x248e,"DIGIT SEVEN FULL STOP"));
        data.insert(std::make_pair(0x248f,"DIGIT EIGHT FULL STOP"));
        data.insert(std::make_pair(0x2490,"DIGIT NINE FULL STOP"));
        data.insert(std::make_pair(0x2491,"NUMBER TEN FULL STOP"));
        data.insert(std::make_pair(0x2492,"NUMBER ELEVEN FULL STOP"));
        data.insert(std::make_pair(0x2493,"NUMBER TWELVE FULL STOP"));
        data.insert(std::make_pair(0x2494,"NUMBER THIRTEEN FULL STOP"));
        data.insert(std::make_pair(0x2495,"NUMBER FOURTEEN FULL STOP"));
        data.insert(std::make_pair(0x2496,"NUMBER FIFTEEN FULL STOP"));
        data.insert(std::make_pair(0x2497,"NUMBER SIXTEEN FULL STOP"));
        data.insert(std::make_pair(0x2498,"NUMBER SEVENTEEN FULL STOP"));
        data.insert(std::make_pair(0x2499,"NUMBER EIGHTEEN FULL STOP"));
        data.insert(std::make_pair(0x249a,"NUMBER NINETEEN FULL STOP"));
        data.insert(std::make_pair(0x249b,"NUMBER TWENTY FULL STOP"));
        data.insert(std::make_pair(0x249c,"PARENTHESIZED LATIN SMALL LETTER A"));
        data.insert(std::make_pair(0x249d,"PARENTHESIZED LATIN SMALL LETTER B"));
        data.insert(std::make_pair(0x249e,"PARENTHESIZED LATIN SMALL LETTER C"));
        data.insert(std::make_pair(0x249f,"PARENTHESIZED LATIN SMALL LETTER D"));
        data.insert(std::make_pair(0x24a0,"PARENTHESIZED LATIN SMALL LETTER E"));
        data.insert(std::make_pair(0x24a1,"PARENTHESIZED LATIN SMALL LETTER F"));
        data.insert(std::make_pair(0x24a2,"PARENTHESIZED LATIN SMALL LETTER G"));
        data.insert(std::make_pair(0x24a3,"PARENTHESIZED LATIN SMALL LETTER H"));
        data.insert(std::make_pair(0x24a4,"PARENTHESIZED LATIN SMALL LETTER I"));
        data.insert(std::make_pair(0x24a5,"PARENTHESIZED LATIN SMALL LETTER J"));
        data.insert(std::make_pair(0x24a6,"PARENTHESIZED LATIN SMALL LETTER K"));
        data.insert(std::make_pair(0x24a7,"PARENTHESIZED LATIN SMALL LETTER L"));
        data.insert(std::make_pair(0x24a8,"PARENTHESIZED LATIN SMALL LETTER M"));
        data.insert(std::make_pair(0x24a9,"PARENTHESIZED LATIN SMALL LETTER N"));
        data.insert(std::make_pair(0x24aa,"PARENTHESIZED LATIN SMALL LETTER O"));
        data.insert(std::make_pair(0x24ab,"PARENTHESIZED LATIN SMALL LETTER P"));
        data.insert(std::make_pair(0x24ac,"PARENTHESIZED LATIN SMALL LETTER Q"));
        data.insert(std::make_pair(0x24ad,"PARENTHESIZED LATIN SMALL LETTER R"));
        data.insert(std::make_pair(0x24ae,"PARENTHESIZED LATIN SMALL LETTER S"));
        data.insert(std::make_pair(0x24af,"PARENTHESIZED LATIN SMALL LETTER T"));
        data.insert(std::make_pair(0x24b0,"PARENTHESIZED LATIN SMALL LETTER U"));
        data.insert(std::make_pair(0x24b1,"PARENTHESIZED LATIN SMALL LETTER V"));
        data.insert(std::make_pair(0x24b2,"PARENTHESIZED LATIN SMALL LETTER W"));
        data.insert(std::make_pair(0x24b3,"PARENTHESIZED LATIN SMALL LETTER X"));
        data.insert(std::make_pair(0x24b4,"PARENTHESIZED LATIN SMALL LETTER Y"));
        data.insert(std::make_pair(0x24b5,"PARENTHESIZED LATIN SMALL LETTER Z"));
        data.insert(std::make_pair(0x24b6,"CIRCLED LATIN CAPITAL LETTER A"));
        data.insert(std::make_pair(0x24b7,"CIRCLED LATIN CAPITAL LETTER B"));
        data.insert(std::make_pair(0x24b8,"CIRCLED LATIN CAPITAL LETTER C"));
        data.insert(std::make_pair(0x24b9,"CIRCLED LATIN CAPITAL LETTER D"));
        data.insert(std::make_pair(0x24ba,"CIRCLED LATIN CAPITAL LETTER E"));
        data.insert(std::make_pair(0x24bb,"CIRCLED LATIN CAPITAL LETTER F"));
        data.insert(std::make_pair(0x24bc,"CIRCLED LATIN CAPITAL LETTER G"));
        data.insert(std::make_pair(0x24bd,"CIRCLED LATIN CAPITAL LETTER H"));
        data.insert(std::make_pair(0x24be,"CIRCLED LATIN CAPITAL LETTER I"));
        data.insert(std::make_pair(0x24bf,"CIRCLED LATIN CAPITAL LETTER J"));
        data.insert(std::make_pair(0x24c0,"CIRCLED LATIN CAPITAL LETTER K"));
        data.insert(std::make_pair(0x24c1,"CIRCLED LATIN CAPITAL LETTER L"));
        data.insert(std::make_pair(0x24c2,"CIRCLED LATIN CAPITAL LETTER M"));
        data.insert(std::make_pair(0x24c3,"CIRCLED LATIN CAPITAL LETTER N"));
        data.insert(std::make_pair(0x24c4,"CIRCLED LATIN CAPITAL LETTER O"));
        data.insert(std::make_pair(0x24c5,"CIRCLED LATIN CAPITAL LETTER P"));
        data.insert(std::make_pair(0x24c6,"CIRCLED LATIN CAPITAL LETTER Q"));
        data.insert(std::make_pair(0x24c7,"CIRCLED LATIN CAPITAL LETTER R"));
        data.insert(std::make_pair(0x24c8,"CIRCLED LATIN CAPITAL LETTER S"));
        data.insert(std::make_pair(0x24c9,"CIRCLED LATIN CAPITAL LETTER T"));
        data.insert(std::make_pair(0x24ca,"CIRCLED LATIN CAPITAL LETTER U"));
        data.insert(std::make_pair(0x24cb,"CIRCLED LATIN CAPITAL LETTER V"));
        data.insert(std::make_pair(0x24cc,"CIRCLED LATIN CAPITAL LETTER W"));
        data.insert(std::make_pair(0x24cd,"CIRCLED LATIN CAPITAL LETTER X"));
        data.insert(std::make_pair(0x24ce,"CIRCLED LATIN CAPITAL LETTER Y"));
        data.insert(std::make_pair(0x24cf,"CIRCLED LATIN CAPITAL LETTER Z"));
        data.insert(std::make_pair(0x24d0,"CIRCLED LATIN SMALL LETTER A"));
        data.insert(std::make_pair(0x24d1,"CIRCLED LATIN SMALL LETTER B"));
        data.insert(std::make_pair(0x24d2,"CIRCLED LATIN SMALL LETTER C"));
        data.insert(std::make_pair(0x24d3,"CIRCLED LATIN SMALL LETTER D"));
        data.insert(std::make_pair(0x24d4,"CIRCLED LATIN SMALL LETTER E"));
        data.insert(std::make_pair(0x24d5,"CIRCLED LATIN SMALL LETTER F"));
        data.insert(std::make_pair(0x24d6,"CIRCLED LATIN SMALL LETTER G"));
        data.insert(std::make_pair(0x24d7,"CIRCLED LATIN SMALL LETTER H"));
        data.insert(std::make_pair(0x24d8,"CIRCLED LATIN SMALL LETTER I"));
        data.insert(std::make_pair(0x24d9,"CIRCLED LATIN SMALL LETTER J"));
        data.insert(std::make_pair(0x24da,"CIRCLED LATIN SMALL LETTER K"));
        data.insert(std::make_pair(0x24db,"CIRCLED LATIN SMALL LETTER L"));
        data.insert(std::make_pair(0x24dc,"CIRCLED LATIN SMALL LETTER M"));
        data.insert(std::make_pair(0x24dd,"CIRCLED LATIN SMALL LETTER N"));
        data.insert(std::make_pair(0x24de,"CIRCLED LATIN SMALL LETTER O"));
        data.insert(std::make_pair(0x24df,"CIRCLED LATIN SMALL LETTER P"));
        data.insert(std::make_pair(0x24e0,"CIRCLED LATIN SMALL LETTER Q"));
        data.insert(std::make_pair(0x24e1,"CIRCLED LATIN SMALL LETTER R"));
        data.insert(std::make_pair(0x24e2,"CIRCLED LATIN SMALL LETTER S"));
        data.insert(std::make_pair(0x24e3,"CIRCLED LATIN SMALL LETTER T"));
        data.insert(std::make_pair(0x24e4,"CIRCLED LATIN SMALL LETTER U"));
        data.insert(std::make_pair(0x24e5,"CIRCLED LATIN SMALL LETTER V"));
        data.insert(std::make_pair(0x24e6,"CIRCLED LATIN SMALL LETTER W"));
        data.insert(std::make_pair(0x24e7,"CIRCLED LATIN SMALL LETTER X"));
        data.insert(std::make_pair(0x24e8,"CIRCLED LATIN SMALL LETTER Y"));
        data.insert(std::make_pair(0x24e9,"CIRCLED LATIN SMALL LETTER Z"));
        data.insert(std::make_pair(0x24ea,"CIRCLED DIGIT ZERO"));
        data.insert(std::make_pair(0x24eb,"NEGATIVE CIRCLED NUMBER ELEVEN"));
        data.insert(std::make_pair(0x24ec,"NEGATIVE CIRCLED NUMBER TWELVE"));
        data.insert(std::make_pair(0x24ed,"NEGATIVE CIRCLED NUMBER THIRTEEN"));
        data.insert(std::make_pair(0x24ee,"NEGATIVE CIRCLED NUMBER FOURTEEN"));
        data.insert(std::make_pair(0x24ef,"NEGATIVE CIRCLED NUMBER FIFTEEN"));
        data.insert(std::make_pair(0x24f0,"NEGATIVE CIRCLED NUMBER SIXTEEN"));
        data.insert(std::make_pair(0x24f1,"NEGATIVE CIRCLED NUMBER SEVENTEEN"));
        data.insert(std::make_pair(0x24f2,"NEGATIVE CIRCLED NUMBER EIGHTEEN"));
        data.insert(std::make_pair(0x24f3,"NEGATIVE CIRCLED NUMBER NINETEEN"));
        data.insert(std::make_pair(0x24f4,"NEGATIVE CIRCLED NUMBER TWENTY"));
        data.insert(std::make_pair(0x24f5,"DOUBLE CIRCLED DIGIT ONE"));
        data.insert(std::make_pair(0x24f6,"DOUBLE CIRCLED DIGIT TWO"));
        data.insert(std::make_pair(0x24f7,"DOUBLE CIRCLED DIGIT THREE"));
        data.insert(std::make_pair(0x24f8,"DOUBLE CIRCLED DIGIT FOUR"));
        data.insert(std::make_pair(0x24f9,"DOUBLE CIRCLED DIGIT FIVE"));
        data.insert(std::make_pair(0x24fa,"DOUBLE CIRCLED DIGIT SIX"));
        data.insert(std::make_pair(0x24fb,"DOUBLE CIRCLED DIGIT SEVEN"));
        data.insert(std::make_pair(0x24fc,"DOUBLE CIRCLED DIGIT EIGHT"));
        data.insert(std::make_pair(0x24fd,"DOUBLE CIRCLED DIGIT NINE"));
        data.insert(std::make_pair(0x24fe,"DOUBLE CIRCLED NUMBER TEN"));
        data.insert(std::make_pair(0x24ff,"NEGATIVE CIRCLED DIGIT ZERO"));
        data.insert(std::make_pair(0x2500,"BOX DRAWINGS LIGHT HORIZONTAL"));
        data.insert(std::make_pair(0x2501,"BOX DRAWINGS HEAVY HORIZONTAL"));
        data.insert(std::make_pair(0x2502,"BOX DRAWINGS LIGHT VERTICAL"));
        data.insert(std::make_pair(0x2503,"BOX DRAWINGS HEAVY VERTICAL"));
        data.insert(std::make_pair(0x2504,"BOX DRAWINGS LIGHT TRIPLE DASH HORIZONTAL"));
        data.insert(std::make_pair(0x2505,"BOX DRAWINGS HEAVY TRIPLE DASH HORIZONTAL"));
        data.insert(std::make_pair(0x2506,"BOX DRAWINGS LIGHT TRIPLE DASH VERTICAL"));
        data.insert(std::make_pair(0x2507,"BOX DRAWINGS HEAVY TRIPLE DASH VERTICAL"));
        data.insert(std::make_pair(0x2508,"BOX DRAWINGS LIGHT QUADRUPLE DASH HORIZONTAL"));
        data.insert(std::make_pair(0x2509,"BOX DRAWINGS HEAVY QUADRUPLE DASH HORIZONTAL"));
        data.insert(std::make_pair(0x250a,"BOX DRAWINGS LIGHT QUADRUPLE DASH VERTICAL"));
        data.insert(std::make_pair(0x250b,"BOX DRAWINGS HEAVY QUADRUPLE DASH VERTICAL"));
        data.insert(std::make_pair(0x250c,"BOX DRAWINGS LIGHT DOWN AND RIGHT"));
        data.insert(std::make_pair(0x250d,"BOX DRAWINGS DOWN LIGHT AND RIGHT HEAVY"));
        data.insert(std::make_pair(0x250e,"BOX DRAWINGS DOWN HEAVY AND RIGHT LIGHT"));
        data.insert(std::make_pair(0x250f,"BOX DRAWINGS HEAVY DOWN AND RIGHT"));
        data.insert(std::make_pair(0x2510,"BOX DRAWINGS LIGHT DOWN AND LEFT"));
        data.insert(std::make_pair(0x2511,"BOX DRAWINGS DOWN LIGHT AND LEFT HEAVY"));
        data.insert(std::make_pair(0x2512,"BOX DRAWINGS DOWN HEAVY AND LEFT LIGHT"));
        data.insert(std::make_pair(0x2513,"BOX DRAWINGS HEAVY DOWN AND LEFT"));
        data.insert(std::make_pair(0x2514,"BOX DRAWINGS LIGHT UP AND RIGHT"));
        data.insert(std::make_pair(0x2515,"BOX DRAWINGS UP LIGHT AND RIGHT HEAVY"));
        data.insert(std::make_pair(0x2516,"BOX DRAWINGS UP HEAVY AND RIGHT LIGHT"));
        data.insert(std::make_pair(0x2517,"BOX DRAWINGS HEAVY UP AND RIGHT"));
        data.insert(std::make_pair(0x2518,"BOX DRAWINGS LIGHT UP AND LEFT"));
        data.insert(std::make_pair(0x2519,"BOX DRAWINGS UP LIGHT AND LEFT HEAVY"));
        data.insert(std::make_pair(0x251a,"BOX DRAWINGS UP HEAVY AND LEFT LIGHT"));
        data.insert(std::make_pair(0x251b,"BOX DRAWINGS HEAVY UP AND LEFT"));
        data.insert(std::make_pair(0x251c,"BOX DRAWINGS LIGHT VERTICAL AND RIGHT"));
        data.insert(std::make_pair(0x251d,"BOX DRAWINGS VERTICAL LIGHT AND RIGHT HEAVY"));
        data.insert(std::make_pair(0x251e,"BOX DRAWINGS UP HEAVY AND RIGHT DOWN LIGHT"));
        data.insert(std::make_pair(0x251f,"BOX DRAWINGS DOWN HEAVY AND RIGHT UP LIGHT"));
        data.insert(std::make_pair(0x2520,"BOX DRAWINGS VERTICAL HEAVY AND RIGHT LIGHT"));
        data.insert(std::make_pair(0x2521,"BOX DRAWINGS DOWN LIGHT AND RIGHT UP HEAVY"));
        data.insert(std::make_pair(0x2522,"BOX DRAWINGS UP LIGHT AND RIGHT DOWN HEAVY"));
        data.insert(std::make_pair(0x2523,"BOX DRAWINGS HEAVY VERTICAL AND RIGHT"));
        data.insert(std::make_pair(0x2524,"BOX DRAWINGS LIGHT VERTICAL AND LEFT"));
        data.insert(std::make_pair(0x2525,"BOX DRAWINGS VERTICAL LIGHT AND LEFT HEAVY"));
        data.insert(std::make_pair(0x2526,"BOX DRAWINGS UP HEAVY AND LEFT DOWN LIGHT"));
        data.insert(std::make_pair(0x2527,"BOX DRAWINGS DOWN HEAVY AND LEFT UP LIGHT"));
        data.insert(std::make_pair(0x2528,"BOX DRAWINGS VERTICAL HEAVY AND LEFT LIGHT"));
        data.insert(std::make_pair(0x2529,"BOX DRAWINGS DOWN LIGHT AND LEFT UP HEAVY"));
        data.insert(std::make_pair(0x252a,"BOX DRAWINGS UP LIGHT AND LEFT DOWN HEAVY"));
        data.insert(std::make_pair(0x252b,"BOX DRAWINGS HEAVY VERTICAL AND LEFT"));
        data.insert(std::make_pair(0x252c,"BOX DRAWINGS LIGHT DOWN AND HORIZONTAL"));
        data.insert(std::make_pair(0x252d,"BOX DRAWINGS LEFT HEAVY AND RIGHT DOWN LIGHT"));
        data.insert(std::make_pair(0x252e,"BOX DRAWINGS RIGHT HEAVY AND LEFT DOWN LIGHT"));
        data.insert(std::make_pair(0x252f,"BOX DRAWINGS DOWN LIGHT AND HORIZONTAL HEAVY"));
        data.insert(std::make_pair(0x2530,"BOX DRAWINGS DOWN HEAVY AND HORIZONTAL LIGHT"));
        data.insert(std::make_pair(0x2531,"BOX DRAWINGS RIGHT LIGHT AND LEFT DOWN HEAVY"));
        data.insert(std::make_pair(0x2532,"BOX DRAWINGS LEFT LIGHT AND RIGHT DOWN HEAVY"));
        data.insert(std::make_pair(0x2533,"BOX DRAWINGS HEAVY DOWN AND HORIZONTAL"));
        data.insert(std::make_pair(0x2534,"BOX DRAWINGS LIGHT UP AND HORIZONTAL"));
        data.insert(std::make_pair(0x2535,"BOX DRAWINGS LEFT HEAVY AND RIGHT UP LIGHT"));
        data.insert(std::make_pair(0x2536,"BOX DRAWINGS RIGHT HEAVY AND LEFT UP LIGHT"));
        data.insert(std::make_pair(0x2537,"BOX DRAWINGS UP LIGHT AND HORIZONTAL HEAVY"));
        data.insert(std::make_pair(0x2538,"BOX DRAWINGS UP HEAVY AND HORIZONTAL LIGHT"));
        data.insert(std::make_pair(0x2539,"BOX DRAWINGS RIGHT LIGHT AND LEFT UP HEAVY"));
        data.insert(std::make_pair(0x253a,"BOX DRAWINGS LEFT LIGHT AND RIGHT UP HEAVY"));
        data.insert(std::make_pair(0x253b,"BOX DRAWINGS HEAVY UP AND HORIZONTAL"));
        data.insert(std::make_pair(0x253c,"BOX DRAWINGS LIGHT VERTICAL AND HORIZONTAL"));
        data.insert(std::make_pair(0x253d,"BOX DRAWINGS LEFT HEAVY AND RIGHT VERTICAL LIGHT"));
        data.insert(std::make_pair(0x253e,"BOX DRAWINGS RIGHT HEAVY AND LEFT VERTICAL LIGHT"));
        data.insert(std::make_pair(0x253f,"BOX DRAWINGS VERTICAL LIGHT AND HORIZONTAL HEAVY"));
        data.insert(std::make_pair(0x2540,"BOX DRAWINGS UP HEAVY AND DOWN HORIZONTAL LIGHT"));
        data.insert(std::make_pair(0x2541,"BOX DRAWINGS DOWN HEAVY AND UP HORIZONTAL LIGHT"));
        data.insert(std::make_pair(0x2542,"BOX DRAWINGS VERTICAL HEAVY AND HORIZONTAL LIGHT"));
        data.insert(std::make_pair(0x2543,"BOX DRAWINGS LEFT UP HEAVY AND RIGHT DOWN LIGHT"));
        data.insert(std::make_pair(0x2544,"BOX DRAWINGS RIGHT UP HEAVY AND LEFT DOWN LIGHT"));
        data.insert(std::make_pair(0x2545,"BOX DRAWINGS LEFT DOWN HEAVY AND RIGHT UP LIGHT"));
        data.insert(std::make_pair(0x2546,"BOX DRAWINGS RIGHT DOWN HEAVY AND LEFT UP LIGHT"));
        data.insert(std::make_pair(0x2547,"BOX DRAWINGS DOWN LIGHT AND UP HORIZONTAL HEAVY"));
        data.insert(std::make_pair(0x2548,"BOX DRAWINGS UP LIGHT AND DOWN HORIZONTAL HEAVY"));
        data.insert(std::make_pair(0x2549,"BOX DRAWINGS RIGHT LIGHT AND LEFT VERTICAL HEAVY"));
        data.insert(std::make_pair(0x254a,"BOX DRAWINGS LEFT LIGHT AND RIGHT VERTICAL HEAVY"));
        data.insert(std::make_pair(0x254b,"BOX DRAWINGS HEAVY VERTICAL AND HORIZONTAL"));
        data.insert(std::make_pair(0x254c,"BOX DRAWINGS LIGHT DOUBLE DASH HORIZONTAL"));
        data.insert(std::make_pair(0x254d,"BOX DRAWINGS HEAVY DOUBLE DASH HORIZONTAL"));
        data.insert(std::make_pair(0x254e,"BOX DRAWINGS LIGHT DOUBLE DASH VERTICAL"));
        data.insert(std::make_pair(0x254f,"BOX DRAWINGS HEAVY DOUBLE DASH VERTICAL"));
        data.insert(std::make_pair(0x2550,"BOX DRAWINGS DOUBLE HORIZONTAL"));
        data.insert(std::make_pair(0x2551,"BOX DRAWINGS DOUBLE VERTICAL"));
        data.insert(std::make_pair(0x2552,"BOX DRAWINGS DOWN SINGLE AND RIGHT DOUBLE"));
        data.insert(std::make_pair(0x2553,"BOX DRAWINGS DOWN DOUBLE AND RIGHT SINGLE"));
        data.insert(std::make_pair(0x2554,"BOX DRAWINGS DOUBLE DOWN AND RIGHT"));
        data.insert(std::make_pair(0x2555,"BOX DRAWINGS DOWN SINGLE AND LEFT DOUBLE"));
        data.insert(std::make_pair(0x2556,"BOX DRAWINGS DOWN DOUBLE AND LEFT SINGLE"));
        data.insert(std::make_pair(0x2557,"BOX DRAWINGS DOUBLE DOWN AND LEFT"));
        data.insert(std::make_pair(0x2558,"BOX DRAWINGS UP SINGLE AND RIGHT DOUBLE"));
        data.insert(std::make_pair(0x2559,"BOX DRAWINGS UP DOUBLE AND RIGHT SINGLE"));
        data.insert(std::make_pair(0x255a,"BOX DRAWINGS DOUBLE UP AND RIGHT"));
        data.insert(std::make_pair(0x255b,"BOX DRAWINGS UP SINGLE AND LEFT DOUBLE"));
        data.insert(std::make_pair(0x255c,"BOX DRAWINGS UP DOUBLE AND LEFT SINGLE"));
        data.insert(std::make_pair(0x255d,"BOX DRAWINGS DOUBLE UP AND LEFT"));
        data.insert(std::make_pair(0x255e,"BOX DRAWINGS VERTICAL SINGLE AND RIGHT DOUBLE"));
        data.insert(std::make_pair(0x255f,"BOX DRAWINGS VERTICAL DOUBLE AND RIGHT SINGLE"));
        data.insert(std::make_pair(0x2560,"BOX DRAWINGS DOUBLE VERTICAL AND RIGHT"));
        data.insert(std::make_pair(0x2561,"BOX DRAWINGS VERTICAL SINGLE AND LEFT DOUBLE"));
        data.insert(std::make_pair(0x2562,"BOX DRAWINGS VERTICAL DOUBLE AND LEFT SINGLE"));
        data.insert(std::make_pair(0x2563,"BOX DRAWINGS DOUBLE VERTICAL AND LEFT"));
        data.insert(std::make_pair(0x2564,"BOX DRAWINGS DOWN SINGLE AND HORIZONTAL DOUBLE"));
        data.insert(std::make_pair(0x2565,"BOX DRAWINGS DOWN DOUBLE AND HORIZONTAL SINGLE"));
        data.insert(std::make_pair(0x2566,"BOX DRAWINGS DOUBLE DOWN AND HORIZONTAL"));
        data.insert(std::make_pair(0x2567,"BOX DRAWINGS UP SINGLE AND HORIZONTAL DOUBLE"));
        data.insert(std::make_pair(0x2568,"BOX DRAWINGS UP DOUBLE AND HORIZONTAL SINGLE"));
        data.insert(std::make_pair(0x2569,"BOX DRAWINGS DOUBLE UP AND HORIZONTAL"));
        data.insert(std::make_pair(0x256a,"BOX DRAWINGS VERTICAL SINGLE AND HORIZONTAL DOUBLE"));
        data.insert(std::make_pair(0x256b,"BOX DRAWINGS VERTICAL DOUBLE AND HORIZONTAL SINGLE"));
        data.insert(std::make_pair(0x256c,"BOX DRAWINGS DOUBLE VERTICAL AND HORIZONTAL"));
        data.insert(std::make_pair(0x256d,"BOX DRAWINGS LIGHT ARC DOWN AND RIGHT"));
        data.insert(std::make_pair(0x256e,"BOX DRAWINGS LIGHT ARC DOWN AND LEFT"));
        data.insert(std::make_pair(0x256f,"BOX DRAWINGS LIGHT ARC UP AND LEFT"));
        data.insert(std::make_pair(0x2570,"BOX DRAWINGS LIGHT ARC UP AND RIGHT"));
        data.insert(std::make_pair(0x2571,"BOX DRAWINGS LIGHT DIAGONAL UPPER RIGHT TO LOWER LEFT"));
        data.insert(std::make_pair(0x2572,"BOX DRAWINGS LIGHT DIAGONAL UPPER LEFT TO LOWER RIGHT"));
        data.insert(std::make_pair(0x2573,"BOX DRAWINGS LIGHT DIAGONAL CROSS"));
        data.insert(std::make_pair(0x2574,"BOX DRAWINGS LIGHT LEFT"));
        data.insert(std::make_pair(0x2575,"BOX DRAWINGS LIGHT UP"));
        data.insert(std::make_pair(0x2576,"BOX DRAWINGS LIGHT RIGHT"));
        data.insert(std::make_pair(0x2577,"BOX DRAWINGS LIGHT DOWN"));
        data.insert(std::make_pair(0x2578,"BOX DRAWINGS HEAVY LEFT"));
        data.insert(std::make_pair(0x2579,"BOX DRAWINGS HEAVY UP"));
        data.insert(std::make_pair(0x257a,"BOX DRAWINGS HEAVY RIGHT"));
        data.insert(std::make_pair(0x257b,"BOX DRAWINGS HEAVY DOWN"));
        data.insert(std::make_pair(0x257c,"BOX DRAWINGS LIGHT LEFT AND HEAVY RIGHT"));
        data.insert(std::make_pair(0x257d,"BOX DRAWINGS LIGHT UP AND HEAVY DOWN"));
        data.insert(std::make_pair(0x257e,"BOX DRAWINGS HEAVY LEFT AND LIGHT RIGHT"));
        data.insert(std::make_pair(0x257f,"BOX DRAWINGS HEAVY UP AND LIGHT DOWN"));
        data.insert(std::make_pair(0x2580,"UPPER HALF BLOCK"));
        data.insert(std::make_pair(0x2581,"LOWER ONE EIGHTH BLOCK"));
        data.insert(std::make_pair(0x2582,"LOWER ONE QUARTER BLOCK"));
        data.insert(std::make_pair(0x2583,"LOWER THREE EIGHTHS BLOCK"));
        data.insert(std::make_pair(0x2584,"LOWER HALF BLOCK"));
        data.insert(std::make_pair(0x2585,"LOWER FIVE EIGHTHS BLOCK"));
        data.insert(std::make_pair(0x2586,"LOWER THREE QUARTERS BLOCK"));
        data.insert(std::make_pair(0x2587,"LOWER SEVEN EIGHTHS BLOCK"));
        data.insert(std::make_pair(0x2588,"FULL BLOCK"));
        data.insert(std::make_pair(0x2589,"LEFT SEVEN EIGHTHS BLOCK"));
        data.insert(std::make_pair(0x258a,"LEFT THREE QUARTERS BLOCK"));
        data.insert(std::make_pair(0x258b,"LEFT FIVE EIGHTHS BLOCK"));
        data.insert(std::make_pair(0x258c,"LEFT HALF BLOCK"));
        data.insert(std::make_pair(0x258d,"LEFT THREE EIGHTHS BLOCK"));
        data.insert(std::make_pair(0x258e,"LEFT ONE QUARTER BLOCK"));
        data.insert(std::make_pair(0x258f,"LEFT ONE EIGHTH BLOCK"));
        data.insert(std::make_pair(0x2590,"RIGHT HALF BLOCK"));
        data.insert(std::make_pair(0x2591,"LIGHT SHADE"));
        data.insert(std::make_pair(0x2592,"MEDIUM SHADE"));
        data.insert(std::make_pair(0x2593,"DARK SHADE"));
        data.insert(std::make_pair(0x2594,"UPPER ONE EIGHTH BLOCK"));
        data.insert(std::make_pair(0x2595,"RIGHT ONE EIGHTH BLOCK"));
        data.insert(std::make_pair(0x2596,"QUADRANT LOWER LEFT"));
        data.insert(std::make_pair(0x2597,"QUADRANT LOWER RIGHT"));
        data.insert(std::make_pair(0x2598,"QUADRANT UPPER LEFT"));
        data.insert(std::make_pair(0x2599,"QUADRANT UPPER LEFT AND LOWER LEFT AND LOWER RIGHT"));
        data.insert(std::make_pair(0x259a,"QUADRANT UPPER LEFT AND LOWER RIGHT"));
        data.insert(std::make_pair(0x259b,"QUADRANT UPPER LEFT AND UPPER RIGHT AND LOWER LEFT"));
        data.insert(std::make_pair(0x259c,"QUADRANT UPPER LEFT AND UPPER RIGHT AND LOWER RIGHT"));
        data.insert(std::make_pair(0x259d,"QUADRANT UPPER RIGHT"));
        data.insert(std::make_pair(0x259e,"QUADRANT UPPER RIGHT AND LOWER LEFT"));
        data.insert(std::make_pair(0x259f,"QUADRANT UPPER RIGHT AND LOWER LEFT AND LOWER RIGHT"));
        data.insert(std::make_pair(0x25a0,"BLACK SQUARE"));
        data.insert(std::make_pair(0x25a1,"WHITE SQUARE"));
        data.insert(std::make_pair(0x25a2,"WHITE SQUARE WITH ROUNDED CORNERS"));
        data.insert(std::make_pair(0x25a3,"WHITE SQUARE CONTAINING BLACK SMALL SQUARE"));
        data.insert(std::make_pair(0x25a4,"SQUARE WITH HORIZONTAL FILL"));
        data.insert(std::make_pair(0x25a5,"SQUARE WITH VERTICAL FILL"));
        data.insert(std::make_pair(0x25a6,"SQUARE WITH ORTHOGONAL CROSSHATCH FILL"));
        data.insert(std::make_pair(0x25a7,"SQUARE WITH UPPER LEFT TO LOWER RIGHT FILL"));
        data.insert(std::make_pair(0x25a8,"SQUARE WITH UPPER RIGHT TO LOWER LEFT FILL"));
        data.insert(std::make_pair(0x25a9,"SQUARE WITH DIAGONAL CROSSHATCH FILL"));
        data.insert(std::make_pair(0x25aa,"BLACK SMALL SQUARE"));
        data.insert(std::make_pair(0x25ab,"WHITE SMALL SQUARE"));
        data.insert(std::make_pair(0x25ac,"BLACK RECTANGLE"));
        data.insert(std::make_pair(0x25ad,"WHITE RECTANGLE"));
        data.insert(std::make_pair(0x25ae,"BLACK VERTICAL RECTANGLE"));
        data.insert(std::make_pair(0x25af,"WHITE VERTICAL RECTANGLE"));
        data.insert(std::make_pair(0x25b0,"BLACK PARALLELOGRAM"));
        data.insert(std::make_pair(0x25b1,"WHITE PARALLELOGRAM"));
        data.insert(std::make_pair(0x25b2,"BLACK UP-POINTING TRIANGLE"));
        data.insert(std::make_pair(0x25b3,"WHITE UP-POINTING TRIANGLE"));
        data.insert(std::make_pair(0x25b4,"BLACK UP-POINTING SMALL TRIANGLE"));
        data.insert(std::make_pair(0x25b5,"WHITE UP-POINTING SMALL TRIANGLE"));
        data.insert(std::make_pair(0x25b6,"BLACK RIGHT-POINTING TRIANGLE"));
        data.insert(std::make_pair(0x25b7,"WHITE RIGHT-POINTING TRIANGLE"));
        data.insert(std::make_pair(0x25b8,"BLACK RIGHT-POINTING SMALL TRIANGLE"));
        data.insert(std::make_pair(0x25b9,"WHITE RIGHT-POINTING SMALL TRIANGLE"));
        data.insert(std::make_pair(0x25ba,"BLACK RIGHT-POINTING POINTER"));
        data.insert(std::make_pair(0x25bb,"WHITE RIGHT-POINTING POINTER"));
        data.insert(std::make_pair(0x25bc,"BLACK DOWN-POINTING TRIANGLE"));
        data.insert(std::make_pair(0x25bd,"WHITE DOWN-POINTING TRIANGLE"));
        data.insert(std::make_pair(0x25be,"BLACK DOWN-POINTING SMALL TRIANGLE"));
        data.insert(std::make_pair(0x25bf,"WHITE DOWN-POINTING SMALL TRIANGLE"));
        data.insert(std::make_pair(0x25c0,"BLACK LEFT-POINTING TRIANGLE"));
        data.insert(std::make_pair(0x25c1,"WHITE LEFT-POINTING TRIANGLE"));
        data.insert(std::make_pair(0x25c2,"BLACK LEFT-POINTING SMALL TRIANGLE"));
        data.insert(std::make_pair(0x25c3,"WHITE LEFT-POINTING SMALL TRIANGLE"));
        data.insert(std::make_pair(0x25c4,"BLACK LEFT-POINTING POINTER"));
        data.insert(std::make_pair(0x25c5,"WHITE LEFT-POINTING POINTER"));
        data.insert(std::make_pair(0x25c6,"BLACK DIAMOND"));
        data.insert(std::make_pair(0x25c7,"WHITE DIAMOND"));
        data.insert(std::make_pair(0x25c8,"WHITE DIAMOND CONTAINING BLACK SMALL DIAMOND"));
        data.insert(std::make_pair(0x25c9,"FISHEYE"));
        data.insert(std::make_pair(0x25ca,"LOZENGE"));
        data.insert(std::make_pair(0x25cb,"WHITE CIRCLE"));
        data.insert(std::make_pair(0x25cc,"DOTTED CIRCLE"));
        data.insert(std::make_pair(0x25cd,"CIRCLE WITH VERTICAL FILL"));
        data.insert(std::make_pair(0x25ce,"BULLSEYE"));
        data.insert(std::make_pair(0x25cf,"BLACK CIRCLE"));
        data.insert(std::make_pair(0x25d0,"CIRCLE WITH LEFT HALF BLACK"));
        data.insert(std::make_pair(0x25d1,"CIRCLE WITH RIGHT HALF BLACK"));
        data.insert(std::make_pair(0x25d2,"CIRCLE WITH LOWER HALF BLACK"));
        data.insert(std::make_pair(0x25d3,"CIRCLE WITH UPPER HALF BLACK"));
        data.insert(std::make_pair(0x25d4,"CIRCLE WITH UPPER RIGHT QUADRANT BLACK"));
        data.insert(std::make_pair(0x25d5,"CIRCLE WITH ALL BUT UPPER LEFT QUADRANT BLACK"));
        data.insert(std::make_pair(0x25d6,"LEFT HALF BLACK CIRCLE"));
        data.insert(std::make_pair(0x25d7,"RIGHT HALF BLACK CIRCLE"));
        data.insert(std::make_pair(0x25d8,"INVERSE BULLET"));
        data.insert(std::make_pair(0x25d9,"INVERSE WHITE CIRCLE"));
        data.insert(std::make_pair(0x25da,"UPPER HALF INVERSE WHITE CIRCLE"));
        data.insert(std::make_pair(0x25db,"LOWER HALF INVERSE WHITE CIRCLE"));
        data.insert(std::make_pair(0x25dc,"UPPER LEFT QUADRANT CIRCULAR ARC"));
        data.insert(std::make_pair(0x25dd,"UPPER RIGHT QUADRANT CIRCULAR ARC"));
        data.insert(std::make_pair(0x25de,"LOWER RIGHT QUADRANT CIRCULAR ARC"));
        data.insert(std::make_pair(0x25df,"LOWER LEFT QUADRANT CIRCULAR ARC"));
        data.insert(std::make_pair(0x25e0,"UPPER HALF CIRCLE"));
        data.insert(std::make_pair(0x25e1,"LOWER HALF CIRCLE"));
        data.insert(std::make_pair(0x25e2,"BLACK LOWER RIGHT TRIANGLE"));
        data.insert(std::make_pair(0x25e3,"BLACK LOWER LEFT TRIANGLE"));
        data.insert(std::make_pair(0x25e4,"BLACK UPPER LEFT TRIANGLE"));
        data.insert(std::make_pair(0x25e5,"BLACK UPPER RIGHT TRIANGLE"));
        data.insert(std::make_pair(0x25e6,"WHITE BULLET"));
        data.insert(std::make_pair(0x25e7,"SQUARE WITH LEFT HALF BLACK"));
        data.insert(std::make_pair(0x25e8,"SQUARE WITH RIGHT HALF BLACK"));
        data.insert(std::make_pair(0x25e9,"SQUARE WITH UPPER LEFT DIAGONAL HALF BLACK"));
        data.insert(std::make_pair(0x25ea,"SQUARE WITH LOWER RIGHT DIAGONAL HALF BLACK"));
        data.insert(std::make_pair(0x25eb,"WHITE SQUARE WITH VERTICAL BISECTING LINE"));
        data.insert(std::make_pair(0x25ec,"WHITE UP-POINTING TRIANGLE WITH DOT"));
        data.insert(std::make_pair(0x25ed,"UP-POINTING TRIANGLE WITH LEFT HALF BLACK"));
        data.insert(std::make_pair(0x25ee,"UP-POINTING TRIANGLE WITH RIGHT HALF BLACK"));
        data.insert(std::make_pair(0x25ef,"LARGE CIRCLE"));
        data.insert(std::make_pair(0x25f0,"WHITE SQUARE WITH UPPER LEFT QUADRANT"));
        data.insert(std::make_pair(0x25f1,"WHITE SQUARE WITH LOWER LEFT QUADRANT"));
        data.insert(std::make_pair(0x25f2,"WHITE SQUARE WITH LOWER RIGHT QUADRANT"));
        data.insert(std::make_pair(0x25f3,"WHITE SQUARE WITH UPPER RIGHT QUADRANT"));
        data.insert(std::make_pair(0x25f4,"WHITE CIRCLE WITH UPPER LEFT QUADRANT"));
        data.insert(std::make_pair(0x25f5,"WHITE CIRCLE WITH LOWER LEFT QUADRANT"));
        data.insert(std::make_pair(0x25f6,"WHITE CIRCLE WITH LOWER RIGHT QUADRANT"));
        data.insert(std::make_pair(0x25f7,"WHITE CIRCLE WITH UPPER RIGHT QUADRANT"));
        data.insert(std::make_pair(0x25f8,"UPPER LEFT TRIANGLE"));
        data.insert(std::make_pair(0x25f9,"UPPER RIGHT TRIANGLE"));
        data.insert(std::make_pair(0x25fa,"LOWER LEFT TRIANGLE"));
        data.insert(std::make_pair(0x25fb,"WHITE MEDIUM SQUARE"));
        data.insert(std::make_pair(0x25fc,"BLACK MEDIUM SQUARE"));
        data.insert(std::make_pair(0x25fd,"WHITE MEDIUM SMALL SQUARE"));
        data.insert(std::make_pair(0x25fe,"BLACK MEDIUM SMALL SQUARE"));
        data.insert(std::make_pair(0x25ff,"LOWER RIGHT TRIANGLE"));
        data.insert(std::make_pair(0x2600,"BLACK SUN WITH RAYS"));
        data.insert(std::make_pair(0x2601,"CLOUD"));
        data.insert(std::make_pair(0x2602,"UMBRELLA"));
        data.insert(std::make_pair(0x2603,"SNOWMAN"));
        data.insert(std::make_pair(0x2604,"COMET"));
        data.insert(std::make_pair(0x2605,"BLACK STAR"));
        data.insert(std::make_pair(0x2606,"WHITE STAR"));
        data.insert(std::make_pair(0x2607,"LIGHTNING"));
        data.insert(std::make_pair(0x2608,"THUNDERSTORM"));
        data.insert(std::make_pair(0x2609,"SUN"));
        data.insert(std::make_pair(0x260a,"ASCENDING NODE"));
        data.insert(std::make_pair(0x260b,"DESCENDING NODE"));
        data.insert(std::make_pair(0x260c,"CONJUNCTION"));
        data.insert(std::make_pair(0x260d,"OPPOSITION"));
        data.insert(std::make_pair(0x260e,"BLACK TELEPHONE"));
        data.insert(std::make_pair(0x260f,"WHITE TELEPHONE"));
        data.insert(std::make_pair(0x2610,"BALLOT BOX"));
        data.insert(std::make_pair(0x2611,"BALLOT BOX WITH CHECK"));
        data.insert(std::make_pair(0x2612,"BALLOT BOX WITH X"));
        data.insert(std::make_pair(0x2613,"SALTIRE"));
        data.insert(std::make_pair(0x2614,"UMBRELLA WITH RAIN DROPS"));
        data.insert(std::make_pair(0x2615,"HOT BEVERAGE"));
        data.insert(std::make_pair(0x2616,"WHITE SHOGI PIECE"));
        data.insert(std::make_pair(0x2617,"BLACK SHOGI PIECE"));
        data.insert(std::make_pair(0x2618,"SHAMROCK"));
        data.insert(std::make_pair(0x2619,"REVERSED ROTATED FLORAL HEART BULLET"));
        data.insert(std::make_pair(0x261a,"BLACK LEFT POINTING INDEX"));
        data.insert(std::make_pair(0x261b,"BLACK RIGHT POINTING INDEX"));
        data.insert(std::make_pair(0x261c,"WHITE LEFT POINTING INDEX"));
        data.insert(std::make_pair(0x261d,"WHITE UP POINTING INDEX"));
        data.insert(std::make_pair(0x261e,"WHITE RIGHT POINTING INDEX"));
        data.insert(std::make_pair(0x261f,"WHITE DOWN POINTING INDEX"));
        data.insert(std::make_pair(0x2620,"SKULL AND CROSSBONES"));
        data.insert(std::make_pair(0x2621,"CAUTION SIGN"));
        data.insert(std::make_pair(0x2622,"RADIOACTIVE SIGN"));
        data.insert(std::make_pair(0x2623,"BIOHAZARD SIGN"));
        data.insert(std::make_pair(0x2624,"CADUCEUS"));
        data.insert(std::make_pair(0x2625,"ANKH"));
        data.insert(std::make_pair(0x2626,"ORTHODOX CROSS"));
        data.insert(std::make_pair(0x2627,"CHI RHO"));
        data.insert(std::make_pair(0x2628,"CROSS OF LORRAINE"));
        data.insert(std::make_pair(0x2629,"CROSS OF JERUSALEM"));
        data.insert(std::make_pair(0x262a,"STAR AND CRESCENT"));
        data.insert(std::make_pair(0x262b,"FARSI SYMBOL"));
        data.insert(std::make_pair(0x262c,"ADI SHAKTI"));
        data.insert(std::make_pair(0x262d,"HAMMER AND SICKLE"));
        data.insert(std::make_pair(0x262e,"PEACE SYMBOL"));
        data.insert(std::make_pair(0x262f,"YIN YANG"));
        data.insert(std::make_pair(0x2630,"TRIGRAM FOR HEAVEN"));
        data.insert(std::make_pair(0x2631,"TRIGRAM FOR LAKE"));
        data.insert(std::make_pair(0x2632,"TRIGRAM FOR FIRE"));
        data.insert(std::make_pair(0x2633,"TRIGRAM FOR THUNDER"));
        data.insert(std::make_pair(0x2634,"TRIGRAM FOR WIND"));
        data.insert(std::make_pair(0x2635,"TRIGRAM FOR WATER"));
        data.insert(std::make_pair(0x2636,"TRIGRAM FOR MOUNTAIN"));
        data.insert(std::make_pair(0x2637,"TRIGRAM FOR EARTH"));
        data.insert(std::make_pair(0x2638,"WHEEL OF DHARMA"));
        data.insert(std::make_pair(0x2639,"WHITE FROWNING FACE"));
        data.insert(std::make_pair(0x263a,"WHITE SMILING FACE"));
        data.insert(std::make_pair(0x263b,"BLACK SMILING FACE"));
        data.insert(std::make_pair(0x263c,"WHITE SUN WITH RAYS"));
        data.insert(std::make_pair(0x263d,"FIRST QUARTER MOON"));
        data.insert(std::make_pair(0x263e,"LAST QUARTER MOON"));
        data.insert(std::make_pair(0x263f,"MERCURY"));
        data.insert(std::make_pair(0x2640,"FEMALE SIGN"));
        data.insert(std::make_pair(0x2641,"EARTH"));
        data.insert(std::make_pair(0x2642,"MALE SIGN"));
        data.insert(std::make_pair(0x2643,"JUPITER"));
        data.insert(std::make_pair(0x2644,"SATURN"));
        data.insert(std::make_pair(0x2645,"URANUS"));
        data.insert(std::make_pair(0x2646,"NEPTUNE"));
        data.insert(std::make_pair(0x2647,"PLUTO"));
        data.insert(std::make_pair(0x2648,"ARIES"));
        data.insert(std::make_pair(0x2649,"TAURUS"));
        data.insert(std::make_pair(0x264a,"GEMINI"));
        data.insert(std::make_pair(0x264b,"CANCER"));
        data.insert(std::make_pair(0x264c,"LEO"));
        data.insert(std::make_pair(0x264d,"VIRGO"));
        data.insert(std::make_pair(0x264e,"LIBRA"));
        data.insert(std::make_pair(0x264f,"SCORPIUS"));
        data.insert(std::make_pair(0x2650,"SAGITTARIUS"));
        data.insert(std::make_pair(0x2651,"CAPRICORN"));
        data.insert(std::make_pair(0x2652,"AQUARIUS"));
        data.insert(std::make_pair(0x2653,"PISCES"));
        data.insert(std::make_pair(0x2654,"WHITE CHESS KING"));
        data.insert(std::make_pair(0x2655,"WHITE CHESS QUEEN"));
        data.insert(std::make_pair(0x2656,"WHITE CHESS ROOK"));
        data.insert(std::make_pair(0x2657,"WHITE CHESS BISHOP"));
        data.insert(std::make_pair(0x2658,"WHITE CHESS KNIGHT"));
        data.insert(std::make_pair(0x2659,"WHITE CHESS PAWN"));
        data.insert(std::make_pair(0x265a,"BLACK CHESS KING"));
        data.insert(std::make_pair(0x265b,"BLACK CHESS QUEEN"));
        data.insert(std::make_pair(0x265c,"BLACK CHESS ROOK"));
        data.insert(std::make_pair(0x265d,"BLACK CHESS BISHOP"));
        data.insert(std::make_pair(0x265e,"BLACK CHESS KNIGHT"));
        data.insert(std::make_pair(0x265f,"BLACK CHESS PAWN"));
        data.insert(std::make_pair(0x2660,"BLACK SPADE SUIT"));
        data.insert(std::make_pair(0x2661,"WHITE HEART SUIT"));
        data.insert(std::make_pair(0x2662,"WHITE DIAMOND SUIT"));
        data.insert(std::make_pair(0x2663,"BLACK CLUB SUIT"));
        data.insert(std::make_pair(0x2664,"WHITE SPADE SUIT"));
        data.insert(std::make_pair(0x2665,"BLACK HEART SUIT"));
        data.insert(std::make_pair(0x2666,"BLACK DIAMOND SUIT"));
        data.insert(std::make_pair(0x2667,"WHITE CLUB SUIT"));
        data.insert(std::make_pair(0x2668,"HOT SPRINGS"));
        data.insert(std::make_pair(0x2669,"QUARTER NOTE"));
        data.insert(std::make_pair(0x266a,"EIGHTH NOTE"));
        data.insert(std::make_pair(0x266b,"BEAMED EIGHTH NOTES"));
        data.insert(std::make_pair(0x266c,"BEAMED SIXTEENTH NOTES"));
        data.insert(std::make_pair(0x266d,"MUSIC FLAT SIGN"));
        data.insert(std::make_pair(0x266e,"MUSIC NATURAL SIGN"));
        data.insert(std::make_pair(0x266f,"MUSIC SHARP SIGN"));
        data.insert(std::make_pair(0x2670,"WEST SYRIAC CROSS"));
        data.insert(std::make_pair(0x2671,"EAST SYRIAC CROSS"));
        data.insert(std::make_pair(0x2672,"UNIVERSAL RECYCLING SYMBOL"));
        data.insert(std::make_pair(0x2673,"RECYCLING SYMBOL FOR TYPE-1 PLASTICS"));
        data.insert(std::make_pair(0x2674,"RECYCLING SYMBOL FOR TYPE-2 PLASTICS"));
        data.insert(std::make_pair(0x2675,"RECYCLING SYMBOL FOR TYPE-3 PLASTICS"));
        data.insert(std::make_pair(0x2676,"RECYCLING SYMBOL FOR TYPE-4 PLASTICS"));
        data.insert(std::make_pair(0x2677,"RECYCLING SYMBOL FOR TYPE-5 PLASTICS"));
        data.insert(std::make_pair(0x2678,"RECYCLING SYMBOL FOR TYPE-6 PLASTICS"));
        data.insert(std::make_pair(0x2679,"RECYCLING SYMBOL FOR TYPE-7 PLASTICS"));
        data.insert(std::make_pair(0x267a,"RECYCLING SYMBOL FOR GENERIC MATERIALS"));
        data.insert(std::make_pair(0x267b,"BLACK UNIVERSAL RECYCLING SYMBOL"));
        data.insert(std::make_pair(0x267c,"RECYCLED PAPER SYMBOL"));
        data.insert(std::make_pair(0x267d,"PARTIALLY-RECYCLED PAPER SYMBOL"));
        data.insert(std::make_pair(0x267e,"PERMANENT PAPER SIGN"));
        data.insert(std::make_pair(0x267f,"WHEELCHAIR SYMBOL"));
        data.insert(std::make_pair(0x2680,"DIE FACE-1"));
        data.insert(std::make_pair(0x2681,"DIE FACE-2"));
        data.insert(std::make_pair(0x2682,"DIE FACE-3"));
        data.insert(std::make_pair(0x2683,"DIE FACE-4"));
        data.insert(std::make_pair(0x2684,"DIE FACE-5"));
        data.insert(std::make_pair(0x2685,"DIE FACE-6"));
        data.insert(std::make_pair(0x2686,"WHITE CIRCLE WITH DOT RIGHT"));
        data.insert(std::make_pair(0x2687,"WHITE CIRCLE WITH TWO DOTS"));
        data.insert(std::make_pair(0x2688,"BLACK CIRCLE WITH WHITE DOT RIGHT"));
        data.insert(std::make_pair(0x2689,"BLACK CIRCLE WITH TWO WHITE DOTS"));
        data.insert(std::make_pair(0x268a,"MONOGRAM FOR YANG"));
        data.insert(std::make_pair(0x268b,"MONOGRAM FOR YIN"));
        data.insert(std::make_pair(0x268c,"DIGRAM FOR GREATER YANG"));
        data.insert(std::make_pair(0x268d,"DIGRAM FOR LESSER YIN"));
        data.insert(std::make_pair(0x268e,"DIGRAM FOR LESSER YANG"));
        data.insert(std::make_pair(0x268f,"DIGRAM FOR GREATER YIN"));
        data.insert(std::make_pair(0x2690,"WHITE FLAG"));
        data.insert(std::make_pair(0x2691,"BLACK FLAG"));
        data.insert(std::make_pair(0x2692,"HAMMER AND PICK"));
        data.insert(std::make_pair(0x2693,"ANCHOR"));
        data.insert(std::make_pair(0x2694,"CROSSED SWORDS"));
        data.insert(std::make_pair(0x2695,"STAFF OF AESCULAPIUS"));
        data.insert(std::make_pair(0x2696,"SCALES"));
        data.insert(std::make_pair(0x2697,"ALEMBIC"));
        data.insert(std::make_pair(0x2698,"FLOWER"));
        data.insert(std::make_pair(0x2699,"GEAR"));
        data.insert(std::make_pair(0x269a,"STAFF OF HERMES"));
        data.insert(std::make_pair(0x269b,"ATOM SYMBOL"));
        data.insert(std::make_pair(0x269c,"FLEUR-DE-LIS"));
        data.insert(std::make_pair(0x269d,"OUTLINED WHITE STAR"));
        data.insert(std::make_pair(0x269e,"THREE LINES CONVERGING RIGHT"));
        data.insert(std::make_pair(0x269f,"THREE LINES CONVERGING LEFT"));
        data.insert(std::make_pair(0x26a0,"WARNING SIGN"));
        data.insert(std::make_pair(0x26a1,"HIGH VOLTAGE SIGN"));
        data.insert(std::make_pair(0x26a2,"DOUBLED FEMALE SIGN"));
        data.insert(std::make_pair(0x26a3,"DOUBLED MALE SIGN"));
        data.insert(std::make_pair(0x26a4,"INTERLOCKED FEMALE AND MALE SIGN"));
        data.insert(std::make_pair(0x26a5,"MALE AND FEMALE SIGN"));
        data.insert(std::make_pair(0x26a6,"MALE WITH STROKE SIGN"));
        data.insert(std::make_pair(0x26a7,"MALE WITH STROKE AND MALE AND FEMALE SIGN"));
        data.insert(std::make_pair(0x26a8,"VERTICAL MALE WITH STROKE SIGN"));
        data.insert(std::make_pair(0x26a9,"HORIZONTAL MALE WITH STROKE SIGN"));
        data.insert(std::make_pair(0x26aa,"MEDIUM WHITE CIRCLE"));
        data.insert(std::make_pair(0x26ab,"MEDIUM BLACK CIRCLE"));
        data.insert(std::make_pair(0x26ac,"MEDIUM SMALL WHITE CIRCLE"));
        data.insert(std::make_pair(0x26ad,"MARRIAGE SYMBOL"));
        data.insert(std::make_pair(0x26ae,"DIVORCE SYMBOL"));
        data.insert(std::make_pair(0x26af,"UNMARRIED PARTNERSHIP SYMBOL"));
        data.insert(std::make_pair(0x26b0,"COFFIN"));
        data.insert(std::make_pair(0x26b1,"FUNERAL URN"));
        data.insert(std::make_pair(0x26b2,"NEUTER"));
        data.insert(std::make_pair(0x26b3,"CERES"));
        data.insert(std::make_pair(0x26b4,"PALLAS"));
        data.insert(std::make_pair(0x26b5,"JUNO"));
        data.insert(std::make_pair(0x26b6,"VESTA"));
        data.insert(std::make_pair(0x26b7,"CHIRON"));
        data.insert(std::make_pair(0x26b8,"BLACK MOON LILITH"));
        data.insert(std::make_pair(0x26b9,"SEXTILE"));
        data.insert(std::make_pair(0x26ba,"SEMISEXTILE"));
        data.insert(std::make_pair(0x26bb,"QUINCUNX"));
        data.insert(std::make_pair(0x26bc,"SESQUIQUADRATE"));
        data.insert(std::make_pair(0x26bd,"SOCCER BALL"));
        data.insert(std::make_pair(0x26be,"BASEBALL"));
        data.insert(std::make_pair(0x26bf,"SQUARED KEY"));
        data.insert(std::make_pair(0x26c0,"WHITE DRAUGHTS MAN"));
        data.insert(std::make_pair(0x26c1,"WHITE DRAUGHTS KING"));
        data.insert(std::make_pair(0x26c2,"BLACK DRAUGHTS MAN"));
        data.insert(std::make_pair(0x26c3,"BLACK DRAUGHTS KING"));
        data.insert(std::make_pair(0x26c4,"SNOWMAN WITHOUT SNOW"));
        data.insert(std::make_pair(0x26c5,"SUN BEHIND CLOUD"));
        data.insert(std::make_pair(0x26c6,"RAIN"));
        data.insert(std::make_pair(0x26c7,"BLACK SNOWMAN"));
        data.insert(std::make_pair(0x26c8,"THUNDER CLOUD AND RAIN"));
        data.insert(std::make_pair(0x26c9,"TURNED WHITE SHOGI PIECE"));
        data.insert(std::make_pair(0x26ca,"TURNED BLACK SHOGI PIECE"));
        data.insert(std::make_pair(0x26cb,"WHITE DIAMOND IN SQUARE"));
        data.insert(std::make_pair(0x26cc,"CROSSING LANES"));
        data.insert(std::make_pair(0x26cd,"DISABLED CAR"));
        data.insert(std::make_pair(0x26ce,"OPHIUCHUS"));
        data.insert(std::make_pair(0x26cf,"PICK"));
        data.insert(std::make_pair(0x26d0,"CAR SLIDING"));
        data.insert(std::make_pair(0x26d1,"HELMET WITH WHITE CROSS"));
        data.insert(std::make_pair(0x26d2,"CIRCLED CROSSING LANES"));
        data.insert(std::make_pair(0x26d3,"CHAINS"));
        data.insert(std::make_pair(0x26d4,"NO ENTRY"));
        data.insert(std::make_pair(0x26d5,"ALTERNATE ONE-WAY LEFT WAY TRAFFIC"));
        data.insert(std::make_pair(0x26d6,"BLACK TWO-WAY LEFT WAY TRAFFIC"));
        data.insert(std::make_pair(0x26d7,"WHITE TWO-WAY LEFT WAY TRAFFIC"));
        data.insert(std::make_pair(0x26d8,"BLACK LEFT LANE MERGE"));
        data.insert(std::make_pair(0x26d9,"WHITE LEFT LANE MERGE"));
        data.insert(std::make_pair(0x26da,"DRIVE SLOW SIGN"));
        data.insert(std::make_pair(0x26db,"HEAVY WHITE DOWN-POINTING TRIANGLE"));
        data.insert(std::make_pair(0x26dc,"LEFT CLOSED ENTRY"));
        data.insert(std::make_pair(0x26dd,"SQUARED SALTIRE"));
        data.insert(std::make_pair(0x26de,"FALLING DIAGONAL IN WHITE CIRCLE IN BLACK SQUARE"));
        data.insert(std::make_pair(0x26df,"BLACK TRUCK"));
        data.insert(std::make_pair(0x26e0,"RESTRICTED LEFT ENTRY-1"));
        data.insert(std::make_pair(0x26e1,"RESTRICTED LEFT ENTRY-2"));
        data.insert(std::make_pair(0x26e2,"ASTRONOMICAL SYMBOL FOR URANUS"));
        data.insert(std::make_pair(0x26e3,"HEAVY CIRCLE WITH STROKE AND TWO DOTS ABOVE"));
        data.insert(std::make_pair(0x26e4,"PENTAGRAM"));
        data.insert(std::make_pair(0x26e5,"RIGHT-HANDED INTERLACED PENTAGRAM"));
        data.insert(std::make_pair(0x26e6,"LEFT-HANDED INTERLACED PENTAGRAM"));
        data.insert(std::make_pair(0x26e7,"INVERTED PENTAGRAM"));
        data.insert(std::make_pair(0x26e8,"BLACK CROSS ON SHIELD"));
        data.insert(std::make_pair(0x26e9,"SHINTO SHRINE"));
        data.insert(std::make_pair(0x26ea,"CHURCH"));
        data.insert(std::make_pair(0x26eb,"CASTLE"));
        data.insert(std::make_pair(0x26ec,"HISTORIC SITE"));
        data.insert(std::make_pair(0x26ed,"GEAR WITHOUT HUB"));
        data.insert(std::make_pair(0x26ee,"GEAR WITH HANDLES"));
        data.insert(std::make_pair(0x26ef,"MAP SYMBOL FOR LIGHTHOUSE"));
        data.insert(std::make_pair(0x26f0,"MOUNTAIN"));
        data.insert(std::make_pair(0x26f1,"UMBRELLA ON GROUND"));
        data.insert(std::make_pair(0x26f2,"FOUNTAIN"));
        data.insert(std::make_pair(0x26f3,"FLAG IN HOLE"));
        data.insert(std::make_pair(0x26f4,"FERRY"));
        data.insert(std::make_pair(0x26f5,"SAILBOAT"));
        data.insert(std::make_pair(0x26f6,"SQUARE FOUR CORNERS"));
        data.insert(std::make_pair(0x26f7,"SKIER"));
        data.insert(std::make_pair(0x26f8,"ICE SKATE"));
        data.insert(std::make_pair(0x26f9,"PERSON WITH BALL"));
        data.insert(std::make_pair(0x26fa,"TENT"));
        data.insert(std::make_pair(0x26fb,"JAPANESE BANK SYMBOL"));
        data.insert(std::make_pair(0x26fc,"HEADSTONE GRAVEYARD SYMBOL"));
        data.insert(std::make_pair(0x26fd,"FUEL PUMP"));
        data.insert(std::make_pair(0x26fe,"CUP ON BLACK SQUARE"));
        data.insert(std::make_pair(0x26ff,"WHITE FLAG WITH HORIZONTAL MIDDLE BLACK STRIPE"));
        data.insert(std::make_pair(0x2700,"BLACK SAFETY SCISSORS"));
        data.insert(std::make_pair(0x2701,"UPPER BLADE SCISSORS"));
        data.insert(std::make_pair(0x2702,"BLACK SCISSORS"));
        data.insert(std::make_pair(0x2703,"LOWER BLADE SCISSORS"));
        data.insert(std::make_pair(0x2704,"WHITE SCISSORS"));
        data.insert(std::make_pair(0x2705,"WHITE HEAVY CHECK MARK"));
        data.insert(std::make_pair(0x2706,"TELEPHONE LOCATION SIGN"));
        data.insert(std::make_pair(0x2707,"TAPE DRIVE"));
        data.insert(std::make_pair(0x2708,"AIRPLANE"));
        data.insert(std::make_pair(0x2709,"ENVELOPE"));
        data.insert(std::make_pair(0x270a,"RAISED FIST"));
        data.insert(std::make_pair(0x270b,"RAISED HAND"));
        data.insert(std::make_pair(0x270c,"VICTORY HAND"));
        data.insert(std::make_pair(0x270d,"WRITING HAND"));
        data.insert(std::make_pair(0x270e,"LOWER RIGHT PENCIL"));
        data.insert(std::make_pair(0x270f,"PENCIL"));
        data.insert(std::make_pair(0x2710,"UPPER RIGHT PENCIL"));
        data.insert(std::make_pair(0x2711,"WHITE NIB"));
        data.insert(std::make_pair(0x2712,"BLACK NIB"));
        data.insert(std::make_pair(0x2713,"CHECK MARK"));
        data.insert(std::make_pair(0x2714,"HEAVY CHECK MARK"));
        data.insert(std::make_pair(0x2715,"MULTIPLICATION X"));
        data.insert(std::make_pair(0x2716,"HEAVY MULTIPLICATION X"));
        data.insert(std::make_pair(0x2717,"BALLOT X"));
        data.insert(std::make_pair(0x2718,"HEAVY BALLOT X"));
        data.insert(std::make_pair(0x2719,"OUTLINED GREEK CROSS"));
        data.insert(std::make_pair(0x271a,"HEAVY GREEK CROSS"));
        data.insert(std::make_pair(0x271b,"OPEN CENTRE CROSS"));
        data.insert(std::make_pair(0x271c,"HEAVY OPEN CENTRE CROSS"));
        data.insert(std::make_pair(0x271d,"LATIN CROSS"));
        data.insert(std::make_pair(0x271e,"SHADOWED WHITE LATIN CROSS"));
        data.insert(std::make_pair(0x271f,"OUTLINED LATIN CROSS"));
        data.insert(std::make_pair(0x2720,"MALTESE CROSS"));
        data.insert(std::make_pair(0x2721,"STAR OF DAVID"));
        data.insert(std::make_pair(0x2722,"FOUR TEARDROP-SPOKED ASTERISK"));
        data.insert(std::make_pair(0x2723,"FOUR BALLOON-SPOKED ASTERISK"));
        data.insert(std::make_pair(0x2724,"HEAVY FOUR BALLOON-SPOKED ASTERISK"));
        data.insert(std::make_pair(0x2725,"FOUR CLUB-SPOKED ASTERISK"));
        data.insert(std::make_pair(0x2726,"BLACK FOUR POINTED STAR"));
        data.insert(std::make_pair(0x2727,"WHITE FOUR POINTED STAR"));
        data.insert(std::make_pair(0x2728,"SPARKLES"));
        data.insert(std::make_pair(0x2729,"STRESS OUTLINED WHITE STAR"));
        data.insert(std::make_pair(0x272a,"CIRCLED WHITE STAR"));
        data.insert(std::make_pair(0x272b,"OPEN CENTRE BLACK STAR"));
        data.insert(std::make_pair(0x272c,"BLACK CENTRE WHITE STAR"));
        data.insert(std::make_pair(0x272d,"OUTLINED BLACK STAR"));
        data.insert(std::make_pair(0x272e,"HEAVY OUTLINED BLACK STAR"));
        data.insert(std::make_pair(0x272f,"PINWHEEL STAR"));
        data.insert(std::make_pair(0x2730,"SHADOWED WHITE STAR"));
        data.insert(std::make_pair(0x2731,"HEAVY ASTERISK"));
        data.insert(std::make_pair(0x2732,"OPEN CENTRE ASTERISK"));
        data.insert(std::make_pair(0x2733,"EIGHT SPOKED ASTERISK"));
        data.insert(std::make_pair(0x2734,"EIGHT POINTED BLACK STAR"));
        data.insert(std::make_pair(0x2735,"EIGHT POINTED PINWHEEL STAR"));
        data.insert(std::make_pair(0x2736,"SIX POINTED BLACK STAR"));
        data.insert(std::make_pair(0x2737,"EIGHT POINTED RECTILINEAR BLACK STAR"));
        data.insert(std::make_pair(0x2738,"HEAVY EIGHT POINTED RECTILINEAR BLACK STAR"));
        data.insert(std::make_pair(0x2739,"TWELVE POINTED BLACK STAR"));
        data.insert(std::make_pair(0x273a,"SIXTEEN POINTED ASTERISK"));
        data.insert(std::make_pair(0x273b,"TEARDROP-SPOKED ASTERISK"));
        data.insert(std::make_pair(0x273c,"OPEN CENTRE TEARDROP-SPOKED ASTERISK"));
        data.insert(std::make_pair(0x273d,"HEAVY TEARDROP-SPOKED ASTERISK"));
        data.insert(std::make_pair(0x273e,"SIX PETALLED BLACK AND WHITE FLORETTE"));
        data.insert(std::make_pair(0x273f,"BLACK FLORETTE"));
        data.insert(std::make_pair(0x2740,"WHITE FLORETTE"));
        data.insert(std::make_pair(0x2741,"EIGHT PETALLED OUTLINED BLACK FLORETTE"));
        data.insert(std::make_pair(0x2742,"CIRCLED OPEN CENTRE EIGHT POINTED STAR"));
        data.insert(std::make_pair(0x2743,"HEAVY TEARDROP-SPOKED PINWHEEL ASTERISK"));
        data.insert(std::make_pair(0x2744,"SNOWFLAKE"));
        data.insert(std::make_pair(0x2745,"TIGHT TRIFOLIATE SNOWFLAKE"));
        data.insert(std::make_pair(0x2746,"HEAVY CHEVRON SNOWFLAKE"));
        data.insert(std::make_pair(0x2747,"SPARKLE"));
        data.insert(std::make_pair(0x2748,"HEAVY SPARKLE"));
        data.insert(std::make_pair(0x2749,"BALLOON-SPOKED ASTERISK"));
        data.insert(std::make_pair(0x274a,"EIGHT TEARDROP-SPOKED PROPELLER ASTERISK"));
        data.insert(std::make_pair(0x274b,"HEAVY EIGHT TEARDROP-SPOKED PROPELLER ASTERISK"));
        data.insert(std::make_pair(0x274c,"CROSS MARK"));
        data.insert(std::make_pair(0x274d,"SHADOWED WHITE CIRCLE"));
        data.insert(std::make_pair(0x274e,"NEGATIVE SQUARED CROSS MARK"));
        data.insert(std::make_pair(0x274f,"LOWER RIGHT DROP-SHADOWED WHITE SQUARE"));
        data.insert(std::make_pair(0x2750,"UPPER RIGHT DROP-SHADOWED WHITE SQUARE"));
        data.insert(std::make_pair(0x2751,"LOWER RIGHT SHADOWED WHITE SQUARE"));
        data.insert(std::make_pair(0x2752,"UPPER RIGHT SHADOWED WHITE SQUARE"));
        data.insert(std::make_pair(0x2753,"BLACK QUESTION MARK ORNAMENT"));
        data.insert(std::make_pair(0x2754,"WHITE QUESTION MARK ORNAMENT"));
        data.insert(std::make_pair(0x2755,"WHITE EXCLAMATION MARK ORNAMENT"));
        data.insert(std::make_pair(0x2756,"BLACK DIAMOND MINUS WHITE X"));
        data.insert(std::make_pair(0x2757,"HEAVY EXCLAMATION MARK SYMBOL"));
        data.insert(std::make_pair(0x2758,"LIGHT VERTICAL BAR"));
        data.insert(std::make_pair(0x2759,"MEDIUM VERTICAL BAR"));
        data.insert(std::make_pair(0x275a,"HEAVY VERTICAL BAR"));
        data.insert(std::make_pair(0x275b,"HEAVY SINGLE TURNED COMMA QUOTATION MARK ORNAMENT"));
        data.insert(std::make_pair(0x275c,"HEAVY SINGLE COMMA QUOTATION MARK ORNAMENT"));
        data.insert(std::make_pair(0x275d,"HEAVY DOUBLE TURNED COMMA QUOTATION MARK ORNAMENT"));
        data.insert(std::make_pair(0x275e,"HEAVY DOUBLE COMMA QUOTATION MARK ORNAMENT"));
        data.insert(std::make_pair(0x275f,"HEAVY LOW SINGLE COMMA QUOTATION MARK ORNAMENT"));
        data.insert(std::make_pair(0x2760,"HEAVY LOW DOUBLE COMMA QUOTATION MARK ORNAMENT"));
        data.insert(std::make_pair(0x2761,"CURVED STEM PARAGRAPH SIGN ORNAMENT"));
        data.insert(std::make_pair(0x2762,"HEAVY EXCLAMATION MARK ORNAMENT"));
        data.insert(std::make_pair(0x2763,"HEAVY HEART EXCLAMATION MARK ORNAMENT"));
        data.insert(std::make_pair(0x2764,"HEAVY BLACK HEART"));
        data.insert(std::make_pair(0x2765,"ROTATED HEAVY BLACK HEART BULLET"));
        data.insert(std::make_pair(0x2766,"FLORAL HEART"));
        data.insert(std::make_pair(0x2767,"ROTATED FLORAL HEART BULLET"));
        data.insert(std::make_pair(0x2768,"MEDIUM LEFT PARENTHESIS ORNAMENT"));
        data.insert(std::make_pair(0x2769,"MEDIUM RIGHT PARENTHESIS ORNAMENT"));
        data.insert(std::make_pair(0x276a,"MEDIUM FLATTENED LEFT PARENTHESIS ORNAMENT"));
        data.insert(std::make_pair(0x276b,"MEDIUM FLATTENED RIGHT PARENTHESIS ORNAMENT"));
        data.insert(std::make_pair(0x276c,"MEDIUM LEFT-POINTING ANGLE BRACKET ORNAMENT"));
        data.insert(std::make_pair(0x276d,"MEDIUM RIGHT-POINTING ANGLE BRACKET ORNAMENT"));
        data.insert(std::make_pair(0x276e,"HEAVY LEFT-POINTING ANGLE QUOTATION MARK ORNAMENT"));
        data.insert(std::make_pair(0x276f,"HEAVY RIGHT-POINTING ANGLE QUOTATION MARK ORNAMENT"));
        data.insert(std::make_pair(0x2770,"HEAVY LEFT-POINTING ANGLE BRACKET ORNAMENT"));
        data.insert(std::make_pair(0x2771,"HEAVY RIGHT-POINTING ANGLE BRACKET ORNAMENT"));
        data.insert(std::make_pair(0x2772,"LIGHT LEFT TORTOISE SHELL BRACKET ORNAMENT"));
        data.insert(std::make_pair(0x2773,"LIGHT RIGHT TORTOISE SHELL BRACKET ORNAMENT"));
        data.insert(std::make_pair(0x2774,"MEDIUM LEFT CURLY BRACKET ORNAMENT"));
        data.insert(std::make_pair(0x2775,"MEDIUM RIGHT CURLY BRACKET ORNAMENT"));
        data.insert(std::make_pair(0x2776,"DINGBAT NEGATIVE CIRCLED DIGIT ONE"));
        data.insert(std::make_pair(0x2777,"DINGBAT NEGATIVE CIRCLED DIGIT TWO"));
        data.insert(std::make_pair(0x2778,"DINGBAT NEGATIVE CIRCLED DIGIT THREE"));
        data.insert(std::make_pair(0x2779,"DINGBAT NEGATIVE CIRCLED DIGIT FOUR"));
        data.insert(std::make_pair(0x277a,"DINGBAT NEGATIVE CIRCLED DIGIT FIVE"));
        data.insert(std::make_pair(0x277b,"DINGBAT NEGATIVE CIRCLED DIGIT SIX"));
        data.insert(std::make_pair(0x277c,"DINGBAT NEGATIVE CIRCLED DIGIT SEVEN"));
        data.insert(std::make_pair(0x277d,"DINGBAT NEGATIVE CIRCLED DIGIT EIGHT"));
        data.insert(std::make_pair(0x277e,"DINGBAT NEGATIVE CIRCLED DIGIT NINE"));
        data.insert(std::make_pair(0x277f,"DINGBAT NEGATIVE CIRCLED NUMBER TEN"));
        data.insert(std::make_pair(0x2780,"DINGBAT CIRCLED SANS-SERIF DIGIT ONE"));
        data.insert(std::make_pair(0x2781,"DINGBAT CIRCLED SANS-SERIF DIGIT TWO"));
        data.insert(std::make_pair(0x2782,"DINGBAT CIRCLED SANS-SERIF DIGIT THREE"));
        data.insert(std::make_pair(0x2783,"DINGBAT CIRCLED SANS-SERIF DIGIT FOUR"));
        data.insert(std::make_pair(0x2784,"DINGBAT CIRCLED SANS-SERIF DIGIT FIVE"));
        data.insert(std::make_pair(0x2785,"DINGBAT CIRCLED SANS-SERIF DIGIT SIX"));
        data.insert(std::make_pair(0x2786,"DINGBAT CIRCLED SANS-SERIF DIGIT SEVEN"));
        data.insert(std::make_pair(0x2787,"DINGBAT CIRCLED SANS-SERIF DIGIT EIGHT"));
        data.insert(std::make_pair(0x2788,"DINGBAT CIRCLED SANS-SERIF DIGIT NINE"));
        data.insert(std::make_pair(0x2789,"DINGBAT CIRCLED SANS-SERIF NUMBER TEN"));
        data.insert(std::make_pair(0x278a,"DINGBAT NEGATIVE CIRCLED SANS-SERIF DIGIT ONE"));
        data.insert(std::make_pair(0x278b,"DINGBAT NEGATIVE CIRCLED SANS-SERIF DIGIT TWO"));
        data.insert(std::make_pair(0x278c,"DINGBAT NEGATIVE CIRCLED SANS-SERIF DIGIT THREE"));
        data.insert(std::make_pair(0x278d,"DINGBAT NEGATIVE CIRCLED SANS-SERIF DIGIT FOUR"));
        data.insert(std::make_pair(0x278e,"DINGBAT NEGATIVE CIRCLED SANS-SERIF DIGIT FIVE"));
        data.insert(std::make_pair(0x278f,"DINGBAT NEGATIVE CIRCLED SANS-SERIF DIGIT SIX"));
        data.insert(std::make_pair(0x2790,"DINGBAT NEGATIVE CIRCLED SANS-SERIF DIGIT SEVEN"));
        data.insert(std::make_pair(0x2791,"DINGBAT NEGATIVE CIRCLED SANS-SERIF DIGIT EIGHT"));
        data.insert(std::make_pair(0x2792,"DINGBAT NEGATIVE CIRCLED SANS-SERIF DIGIT NINE"));
        data.insert(std::make_pair(0x2793,"DINGBAT NEGATIVE CIRCLED SANS-SERIF NUMBER TEN"));
        data.insert(std::make_pair(0x2794,"HEAVY WIDE-HEADED RIGHTWARDS ARROW"));
        data.insert(std::make_pair(0x2795,"HEAVY PLUS SIGN"));
        data.insert(std::make_pair(0x2796,"HEAVY MINUS SIGN"));
        data.insert(std::make_pair(0x2797,"HEAVY DIVISION SIGN"));
        data.insert(std::make_pair(0x2798,"HEAVY SOUTH EAST ARROW"));
        data.insert(std::make_pair(0x2799,"HEAVY RIGHTWARDS ARROW"));
        data.insert(std::make_pair(0x279a,"HEAVY NORTH EAST ARROW"));
        data.insert(std::make_pair(0x279b,"DRAFTING POINT RIGHTWARDS ARROW"));
        data.insert(std::make_pair(0x279c,"HEAVY ROUND-TIPPED RIGHTWARDS ARROW"));
        data.insert(std::make_pair(0x279d,"TRIANGLE-HEADED RIGHTWARDS ARROW"));
        data.insert(std::make_pair(0x279e,"HEAVY TRIANGLE-HEADED RIGHTWARDS ARROW"));
        data.insert(std::make_pair(0x279f,"DASHED TRIANGLE-HEADED RIGHTWARDS ARROW"));
        data.insert(std::make_pair(0x27a0,"HEAVY DASHED TRIANGLE-HEADED RIGHTWARDS ARROW"));
        data.insert(std::make_pair(0x27a1,"BLACK RIGHTWARDS ARROW"));
        data.insert(std::make_pair(0x27a2,"THREE-D TOP-LIGHTED RIGHTWARDS ARROWHEAD"));
        data.insert(std::make_pair(0x27a3,"THREE-D BOTTOM-LIGHTED RIGHTWARDS ARROWHEAD"));
        data.insert(std::make_pair(0x27a4,"BLACK RIGHTWARDS ARROWHEAD"));
        data.insert(std::make_pair(0x27a5,"HEAVY BLACK CURVED DOWNWARDS AND RIGHTWARDS ARROW"));
        data.insert(std::make_pair(0x27a6,"HEAVY BLACK CURVED UPWARDS AND RIGHTWARDS ARROW"));
        data.insert(std::make_pair(0x27a7,"SQUAT BLACK RIGHTWARDS ARROW"));
        data.insert(std::make_pair(0x27a8,"HEAVY CONCAVE-POINTED BLACK RIGHTWARDS ARROW"));
        data.insert(std::make_pair(0x27a9,"RIGHT-SHADED WHITE RIGHTWARDS ARROW"));
        data.insert(std::make_pair(0x27aa,"LEFT-SHADED WHITE RIGHTWARDS ARROW"));
        data.insert(std::make_pair(0x27ab,"BACK-TILTED SHADOWED WHITE RIGHTWARDS ARROW"));
        data.insert(std::make_pair(0x27ac,"FRONT-TILTED SHADOWED WHITE RIGHTWARDS ARROW"));
        data.insert(std::make_pair(0x27ad,"HEAVY LOWER RIGHT-SHADOWED WHITE RIGHTWARDS ARROW"));
        data.insert(std::make_pair(0x27ae,"HEAVY UPPER RIGHT-SHADOWED WHITE RIGHTWARDS ARROW"));
        data.insert(std::make_pair(0x27af,"NOTCHED LOWER RIGHT-SHADOWED WHITE RIGHTWARDS ARROW"));
        data.insert(std::make_pair(0x27b0,"CURLY LOOP"));
        data.insert(std::make_pair(0x27b1,"NOTCHED UPPER RIGHT-SHADOWED WHITE RIGHTWARDS ARROW"));
        data.insert(std::make_pair(0x27b2,"CIRCLED HEAVY WHITE RIGHTWARDS ARROW"));
        data.insert(std::make_pair(0x27b3,"WHITE-FEATHERED RIGHTWARDS ARROW"));
        data.insert(std::make_pair(0x27b4,"BLACK-FEATHERED SOUTH EAST ARROW"));
        data.insert(std::make_pair(0x27b5,"BLACK-FEATHERED RIGHTWARDS ARROW"));
        data.insert(std::make_pair(0x27b6,"BLACK-FEATHERED NORTH EAST ARROW"));
        data.insert(std::make_pair(0x27b7,"HEAVY BLACK-FEATHERED SOUTH EAST ARROW"));
        data.insert(std::make_pair(0x27b8,"HEAVY BLACK-FEATHERED RIGHTWARDS ARROW"));
        data.insert(std::make_pair(0x27b9,"HEAVY BLACK-FEATHERED NORTH EAST ARROW"));
        data.insert(std::make_pair(0x27ba,"TEARDROP-BARBED RIGHTWARDS ARROW"));
        data.insert(std::make_pair(0x27bb,"HEAVY TEARDROP-SHANKED RIGHTWARDS ARROW"));
        data.insert(std::make_pair(0x27bc,"WEDGE-TAILED RIGHTWARDS ARROW"));
        data.insert(std::make_pair(0x27bd,"HEAVY WEDGE-TAILED RIGHTWARDS ARROW"));
        data.insert(std::make_pair(0x27be,"OPEN-OUTLINED RIGHTWARDS ARROW"));
        data.insert(std::make_pair(0x27bf,"DOUBLE CURLY LOOP"));
        data.insert(std::make_pair(0x27c0,"THREE DIMENSIONAL ANGLE"));
        data.insert(std::make_pair(0x27c1,"WHITE TRIANGLE CONTAINING SMALL WHITE TRIANGLE"));
        data.insert(std::make_pair(0x27c2,"PERPENDICULAR"));
        data.insert(std::make_pair(0x27c3,"OPEN SUBSET"));
        data.insert(std::make_pair(0x27c4,"OPEN SUPERSET"));
        data.insert(std::make_pair(0x27c5,"LEFT S-SHAPED BAG DELIMITER"));
        data.insert(std::make_pair(0x27c6,"RIGHT S-SHAPED BAG DELIMITER"));
        data.insert(std::make_pair(0x27c7,"OR WITH DOT INSIDE"));
        data.insert(std::make_pair(0x27c8,"REVERSE SOLIDUS PRECEDING SUBSET"));
        data.insert(std::make_pair(0x27c9,"SUPERSET PRECEDING SOLIDUS"));
        data.insert(std::make_pair(0x27ca,"VERTICAL BAR WITH HORIZONTAL STROKE"));
        data.insert(std::make_pair(0x27cb,"MATHEMATICAL RISING DIAGONAL"));
        data.insert(std::make_pair(0x27cc,"LONG DIVISION"));
        data.insert(std::make_pair(0x27cd,"MATHEMATICAL FALLING DIAGONAL"));
        data.insert(std::make_pair(0x27ce,"SQUARED LOGICAL AND"));
        data.insert(std::make_pair(0x27cf,"SQUARED LOGICAL OR"));
        data.insert(std::make_pair(0x27d0,"WHITE DIAMOND WITH CENTRED DOT"));
        data.insert(std::make_pair(0x27d1,"AND WITH DOT"));
        data.insert(std::make_pair(0x27d2,"ELEMENT OF OPENING UPWARDS"));
        data.insert(std::make_pair(0x27d3,"LOWER RIGHT CORNER WITH DOT"));
        data.insert(std::make_pair(0x27d4,"UPPER LEFT CORNER WITH DOT"));
        data.insert(std::make_pair(0x27d5,"LEFT OUTER JOIN"));
        data.insert(std::make_pair(0x27d6,"RIGHT OUTER JOIN"));
        data.insert(std::make_pair(0x27d7,"FULL OUTER JOIN"));
        data.insert(std::make_pair(0x27d8,"LARGE UP TACK"));
        data.insert(std::make_pair(0x27d9,"LARGE DOWN TACK"));
        data.insert(std::make_pair(0x27da,"LEFT AND RIGHT DOUBLE TURNSTILE"));
        data.insert(std::make_pair(0x27db,"LEFT AND RIGHT TACK"));
        data.insert(std::make_pair(0x27dc,"LEFT MULTIMAP"));
        data.insert(std::make_pair(0x27dd,"LONG RIGHT TACK"));
        data.insert(std::make_pair(0x27de,"LONG LEFT TACK"));
        data.insert(std::make_pair(0x27df,"UP TACK WITH CIRCLE ABOVE"));
        data.insert(std::make_pair(0x27e0,"LOZENGE DIVIDED BY HORIZONTAL RULE"));
        data.insert(std::make_pair(0x27e1,"WHITE CONCAVE-SIDED DIAMOND"));
        data.insert(std::make_pair(0x27e2,"WHITE CONCAVE-SIDED DIAMOND WITH LEFTWARDS TICK"));
        data.insert(std::make_pair(0x27e3,"WHITE CONCAVE-SIDED DIAMOND WITH RIGHTWARDS TICK"));
        data.insert(std::make_pair(0x27e4,"WHITE SQUARE WITH LEFTWARDS TICK"));
        data.insert(std::make_pair(0x27e5,"WHITE SQUARE WITH RIGHTWARDS TICK"));
        data.insert(std::make_pair(0x27e6,"MATHEMATICAL LEFT WHITE SQUARE BRACKET"));
        data.insert(std::make_pair(0x27e7,"MATHEMATICAL RIGHT WHITE SQUARE BRACKET"));
        data.insert(std::make_pair(0x27e8,"MATHEMATICAL LEFT ANGLE BRACKET"));
        data.insert(std::make_pair(0x27e9,"MATHEMATICAL RIGHT ANGLE BRACKET"));
        data.insert(std::make_pair(0x27ea,"MATHEMATICAL LEFT DOUBLE ANGLE BRACKET"));
        data.insert(std::make_pair(0x27eb,"MATHEMATICAL RIGHT DOUBLE ANGLE BRACKET"));
        data.insert(std::make_pair(0x27ec,"MATHEMATICAL LEFT WHITE TORTOISE SHELL BRACKET"));
        data.insert(std::make_pair(0x27ed,"MATHEMATICAL RIGHT WHITE TORTOISE SHELL BRACKET"));
        data.insert(std::make_pair(0x27ee,"MATHEMATICAL LEFT FLATTENED PARENTHESIS"));
        data.insert(std::make_pair(0x27ef,"MATHEMATICAL RIGHT FLATTENED PARENTHESIS"));
        data.insert(std::make_pair(0x27f0,"UPWARDS QUADRUPLE ARROW"));
        data.insert(std::make_pair(0x27f1,"DOWNWARDS QUADRUPLE ARROW"));
        data.insert(std::make_pair(0x27f2,"ANTICLOCKWISE GAPPED CIRCLE ARROW"));
        data.insert(std::make_pair(0x27f3,"CLOCKWISE GAPPED CIRCLE ARROW"));
        data.insert(std::make_pair(0x27f4,"RIGHT ARROW WITH CIRCLED PLUS"));
        data.insert(std::make_pair(0x27f5,"LONG LEFTWARDS ARROW"));
        data.insert(std::make_pair(0x27f6,"LONG RIGHTWARDS ARROW"));
        data.insert(std::make_pair(0x27f7,"LONG LEFT RIGHT ARROW"));
        data.insert(std::make_pair(0x27f8,"LONG LEFTWARDS DOUBLE ARROW"));
        data.insert(std::make_pair(0x27f9,"LONG RIGHTWARDS DOUBLE ARROW"));
        data.insert(std::make_pair(0x27fa,"LONG LEFT RIGHT DOUBLE ARROW"));
        data.insert(std::make_pair(0x27fb,"LONG LEFTWARDS ARROW FROM BAR"));
        data.insert(std::make_pair(0x27fc,"LONG RIGHTWARDS ARROW FROM BAR"));
        data.insert(std::make_pair(0x27fd,"LONG LEFTWARDS DOUBLE ARROW FROM BAR"));
        data.insert(std::make_pair(0x27fe,"LONG RIGHTWARDS DOUBLE ARROW FROM BAR"));
        data.insert(std::make_pair(0x27ff,"LONG RIGHTWARDS SQUIGGLE ARROW"));
        data.insert(std::make_pair(0x2800,"BRAILLE PATTERN BLANK"));
        data.insert(std::make_pair(0x2801,"BRAILLE PATTERN DOTS-1"));
        data.insert(std::make_pair(0x2802,"BRAILLE PATTERN DOTS-2"));
        data.insert(std::make_pair(0x2803,"BRAILLE PATTERN DOTS-12"));
        data.insert(std::make_pair(0x2804,"BRAILLE PATTERN DOTS-3"));
        data.insert(std::make_pair(0x2805,"BRAILLE PATTERN DOTS-13"));
        data.insert(std::make_pair(0x2806,"BRAILLE PATTERN DOTS-23"));
        data.insert(std::make_pair(0x2807,"BRAILLE PATTERN DOTS-123"));
        data.insert(std::make_pair(0x2808,"BRAILLE PATTERN DOTS-4"));
        data.insert(std::make_pair(0x2809,"BRAILLE PATTERN DOTS-14"));
        data.insert(std::make_pair(0x280a,"BRAILLE PATTERN DOTS-24"));
        data.insert(std::make_pair(0x280b,"BRAILLE PATTERN DOTS-124"));
        data.insert(std::make_pair(0x280c,"BRAILLE PATTERN DOTS-34"));
        data.insert(std::make_pair(0x280d,"BRAILLE PATTERN DOTS-134"));
        data.insert(std::make_pair(0x280e,"BRAILLE PATTERN DOTS-234"));
        data.insert(std::make_pair(0x280f,"BRAILLE PATTERN DOTS-1234"));
        data.insert(std::make_pair(0x2810,"BRAILLE PATTERN DOTS-5"));
        data.insert(std::make_pair(0x2811,"BRAILLE PATTERN DOTS-15"));
        data.insert(std::make_pair(0x2812,"BRAILLE PATTERN DOTS-25"));
        data.insert(std::make_pair(0x2813,"BRAILLE PATTERN DOTS-125"));
        data.insert(std::make_pair(0x2814,"BRAILLE PATTERN DOTS-35"));
        data.insert(std::make_pair(0x2815,"BRAILLE PATTERN DOTS-135"));
        data.insert(std::make_pair(0x2816,"BRAILLE PATTERN DOTS-235"));
        data.insert(std::make_pair(0x2817,"BRAILLE PATTERN DOTS-1235"));
        data.insert(std::make_pair(0x2818,"BRAILLE PATTERN DOTS-45"));
        data.insert(std::make_pair(0x2819,"BRAILLE PATTERN DOTS-145"));
        data.insert(std::make_pair(0x281a,"BRAILLE PATTERN DOTS-245"));
        data.insert(std::make_pair(0x281b,"BRAILLE PATTERN DOTS-1245"));
        data.insert(std::make_pair(0x281c,"BRAILLE PATTERN DOTS-345"));
        data.insert(std::make_pair(0x281d,"BRAILLE PATTERN DOTS-1345"));
        data.insert(std::make_pair(0x281e,"BRAILLE PATTERN DOTS-2345"));
        data.insert(std::make_pair(0x281f,"BRAILLE PATTERN DOTS-12345"));
        data.insert(std::make_pair(0x2820,"BRAILLE PATTERN DOTS-6"));
        data.insert(std::make_pair(0x2821,"BRAILLE PATTERN DOTS-16"));
        data.insert(std::make_pair(0x2822,"BRAILLE PATTERN DOTS-26"));
        data.insert(std::make_pair(0x2823,"BRAILLE PATTERN DOTS-126"));
        data.insert(std::make_pair(0x2824,"BRAILLE PATTERN DOTS-36"));
        data.insert(std::make_pair(0x2825,"BRAILLE PATTERN DOTS-136"));
        data.insert(std::make_pair(0x2826,"BRAILLE PATTERN DOTS-236"));
        data.insert(std::make_pair(0x2827,"BRAILLE PATTERN DOTS-1236"));
        data.insert(std::make_pair(0x2828,"BRAILLE PATTERN DOTS-46"));
        data.insert(std::make_pair(0x2829,"BRAILLE PATTERN DOTS-146"));
        data.insert(std::make_pair(0x282a,"BRAILLE PATTERN DOTS-246"));
        data.insert(std::make_pair(0x282b,"BRAILLE PATTERN DOTS-1246"));
        data.insert(std::make_pair(0x282c,"BRAILLE PATTERN DOTS-346"));
        data.insert(std::make_pair(0x282d,"BRAILLE PATTERN DOTS-1346"));
        data.insert(std::make_pair(0x282e,"BRAILLE PATTERN DOTS-2346"));
        data.insert(std::make_pair(0x282f,"BRAILLE PATTERN DOTS-12346"));
        data.insert(std::make_pair(0x2830,"BRAILLE PATTERN DOTS-56"));
        data.insert(std::make_pair(0x2831,"BRAILLE PATTERN DOTS-156"));
        data.insert(std::make_pair(0x2832,"BRAILLE PATTERN DOTS-256"));
        data.insert(std::make_pair(0x2833,"BRAILLE PATTERN DOTS-1256"));
        data.insert(std::make_pair(0x2834,"BRAILLE PATTERN DOTS-356"));
        data.insert(std::make_pair(0x2835,"BRAILLE PATTERN DOTS-1356"));
        data.insert(std::make_pair(0x2836,"BRAILLE PATTERN DOTS-2356"));
        data.insert(std::make_pair(0x2837,"BRAILLE PATTERN DOTS-12356"));
        data.insert(std::make_pair(0x2838,"BRAILLE PATTERN DOTS-456"));
        data.insert(std::make_pair(0x2839,"BRAILLE PATTERN DOTS-1456"));
        data.insert(std::make_pair(0x283a,"BRAILLE PATTERN DOTS-2456"));
        data.insert(std::make_pair(0x283b,"BRAILLE PATTERN DOTS-12456"));
        data.insert(std::make_pair(0x283c,"BRAILLE PATTERN DOTS-3456"));
        data.insert(std::make_pair(0x283d,"BRAILLE PATTERN DOTS-13456"));
        data.insert(std::make_pair(0x283e,"BRAILLE PATTERN DOTS-23456"));
        data.insert(std::make_pair(0x283f,"BRAILLE PATTERN DOTS-123456"));
        data.insert(std::make_pair(0x2840,"BRAILLE PATTERN DOTS-7"));
        data.insert(std::make_pair(0x2841,"BRAILLE PATTERN DOTS-17"));
        data.insert(std::make_pair(0x2842,"BRAILLE PATTERN DOTS-27"));
        data.insert(std::make_pair(0x2843,"BRAILLE PATTERN DOTS-127"));
        data.insert(std::make_pair(0x2844,"BRAILLE PATTERN DOTS-37"));
        data.insert(std::make_pair(0x2845,"BRAILLE PATTERN DOTS-137"));
        data.insert(std::make_pair(0x2846,"BRAILLE PATTERN DOTS-237"));
        data.insert(std::make_pair(0x2847,"BRAILLE PATTERN DOTS-1237"));
        data.insert(std::make_pair(0x2848,"BRAILLE PATTERN DOTS-47"));
        data.insert(std::make_pair(0x2849,"BRAILLE PATTERN DOTS-147"));
        data.insert(std::make_pair(0x284a,"BRAILLE PATTERN DOTS-247"));
        data.insert(std::make_pair(0x284b,"BRAILLE PATTERN DOTS-1247"));
        data.insert(std::make_pair(0x284c,"BRAILLE PATTERN DOTS-347"));
        data.insert(std::make_pair(0x284d,"BRAILLE PATTERN DOTS-1347"));
        data.insert(std::make_pair(0x284e,"BRAILLE PATTERN DOTS-2347"));
        data.insert(std::make_pair(0x284f,"BRAILLE PATTERN DOTS-12347"));
        data.insert(std::make_pair(0x2850,"BRAILLE PATTERN DOTS-57"));
        data.insert(std::make_pair(0x2851,"BRAILLE PATTERN DOTS-157"));
        data.insert(std::make_pair(0x2852,"BRAILLE PATTERN DOTS-257"));
        data.insert(std::make_pair(0x2853,"BRAILLE PATTERN DOTS-1257"));
        data.insert(std::make_pair(0x2854,"BRAILLE PATTERN DOTS-357"));
        data.insert(std::make_pair(0x2855,"BRAILLE PATTERN DOTS-1357"));
        data.insert(std::make_pair(0x2856,"BRAILLE PATTERN DOTS-2357"));
        data.insert(std::make_pair(0x2857,"BRAILLE PATTERN DOTS-12357"));
        data.insert(std::make_pair(0x2858,"BRAILLE PATTERN DOTS-457"));
        data.insert(std::make_pair(0x2859,"BRAILLE PATTERN DOTS-1457"));
        data.insert(std::make_pair(0x285a,"BRAILLE PATTERN DOTS-2457"));
        data.insert(std::make_pair(0x285b,"BRAILLE PATTERN DOTS-12457"));
        data.insert(std::make_pair(0x285c,"BRAILLE PATTERN DOTS-3457"));
        data.insert(std::make_pair(0x285d,"BRAILLE PATTERN DOTS-13457"));
        data.insert(std::make_pair(0x285e,"BRAILLE PATTERN DOTS-23457"));
        data.insert(std::make_pair(0x285f,"BRAILLE PATTERN DOTS-123457"));
        data.insert(std::make_pair(0x2860,"BRAILLE PATTERN DOTS-67"));
        data.insert(std::make_pair(0x2861,"BRAILLE PATTERN DOTS-167"));
        data.insert(std::make_pair(0x2862,"BRAILLE PATTERN DOTS-267"));
        data.insert(std::make_pair(0x2863,"BRAILLE PATTERN DOTS-1267"));
        data.insert(std::make_pair(0x2864,"BRAILLE PATTERN DOTS-367"));
        data.insert(std::make_pair(0x2865,"BRAILLE PATTERN DOTS-1367"));
        data.insert(std::make_pair(0x2866,"BRAILLE PATTERN DOTS-2367"));
        data.insert(std::make_pair(0x2867,"BRAILLE PATTERN DOTS-12367"));
        data.insert(std::make_pair(0x2868,"BRAILLE PATTERN DOTS-467"));
        data.insert(std::make_pair(0x2869,"BRAILLE PATTERN DOTS-1467"));
        data.insert(std::make_pair(0x286a,"BRAILLE PATTERN DOTS-2467"));
        data.insert(std::make_pair(0x286b,"BRAILLE PATTERN DOTS-12467"));
        data.insert(std::make_pair(0x286c,"BRAILLE PATTERN DOTS-3467"));
        data.insert(std::make_pair(0x286d,"BRAILLE PATTERN DOTS-13467"));
        data.insert(std::make_pair(0x286e,"BRAILLE PATTERN DOTS-23467"));
        data.insert(std::make_pair(0x286f,"BRAILLE PATTERN DOTS-123467"));
        data.insert(std::make_pair(0x2870,"BRAILLE PATTERN DOTS-567"));
        data.insert(std::make_pair(0x2871,"BRAILLE PATTERN DOTS-1567"));
        data.insert(std::make_pair(0x2872,"BRAILLE PATTERN DOTS-2567"));
        data.insert(std::make_pair(0x2873,"BRAILLE PATTERN DOTS-12567"));
        data.insert(std::make_pair(0x2874,"BRAILLE PATTERN DOTS-3567"));
        data.insert(std::make_pair(0x2875,"BRAILLE PATTERN DOTS-13567"));
        data.insert(std::make_pair(0x2876,"BRAILLE PATTERN DOTS-23567"));
        data.insert(std::make_pair(0x2877,"BRAILLE PATTERN DOTS-123567"));
        data.insert(std::make_pair(0x2878,"BRAILLE PATTERN DOTS-4567"));
        data.insert(std::make_pair(0x2879,"BRAILLE PATTERN DOTS-14567"));
        data.insert(std::make_pair(0x287a,"BRAILLE PATTERN DOTS-24567"));
        data.insert(std::make_pair(0x287b,"BRAILLE PATTERN DOTS-124567"));
        data.insert(std::make_pair(0x287c,"BRAILLE PATTERN DOTS-34567"));
        data.insert(std::make_pair(0x287d,"BRAILLE PATTERN DOTS-134567"));
        data.insert(std::make_pair(0x287e,"BRAILLE PATTERN DOTS-234567"));
        data.insert(std::make_pair(0x287f,"BRAILLE PATTERN DOTS-1234567"));
        data.insert(std::make_pair(0x2880,"BRAILLE PATTERN DOTS-8"));
        data.insert(std::make_pair(0x2881,"BRAILLE PATTERN DOTS-18"));
        data.insert(std::make_pair(0x2882,"BRAILLE PATTERN DOTS-28"));
        data.insert(std::make_pair(0x2883,"BRAILLE PATTERN DOTS-128"));
        data.insert(std::make_pair(0x2884,"BRAILLE PATTERN DOTS-38"));
        data.insert(std::make_pair(0x2885,"BRAILLE PATTERN DOTS-138"));
        data.insert(std::make_pair(0x2886,"BRAILLE PATTERN DOTS-238"));
        data.insert(std::make_pair(0x2887,"BRAILLE PATTERN DOTS-1238"));
        data.insert(std::make_pair(0x2888,"BRAILLE PATTERN DOTS-48"));
        data.insert(std::make_pair(0x2889,"BRAILLE PATTERN DOTS-148"));
        data.insert(std::make_pair(0x288a,"BRAILLE PATTERN DOTS-248"));
        data.insert(std::make_pair(0x288b,"BRAILLE PATTERN DOTS-1248"));
        data.insert(std::make_pair(0x288c,"BRAILLE PATTERN DOTS-348"));
        data.insert(std::make_pair(0x288d,"BRAILLE PATTERN DOTS-1348"));
        data.insert(std::make_pair(0x288e,"BRAILLE PATTERN DOTS-2348"));
        data.insert(std::make_pair(0x288f,"BRAILLE PATTERN DOTS-12348"));
        data.insert(std::make_pair(0x2890,"BRAILLE PATTERN DOTS-58"));
        data.insert(std::make_pair(0x2891,"BRAILLE PATTERN DOTS-158"));
        data.insert(std::make_pair(0x2892,"BRAILLE PATTERN DOTS-258"));
        data.insert(std::make_pair(0x2893,"BRAILLE PATTERN DOTS-1258"));
        data.insert(std::make_pair(0x2894,"BRAILLE PATTERN DOTS-358"));
        data.insert(std::make_pair(0x2895,"BRAILLE PATTERN DOTS-1358"));
        data.insert(std::make_pair(0x2896,"BRAILLE PATTERN DOTS-2358"));
        data.insert(std::make_pair(0x2897,"BRAILLE PATTERN DOTS-12358"));
        data.insert(std::make_pair(0x2898,"BRAILLE PATTERN DOTS-458"));
        data.insert(std::make_pair(0x2899,"BRAILLE PATTERN DOTS-1458"));
        data.insert(std::make_pair(0x289a,"BRAILLE PATTERN DOTS-2458"));
        data.insert(std::make_pair(0x289b,"BRAILLE PATTERN DOTS-12458"));
        data.insert(std::make_pair(0x289c,"BRAILLE PATTERN DOTS-3458"));
        data.insert(std::make_pair(0x289d,"BRAILLE PATTERN DOTS-13458"));
        data.insert(std::make_pair(0x289e,"BRAILLE PATTERN DOTS-23458"));
        data.insert(std::make_pair(0x289f,"BRAILLE PATTERN DOTS-123458"));
        data.insert(std::make_pair(0x28a0,"BRAILLE PATTERN DOTS-68"));
        data.insert(std::make_pair(0x28a1,"BRAILLE PATTERN DOTS-168"));
        data.insert(std::make_pair(0x28a2,"BRAILLE PATTERN DOTS-268"));
        data.insert(std::make_pair(0x28a3,"BRAILLE PATTERN DOTS-1268"));
        data.insert(std::make_pair(0x28a4,"BRAILLE PATTERN DOTS-368"));
        data.insert(std::make_pair(0x28a5,"BRAILLE PATTERN DOTS-1368"));
        data.insert(std::make_pair(0x28a6,"BRAILLE PATTERN DOTS-2368"));
        data.insert(std::make_pair(0x28a7,"BRAILLE PATTERN DOTS-12368"));
        data.insert(std::make_pair(0x28a8,"BRAILLE PATTERN DOTS-468"));
        data.insert(std::make_pair(0x28a9,"BRAILLE PATTERN DOTS-1468"));
        data.insert(std::make_pair(0x28aa,"BRAILLE PATTERN DOTS-2468"));
        data.insert(std::make_pair(0x28ab,"BRAILLE PATTERN DOTS-12468"));
        data.insert(std::make_pair(0x28ac,"BRAILLE PATTERN DOTS-3468"));
        data.insert(std::make_pair(0x28ad,"BRAILLE PATTERN DOTS-13468"));
        data.insert(std::make_pair(0x28ae,"BRAILLE PATTERN DOTS-23468"));
        data.insert(std::make_pair(0x28af,"BRAILLE PATTERN DOTS-123468"));
        data.insert(std::make_pair(0x28b0,"BRAILLE PATTERN DOTS-568"));
        data.insert(std::make_pair(0x28b1,"BRAILLE PATTERN DOTS-1568"));
        data.insert(std::make_pair(0x28b2,"BRAILLE PATTERN DOTS-2568"));
        data.insert(std::make_pair(0x28b3,"BRAILLE PATTERN DOTS-12568"));
        data.insert(std::make_pair(0x28b4,"BRAILLE PATTERN DOTS-3568"));
        data.insert(std::make_pair(0x28b5,"BRAILLE PATTERN DOTS-13568"));
        data.insert(std::make_pair(0x28b6,"BRAILLE PATTERN DOTS-23568"));
        data.insert(std::make_pair(0x28b7,"BRAILLE PATTERN DOTS-123568"));
        data.insert(std::make_pair(0x28b8,"BRAILLE PATTERN DOTS-4568"));
        data.insert(std::make_pair(0x28b9,"BRAILLE PATTERN DOTS-14568"));
        data.insert(std::make_pair(0x28ba,"BRAILLE PATTERN DOTS-24568"));
        data.insert(std::make_pair(0x28bb,"BRAILLE PATTERN DOTS-124568"));
        data.insert(std::make_pair(0x28bc,"BRAILLE PATTERN DOTS-34568"));
        data.insert(std::make_pair(0x28bd,"BRAILLE PATTERN DOTS-134568"));
        data.insert(std::make_pair(0x28be,"BRAILLE PATTERN DOTS-234568"));
        data.insert(std::make_pair(0x28bf,"BRAILLE PATTERN DOTS-1234568"));
        data.insert(std::make_pair(0x28c0,"BRAILLE PATTERN DOTS-78"));
        data.insert(std::make_pair(0x28c1,"BRAILLE PATTERN DOTS-178"));
        data.insert(std::make_pair(0x28c2,"BRAILLE PATTERN DOTS-278"));
        data.insert(std::make_pair(0x28c3,"BRAILLE PATTERN DOTS-1278"));
        data.insert(std::make_pair(0x28c4,"BRAILLE PATTERN DOTS-378"));
        data.insert(std::make_pair(0x28c5,"BRAILLE PATTERN DOTS-1378"));
        data.insert(std::make_pair(0x28c6,"BRAILLE PATTERN DOTS-2378"));
        data.insert(std::make_pair(0x28c7,"BRAILLE PATTERN DOTS-12378"));
        data.insert(std::make_pair(0x28c8,"BRAILLE PATTERN DOTS-478"));
        data.insert(std::make_pair(0x28c9,"BRAILLE PATTERN DOTS-1478"));
        data.insert(std::make_pair(0x28ca,"BRAILLE PATTERN DOTS-2478"));
        data.insert(std::make_pair(0x28cb,"BRAILLE PATTERN DOTS-12478"));
        data.insert(std::make_pair(0x28cc,"BRAILLE PATTERN DOTS-3478"));
        data.insert(std::make_pair(0x28cd,"BRAILLE PATTERN DOTS-13478"));
        data.insert(std::make_pair(0x28ce,"BRAILLE PATTERN DOTS-23478"));
        data.insert(std::make_pair(0x28cf,"BRAILLE PATTERN DOTS-123478"));
        data.insert(std::make_pair(0x28d0,"BRAILLE PATTERN DOTS-578"));
        data.insert(std::make_pair(0x28d1,"BRAILLE PATTERN DOTS-1578"));
        data.insert(std::make_pair(0x28d2,"BRAILLE PATTERN DOTS-2578"));
        data.insert(std::make_pair(0x28d3,"BRAILLE PATTERN DOTS-12578"));
        data.insert(std::make_pair(0x28d4,"BRAILLE PATTERN DOTS-3578"));
        data.insert(std::make_pair(0x28d5,"BRAILLE PATTERN DOTS-13578"));
        data.insert(std::make_pair(0x28d6,"BRAILLE PATTERN DOTS-23578"));
        data.insert(std::make_pair(0x28d7,"BRAILLE PATTERN DOTS-123578"));
        data.insert(std::make_pair(0x28d8,"BRAILLE PATTERN DOTS-4578"));
        data.insert(std::make_pair(0x28d9,"BRAILLE PATTERN DOTS-14578"));
        data.insert(std::make_pair(0x28da,"BRAILLE PATTERN DOTS-24578"));
        data.insert(std::make_pair(0x28db,"BRAILLE PATTERN DOTS-124578"));
        data.insert(std::make_pair(0x28dc,"BRAILLE PATTERN DOTS-34578"));
        data.insert(std::make_pair(0x28dd,"BRAILLE PATTERN DOTS-134578"));
        data.insert(std::make_pair(0x28de,"BRAILLE PATTERN DOTS-234578"));
        data.insert(std::make_pair(0x28df,"BRAILLE PATTERN DOTS-1234578"));
        data.insert(std::make_pair(0x28e0,"BRAILLE PATTERN DOTS-678"));
        data.insert(std::make_pair(0x28e1,"BRAILLE PATTERN DOTS-1678"));
        data.insert(std::make_pair(0x28e2,"BRAILLE PATTERN DOTS-2678"));
        data.insert(std::make_pair(0x28e3,"BRAILLE PATTERN DOTS-12678"));
        data.insert(std::make_pair(0x28e4,"BRAILLE PATTERN DOTS-3678"));
        data.insert(std::make_pair(0x28e5,"BRAILLE PATTERN DOTS-13678"));
        data.insert(std::make_pair(0x28e6,"BRAILLE PATTERN DOTS-23678"));
        data.insert(std::make_pair(0x28e7,"BRAILLE PATTERN DOTS-123678"));
        data.insert(std::make_pair(0x28e8,"BRAILLE PATTERN DOTS-4678"));
        data.insert(std::make_pair(0x28e9,"BRAILLE PATTERN DOTS-14678"));
        data.insert(std::make_pair(0x28ea,"BRAILLE PATTERN DOTS-24678"));
        data.insert(std::make_pair(0x28eb,"BRAILLE PATTERN DOTS-124678"));
        data.insert(std::make_pair(0x28ec,"BRAILLE PATTERN DOTS-34678"));
        data.insert(std::make_pair(0x28ed,"BRAILLE PATTERN DOTS-134678"));
        data.insert(std::make_pair(0x28ee,"BRAILLE PATTERN DOTS-234678"));
        data.insert(std::make_pair(0x28ef,"BRAILLE PATTERN DOTS-1234678"));
        data.insert(std::make_pair(0x28f0,"BRAILLE PATTERN DOTS-5678"));
        data.insert(std::make_pair(0x28f1,"BRAILLE PATTERN DOTS-15678"));
        data.insert(std::make_pair(0x28f2,"BRAILLE PATTERN DOTS-25678"));
        data.insert(std::make_pair(0x28f3,"BRAILLE PATTERN DOTS-125678"));
        data.insert(std::make_pair(0x28f4,"BRAILLE PATTERN DOTS-35678"));
        data.insert(std::make_pair(0x28f5,"BRAILLE PATTERN DOTS-135678"));
        data.insert(std::make_pair(0x28f6,"BRAILLE PATTERN DOTS-235678"));
        data.insert(std::make_pair(0x28f7,"BRAILLE PATTERN DOTS-1235678"));
        data.insert(std::make_pair(0x28f8,"BRAILLE PATTERN DOTS-45678"));
        data.insert(std::make_pair(0x28f9,"BRAILLE PATTERN DOTS-145678"));
        data.insert(std::make_pair(0x28fa,"BRAILLE PATTERN DOTS-245678"));
        data.insert(std::make_pair(0x28fb,"BRAILLE PATTERN DOTS-1245678"));
        data.insert(std::make_pair(0x28fc,"BRAILLE PATTERN DOTS-345678"));
        data.insert(std::make_pair(0x28fd,"BRAILLE PATTERN DOTS-1345678"));
        data.insert(std::make_pair(0x28fe,"BRAILLE PATTERN DOTS-2345678"));
        data.insert(std::make_pair(0x28ff,"BRAILLE PATTERN DOTS-12345678"));
        data.insert(std::make_pair(0x2900,"RIGHTWARDS TWO-HEADED ARROW WITH VERTICAL STROKE"));
        data.insert(std::make_pair(0x2901,"RIGHTWARDS TWO-HEADED ARROW WITH DOUBLE VERTICAL STROKE"));
        data.insert(std::make_pair(0x2902,"LEFTWARDS DOUBLE ARROW WITH VERTICAL STROKE"));
        data.insert(std::make_pair(0x2903,"RIGHTWARDS DOUBLE ARROW WITH VERTICAL STROKE"));
        data.insert(std::make_pair(0x2904,"LEFT RIGHT DOUBLE ARROW WITH VERTICAL STROKE"));
        data.insert(std::make_pair(0x2905,"RIGHTWARDS TWO-HEADED ARROW FROM BAR"));
        data.insert(std::make_pair(0x2906,"LEFTWARDS DOUBLE ARROW FROM BAR"));
        data.insert(std::make_pair(0x2907,"RIGHTWARDS DOUBLE ARROW FROM BAR"));
        data.insert(std::make_pair(0x2908,"DOWNWARDS ARROW WITH HORIZONTAL STROKE"));
        data.insert(std::make_pair(0x2909,"UPWARDS ARROW WITH HORIZONTAL STROKE"));
        data.insert(std::make_pair(0x290a,"UPWARDS TRIPLE ARROW"));
        data.insert(std::make_pair(0x290b,"DOWNWARDS TRIPLE ARROW"));
        data.insert(std::make_pair(0x290c,"LEFTWARDS DOUBLE DASH ARROW"));
        data.insert(std::make_pair(0x290d,"RIGHTWARDS DOUBLE DASH ARROW"));
        data.insert(std::make_pair(0x290e,"LEFTWARDS TRIPLE DASH ARROW"));
        data.insert(std::make_pair(0x290f,"RIGHTWARDS TRIPLE DASH ARROW"));
        data.insert(std::make_pair(0x2910,"RIGHTWARDS TWO-HEADED TRIPLE DASH ARROW"));
        data.insert(std::make_pair(0x2911,"RIGHTWARDS ARROW WITH DOTTED STEM"));
        data.insert(std::make_pair(0x2912,"UPWARDS ARROW TO BAR"));
        data.insert(std::make_pair(0x2913,"DOWNWARDS ARROW TO BAR"));
        data.insert(std::make_pair(0x2914,"RIGHTWARDS ARROW WITH TAIL WITH VERTICAL STROKE"));
        data.insert(std::make_pair(0x2915,"RIGHTWARDS ARROW WITH TAIL WITH DOUBLE VERTICAL STROKE"));
        data.insert(std::make_pair(0x2916,"RIGHTWARDS TWO-HEADED ARROW WITH TAIL"));
        data.insert(std::make_pair(0x2917,"RIGHTWARDS TWO-HEADED ARROW WITH TAIL WITH VERTICAL STROKE"));
        data.insert(std::make_pair(0x2918,"RIGHTWARDS TWO-HEADED ARROW WITH TAIL WITH DOUBLE VERTICAL STROKE"));
        data.insert(std::make_pair(0x2919,"LEFTWARDS ARROW-TAIL"));
        data.insert(std::make_pair(0x291a,"RIGHTWARDS ARROW-TAIL"));
        data.insert(std::make_pair(0x291b,"LEFTWARDS DOUBLE ARROW-TAIL"));
        data.insert(std::make_pair(0x291c,"RIGHTWARDS DOUBLE ARROW-TAIL"));
        data.insert(std::make_pair(0x291d,"LEFTWARDS ARROW TO BLACK DIAMOND"));
        data.insert(std::make_pair(0x291e,"RIGHTWARDS ARROW TO BLACK DIAMOND"));
        data.insert(std::make_pair(0x291f,"LEFTWARDS ARROW FROM BAR TO BLACK DIAMOND"));
        data.insert(std::make_pair(0x2920,"RIGHTWARDS ARROW FROM BAR TO BLACK DIAMOND"));
        data.insert(std::make_pair(0x2921,"NORTH WEST AND SOUTH EAST ARROW"));
        data.insert(std::make_pair(0x2922,"NORTH EAST AND SOUTH WEST ARROW"));
        data.insert(std::make_pair(0x2923,"NORTH WEST ARROW WITH HOOK"));
        data.insert(std::make_pair(0x2924,"NORTH EAST ARROW WITH HOOK"));
        data.insert(std::make_pair(0x2925,"SOUTH EAST ARROW WITH HOOK"));
        data.insert(std::make_pair(0x2926,"SOUTH WEST ARROW WITH HOOK"));
        data.insert(std::make_pair(0x2927,"NORTH WEST ARROW AND NORTH EAST ARROW"));
        data.insert(std::make_pair(0x2928,"NORTH EAST ARROW AND SOUTH EAST ARROW"));
        data.insert(std::make_pair(0x2929,"SOUTH EAST ARROW AND SOUTH WEST ARROW"));
        data.insert(std::make_pair(0x292a,"SOUTH WEST ARROW AND NORTH WEST ARROW"));
        data.insert(std::make_pair(0x292b,"RISING DIAGONAL CROSSING FALLING DIAGONAL"));
        data.insert(std::make_pair(0x292c,"FALLING DIAGONAL CROSSING RISING DIAGONAL"));
        data.insert(std::make_pair(0x292d,"SOUTH EAST ARROW CROSSING NORTH EAST ARROW"));
        data.insert(std::make_pair(0x292e,"NORTH EAST ARROW CROSSING SOUTH EAST ARROW"));
        data.insert(std::make_pair(0x292f,"FALLING DIAGONAL CROSSING NORTH EAST ARROW"));
        data.insert(std::make_pair(0x2930,"RISING DIAGONAL CROSSING SOUTH EAST ARROW"));
        data.insert(std::make_pair(0x2931,"NORTH EAST ARROW CROSSING NORTH WEST ARROW"));
        data.insert(std::make_pair(0x2932,"NORTH WEST ARROW CROSSING NORTH EAST ARROW"));
        data.insert(std::make_pair(0x2933,"WAVE ARROW POINTING DIRECTLY RIGHT"));
        data.insert(std::make_pair(0x2934,"ARROW POINTING RIGHTWARDS THEN CURVING UPWARDS"));
        data.insert(std::make_pair(0x2935,"ARROW POINTING RIGHTWARDS THEN CURVING DOWNWARDS"));
        data.insert(std::make_pair(0x2936,"ARROW POINTING DOWNWARDS THEN CURVING LEFTWARDS"));
        data.insert(std::make_pair(0x2937,"ARROW POINTING DOWNWARDS THEN CURVING RIGHTWARDS"));
        data.insert(std::make_pair(0x2938,"RIGHT-SIDE ARC CLOCKWISE ARROW"));
        data.insert(std::make_pair(0x2939,"LEFT-SIDE ARC ANTICLOCKWISE ARROW"));
        data.insert(std::make_pair(0x293a,"TOP ARC ANTICLOCKWISE ARROW"));
        data.insert(std::make_pair(0x293b,"BOTTOM ARC ANTICLOCKWISE ARROW"));
        data.insert(std::make_pair(0x293c,"TOP ARC CLOCKWISE ARROW WITH MINUS"));
        data.insert(std::make_pair(0x293d,"TOP ARC ANTICLOCKWISE ARROW WITH PLUS"));
        data.insert(std::make_pair(0x293e,"LOWER RIGHT SEMICIRCULAR CLOCKWISE ARROW"));
        data.insert(std::make_pair(0x293f,"LOWER LEFT SEMICIRCULAR ANTICLOCKWISE ARROW"));
        data.insert(std::make_pair(0x2940,"ANTICLOCKWISE CLOSED CIRCLE ARROW"));
        data.insert(std::make_pair(0x2941,"CLOCKWISE CLOSED CIRCLE ARROW"));
        data.insert(std::make_pair(0x2942,"RIGHTWARDS ARROW ABOVE SHORT LEFTWARDS ARROW"));
        data.insert(std::make_pair(0x2943,"LEFTWARDS ARROW ABOVE SHORT RIGHTWARDS ARROW"));
        data.insert(std::make_pair(0x2944,"SHORT RIGHTWARDS ARROW ABOVE LEFTWARDS ARROW"));
        data.insert(std::make_pair(0x2945,"RIGHTWARDS ARROW WITH PLUS BELOW"));
        data.insert(std::make_pair(0x2946,"LEFTWARDS ARROW WITH PLUS BELOW"));
        data.insert(std::make_pair(0x2947,"RIGHTWARDS ARROW THROUGH X"));
        data.insert(std::make_pair(0x2948,"LEFT RIGHT ARROW THROUGH SMALL CIRCLE"));
        data.insert(std::make_pair(0x2949,"UPWARDS TWO-HEADED ARROW FROM SMALL CIRCLE"));
        data.insert(std::make_pair(0x294a,"LEFT BARB UP RIGHT BARB DOWN HARPOON"));
        data.insert(std::make_pair(0x294b,"LEFT BARB DOWN RIGHT BARB UP HARPOON"));
        data.insert(std::make_pair(0x294c,"UP BARB RIGHT DOWN BARB LEFT HARPOON"));
        data.insert(std::make_pair(0x294d,"UP BARB LEFT DOWN BARB RIGHT HARPOON"));
        data.insert(std::make_pair(0x294e,"LEFT BARB UP RIGHT BARB UP HARPOON"));
        data.insert(std::make_pair(0x294f,"UP BARB RIGHT DOWN BARB RIGHT HARPOON"));
        data.insert(std::make_pair(0x2950,"LEFT BARB DOWN RIGHT BARB DOWN HARPOON"));
        data.insert(std::make_pair(0x2951,"UP BARB LEFT DOWN BARB LEFT HARPOON"));
        data.insert(std::make_pair(0x2952,"LEFTWARDS HARPOON WITH BARB UP TO BAR"));
        data.insert(std::make_pair(0x2953,"RIGHTWARDS HARPOON WITH BARB UP TO BAR"));
        data.insert(std::make_pair(0x2954,"UPWARDS HARPOON WITH BARB RIGHT TO BAR"));
        data.insert(std::make_pair(0x2955,"DOWNWARDS HARPOON WITH BARB RIGHT TO BAR"));
        data.insert(std::make_pair(0x2956,"LEFTWARDS HARPOON WITH BARB DOWN TO BAR"));
        data.insert(std::make_pair(0x2957,"RIGHTWARDS HARPOON WITH BARB DOWN TO BAR"));
        data.insert(std::make_pair(0x2958,"UPWARDS HARPOON WITH BARB LEFT TO BAR"));
        data.insert(std::make_pair(0x2959,"DOWNWARDS HARPOON WITH BARB LEFT TO BAR"));
        data.insert(std::make_pair(0x295a,"LEFTWARDS HARPOON WITH BARB UP FROM BAR"));
        data.insert(std::make_pair(0x295b,"RIGHTWARDS HARPOON WITH BARB UP FROM BAR"));
        data.insert(std::make_pair(0x295c,"UPWARDS HARPOON WITH BARB RIGHT FROM BAR"));
        data.insert(std::make_pair(0x295d,"DOWNWARDS HARPOON WITH BARB RIGHT FROM BAR"));
        data.insert(std::make_pair(0x295e,"LEFTWARDS HARPOON WITH BARB DOWN FROM BAR"));
        data.insert(std::make_pair(0x295f,"RIGHTWARDS HARPOON WITH BARB DOWN FROM BAR"));
        data.insert(std::make_pair(0x2960,"UPWARDS HARPOON WITH BARB LEFT FROM BAR"));
        data.insert(std::make_pair(0x2961,"DOWNWARDS HARPOON WITH BARB LEFT FROM BAR"));
        data.insert(std::make_pair(0x2962,"LEFTWARDS HARPOON WITH BARB UP ABOVE LEFTWARDS HARPOON WITH BARB DOWN"));
        data.insert(std::make_pair(0x2963,"UPWARDS HARPOON WITH BARB LEFT BESIDE UPWARDS HARPOON WITH BARB RIGHT"));
        data.insert(std::make_pair(0x2964,"RIGHTWARDS HARPOON WITH BARB UP ABOVE RIGHTWARDS HARPOON WITH BARB DOWN"));
        data.insert(std::make_pair(0x2965,"DOWNWARDS HARPOON WITH BARB LEFT BESIDE DOWNWARDS HARPOON WITH BARB RIGHT"));
        data.insert(std::make_pair(0x2966,"LEFTWARDS HARPOON WITH BARB UP ABOVE RIGHTWARDS HARPOON WITH BARB UP"));
        data.insert(std::make_pair(0x2967,"LEFTWARDS HARPOON WITH BARB DOWN ABOVE RIGHTWARDS HARPOON WITH BARB DOWN"));
        data.insert(std::make_pair(0x2968,"RIGHTWARDS HARPOON WITH BARB UP ABOVE LEFTWARDS HARPOON WITH BARB UP"));
        data.insert(std::make_pair(0x2969,"RIGHTWARDS HARPOON WITH BARB DOWN ABOVE LEFTWARDS HARPOON WITH BARB DOWN"));
        data.insert(std::make_pair(0x296a,"LEFTWARDS HARPOON WITH BARB UP ABOVE LONG DASH"));
        data.insert(std::make_pair(0x296b,"LEFTWARDS HARPOON WITH BARB DOWN BELOW LONG DASH"));
        data.insert(std::make_pair(0x296c,"RIGHTWARDS HARPOON WITH BARB UP ABOVE LONG DASH"));
        data.insert(std::make_pair(0x296d,"RIGHTWARDS HARPOON WITH BARB DOWN BELOW LONG DASH"));
        data.insert(std::make_pair(0x296e,"UPWARDS HARPOON WITH BARB LEFT BESIDE DOWNWARDS HARPOON WITH BARB RIGHT"));
        data.insert(std::make_pair(0x296f,"DOWNWARDS HARPOON WITH BARB LEFT BESIDE UPWARDS HARPOON WITH BARB RIGHT"));
        data.insert(std::make_pair(0x2970,"RIGHT DOUBLE ARROW WITH ROUNDED HEAD"));
        data.insert(std::make_pair(0x2971,"EQUALS SIGN ABOVE RIGHTWARDS ARROW"));
        data.insert(std::make_pair(0x2972,"TILDE OPERATOR ABOVE RIGHTWARDS ARROW"));
        data.insert(std::make_pair(0x2973,"LEFTWARDS ARROW ABOVE TILDE OPERATOR"));
        data.insert(std::make_pair(0x2974,"RIGHTWARDS ARROW ABOVE TILDE OPERATOR"));
        data.insert(std::make_pair(0x2975,"RIGHTWARDS ARROW ABOVE ALMOST EQUAL TO"));
        data.insert(std::make_pair(0x2976,"LESS-THAN ABOVE LEFTWARDS ARROW"));
        data.insert(std::make_pair(0x2977,"LEFTWARDS ARROW THROUGH LESS-THAN"));
        data.insert(std::make_pair(0x2978,"GREATER-THAN ABOVE RIGHTWARDS ARROW"));
        data.insert(std::make_pair(0x2979,"SUBSET ABOVE RIGHTWARDS ARROW"));
        data.insert(std::make_pair(0x297a,"LEFTWARDS ARROW THROUGH SUBSET"));
        data.insert(std::make_pair(0x297b,"SUPERSET ABOVE LEFTWARDS ARROW"));
        data.insert(std::make_pair(0x297c,"LEFT FISH TAIL"));
        data.insert(std::make_pair(0x297d,"RIGHT FISH TAIL"));
        data.insert(std::make_pair(0x297e,"UP FISH TAIL"));
        data.insert(std::make_pair(0x297f,"DOWN FISH TAIL"));
        data.insert(std::make_pair(0x2980,"TRIPLE VERTICAL BAR DELIMITER"));
        data.insert(std::make_pair(0x2981,"Z NOTATION SPOT"));
        data.insert(std::make_pair(0x2982,"Z NOTATION TYPE COLON"));
        data.insert(std::make_pair(0x2983,"LEFT WHITE CURLY BRACKET"));
        data.insert(std::make_pair(0x2984,"RIGHT WHITE CURLY BRACKET"));
        data.insert(std::make_pair(0x2985,"LEFT WHITE PARENTHESIS"));
        data.insert(std::make_pair(0x2986,"RIGHT WHITE PARENTHESIS"));
        data.insert(std::make_pair(0x2987,"Z NOTATION LEFT IMAGE BRACKET"));
        data.insert(std::make_pair(0x2988,"Z NOTATION RIGHT IMAGE BRACKET"));
        data.insert(std::make_pair(0x2989,"Z NOTATION LEFT BINDING BRACKET"));
        data.insert(std::make_pair(0x298a,"Z NOTATION RIGHT BINDING BRACKET"));
        data.insert(std::make_pair(0x298b,"LEFT SQUARE BRACKET WITH UNDERBAR"));
        data.insert(std::make_pair(0x298c,"RIGHT SQUARE BRACKET WITH UNDERBAR"));
        data.insert(std::make_pair(0x298d,"LEFT SQUARE BRACKET WITH TICK IN TOP CORNER"));
        data.insert(std::make_pair(0x298e,"RIGHT SQUARE BRACKET WITH TICK IN BOTTOM CORNER"));
        data.insert(std::make_pair(0x298f,"LEFT SQUARE BRACKET WITH TICK IN BOTTOM CORNER"));
        data.insert(std::make_pair(0x2990,"RIGHT SQUARE BRACKET WITH TICK IN TOP CORNER"));
        data.insert(std::make_pair(0x2991,"LEFT ANGLE BRACKET WITH DOT"));
        data.insert(std::make_pair(0x2992,"RIGHT ANGLE BRACKET WITH DOT"));
        data.insert(std::make_pair(0x2993,"LEFT ARC LESS-THAN BRACKET"));
        data.insert(std::make_pair(0x2994,"RIGHT ARC GREATER-THAN BRACKET"));
        data.insert(std::make_pair(0x2995,"DOUBLE LEFT ARC GREATER-THAN BRACKET"));
        data.insert(std::make_pair(0x2996,"DOUBLE RIGHT ARC LESS-THAN BRACKET"));
        data.insert(std::make_pair(0x2997,"LEFT BLACK TORTOISE SHELL BRACKET"));
        data.insert(std::make_pair(0x2998,"RIGHT BLACK TORTOISE SHELL BRACKET"));
        data.insert(std::make_pair(0x2999,"DOTTED FENCE"));
        data.insert(std::make_pair(0x299a,"VERTICAL ZIGZAG LINE"));
        data.insert(std::make_pair(0x299b,"MEASURED ANGLE OPENING LEFT"));
        data.insert(std::make_pair(0x299c,"RIGHT ANGLE VARIANT WITH SQUARE"));
        data.insert(std::make_pair(0x299d,"MEASURED RIGHT ANGLE WITH DOT"));
        data.insert(std::make_pair(0x299e,"ANGLE WITH S INSIDE"));
        data.insert(std::make_pair(0x299f,"ACUTE ANGLE"));
        data.insert(std::make_pair(0x29a0,"SPHERICAL ANGLE OPENING LEFT"));
        data.insert(std::make_pair(0x29a1,"SPHERICAL ANGLE OPENING UP"));
        data.insert(std::make_pair(0x29a2,"TURNED ANGLE"));
        data.insert(std::make_pair(0x29a3,"REVERSED ANGLE"));
        data.insert(std::make_pair(0x29a4,"ANGLE WITH UNDERBAR"));
        data.insert(std::make_pair(0x29a5,"REVERSED ANGLE WITH UNDERBAR"));
        data.insert(std::make_pair(0x29a6,"OBLIQUE ANGLE OPENING UP"));
        data.insert(std::make_pair(0x29a7,"OBLIQUE ANGLE OPENING DOWN"));
        data.insert(std::make_pair(0x29a8,"MEASURED ANGLE WITH OPEN ARM ENDING IN ARROW POINTING UP AND RIGHT"));
        data.insert(std::make_pair(0x29a9,"MEASURED ANGLE WITH OPEN ARM ENDING IN ARROW POINTING UP AND LEFT"));
        data.insert(std::make_pair(0x29aa,"MEASURED ANGLE WITH OPEN ARM ENDING IN ARROW POINTING DOWN AND RIGHT"));
        data.insert(std::make_pair(0x29ab,"MEASURED ANGLE WITH OPEN ARM ENDING IN ARROW POINTING DOWN AND LEFT"));
        data.insert(std::make_pair(0x29ac,"MEASURED ANGLE WITH OPEN ARM ENDING IN ARROW POINTING RIGHT AND UP"));
        data.insert(std::make_pair(0x29ad,"MEASURED ANGLE WITH OPEN ARM ENDING IN ARROW POINTING LEFT AND UP"));
        data.insert(std::make_pair(0x29ae,"MEASURED ANGLE WITH OPEN ARM ENDING IN ARROW POINTING RIGHT AND DOWN"));
        data.insert(std::make_pair(0x29af,"MEASURED ANGLE WITH OPEN ARM ENDING IN ARROW POINTING LEFT AND DOWN"));
        data.insert(std::make_pair(0x29b0,"REVERSED EMPTY SET"));
        data.insert(std::make_pair(0x29b1,"EMPTY SET WITH OVERBAR"));
        data.insert(std::make_pair(0x29b2,"EMPTY SET WITH SMALL CIRCLE ABOVE"));
        data.insert(std::make_pair(0x29b3,"EMPTY SET WITH RIGHT ARROW ABOVE"));
        data.insert(std::make_pair(0x29b4,"EMPTY SET WITH LEFT ARROW ABOVE"));
        data.insert(std::make_pair(0x29b5,"CIRCLE WITH HORIZONTAL BAR"));
        data.insert(std::make_pair(0x29b6,"CIRCLED VERTICAL BAR"));
        data.insert(std::make_pair(0x29b7,"CIRCLED PARALLEL"));
        data.insert(std::make_pair(0x29b8,"CIRCLED REVERSE SOLIDUS"));
        data.insert(std::make_pair(0x29b9,"CIRCLED PERPENDICULAR"));
        data.insert(std::make_pair(0x29ba,"CIRCLE DIVIDED BY HORIZONTAL BAR AND TOP HALF DIVIDED BY VERTICAL BAR"));
        data.insert(std::make_pair(0x29bb,"CIRCLE WITH SUPERIMPOSED X"));
        data.insert(std::make_pair(0x29bc,"CIRCLED ANTICLOCKWISE-ROTATED DIVISION SIGN"));
        data.insert(std::make_pair(0x29bd,"UP ARROW THROUGH CIRCLE"));
        data.insert(std::make_pair(0x29be,"CIRCLED WHITE BULLET"));
        data.insert(std::make_pair(0x29bf,"CIRCLED BULLET"));
        data.insert(std::make_pair(0x29c0,"CIRCLED LESS-THAN"));
        data.insert(std::make_pair(0x29c1,"CIRCLED GREATER-THAN"));
        data.insert(std::make_pair(0x29c2,"CIRCLE WITH SMALL CIRCLE TO THE RIGHT"));
        data.insert(std::make_pair(0x29c3,"CIRCLE WITH TWO HORIZONTAL STROKES TO THE RIGHT"));
        data.insert(std::make_pair(0x29c4,"SQUARED RISING DIAGONAL SLASH"));
        data.insert(std::make_pair(0x29c5,"SQUARED FALLING DIAGONAL SLASH"));
        data.insert(std::make_pair(0x29c6,"SQUARED ASTERISK"));
        data.insert(std::make_pair(0x29c7,"SQUARED SMALL CIRCLE"));
        data.insert(std::make_pair(0x29c8,"SQUARED SQUARE"));
        data.insert(std::make_pair(0x29c9,"TWO JOINED SQUARES"));
        data.insert(std::make_pair(0x29ca,"TRIANGLE WITH DOT ABOVE"));
        data.insert(std::make_pair(0x29cb,"TRIANGLE WITH UNDERBAR"));
        data.insert(std::make_pair(0x29cc,"S IN TRIANGLE"));
        data.insert(std::make_pair(0x29cd,"TRIANGLE WITH SERIFS AT BOTTOM"));
        data.insert(std::make_pair(0x29ce,"RIGHT TRIANGLE ABOVE LEFT TRIANGLE"));
        data.insert(std::make_pair(0x29cf,"LEFT TRIANGLE BESIDE VERTICAL BAR"));
        data.insert(std::make_pair(0x29d0,"VERTICAL BAR BESIDE RIGHT TRIANGLE"));
        data.insert(std::make_pair(0x29d1,"BOWTIE WITH LEFT HALF BLACK"));
        data.insert(std::make_pair(0x29d2,"BOWTIE WITH RIGHT HALF BLACK"));
        data.insert(std::make_pair(0x29d3,"BLACK BOWTIE"));
        data.insert(std::make_pair(0x29d4,"TIMES WITH LEFT HALF BLACK"));
        data.insert(std::make_pair(0x29d5,"TIMES WITH RIGHT HALF BLACK"));
        data.insert(std::make_pair(0x29d6,"WHITE HOURGLASS"));
        data.insert(std::make_pair(0x29d7,"BLACK HOURGLASS"));
        data.insert(std::make_pair(0x29d8,"LEFT WIGGLY FENCE"));
        data.insert(std::make_pair(0x29d9,"RIGHT WIGGLY FENCE"));
        data.insert(std::make_pair(0x29da,"LEFT DOUBLE WIGGLY FENCE"));
        data.insert(std::make_pair(0x29db,"RIGHT DOUBLE WIGGLY FENCE"));
        data.insert(std::make_pair(0x29dc,"INCOMPLETE INFINITY"));
        data.insert(std::make_pair(0x29dd,"TIE OVER INFINITY"));
        data.insert(std::make_pair(0x29de,"INFINITY NEGATED WITH VERTICAL BAR"));
        data.insert(std::make_pair(0x29df,"DOUBLE-ENDED MULTIMAP"));
        data.insert(std::make_pair(0x29e0,"SQUARE WITH CONTOURED OUTLINE"));
        data.insert(std::make_pair(0x29e1,"INCREASES AS"));
        data.insert(std::make_pair(0x29e2,"SHUFFLE PRODUCT"));
        data.insert(std::make_pair(0x29e3,"EQUALS SIGN AND SLANTED PARALLEL"));
        data.insert(std::make_pair(0x29e4,"EQUALS SIGN AND SLANTED PARALLEL WITH TILDE ABOVE"));
        data.insert(std::make_pair(0x29e5,"IDENTICAL TO AND SLANTED PARALLEL"));
        data.insert(std::make_pair(0x29e6,"GLEICH STARK"));
        data.insert(std::make_pair(0x29e7,"THERMODYNAMIC"));
        data.insert(std::make_pair(0x29e8,"DOWN-POINTING TRIANGLE WITH LEFT HALF BLACK"));
        data.insert(std::make_pair(0x29e9,"DOWN-POINTING TRIANGLE WITH RIGHT HALF BLACK"));
        data.insert(std::make_pair(0x29ea,"BLACK DIAMOND WITH DOWN ARROW"));
        data.insert(std::make_pair(0x29eb,"BLACK LOZENGE"));
        data.insert(std::make_pair(0x29ec,"WHITE CIRCLE WITH DOWN ARROW"));
        data.insert(std::make_pair(0x29ed,"BLACK CIRCLE WITH DOWN ARROW"));
        data.insert(std::make_pair(0x29ee,"ERROR-BARRED WHITE SQUARE"));
        data.insert(std::make_pair(0x29ef,"ERROR-BARRED BLACK SQUARE"));
        data.insert(std::make_pair(0x29f0,"ERROR-BARRED WHITE DIAMOND"));
        data.insert(std::make_pair(0x29f1,"ERROR-BARRED BLACK DIAMOND"));
        data.insert(std::make_pair(0x29f2,"ERROR-BARRED WHITE CIRCLE"));
        data.insert(std::make_pair(0x29f3,"ERROR-BARRED BLACK CIRCLE"));
        data.insert(std::make_pair(0x29f4,"RULE-DELAYED"));
        data.insert(std::make_pair(0x29f5,"REVERSE SOLIDUS OPERATOR"));
        data.insert(std::make_pair(0x29f6,"SOLIDUS WITH OVERBAR"));
        data.insert(std::make_pair(0x29f7,"REVERSE SOLIDUS WITH HORIZONTAL STROKE"));
        data.insert(std::make_pair(0x29f8,"BIG SOLIDUS"));
        data.insert(std::make_pair(0x29f9,"BIG REVERSE SOLIDUS"));
        data.insert(std::make_pair(0x29fa,"DOUBLE PLUS"));
        data.insert(std::make_pair(0x29fb,"TRIPLE PLUS"));
        data.insert(std::make_pair(0x29fc,"LEFT-POINTING CURVED ANGLE BRACKET"));
        data.insert(std::make_pair(0x29fd,"RIGHT-POINTING CURVED ANGLE BRACKET"));
        data.insert(std::make_pair(0x29fe,"TINY"));
        data.insert(std::make_pair(0x29ff,"MINY"));
        data.insert(std::make_pair(0x2a00,"N-ARY CIRCLED DOT OPERATOR"));
        data.insert(std::make_pair(0x2a01,"N-ARY CIRCLED PLUS OPERATOR"));
        data.insert(std::make_pair(0x2a02,"N-ARY CIRCLED TIMES OPERATOR"));
        data.insert(std::make_pair(0x2a03,"N-ARY UNION OPERATOR WITH DOT"));
        data.insert(std::make_pair(0x2a04,"N-ARY UNION OPERATOR WITH PLUS"));
        data.insert(std::make_pair(0x2a05,"N-ARY SQUARE INTERSECTION OPERATOR"));
        data.insert(std::make_pair(0x2a06,"N-ARY SQUARE UNION OPERATOR"));
        data.insert(std::make_pair(0x2a07,"TWO LOGICAL AND OPERATOR"));
        data.insert(std::make_pair(0x2a08,"TWO LOGICAL OR OPERATOR"));
        data.insert(std::make_pair(0x2a09,"N-ARY TIMES OPERATOR"));
        data.insert(std::make_pair(0x2a0a,"MODULO TWO SUM"));
        data.insert(std::make_pair(0x2a0b,"SUMMATION WITH INTEGRAL"));
        data.insert(std::make_pair(0x2a0c,"QUADRUPLE INTEGRAL OPERATOR"));
        data.insert(std::make_pair(0x2a0d,"FINITE PART INTEGRAL"));
        data.insert(std::make_pair(0x2a0e,"INTEGRAL WITH DOUBLE STROKE"));
        data.insert(std::make_pair(0x2a0f,"INTEGRAL AVERAGE WITH SLASH"));
        data.insert(std::make_pair(0x2a10,"CIRCULATION FUNCTION"));
        data.insert(std::make_pair(0x2a11,"ANTICLOCKWISE INTEGRATION"));
        data.insert(std::make_pair(0x2a12,"LINE INTEGRATION WITH RECTANGULAR PATH AROUND POLE"));
        data.insert(std::make_pair(0x2a13,"LINE INTEGRATION WITH SEMICIRCULAR PATH AROUND POLE"));
        data.insert(std::make_pair(0x2a14,"LINE INTEGRATION NOT INCLUDING THE POLE"));
        data.insert(std::make_pair(0x2a15,"INTEGRAL AROUND A POINT OPERATOR"));
        data.insert(std::make_pair(0x2a16,"QUATERNION INTEGRAL OPERATOR"));
        data.insert(std::make_pair(0x2a17,"INTEGRAL WITH LEFTWARDS ARROW WITH HOOK"));
        data.insert(std::make_pair(0x2a18,"INTEGRAL WITH TIMES SIGN"));
        data.insert(std::make_pair(0x2a19,"INTEGRAL WITH INTERSECTION"));
        data.insert(std::make_pair(0x2a1a,"INTEGRAL WITH UNION"));
        data.insert(std::make_pair(0x2a1b,"INTEGRAL WITH OVERBAR"));
        data.insert(std::make_pair(0x2a1c,"INTEGRAL WITH UNDERBAR"));
        data.insert(std::make_pair(0x2a1d,"JOIN"));
        data.insert(std::make_pair(0x2a1e,"LARGE LEFT TRIANGLE OPERATOR"));
        data.insert(std::make_pair(0x2a1f,"Z NOTATION SCHEMA COMPOSITION"));
        data.insert(std::make_pair(0x2a20,"Z NOTATION SCHEMA PIPING"));
        data.insert(std::make_pair(0x2a21,"Z NOTATION SCHEMA PROJECTION"));
        data.insert(std::make_pair(0x2a22,"PLUS SIGN WITH SMALL CIRCLE ABOVE"));
        data.insert(std::make_pair(0x2a23,"PLUS SIGN WITH CIRCUMFLEX ACCENT ABOVE"));
        data.insert(std::make_pair(0x2a24,"PLUS SIGN WITH TILDE ABOVE"));
        data.insert(std::make_pair(0x2a25,"PLUS SIGN WITH DOT BELOW"));
        data.insert(std::make_pair(0x2a26,"PLUS SIGN WITH TILDE BELOW"));
        data.insert(std::make_pair(0x2a27,"PLUS SIGN WITH SUBSCRIPT TWO"));
        data.insert(std::make_pair(0x2a28,"PLUS SIGN WITH BLACK TRIANGLE"));
        data.insert(std::make_pair(0x2a29,"MINUS SIGN WITH COMMA ABOVE"));
        data.insert(std::make_pair(0x2a2a,"MINUS SIGN WITH DOT BELOW"));
        data.insert(std::make_pair(0x2a2b,"MINUS SIGN WITH FALLING DOTS"));
        data.insert(std::make_pair(0x2a2c,"MINUS SIGN WITH RISING DOTS"));
        data.insert(std::make_pair(0x2a2d,"PLUS SIGN IN LEFT HALF CIRCLE"));
        data.insert(std::make_pair(0x2a2e,"PLUS SIGN IN RIGHT HALF CIRCLE"));
        data.insert(std::make_pair(0x2a2f,"VECTOR OR CROSS PRODUCT"));
        data.insert(std::make_pair(0x2a30,"MULTIPLICATION SIGN WITH DOT ABOVE"));
        data.insert(std::make_pair(0x2a31,"MULTIPLICATION SIGN WITH UNDERBAR"));
        data.insert(std::make_pair(0x2a32,"SEMIDIRECT PRODUCT WITH BOTTOM CLOSED"));
        data.insert(std::make_pair(0x2a33,"SMASH PRODUCT"));
        data.insert(std::make_pair(0x2a34,"MULTIPLICATION SIGN IN LEFT HALF CIRCLE"));
        data.insert(std::make_pair(0x2a35,"MULTIPLICATION SIGN IN RIGHT HALF CIRCLE"));
        data.insert(std::make_pair(0x2a36,"CIRCLED MULTIPLICATION SIGN WITH CIRCUMFLEX ACCENT"));
        data.insert(std::make_pair(0x2a37,"MULTIPLICATION SIGN IN DOUBLE CIRCLE"));
        data.insert(std::make_pair(0x2a38,"CIRCLED DIVISION SIGN"));
        data.insert(std::make_pair(0x2a39,"PLUS SIGN IN TRIANGLE"));
        data.insert(std::make_pair(0x2a3a,"MINUS SIGN IN TRIANGLE"));
        data.insert(std::make_pair(0x2a3b,"MULTIPLICATION SIGN IN TRIANGLE"));
        data.insert(std::make_pair(0x2a3c,"INTERIOR PRODUCT"));
        data.insert(std::make_pair(0x2a3d,"RIGHTHAND INTERIOR PRODUCT"));
        data.insert(std::make_pair(0x2a3e,"Z NOTATION RELATIONAL COMPOSITION"));
        data.insert(std::make_pair(0x2a3f,"AMALGAMATION OR COPRODUCT"));
        data.insert(std::make_pair(0x2a40,"INTERSECTION WITH DOT"));
        data.insert(std::make_pair(0x2a41,"UNION WITH MINUS SIGN"));
        data.insert(std::make_pair(0x2a42,"UNION WITH OVERBAR"));
        data.insert(std::make_pair(0x2a43,"INTERSECTION WITH OVERBAR"));
        data.insert(std::make_pair(0x2a44,"INTERSECTION WITH LOGICAL AND"));
        data.insert(std::make_pair(0x2a45,"UNION WITH LOGICAL OR"));
        data.insert(std::make_pair(0x2a46,"UNION ABOVE INTERSECTION"));
        data.insert(std::make_pair(0x2a47,"INTERSECTION ABOVE UNION"));
        data.insert(std::make_pair(0x2a48,"UNION ABOVE BAR ABOVE INTERSECTION"));
        data.insert(std::make_pair(0x2a49,"INTERSECTION ABOVE BAR ABOVE UNION"));
        data.insert(std::make_pair(0x2a4a,"UNION BESIDE AND JOINED WITH UNION"));
        data.insert(std::make_pair(0x2a4b,"INTERSECTION BESIDE AND JOINED WITH INTERSECTION"));
        data.insert(std::make_pair(0x2a4c,"CLOSED UNION WITH SERIFS"));
        data.insert(std::make_pair(0x2a4d,"CLOSED INTERSECTION WITH SERIFS"));
        data.insert(std::make_pair(0x2a4e,"DOUBLE SQUARE INTERSECTION"));
        data.insert(std::make_pair(0x2a4f,"DOUBLE SQUARE UNION"));
        data.insert(std::make_pair(0x2a50,"CLOSED UNION WITH SERIFS AND SMASH PRODUCT"));
        data.insert(std::make_pair(0x2a51,"LOGICAL AND WITH DOT ABOVE"));
        data.insert(std::make_pair(0x2a52,"LOGICAL OR WITH DOT ABOVE"));
        data.insert(std::make_pair(0x2a53,"DOUBLE LOGICAL AND"));
        data.insert(std::make_pair(0x2a54,"DOUBLE LOGICAL OR"));
        data.insert(std::make_pair(0x2a55,"TWO INTERSECTING LOGICAL AND"));
        data.insert(std::make_pair(0x2a56,"TWO INTERSECTING LOGICAL OR"));
        data.insert(std::make_pair(0x2a57,"SLOPING LARGE OR"));
        data.insert(std::make_pair(0x2a58,"SLOPING LARGE AND"));
        data.insert(std::make_pair(0x2a59,"LOGICAL OR OVERLAPPING LOGICAL AND"));
        data.insert(std::make_pair(0x2a5a,"LOGICAL AND WITH MIDDLE STEM"));
        data.insert(std::make_pair(0x2a5b,"LOGICAL OR WITH MIDDLE STEM"));
        data.insert(std::make_pair(0x2a5c,"LOGICAL AND WITH HORIZONTAL DASH"));
        data.insert(std::make_pair(0x2a5d,"LOGICAL OR WITH HORIZONTAL DASH"));
        data.insert(std::make_pair(0x2a5e,"LOGICAL AND WITH DOUBLE OVERBAR"));
        data.insert(std::make_pair(0x2a5f,"LOGICAL AND WITH UNDERBAR"));
        data.insert(std::make_pair(0x2a60,"LOGICAL AND WITH DOUBLE UNDERBAR"));
        data.insert(std::make_pair(0x2a61,"SMALL VEE WITH UNDERBAR"));
        data.insert(std::make_pair(0x2a62,"LOGICAL OR WITH DOUBLE OVERBAR"));
        data.insert(std::make_pair(0x2a63,"LOGICAL OR WITH DOUBLE UNDERBAR"));
        data.insert(std::make_pair(0x2a64,"Z NOTATION DOMAIN ANTIRESTRICTION"));
        data.insert(std::make_pair(0x2a65,"Z NOTATION RANGE ANTIRESTRICTION"));
        data.insert(std::make_pair(0x2a66,"EQUALS SIGN WITH DOT BELOW"));
        data.insert(std::make_pair(0x2a67,"IDENTICAL WITH DOT ABOVE"));
        data.insert(std::make_pair(0x2a68,"TRIPLE HORIZONTAL BAR WITH DOUBLE VERTICAL STROKE"));
        data.insert(std::make_pair(0x2a69,"TRIPLE HORIZONTAL BAR WITH TRIPLE VERTICAL STROKE"));
        data.insert(std::make_pair(0x2a6a,"TILDE OPERATOR WITH DOT ABOVE"));
        data.insert(std::make_pair(0x2a6b,"TILDE OPERATOR WITH RISING DOTS"));
        data.insert(std::make_pair(0x2a6c,"SIMILAR MINUS SIMILAR"));
        data.insert(std::make_pair(0x2a6d,"CONGRUENT WITH DOT ABOVE"));
        data.insert(std::make_pair(0x2a6e,"EQUALS WITH ASTERISK"));
        data.insert(std::make_pair(0x2a6f,"ALMOST EQUAL TO WITH CIRCUMFLEX ACCENT"));
        data.insert(std::make_pair(0x2a70,"APPROXIMATELY EQUAL OR EQUAL TO"));
        data.insert(std::make_pair(0x2a71,"EQUALS SIGN ABOVE PLUS SIGN"));
        data.insert(std::make_pair(0x2a72,"PLUS SIGN ABOVE EQUALS SIGN"));
        data.insert(std::make_pair(0x2a73,"EQUALS SIGN ABOVE TILDE OPERATOR"));
        data.insert(std::make_pair(0x2a74,"DOUBLE COLON EQUAL"));
        data.insert(std::make_pair(0x2a75,"TWO CONSECUTIVE EQUALS SIGNS"));
        data.insert(std::make_pair(0x2a76,"THREE CONSECUTIVE EQUALS SIGNS"));
        data.insert(std::make_pair(0x2a77,"EQUALS SIGN WITH TWO DOTS ABOVE AND TWO DOTS BELOW"));
        data.insert(std::make_pair(0x2a78,"EQUIVALENT WITH FOUR DOTS ABOVE"));
        data.insert(std::make_pair(0x2a79,"LESS-THAN WITH CIRCLE INSIDE"));
        data.insert(std::make_pair(0x2a7a,"GREATER-THAN WITH CIRCLE INSIDE"));
        data.insert(std::make_pair(0x2a7b,"LESS-THAN WITH QUESTION MARK ABOVE"));
        data.insert(std::make_pair(0x2a7c,"GREATER-THAN WITH QUESTION MARK ABOVE"));
        data.insert(std::make_pair(0x2a7d,"LESS-THAN OR SLANTED EQUAL TO"));
        data.insert(std::make_pair(0x2a7e,"GREATER-THAN OR SLANTED EQUAL TO"));
        data.insert(std::make_pair(0x2a7f,"LESS-THAN OR SLANTED EQUAL TO WITH DOT INSIDE"));
        data.insert(std::make_pair(0x2a80,"GREATER-THAN OR SLANTED EQUAL TO WITH DOT INSIDE"));
        data.insert(std::make_pair(0x2a81,"LESS-THAN OR SLANTED EQUAL TO WITH DOT ABOVE"));
        data.insert(std::make_pair(0x2a82,"GREATER-THAN OR SLANTED EQUAL TO WITH DOT ABOVE"));
        data.insert(std::make_pair(0x2a83,"LESS-THAN OR SLANTED EQUAL TO WITH DOT ABOVE RIGHT"));
        data.insert(std::make_pair(0x2a84,"GREATER-THAN OR SLANTED EQUAL TO WITH DOT ABOVE LEFT"));
        data.insert(std::make_pair(0x2a85,"LESS-THAN OR APPROXIMATE"));
        data.insert(std::make_pair(0x2a86,"GREATER-THAN OR APPROXIMATE"));
        data.insert(std::make_pair(0x2a87,"LESS-THAN AND SINGLE-LINE NOT EQUAL TO"));
        data.insert(std::make_pair(0x2a88,"GREATER-THAN AND SINGLE-LINE NOT EQUAL TO"));
        data.insert(std::make_pair(0x2a89,"LESS-THAN AND NOT APPROXIMATE"));
        data.insert(std::make_pair(0x2a8a,"GREATER-THAN AND NOT APPROXIMATE"));
        data.insert(std::make_pair(0x2a8b,"LESS-THAN ABOVE DOUBLE-LINE EQUAL ABOVE GREATER-THAN"));
        data.insert(std::make_pair(0x2a8c,"GREATER-THAN ABOVE DOUBLE-LINE EQUAL ABOVE LESS-THAN"));
        data.insert(std::make_pair(0x2a8d,"LESS-THAN ABOVE SIMILAR OR EQUAL"));
        data.insert(std::make_pair(0x2a8e,"GREATER-THAN ABOVE SIMILAR OR EQUAL"));
        data.insert(std::make_pair(0x2a8f,"LESS-THAN ABOVE SIMILAR ABOVE GREATER-THAN"));
        data.insert(std::make_pair(0x2a90,"GREATER-THAN ABOVE SIMILAR ABOVE LESS-THAN"));
        data.insert(std::make_pair(0x2a91,"LESS-THAN ABOVE GREATER-THAN ABOVE DOUBLE-LINE EQUAL"));
        data.insert(std::make_pair(0x2a92,"GREATER-THAN ABOVE LESS-THAN ABOVE DOUBLE-LINE EQUAL"));
        data.insert(std::make_pair(0x2a93,"LESS-THAN ABOVE SLANTED EQUAL ABOVE GREATER-THAN ABOVE SLANTED EQUAL"));
        data.insert(std::make_pair(0x2a94,"GREATER-THAN ABOVE SLANTED EQUAL ABOVE LESS-THAN ABOVE SLANTED EQUAL"));
        data.insert(std::make_pair(0x2a95,"SLANTED EQUAL TO OR LESS-THAN"));
        data.insert(std::make_pair(0x2a96,"SLANTED EQUAL TO OR GREATER-THAN"));
        data.insert(std::make_pair(0x2a97,"SLANTED EQUAL TO OR LESS-THAN WITH DOT INSIDE"));
        data.insert(std::make_pair(0x2a98,"SLANTED EQUAL TO OR GREATER-THAN WITH DOT INSIDE"));
        data.insert(std::make_pair(0x2a99,"DOUBLE-LINE EQUAL TO OR LESS-THAN"));
        data.insert(std::make_pair(0x2a9a,"DOUBLE-LINE EQUAL TO OR GREATER-THAN"));
        data.insert(std::make_pair(0x2a9b,"DOUBLE-LINE SLANTED EQUAL TO OR LESS-THAN"));
        data.insert(std::make_pair(0x2a9c,"DOUBLE-LINE SLANTED EQUAL TO OR GREATER-THAN"));
        data.insert(std::make_pair(0x2a9d,"SIMILAR OR LESS-THAN"));
        data.insert(std::make_pair(0x2a9e,"SIMILAR OR GREATER-THAN"));
        data.insert(std::make_pair(0x2a9f,"SIMILAR ABOVE LESS-THAN ABOVE EQUALS SIGN"));
        data.insert(std::make_pair(0x2aa0,"SIMILAR ABOVE GREATER-THAN ABOVE EQUALS SIGN"));
        data.insert(std::make_pair(0x2aa1,"DOUBLE NESTED LESS-THAN"));
        data.insert(std::make_pair(0x2aa2,"DOUBLE NESTED GREATER-THAN"));
        data.insert(std::make_pair(0x2aa3,"DOUBLE NESTED LESS-THAN WITH UNDERBAR"));
        data.insert(std::make_pair(0x2aa4,"GREATER-THAN OVERLAPPING LESS-THAN"));
        data.insert(std::make_pair(0x2aa5,"GREATER-THAN BESIDE LESS-THAN"));
        data.insert(std::make_pair(0x2aa6,"LESS-THAN CLOSED BY CURVE"));
        data.insert(std::make_pair(0x2aa7,"GREATER-THAN CLOSED BY CURVE"));
        data.insert(std::make_pair(0x2aa8,"LESS-THAN CLOSED BY CURVE ABOVE SLANTED EQUAL"));
        data.insert(std::make_pair(0x2aa9,"GREATER-THAN CLOSED BY CURVE ABOVE SLANTED EQUAL"));
        data.insert(std::make_pair(0x2aaa,"SMALLER THAN"));
        data.insert(std::make_pair(0x2aab,"LARGER THAN"));
        data.insert(std::make_pair(0x2aac,"SMALLER THAN OR EQUAL TO"));
        data.insert(std::make_pair(0x2aad,"LARGER THAN OR EQUAL TO"));
        data.insert(std::make_pair(0x2aae,"EQUALS SIGN WITH BUMPY ABOVE"));
        data.insert(std::make_pair(0x2aaf,"PRECEDES ABOVE SINGLE-LINE EQUALS SIGN"));
        data.insert(std::make_pair(0x2ab0,"SUCCEEDS ABOVE SINGLE-LINE EQUALS SIGN"));
        data.insert(std::make_pair(0x2ab1,"PRECEDES ABOVE SINGLE-LINE NOT EQUAL TO"));
        data.insert(std::make_pair(0x2ab2,"SUCCEEDS ABOVE SINGLE-LINE NOT EQUAL TO"));
        data.insert(std::make_pair(0x2ab3,"PRECEDES ABOVE EQUALS SIGN"));
        data.insert(std::make_pair(0x2ab4,"SUCCEEDS ABOVE EQUALS SIGN"));
        data.insert(std::make_pair(0x2ab5,"PRECEDES ABOVE NOT EQUAL TO"));
        data.insert(std::make_pair(0x2ab6,"SUCCEEDS ABOVE NOT EQUAL TO"));
        data.insert(std::make_pair(0x2ab7,"PRECEDES ABOVE ALMOST EQUAL TO"));
        data.insert(std::make_pair(0x2ab8,"SUCCEEDS ABOVE ALMOST EQUAL TO"));
        data.insert(std::make_pair(0x2ab9,"PRECEDES ABOVE NOT ALMOST EQUAL TO"));
        data.insert(std::make_pair(0x2aba,"SUCCEEDS ABOVE NOT ALMOST EQUAL TO"));
        data.insert(std::make_pair(0x2abb,"DOUBLE PRECEDES"));
        data.insert(std::make_pair(0x2abc,"DOUBLE SUCCEEDS"));
        data.insert(std::make_pair(0x2abd,"SUBSET WITH DOT"));
        data.insert(std::make_pair(0x2abe,"SUPERSET WITH DOT"));
        data.insert(std::make_pair(0x2abf,"SUBSET WITH PLUS SIGN BELOW"));
        data.insert(std::make_pair(0x2ac0,"SUPERSET WITH PLUS SIGN BELOW"));
        data.insert(std::make_pair(0x2ac1,"SUBSET WITH MULTIPLICATION SIGN BELOW"));
        data.insert(std::make_pair(0x2ac2,"SUPERSET WITH MULTIPLICATION SIGN BELOW"));
        data.insert(std::make_pair(0x2ac3,"SUBSET OF OR EQUAL TO WITH DOT ABOVE"));
        data.insert(std::make_pair(0x2ac4,"SUPERSET OF OR EQUAL TO WITH DOT ABOVE"));
        data.insert(std::make_pair(0x2ac5,"SUBSET OF ABOVE EQUALS SIGN"));
        data.insert(std::make_pair(0x2ac6,"SUPERSET OF ABOVE EQUALS SIGN"));
        data.insert(std::make_pair(0x2ac7,"SUBSET OF ABOVE TILDE OPERATOR"));
        data.insert(std::make_pair(0x2ac8,"SUPERSET OF ABOVE TILDE OPERATOR"));
        data.insert(std::make_pair(0x2ac9,"SUBSET OF ABOVE ALMOST EQUAL TO"));
        data.insert(std::make_pair(0x2aca,"SUPERSET OF ABOVE ALMOST EQUAL TO"));
        data.insert(std::make_pair(0x2acb,"SUBSET OF ABOVE NOT EQUAL TO"));
        data.insert(std::make_pair(0x2acc,"SUPERSET OF ABOVE NOT EQUAL TO"));
        data.insert(std::make_pair(0x2acd,"SQUARE LEFT OPEN BOX OPERATOR"));
        data.insert(std::make_pair(0x2ace,"SQUARE RIGHT OPEN BOX OPERATOR"));
        data.insert(std::make_pair(0x2acf,"CLOSED SUBSET"));
        data.insert(std::make_pair(0x2ad0,"CLOSED SUPERSET"));
        data.insert(std::make_pair(0x2ad1,"CLOSED SUBSET OR EQUAL TO"));
        data.insert(std::make_pair(0x2ad2,"CLOSED SUPERSET OR EQUAL TO"));
        data.insert(std::make_pair(0x2ad3,"SUBSET ABOVE SUPERSET"));
        data.insert(std::make_pair(0x2ad4,"SUPERSET ABOVE SUBSET"));
        data.insert(std::make_pair(0x2ad5,"SUBSET ABOVE SUBSET"));
        data.insert(std::make_pair(0x2ad6,"SUPERSET ABOVE SUPERSET"));
        data.insert(std::make_pair(0x2ad7,"SUPERSET BESIDE SUBSET"));
        data.insert(std::make_pair(0x2ad8,"SUPERSET BESIDE AND JOINED BY DASH WITH SUBSET"));
        data.insert(std::make_pair(0x2ad9,"ELEMENT OF OPENING DOWNWARDS"));
        data.insert(std::make_pair(0x2ada,"PITCHFORK WITH TEE TOP"));
        data.insert(std::make_pair(0x2adb,"TRANSVERSAL INTERSECTION"));
        data.insert(std::make_pair(0x2adc,"FORKING"));
        data.insert(std::make_pair(0x2add,"NONFORKING"));
        data.insert(std::make_pair(0x2ade,"SHORT LEFT TACK"));
        data.insert(std::make_pair(0x2adf,"SHORT DOWN TACK"));
        data.insert(std::make_pair(0x2ae0,"SHORT UP TACK"));
        data.insert(std::make_pair(0x2ae1,"PERPENDICULAR WITH S"));
        data.insert(std::make_pair(0x2ae2,"VERTICAL BAR TRIPLE RIGHT TURNSTILE"));
        data.insert(std::make_pair(0x2ae3,"DOUBLE VERTICAL BAR LEFT TURNSTILE"));
        data.insert(std::make_pair(0x2ae4,"VERTICAL BAR DOUBLE LEFT TURNSTILE"));
        data.insert(std::make_pair(0x2ae5,"DOUBLE VERTICAL BAR DOUBLE LEFT TURNSTILE"));
        data.insert(std::make_pair(0x2ae6,"LONG DASH FROM LEFT MEMBER OF DOUBLE VERTICAL"));
        data.insert(std::make_pair(0x2ae7,"SHORT DOWN TACK WITH OVERBAR"));
        data.insert(std::make_pair(0x2ae8,"SHORT UP TACK WITH UNDERBAR"));
        data.insert(std::make_pair(0x2ae9,"SHORT UP TACK ABOVE SHORT DOWN TACK"));
        data.insert(std::make_pair(0x2aea,"DOUBLE DOWN TACK"));
        data.insert(std::make_pair(0x2aeb,"DOUBLE UP TACK"));
        data.insert(std::make_pair(0x2aec,"DOUBLE STROKE NOT SIGN"));
        data.insert(std::make_pair(0x2aed,"REVERSED DOUBLE STROKE NOT SIGN"));
        data.insert(std::make_pair(0x2aee,"DOES NOT DIVIDE WITH REVERSED NEGATION SLASH"));
        data.insert(std::make_pair(0x2aef,"VERTICAL LINE WITH CIRCLE ABOVE"));
        data.insert(std::make_pair(0x2af0,"VERTICAL LINE WITH CIRCLE BELOW"));
        data.insert(std::make_pair(0x2af1,"DOWN TACK WITH CIRCLE BELOW"));
        data.insert(std::make_pair(0x2af2,"PARALLEL WITH HORIZONTAL STROKE"));
        data.insert(std::make_pair(0x2af3,"PARALLEL WITH TILDE OPERATOR"));
        data.insert(std::make_pair(0x2af4,"TRIPLE VERTICAL BAR BINARY RELATION"));
        data.insert(std::make_pair(0x2af5,"TRIPLE VERTICAL BAR WITH HORIZONTAL STROKE"));
        data.insert(std::make_pair(0x2af6,"TRIPLE COLON OPERATOR"));
        data.insert(std::make_pair(0x2af7,"TRIPLE NESTED LESS-THAN"));
        data.insert(std::make_pair(0x2af8,"TRIPLE NESTED GREATER-THAN"));
        data.insert(std::make_pair(0x2af9,"DOUBLE-LINE SLANTED LESS-THAN OR EQUAL TO"));
        data.insert(std::make_pair(0x2afa,"DOUBLE-LINE SLANTED GREATER-THAN OR EQUAL TO"));
        data.insert(std::make_pair(0x2afb,"TRIPLE SOLIDUS BINARY RELATION"));
        data.insert(std::make_pair(0x2afc,"LARGE TRIPLE VERTICAL BAR OPERATOR"));
        data.insert(std::make_pair(0x2afd,"DOUBLE SOLIDUS OPERATOR"));
        data.insert(std::make_pair(0x2afe,"WHITE VERTICAL BAR"));
        data.insert(std::make_pair(0x2aff,"N-ARY WHITE VERTICAL BAR"));
        data.insert(std::make_pair(0x2b00,"NORTH EAST WHITE ARROW"));
        data.insert(std::make_pair(0x2b01,"NORTH WEST WHITE ARROW"));
        data.insert(std::make_pair(0x2b02,"SOUTH EAST WHITE ARROW"));
        data.insert(std::make_pair(0x2b03,"SOUTH WEST WHITE ARROW"));
        data.insert(std::make_pair(0x2b04,"LEFT RIGHT WHITE ARROW"));
        data.insert(std::make_pair(0x2b05,"LEFTWARDS BLACK ARROW"));
        data.insert(std::make_pair(0x2b06,"UPWARDS BLACK ARROW"));
        data.insert(std::make_pair(0x2b07,"DOWNWARDS BLACK ARROW"));
        data.insert(std::make_pair(0x2b08,"NORTH EAST BLACK ARROW"));
        data.insert(std::make_pair(0x2b09,"NORTH WEST BLACK ARROW"));
        data.insert(std::make_pair(0x2b0a,"SOUTH EAST BLACK ARROW"));
        data.insert(std::make_pair(0x2b0b,"SOUTH WEST BLACK ARROW"));
        data.insert(std::make_pair(0x2b0c,"LEFT RIGHT BLACK ARROW"));
        data.insert(std::make_pair(0x2b0d,"UP DOWN BLACK ARROW"));
        data.insert(std::make_pair(0x2b0e,"RIGHTWARDS ARROW WITH TIP DOWNWARDS"));
        data.insert(std::make_pair(0x2b0f,"RIGHTWARDS ARROW WITH TIP UPWARDS"));
        data.insert(std::make_pair(0x2b10,"LEFTWARDS ARROW WITH TIP DOWNWARDS"));
        data.insert(std::make_pair(0x2b11,"LEFTWARDS ARROW WITH TIP UPWARDS"));
        data.insert(std::make_pair(0x2b12,"SQUARE WITH TOP HALF BLACK"));
        data.insert(std::make_pair(0x2b13,"SQUARE WITH BOTTOM HALF BLACK"));
        data.insert(std::make_pair(0x2b14,"SQUARE WITH UPPER RIGHT DIAGONAL HALF BLACK"));
        data.insert(std::make_pair(0x2b15,"SQUARE WITH LOWER LEFT DIAGONAL HALF BLACK"));
        data.insert(std::make_pair(0x2b16,"DIAMOND WITH LEFT HALF BLACK"));
        data.insert(std::make_pair(0x2b17,"DIAMOND WITH RIGHT HALF BLACK"));
        data.insert(std::make_pair(0x2b18,"DIAMOND WITH TOP HALF BLACK"));
        data.insert(std::make_pair(0x2b19,"DIAMOND WITH BOTTOM HALF BLACK"));
        data.insert(std::make_pair(0x2b1a,"DOTTED SQUARE"));
        data.insert(std::make_pair(0x2b1b,"BLACK LARGE SQUARE"));
        data.insert(std::make_pair(0x2b1c,"WHITE LARGE SQUARE"));
        data.insert(std::make_pair(0x2b1d,"BLACK VERY SMALL SQUARE"));
        data.insert(std::make_pair(0x2b1e,"WHITE VERY SMALL SQUARE"));
        data.insert(std::make_pair(0x2b1f,"BLACK PENTAGON"));
        data.insert(std::make_pair(0x2b20,"WHITE PENTAGON"));
        data.insert(std::make_pair(0x2b21,"WHITE HEXAGON"));
        data.insert(std::make_pair(0x2b22,"BLACK HEXAGON"));
        data.insert(std::make_pair(0x2b23,"HORIZONTAL BLACK HEXAGON"));
        data.insert(std::make_pair(0x2b24,"BLACK LARGE CIRCLE"));
        data.insert(std::make_pair(0x2b25,"BLACK MEDIUM DIAMOND"));
        data.insert(std::make_pair(0x2b26,"WHITE MEDIUM DIAMOND"));
        data.insert(std::make_pair(0x2b27,"BLACK MEDIUM LOZENGE"));
        data.insert(std::make_pair(0x2b28,"WHITE MEDIUM LOZENGE"));
        data.insert(std::make_pair(0x2b29,"BLACK SMALL DIAMOND"));
        data.insert(std::make_pair(0x2b2a,"BLACK SMALL LOZENGE"));
        data.insert(std::make_pair(0x2b2b,"WHITE SMALL LOZENGE"));
        data.insert(std::make_pair(0x2b2c,"BLACK HORIZONTAL ELLIPSE"));
        data.insert(std::make_pair(0x2b2d,"WHITE HORIZONTAL ELLIPSE"));
        data.insert(std::make_pair(0x2b2e,"BLACK VERTICAL ELLIPSE"));
        data.insert(std::make_pair(0x2b2f,"WHITE VERTICAL ELLIPSE"));
        data.insert(std::make_pair(0x2b30,"LEFT ARROW WITH SMALL CIRCLE"));
        data.insert(std::make_pair(0x2b31,"THREE LEFTWARDS ARROWS"));
        data.insert(std::make_pair(0x2b32,"LEFT ARROW WITH CIRCLED PLUS"));
        data.insert(std::make_pair(0x2b33,"LONG LEFTWARDS SQUIGGLE ARROW"));
        data.insert(std::make_pair(0x2b34,"LEFTWARDS TWO-HEADED ARROW WITH VERTICAL STROKE"));
        data.insert(std::make_pair(0x2b35,"LEFTWARDS TWO-HEADED ARROW WITH DOUBLE VERTICAL STROKE"));
        data.insert(std::make_pair(0x2b36,"LEFTWARDS TWO-HEADED ARROW FROM BAR"));
        data.insert(std::make_pair(0x2b37,"LEFTWARDS TWO-HEADED TRIPLE DASH ARROW"));
        data.insert(std::make_pair(0x2b38,"LEFTWARDS ARROW WITH DOTTED STEM"));
        data.insert(std::make_pair(0x2b39,"LEFTWARDS ARROW WITH TAIL WITH VERTICAL STROKE"));
        data.insert(std::make_pair(0x2b3a,"LEFTWARDS ARROW WITH TAIL WITH DOUBLE VERTICAL STROKE"));
        data.insert(std::make_pair(0x2b3b,"LEFTWARDS TWO-HEADED ARROW WITH TAIL"));
        data.insert(std::make_pair(0x2b3c,"LEFTWARDS TWO-HEADED ARROW WITH TAIL WITH VERTICAL STROKE"));
        data.insert(std::make_pair(0x2b3d,"LEFTWARDS TWO-HEADED ARROW WITH TAIL WITH DOUBLE VERTICAL STROKE"));
        data.insert(std::make_pair(0x2b3e,"LEFTWARDS ARROW THROUGH X"));
        data.insert(std::make_pair(0x2b3f,"WAVE ARROW POINTING DIRECTLY LEFT"));
        data.insert(std::make_pair(0x2b40,"EQUALS SIGN ABOVE LEFTWARDS ARROW"));
        data.insert(std::make_pair(0x2b41,"REVERSE TILDE OPERATOR ABOVE LEFTWARDS ARROW"));
        data.insert(std::make_pair(0x2b42,"LEFTWARDS ARROW ABOVE REVERSE ALMOST EQUAL TO"));
        data.insert(std::make_pair(0x2b43,"RIGHTWARDS ARROW THROUGH GREATER-THAN"));
        data.insert(std::make_pair(0x2b44,"RIGHTWARDS ARROW THROUGH SUPERSET"));
        data.insert(std::make_pair(0x2b45,"LEFTWARDS QUADRUPLE ARROW"));
        data.insert(std::make_pair(0x2b46,"RIGHTWARDS QUADRUPLE ARROW"));
        data.insert(std::make_pair(0x2b47,"REVERSE TILDE OPERATOR ABOVE RIGHTWARDS ARROW"));
        data.insert(std::make_pair(0x2b48,"RIGHTWARDS ARROW ABOVE REVERSE ALMOST EQUAL TO"));
        data.insert(std::make_pair(0x2b49,"TILDE OPERATOR ABOVE LEFTWARDS ARROW"));
        data.insert(std::make_pair(0x2b4a,"LEFTWARDS ARROW ABOVE ALMOST EQUAL TO"));
        data.insert(std::make_pair(0x2b4b,"LEFTWARDS ARROW ABOVE REVERSE TILDE OPERATOR"));
        data.insert(std::make_pair(0x2b4c,"RIGHTWARDS ARROW ABOVE REVERSE TILDE OPERATOR"));
        data.insert(std::make_pair(0x2b4d,"DOWNWARDS TRIANGLE-HEADED ZIGZAG ARROW"));
        data.insert(std::make_pair(0x2b4e,"SHORT SLANTED NORTH ARROW"));
        data.insert(std::make_pair(0x2b4f,"SHORT BACKSLANTED SOUTH ARROW"));
        data.insert(std::make_pair(0x2b50,"WHITE MEDIUM STAR"));
        data.insert(std::make_pair(0x2b51,"BLACK SMALL STAR"));
        data.insert(std::make_pair(0x2b52,"WHITE SMALL STAR"));
        data.insert(std::make_pair(0x2b53,"BLACK RIGHT-POINTING PENTAGON"));
        data.insert(std::make_pair(0x2b54,"WHITE RIGHT-POINTING PENTAGON"));
        data.insert(std::make_pair(0x2b55,"HEAVY LARGE CIRCLE"));
        data.insert(std::make_pair(0x2b56,"HEAVY OVAL WITH OVAL INSIDE"));
        data.insert(std::make_pair(0x2b57,"HEAVY CIRCLE WITH CIRCLE INSIDE"));
        data.insert(std::make_pair(0x2b58,"HEAVY CIRCLE"));
        data.insert(std::make_pair(0x2b59,"HEAVY CIRCLED SALTIRE"));
        data.insert(std::make_pair(0x2b5a,"SLANTED NORTH ARROW WITH HOOKED HEAD"));
        data.insert(std::make_pair(0x2b5b,"BACKSLANTED SOUTH ARROW WITH HOOKED TAIL"));
        data.insert(std::make_pair(0x2b5c,"SLANTED NORTH ARROW WITH HORIZONTAL TAIL"));
        data.insert(std::make_pair(0x2b5d,"BACKSLANTED SOUTH ARROW WITH HORIZONTAL TAIL"));
        data.insert(std::make_pair(0x2b5e,"BENT ARROW POINTING DOWNWARDS THEN NORTH EAST"));
        data.insert(std::make_pair(0x2b5f,"SHORT BENT ARROW POINTING DOWNWARDS THEN NORTH EAST"));
        data.insert(std::make_pair(0x2b60,"LEFTWARDS TRIANGLE-HEADED ARROW"));
        data.insert(std::make_pair(0x2b61,"UPWARDS TRIANGLE-HEADED ARROW"));
        data.insert(std::make_pair(0x2b62,"RIGHTWARDS TRIANGLE-HEADED ARROW"));
        data.insert(std::make_pair(0x2b63,"DOWNWARDS TRIANGLE-HEADED ARROW"));
        data.insert(std::make_pair(0x2b64,"LEFT RIGHT TRIANGLE-HEADED ARROW"));
        data.insert(std::make_pair(0x2b65,"UP DOWN TRIANGLE-HEADED ARROW"));
        data.insert(std::make_pair(0x2b66,"NORTH WEST TRIANGLE-HEADED ARROW"));
        data.insert(std::make_pair(0x2b67,"NORTH EAST TRIANGLE-HEADED ARROW"));
        data.insert(std::make_pair(0x2b68,"SOUTH EAST TRIANGLE-HEADED ARROW"));
        data.insert(std::make_pair(0x2b69,"SOUTH WEST TRIANGLE-HEADED ARROW"));
        data.insert(std::make_pair(0x2b6a,"LEFTWARDS TRIANGLE-HEADED DASHED ARROW"));
        data.insert(std::make_pair(0x2b6b,"UPWARDS TRIANGLE-HEADED DASHED ARROW"));
        data.insert(std::make_pair(0x2b6c,"RIGHTWARDS TRIANGLE-HEADED DASHED ARROW"));
        data.insert(std::make_pair(0x2b6d,"DOWNWARDS TRIANGLE-HEADED DASHED ARROW"));
        data.insert(std::make_pair(0x2b6e,"CLOCKWISE TRIANGLE-HEADED OPEN CIRCLE ARROW"));
        data.insert(std::make_pair(0x2b6f,"ANTICLOCKWISE TRIANGLE-HEADED OPEN CIRCLE ARROW"));
        data.insert(std::make_pair(0x2b70,"LEFTWARDS TRIANGLE-HEADED ARROW TO BAR"));
        data.insert(std::make_pair(0x2b71,"UPWARDS TRIANGLE-HEADED ARROW TO BAR"));
        data.insert(std::make_pair(0x2b72,"RIGHTWARDS TRIANGLE-HEADED ARROW TO BAR"));
        data.insert(std::make_pair(0x2b73,"DOWNWARDS TRIANGLE-HEADED ARROW TO BAR"));
        data.insert(std::make_pair(0x2b76,"NORTH WEST TRIANGLE-HEADED ARROW TO BAR"));
        data.insert(std::make_pair(0x2b77,"NORTH EAST TRIANGLE-HEADED ARROW TO BAR"));
        data.insert(std::make_pair(0x2b78,"SOUTH EAST TRIANGLE-HEADED ARROW TO BAR"));
        data.insert(std::make_pair(0x2b79,"SOUTH WEST TRIANGLE-HEADED ARROW TO BAR"));
        data.insert(std::make_pair(0x2b7a,"LEFTWARDS TRIANGLE-HEADED ARROW WITH DOUBLE HORIZONTAL STROKE"));
        data.insert(std::make_pair(0x2b7b,"UPWARDS TRIANGLE-HEADED ARROW WITH DOUBLE HORIZONTAL STROKE"));
        data.insert(std::make_pair(0x2b7c,"RIGHTWARDS TRIANGLE-HEADED ARROW WITH DOUBLE HORIZONTAL STROKE"));
        data.insert(std::make_pair(0x2b7d,"DOWNWARDS TRIANGLE-HEADED ARROW WITH DOUBLE HORIZONTAL STROKE"));
        data.insert(std::make_pair(0x2b7e,"HORIZONTAL TAB KEY"));
        data.insert(std::make_pair(0x2b7f,"VERTICAL TAB KEY"));
        data.insert(std::make_pair(0x2b80,"LEFTWARDS TRIANGLE-HEADED ARROW OVER RIGHTWARDS TRIANGLE-HEADED ARROW"));
        data.insert(std::make_pair(0x2b81,"UPWARDS TRIANGLE-HEADED ARROW LEFTWARDS OF DOWNWARDS TRIANGLE-HEADED ARROW"));
        data.insert(std::make_pair(0x2b82,"RIGHTWARDS TRIANGLE-HEADED ARROW OVER LEFTWARDS TRIANGLE-HEADED ARROW"));
        data.insert(std::make_pair(0x2b83,"DOWNWARDS TRIANGLE-HEADED ARROW LEFTWARDS OF UPWARDS TRIANGLE-HEADED ARROW"));
        data.insert(std::make_pair(0x2b84,"LEFTWARDS TRIANGLE-HEADED PAIRED ARROWS"));
        data.insert(std::make_pair(0x2b85,"UPWARDS TRIANGLE-HEADED PAIRED ARROWS"));
        data.insert(std::make_pair(0x2b86,"RIGHTWARDS TRIANGLE-HEADED PAIRED ARROWS"));
        data.insert(std::make_pair(0x2b87,"DOWNWARDS TRIANGLE-HEADED PAIRED ARROWS"));
        data.insert(std::make_pair(0x2b88,"LEFTWARDS BLACK CIRCLED WHITE ARROW"));
        data.insert(std::make_pair(0x2b89,"UPWARDS BLACK CIRCLED WHITE ARROW"));
        data.insert(std::make_pair(0x2b8a,"RIGHTWARDS BLACK CIRCLED WHITE ARROW"));
        data.insert(std::make_pair(0x2b8b,"DOWNWARDS BLACK CIRCLED WHITE ARROW"));
        data.insert(std::make_pair(0x2b8c,"ANTICLOCKWISE TRIANGLE-HEADED RIGHT U-SHAPED ARROW"));
        data.insert(std::make_pair(0x2b8d,"ANTICLOCKWISE TRIANGLE-HEADED BOTTOM U-SHAPED ARROW"));
        data.insert(std::make_pair(0x2b8e,"ANTICLOCKWISE TRIANGLE-HEADED LEFT U-SHAPED ARROW"));
        data.insert(std::make_pair(0x2b8f,"ANTICLOCKWISE TRIANGLE-HEADED TOP U-SHAPED ARROW"));
        data.insert(std::make_pair(0x2b90,"RETURN LEFT"));
        data.insert(std::make_pair(0x2b91,"RETURN RIGHT"));
        data.insert(std::make_pair(0x2b92,"NEWLINE LEFT"));
        data.insert(std::make_pair(0x2b93,"NEWLINE RIGHT"));
        data.insert(std::make_pair(0x2b94,"FOUR CORNER ARROWS CIRCLING ANTICLOCKWISE"));
        data.insert(std::make_pair(0x2b95,"RIGHTWARDS BLACK ARROW"));
        data.insert(std::make_pair(0x2b97,"SYMBOL FOR TYPE A ELECTRONICS"));
        data.insert(std::make_pair(0x2b98,"THREE-D TOP-LIGHTED LEFTWARDS EQUILATERAL ARROWHEAD"));
        data.insert(std::make_pair(0x2b99,"THREE-D RIGHT-LIGHTED UPWARDS EQUILATERAL ARROWHEAD"));
        data.insert(std::make_pair(0x2b9a,"THREE-D TOP-LIGHTED RIGHTWARDS EQUILATERAL ARROWHEAD"));
        data.insert(std::make_pair(0x2b9b,"THREE-D LEFT-LIGHTED DOWNWARDS EQUILATERAL ARROWHEAD"));
        data.insert(std::make_pair(0x2b9c,"BLACK LEFTWARDS EQUILATERAL ARROWHEAD"));
        data.insert(std::make_pair(0x2b9d,"BLACK UPWARDS EQUILATERAL ARROWHEAD"));
        data.insert(std::make_pair(0x2b9e,"BLACK RIGHTWARDS EQUILATERAL ARROWHEAD"));
        data.insert(std::make_pair(0x2b9f,"BLACK DOWNWARDS EQUILATERAL ARROWHEAD"));
        data.insert(std::make_pair(0x2ba0,"DOWNWARDS TRIANGLE-HEADED ARROW WITH LONG TIP LEFTWARDS"));
        data.insert(std::make_pair(0x2ba1,"DOWNWARDS TRIANGLE-HEADED ARROW WITH LONG TIP RIGHTWARDS"));
        data.insert(std::make_pair(0x2ba2,"UPWARDS TRIANGLE-HEADED ARROW WITH LONG TIP LEFTWARDS"));
        data.insert(std::make_pair(0x2ba3,"UPWARDS TRIANGLE-HEADED ARROW WITH LONG TIP RIGHTWARDS"));
        data.insert(std::make_pair(0x2ba4,"LEFTWARDS TRIANGLE-HEADED ARROW WITH LONG TIP UPWARDS"));
        data.insert(std::make_pair(0x2ba5,"RIGHTWARDS TRIANGLE-HEADED ARROW WITH LONG TIP UPWARDS"));
        data.insert(std::make_pair(0x2ba6,"LEFTWARDS TRIANGLE-HEADED ARROW WITH LONG TIP DOWNWARDS"));
        data.insert(std::make_pair(0x2ba7,"RIGHTWARDS TRIANGLE-HEADED ARROW WITH LONG TIP DOWNWARDS"));
        data.insert(std::make_pair(0x2ba8,"BLACK CURVED DOWNWARDS AND LEFTWARDS ARROW"));
        data.insert(std::make_pair(0x2ba9,"BLACK CURVED DOWNWARDS AND RIGHTWARDS ARROW"));
        data.insert(std::make_pair(0x2baa,"BLACK CURVED UPWARDS AND LEFTWARDS ARROW"));
        data.insert(std::make_pair(0x2bab,"BLACK CURVED UPWARDS AND RIGHTWARDS ARROW"));
        data.insert(std::make_pair(0x2bac,"BLACK CURVED LEFTWARDS AND UPWARDS ARROW"));
        data.insert(std::make_pair(0x2bad,"BLACK CURVED RIGHTWARDS AND UPWARDS ARROW"));
        data.insert(std::make_pair(0x2bae,"BLACK CURVED LEFTWARDS AND DOWNWARDS ARROW"));
        data.insert(std::make_pair(0x2baf,"BLACK CURVED RIGHTWARDS AND DOWNWARDS ARROW"));
        data.insert(std::make_pair(0x2bb0,"RIBBON ARROW DOWN LEFT"));
        data.insert(std::make_pair(0x2bb1,"RIBBON ARROW DOWN RIGHT"));
        data.insert(std::make_pair(0x2bb2,"RIBBON ARROW UP LEFT"));
        data.insert(std::make_pair(0x2bb3,"RIBBON ARROW UP RIGHT"));
        data.insert(std::make_pair(0x2bb4,"RIBBON ARROW LEFT UP"));
        data.insert(std::make_pair(0x2bb5,"RIBBON ARROW RIGHT UP"));
        data.insert(std::make_pair(0x2bb6,"RIBBON ARROW LEFT DOWN"));
        data.insert(std::make_pair(0x2bb7,"RIBBON ARROW RIGHT DOWN"));
        data.insert(std::make_pair(0x2bb8,"UPWARDS WHITE ARROW FROM BAR WITH HORIZONTAL BAR"));
        data.insert(std::make_pair(0x2bb9,"UP ARROWHEAD IN A RECTANGLE BOX"));
        data.insert(std::make_pair(0x2bba,"OVERLAPPING WHITE SQUARES"));
        data.insert(std::make_pair(0x2bbb,"OVERLAPPING WHITE AND BLACK SQUARES"));
        data.insert(std::make_pair(0x2bbc,"OVERLAPPING BLACK SQUARES"));
        data.insert(std::make_pair(0x2bbd,"BALLOT BOX WITH LIGHT X"));
        data.insert(std::make_pair(0x2bbe,"CIRCLED X"));
        data.insert(std::make_pair(0x2bbf,"CIRCLED BOLD X"));
        data.insert(std::make_pair(0x2bc0,"BLACK SQUARE CENTRED"));
        data.insert(std::make_pair(0x2bc1,"BLACK DIAMOND CENTRED"));
        data.insert(std::make_pair(0x2bc2,"TURNED BLACK PENTAGON"));
        data.insert(std::make_pair(0x2bc3,"HORIZONTAL BLACK OCTAGON"));
        data.insert(std::make_pair(0x2bc4,"BLACK OCTAGON"));
        data.insert(std::make_pair(0x2bc5,"BLACK MEDIUM UP-POINTING TRIANGLE CENTRED"));
        data.insert(std::make_pair(0x2bc6,"BLACK MEDIUM DOWN-POINTING TRIANGLE CENTRED"));
        data.insert(std::make_pair(0x2bc7,"BLACK MEDIUM LEFT-POINTING TRIANGLE CENTRED"));
        data.insert(std::make_pair(0x2bc8,"BLACK MEDIUM RIGHT-POINTING TRIANGLE CENTRED"));
        data.insert(std::make_pair(0x2bc9,"NEPTUNE FORM TWO"));
        data.insert(std::make_pair(0x2bca,"TOP HALF BLACK CIRCLE"));
        data.insert(std::make_pair(0x2bcb,"BOTTOM HALF BLACK CIRCLE"));
        data.insert(std::make_pair(0x2bcc,"LIGHT FOUR POINTED BLACK CUSP"));
        data.insert(std::make_pair(0x2bcd,"ROTATED LIGHT FOUR POINTED BLACK CUSP"));
        data.insert(std::make_pair(0x2bce,"WHITE FOUR POINTED CUSP"));
        data.insert(std::make_pair(0x2bcf,"ROTATED WHITE FOUR POINTED CUSP"));
        data.insert(std::make_pair(0x2bd0,"SQUARE POSITION INDICATOR"));
        data.insert(std::make_pair(0x2bd1,"UNCERTAINTY SIGN"));
        data.insert(std::make_pair(0x2bd2,"GROUP MARK"));
        data.insert(std::make_pair(0x2bd3,"PLUTO FORM TWO"));
        data.insert(std::make_pair(0x2bd4,"PLUTO FORM THREE"));
        data.insert(std::make_pair(0x2bd5,"PLUTO FORM FOUR"));
        data.insert(std::make_pair(0x2bd6,"PLUTO FORM FIVE"));
        data.insert(std::make_pair(0x2bd7,"TRANSPLUTO"));
        data.insert(std::make_pair(0x2bd8,"PROSERPINA"));
        data.insert(std::make_pair(0x2bd9,"ASTRAEA"));
        data.insert(std::make_pair(0x2bda,"HYGIEA"));
        data.insert(std::make_pair(0x2bdb,"PHOLUS"));
        data.insert(std::make_pair(0x2bdc,"NESSUS"));
        data.insert(std::make_pair(0x2bdd,"WHITE MOON SELENA"));
        data.insert(std::make_pair(0x2bde,"BLACK DIAMOND ON CROSS"));
        data.insert(std::make_pair(0x2bdf,"TRUE LIGHT MOON ARTA"));
        data.insert(std::make_pair(0x2be0,"CUPIDO"));
        data.insert(std::make_pair(0x2be1,"HADES"));
        data.insert(std::make_pair(0x2be2,"ZEUS"));
        data.insert(std::make_pair(0x2be3,"KRONOS"));
        data.insert(std::make_pair(0x2be4,"APOLLON"));
        data.insert(std::make_pair(0x2be5,"ADMETOS"));
        data.insert(std::make_pair(0x2be6,"VULCANUS"));
        data.insert(std::make_pair(0x2be7,"POSEIDON"));
        data.insert(std::make_pair(0x2be8,"LEFT HALF BLACK STAR"));
        data.insert(std::make_pair(0x2be9,"RIGHT HALF BLACK STAR"));
        data.insert(std::make_pair(0x2bea,"STAR WITH LEFT HALF BLACK"));
        data.insert(std::make_pair(0x2beb,"STAR WITH RIGHT HALF BLACK"));
        data.insert(std::make_pair(0x2bec,"LEFTWARDS TWO-HEADED ARROW WITH TRIANGLE ARROWHEADS"));
        data.insert(std::make_pair(0x2bed,"UPWARDS TWO-HEADED ARROW WITH TRIANGLE ARROWHEADS"));
        data.insert(std::make_pair(0x2bee,"RIGHTWARDS TWO-HEADED ARROW WITH TRIANGLE ARROWHEADS"));
        data.insert(std::make_pair(0x2bef,"DOWNWARDS TWO-HEADED ARROW WITH TRIANGLE ARROWHEADS"));
        data.insert(std::make_pair(0x2bf0,"ERIS FORM ONE"));
        data.insert(std::make_pair(0x2bf1,"ERIS FORM TWO"));
        data.insert(std::make_pair(0x2bf2,"SEDNA"));
        data.insert(std::make_pair(0x2bf3,"RUSSIAN ASTROLOGICAL SYMBOL VIGINTILE"));
        data.insert(std::make_pair(0x2bf4,"RUSSIAN ASTROLOGICAL SYMBOL NOVILE"));
        data.insert(std::make_pair(0x2bf5,"RUSSIAN ASTROLOGICAL SYMBOL QUINTILE"));
        data.insert(std::make_pair(0x2bf6,"RUSSIAN ASTROLOGICAL SYMBOL BINOVILE"));
        data.insert(std::make_pair(0x2bf7,"RUSSIAN ASTROLOGICAL SYMBOL SENTAGON"));
        data.insert(std::make_pair(0x2bf8,"RUSSIAN ASTROLOGICAL SYMBOL TREDECILE"));
        data.insert(std::make_pair(0x2bf9,"EQUALS SIGN WITH INFINITY BELOW"));
        data.insert(std::make_pair(0x2bfa,"UNITED SYMBOL"));
        data.insert(std::make_pair(0x2bfb,"SEPARATED SYMBOL"));
        data.insert(std::make_pair(0x2bfc,"DOUBLED SYMBOL"));
        data.insert(std::make_pair(0x2bfd,"PASSED SYMBOL"));
        data.insert(std::make_pair(0x2bfe,"REVERSED RIGHT ANGLE"));
        data.insert(std::make_pair(0x2bff,"HELLSCHREIBER PAUSE SYMBOL"));
        data.insert(std::make_pair(0x2c00,"GLAGOLITIC CAPITAL LETTER AZU"));
        data.insert(std::make_pair(0x2c01,"GLAGOLITIC CAPITAL LETTER BUKY"));
        data.insert(std::make_pair(0x2c02,"GLAGOLITIC CAPITAL LETTER VEDE"));
        data.insert(std::make_pair(0x2c03,"GLAGOLITIC CAPITAL LETTER GLAGOLI"));
        data.insert(std::make_pair(0x2c04,"GLAGOLITIC CAPITAL LETTER DOBRO"));
        data.insert(std::make_pair(0x2c05,"GLAGOLITIC CAPITAL LETTER YESTU"));
        data.insert(std::make_pair(0x2c06,"GLAGOLITIC CAPITAL LETTER ZHIVETE"));
        data.insert(std::make_pair(0x2c07,"GLAGOLITIC CAPITAL LETTER DZELO"));
        data.insert(std::make_pair(0x2c08,"GLAGOLITIC CAPITAL LETTER ZEMLJA"));
        data.insert(std::make_pair(0x2c09,"GLAGOLITIC CAPITAL LETTER IZHE"));
        data.insert(std::make_pair(0x2c0a,"GLAGOLITIC CAPITAL LETTER INITIAL IZHE"));
        data.insert(std::make_pair(0x2c0b,"GLAGOLITIC CAPITAL LETTER I"));
        data.insert(std::make_pair(0x2c0c,"GLAGOLITIC CAPITAL LETTER DJERVI"));
        data.insert(std::make_pair(0x2c0d,"GLAGOLITIC CAPITAL LETTER KAKO"));
        data.insert(std::make_pair(0x2c0e,"GLAGOLITIC CAPITAL LETTER LJUDIJE"));
        data.insert(std::make_pair(0x2c0f,"GLAGOLITIC CAPITAL LETTER MYSLITE"));
        data.insert(std::make_pair(0x2c10,"GLAGOLITIC CAPITAL LETTER NASHI"));
        data.insert(std::make_pair(0x2c11,"GLAGOLITIC CAPITAL LETTER ONU"));
        data.insert(std::make_pair(0x2c12,"GLAGOLITIC CAPITAL LETTER POKOJI"));
        data.insert(std::make_pair(0x2c13,"GLAGOLITIC CAPITAL LETTER RITSI"));
        data.insert(std::make_pair(0x2c14,"GLAGOLITIC CAPITAL LETTER SLOVO"));
        data.insert(std::make_pair(0x2c15,"GLAGOLITIC CAPITAL LETTER TVRIDO"));
        data.insert(std::make_pair(0x2c16,"GLAGOLITIC CAPITAL LETTER UKU"));
        data.insert(std::make_pair(0x2c17,"GLAGOLITIC CAPITAL LETTER FRITU"));
        data.insert(std::make_pair(0x2c18,"GLAGOLITIC CAPITAL LETTER HERU"));
        data.insert(std::make_pair(0x2c19,"GLAGOLITIC CAPITAL LETTER OTU"));
        data.insert(std::make_pair(0x2c1a,"GLAGOLITIC CAPITAL LETTER PE"));
        data.insert(std::make_pair(0x2c1b,"GLAGOLITIC CAPITAL LETTER SHTA"));
        data.insert(std::make_pair(0x2c1c,"GLAGOLITIC CAPITAL LETTER TSI"));
        data.insert(std::make_pair(0x2c1d,"GLAGOLITIC CAPITAL LETTER CHRIVI"));
        data.insert(std::make_pair(0x2c1e,"GLAGOLITIC CAPITAL LETTER SHA"));
        data.insert(std::make_pair(0x2c1f,"GLAGOLITIC CAPITAL LETTER YERU"));
        data.insert(std::make_pair(0x2c20,"GLAGOLITIC CAPITAL LETTER YERI"));
        data.insert(std::make_pair(0x2c21,"GLAGOLITIC CAPITAL LETTER YATI"));
        data.insert(std::make_pair(0x2c22,"GLAGOLITIC CAPITAL LETTER SPIDERY HA"));
        data.insert(std::make_pair(0x2c23,"GLAGOLITIC CAPITAL LETTER YU"));
        data.insert(std::make_pair(0x2c24,"GLAGOLITIC CAPITAL LETTER SMALL YUS"));
        data.insert(std::make_pair(0x2c25,"GLAGOLITIC CAPITAL LETTER SMALL YUS WITH TAIL"));
        data.insert(std::make_pair(0x2c26,"GLAGOLITIC CAPITAL LETTER YO"));
        data.insert(std::make_pair(0x2c27,"GLAGOLITIC CAPITAL LETTER IOTATED SMALL YUS"));
        data.insert(std::make_pair(0x2c28,"GLAGOLITIC CAPITAL LETTER BIG YUS"));
        data.insert(std::make_pair(0x2c29,"GLAGOLITIC CAPITAL LETTER IOTATED BIG YUS"));
        data.insert(std::make_pair(0x2c2a,"GLAGOLITIC CAPITAL LETTER FITA"));
        data.insert(std::make_pair(0x2c2b,"GLAGOLITIC CAPITAL LETTER IZHITSA"));
        data.insert(std::make_pair(0x2c2c,"GLAGOLITIC CAPITAL LETTER SHTAPIC"));
        data.insert(std::make_pair(0x2c2d,"GLAGOLITIC CAPITAL LETTER TROKUTASTI A"));
        data.insert(std::make_pair(0x2c2e,"GLAGOLITIC CAPITAL LETTER LATINATE MYSLITE"));
        data.insert(std::make_pair(0x2c2f,"GLAGOLITIC CAPITAL LETTER CAUDATE CHRIVI"));
        data.insert(std::make_pair(0x2c30,"GLAGOLITIC SMALL LETTER AZU"));
        data.insert(std::make_pair(0x2c31,"GLAGOLITIC SMALL LETTER BUKY"));
        data.insert(std::make_pair(0x2c32,"GLAGOLITIC SMALL LETTER VEDE"));
        data.insert(std::make_pair(0x2c33,"GLAGOLITIC SMALL LETTER GLAGOLI"));
        data.insert(std::make_pair(0x2c34,"GLAGOLITIC SMALL LETTER DOBRO"));
        data.insert(std::make_pair(0x2c35,"GLAGOLITIC SMALL LETTER YESTU"));
        data.insert(std::make_pair(0x2c36,"GLAGOLITIC SMALL LETTER ZHIVETE"));
        data.insert(std::make_pair(0x2c37,"GLAGOLITIC SMALL LETTER DZELO"));
        data.insert(std::make_pair(0x2c38,"GLAGOLITIC SMALL LETTER ZEMLJA"));
        data.insert(std::make_pair(0x2c39,"GLAGOLITIC SMALL LETTER IZHE"));
        data.insert(std::make_pair(0x2c3a,"GLAGOLITIC SMALL LETTER INITIAL IZHE"));
        data.insert(std::make_pair(0x2c3b,"GLAGOLITIC SMALL LETTER I"));
        data.insert(std::make_pair(0x2c3c,"GLAGOLITIC SMALL LETTER DJERVI"));
        data.insert(std::make_pair(0x2c3d,"GLAGOLITIC SMALL LETTER KAKO"));
        data.insert(std::make_pair(0x2c3e,"GLAGOLITIC SMALL LETTER LJUDIJE"));
        data.insert(std::make_pair(0x2c3f,"GLAGOLITIC SMALL LETTER MYSLITE"));
        data.insert(std::make_pair(0x2c40,"GLAGOLITIC SMALL LETTER NASHI"));
        data.insert(std::make_pair(0x2c41,"GLAGOLITIC SMALL LETTER ONU"));
        data.insert(std::make_pair(0x2c42,"GLAGOLITIC SMALL LETTER POKOJI"));
        data.insert(std::make_pair(0x2c43,"GLAGOLITIC SMALL LETTER RITSI"));
        data.insert(std::make_pair(0x2c44,"GLAGOLITIC SMALL LETTER SLOVO"));
        data.insert(std::make_pair(0x2c45,"GLAGOLITIC SMALL LETTER TVRIDO"));
        data.insert(std::make_pair(0x2c46,"GLAGOLITIC SMALL LETTER UKU"));
        data.insert(std::make_pair(0x2c47,"GLAGOLITIC SMALL LETTER FRITU"));
        data.insert(std::make_pair(0x2c48,"GLAGOLITIC SMALL LETTER HERU"));
        data.insert(std::make_pair(0x2c49,"GLAGOLITIC SMALL LETTER OTU"));
        data.insert(std::make_pair(0x2c4a,"GLAGOLITIC SMALL LETTER PE"));
        data.insert(std::make_pair(0x2c4b,"GLAGOLITIC SMALL LETTER SHTA"));
        data.insert(std::make_pair(0x2c4c,"GLAGOLITIC SMALL LETTER TSI"));
        data.insert(std::make_pair(0x2c4d,"GLAGOLITIC SMALL LETTER CHRIVI"));
        data.insert(std::make_pair(0x2c4e,"GLAGOLITIC SMALL LETTER SHA"));
        data.insert(std::make_pair(0x2c4f,"GLAGOLITIC SMALL LETTER YERU"));
        data.insert(std::make_pair(0x2c50,"GLAGOLITIC SMALL LETTER YERI"));
        data.insert(std::make_pair(0x2c51,"GLAGOLITIC SMALL LETTER YATI"));
        data.insert(std::make_pair(0x2c52,"GLAGOLITIC SMALL LETTER SPIDERY HA"));
        data.insert(std::make_pair(0x2c53,"GLAGOLITIC SMALL LETTER YU"));
        data.insert(std::make_pair(0x2c54,"GLAGOLITIC SMALL LETTER SMALL YUS"));
        data.insert(std::make_pair(0x2c55,"GLAGOLITIC SMALL LETTER SMALL YUS WITH TAIL"));
        data.insert(std::make_pair(0x2c56,"GLAGOLITIC SMALL LETTER YO"));
        data.insert(std::make_pair(0x2c57,"GLAGOLITIC SMALL LETTER IOTATED SMALL YUS"));
        data.insert(std::make_pair(0x2c58,"GLAGOLITIC SMALL LETTER BIG YUS"));
        data.insert(std::make_pair(0x2c59,"GLAGOLITIC SMALL LETTER IOTATED BIG YUS"));
        data.insert(std::make_pair(0x2c5a,"GLAGOLITIC SMALL LETTER FITA"));
        data.insert(std::make_pair(0x2c5b,"GLAGOLITIC SMALL LETTER IZHITSA"));
        data.insert(std::make_pair(0x2c5c,"GLAGOLITIC SMALL LETTER SHTAPIC"));
        data.insert(std::make_pair(0x2c5d,"GLAGOLITIC SMALL LETTER TROKUTASTI A"));
        data.insert(std::make_pair(0x2c5e,"GLAGOLITIC SMALL LETTER LATINATE MYSLITE"));
        data.insert(std::make_pair(0x2c5f,"GLAGOLITIC SMALL LETTER CAUDATE CHRIVI"));
        data.insert(std::make_pair(0x2c60,"LATIN CAPITAL LETTER L WITH DOUBLE BAR"));
        data.insert(std::make_pair(0x2c61,"LATIN SMALL LETTER L WITH DOUBLE BAR"));
        data.insert(std::make_pair(0x2c62,"LATIN CAPITAL LETTER L WITH MIDDLE TILDE"));
        data.insert(std::make_pair(0x2c63,"LATIN CAPITAL LETTER P WITH STROKE"));
        data.insert(std::make_pair(0x2c64,"LATIN CAPITAL LETTER R WITH TAIL"));
        data.insert(std::make_pair(0x2c65,"LATIN SMALL LETTER A WITH STROKE"));
        data.insert(std::make_pair(0x2c66,"LATIN SMALL LETTER T WITH DIAGONAL STROKE"));
        data.insert(std::make_pair(0x2c67,"LATIN CAPITAL LETTER H WITH DESCENDER"));
        data.insert(std::make_pair(0x2c68,"LATIN SMALL LETTER H WITH DESCENDER"));
        data.insert(std::make_pair(0x2c69,"LATIN CAPITAL LETTER K WITH DESCENDER"));
        data.insert(std::make_pair(0x2c6a,"LATIN SMALL LETTER K WITH DESCENDER"));
        data.insert(std::make_pair(0x2c6b,"LATIN CAPITAL LETTER Z WITH DESCENDER"));
        data.insert(std::make_pair(0x2c6c,"LATIN SMALL LETTER Z WITH DESCENDER"));
        data.insert(std::make_pair(0x2c6d,"LATIN CAPITAL LETTER ALPHA"));
        data.insert(std::make_pair(0x2c6e,"LATIN CAPITAL LETTER M WITH HOOK"));
        data.insert(std::make_pair(0x2c6f,"LATIN CAPITAL LETTER TURNED A"));
        data.insert(std::make_pair(0x2c70,"LATIN CAPITAL LETTER TURNED ALPHA"));
        data.insert(std::make_pair(0x2c71,"LATIN SMALL LETTER V WITH RIGHT HOOK"));
        data.insert(std::make_pair(0x2c72,"LATIN CAPITAL LETTER W WITH HOOK"));
        data.insert(std::make_pair(0x2c73,"LATIN SMALL LETTER W WITH HOOK"));
        data.insert(std::make_pair(0x2c74,"LATIN SMALL LETTER V WITH CURL"));
        data.insert(std::make_pair(0x2c75,"LATIN CAPITAL LETTER HALF H"));
        data.insert(std::make_pair(0x2c76,"LATIN SMALL LETTER HALF H"));
        data.insert(std::make_pair(0x2c77,"LATIN SMALL LETTER TAILLESS PHI"));
        data.insert(std::make_pair(0x2c78,"LATIN SMALL LETTER E WITH NOTCH"));
        data.insert(std::make_pair(0x2c79,"LATIN SMALL LETTER TURNED R WITH TAIL"));
        data.insert(std::make_pair(0x2c7a,"LATIN SMALL LETTER O WITH LOW RING INSIDE"));
        data.insert(std::make_pair(0x2c7b,"LATIN LETTER SMALL CAPITAL TURNED E"));
        data.insert(std::make_pair(0x2c7c,"LATIN SUBSCRIPT SMALL LETTER J"));
        data.insert(std::make_pair(0x2c7d,"MODIFIER LETTER CAPITAL V"));
        data.insert(std::make_pair(0x2c7e,"LATIN CAPITAL LETTER S WITH SWASH TAIL"));
        data.insert(std::make_pair(0x2c7f,"LATIN CAPITAL LETTER Z WITH SWASH TAIL"));
        data.insert(std::make_pair(0x2c80,"COPTIC CAPITAL LETTER ALFA"));
        data.insert(std::make_pair(0x2c81,"COPTIC SMALL LETTER ALFA"));
        data.insert(std::make_pair(0x2c82,"COPTIC CAPITAL LETTER VIDA"));
        data.insert(std::make_pair(0x2c83,"COPTIC SMALL LETTER VIDA"));
        data.insert(std::make_pair(0x2c84,"COPTIC CAPITAL LETTER GAMMA"));
        data.insert(std::make_pair(0x2c85,"COPTIC SMALL LETTER GAMMA"));
        data.insert(std::make_pair(0x2c86,"COPTIC CAPITAL LETTER DALDA"));
        data.insert(std::make_pair(0x2c87,"COPTIC SMALL LETTER DALDA"));
        data.insert(std::make_pair(0x2c88,"COPTIC CAPITAL LETTER EIE"));
        data.insert(std::make_pair(0x2c89,"COPTIC SMALL LETTER EIE"));
        data.insert(std::make_pair(0x2c8a,"COPTIC CAPITAL LETTER SOU"));
        data.insert(std::make_pair(0x2c8b,"COPTIC SMALL LETTER SOU"));
        data.insert(std::make_pair(0x2c8c,"COPTIC CAPITAL LETTER ZATA"));
        data.insert(std::make_pair(0x2c8d,"COPTIC SMALL LETTER ZATA"));
        data.insert(std::make_pair(0x2c8e,"COPTIC CAPITAL LETTER HATE"));
        data.insert(std::make_pair(0x2c8f,"COPTIC SMALL LETTER HATE"));
        data.insert(std::make_pair(0x2c90,"COPTIC CAPITAL LETTER THETHE"));
        data.insert(std::make_pair(0x2c91,"COPTIC SMALL LETTER THETHE"));
        data.insert(std::make_pair(0x2c92,"COPTIC CAPITAL LETTER IAUDA"));
        data.insert(std::make_pair(0x2c93,"COPTIC SMALL LETTER IAUDA"));
        data.insert(std::make_pair(0x2c94,"COPTIC CAPITAL LETTER KAPA"));
        data.insert(std::make_pair(0x2c95,"COPTIC SMALL LETTER KAPA"));
        data.insert(std::make_pair(0x2c96,"COPTIC CAPITAL LETTER LAULA"));
        data.insert(std::make_pair(0x2c97,"COPTIC SMALL LETTER LAULA"));
        data.insert(std::make_pair(0x2c98,"COPTIC CAPITAL LETTER MI"));
        data.insert(std::make_pair(0x2c99,"COPTIC SMALL LETTER MI"));
        data.insert(std::make_pair(0x2c9a,"COPTIC CAPITAL LETTER NI"));
        data.insert(std::make_pair(0x2c9b,"COPTIC SMALL LETTER NI"));
        data.insert(std::make_pair(0x2c9c,"COPTIC CAPITAL LETTER KSI"));
        data.insert(std::make_pair(0x2c9d,"COPTIC SMALL LETTER KSI"));
        data.insert(std::make_pair(0x2c9e,"COPTIC CAPITAL LETTER O"));
        data.insert(std::make_pair(0x2c9f,"COPTIC SMALL LETTER O"));
        data.insert(std::make_pair(0x2ca0,"COPTIC CAPITAL LETTER PI"));
        data.insert(std::make_pair(0x2ca1,"COPTIC SMALL LETTER PI"));
        data.insert(std::make_pair(0x2ca2,"COPTIC CAPITAL LETTER RO"));
        data.insert(std::make_pair(0x2ca3,"COPTIC SMALL LETTER RO"));
        data.insert(std::make_pair(0x2ca4,"COPTIC CAPITAL LETTER SIMA"));
        data.insert(std::make_pair(0x2ca5,"COPTIC SMALL LETTER SIMA"));
        data.insert(std::make_pair(0x2ca6,"COPTIC CAPITAL LETTER TAU"));
        data.insert(std::make_pair(0x2ca7,"COPTIC SMALL LETTER TAU"));
        data.insert(std::make_pair(0x2ca8,"COPTIC CAPITAL LETTER UA"));
        data.insert(std::make_pair(0x2ca9,"COPTIC SMALL LETTER UA"));
        data.insert(std::make_pair(0x2caa,"COPTIC CAPITAL LETTER FI"));
        data.insert(std::make_pair(0x2cab,"COPTIC SMALL LETTER FI"));
        data.insert(std::make_pair(0x2cac,"COPTIC CAPITAL LETTER KHI"));
        data.insert(std::make_pair(0x2cad,"COPTIC SMALL LETTER KHI"));
        data.insert(std::make_pair(0x2cae,"COPTIC CAPITAL LETTER PSI"));
        data.insert(std::make_pair(0x2caf,"COPTIC SMALL LETTER PSI"));
        data.insert(std::make_pair(0x2cb0,"COPTIC CAPITAL LETTER OOU"));
        data.insert(std::make_pair(0x2cb1,"COPTIC SMALL LETTER OOU"));
        data.insert(std::make_pair(0x2cb2,"COPTIC CAPITAL LETTER DIALECT-P ALEF"));
        data.insert(std::make_pair(0x2cb3,"COPTIC SMALL LETTER DIALECT-P ALEF"));
        data.insert(std::make_pair(0x2cb4,"COPTIC CAPITAL LETTER OLD COPTIC AIN"));
        data.insert(std::make_pair(0x2cb5,"COPTIC SMALL LETTER OLD COPTIC AIN"));
        data.insert(std::make_pair(0x2cb6,"COPTIC CAPITAL LETTER CRYPTOGRAMMIC EIE"));
        data.insert(std::make_pair(0x2cb7,"COPTIC SMALL LETTER CRYPTOGRAMMIC EIE"));
        data.insert(std::make_pair(0x2cb8,"COPTIC CAPITAL LETTER DIALECT-P KAPA"));
        data.insert(std::make_pair(0x2cb9,"COPTIC SMALL LETTER DIALECT-P KAPA"));
        data.insert(std::make_pair(0x2cba,"COPTIC CAPITAL LETTER DIALECT-P NI"));
        data.insert(std::make_pair(0x2cbb,"COPTIC SMALL LETTER DIALECT-P NI"));
        data.insert(std::make_pair(0x2cbc,"COPTIC CAPITAL LETTER CRYPTOGRAMMIC NI"));
        data.insert(std::make_pair(0x2cbd,"COPTIC SMALL LETTER CRYPTOGRAMMIC NI"));
        data.insert(std::make_pair(0x2cbe,"COPTIC CAPITAL LETTER OLD COPTIC OOU"));
        data.insert(std::make_pair(0x2cbf,"COPTIC SMALL LETTER OLD COPTIC OOU"));
        data.insert(std::make_pair(0x2cc0,"COPTIC CAPITAL LETTER SAMPI"));
        data.insert(std::make_pair(0x2cc1,"COPTIC SMALL LETTER SAMPI"));
        data.insert(std::make_pair(0x2cc2,"COPTIC CAPITAL LETTER CROSSED SHEI"));
        data.insert(std::make_pair(0x2cc3,"COPTIC SMALL LETTER CROSSED SHEI"));
        data.insert(std::make_pair(0x2cc4,"COPTIC CAPITAL LETTER OLD COPTIC SHEI"));
        data.insert(std::make_pair(0x2cc5,"COPTIC SMALL LETTER OLD COPTIC SHEI"));
        data.insert(std::make_pair(0x2cc6,"COPTIC CAPITAL LETTER OLD COPTIC ESH"));
        data.insert(std::make_pair(0x2cc7,"COPTIC SMALL LETTER OLD COPTIC ESH"));
        data.insert(std::make_pair(0x2cc8,"COPTIC CAPITAL LETTER AKHMIMIC KHEI"));
        data.insert(std::make_pair(0x2cc9,"COPTIC SMALL LETTER AKHMIMIC KHEI"));
        data.insert(std::make_pair(0x2cca,"COPTIC CAPITAL LETTER DIALECT-P HORI"));
        data.insert(std::make_pair(0x2ccb,"COPTIC SMALL LETTER DIALECT-P HORI"));
        data.insert(std::make_pair(0x2ccc,"COPTIC CAPITAL LETTER OLD COPTIC HORI"));
        data.insert(std::make_pair(0x2ccd,"COPTIC SMALL LETTER OLD COPTIC HORI"));
        data.insert(std::make_pair(0x2cce,"COPTIC CAPITAL LETTER OLD COPTIC HA"));
        data.insert(std::make_pair(0x2ccf,"COPTIC SMALL LETTER OLD COPTIC HA"));
        data.insert(std::make_pair(0x2cd0,"COPTIC CAPITAL LETTER L-SHAPED HA"));
        data.insert(std::make_pair(0x2cd1,"COPTIC SMALL LETTER L-SHAPED HA"));
        data.insert(std::make_pair(0x2cd2,"COPTIC CAPITAL LETTER OLD COPTIC HEI"));
        data.insert(std::make_pair(0x2cd3,"COPTIC SMALL LETTER OLD COPTIC HEI"));
        data.insert(std::make_pair(0x2cd4,"COPTIC CAPITAL LETTER OLD COPTIC HAT"));
        data.insert(std::make_pair(0x2cd5,"COPTIC SMALL LETTER OLD COPTIC HAT"));
        data.insert(std::make_pair(0x2cd6,"COPTIC CAPITAL LETTER OLD COPTIC GANGIA"));
        data.insert(std::make_pair(0x2cd7,"COPTIC SMALL LETTER OLD COPTIC GANGIA"));
        data.insert(std::make_pair(0x2cd8,"COPTIC CAPITAL LETTER OLD COPTIC DJA"));
        data.insert(std::make_pair(0x2cd9,"COPTIC SMALL LETTER OLD COPTIC DJA"));
        data.insert(std::make_pair(0x2cda,"COPTIC CAPITAL LETTER OLD COPTIC SHIMA"));
        data.insert(std::make_pair(0x2cdb,"COPTIC SMALL LETTER OLD COPTIC SHIMA"));
        data.insert(std::make_pair(0x2cdc,"COPTIC CAPITAL LETTER OLD NUBIAN SHIMA"));
        data.insert(std::make_pair(0x2cdd,"COPTIC SMALL LETTER OLD NUBIAN SHIMA"));
        data.insert(std::make_pair(0x2cde,"COPTIC CAPITAL LETTER OLD NUBIAN NGI"));
        data.insert(std::make_pair(0x2cdf,"COPTIC SMALL LETTER OLD NUBIAN NGI"));
        data.insert(std::make_pair(0x2ce0,"COPTIC CAPITAL LETTER OLD NUBIAN NYI"));
        data.insert(std::make_pair(0x2ce1,"COPTIC SMALL LETTER OLD NUBIAN NYI"));
        data.insert(std::make_pair(0x2ce2,"COPTIC CAPITAL LETTER OLD NUBIAN WAU"));
        data.insert(std::make_pair(0x2ce3,"COPTIC SMALL LETTER OLD NUBIAN WAU"));
        data.insert(std::make_pair(0x2ce4,"COPTIC SYMBOL KAI"));
        data.insert(std::make_pair(0x2ce5,"COPTIC SYMBOL MI RO"));
        data.insert(std::make_pair(0x2ce6,"COPTIC SYMBOL PI RO"));
        data.insert(std::make_pair(0x2ce7,"COPTIC SYMBOL STAUROS"));
        data.insert(std::make_pair(0x2ce8,"COPTIC SYMBOL TAU RO"));
        data.insert(std::make_pair(0x2ce9,"COPTIC SYMBOL KHI RO"));
        data.insert(std::make_pair(0x2cea,"COPTIC SYMBOL SHIMA SIMA"));
        data.insert(std::make_pair(0x2ceb,"COPTIC CAPITAL LETTER CRYPTOGRAMMIC SHEI"));
        data.insert(std::make_pair(0x2cec,"COPTIC SMALL LETTER CRYPTOGRAMMIC SHEI"));
        data.insert(std::make_pair(0x2ced,"COPTIC CAPITAL LETTER CRYPTOGRAMMIC GANGIA"));
        data.insert(std::make_pair(0x2cee,"COPTIC SMALL LETTER CRYPTOGRAMMIC GANGIA"));
        data.insert(std::make_pair(0x2cef,"COPTIC COMBINING NI ABOVE"));
        data.insert(std::make_pair(0x2cf0,"COPTIC COMBINING SPIRITUS ASPER"));
        data.insert(std::make_pair(0x2cf1,"COPTIC COMBINING SPIRITUS LENIS"));
        data.insert(std::make_pair(0x2cf2,"COPTIC CAPITAL LETTER BOHAIRIC KHEI"));
        data.insert(std::make_pair(0x2cf3,"COPTIC SMALL LETTER BOHAIRIC KHEI"));
        data.insert(std::make_pair(0x2cf9,"COPTIC OLD NUBIAN FULL STOP"));
        data.insert(std::make_pair(0x2cfa,"COPTIC OLD NUBIAN DIRECT QUESTION MARK"));
        data.insert(std::make_pair(0x2cfb,"COPTIC OLD NUBIAN INDIRECT QUESTION MARK"));
        data.insert(std::make_pair(0x2cfc,"COPTIC OLD NUBIAN VERSE DIVIDER"));
        data.insert(std::make_pair(0x2cfd,"COPTIC FRACTION ONE HALF"));
        data.insert(std::make_pair(0x2cfe,"COPTIC FULL STOP"));
        data.insert(std::make_pair(0x2cff,"COPTIC MORPHOLOGICAL DIVIDER"));
        data.insert(std::make_pair(0x2d00,"GEORGIAN SMALL LETTER AN"));
        data.insert(std::make_pair(0x2d01,"GEORGIAN SMALL LETTER BAN"));
        data.insert(std::make_pair(0x2d02,"GEORGIAN SMALL LETTER GAN"));
        data.insert(std::make_pair(0x2d03,"GEORGIAN SMALL LETTER DON"));
        data.insert(std::make_pair(0x2d04,"GEORGIAN SMALL LETTER EN"));
        data.insert(std::make_pair(0x2d05,"GEORGIAN SMALL LETTER VIN"));
        data.insert(std::make_pair(0x2d06,"GEORGIAN SMALL LETTER ZEN"));
        data.insert(std::make_pair(0x2d07,"GEORGIAN SMALL LETTER TAN"));
        data.insert(std::make_pair(0x2d08,"GEORGIAN SMALL LETTER IN"));
        data.insert(std::make_pair(0x2d09,"GEORGIAN SMALL LETTER KAN"));
        data.insert(std::make_pair(0x2d0a,"GEORGIAN SMALL LETTER LAS"));
        data.insert(std::make_pair(0x2d0b,"GEORGIAN SMALL LETTER MAN"));
        data.insert(std::make_pair(0x2d0c,"GEORGIAN SMALL LETTER NAR"));
        data.insert(std::make_pair(0x2d0d,"GEORGIAN SMALL LETTER ON"));
        data.insert(std::make_pair(0x2d0e,"GEORGIAN SMALL LETTER PAR"));
        data.insert(std::make_pair(0x2d0f,"GEORGIAN SMALL LETTER ZHAR"));
        data.insert(std::make_pair(0x2d10,"GEORGIAN SMALL LETTER RAE"));
        data.insert(std::make_pair(0x2d11,"GEORGIAN SMALL LETTER SAN"));
        data.insert(std::make_pair(0x2d12,"GEORGIAN SMALL LETTER TAR"));
        data.insert(std::make_pair(0x2d13,"GEORGIAN SMALL LETTER UN"));
        data.insert(std::make_pair(0x2d14,"GEORGIAN SMALL LETTER PHAR"));
        data.insert(std::make_pair(0x2d15,"GEORGIAN SMALL LETTER KHAR"));
        data.insert(std::make_pair(0x2d16,"GEORGIAN SMALL LETTER GHAN"));
        data.insert(std::make_pair(0x2d17,"GEORGIAN SMALL LETTER QAR"));
        data.insert(std::make_pair(0x2d18,"GEORGIAN SMALL LETTER SHIN"));
        data.insert(std::make_pair(0x2d19,"GEORGIAN SMALL LETTER CHIN"));
        data.insert(std::make_pair(0x2d1a,"GEORGIAN SMALL LETTER CAN"));
        data.insert(std::make_pair(0x2d1b,"GEORGIAN SMALL LETTER JIL"));
        data.insert(std::make_pair(0x2d1c,"GEORGIAN SMALL LETTER CIL"));
        data.insert(std::make_pair(0x2d1d,"GEORGIAN SMALL LETTER CHAR"));
        data.insert(std::make_pair(0x2d1e,"GEORGIAN SMALL LETTER XAN"));
        data.insert(std::make_pair(0x2d1f,"GEORGIAN SMALL LETTER JHAN"));
        data.insert(std::make_pair(0x2d20,"GEORGIAN SMALL LETTER HAE"));
        data.insert(std::make_pair(0x2d21,"GEORGIAN SMALL LETTER HE"));
        data.insert(std::make_pair(0x2d22,"GEORGIAN SMALL LETTER HIE"));
        data.insert(std::make_pair(0x2d23,"GEORGIAN SMALL LETTER WE"));
        data.insert(std::make_pair(0x2d24,"GEORGIAN SMALL LETTER HAR"));
        data.insert(std::make_pair(0x2d25,"GEORGIAN SMALL LETTER HOE"));
        data.insert(std::make_pair(0x2d27,"GEORGIAN SMALL LETTER YN"));
        data.insert(std::make_pair(0x2d2d,"GEORGIAN SMALL LETTER AEN"));
        data.insert(std::make_pair(0x2d30,"TIFINAGH LETTER YA"));
        data.insert(std::make_pair(0x2d31,"TIFINAGH LETTER YAB"));
        data.insert(std::make_pair(0x2d32,"TIFINAGH LETTER YABH"));
        data.insert(std::make_pair(0x2d33,"TIFINAGH LETTER YAG"));
        data.insert(std::make_pair(0x2d34,"TIFINAGH LETTER YAGHH"));
        data.insert(std::make_pair(0x2d35,"TIFINAGH LETTER BERBER ACADEMY YAJ"));
        data.insert(std::make_pair(0x2d36,"TIFINAGH LETTER YAJ"));
        data.insert(std::make_pair(0x2d37,"TIFINAGH LETTER YAD"));
        data.insert(std::make_pair(0x2d38,"TIFINAGH LETTER YADH"));
        data.insert(std::make_pair(0x2d39,"TIFINAGH LETTER YADD"));
        data.insert(std::make_pair(0x2d3a,"TIFINAGH LETTER YADDH"));
        data.insert(std::make_pair(0x2d3b,"TIFINAGH LETTER YEY"));
        data.insert(std::make_pair(0x2d3c,"TIFINAGH LETTER YAF"));
        data.insert(std::make_pair(0x2d3d,"TIFINAGH LETTER YAK"));
        data.insert(std::make_pair(0x2d3e,"TIFINAGH LETTER TUAREG YAK"));
        data.insert(std::make_pair(0x2d3f,"TIFINAGH LETTER YAKHH"));
        data.insert(std::make_pair(0x2d40,"TIFINAGH LETTER YAH"));
        data.insert(std::make_pair(0x2d41,"TIFINAGH LETTER BERBER ACADEMY YAH"));
        data.insert(std::make_pair(0x2d42,"TIFINAGH LETTER TUAREG YAH"));
        data.insert(std::make_pair(0x2d43,"TIFINAGH LETTER YAHH"));
        data.insert(std::make_pair(0x2d44,"TIFINAGH LETTER YAA"));
        data.insert(std::make_pair(0x2d45,"TIFINAGH LETTER YAKH"));
        data.insert(std::make_pair(0x2d46,"TIFINAGH LETTER TUAREG YAKH"));
        data.insert(std::make_pair(0x2d47,"TIFINAGH LETTER YAQ"));
        data.insert(std::make_pair(0x2d48,"TIFINAGH LETTER TUAREG YAQ"));
        data.insert(std::make_pair(0x2d49,"TIFINAGH LETTER YI"));
        data.insert(std::make_pair(0x2d4a,"TIFINAGH LETTER YAZH"));
        data.insert(std::make_pair(0x2d4b,"TIFINAGH LETTER AHAGGAR YAZH"));
        data.insert(std::make_pair(0x2d4c,"TIFINAGH LETTER TUAREG YAZH"));
        data.insert(std::make_pair(0x2d4d,"TIFINAGH LETTER YAL"));
        data.insert(std::make_pair(0x2d4e,"TIFINAGH LETTER YAM"));
        data.insert(std::make_pair(0x2d4f,"TIFINAGH LETTER YAN"));
        data.insert(std::make_pair(0x2d50,"TIFINAGH LETTER TUAREG YAGN"));
        data.insert(std::make_pair(0x2d51,"TIFINAGH LETTER TUAREG YANG"));
        data.insert(std::make_pair(0x2d52,"TIFINAGH LETTER YAP"));
        data.insert(std::make_pair(0x2d53,"TIFINAGH LETTER YU"));
        data.insert(std::make_pair(0x2d54,"TIFINAGH LETTER YAR"));
        data.insert(std::make_pair(0x2d55,"TIFINAGH LETTER YARR"));
        data.insert(std::make_pair(0x2d56,"TIFINAGH LETTER YAGH"));
        data.insert(std::make_pair(0x2d57,"TIFINAGH LETTER TUAREG YAGH"));
        data.insert(std::make_pair(0x2d58,"TIFINAGH LETTER AYER YAGH"));
        data.insert(std::make_pair(0x2d59,"TIFINAGH LETTER YAS"));
        data.insert(std::make_pair(0x2d5a,"TIFINAGH LETTER YASS"));
        data.insert(std::make_pair(0x2d5b,"TIFINAGH LETTER YASH"));
        data.insert(std::make_pair(0x2d5c,"TIFINAGH LETTER YAT"));
        data.insert(std::make_pair(0x2d5d,"TIFINAGH LETTER YATH"));
        data.insert(std::make_pair(0x2d5e,"TIFINAGH LETTER YACH"));
        data.insert(std::make_pair(0x2d5f,"TIFINAGH LETTER YATT"));
        data.insert(std::make_pair(0x2d60,"TIFINAGH LETTER YAV"));
        data.insert(std::make_pair(0x2d61,"TIFINAGH LETTER YAW"));
        data.insert(std::make_pair(0x2d62,"TIFINAGH LETTER YAY"));
        data.insert(std::make_pair(0x2d63,"TIFINAGH LETTER YAZ"));
        data.insert(std::make_pair(0x2d64,"TIFINAGH LETTER TAWELLEMET YAZ"));
        data.insert(std::make_pair(0x2d65,"TIFINAGH LETTER YAZZ"));
        data.insert(std::make_pair(0x2d66,"TIFINAGH LETTER YE"));
        data.insert(std::make_pair(0x2d67,"TIFINAGH LETTER YO"));
        data.insert(std::make_pair(0x2d6f,"TIFINAGH MODIFIER LETTER LABIALIZATION MARK"));
        data.insert(std::make_pair(0x2d70,"TIFINAGH SEPARATOR MARK"));
        data.insert(std::make_pair(0x2d7f,"TIFINAGH CONSONANT JOINER"));
        data.insert(std::make_pair(0x2d80,"ETHIOPIC SYLLABLE LOA"));
        data.insert(std::make_pair(0x2d81,"ETHIOPIC SYLLABLE MOA"));
        data.insert(std::make_pair(0x2d82,"ETHIOPIC SYLLABLE ROA"));
        data.insert(std::make_pair(0x2d83,"ETHIOPIC SYLLABLE SOA"));
        data.insert(std::make_pair(0x2d84,"ETHIOPIC SYLLABLE SHOA"));
        data.insert(std::make_pair(0x2d85,"ETHIOPIC SYLLABLE BOA"));
        data.insert(std::make_pair(0x2d86,"ETHIOPIC SYLLABLE TOA"));
        data.insert(std::make_pair(0x2d87,"ETHIOPIC SYLLABLE COA"));
        data.insert(std::make_pair(0x2d88,"ETHIOPIC SYLLABLE NOA"));
        data.insert(std::make_pair(0x2d89,"ETHIOPIC SYLLABLE NYOA"));
        data.insert(std::make_pair(0x2d8a,"ETHIOPIC SYLLABLE GLOTTAL OA"));
        data.insert(std::make_pair(0x2d8b,"ETHIOPIC SYLLABLE ZOA"));
        data.insert(std::make_pair(0x2d8c,"ETHIOPIC SYLLABLE DOA"));
        data.insert(std::make_pair(0x2d8d,"ETHIOPIC SYLLABLE DDOA"));
        data.insert(std::make_pair(0x2d8e,"ETHIOPIC SYLLABLE JOA"));
        data.insert(std::make_pair(0x2d8f,"ETHIOPIC SYLLABLE THOA"));
        data.insert(std::make_pair(0x2d90,"ETHIOPIC SYLLABLE CHOA"));
        data.insert(std::make_pair(0x2d91,"ETHIOPIC SYLLABLE PHOA"));
        data.insert(std::make_pair(0x2d92,"ETHIOPIC SYLLABLE POA"));
        data.insert(std::make_pair(0x2d93,"ETHIOPIC SYLLABLE GGWA"));
        data.insert(std::make_pair(0x2d94,"ETHIOPIC SYLLABLE GGWI"));
        data.insert(std::make_pair(0x2d95,"ETHIOPIC SYLLABLE GGWEE"));
        data.insert(std::make_pair(0x2d96,"ETHIOPIC SYLLABLE GGWE"));
        data.insert(std::make_pair(0x2da0,"ETHIOPIC SYLLABLE SSA"));
        data.insert(std::make_pair(0x2da1,"ETHIOPIC SYLLABLE SSU"));
        data.insert(std::make_pair(0x2da2,"ETHIOPIC SYLLABLE SSI"));
        data.insert(std::make_pair(0x2da3,"ETHIOPIC SYLLABLE SSAA"));
        data.insert(std::make_pair(0x2da4,"ETHIOPIC SYLLABLE SSEE"));
        data.insert(std::make_pair(0x2da5,"ETHIOPIC SYLLABLE SSE"));
        data.insert(std::make_pair(0x2da6,"ETHIOPIC SYLLABLE SSO"));
        data.insert(std::make_pair(0x2da8,"ETHIOPIC SYLLABLE CCA"));
        data.insert(std::make_pair(0x2da9,"ETHIOPIC SYLLABLE CCU"));
        data.insert(std::make_pair(0x2daa,"ETHIOPIC SYLLABLE CCI"));
        data.insert(std::make_pair(0x2dab,"ETHIOPIC SYLLABLE CCAA"));
        data.insert(std::make_pair(0x2dac,"ETHIOPIC SYLLABLE CCEE"));
        data.insert(std::make_pair(0x2dad,"ETHIOPIC SYLLABLE CCE"));
        data.insert(std::make_pair(0x2dae,"ETHIOPIC SYLLABLE CCO"));
        data.insert(std::make_pair(0x2db0,"ETHIOPIC SYLLABLE ZZA"));
        data.insert(std::make_pair(0x2db1,"ETHIOPIC SYLLABLE ZZU"));
        data.insert(std::make_pair(0x2db2,"ETHIOPIC SYLLABLE ZZI"));
        data.insert(std::make_pair(0x2db3,"ETHIOPIC SYLLABLE ZZAA"));
        data.insert(std::make_pair(0x2db4,"ETHIOPIC SYLLABLE ZZEE"));
        data.insert(std::make_pair(0x2db5,"ETHIOPIC SYLLABLE ZZE"));
        data.insert(std::make_pair(0x2db6,"ETHIOPIC SYLLABLE ZZO"));
        data.insert(std::make_pair(0x2db8,"ETHIOPIC SYLLABLE CCHA"));
        data.insert(std::make_pair(0x2db9,"ETHIOPIC SYLLABLE CCHU"));
        data.insert(std::make_pair(0x2dba,"ETHIOPIC SYLLABLE CCHI"));
        data.insert(std::make_pair(0x2dbb,"ETHIOPIC SYLLABLE CCHAA"));
        data.insert(std::make_pair(0x2dbc,"ETHIOPIC SYLLABLE CCHEE"));
        data.insert(std::make_pair(0x2dbd,"ETHIOPIC SYLLABLE CCHE"));
        data.insert(std::make_pair(0x2dbe,"ETHIOPIC SYLLABLE CCHO"));
        data.insert(std::make_pair(0x2dc0,"ETHIOPIC SYLLABLE QYA"));
        data.insert(std::make_pair(0x2dc1,"ETHIOPIC SYLLABLE QYU"));
        data.insert(std::make_pair(0x2dc2,"ETHIOPIC SYLLABLE QYI"));
        data.insert(std::make_pair(0x2dc3,"ETHIOPIC SYLLABLE QYAA"));
        data.insert(std::make_pair(0x2dc4,"ETHIOPIC SYLLABLE QYEE"));
        data.insert(std::make_pair(0x2dc5,"ETHIOPIC SYLLABLE QYE"));
        data.insert(std::make_pair(0x2dc6,"ETHIOPIC SYLLABLE QYO"));
        data.insert(std::make_pair(0x2dc8,"ETHIOPIC SYLLABLE KYA"));
        data.insert(std::make_pair(0x2dc9,"ETHIOPIC SYLLABLE KYU"));
        data.insert(std::make_pair(0x2dca,"ETHIOPIC SYLLABLE KYI"));
        data.insert(std::make_pair(0x2dcb,"ETHIOPIC SYLLABLE KYAA"));
        data.insert(std::make_pair(0x2dcc,"ETHIOPIC SYLLABLE KYEE"));
        data.insert(std::make_pair(0x2dcd,"ETHIOPIC SYLLABLE KYE"));
        data.insert(std::make_pair(0x2dce,"ETHIOPIC SYLLABLE KYO"));
        data.insert(std::make_pair(0x2dd0,"ETHIOPIC SYLLABLE XYA"));
        data.insert(std::make_pair(0x2dd1,"ETHIOPIC SYLLABLE XYU"));
        data.insert(std::make_pair(0x2dd2,"ETHIOPIC SYLLABLE XYI"));
        data.insert(std::make_pair(0x2dd3,"ETHIOPIC SYLLABLE XYAA"));
        data.insert(std::make_pair(0x2dd4,"ETHIOPIC SYLLABLE XYEE"));
        data.insert(std::make_pair(0x2dd5,"ETHIOPIC SYLLABLE XYE"));
        data.insert(std::make_pair(0x2dd6,"ETHIOPIC SYLLABLE XYO"));
        data.insert(std::make_pair(0x2dd8,"ETHIOPIC SYLLABLE GYA"));
        data.insert(std::make_pair(0x2dd9,"ETHIOPIC SYLLABLE GYU"));
        data.insert(std::make_pair(0x2dda,"ETHIOPIC SYLLABLE GYI"));
        data.insert(std::make_pair(0x2ddb,"ETHIOPIC SYLLABLE GYAA"));
        data.insert(std::make_pair(0x2ddc,"ETHIOPIC SYLLABLE GYEE"));
        data.insert(std::make_pair(0x2ddd,"ETHIOPIC SYLLABLE GYE"));
        data.insert(std::make_pair(0x2dde,"ETHIOPIC SYLLABLE GYO"));
        data.insert(std::make_pair(0x2de0,"COMBINING CYRILLIC LETTER BE"));
        data.insert(std::make_pair(0x2de1,"COMBINING CYRILLIC LETTER VE"));
        data.insert(std::make_pair(0x2de2,"COMBINING CYRILLIC LETTER GHE"));
        data.insert(std::make_pair(0x2de3,"COMBINING CYRILLIC LETTER DE"));
        data.insert(std::make_pair(0x2de4,"COMBINING CYRILLIC LETTER ZHE"));
        data.insert(std::make_pair(0x2de5,"COMBINING CYRILLIC LETTER ZE"));
        data.insert(std::make_pair(0x2de6,"COMBINING CYRILLIC LETTER KA"));
        data.insert(std::make_pair(0x2de7,"COMBINING CYRILLIC LETTER EL"));
        data.insert(std::make_pair(0x2de8,"COMBINING CYRILLIC LETTER EM"));
        data.insert(std::make_pair(0x2de9,"COMBINING CYRILLIC LETTER EN"));
        data.insert(std::make_pair(0x2dea,"COMBINING CYRILLIC LETTER O"));
        data.insert(std::make_pair(0x2deb,"COMBINING CYRILLIC LETTER PE"));
        data.insert(std::make_pair(0x2dec,"COMBINING CYRILLIC LETTER ER"));
        data.insert(std::make_pair(0x2ded,"COMBINING CYRILLIC LETTER ES"));
        data.insert(std::make_pair(0x2dee,"COMBINING CYRILLIC LETTER TE"));
        data.insert(std::make_pair(0x2def,"COMBINING CYRILLIC LETTER HA"));
        data.insert(std::make_pair(0x2df0,"COMBINING CYRILLIC LETTER TSE"));
        data.insert(std::make_pair(0x2df1,"COMBINING CYRILLIC LETTER CHE"));
        data.insert(std::make_pair(0x2df2,"COMBINING CYRILLIC LETTER SHA"));
        data.insert(std::make_pair(0x2df3,"COMBINING CYRILLIC LETTER SHCHA"));
        data.insert(std::make_pair(0x2df4,"COMBINING CYRILLIC LETTER FITA"));
        data.insert(std::make_pair(0x2df5,"COMBINING CYRILLIC LETTER ES-TE"));
        data.insert(std::make_pair(0x2df6,"COMBINING CYRILLIC LETTER A"));
        data.insert(std::make_pair(0x2df7,"COMBINING CYRILLIC LETTER IE"));
        data.insert(std::make_pair(0x2df8,"COMBINING CYRILLIC LETTER DJERV"));
        data.insert(std::make_pair(0x2df9,"COMBINING CYRILLIC LETTER MONOGRAPH UK"));
        data.insert(std::make_pair(0x2dfa,"COMBINING CYRILLIC LETTER YAT"));
        data.insert(std::make_pair(0x2dfb,"COMBINING CYRILLIC LETTER YU"));
        data.insert(std::make_pair(0x2dfc,"COMBINING CYRILLIC LETTER IOTIFIED A"));
        data.insert(std::make_pair(0x2dfd,"COMBINING CYRILLIC LETTER LITTLE YUS"));
        data.insert(std::make_pair(0x2dfe,"COMBINING CYRILLIC LETTER BIG YUS"));
        data.insert(std::make_pair(0x2dff,"COMBINING CYRILLIC LETTER IOTIFIED BIG YUS"));
        data.insert(std::make_pair(0x2e00,"RIGHT ANGLE SUBSTITUTION MARKER"));
        data.insert(std::make_pair(0x2e01,"RIGHT ANGLE DOTTED SUBSTITUTION MARKER"));
        data.insert(std::make_pair(0x2e02,"LEFT SUBSTITUTION BRACKET"));
        data.insert(std::make_pair(0x2e03,"RIGHT SUBSTITUTION BRACKET"));
        data.insert(std::make_pair(0x2e04,"LEFT DOTTED SUBSTITUTION BRACKET"));
        data.insert(std::make_pair(0x2e05,"RIGHT DOTTED SUBSTITUTION BRACKET"));
        data.insert(std::make_pair(0x2e06,"RAISED INTERPOLATION MARKER"));
        data.insert(std::make_pair(0x2e07,"RAISED DOTTED INTERPOLATION MARKER"));
        data.insert(std::make_pair(0x2e08,"DOTTED TRANSPOSITION MARKER"));
        data.insert(std::make_pair(0x2e09,"LEFT TRANSPOSITION BRACKET"));
        data.insert(std::make_pair(0x2e0a,"RIGHT TRANSPOSITION BRACKET"));
        data.insert(std::make_pair(0x2e0b,"RAISED SQUARE"));
        data.insert(std::make_pair(0x2e0c,"LEFT RAISED OMISSION BRACKET"));
        data.insert(std::make_pair(0x2e0d,"RIGHT RAISED OMISSION BRACKET"));
        data.insert(std::make_pair(0x2e0e,"EDITORIAL CORONIS"));
        data.insert(std::make_pair(0x2e0f,"PARAGRAPHOS"));
        data.insert(std::make_pair(0x2e10,"FORKED PARAGRAPHOS"));
        data.insert(std::make_pair(0x2e11,"REVERSED FORKED PARAGRAPHOS"));
        data.insert(std::make_pair(0x2e12,"HYPODIASTOLE"));
        data.insert(std::make_pair(0x2e13,"DOTTED OBELOS"));
        data.insert(std::make_pair(0x2e14,"DOWNWARDS ANCORA"));
        data.insert(std::make_pair(0x2e15,"UPWARDS ANCORA"));
        data.insert(std::make_pair(0x2e16,"DOTTED RIGHT-POINTING ANGLE"));
        data.insert(std::make_pair(0x2e17,"DOUBLE OBLIQUE HYPHEN"));
        data.insert(std::make_pair(0x2e18,"INVERTED INTERROBANG"));
        data.insert(std::make_pair(0x2e19,"PALM BRANCH"));
        data.insert(std::make_pair(0x2e1a,"HYPHEN WITH DIAERESIS"));
        data.insert(std::make_pair(0x2e1b,"TILDE WITH RING ABOVE"));
        data.insert(std::make_pair(0x2e1c,"LEFT LOW PARAPHRASE BRACKET"));
        data.insert(std::make_pair(0x2e1d,"RIGHT LOW PARAPHRASE BRACKET"));
        data.insert(std::make_pair(0x2e1e,"TILDE WITH DOT ABOVE"));
        data.insert(std::make_pair(0x2e1f,"TILDE WITH DOT BELOW"));
        data.insert(std::make_pair(0x2e20,"LEFT VERTICAL BAR WITH QUILL"));
        data.insert(std::make_pair(0x2e21,"RIGHT VERTICAL BAR WITH QUILL"));
        data.insert(std::make_pair(0x2e22,"TOP LEFT HALF BRACKET"));
        data.insert(std::make_pair(0x2e23,"TOP RIGHT HALF BRACKET"));
        data.insert(std::make_pair(0x2e24,"BOTTOM LEFT HALF BRACKET"));
        data.insert(std::make_pair(0x2e25,"BOTTOM RIGHT HALF BRACKET"));
        data.insert(std::make_pair(0x2e26,"LEFT SIDEWAYS U BRACKET"));
        data.insert(std::make_pair(0x2e27,"RIGHT SIDEWAYS U BRACKET"));
        data.insert(std::make_pair(0x2e28,"LEFT DOUBLE PARENTHESIS"));
        data.insert(std::make_pair(0x2e29,"RIGHT DOUBLE PARENTHESIS"));
        data.insert(std::make_pair(0x2e2a,"TWO DOTS OVER ONE DOT PUNCTUATION"));
        data.insert(std::make_pair(0x2e2b,"ONE DOT OVER TWO DOTS PUNCTUATION"));
        data.insert(std::make_pair(0x2e2c,"SQUARED FOUR DOT PUNCTUATION"));
        data.insert(std::make_pair(0x2e2d,"FIVE DOT MARK"));
        data.insert(std::make_pair(0x2e2e,"REVERSED QUESTION MARK"));
        data.insert(std::make_pair(0x2e2f,"VERTICAL TILDE"));
        data.insert(std::make_pair(0x2e30,"RING POINT"));
        data.insert(std::make_pair(0x2e31,"WORD SEPARATOR MIDDLE DOT"));
        data.insert(std::make_pair(0x2e32,"TURNED COMMA"));
        data.insert(std::make_pair(0x2e33,"RAISED DOT"));
        data.insert(std::make_pair(0x2e34,"RAISED COMMA"));
        data.insert(std::make_pair(0x2e35,"TURNED SEMICOLON"));
        data.insert(std::make_pair(0x2e36,"DAGGER WITH LEFT GUARD"));
        data.insert(std::make_pair(0x2e37,"DAGGER WITH RIGHT GUARD"));
        data.insert(std::make_pair(0x2e38,"TURNED DAGGER"));
        data.insert(std::make_pair(0x2e39,"TOP HALF SECTION SIGN"));
        data.insert(std::make_pair(0x2e3a,"TWO-EM DASH"));
        data.insert(std::make_pair(0x2e3b,"THREE-EM DASH"));
        data.insert(std::make_pair(0x2e3c,"STENOGRAPHIC FULL STOP"));
        data.insert(std::make_pair(0x2e3d,"VERTICAL SIX DOTS"));
        data.insert(std::make_pair(0x2e3e,"WIGGLY VERTICAL LINE"));
        data.insert(std::make_pair(0x2e3f,"CAPITULUM"));
        data.insert(std::make_pair(0x2e40,"DOUBLE HYPHEN"));
        data.insert(std::make_pair(0x2e41,"REVERSED COMMA"));
        data.insert(std::make_pair(0x2e42,"DOUBLE LOW-REVERSED-9 QUOTATION MARK"));
        data.insert(std::make_pair(0x2e43,"DASH WITH LEFT UPTURN"));
        data.insert(std::make_pair(0x2e44,"DOUBLE SUSPENSION MARK"));
        data.insert(std::make_pair(0x2e45,"INVERTED LOW KAVYKA"));
        data.insert(std::make_pair(0x2e46,"INVERTED LOW KAVYKA WITH KAVYKA ABOVE"));
        data.insert(std::make_pair(0x2e47,"LOW KAVYKA"));
        data.insert(std::make_pair(0x2e48,"LOW KAVYKA WITH DOT"));
        data.insert(std::make_pair(0x2e49,"DOUBLE STACKED COMMA"));
        data.insert(std::make_pair(0x2e4a,"DOTTED SOLIDUS"));
        data.insert(std::make_pair(0x2e4b,"TRIPLE DAGGER"));
        data.insert(std::make_pair(0x2e4c,"MEDIEVAL COMMA"));
        data.insert(std::make_pair(0x2e4d,"PARAGRAPHUS MARK"));
        data.insert(std::make_pair(0x2e4e,"PUNCTUS ELEVATUS MARK"));
        data.insert(std::make_pair(0x2e4f,"CORNISH VERSE DIVIDER"));
        data.insert(std::make_pair(0x2e50,"CROSS PATTY WITH RIGHT CROSSBAR"));
        data.insert(std::make_pair(0x2e51,"CROSS PATTY WITH LEFT CROSSBAR"));
        data.insert(std::make_pair(0x2e52,"TIRONIAN SIGN CAPITAL ET"));
        data.insert(std::make_pair(0x2e53,"MEDIEVAL EXCLAMATION MARK"));
        data.insert(std::make_pair(0x2e54,"MEDIEVAL QUESTION MARK"));
        data.insert(std::make_pair(0x2e55,"LEFT SQUARE BRACKET WITH STROKE"));
        data.insert(std::make_pair(0x2e56,"RIGHT SQUARE BRACKET WITH STROKE"));
        data.insert(std::make_pair(0x2e57,"LEFT SQUARE BRACKET WITH DOUBLE STROKE"));
        data.insert(std::make_pair(0x2e58,"RIGHT SQUARE BRACKET WITH DOUBLE STROKE"));
        data.insert(std::make_pair(0x2e59,"TOP HALF LEFT PARENTHESIS"));
        data.insert(std::make_pair(0x2e5a,"TOP HALF RIGHT PARENTHESIS"));
        data.insert(std::make_pair(0x2e5b,"BOTTOM HALF LEFT PARENTHESIS"));
        data.insert(std::make_pair(0x2e5c,"BOTTOM HALF RIGHT PARENTHESIS"));
        data.insert(std::make_pair(0x2e5d,"OBLIQUE HYPHEN"));
        data.insert(std::make_pair(0x2e80,"CJK RADICAL REPEAT"));
        data.insert(std::make_pair(0x2e81,"CJK RADICAL CLIFF"));
        data.insert(std::make_pair(0x2e82,"CJK RADICAL SECOND ONE"));
        data.insert(std::make_pair(0x2e83,"CJK RADICAL SECOND TWO"));
        data.insert(std::make_pair(0x2e84,"CJK RADICAL SECOND THREE"));
        data.insert(std::make_pair(0x2e85,"CJK RADICAL PERSON"));
        data.insert(std::make_pair(0x2e86,"CJK RADICAL BOX"));
        data.insert(std::make_pair(0x2e87,"CJK RADICAL TABLE"));
        data.insert(std::make_pair(0x2e88,"CJK RADICAL KNIFE ONE"));
        data.insert(std::make_pair(0x2e89,"CJK RADICAL KNIFE TWO"));
        data.insert(std::make_pair(0x2e8a,"CJK RADICAL DIVINATION"));
        data.insert(std::make_pair(0x2e8b,"CJK RADICAL SEAL"));
        data.insert(std::make_pair(0x2e8c,"CJK RADICAL SMALL ONE"));
        data.insert(std::make_pair(0x2e8d,"CJK RADICAL SMALL TWO"));
        data.insert(std::make_pair(0x2e8e,"CJK RADICAL LAME ONE"));
        data.insert(std::make_pair(0x2e8f,"CJK RADICAL LAME TWO"));
        data.insert(std::make_pair(0x2e90,"CJK RADICAL LAME THREE"));
        data.insert(std::make_pair(0x2e91,"CJK RADICAL LAME FOUR"));
        data.insert(std::make_pair(0x2e92,"CJK RADICAL SNAKE"));
        data.insert(std::make_pair(0x2e93,"CJK RADICAL THREAD"));
        data.insert(std::make_pair(0x2e94,"CJK RADICAL SNOUT ONE"));
        data.insert(std::make_pair(0x2e95,"CJK RADICAL SNOUT TWO"));
        data.insert(std::make_pair(0x2e96,"CJK RADICAL HEART ONE"));
        data.insert(std::make_pair(0x2e97,"CJK RADICAL HEART TWO"));
        data.insert(std::make_pair(0x2e98,"CJK RADICAL HAND"));
        data.insert(std::make_pair(0x2e99,"CJK RADICAL RAP"));
        data.insert(std::make_pair(0x2e9b,"CJK RADICAL CHOKE"));
        data.insert(std::make_pair(0x2e9c,"CJK RADICAL SUN"));
        data.insert(std::make_pair(0x2e9d,"CJK RADICAL MOON"));
        data.insert(std::make_pair(0x2e9e,"CJK RADICAL DEATH"));
        data.insert(std::make_pair(0x2e9f,"CJK RADICAL MOTHER"));
        data.insert(std::make_pair(0x2ea0,"CJK RADICAL CIVILIAN"));
        data.insert(std::make_pair(0x2ea1,"CJK RADICAL WATER ONE"));
        data.insert(std::make_pair(0x2ea2,"CJK RADICAL WATER TWO"));
        data.insert(std::make_pair(0x2ea3,"CJK RADICAL FIRE"));
        data.insert(std::make_pair(0x2ea4,"CJK RADICAL PAW ONE"));
        data.insert(std::make_pair(0x2ea5,"CJK RADICAL PAW TWO"));
        data.insert(std::make_pair(0x2ea6,"CJK RADICAL SIMPLIFIED HALF TREE TRUNK"));
        data.insert(std::make_pair(0x2ea7,"CJK RADICAL COW"));
        data.insert(std::make_pair(0x2ea8,"CJK RADICAL DOG"));
        data.insert(std::make_pair(0x2ea9,"CJK RADICAL JADE"));
        data.insert(std::make_pair(0x2eaa,"CJK RADICAL BOLT OF CLOTH"));
        data.insert(std::make_pair(0x2eab,"CJK RADICAL EYE"));
        data.insert(std::make_pair(0x2eac,"CJK RADICAL SPIRIT ONE"));
        data.insert(std::make_pair(0x2ead,"CJK RADICAL SPIRIT TWO"));
        data.insert(std::make_pair(0x2eae,"CJK RADICAL BAMBOO"));
        data.insert(std::make_pair(0x2eaf,"CJK RADICAL SILK"));
        data.insert(std::make_pair(0x2eb0,"CJK RADICAL C-SIMPLIFIED SILK"));
        data.insert(std::make_pair(0x2eb1,"CJK RADICAL NET ONE"));
        data.insert(std::make_pair(0x2eb2,"CJK RADICAL NET TWO"));
        data.insert(std::make_pair(0x2eb3,"CJK RADICAL NET THREE"));
        data.insert(std::make_pair(0x2eb4,"CJK RADICAL NET FOUR"));
        data.insert(std::make_pair(0x2eb5,"CJK RADICAL MESH"));
        data.insert(std::make_pair(0x2eb6,"CJK RADICAL SHEEP"));
        data.insert(std::make_pair(0x2eb7,"CJK RADICAL RAM"));
        data.insert(std::make_pair(0x2eb8,"CJK RADICAL EWE"));
        data.insert(std::make_pair(0x2eb9,"CJK RADICAL OLD"));
        data.insert(std::make_pair(0x2eba,"CJK RADICAL BRUSH ONE"));
        data.insert(std::make_pair(0x2ebb,"CJK RADICAL BRUSH TWO"));
        data.insert(std::make_pair(0x2ebc,"CJK RADICAL MEAT"));
        data.insert(std::make_pair(0x2ebd,"CJK RADICAL MORTAR"));
        data.insert(std::make_pair(0x2ebe,"CJK RADICAL GRASS ONE"));
        data.insert(std::make_pair(0x2ebf,"CJK RADICAL GRASS TWO"));
        data.insert(std::make_pair(0x2ec0,"CJK RADICAL GRASS THREE"));
        data.insert(std::make_pair(0x2ec1,"CJK RADICAL TIGER"));
        data.insert(std::make_pair(0x2ec2,"CJK RADICAL CLOTHES"));
        data.insert(std::make_pair(0x2ec3,"CJK RADICAL WEST ONE"));
        data.insert(std::make_pair(0x2ec4,"CJK RADICAL WEST TWO"));
        data.insert(std::make_pair(0x2ec5,"CJK RADICAL C-SIMPLIFIED SEE"));
        data.insert(std::make_pair(0x2ec6,"CJK RADICAL SIMPLIFIED HORN"));
        data.insert(std::make_pair(0x2ec7,"CJK RADICAL HORN"));
        data.insert(std::make_pair(0x2ec8,"CJK RADICAL C-SIMPLIFIED SPEECH"));
        data.insert(std::make_pair(0x2ec9,"CJK RADICAL C-SIMPLIFIED SHELL"));
        data.insert(std::make_pair(0x2eca,"CJK RADICAL FOOT"));
        data.insert(std::make_pair(0x2ecb,"CJK RADICAL C-SIMPLIFIED CART"));
        data.insert(std::make_pair(0x2ecc,"CJK RADICAL SIMPLIFIED WALK"));
        data.insert(std::make_pair(0x2ecd,"CJK RADICAL WALK ONE"));
        data.insert(std::make_pair(0x2ece,"CJK RADICAL WALK TWO"));
        data.insert(std::make_pair(0x2ecf,"CJK RADICAL CITY"));
        data.insert(std::make_pair(0x2ed0,"CJK RADICAL C-SIMPLIFIED GOLD"));
        data.insert(std::make_pair(0x2ed1,"CJK RADICAL LONG ONE"));
        data.insert(std::make_pair(0x2ed2,"CJK RADICAL LONG TWO"));
        data.insert(std::make_pair(0x2ed3,"CJK RADICAL C-SIMPLIFIED LONG"));
        data.insert(std::make_pair(0x2ed4,"CJK RADICAL C-SIMPLIFIED GATE"));
        data.insert(std::make_pair(0x2ed5,"CJK RADICAL MOUND ONE"));
        data.insert(std::make_pair(0x2ed6,"CJK RADICAL MOUND TWO"));
        data.insert(std::make_pair(0x2ed7,"CJK RADICAL RAIN"));
        data.insert(std::make_pair(0x2ed8,"CJK RADICAL BLUE"));
        data.insert(std::make_pair(0x2ed9,"CJK RADICAL C-SIMPLIFIED TANNED LEATHER"));
        data.insert(std::make_pair(0x2eda,"CJK RADICAL C-SIMPLIFIED LEAF"));
        data.insert(std::make_pair(0x2edb,"CJK RADICAL C-SIMPLIFIED WIND"));
        data.insert(std::make_pair(0x2edc,"CJK RADICAL C-SIMPLIFIED FLY"));
        data.insert(std::make_pair(0x2edd,"CJK RADICAL EAT ONE"));
        data.insert(std::make_pair(0x2ede,"CJK RADICAL EAT TWO"));
        data.insert(std::make_pair(0x2edf,"CJK RADICAL EAT THREE"));
        data.insert(std::make_pair(0x2ee0,"CJK RADICAL C-SIMPLIFIED EAT"));
        data.insert(std::make_pair(0x2ee1,"CJK RADICAL HEAD"));
        data.insert(std::make_pair(0x2ee2,"CJK RADICAL C-SIMPLIFIED HORSE"));
        data.insert(std::make_pair(0x2ee3,"CJK RADICAL BONE"));
        data.insert(std::make_pair(0x2ee4,"CJK RADICAL GHOST"));
        data.insert(std::make_pair(0x2ee5,"CJK RADICAL C-SIMPLIFIED FISH"));
        data.insert(std::make_pair(0x2ee6,"CJK RADICAL C-SIMPLIFIED BIRD"));
        data.insert(std::make_pair(0x2ee7,"CJK RADICAL C-SIMPLIFIED SALT"));
        data.insert(std::make_pair(0x2ee8,"CJK RADICAL SIMPLIFIED WHEAT"));
        data.insert(std::make_pair(0x2ee9,"CJK RADICAL SIMPLIFIED YELLOW"));
        data.insert(std::make_pair(0x2eea,"CJK RADICAL C-SIMPLIFIED FROG"));
        data.insert(std::make_pair(0x2eeb,"CJK RADICAL J-SIMPLIFIED EVEN"));
        data.insert(std::make_pair(0x2eec,"CJK RADICAL C-SIMPLIFIED EVEN"));
        data.insert(std::make_pair(0x2eed,"CJK RADICAL J-SIMPLIFIED TOOTH"));
        data.insert(std::make_pair(0x2eee,"CJK RADICAL C-SIMPLIFIED TOOTH"));
        data.insert(std::make_pair(0x2eef,"CJK RADICAL J-SIMPLIFIED DRAGON"));
        data.insert(std::make_pair(0x2ef0,"CJK RADICAL C-SIMPLIFIED DRAGON"));
        data.insert(std::make_pair(0x2ef1,"CJK RADICAL TURTLE"));
        data.insert(std::make_pair(0x2ef2,"CJK RADICAL J-SIMPLIFIED TURTLE"));
        data.insert(std::make_pair(0x2ef3,"CJK RADICAL C-SIMPLIFIED TURTLE"));
        data.insert(std::make_pair(0x2f00,"KANGXI RADICAL ONE"));
        data.insert(std::make_pair(0x2f01,"KANGXI RADICAL LINE"));
        data.insert(std::make_pair(0x2f02,"KANGXI RADICAL DOT"));
        data.insert(std::make_pair(0x2f03,"KANGXI RADICAL SLASH"));
        data.insert(std::make_pair(0x2f04,"KANGXI RADICAL SECOND"));
        data.insert(std::make_pair(0x2f05,"KANGXI RADICAL HOOK"));
        data.insert(std::make_pair(0x2f06,"KANGXI RADICAL TWO"));
        data.insert(std::make_pair(0x2f07,"KANGXI RADICAL LID"));
        data.insert(std::make_pair(0x2f08,"KANGXI RADICAL MAN"));
        data.insert(std::make_pair(0x2f09,"KANGXI RADICAL LEGS"));
        data.insert(std::make_pair(0x2f0a,"KANGXI RADICAL ENTER"));
        data.insert(std::make_pair(0x2f0b,"KANGXI RADICAL EIGHT"));
        data.insert(std::make_pair(0x2f0c,"KANGXI RADICAL DOWN BOX"));
        data.insert(std::make_pair(0x2f0d,"KANGXI RADICAL COVER"));
        data.insert(std::make_pair(0x2f0e,"KANGXI RADICAL ICE"));
        data.insert(std::make_pair(0x2f0f,"KANGXI RADICAL TABLE"));
        data.insert(std::make_pair(0x2f10,"KANGXI RADICAL OPEN BOX"));
        data.insert(std::make_pair(0x2f11,"KANGXI RADICAL KNIFE"));
        data.insert(std::make_pair(0x2f12,"KANGXI RADICAL POWER"));
        data.insert(std::make_pair(0x2f13,"KANGXI RADICAL WRAP"));
        data.insert(std::make_pair(0x2f14,"KANGXI RADICAL SPOON"));
        data.insert(std::make_pair(0x2f15,"KANGXI RADICAL RIGHT OPEN BOX"));
        data.insert(std::make_pair(0x2f16,"KANGXI RADICAL HIDING ENCLOSURE"));
        data.insert(std::make_pair(0x2f17,"KANGXI RADICAL TEN"));
        data.insert(std::make_pair(0x2f18,"KANGXI RADICAL DIVINATION"));
        data.insert(std::make_pair(0x2f19,"KANGXI RADICAL SEAL"));
        data.insert(std::make_pair(0x2f1a,"KANGXI RADICAL CLIFF"));
        data.insert(std::make_pair(0x2f1b,"KANGXI RADICAL PRIVATE"));
        data.insert(std::make_pair(0x2f1c,"KANGXI RADICAL AGAIN"));
        data.insert(std::make_pair(0x2f1d,"KANGXI RADICAL MOUTH"));
        data.insert(std::make_pair(0x2f1e,"KANGXI RADICAL ENCLOSURE"));
        data.insert(std::make_pair(0x2f1f,"KANGXI RADICAL EARTH"));
        data.insert(std::make_pair(0x2f20,"KANGXI RADICAL SCHOLAR"));
        data.insert(std::make_pair(0x2f21,"KANGXI RADICAL GO"));
        data.insert(std::make_pair(0x2f22,"KANGXI RADICAL GO SLOWLY"));
        data.insert(std::make_pair(0x2f23,"KANGXI RADICAL EVENING"));
        data.insert(std::make_pair(0x2f24,"KANGXI RADICAL BIG"));
        data.insert(std::make_pair(0x2f25,"KANGXI RADICAL WOMAN"));
        data.insert(std::make_pair(0x2f26,"KANGXI RADICAL CHILD"));
        data.insert(std::make_pair(0x2f27,"KANGXI RADICAL ROOF"));
        data.insert(std::make_pair(0x2f28,"KANGXI RADICAL INCH"));
        data.insert(std::make_pair(0x2f29,"KANGXI RADICAL SMALL"));
        data.insert(std::make_pair(0x2f2a,"KANGXI RADICAL LAME"));
        data.insert(std::make_pair(0x2f2b,"KANGXI RADICAL CORPSE"));
        data.insert(std::make_pair(0x2f2c,"KANGXI RADICAL SPROUT"));
        data.insert(std::make_pair(0x2f2d,"KANGXI RADICAL MOUNTAIN"));
        data.insert(std::make_pair(0x2f2e,"KANGXI RADICAL RIVER"));
        data.insert(std::make_pair(0x2f2f,"KANGXI RADICAL WORK"));
        data.insert(std::make_pair(0x2f30,"KANGXI RADICAL ONESELF"));
        data.insert(std::make_pair(0x2f31,"KANGXI RADICAL TURBAN"));
        data.insert(std::make_pair(0x2f32,"KANGXI RADICAL DRY"));
        data.insert(std::make_pair(0x2f33,"KANGXI RADICAL SHORT THREAD"));
        data.insert(std::make_pair(0x2f34,"KANGXI RADICAL DOTTED CLIFF"));
        data.insert(std::make_pair(0x2f35,"KANGXI RADICAL LONG STRIDE"));
        data.insert(std::make_pair(0x2f36,"KANGXI RADICAL TWO HANDS"));
        data.insert(std::make_pair(0x2f37,"KANGXI RADICAL SHOOT"));
        data.insert(std::make_pair(0x2f38,"KANGXI RADICAL BOW"));
        data.insert(std::make_pair(0x2f39,"KANGXI RADICAL SNOUT"));
        data.insert(std::make_pair(0x2f3a,"KANGXI RADICAL BRISTLE"));
        data.insert(std::make_pair(0x2f3b,"KANGXI RADICAL STEP"));
        data.insert(std::make_pair(0x2f3c,"KANGXI RADICAL HEART"));
        data.insert(std::make_pair(0x2f3d,"KANGXI RADICAL HALBERD"));
        data.insert(std::make_pair(0x2f3e,"KANGXI RADICAL DOOR"));
        data.insert(std::make_pair(0x2f3f,"KANGXI RADICAL HAND"));
        data.insert(std::make_pair(0x2f40,"KANGXI RADICAL BRANCH"));
        data.insert(std::make_pair(0x2f41,"KANGXI RADICAL RAP"));
        data.insert(std::make_pair(0x2f42,"KANGXI RADICAL SCRIPT"));
        data.insert(std::make_pair(0x2f43,"KANGXI RADICAL DIPPER"));
        data.insert(std::make_pair(0x2f44,"KANGXI RADICAL AXE"));
        data.insert(std::make_pair(0x2f45,"KANGXI RADICAL SQUARE"));
        data.insert(std::make_pair(0x2f46,"KANGXI RADICAL NOT"));
        data.insert(std::make_pair(0x2f47,"KANGXI RADICAL SUN"));
        data.insert(std::make_pair(0x2f48,"KANGXI RADICAL SAY"));
        data.insert(std::make_pair(0x2f49,"KANGXI RADICAL MOON"));
        data.insert(std::make_pair(0x2f4a,"KANGXI RADICAL TREE"));
        data.insert(std::make_pair(0x2f4b,"KANGXI RADICAL LACK"));
        data.insert(std::make_pair(0x2f4c,"KANGXI RADICAL STOP"));
        data.insert(std::make_pair(0x2f4d,"KANGXI RADICAL DEATH"));
        data.insert(std::make_pair(0x2f4e,"KANGXI RADICAL WEAPON"));
        data.insert(std::make_pair(0x2f4f,"KANGXI RADICAL DO NOT"));
        data.insert(std::make_pair(0x2f50,"KANGXI RADICAL COMPARE"));
        data.insert(std::make_pair(0x2f51,"KANGXI RADICAL FUR"));
        data.insert(std::make_pair(0x2f52,"KANGXI RADICAL CLAN"));
        data.insert(std::make_pair(0x2f53,"KANGXI RADICAL STEAM"));
        data.insert(std::make_pair(0x2f54,"KANGXI RADICAL WATER"));
        data.insert(std::make_pair(0x2f55,"KANGXI RADICAL FIRE"));
        data.insert(std::make_pair(0x2f56,"KANGXI RADICAL CLAW"));
        data.insert(std::make_pair(0x2f57,"KANGXI RADICAL FATHER"));
        data.insert(std::make_pair(0x2f58,"KANGXI RADICAL DOUBLE X"));
        data.insert(std::make_pair(0x2f59,"KANGXI RADICAL HALF TREE TRUNK"));
        data.insert(std::make_pair(0x2f5a,"KANGXI RADICAL SLICE"));
        data.insert(std::make_pair(0x2f5b,"KANGXI RADICAL FANG"));
        data.insert(std::make_pair(0x2f5c,"KANGXI RADICAL COW"));
        data.insert(std::make_pair(0x2f5d,"KANGXI RADICAL DOG"));
        data.insert(std::make_pair(0x2f5e,"KANGXI RADICAL PROFOUND"));
        data.insert(std::make_pair(0x2f5f,"KANGXI RADICAL JADE"));
        data.insert(std::make_pair(0x2f60,"KANGXI RADICAL MELON"));
        data.insert(std::make_pair(0x2f61,"KANGXI RADICAL TILE"));
        data.insert(std::make_pair(0x2f62,"KANGXI RADICAL SWEET"));
        data.insert(std::make_pair(0x2f63,"KANGXI RADICAL LIFE"));
        data.insert(std::make_pair(0x2f64,"KANGXI RADICAL USE"));
        data.insert(std::make_pair(0x2f65,"KANGXI RADICAL FIELD"));
        data.insert(std::make_pair(0x2f66,"KANGXI RADICAL BOLT OF CLOTH"));
        data.insert(std::make_pair(0x2f67,"KANGXI RADICAL SICKNESS"));
        data.insert(std::make_pair(0x2f68,"KANGXI RADICAL DOTTED TENT"));
        data.insert(std::make_pair(0x2f69,"KANGXI RADICAL WHITE"));
        data.insert(std::make_pair(0x2f6a,"KANGXI RADICAL SKIN"));
        data.insert(std::make_pair(0x2f6b,"KANGXI RADICAL DISH"));
        data.insert(std::make_pair(0x2f6c,"KANGXI RADICAL EYE"));
        data.insert(std::make_pair(0x2f6d,"KANGXI RADICAL SPEAR"));
        data.insert(std::make_pair(0x2f6e,"KANGXI RADICAL ARROW"));
        data.insert(std::make_pair(0x2f6f,"KANGXI RADICAL STONE"));
        data.insert(std::make_pair(0x2f70,"KANGXI RADICAL SPIRIT"));
        data.insert(std::make_pair(0x2f71,"KANGXI RADICAL TRACK"));
        data.insert(std::make_pair(0x2f72,"KANGXI RADICAL GRAIN"));
        data.insert(std::make_pair(0x2f73,"KANGXI RADICAL CAVE"));
        data.insert(std::make_pair(0x2f74,"KANGXI RADICAL STAND"));
        data.insert(std::make_pair(0x2f75,"KANGXI RADICAL BAMBOO"));
        data.insert(std::make_pair(0x2f76,"KANGXI RADICAL RICE"));
        data.insert(std::make_pair(0x2f77,"KANGXI RADICAL SILK"));
        data.insert(std::make_pair(0x2f78,"KANGXI RADICAL JAR"));
        data.insert(std::make_pair(0x2f79,"KANGXI RADICAL NET"));
        data.insert(std::make_pair(0x2f7a,"KANGXI RADICAL SHEEP"));
        data.insert(std::make_pair(0x2f7b,"KANGXI RADICAL FEATHER"));
        data.insert(std::make_pair(0x2f7c,"KANGXI RADICAL OLD"));
        data.insert(std::make_pair(0x2f7d,"KANGXI RADICAL AND"));
        data.insert(std::make_pair(0x2f7e,"KANGXI RADICAL PLOW"));
        data.insert(std::make_pair(0x2f7f,"KANGXI RADICAL EAR"));
        data.insert(std::make_pair(0x2f80,"KANGXI RADICAL BRUSH"));
        data.insert(std::make_pair(0x2f81,"KANGXI RADICAL MEAT"));
        data.insert(std::make_pair(0x2f82,"KANGXI RADICAL MINISTER"));
        data.insert(std::make_pair(0x2f83,"KANGXI RADICAL SELF"));
        data.insert(std::make_pair(0x2f84,"KANGXI RADICAL ARRIVE"));
        data.insert(std::make_pair(0x2f85,"KANGXI RADICAL MORTAR"));
        data.insert(std::make_pair(0x2f86,"KANGXI RADICAL TONGUE"));
        data.insert(std::make_pair(0x2f87,"KANGXI RADICAL OPPOSE"));
        data.insert(std::make_pair(0x2f88,"KANGXI RADICAL BOAT"));
        data.insert(std::make_pair(0x2f89,"KANGXI RADICAL STOPPING"));
        data.insert(std::make_pair(0x2f8a,"KANGXI RADICAL COLOR"));
        data.insert(std::make_pair(0x2f8b,"KANGXI RADICAL GRASS"));
        data.insert(std::make_pair(0x2f8c,"KANGXI RADICAL TIGER"));
        data.insert(std::make_pair(0x2f8d,"KANGXI RADICAL INSECT"));
        data.insert(std::make_pair(0x2f8e,"KANGXI RADICAL BLOOD"));
        data.insert(std::make_pair(0x2f8f,"KANGXI RADICAL WALK ENCLOSURE"));
        data.insert(std::make_pair(0x2f90,"KANGXI RADICAL CLOTHES"));
        data.insert(std::make_pair(0x2f91,"KANGXI RADICAL WEST"));
        data.insert(std::make_pair(0x2f92,"KANGXI RADICAL SEE"));
        data.insert(std::make_pair(0x2f93,"KANGXI RADICAL HORN"));
        data.insert(std::make_pair(0x2f94,"KANGXI RADICAL SPEECH"));
        data.insert(std::make_pair(0x2f95,"KANGXI RADICAL VALLEY"));
        data.insert(std::make_pair(0x2f96,"KANGXI RADICAL BEAN"));
        data.insert(std::make_pair(0x2f97,"KANGXI RADICAL PIG"));
        data.insert(std::make_pair(0x2f98,"KANGXI RADICAL BADGER"));
        data.insert(std::make_pair(0x2f99,"KANGXI RADICAL SHELL"));
        data.insert(std::make_pair(0x2f9a,"KANGXI RADICAL RED"));
        data.insert(std::make_pair(0x2f9b,"KANGXI RADICAL RUN"));
        data.insert(std::make_pair(0x2f9c,"KANGXI RADICAL FOOT"));
        data.insert(std::make_pair(0x2f9d,"KANGXI RADICAL BODY"));
        data.insert(std::make_pair(0x2f9e,"KANGXI RADICAL CART"));
        data.insert(std::make_pair(0x2f9f,"KANGXI RADICAL BITTER"));
        data.insert(std::make_pair(0x2fa0,"KANGXI RADICAL MORNING"));
        data.insert(std::make_pair(0x2fa1,"KANGXI RADICAL WALK"));
        data.insert(std::make_pair(0x2fa2,"KANGXI RADICAL CITY"));
        data.insert(std::make_pair(0x2fa3,"KANGXI RADICAL WINE"));
        data.insert(std::make_pair(0x2fa4,"KANGXI RADICAL DISTINGUISH"));
        data.insert(std::make_pair(0x2fa5,"KANGXI RADICAL VILLAGE"));
        data.insert(std::make_pair(0x2fa6,"KANGXI RADICAL GOLD"));
        data.insert(std::make_pair(0x2fa7,"KANGXI RADICAL LONG"));
        data.insert(std::make_pair(0x2fa8,"KANGXI RADICAL GATE"));
        data.insert(std::make_pair(0x2fa9,"KANGXI RADICAL MOUND"));
        data.insert(std::make_pair(0x2faa,"KANGXI RADICAL SLAVE"));
        data.insert(std::make_pair(0x2fab,"KANGXI RADICAL SHORT TAILED BIRD"));
        data.insert(std::make_pair(0x2fac,"KANGXI RADICAL RAIN"));
        data.insert(std::make_pair(0x2fad,"KANGXI RADICAL BLUE"));
        data.insert(std::make_pair(0x2fae,"KANGXI RADICAL WRONG"));
        data.insert(std::make_pair(0x2faf,"KANGXI RADICAL FACE"));
        data.insert(std::make_pair(0x2fb0,"KANGXI RADICAL LEATHER"));
        data.insert(std::make_pair(0x2fb1,"KANGXI RADICAL TANNED LEATHER"));
        data.insert(std::make_pair(0x2fb2,"KANGXI RADICAL LEEK"));
        data.insert(std::make_pair(0x2fb3,"KANGXI RADICAL SOUND"));
        data.insert(std::make_pair(0x2fb4,"KANGXI RADICAL LEAF"));
        data.insert(std::make_pair(0x2fb5,"KANGXI RADICAL WIND"));
        data.insert(std::make_pair(0x2fb6,"KANGXI RADICAL FLY"));
        data.insert(std::make_pair(0x2fb7,"KANGXI RADICAL EAT"));
        data.insert(std::make_pair(0x2fb8,"KANGXI RADICAL HEAD"));
        data.insert(std::make_pair(0x2fb9,"KANGXI RADICAL FRAGRANT"));
        data.insert(std::make_pair(0x2fba,"KANGXI RADICAL HORSE"));
        data.insert(std::make_pair(0x2fbb,"KANGXI RADICAL BONE"));
        data.insert(std::make_pair(0x2fbc,"KANGXI RADICAL TALL"));
        data.insert(std::make_pair(0x2fbd,"KANGXI RADICAL HAIR"));
        data.insert(std::make_pair(0x2fbe,"KANGXI RADICAL FIGHT"));
        data.insert(std::make_pair(0x2fbf,"KANGXI RADICAL SACRIFICIAL WINE"));
        data.insert(std::make_pair(0x2fc0,"KANGXI RADICAL CAULDRON"));
        data.insert(std::make_pair(0x2fc1,"KANGXI RADICAL GHOST"));
        data.insert(std::make_pair(0x2fc2,"KANGXI RADICAL FISH"));
        data.insert(std::make_pair(0x2fc3,"KANGXI RADICAL BIRD"));
        data.insert(std::make_pair(0x2fc4,"KANGXI RADICAL SALT"));
        data.insert(std::make_pair(0x2fc5,"KANGXI RADICAL DEER"));
        data.insert(std::make_pair(0x2fc6,"KANGXI RADICAL WHEAT"));
        data.insert(std::make_pair(0x2fc7,"KANGXI RADICAL HEMP"));
        data.insert(std::make_pair(0x2fc8,"KANGXI RADICAL YELLOW"));
        data.insert(std::make_pair(0x2fc9,"KANGXI RADICAL MILLET"));
        data.insert(std::make_pair(0x2fca,"KANGXI RADICAL BLACK"));
        data.insert(std::make_pair(0x2fcb,"KANGXI RADICAL EMBROIDERY"));
        data.insert(std::make_pair(0x2fcc,"KANGXI RADICAL FROG"));
        data.insert(std::make_pair(0x2fcd,"KANGXI RADICAL TRIPOD"));
        data.insert(std::make_pair(0x2fce,"KANGXI RADICAL DRUM"));
        data.insert(std::make_pair(0x2fcf,"KANGXI RADICAL RAT"));
        data.insert(std::make_pair(0x2fd0,"KANGXI RADICAL NOSE"));
        data.insert(std::make_pair(0x2fd1,"KANGXI RADICAL EVEN"));
        data.insert(std::make_pair(0x2fd2,"KANGXI RADICAL TOOTH"));
        data.insert(std::make_pair(0x2fd3,"KANGXI RADICAL DRAGON"));
        data.insert(std::make_pair(0x2fd4,"KANGXI RADICAL TURTLE"));
        data.insert(std::make_pair(0x2fd5,"KANGXI RADICAL FLUTE"));
        data.insert(std::make_pair(0x2ff0,"IDEOGRAPHIC DESCRIPTION CHARACTER LEFT TO RIGHT"));
        data.insert(std::make_pair(0x2ff1,"IDEOGRAPHIC DESCRIPTION CHARACTER ABOVE TO BELOW"));
        data.insert(std::make_pair(0x2ff2,"IDEOGRAPHIC DESCRIPTION CHARACTER LEFT TO MIDDLE AND RIGHT"));
        data.insert(std::make_pair(0x2ff3,"IDEOGRAPHIC DESCRIPTION CHARACTER ABOVE TO MIDDLE AND BELOW"));
        data.insert(std::make_pair(0x2ff4,"IDEOGRAPHIC DESCRIPTION CHARACTER FULL SURROUND"));
        data.insert(std::make_pair(0x2ff5,"IDEOGRAPHIC DESCRIPTION CHARACTER SURROUND FROM ABOVE"));
        data.insert(std::make_pair(0x2ff6,"IDEOGRAPHIC DESCRIPTION CHARACTER SURROUND FROM BELOW"));
        data.insert(std::make_pair(0x2ff7,"IDEOGRAPHIC DESCRIPTION CHARACTER SURROUND FROM LEFT"));
        data.insert(std::make_pair(0x2ff8,"IDEOGRAPHIC DESCRIPTION CHARACTER SURROUND FROM UPPER LEFT"));
        data.insert(std::make_pair(0x2ff9,"IDEOGRAPHIC DESCRIPTION CHARACTER SURROUND FROM UPPER RIGHT"));
        data.insert(std::make_pair(0x2ffa,"IDEOGRAPHIC DESCRIPTION CHARACTER SURROUND FROM LOWER LEFT"));
        data.insert(std::make_pair(0x2ffb,"IDEOGRAPHIC DESCRIPTION CHARACTER OVERLAID"));
        data.insert(std::make_pair(0x3000,"IDEOGRAPHIC SPACE"));
        data.insert(std::make_pair(0x3001,"IDEOGRAPHIC COMMA"));
        data.insert(std::make_pair(0x3002,"IDEOGRAPHIC FULL STOP"));
        data.insert(std::make_pair(0x3003,"DITTO MARK"));
        data.insert(std::make_pair(0x3004,"JAPANESE INDUSTRIAL STANDARD SYMBOL"));
        data.insert(std::make_pair(0x3005,"IDEOGRAPHIC ITERATION MARK"));
        data.insert(std::make_pair(0x3006,"IDEOGRAPHIC CLOSING MARK"));
        data.insert(std::make_pair(0x3007,"IDEOGRAPHIC NUMBER ZERO"));
        data.insert(std::make_pair(0x3008,"LEFT ANGLE BRACKET"));
        data.insert(std::make_pair(0x3009,"RIGHT ANGLE BRACKET"));
        data.insert(std::make_pair(0x300a,"LEFT DOUBLE ANGLE BRACKET"));
        data.insert(std::make_pair(0x300b,"RIGHT DOUBLE ANGLE BRACKET"));
        data.insert(std::make_pair(0x300c,"LEFT CORNER BRACKET"));
        data.insert(std::make_pair(0x300d,"RIGHT CORNER BRACKET"));
        data.insert(std::make_pair(0x300e,"LEFT WHITE CORNER BRACKET"));
        data.insert(std::make_pair(0x300f,"RIGHT WHITE CORNER BRACKET"));
        data.insert(std::make_pair(0x3010,"LEFT BLACK LENTICULAR BRACKET"));
        data.insert(std::make_pair(0x3011,"RIGHT BLACK LENTICULAR BRACKET"));
        data.insert(std::make_pair(0x3012,"POSTAL MARK"));
        data.insert(std::make_pair(0x3013,"GETA MARK"));
        data.insert(std::make_pair(0x3014,"LEFT TORTOISE SHELL BRACKET"));
        data.insert(std::make_pair(0x3015,"RIGHT TORTOISE SHELL BRACKET"));
        data.insert(std::make_pair(0x3016,"LEFT WHITE LENTICULAR BRACKET"));
        data.insert(std::make_pair(0x3017,"RIGHT WHITE LENTICULAR BRACKET"));
        data.insert(std::make_pair(0x3018,"LEFT WHITE TORTOISE SHELL BRACKET"));
        data.insert(std::make_pair(0x3019,"RIGHT WHITE TORTOISE SHELL BRACKET"));
        data.insert(std::make_pair(0x301a,"LEFT WHITE SQUARE BRACKET"));
        data.insert(std::make_pair(0x301b,"RIGHT WHITE SQUARE BRACKET"));
        data.insert(std::make_pair(0x301c,"WAVE DASH"));
        data.insert(std::make_pair(0x301d,"REVERSED DOUBLE PRIME QUOTATION MARK"));
        data.insert(std::make_pair(0x301e,"DOUBLE PRIME QUOTATION MARK"));
        data.insert(std::make_pair(0x301f,"LOW DOUBLE PRIME QUOTATION MARK"));
        data.insert(std::make_pair(0x3020,"POSTAL MARK FACE"));
        data.insert(std::make_pair(0x3021,"HANGZHOU NUMERAL ONE"));
        data.insert(std::make_pair(0x3022,"HANGZHOU NUMERAL TWO"));
        data.insert(std::make_pair(0x3023,"HANGZHOU NUMERAL THREE"));
        data.insert(std::make_pair(0x3024,"HANGZHOU NUMERAL FOUR"));
        data.insert(std::make_pair(0x3025,"HANGZHOU NUMERAL FIVE"));
        data.insert(std::make_pair(0x3026,"HANGZHOU NUMERAL SIX"));
        data.insert(std::make_pair(0x3027,"HANGZHOU NUMERAL SEVEN"));
        data.insert(std::make_pair(0x3028,"HANGZHOU NUMERAL EIGHT"));
        data.insert(std::make_pair(0x3029,"HANGZHOU NUMERAL NINE"));
        data.insert(std::make_pair(0x302a,"IDEOGRAPHIC LEVEL TONE MARK"));
        data.insert(std::make_pair(0x302b,"IDEOGRAPHIC RISING TONE MARK"));
        data.insert(std::make_pair(0x302c,"IDEOGRAPHIC DEPARTING TONE MARK"));
        data.insert(std::make_pair(0x302d,"IDEOGRAPHIC ENTERING TONE MARK"));
        data.insert(std::make_pair(0x302e,"HANGUL SINGLE DOT TONE MARK"));
        data.insert(std::make_pair(0x302f,"HANGUL DOUBLE DOT TONE MARK"));
        data.insert(std::make_pair(0x3030,"WAVY DASH"));
        data.insert(std::make_pair(0x3031,"VERTICAL KANA REPEAT MARK"));
        data.insert(std::make_pair(0x3032,"VERTICAL KANA REPEAT WITH VOICED SOUND MARK"));
        data.insert(std::make_pair(0x3033,"VERTICAL KANA REPEAT MARK UPPER HALF"));
        data.insert(std::make_pair(0x3034,"VERTICAL KANA REPEAT WITH VOICED SOUND MARK UPPER HALF"));
        data.insert(std::make_pair(0x3035,"VERTICAL KANA REPEAT MARK LOWER HALF"));
        data.insert(std::make_pair(0x3036,"CIRCLED POSTAL MARK"));
        data.insert(std::make_pair(0x3037,"IDEOGRAPHIC TELEGRAPH LINE FEED SEPARATOR SYMBOL"));
        data.insert(std::make_pair(0x3038,"HANGZHOU NUMERAL TEN"));
        data.insert(std::make_pair(0x3039,"HANGZHOU NUMERAL TWENTY"));
        data.insert(std::make_pair(0x303a,"HANGZHOU NUMERAL THIRTY"));
        data.insert(std::make_pair(0x303b,"VERTICAL IDEOGRAPHIC ITERATION MARK"));
        data.insert(std::make_pair(0x303c,"MASU MARK"));
        data.insert(std::make_pair(0x303d,"PART ALTERNATION MARK"));
        data.insert(std::make_pair(0x303e,"IDEOGRAPHIC VARIATION INDICATOR"));
        data.insert(std::make_pair(0x303f,"IDEOGRAPHIC HALF FILL SPACE"));
        data.insert(std::make_pair(0x3041,"HIRAGANA LETTER SMALL A"));
        data.insert(std::make_pair(0x3042,"HIRAGANA LETTER A"));
        data.insert(std::make_pair(0x3043,"HIRAGANA LETTER SMALL I"));
        data.insert(std::make_pair(0x3044,"HIRAGANA LETTER I"));
        data.insert(std::make_pair(0x3045,"HIRAGANA LETTER SMALL U"));
        data.insert(std::make_pair(0x3046,"HIRAGANA LETTER U"));
        data.insert(std::make_pair(0x3047,"HIRAGANA LETTER SMALL E"));
        data.insert(std::make_pair(0x3048,"HIRAGANA LETTER E"));
        data.insert(std::make_pair(0x3049,"HIRAGANA LETTER SMALL O"));
        data.insert(std::make_pair(0x304a,"HIRAGANA LETTER O"));
        data.insert(std::make_pair(0x304b,"HIRAGANA LETTER KA"));
        data.insert(std::make_pair(0x304c,"HIRAGANA LETTER GA"));
        data.insert(std::make_pair(0x304d,"HIRAGANA LETTER KI"));
        data.insert(std::make_pair(0x304e,"HIRAGANA LETTER GI"));
        data.insert(std::make_pair(0x304f,"HIRAGANA LETTER KU"));
        data.insert(std::make_pair(0x3050,"HIRAGANA LETTER GU"));
        data.insert(std::make_pair(0x3051,"HIRAGANA LETTER KE"));
        data.insert(std::make_pair(0x3052,"HIRAGANA LETTER GE"));
        data.insert(std::make_pair(0x3053,"HIRAGANA LETTER KO"));
        data.insert(std::make_pair(0x3054,"HIRAGANA LETTER GO"));
        data.insert(std::make_pair(0x3055,"HIRAGANA LETTER SA"));
        data.insert(std::make_pair(0x3056,"HIRAGANA LETTER ZA"));
        data.insert(std::make_pair(0x3057,"HIRAGANA LETTER SI"));
        data.insert(std::make_pair(0x3058,"HIRAGANA LETTER ZI"));
        data.insert(std::make_pair(0x3059,"HIRAGANA LETTER SU"));
        data.insert(std::make_pair(0x305a,"HIRAGANA LETTER ZU"));
        data.insert(std::make_pair(0x305b,"HIRAGANA LETTER SE"));
        data.insert(std::make_pair(0x305c,"HIRAGANA LETTER ZE"));
        data.insert(std::make_pair(0x305d,"HIRAGANA LETTER SO"));
        data.insert(std::make_pair(0x305e,"HIRAGANA LETTER ZO"));
        data.insert(std::make_pair(0x305f,"HIRAGANA LETTER TA"));
        data.insert(std::make_pair(0x3060,"HIRAGANA LETTER DA"));
        data.insert(std::make_pair(0x3061,"HIRAGANA LETTER TI"));
        data.insert(std::make_pair(0x3062,"HIRAGANA LETTER DI"));
        data.insert(std::make_pair(0x3063,"HIRAGANA LETTER SMALL TU"));
        data.insert(std::make_pair(0x3064,"HIRAGANA LETTER TU"));
        data.insert(std::make_pair(0x3065,"HIRAGANA LETTER DU"));
        data.insert(std::make_pair(0x3066,"HIRAGANA LETTER TE"));
        data.insert(std::make_pair(0x3067,"HIRAGANA LETTER DE"));
        data.insert(std::make_pair(0x3068,"HIRAGANA LETTER TO"));
        data.insert(std::make_pair(0x3069,"HIRAGANA LETTER DO"));
        data.insert(std::make_pair(0x306a,"HIRAGANA LETTER NA"));
        data.insert(std::make_pair(0x306b,"HIRAGANA LETTER NI"));
        data.insert(std::make_pair(0x306c,"HIRAGANA LETTER NU"));
        data.insert(std::make_pair(0x306d,"HIRAGANA LETTER NE"));
        data.insert(std::make_pair(0x306e,"HIRAGANA LETTER NO"));
        data.insert(std::make_pair(0x306f,"HIRAGANA LETTER HA"));
        data.insert(std::make_pair(0x3070,"HIRAGANA LETTER BA"));
        data.insert(std::make_pair(0x3071,"HIRAGANA LETTER PA"));
        data.insert(std::make_pair(0x3072,"HIRAGANA LETTER HI"));
        data.insert(std::make_pair(0x3073,"HIRAGANA LETTER BI"));
        data.insert(std::make_pair(0x3074,"HIRAGANA LETTER PI"));
        data.insert(std::make_pair(0x3075,"HIRAGANA LETTER HU"));
        data.insert(std::make_pair(0x3076,"HIRAGANA LETTER BU"));
        data.insert(std::make_pair(0x3077,"HIRAGANA LETTER PU"));
        data.insert(std::make_pair(0x3078,"HIRAGANA LETTER HE"));
        data.insert(std::make_pair(0x3079,"HIRAGANA LETTER BE"));
        data.insert(std::make_pair(0x307a,"HIRAGANA LETTER PE"));
        data.insert(std::make_pair(0x307b,"HIRAGANA LETTER HO"));
        data.insert(std::make_pair(0x307c,"HIRAGANA LETTER BO"));
        data.insert(std::make_pair(0x307d,"HIRAGANA LETTER PO"));
        data.insert(std::make_pair(0x307e,"HIRAGANA LETTER MA"));
        data.insert(std::make_pair(0x307f,"HIRAGANA LETTER MI"));
        data.insert(std::make_pair(0x3080,"HIRAGANA LETTER MU"));
        data.insert(std::make_pair(0x3081,"HIRAGANA LETTER ME"));
        data.insert(std::make_pair(0x3082,"HIRAGANA LETTER MO"));
        data.insert(std::make_pair(0x3083,"HIRAGANA LETTER SMALL YA"));
        data.insert(std::make_pair(0x3084,"HIRAGANA LETTER YA"));
        data.insert(std::make_pair(0x3085,"HIRAGANA LETTER SMALL YU"));
        data.insert(std::make_pair(0x3086,"HIRAGANA LETTER YU"));
        data.insert(std::make_pair(0x3087,"HIRAGANA LETTER SMALL YO"));
        data.insert(std::make_pair(0x3088,"HIRAGANA LETTER YO"));
        data.insert(std::make_pair(0x3089,"HIRAGANA LETTER RA"));
        data.insert(std::make_pair(0x308a,"HIRAGANA LETTER RI"));
        data.insert(std::make_pair(0x308b,"HIRAGANA LETTER RU"));
        data.insert(std::make_pair(0x308c,"HIRAGANA LETTER RE"));
        data.insert(std::make_pair(0x308d,"HIRAGANA LETTER RO"));
        data.insert(std::make_pair(0x308e,"HIRAGANA LETTER SMALL WA"));
        data.insert(std::make_pair(0x308f,"HIRAGANA LETTER WA"));
        data.insert(std::make_pair(0x3090,"HIRAGANA LETTER WI"));
        data.insert(std::make_pair(0x3091,"HIRAGANA LETTER WE"));
        data.insert(std::make_pair(0x3092,"HIRAGANA LETTER WO"));
        data.insert(std::make_pair(0x3093,"HIRAGANA LETTER N"));
        data.insert(std::make_pair(0x3094,"HIRAGANA LETTER VU"));
        data.insert(std::make_pair(0x3095,"HIRAGANA LETTER SMALL KA"));
        data.insert(std::make_pair(0x3096,"HIRAGANA LETTER SMALL KE"));
        data.insert(std::make_pair(0x3099,"COMBINING KATAKANA-HIRAGANA VOICED SOUND MARK"));
        data.insert(std::make_pair(0x309a,"COMBINING KATAKANA-HIRAGANA SEMI-VOICED SOUND MARK"));
        data.insert(std::make_pair(0x309b,"KATAKANA-HIRAGANA VOICED SOUND MARK"));
        data.insert(std::make_pair(0x309c,"KATAKANA-HIRAGANA SEMI-VOICED SOUND MARK"));
        data.insert(std::make_pair(0x309d,"HIRAGANA ITERATION MARK"));
        data.insert(std::make_pair(0x309e,"HIRAGANA VOICED ITERATION MARK"));
        data.insert(std::make_pair(0x309f,"HIRAGANA DIGRAPH YORI"));
        data.insert(std::make_pair(0x30a0,"KATAKANA-HIRAGANA DOUBLE HYPHEN"));
        data.insert(std::make_pair(0x30a1,"KATAKANA LETTER SMALL A"));
        data.insert(std::make_pair(0x30a2,"KATAKANA LETTER A"));
        data.insert(std::make_pair(0x30a3,"KATAKANA LETTER SMALL I"));
        data.insert(std::make_pair(0x30a4,"KATAKANA LETTER I"));
        data.insert(std::make_pair(0x30a5,"KATAKANA LETTER SMALL U"));
        data.insert(std::make_pair(0x30a6,"KATAKANA LETTER U"));
        data.insert(std::make_pair(0x30a7,"KATAKANA LETTER SMALL E"));
        data.insert(std::make_pair(0x30a8,"KATAKANA LETTER E"));
        data.insert(std::make_pair(0x30a9,"KATAKANA LETTER SMALL O"));
        data.insert(std::make_pair(0x30aa,"KATAKANA LETTER O"));
        data.insert(std::make_pair(0x30ab,"KATAKANA LETTER KA"));
        data.insert(std::make_pair(0x30ac,"KATAKANA LETTER GA"));
        data.insert(std::make_pair(0x30ad,"KATAKANA LETTER KI"));
        data.insert(std::make_pair(0x30ae,"KATAKANA LETTER GI"));
        data.insert(std::make_pair(0x30af,"KATAKANA LETTER KU"));
        data.insert(std::make_pair(0x30b0,"KATAKANA LETTER GU"));
        data.insert(std::make_pair(0x30b1,"KATAKANA LETTER KE"));
        data.insert(std::make_pair(0x30b2,"KATAKANA LETTER GE"));
        data.insert(std::make_pair(0x30b3,"KATAKANA LETTER KO"));
        data.insert(std::make_pair(0x30b4,"KATAKANA LETTER GO"));
        data.insert(std::make_pair(0x30b5,"KATAKANA LETTER SA"));
        data.insert(std::make_pair(0x30b6,"KATAKANA LETTER ZA"));
        data.insert(std::make_pair(0x30b7,"KATAKANA LETTER SI"));
        data.insert(std::make_pair(0x30b8,"KATAKANA LETTER ZI"));
        data.insert(std::make_pair(0x30b9,"KATAKANA LETTER SU"));
        data.insert(std::make_pair(0x30ba,"KATAKANA LETTER ZU"));
        data.insert(std::make_pair(0x30bb,"KATAKANA LETTER SE"));
        data.insert(std::make_pair(0x30bc,"KATAKANA LETTER ZE"));
        data.insert(std::make_pair(0x30bd,"KATAKANA LETTER SO"));
        data.insert(std::make_pair(0x30be,"KATAKANA LETTER ZO"));
        data.insert(std::make_pair(0x30bf,"KATAKANA LETTER TA"));
        data.insert(std::make_pair(0x30c0,"KATAKANA LETTER DA"));
        data.insert(std::make_pair(0x30c1,"KATAKANA LETTER TI"));
        data.insert(std::make_pair(0x30c2,"KATAKANA LETTER DI"));
        data.insert(std::make_pair(0x30c3,"KATAKANA LETTER SMALL TU"));
        data.insert(std::make_pair(0x30c4,"KATAKANA LETTER TU"));
        data.insert(std::make_pair(0x30c5,"KATAKANA LETTER DU"));
        data.insert(std::make_pair(0x30c6,"KATAKANA LETTER TE"));
        data.insert(std::make_pair(0x30c7,"KATAKANA LETTER DE"));
        data.insert(std::make_pair(0x30c8,"KATAKANA LETTER TO"));
        data.insert(std::make_pair(0x30c9,"KATAKANA LETTER DO"));
        data.insert(std::make_pair(0x30ca,"KATAKANA LETTER NA"));
        data.insert(std::make_pair(0x30cb,"KATAKANA LETTER NI"));
        data.insert(std::make_pair(0x30cc,"KATAKANA LETTER NU"));
        data.insert(std::make_pair(0x30cd,"KATAKANA LETTER NE"));
        data.insert(std::make_pair(0x30ce,"KATAKANA LETTER NO"));
        data.insert(std::make_pair(0x30cf,"KATAKANA LETTER HA"));
        data.insert(std::make_pair(0x30d0,"KATAKANA LETTER BA"));
        data.insert(std::make_pair(0x30d1,"KATAKANA LETTER PA"));
        data.insert(std::make_pair(0x30d2,"KATAKANA LETTER HI"));
        data.insert(std::make_pair(0x30d3,"KATAKANA LETTER BI"));
        data.insert(std::make_pair(0x30d4,"KATAKANA LETTER PI"));
        data.insert(std::make_pair(0x30d5,"KATAKANA LETTER HU"));
        data.insert(std::make_pair(0x30d6,"KATAKANA LETTER BU"));
        data.insert(std::make_pair(0x30d7,"KATAKANA LETTER PU"));
        data.insert(std::make_pair(0x30d8,"KATAKANA LETTER HE"));
        data.insert(std::make_pair(0x30d9,"KATAKANA LETTER BE"));
        data.insert(std::make_pair(0x30da,"KATAKANA LETTER PE"));
        data.insert(std::make_pair(0x30db,"KATAKANA LETTER HO"));
        data.insert(std::make_pair(0x30dc,"KATAKANA LETTER BO"));
        data.insert(std::make_pair(0x30dd,"KATAKANA LETTER PO"));
        data.insert(std::make_pair(0x30de,"KATAKANA LETTER MA"));
        data.insert(std::make_pair(0x30df,"KATAKANA LETTER MI"));
        data.insert(std::make_pair(0x30e0,"KATAKANA LETTER MU"));
        data.insert(std::make_pair(0x30e1,"KATAKANA LETTER ME"));
        data.insert(std::make_pair(0x30e2,"KATAKANA LETTER MO"));
        data.insert(std::make_pair(0x30e3,"KATAKANA LETTER SMALL YA"));
        data.insert(std::make_pair(0x30e4,"KATAKANA LETTER YA"));
        data.insert(std::make_pair(0x30e5,"KATAKANA LETTER SMALL YU"));
        data.insert(std::make_pair(0x30e6,"KATAKANA LETTER YU"));
        data.insert(std::make_pair(0x30e7,"KATAKANA LETTER SMALL YO"));
        data.insert(std::make_pair(0x30e8,"KATAKANA LETTER YO"));
        data.insert(std::make_pair(0x30e9,"KATAKANA LETTER RA"));
        data.insert(std::make_pair(0x30ea,"KATAKANA LETTER RI"));
        data.insert(std::make_pair(0x30eb,"KATAKANA LETTER RU"));
        data.insert(std::make_pair(0x30ec,"KATAKANA LETTER RE"));
        data.insert(std::make_pair(0x30ed,"KATAKANA LETTER RO"));
        data.insert(std::make_pair(0x30ee,"KATAKANA LETTER SMALL WA"));
        data.insert(std::make_pair(0x30ef,"KATAKANA LETTER WA"));
        data.insert(std::make_pair(0x30f0,"KATAKANA LETTER WI"));
        data.insert(std::make_pair(0x30f1,"KATAKANA LETTER WE"));
        data.insert(std::make_pair(0x30f2,"KATAKANA LETTER WO"));
        data.insert(std::make_pair(0x30f3,"KATAKANA LETTER N"));
        data.insert(std::make_pair(0x30f4,"KATAKANA LETTER VU"));
        data.insert(std::make_pair(0x30f5,"KATAKANA LETTER SMALL KA"));
        data.insert(std::make_pair(0x30f6,"KATAKANA LETTER SMALL KE"));
        data.insert(std::make_pair(0x30f7,"KATAKANA LETTER VA"));
        data.insert(std::make_pair(0x30f8,"KATAKANA LETTER VI"));
        data.insert(std::make_pair(0x30f9,"KATAKANA LETTER VE"));
        data.insert(std::make_pair(0x30fa,"KATAKANA LETTER VO"));
        data.insert(std::make_pair(0x30fb,"KATAKANA MIDDLE DOT"));
        data.insert(std::make_pair(0x30fc,"KATAKANA-HIRAGANA PROLONGED SOUND MARK"));
        data.insert(std::make_pair(0x30fd,"KATAKANA ITERATION MARK"));
        data.insert(std::make_pair(0x30fe,"KATAKANA VOICED ITERATION MARK"));
        data.insert(std::make_pair(0x30ff,"KATAKANA DIGRAPH KOTO"));
        data.insert(std::make_pair(0x3105,"BOPOMOFO LETTER B"));
        data.insert(std::make_pair(0x3106,"BOPOMOFO LETTER P"));
        data.insert(std::make_pair(0x3107,"BOPOMOFO LETTER M"));
        data.insert(std::make_pair(0x3108,"BOPOMOFO LETTER F"));
        data.insert(std::make_pair(0x3109,"BOPOMOFO LETTER D"));
        data.insert(std::make_pair(0x310a,"BOPOMOFO LETTER T"));
        data.insert(std::make_pair(0x310b,"BOPOMOFO LETTER N"));
        data.insert(std::make_pair(0x310c,"BOPOMOFO LETTER L"));
        data.insert(std::make_pair(0x310d,"BOPOMOFO LETTER G"));
        data.insert(std::make_pair(0x310e,"BOPOMOFO LETTER K"));
        data.insert(std::make_pair(0x310f,"BOPOMOFO LETTER H"));
        data.insert(std::make_pair(0x3110,"BOPOMOFO LETTER J"));
        data.insert(std::make_pair(0x3111,"BOPOMOFO LETTER Q"));
        data.insert(std::make_pair(0x3112,"BOPOMOFO LETTER X"));
        data.insert(std::make_pair(0x3113,"BOPOMOFO LETTER ZH"));
        data.insert(std::make_pair(0x3114,"BOPOMOFO LETTER CH"));
        data.insert(std::make_pair(0x3115,"BOPOMOFO LETTER SH"));
        data.insert(std::make_pair(0x3116,"BOPOMOFO LETTER R"));
        data.insert(std::make_pair(0x3117,"BOPOMOFO LETTER Z"));
        data.insert(std::make_pair(0x3118,"BOPOMOFO LETTER C"));
        data.insert(std::make_pair(0x3119,"BOPOMOFO LETTER S"));
        data.insert(std::make_pair(0x311a,"BOPOMOFO LETTER A"));
        data.insert(std::make_pair(0x311b,"BOPOMOFO LETTER O"));
        data.insert(std::make_pair(0x311c,"BOPOMOFO LETTER E"));
        data.insert(std::make_pair(0x311d,"BOPOMOFO LETTER EH"));
        data.insert(std::make_pair(0x311e,"BOPOMOFO LETTER AI"));
        data.insert(std::make_pair(0x311f,"BOPOMOFO LETTER EI"));
        data.insert(std::make_pair(0x3120,"BOPOMOFO LETTER AU"));
        data.insert(std::make_pair(0x3121,"BOPOMOFO LETTER OU"));
        data.insert(std::make_pair(0x3122,"BOPOMOFO LETTER AN"));
        data.insert(std::make_pair(0x3123,"BOPOMOFO LETTER EN"));
        data.insert(std::make_pair(0x3124,"BOPOMOFO LETTER ANG"));
        data.insert(std::make_pair(0x3125,"BOPOMOFO LETTER ENG"));
        data.insert(std::make_pair(0x3126,"BOPOMOFO LETTER ER"));
        data.insert(std::make_pair(0x3127,"BOPOMOFO LETTER I"));
        data.insert(std::make_pair(0x3128,"BOPOMOFO LETTER U"));
        data.insert(std::make_pair(0x3129,"BOPOMOFO LETTER IU"));
        data.insert(std::make_pair(0x312a,"BOPOMOFO LETTER V"));
        data.insert(std::make_pair(0x312b,"BOPOMOFO LETTER NG"));
        data.insert(std::make_pair(0x312c,"BOPOMOFO LETTER GN"));
        data.insert(std::make_pair(0x312d,"BOPOMOFO LETTER IH"));
        data.insert(std::make_pair(0x312e,"BOPOMOFO LETTER O WITH DOT ABOVE"));
        data.insert(std::make_pair(0x312f,"BOPOMOFO LETTER NN"));
        data.insert(std::make_pair(0x3131,"HANGUL LETTER KIYEOK"));
        data.insert(std::make_pair(0x3132,"HANGUL LETTER SSANGKIYEOK"));
        data.insert(std::make_pair(0x3133,"HANGUL LETTER KIYEOK-SIOS"));
        data.insert(std::make_pair(0x3134,"HANGUL LETTER NIEUN"));
        data.insert(std::make_pair(0x3135,"HANGUL LETTER NIEUN-CIEUC"));
        data.insert(std::make_pair(0x3136,"HANGUL LETTER NIEUN-HIEUH"));
        data.insert(std::make_pair(0x3137,"HANGUL LETTER TIKEUT"));
        data.insert(std::make_pair(0x3138,"HANGUL LETTER SSANGTIKEUT"));
        data.insert(std::make_pair(0x3139,"HANGUL LETTER RIEUL"));
        data.insert(std::make_pair(0x313a,"HANGUL LETTER RIEUL-KIYEOK"));
        data.insert(std::make_pair(0x313b,"HANGUL LETTER RIEUL-MIEUM"));
        data.insert(std::make_pair(0x313c,"HANGUL LETTER RIEUL-PIEUP"));
        data.insert(std::make_pair(0x313d,"HANGUL LETTER RIEUL-SIOS"));
        data.insert(std::make_pair(0x313e,"HANGUL LETTER RIEUL-THIEUTH"));
        data.insert(std::make_pair(0x313f,"HANGUL LETTER RIEUL-PHIEUPH"));
        data.insert(std::make_pair(0x3140,"HANGUL LETTER RIEUL-HIEUH"));
        data.insert(std::make_pair(0x3141,"HANGUL LETTER MIEUM"));
        data.insert(std::make_pair(0x3142,"HANGUL LETTER PIEUP"));
        data.insert(std::make_pair(0x3143,"HANGUL LETTER SSANGPIEUP"));
        data.insert(std::make_pair(0x3144,"HANGUL LETTER PIEUP-SIOS"));
        data.insert(std::make_pair(0x3145,"HANGUL LETTER SIOS"));
        data.insert(std::make_pair(0x3146,"HANGUL LETTER SSANGSIOS"));
        data.insert(std::make_pair(0x3147,"HANGUL LETTER IEUNG"));
        data.insert(std::make_pair(0x3148,"HANGUL LETTER CIEUC"));
        data.insert(std::make_pair(0x3149,"HANGUL LETTER SSANGCIEUC"));
        data.insert(std::make_pair(0x314a,"HANGUL LETTER CHIEUCH"));
        data.insert(std::make_pair(0x314b,"HANGUL LETTER KHIEUKH"));
        data.insert(std::make_pair(0x314c,"HANGUL LETTER THIEUTH"));
        data.insert(std::make_pair(0x314d,"HANGUL LETTER PHIEUPH"));
        data.insert(std::make_pair(0x314e,"HANGUL LETTER HIEUH"));
        data.insert(std::make_pair(0x314f,"HANGUL LETTER A"));
        data.insert(std::make_pair(0x3150,"HANGUL LETTER AE"));
        data.insert(std::make_pair(0x3151,"HANGUL LETTER YA"));
        data.insert(std::make_pair(0x3152,"HANGUL LETTER YAE"));
        data.insert(std::make_pair(0x3153,"HANGUL LETTER EO"));
        data.insert(std::make_pair(0x3154,"HANGUL LETTER E"));
        data.insert(std::make_pair(0x3155,"HANGUL LETTER YEO"));
        data.insert(std::make_pair(0x3156,"HANGUL LETTER YE"));
        data.insert(std::make_pair(0x3157,"HANGUL LETTER O"));
        data.insert(std::make_pair(0x3158,"HANGUL LETTER WA"));
        data.insert(std::make_pair(0x3159,"HANGUL LETTER WAE"));
        data.insert(std::make_pair(0x315a,"HANGUL LETTER OE"));
        data.insert(std::make_pair(0x315b,"HANGUL LETTER YO"));
        data.insert(std::make_pair(0x315c,"HANGUL LETTER U"));
        data.insert(std::make_pair(0x315d,"HANGUL LETTER WEO"));
        data.insert(std::make_pair(0x315e,"HANGUL LETTER WE"));
        data.insert(std::make_pair(0x315f,"HANGUL LETTER WI"));
        data.insert(std::make_pair(0x3160,"HANGUL LETTER YU"));
        data.insert(std::make_pair(0x3161,"HANGUL LETTER EU"));
        data.insert(std::make_pair(0x3162,"HANGUL LETTER YI"));
        data.insert(std::make_pair(0x3163,"HANGUL LETTER I"));
        data.insert(std::make_pair(0x3164,"HANGUL FILLER"));
        data.insert(std::make_pair(0x3165,"HANGUL LETTER SSANGNIEUN"));
        data.insert(std::make_pair(0x3166,"HANGUL LETTER NIEUN-TIKEUT"));
        data.insert(std::make_pair(0x3167,"HANGUL LETTER NIEUN-SIOS"));
        data.insert(std::make_pair(0x3168,"HANGUL LETTER NIEUN-PANSIOS"));
        data.insert(std::make_pair(0x3169,"HANGUL LETTER RIEUL-KIYEOK-SIOS"));
        data.insert(std::make_pair(0x316a,"HANGUL LETTER RIEUL-TIKEUT"));
        data.insert(std::make_pair(0x316b,"HANGUL LETTER RIEUL-PIEUP-SIOS"));
        data.insert(std::make_pair(0x316c,"HANGUL LETTER RIEUL-PANSIOS"));
        data.insert(std::make_pair(0x316d,"HANGUL LETTER RIEUL-YEORINHIEUH"));
        data.insert(std::make_pair(0x316e,"HANGUL LETTER MIEUM-PIEUP"));
        data.insert(std::make_pair(0x316f,"HANGUL LETTER MIEUM-SIOS"));
        data.insert(std::make_pair(0x3170,"HANGUL LETTER MIEUM-PANSIOS"));
        data.insert(std::make_pair(0x3171,"HANGUL LETTER KAPYEOUNMIEUM"));
        data.insert(std::make_pair(0x3172,"HANGUL LETTER PIEUP-KIYEOK"));
        data.insert(std::make_pair(0x3173,"HANGUL LETTER PIEUP-TIKEUT"));
        data.insert(std::make_pair(0x3174,"HANGUL LETTER PIEUP-SIOS-KIYEOK"));
        data.insert(std::make_pair(0x3175,"HANGUL LETTER PIEUP-SIOS-TIKEUT"));
        data.insert(std::make_pair(0x3176,"HANGUL LETTER PIEUP-CIEUC"));
        data.insert(std::make_pair(0x3177,"HANGUL LETTER PIEUP-THIEUTH"));
        data.insert(std::make_pair(0x3178,"HANGUL LETTER KAPYEOUNPIEUP"));
        data.insert(std::make_pair(0x3179,"HANGUL LETTER KAPYEOUNSSANGPIEUP"));
        data.insert(std::make_pair(0x317a,"HANGUL LETTER SIOS-KIYEOK"));
        data.insert(std::make_pair(0x317b,"HANGUL LETTER SIOS-NIEUN"));
        data.insert(std::make_pair(0x317c,"HANGUL LETTER SIOS-TIKEUT"));
        data.insert(std::make_pair(0x317d,"HANGUL LETTER SIOS-PIEUP"));
        data.insert(std::make_pair(0x317e,"HANGUL LETTER SIOS-CIEUC"));
        data.insert(std::make_pair(0x317f,"HANGUL LETTER PANSIOS"));
        data.insert(std::make_pair(0x3180,"HANGUL LETTER SSANGIEUNG"));
        data.insert(std::make_pair(0x3181,"HANGUL LETTER YESIEUNG"));
        data.insert(std::make_pair(0x3182,"HANGUL LETTER YESIEUNG-SIOS"));
        data.insert(std::make_pair(0x3183,"HANGUL LETTER YESIEUNG-PANSIOS"));
        data.insert(std::make_pair(0x3184,"HANGUL LETTER KAPYEOUNPHIEUPH"));
        data.insert(std::make_pair(0x3185,"HANGUL LETTER SSANGHIEUH"));
        data.insert(std::make_pair(0x3186,"HANGUL LETTER YEORINHIEUH"));
        data.insert(std::make_pair(0x3187,"HANGUL LETTER YO-YA"));
        data.insert(std::make_pair(0x3188,"HANGUL LETTER YO-YAE"));
        data.insert(std::make_pair(0x3189,"HANGUL LETTER YO-I"));
        data.insert(std::make_pair(0x318a,"HANGUL LETTER YU-YEO"));
        data.insert(std::make_pair(0x318b,"HANGUL LETTER YU-YE"));
        data.insert(std::make_pair(0x318c,"HANGUL LETTER YU-I"));
        data.insert(std::make_pair(0x318d,"HANGUL LETTER ARAEA"));
        data.insert(std::make_pair(0x318e,"HANGUL LETTER ARAEAE"));
        data.insert(std::make_pair(0x3190,"IDEOGRAPHIC ANNOTATION LINKING MARK"));
        data.insert(std::make_pair(0x3191,"IDEOGRAPHIC ANNOTATION REVERSE MARK"));
        data.insert(std::make_pair(0x3192,"IDEOGRAPHIC ANNOTATION ONE MARK"));
        data.insert(std::make_pair(0x3193,"IDEOGRAPHIC ANNOTATION TWO MARK"));
        data.insert(std::make_pair(0x3194,"IDEOGRAPHIC ANNOTATION THREE MARK"));
        data.insert(std::make_pair(0x3195,"IDEOGRAPHIC ANNOTATION FOUR MARK"));
        data.insert(std::make_pair(0x3196,"IDEOGRAPHIC ANNOTATION TOP MARK"));
        data.insert(std::make_pair(0x3197,"IDEOGRAPHIC ANNOTATION MIDDLE MARK"));
        data.insert(std::make_pair(0x3198,"IDEOGRAPHIC ANNOTATION BOTTOM MARK"));
        data.insert(std::make_pair(0x3199,"IDEOGRAPHIC ANNOTATION FIRST MARK"));
        data.insert(std::make_pair(0x319a,"IDEOGRAPHIC ANNOTATION SECOND MARK"));
        data.insert(std::make_pair(0x319b,"IDEOGRAPHIC ANNOTATION THIRD MARK"));
        data.insert(std::make_pair(0x319c,"IDEOGRAPHIC ANNOTATION FOURTH MARK"));
        data.insert(std::make_pair(0x319d,"IDEOGRAPHIC ANNOTATION HEAVEN MARK"));
        data.insert(std::make_pair(0x319e,"IDEOGRAPHIC ANNOTATION EARTH MARK"));
        data.insert(std::make_pair(0x319f,"IDEOGRAPHIC ANNOTATION MAN MARK"));
        data.insert(std::make_pair(0x31a0,"BOPOMOFO LETTER BU"));
        data.insert(std::make_pair(0x31a1,"BOPOMOFO LETTER ZI"));
        data.insert(std::make_pair(0x31a2,"BOPOMOFO LETTER JI"));
        data.insert(std::make_pair(0x31a3,"BOPOMOFO LETTER GU"));
        data.insert(std::make_pair(0x31a4,"BOPOMOFO LETTER EE"));
        data.insert(std::make_pair(0x31a5,"BOPOMOFO LETTER ENN"));
        data.insert(std::make_pair(0x31a6,"BOPOMOFO LETTER OO"));
        data.insert(std::make_pair(0x31a7,"BOPOMOFO LETTER ONN"));
        data.insert(std::make_pair(0x31a8,"BOPOMOFO LETTER IR"));
        data.insert(std::make_pair(0x31a9,"BOPOMOFO LETTER ANN"));
        data.insert(std::make_pair(0x31aa,"BOPOMOFO LETTER INN"));
        data.insert(std::make_pair(0x31ab,"BOPOMOFO LETTER UNN"));
        data.insert(std::make_pair(0x31ac,"BOPOMOFO LETTER IM"));
        data.insert(std::make_pair(0x31ad,"BOPOMOFO LETTER NGG"));
        data.insert(std::make_pair(0x31ae,"BOPOMOFO LETTER AINN"));
        data.insert(std::make_pair(0x31af,"BOPOMOFO LETTER AUNN"));
        data.insert(std::make_pair(0x31b0,"BOPOMOFO LETTER AM"));
        data.insert(std::make_pair(0x31b1,"BOPOMOFO LETTER OM"));
        data.insert(std::make_pair(0x31b2,"BOPOMOFO LETTER ONG"));
        data.insert(std::make_pair(0x31b3,"BOPOMOFO LETTER INNN"));
        data.insert(std::make_pair(0x31b4,"BOPOMOFO FINAL LETTER P"));
        data.insert(std::make_pair(0x31b5,"BOPOMOFO FINAL LETTER T"));
        data.insert(std::make_pair(0x31b6,"BOPOMOFO FINAL LETTER K"));
        data.insert(std::make_pair(0x31b7,"BOPOMOFO FINAL LETTER H"));
        data.insert(std::make_pair(0x31b8,"BOPOMOFO LETTER GH"));
        data.insert(std::make_pair(0x31b9,"BOPOMOFO LETTER LH"));
        data.insert(std::make_pair(0x31ba,"BOPOMOFO LETTER ZY"));
        data.insert(std::make_pair(0x31bb,"BOPOMOFO FINAL LETTER G"));
        data.insert(std::make_pair(0x31bc,"BOPOMOFO LETTER GW"));
        data.insert(std::make_pair(0x31bd,"BOPOMOFO LETTER KW"));
        data.insert(std::make_pair(0x31be,"BOPOMOFO LETTER OE"));
        data.insert(std::make_pair(0x31bf,"BOPOMOFO LETTER AH"));
        data.insert(std::make_pair(0x31c0,"CJK STROKE T"));
        data.insert(std::make_pair(0x31c1,"CJK STROKE WG"));
        data.insert(std::make_pair(0x31c2,"CJK STROKE XG"));
        data.insert(std::make_pair(0x31c3,"CJK STROKE BXG"));
        data.insert(std::make_pair(0x31c4,"CJK STROKE SW"));
        data.insert(std::make_pair(0x31c5,"CJK STROKE HZZ"));
        data.insert(std::make_pair(0x31c6,"CJK STROKE HZG"));
        data.insert(std::make_pair(0x31c7,"CJK STROKE HP"));
        data.insert(std::make_pair(0x31c8,"CJK STROKE HZWG"));
        data.insert(std::make_pair(0x31c9,"CJK STROKE SZWG"));
        data.insert(std::make_pair(0x31ca,"CJK STROKE HZT"));
        data.insert(std::make_pair(0x31cb,"CJK STROKE HZZP"));
        data.insert(std::make_pair(0x31cc,"CJK STROKE HPWG"));
        data.insert(std::make_pair(0x31cd,"CJK STROKE HZW"));
        data.insert(std::make_pair(0x31ce,"CJK STROKE HZZZ"));
        data.insert(std::make_pair(0x31cf,"CJK STROKE N"));
        data.insert(std::make_pair(0x31d0,"CJK STROKE H"));
        data.insert(std::make_pair(0x31d1,"CJK STROKE S"));
        data.insert(std::make_pair(0x31d2,"CJK STROKE P"));
        data.insert(std::make_pair(0x31d3,"CJK STROKE SP"));
        data.insert(std::make_pair(0x31d4,"CJK STROKE D"));
        data.insert(std::make_pair(0x31d5,"CJK STROKE HZ"));
        data.insert(std::make_pair(0x31d6,"CJK STROKE HG"));
        data.insert(std::make_pair(0x31d7,"CJK STROKE SZ"));
        data.insert(std::make_pair(0x31d8,"CJK STROKE SWZ"));
        data.insert(std::make_pair(0x31d9,"CJK STROKE ST"));
        data.insert(std::make_pair(0x31da,"CJK STROKE SG"));
        data.insert(std::make_pair(0x31db,"CJK STROKE PD"));
        data.insert(std::make_pair(0x31dc,"CJK STROKE PZ"));
        data.insert(std::make_pair(0x31dd,"CJK STROKE TN"));
        data.insert(std::make_pair(0x31de,"CJK STROKE SZZ"));
        data.insert(std::make_pair(0x31df,"CJK STROKE SWG"));
        data.insert(std::make_pair(0x31e0,"CJK STROKE HXWG"));
        data.insert(std::make_pair(0x31e1,"CJK STROKE HZZZG"));
        data.insert(std::make_pair(0x31e2,"CJK STROKE PG"));
        data.insert(std::make_pair(0x31e3,"CJK STROKE Q"));
        data.insert(std::make_pair(0x31f0,"KATAKANA LETTER SMALL KU"));
        data.insert(std::make_pair(0x31f1,"KATAKANA LETTER SMALL SI"));
        data.insert(std::make_pair(0x31f2,"KATAKANA LETTER SMALL SU"));
        data.insert(std::make_pair(0x31f3,"KATAKANA LETTER SMALL TO"));
        data.insert(std::make_pair(0x31f4,"KATAKANA LETTER SMALL NU"));
        data.insert(std::make_pair(0x31f5,"KATAKANA LETTER SMALL HA"));
        data.insert(std::make_pair(0x31f6,"KATAKANA LETTER SMALL HI"));
        data.insert(std::make_pair(0x31f7,"KATAKANA LETTER SMALL HU"));
        data.insert(std::make_pair(0x31f8,"KATAKANA LETTER SMALL HE"));
        data.insert(std::make_pair(0x31f9,"KATAKANA LETTER SMALL HO"));
        data.insert(std::make_pair(0x31fa,"KATAKANA LETTER SMALL MU"));
        data.insert(std::make_pair(0x31fb,"KATAKANA LETTER SMALL RA"));
        data.insert(std::make_pair(0x31fc,"KATAKANA LETTER SMALL RI"));
        data.insert(std::make_pair(0x31fd,"KATAKANA LETTER SMALL RU"));
        data.insert(std::make_pair(0x31fe,"KATAKANA LETTER SMALL RE"));
        data.insert(std::make_pair(0x31ff,"KATAKANA LETTER SMALL RO"));
        data.insert(std::make_pair(0x3200,"PARENTHESIZED HANGUL KIYEOK"));
        data.insert(std::make_pair(0x3201,"PARENTHESIZED HANGUL NIEUN"));
        data.insert(std::make_pair(0x3202,"PARENTHESIZED HANGUL TIKEUT"));
        data.insert(std::make_pair(0x3203,"PARENTHESIZED HANGUL RIEUL"));
        data.insert(std::make_pair(0x3204,"PARENTHESIZED HANGUL MIEUM"));
        data.insert(std::make_pair(0x3205,"PARENTHESIZED HANGUL PIEUP"));
        data.insert(std::make_pair(0x3206,"PARENTHESIZED HANGUL SIOS"));
        data.insert(std::make_pair(0x3207,"PARENTHESIZED HANGUL IEUNG"));
        data.insert(std::make_pair(0x3208,"PARENTHESIZED HANGUL CIEUC"));
        data.insert(std::make_pair(0x3209,"PARENTHESIZED HANGUL CHIEUCH"));
        data.insert(std::make_pair(0x320a,"PARENTHESIZED HANGUL KHIEUKH"));
        data.insert(std::make_pair(0x320b,"PARENTHESIZED HANGUL THIEUTH"));
        data.insert(std::make_pair(0x320c,"PARENTHESIZED HANGUL PHIEUPH"));
        data.insert(std::make_pair(0x320d,"PARENTHESIZED HANGUL HIEUH"));
        data.insert(std::make_pair(0x320e,"PARENTHESIZED HANGUL KIYEOK A"));
        data.insert(std::make_pair(0x320f,"PARENTHESIZED HANGUL NIEUN A"));
        data.insert(std::make_pair(0x3210,"PARENTHESIZED HANGUL TIKEUT A"));
        data.insert(std::make_pair(0x3211,"PARENTHESIZED HANGUL RIEUL A"));
        data.insert(std::make_pair(0x3212,"PARENTHESIZED HANGUL MIEUM A"));
        data.insert(std::make_pair(0x3213,"PARENTHESIZED HANGUL PIEUP A"));
        data.insert(std::make_pair(0x3214,"PARENTHESIZED HANGUL SIOS A"));
        data.insert(std::make_pair(0x3215,"PARENTHESIZED HANGUL IEUNG A"));
        data.insert(std::make_pair(0x3216,"PARENTHESIZED HANGUL CIEUC A"));
        data.insert(std::make_pair(0x3217,"PARENTHESIZED HANGUL CHIEUCH A"));
        data.insert(std::make_pair(0x3218,"PARENTHESIZED HANGUL KHIEUKH A"));
        data.insert(std::make_pair(0x3219,"PARENTHESIZED HANGUL THIEUTH A"));
        data.insert(std::make_pair(0x321a,"PARENTHESIZED HANGUL PHIEUPH A"));
        data.insert(std::make_pair(0x321b,"PARENTHESIZED HANGUL HIEUH A"));
        data.insert(std::make_pair(0x321c,"PARENTHESIZED HANGUL CIEUC U"));
        data.insert(std::make_pair(0x321d,"PARENTHESIZED KOREAN CHARACTER OJEON"));
        data.insert(std::make_pair(0x321e,"PARENTHESIZED KOREAN CHARACTER O HU"));
        data.insert(std::make_pair(0x3220,"PARENTHESIZED IDEOGRAPH ONE"));
        data.insert(std::make_pair(0x3221,"PARENTHESIZED IDEOGRAPH TWO"));
        data.insert(std::make_pair(0x3222,"PARENTHESIZED IDEOGRAPH THREE"));
        data.insert(std::make_pair(0x3223,"PARENTHESIZED IDEOGRAPH FOUR"));
        data.insert(std::make_pair(0x3224,"PARENTHESIZED IDEOGRAPH FIVE"));
        data.insert(std::make_pair(0x3225,"PARENTHESIZED IDEOGRAPH SIX"));
        data.insert(std::make_pair(0x3226,"PARENTHESIZED IDEOGRAPH SEVEN"));
        data.insert(std::make_pair(0x3227,"PARENTHESIZED IDEOGRAPH EIGHT"));
        data.insert(std::make_pair(0x3228,"PARENTHESIZED IDEOGRAPH NINE"));
        data.insert(std::make_pair(0x3229,"PARENTHESIZED IDEOGRAPH TEN"));
        data.insert(std::make_pair(0x322a,"PARENTHESIZED IDEOGRAPH MOON"));
        data.insert(std::make_pair(0x322b,"PARENTHESIZED IDEOGRAPH FIRE"));
        data.insert(std::make_pair(0x322c,"PARENTHESIZED IDEOGRAPH WATER"));
        data.insert(std::make_pair(0x322d,"PARENTHESIZED IDEOGRAPH WOOD"));
        data.insert(std::make_pair(0x322e,"PARENTHESIZED IDEOGRAPH METAL"));
        data.insert(std::make_pair(0x322f,"PARENTHESIZED IDEOGRAPH EARTH"));
        data.insert(std::make_pair(0x3230,"PARENTHESIZED IDEOGRAPH SUN"));
        data.insert(std::make_pair(0x3231,"PARENTHESIZED IDEOGRAPH STOCK"));
        data.insert(std::make_pair(0x3232,"PARENTHESIZED IDEOGRAPH HAVE"));
        data.insert(std::make_pair(0x3233,"PARENTHESIZED IDEOGRAPH SOCIETY"));
        data.insert(std::make_pair(0x3234,"PARENTHESIZED IDEOGRAPH NAME"));
        data.insert(std::make_pair(0x3235,"PARENTHESIZED IDEOGRAPH SPECIAL"));
        data.insert(std::make_pair(0x3236,"PARENTHESIZED IDEOGRAPH FINANCIAL"));
        data.insert(std::make_pair(0x3237,"PARENTHESIZED IDEOGRAPH CONGRATULATION"));
        data.insert(std::make_pair(0x3238,"PARENTHESIZED IDEOGRAPH LABOR"));
        data.insert(std::make_pair(0x3239,"PARENTHESIZED IDEOGRAPH REPRESENT"));
        data.insert(std::make_pair(0x323a,"PARENTHESIZED IDEOGRAPH CALL"));
        data.insert(std::make_pair(0x323b,"PARENTHESIZED IDEOGRAPH STUDY"));
        data.insert(std::make_pair(0x323c,"PARENTHESIZED IDEOGRAPH SUPERVISE"));
        data.insert(std::make_pair(0x323d,"PARENTHESIZED IDEOGRAPH ENTERPRISE"));
        data.insert(std::make_pair(0x323e,"PARENTHESIZED IDEOGRAPH RESOURCE"));
        data.insert(std::make_pair(0x323f,"PARENTHESIZED IDEOGRAPH ALLIANCE"));
        data.insert(std::make_pair(0x3240,"PARENTHESIZED IDEOGRAPH FESTIVAL"));
        data.insert(std::make_pair(0x3241,"PARENTHESIZED IDEOGRAPH REST"));
        data.insert(std::make_pair(0x3242,"PARENTHESIZED IDEOGRAPH SELF"));
        data.insert(std::make_pair(0x3243,"PARENTHESIZED IDEOGRAPH REACH"));
        data.insert(std::make_pair(0x3244,"CIRCLED IDEOGRAPH QUESTION"));
        data.insert(std::make_pair(0x3245,"CIRCLED IDEOGRAPH KINDERGARTEN"));
        data.insert(std::make_pair(0x3246,"CIRCLED IDEOGRAPH SCHOOL"));
        data.insert(std::make_pair(0x3247,"CIRCLED IDEOGRAPH KOTO"));
        data.insert(std::make_pair(0x3248,"CIRCLED NUMBER TEN ON BLACK SQUARE"));
        data.insert(std::make_pair(0x3249,"CIRCLED NUMBER TWENTY ON BLACK SQUARE"));
        data.insert(std::make_pair(0x324a,"CIRCLED NUMBER THIRTY ON BLACK SQUARE"));
        data.insert(std::make_pair(0x324b,"CIRCLED NUMBER FORTY ON BLACK SQUARE"));
        data.insert(std::make_pair(0x324c,"CIRCLED NUMBER FIFTY ON BLACK SQUARE"));
        data.insert(std::make_pair(0x324d,"CIRCLED NUMBER SIXTY ON BLACK SQUARE"));
        data.insert(std::make_pair(0x324e,"CIRCLED NUMBER SEVENTY ON BLACK SQUARE"));
        data.insert(std::make_pair(0x324f,"CIRCLED NUMBER EIGHTY ON BLACK SQUARE"));
        data.insert(std::make_pair(0x3250,"PARTNERSHIP SIGN"));
        data.insert(std::make_pair(0x3251,"CIRCLED NUMBER TWENTY ONE"));
        data.insert(std::make_pair(0x3252,"CIRCLED NUMBER TWENTY TWO"));
        data.insert(std::make_pair(0x3253,"CIRCLED NUMBER TWENTY THREE"));
        data.insert(std::make_pair(0x3254,"CIRCLED NUMBER TWENTY FOUR"));
        data.insert(std::make_pair(0x3255,"CIRCLED NUMBER TWENTY FIVE"));
        data.insert(std::make_pair(0x3256,"CIRCLED NUMBER TWENTY SIX"));
        data.insert(std::make_pair(0x3257,"CIRCLED NUMBER TWENTY SEVEN"));
        data.insert(std::make_pair(0x3258,"CIRCLED NUMBER TWENTY EIGHT"));
        data.insert(std::make_pair(0x3259,"CIRCLED NUMBER TWENTY NINE"));
        data.insert(std::make_pair(0x325a,"CIRCLED NUMBER THIRTY"));
        data.insert(std::make_pair(0x325b,"CIRCLED NUMBER THIRTY ONE"));
        data.insert(std::make_pair(0x325c,"CIRCLED NUMBER THIRTY TWO"));
        data.insert(std::make_pair(0x325d,"CIRCLED NUMBER THIRTY THREE"));
        data.insert(std::make_pair(0x325e,"CIRCLED NUMBER THIRTY FOUR"));
        data.insert(std::make_pair(0x325f,"CIRCLED NUMBER THIRTY FIVE"));
        data.insert(std::make_pair(0x3260,"CIRCLED HANGUL KIYEOK"));
        data.insert(std::make_pair(0x3261,"CIRCLED HANGUL NIEUN"));
        data.insert(std::make_pair(0x3262,"CIRCLED HANGUL TIKEUT"));
        data.insert(std::make_pair(0x3263,"CIRCLED HANGUL RIEUL"));
        data.insert(std::make_pair(0x3264,"CIRCLED HANGUL MIEUM"));
        data.insert(std::make_pair(0x3265,"CIRCLED HANGUL PIEUP"));
        data.insert(std::make_pair(0x3266,"CIRCLED HANGUL SIOS"));
        data.insert(std::make_pair(0x3267,"CIRCLED HANGUL IEUNG"));
        data.insert(std::make_pair(0x3268,"CIRCLED HANGUL CIEUC"));
        data.insert(std::make_pair(0x3269,"CIRCLED HANGUL CHIEUCH"));
        data.insert(std::make_pair(0x326a,"CIRCLED HANGUL KHIEUKH"));
        data.insert(std::make_pair(0x326b,"CIRCLED HANGUL THIEUTH"));
        data.insert(std::make_pair(0x326c,"CIRCLED HANGUL PHIEUPH"));
        data.insert(std::make_pair(0x326d,"CIRCLED HANGUL HIEUH"));
        data.insert(std::make_pair(0x326e,"CIRCLED HANGUL KIYEOK A"));
        data.insert(std::make_pair(0x326f,"CIRCLED HANGUL NIEUN A"));
        data.insert(std::make_pair(0x3270,"CIRCLED HANGUL TIKEUT A"));
        data.insert(std::make_pair(0x3271,"CIRCLED HANGUL RIEUL A"));
        data.insert(std::make_pair(0x3272,"CIRCLED HANGUL MIEUM A"));
        data.insert(std::make_pair(0x3273,"CIRCLED HANGUL PIEUP A"));
        data.insert(std::make_pair(0x3274,"CIRCLED HANGUL SIOS A"));
        data.insert(std::make_pair(0x3275,"CIRCLED HANGUL IEUNG A"));
        data.insert(std::make_pair(0x3276,"CIRCLED HANGUL CIEUC A"));
        data.insert(std::make_pair(0x3277,"CIRCLED HANGUL CHIEUCH A"));
        data.insert(std::make_pair(0x3278,"CIRCLED HANGUL KHIEUKH A"));
        data.insert(std::make_pair(0x3279,"CIRCLED HANGUL THIEUTH A"));
        data.insert(std::make_pair(0x327a,"CIRCLED HANGUL PHIEUPH A"));
        data.insert(std::make_pair(0x327b,"CIRCLED HANGUL HIEUH A"));
        data.insert(std::make_pair(0x327c,"CIRCLED KOREAN CHARACTER CHAMKO"));
        data.insert(std::make_pair(0x327d,"CIRCLED KOREAN CHARACTER JUEUI"));
        data.insert(std::make_pair(0x327e,"CIRCLED HANGUL IEUNG U"));
        data.insert(std::make_pair(0x327f,"KOREAN STANDARD SYMBOL"));
        data.insert(std::make_pair(0x3280,"CIRCLED IDEOGRAPH ONE"));
        data.insert(std::make_pair(0x3281,"CIRCLED IDEOGRAPH TWO"));
        data.insert(std::make_pair(0x3282,"CIRCLED IDEOGRAPH THREE"));
        data.insert(std::make_pair(0x3283,"CIRCLED IDEOGRAPH FOUR"));
        data.insert(std::make_pair(0x3284,"CIRCLED IDEOGRAPH FIVE"));
        data.insert(std::make_pair(0x3285,"CIRCLED IDEOGRAPH SIX"));
        data.insert(std::make_pair(0x3286,"CIRCLED IDEOGRAPH SEVEN"));
        data.insert(std::make_pair(0x3287,"CIRCLED IDEOGRAPH EIGHT"));
        data.insert(std::make_pair(0x3288,"CIRCLED IDEOGRAPH NINE"));
        data.insert(std::make_pair(0x3289,"CIRCLED IDEOGRAPH TEN"));
        data.insert(std::make_pair(0x328a,"CIRCLED IDEOGRAPH MOON"));
        data.insert(std::make_pair(0x328b,"CIRCLED IDEOGRAPH FIRE"));
        data.insert(std::make_pair(0x328c,"CIRCLED IDEOGRAPH WATER"));
        data.insert(std::make_pair(0x328d,"CIRCLED IDEOGRAPH WOOD"));
        data.insert(std::make_pair(0x328e,"CIRCLED IDEOGRAPH METAL"));
        data.insert(std::make_pair(0x328f,"CIRCLED IDEOGRAPH EARTH"));
        data.insert(std::make_pair(0x3290,"CIRCLED IDEOGRAPH SUN"));
        data.insert(std::make_pair(0x3291,"CIRCLED IDEOGRAPH STOCK"));
        data.insert(std::make_pair(0x3292,"CIRCLED IDEOGRAPH HAVE"));
        data.insert(std::make_pair(0x3293,"CIRCLED IDEOGRAPH SOCIETY"));
        data.insert(std::make_pair(0x3294,"CIRCLED IDEOGRAPH NAME"));
        data.insert(std::make_pair(0x3295,"CIRCLED IDEOGRAPH SPECIAL"));
        data.insert(std::make_pair(0x3296,"CIRCLED IDEOGRAPH FINANCIAL"));
        data.insert(std::make_pair(0x3297,"CIRCLED IDEOGRAPH CONGRATULATION"));
        data.insert(std::make_pair(0x3298,"CIRCLED IDEOGRAPH LABOR"));
        data.insert(std::make_pair(0x3299,"CIRCLED IDEOGRAPH SECRET"));
        data.insert(std::make_pair(0x329a,"CIRCLED IDEOGRAPH MALE"));
        data.insert(std::make_pair(0x329b,"CIRCLED IDEOGRAPH FEMALE"));
        data.insert(std::make_pair(0x329c,"CIRCLED IDEOGRAPH SUITABLE"));
        data.insert(std::make_pair(0x329d,"CIRCLED IDEOGRAPH EXCELLENT"));
        data.insert(std::make_pair(0x329e,"CIRCLED IDEOGRAPH PRINT"));
        data.insert(std::make_pair(0x329f,"CIRCLED IDEOGRAPH ATTENTION"));
        data.insert(std::make_pair(0x32a0,"CIRCLED IDEOGRAPH ITEM"));
        data.insert(std::make_pair(0x32a1,"CIRCLED IDEOGRAPH REST"));
        data.insert(std::make_pair(0x32a2,"CIRCLED IDEOGRAPH COPY"));
        data.insert(std::make_pair(0x32a3,"CIRCLED IDEOGRAPH CORRECT"));
        data.insert(std::make_pair(0x32a4,"CIRCLED IDEOGRAPH HIGH"));
        data.insert(std::make_pair(0x32a5,"CIRCLED IDEOGRAPH CENTRE"));
        data.insert(std::make_pair(0x32a6,"CIRCLED IDEOGRAPH LOW"));
        data.insert(std::make_pair(0x32a7,"CIRCLED IDEOGRAPH LEFT"));
        data.insert(std::make_pair(0x32a8,"CIRCLED IDEOGRAPH RIGHT"));
        data.insert(std::make_pair(0x32a9,"CIRCLED IDEOGRAPH MEDICINE"));
        data.insert(std::make_pair(0x32aa,"CIRCLED IDEOGRAPH RELIGION"));
        data.insert(std::make_pair(0x32ab,"CIRCLED IDEOGRAPH STUDY"));
        data.insert(std::make_pair(0x32ac,"CIRCLED IDEOGRAPH SUPERVISE"));
        data.insert(std::make_pair(0x32ad,"CIRCLED IDEOGRAPH ENTERPRISE"));
        data.insert(std::make_pair(0x32ae,"CIRCLED IDEOGRAPH RESOURCE"));
        data.insert(std::make_pair(0x32af,"CIRCLED IDEOGRAPH ALLIANCE"));
        data.insert(std::make_pair(0x32b0,"CIRCLED IDEOGRAPH NIGHT"));
        data.insert(std::make_pair(0x32b1,"CIRCLED NUMBER THIRTY SIX"));
        data.insert(std::make_pair(0x32b2,"CIRCLED NUMBER THIRTY SEVEN"));
        data.insert(std::make_pair(0x32b3,"CIRCLED NUMBER THIRTY EIGHT"));
        data.insert(std::make_pair(0x32b4,"CIRCLED NUMBER THIRTY NINE"));
        data.insert(std::make_pair(0x32b5,"CIRCLED NUMBER FORTY"));
        data.insert(std::make_pair(0x32b6,"CIRCLED NUMBER FORTY ONE"));
        data.insert(std::make_pair(0x32b7,"CIRCLED NUMBER FORTY TWO"));
        data.insert(std::make_pair(0x32b8,"CIRCLED NUMBER FORTY THREE"));
        data.insert(std::make_pair(0x32b9,"CIRCLED NUMBER FORTY FOUR"));
        data.insert(std::make_pair(0x32ba,"CIRCLED NUMBER FORTY FIVE"));
        data.insert(std::make_pair(0x32bb,"CIRCLED NUMBER FORTY SIX"));
        data.insert(std::make_pair(0x32bc,"CIRCLED NUMBER FORTY SEVEN"));
        data.insert(std::make_pair(0x32bd,"CIRCLED NUMBER FORTY EIGHT"));
        data.insert(std::make_pair(0x32be,"CIRCLED NUMBER FORTY NINE"));
        data.insert(std::make_pair(0x32bf,"CIRCLED NUMBER FIFTY"));
        data.insert(std::make_pair(0x32c0,"IDEOGRAPHIC TELEGRAPH SYMBOL FOR JANUARY"));
        data.insert(std::make_pair(0x32c1,"IDEOGRAPHIC TELEGRAPH SYMBOL FOR FEBRUARY"));
        data.insert(std::make_pair(0x32c2,"IDEOGRAPHIC TELEGRAPH SYMBOL FOR MARCH"));
        data.insert(std::make_pair(0x32c3,"IDEOGRAPHIC TELEGRAPH SYMBOL FOR APRIL"));
        data.insert(std::make_pair(0x32c4,"IDEOGRAPHIC TELEGRAPH SYMBOL FOR MAY"));
        data.insert(std::make_pair(0x32c5,"IDEOGRAPHIC TELEGRAPH SYMBOL FOR JUNE"));
        data.insert(std::make_pair(0x32c6,"IDEOGRAPHIC TELEGRAPH SYMBOL FOR JULY"));
        data.insert(std::make_pair(0x32c7,"IDEOGRAPHIC TELEGRAPH SYMBOL FOR AUGUST"));
        data.insert(std::make_pair(0x32c8,"IDEOGRAPHIC TELEGRAPH SYMBOL FOR SEPTEMBER"));
        data.insert(std::make_pair(0x32c9,"IDEOGRAPHIC TELEGRAPH SYMBOL FOR OCTOBER"));
        data.insert(std::make_pair(0x32ca,"IDEOGRAPHIC TELEGRAPH SYMBOL FOR NOVEMBER"));
        data.insert(std::make_pair(0x32cb,"IDEOGRAPHIC TELEGRAPH SYMBOL FOR DECEMBER"));
        data.insert(std::make_pair(0x32cc,"SQUARE HG"));
        data.insert(std::make_pair(0x32cd,"SQUARE ERG"));
        data.insert(std::make_pair(0x32ce,"SQUARE EV"));
        data.insert(std::make_pair(0x32cf,"LIMITED LIABILITY SIGN"));
        data.insert(std::make_pair(0x32d0,"CIRCLED KATAKANA A"));
        data.insert(std::make_pair(0x32d1,"CIRCLED KATAKANA I"));
        data.insert(std::make_pair(0x32d2,"CIRCLED KATAKANA U"));
        data.insert(std::make_pair(0x32d3,"CIRCLED KATAKANA E"));
        data.insert(std::make_pair(0x32d4,"CIRCLED KATAKANA O"));
        data.insert(std::make_pair(0x32d5,"CIRCLED KATAKANA KA"));
        data.insert(std::make_pair(0x32d6,"CIRCLED KATAKANA KI"));
        data.insert(std::make_pair(0x32d7,"CIRCLED KATAKANA KU"));
        data.insert(std::make_pair(0x32d8,"CIRCLED KATAKANA KE"));
        data.insert(std::make_pair(0x32d9,"CIRCLED KATAKANA KO"));
        data.insert(std::make_pair(0x32da,"CIRCLED KATAKANA SA"));
        data.insert(std::make_pair(0x32db,"CIRCLED KATAKANA SI"));
        data.insert(std::make_pair(0x32dc,"CIRCLED KATAKANA SU"));
        data.insert(std::make_pair(0x32dd,"CIRCLED KATAKANA SE"));
        data.insert(std::make_pair(0x32de,"CIRCLED KATAKANA SO"));
        data.insert(std::make_pair(0x32df,"CIRCLED KATAKANA TA"));
        data.insert(std::make_pair(0x32e0,"CIRCLED KATAKANA TI"));
        data.insert(std::make_pair(0x32e1,"CIRCLED KATAKANA TU"));
        data.insert(std::make_pair(0x32e2,"CIRCLED KATAKANA TE"));
        data.insert(std::make_pair(0x32e3,"CIRCLED KATAKANA TO"));
        data.insert(std::make_pair(0x32e4,"CIRCLED KATAKANA NA"));
        data.insert(std::make_pair(0x32e5,"CIRCLED KATAKANA NI"));
        data.insert(std::make_pair(0x32e6,"CIRCLED KATAKANA NU"));
        data.insert(std::make_pair(0x32e7,"CIRCLED KATAKANA NE"));
        data.insert(std::make_pair(0x32e8,"CIRCLED KATAKANA NO"));
        data.insert(std::make_pair(0x32e9,"CIRCLED KATAKANA HA"));
        data.insert(std::make_pair(0x32ea,"CIRCLED KATAKANA HI"));
        data.insert(std::make_pair(0x32eb,"CIRCLED KATAKANA HU"));
        data.insert(std::make_pair(0x32ec,"CIRCLED KATAKANA HE"));
        data.insert(std::make_pair(0x32ed,"CIRCLED KATAKANA HO"));
        data.insert(std::make_pair(0x32ee,"CIRCLED KATAKANA MA"));
        data.insert(std::make_pair(0x32ef,"CIRCLED KATAKANA MI"));
        data.insert(std::make_pair(0x32f0,"CIRCLED KATAKANA MU"));
        data.insert(std::make_pair(0x32f1,"CIRCLED KATAKANA ME"));
        data.insert(std::make_pair(0x32f2,"CIRCLED KATAKANA MO"));
        data.insert(std::make_pair(0x32f3,"CIRCLED KATAKANA YA"));
        data.insert(std::make_pair(0x32f4,"CIRCLED KATAKANA YU"));
        data.insert(std::make_pair(0x32f5,"CIRCLED KATAKANA YO"));
        data.insert(std::make_pair(0x32f6,"CIRCLED KATAKANA RA"));
        data.insert(std::make_pair(0x32f7,"CIRCLED KATAKANA RI"));
        data.insert(std::make_pair(0x32f8,"CIRCLED KATAKANA RU"));
        data.insert(std::make_pair(0x32f9,"CIRCLED KATAKANA RE"));
        data.insert(std::make_pair(0x32fa,"CIRCLED KATAKANA RO"));
        data.insert(std::make_pair(0x32fb,"CIRCLED KATAKANA WA"));
        data.insert(std::make_pair(0x32fc,"CIRCLED KATAKANA WI"));
        data.insert(std::make_pair(0x32fd,"CIRCLED KATAKANA WE"));
        data.insert(std::make_pair(0x32fe,"CIRCLED KATAKANA WO"));
        data.insert(std::make_pair(0x32ff,"SQUARE ERA NAME REIWA"));
        data.insert(std::make_pair(0x3300,"SQUARE APAATO"));
        data.insert(std::make_pair(0x3301,"SQUARE ARUHUA"));
        data.insert(std::make_pair(0x3302,"SQUARE ANPEA"));
        data.insert(std::make_pair(0x3303,"SQUARE AARU"));
        data.insert(std::make_pair(0x3304,"SQUARE ININGU"));
        data.insert(std::make_pair(0x3305,"SQUARE INTI"));
        data.insert(std::make_pair(0x3306,"SQUARE UON"));
        data.insert(std::make_pair(0x3307,"SQUARE ESUKUUDO"));
        data.insert(std::make_pair(0x3308,"SQUARE EEKAA"));
        data.insert(std::make_pair(0x3309,"SQUARE ONSU"));
        data.insert(std::make_pair(0x330a,"SQUARE OOMU"));
        data.insert(std::make_pair(0x330b,"SQUARE KAIRI"));
        data.insert(std::make_pair(0x330c,"SQUARE KARATTO"));
        data.insert(std::make_pair(0x330d,"SQUARE KARORII"));
        data.insert(std::make_pair(0x330e,"SQUARE GARON"));
        data.insert(std::make_pair(0x330f,"SQUARE GANMA"));
        data.insert(std::make_pair(0x3310,"SQUARE GIGA"));
        data.insert(std::make_pair(0x3311,"SQUARE GINII"));
        data.insert(std::make_pair(0x3312,"SQUARE KYURII"));
        data.insert(std::make_pair(0x3313,"SQUARE GIRUDAA"));
        data.insert(std::make_pair(0x3314,"SQUARE KIRO"));
        data.insert(std::make_pair(0x3315,"SQUARE KIROGURAMU"));
        data.insert(std::make_pair(0x3316,"SQUARE KIROMEETORU"));
        data.insert(std::make_pair(0x3317,"SQUARE KIROWATTO"));
        data.insert(std::make_pair(0x3318,"SQUARE GURAMU"));
        data.insert(std::make_pair(0x3319,"SQUARE GURAMUTON"));
        data.insert(std::make_pair(0x331a,"SQUARE KURUZEIRO"));
        data.insert(std::make_pair(0x331b,"SQUARE KUROONE"));
        data.insert(std::make_pair(0x331c,"SQUARE KEESU"));
        data.insert(std::make_pair(0x331d,"SQUARE KORUNA"));
        data.insert(std::make_pair(0x331e,"SQUARE KOOPO"));
        data.insert(std::make_pair(0x331f,"SQUARE SAIKURU"));
        data.insert(std::make_pair(0x3320,"SQUARE SANTIIMU"));
        data.insert(std::make_pair(0x3321,"SQUARE SIRINGU"));
        data.insert(std::make_pair(0x3322,"SQUARE SENTI"));
        data.insert(std::make_pair(0x3323,"SQUARE SENTO"));
        data.insert(std::make_pair(0x3324,"SQUARE DAASU"));
        data.insert(std::make_pair(0x3325,"SQUARE DESI"));
        data.insert(std::make_pair(0x3326,"SQUARE DORU"));
        data.insert(std::make_pair(0x3327,"SQUARE TON"));
        data.insert(std::make_pair(0x3328,"SQUARE NANO"));
        data.insert(std::make_pair(0x3329,"SQUARE NOTTO"));
        data.insert(std::make_pair(0x332a,"SQUARE HAITU"));
        data.insert(std::make_pair(0x332b,"SQUARE PAASENTO"));
        data.insert(std::make_pair(0x332c,"SQUARE PAATU"));
        data.insert(std::make_pair(0x332d,"SQUARE BAARERU"));
        data.insert(std::make_pair(0x332e,"SQUARE PIASUTORU"));
        data.insert(std::make_pair(0x332f,"SQUARE PIKURU"));
        data.insert(std::make_pair(0x3330,"SQUARE PIKO"));
        data.insert(std::make_pair(0x3331,"SQUARE BIRU"));
        data.insert(std::make_pair(0x3332,"SQUARE HUARADDO"));
        data.insert(std::make_pair(0x3333,"SQUARE HUIITO"));
        data.insert(std::make_pair(0x3334,"SQUARE BUSSYERU"));
        data.insert(std::make_pair(0x3335,"SQUARE HURAN"));
        data.insert(std::make_pair(0x3336,"SQUARE HEKUTAARU"));
        data.insert(std::make_pair(0x3337,"SQUARE PESO"));
        data.insert(std::make_pair(0x3338,"SQUARE PENIHI"));
        data.insert(std::make_pair(0x3339,"SQUARE HERUTU"));
        data.insert(std::make_pair(0x333a,"SQUARE PENSU"));
        data.insert(std::make_pair(0x333b,"SQUARE PEEZI"));
        data.insert(std::make_pair(0x333c,"SQUARE BEETA"));
        data.insert(std::make_pair(0x333d,"SQUARE POINTO"));
        data.insert(std::make_pair(0x333e,"SQUARE BORUTO"));
        data.insert(std::make_pair(0x333f,"SQUARE HON"));
        data.insert(std::make_pair(0x3340,"SQUARE PONDO"));
        data.insert(std::make_pair(0x3341,"SQUARE HOORU"));
        data.insert(std::make_pair(0x3342,"SQUARE HOON"));
        data.insert(std::make_pair(0x3343,"SQUARE MAIKURO"));
        data.insert(std::make_pair(0x3344,"SQUARE MAIRU"));
        data.insert(std::make_pair(0x3345,"SQUARE MAHHA"));
        data.insert(std::make_pair(0x3346,"SQUARE MARUKU"));
        data.insert(std::make_pair(0x3347,"SQUARE MANSYON"));
        data.insert(std::make_pair(0x3348,"SQUARE MIKURON"));
        data.insert(std::make_pair(0x3349,"SQUARE MIRI"));
        data.insert(std::make_pair(0x334a,"SQUARE MIRIBAARU"));
        data.insert(std::make_pair(0x334b,"SQUARE MEGA"));
        data.insert(std::make_pair(0x334c,"SQUARE MEGATON"));
        data.insert(std::make_pair(0x334d,"SQUARE MEETORU"));
        data.insert(std::make_pair(0x334e,"SQUARE YAADO"));
        data.insert(std::make_pair(0x334f,"SQUARE YAARU"));
        data.insert(std::make_pair(0x3350,"SQUARE YUAN"));
        data.insert(std::make_pair(0x3351,"SQUARE RITTORU"));
        data.insert(std::make_pair(0x3352,"SQUARE RIRA"));
        data.insert(std::make_pair(0x3353,"SQUARE RUPII"));
        data.insert(std::make_pair(0x3354,"SQUARE RUUBURU"));
        data.insert(std::make_pair(0x3355,"SQUARE REMU"));
        data.insert(std::make_pair(0x3356,"SQUARE RENTOGEN"));
        data.insert(std::make_pair(0x3357,"SQUARE WATTO"));
        data.insert(std::make_pair(0x3358,"IDEOGRAPHIC TELEGRAPH SYMBOL FOR HOUR ZERO"));
        data.insert(std::make_pair(0x3359,"IDEOGRAPHIC TELEGRAPH SYMBOL FOR HOUR ONE"));
        data.insert(std::make_pair(0x335a,"IDEOGRAPHIC TELEGRAPH SYMBOL FOR HOUR TWO"));
        data.insert(std::make_pair(0x335b,"IDEOGRAPHIC TELEGRAPH SYMBOL FOR HOUR THREE"));
        data.insert(std::make_pair(0x335c,"IDEOGRAPHIC TELEGRAPH SYMBOL FOR HOUR FOUR"));
        data.insert(std::make_pair(0x335d,"IDEOGRAPHIC TELEGRAPH SYMBOL FOR HOUR FIVE"));
        data.insert(std::make_pair(0x335e,"IDEOGRAPHIC TELEGRAPH SYMBOL FOR HOUR SIX"));
        data.insert(std::make_pair(0x335f,"IDEOGRAPHIC TELEGRAPH SYMBOL FOR HOUR SEVEN"));
        data.insert(std::make_pair(0x3360,"IDEOGRAPHIC TELEGRAPH SYMBOL FOR HOUR EIGHT"));
        data.insert(std::make_pair(0x3361,"IDEOGRAPHIC TELEGRAPH SYMBOL FOR HOUR NINE"));
        data.insert(std::make_pair(0x3362,"IDEOGRAPHIC TELEGRAPH SYMBOL FOR HOUR TEN"));
        data.insert(std::make_pair(0x3363,"IDEOGRAPHIC TELEGRAPH SYMBOL FOR HOUR ELEVEN"));
        data.insert(std::make_pair(0x3364,"IDEOGRAPHIC TELEGRAPH SYMBOL FOR HOUR TWELVE"));
        data.insert(std::make_pair(0x3365,"IDEOGRAPHIC TELEGRAPH SYMBOL FOR HOUR THIRTEEN"));
        data.insert(std::make_pair(0x3366,"IDEOGRAPHIC TELEGRAPH SYMBOL FOR HOUR FOURTEEN"));
        data.insert(std::make_pair(0x3367,"IDEOGRAPHIC TELEGRAPH SYMBOL FOR HOUR FIFTEEN"));
        data.insert(std::make_pair(0x3368,"IDEOGRAPHIC TELEGRAPH SYMBOL FOR HOUR SIXTEEN"));
        data.insert(std::make_pair(0x3369,"IDEOGRAPHIC TELEGRAPH SYMBOL FOR HOUR SEVENTEEN"));
        data.insert(std::make_pair(0x336a,"IDEOGRAPHIC TELEGRAPH SYMBOL FOR HOUR EIGHTEEN"));
        data.insert(std::make_pair(0x336b,"IDEOGRAPHIC TELEGRAPH SYMBOL FOR HOUR NINETEEN"));
        data.insert(std::make_pair(0x336c,"IDEOGRAPHIC TELEGRAPH SYMBOL FOR HOUR TWENTY"));
        data.insert(std::make_pair(0x336d,"IDEOGRAPHIC TELEGRAPH SYMBOL FOR HOUR TWENTY-ONE"));
        data.insert(std::make_pair(0x336e,"IDEOGRAPHIC TELEGRAPH SYMBOL FOR HOUR TWENTY-TWO"));
        data.insert(std::make_pair(0x336f,"IDEOGRAPHIC TELEGRAPH SYMBOL FOR HOUR TWENTY-THREE"));
        data.insert(std::make_pair(0x3370,"IDEOGRAPHIC TELEGRAPH SYMBOL FOR HOUR TWENTY-FOUR"));
        data.insert(std::make_pair(0x3371,"SQUARE HPA"));
        data.insert(std::make_pair(0x3372,"SQUARE DA"));
        data.insert(std::make_pair(0x3373,"SQUARE AU"));
        data.insert(std::make_pair(0x3374,"SQUARE BAR"));
        data.insert(std::make_pair(0x3375,"SQUARE OV"));
        data.insert(std::make_pair(0x3376,"SQUARE PC"));
        data.insert(std::make_pair(0x3377,"SQUARE DM"));
        data.insert(std::make_pair(0x3378,"SQUARE DM SQUARED"));
        data.insert(std::make_pair(0x3379,"SQUARE DM CUBED"));
        data.insert(std::make_pair(0x337a,"SQUARE IU"));
        data.insert(std::make_pair(0x337b,"SQUARE ERA NAME HEISEI"));
        data.insert(std::make_pair(0x337c,"SQUARE ERA NAME SYOUWA"));
        data.insert(std::make_pair(0x337d,"SQUARE ERA NAME TAISYOU"));
        data.insert(std::make_pair(0x337e,"SQUARE ERA NAME MEIZI"));
        data.insert(std::make_pair(0x337f,"SQUARE CORPORATION"));
        data.insert(std::make_pair(0x3380,"SQUARE PA AMPS"));
        data.insert(std::make_pair(0x3381,"SQUARE NA"));
        data.insert(std::make_pair(0x3382,"SQUARE MU A"));
        data.insert(std::make_pair(0x3383,"SQUARE MA"));
        data.insert(std::make_pair(0x3384,"SQUARE KA"));
        data.insert(std::make_pair(0x3385,"SQUARE KB"));
        data.insert(std::make_pair(0x3386,"SQUARE MB"));
        data.insert(std::make_pair(0x3387,"SQUARE GB"));
        data.insert(std::make_pair(0x3388,"SQUARE CAL"));
        data.insert(std::make_pair(0x3389,"SQUARE KCAL"));
        data.insert(std::make_pair(0x338a,"SQUARE PF"));
        data.insert(std::make_pair(0x338b,"SQUARE NF"));
        data.insert(std::make_pair(0x338c,"SQUARE MU F"));
        data.insert(std::make_pair(0x338d,"SQUARE MU G"));
        data.insert(std::make_pair(0x338e,"SQUARE MG"));
        data.insert(std::make_pair(0x338f,"SQUARE KG"));
        data.insert(std::make_pair(0x3390,"SQUARE HZ"));
        data.insert(std::make_pair(0x3391,"SQUARE KHZ"));
        data.insert(std::make_pair(0x3392,"SQUARE MHZ"));
        data.insert(std::make_pair(0x3393,"SQUARE GHZ"));
        data.insert(std::make_pair(0x3394,"SQUARE THZ"));
        data.insert(std::make_pair(0x3395,"SQUARE MU L"));
        data.insert(std::make_pair(0x3396,"SQUARE ML"));
        data.insert(std::make_pair(0x3397,"SQUARE DL"));
        data.insert(std::make_pair(0x3398,"SQUARE KL"));
        data.insert(std::make_pair(0x3399,"SQUARE FM"));
        data.insert(std::make_pair(0x339a,"SQUARE NM"));
        data.insert(std::make_pair(0x339b,"SQUARE MU M"));
        data.insert(std::make_pair(0x339c,"SQUARE MM"));
        data.insert(std::make_pair(0x339d,"SQUARE CM"));
        data.insert(std::make_pair(0x339e,"SQUARE KM"));
        data.insert(std::make_pair(0x339f,"SQUARE MM SQUARED"));
        data.insert(std::make_pair(0x33a0,"SQUARE CM SQUARED"));
        data.insert(std::make_pair(0x33a1,"SQUARE M SQUARED"));
        data.insert(std::make_pair(0x33a2,"SQUARE KM SQUARED"));
        data.insert(std::make_pair(0x33a3,"SQUARE MM CUBED"));
        data.insert(std::make_pair(0x33a4,"SQUARE CM CUBED"));
        data.insert(std::make_pair(0x33a5,"SQUARE M CUBED"));
        data.insert(std::make_pair(0x33a6,"SQUARE KM CUBED"));
        data.insert(std::make_pair(0x33a7,"SQUARE M OVER S"));
        data.insert(std::make_pair(0x33a8,"SQUARE M OVER S SQUARED"));
        data.insert(std::make_pair(0x33a9,"SQUARE PA"));
        data.insert(std::make_pair(0x33aa,"SQUARE KPA"));
        data.insert(std::make_pair(0x33ab,"SQUARE MPA"));
        data.insert(std::make_pair(0x33ac,"SQUARE GPA"));
        data.insert(std::make_pair(0x33ad,"SQUARE RAD"));
        data.insert(std::make_pair(0x33ae,"SQUARE RAD OVER S"));
        data.insert(std::make_pair(0x33af,"SQUARE RAD OVER S SQUARED"));
        data.insert(std::make_pair(0x33b0,"SQUARE PS"));
        data.insert(std::make_pair(0x33b1,"SQUARE NS"));
        data.insert(std::make_pair(0x33b2,"SQUARE MU S"));
        data.insert(std::make_pair(0x33b3,"SQUARE MS"));
        data.insert(std::make_pair(0x33b4,"SQUARE PV"));
        data.insert(std::make_pair(0x33b5,"SQUARE NV"));
        data.insert(std::make_pair(0x33b6,"SQUARE MU V"));
        data.insert(std::make_pair(0x33b7,"SQUARE MV"));
        data.insert(std::make_pair(0x33b8,"SQUARE KV"));
        data.insert(std::make_pair(0x33b9,"SQUARE MV MEGA"));
        data.insert(std::make_pair(0x33ba,"SQUARE PW"));
        data.insert(std::make_pair(0x33bb,"SQUARE NW"));
        data.insert(std::make_pair(0x33bc,"SQUARE MU W"));
        data.insert(std::make_pair(0x33bd,"SQUARE MW"));
        data.insert(std::make_pair(0x33be,"SQUARE KW"));
        data.insert(std::make_pair(0x33bf,"SQUARE MW MEGA"));
        data.insert(std::make_pair(0x33c0,"SQUARE K OHM"));
        data.insert(std::make_pair(0x33c1,"SQUARE M OHM"));
        data.insert(std::make_pair(0x33c2,"SQUARE AM"));
        data.insert(std::make_pair(0x33c3,"SQUARE BQ"));
        data.insert(std::make_pair(0x33c4,"SQUARE CC"));
        data.insert(std::make_pair(0x33c5,"SQUARE CD"));
        data.insert(std::make_pair(0x33c6,"SQUARE C OVER KG"));
        data.insert(std::make_pair(0x33c7,"SQUARE CO"));
        data.insert(std::make_pair(0x33c8,"SQUARE DB"));
        data.insert(std::make_pair(0x33c9,"SQUARE GY"));
        data.insert(std::make_pair(0x33ca,"SQUARE HA"));
        data.insert(std::make_pair(0x33cb,"SQUARE HP"));
        data.insert(std::make_pair(0x33cc,"SQUARE IN"));
        data.insert(std::make_pair(0x33cd,"SQUARE KK"));
        data.insert(std::make_pair(0x33ce,"SQUARE KM CAPITAL"));
        data.insert(std::make_pair(0x33cf,"SQUARE KT"));
        data.insert(std::make_pair(0x33d0,"SQUARE LM"));
        data.insert(std::make_pair(0x33d1,"SQUARE LN"));
        data.insert(std::make_pair(0x33d2,"SQUARE LOG"));
        data.insert(std::make_pair(0x33d3,"SQUARE LX"));
        data.insert(std::make_pair(0x33d4,"SQUARE MB SMALL"));
        data.insert(std::make_pair(0x33d5,"SQUARE MIL"));
        data.insert(std::make_pair(0x33d6,"SQUARE MOL"));
        data.insert(std::make_pair(0x33d7,"SQUARE PH"));
        data.insert(std::make_pair(0x33d8,"SQUARE PM"));
        data.insert(std::make_pair(0x33d9,"SQUARE PPM"));
        data.insert(std::make_pair(0x33da,"SQUARE PR"));
        data.insert(std::make_pair(0x33db,"SQUARE SR"));
        data.insert(std::make_pair(0x33dc,"SQUARE SV"));
        data.insert(std::make_pair(0x33dd,"SQUARE WB"));
        data.insert(std::make_pair(0x33de,"SQUARE V OVER M"));
        data.insert(std::make_pair(0x33df,"SQUARE A OVER M"));
        data.insert(std::make_pair(0x33e0,"IDEOGRAPHIC TELEGRAPH SYMBOL FOR DAY ONE"));
        data.insert(std::make_pair(0x33e1,"IDEOGRAPHIC TELEGRAPH SYMBOL FOR DAY TWO"));
        data.insert(std::make_pair(0x33e2,"IDEOGRAPHIC TELEGRAPH SYMBOL FOR DAY THREE"));
        data.insert(std::make_pair(0x33e3,"IDEOGRAPHIC TELEGRAPH SYMBOL FOR DAY FOUR"));
        data.insert(std::make_pair(0x33e4,"IDEOGRAPHIC TELEGRAPH SYMBOL FOR DAY FIVE"));
        data.insert(std::make_pair(0x33e5,"IDEOGRAPHIC TELEGRAPH SYMBOL FOR DAY SIX"));
        data.insert(std::make_pair(0x33e6,"IDEOGRAPHIC TELEGRAPH SYMBOL FOR DAY SEVEN"));
        data.insert(std::make_pair(0x33e7,"IDEOGRAPHIC TELEGRAPH SYMBOL FOR DAY EIGHT"));
        data.insert(std::make_pair(0x33e8,"IDEOGRAPHIC TELEGRAPH SYMBOL FOR DAY NINE"));
        data.insert(std::make_pair(0x33e9,"IDEOGRAPHIC TELEGRAPH SYMBOL FOR DAY TEN"));
        data.insert(std::make_pair(0x33ea,"IDEOGRAPHIC TELEGRAPH SYMBOL FOR DAY ELEVEN"));
        data.insert(std::make_pair(0x33eb,"IDEOGRAPHIC TELEGRAPH SYMBOL FOR DAY TWELVE"));
        data.insert(std::make_pair(0x33ec,"IDEOGRAPHIC TELEGRAPH SYMBOL FOR DAY THIRTEEN"));
        data.insert(std::make_pair(0x33ed,"IDEOGRAPHIC TELEGRAPH SYMBOL FOR DAY FOURTEEN"));
        data.insert(std::make_pair(0x33ee,"IDEOGRAPHIC TELEGRAPH SYMBOL FOR DAY FIFTEEN"));
        data.insert(std::make_pair(0x33ef,"IDEOGRAPHIC TELEGRAPH SYMBOL FOR DAY SIXTEEN"));
        data.insert(std::make_pair(0x33f0,"IDEOGRAPHIC TELEGRAPH SYMBOL FOR DAY SEVENTEEN"));
        data.insert(std::make_pair(0x33f1,"IDEOGRAPHIC TELEGRAPH SYMBOL FOR DAY EIGHTEEN"));
        data.insert(std::make_pair(0x33f2,"IDEOGRAPHIC TELEGRAPH SYMBOL FOR DAY NINETEEN"));
        data.insert(std::make_pair(0x33f3,"IDEOGRAPHIC TELEGRAPH SYMBOL FOR DAY TWENTY"));
        data.insert(std::make_pair(0x33f4,"IDEOGRAPHIC TELEGRAPH SYMBOL FOR DAY TWENTY-ONE"));
        data.insert(std::make_pair(0x33f5,"IDEOGRAPHIC TELEGRAPH SYMBOL FOR DAY TWENTY-TWO"));
        data.insert(std::make_pair(0x33f6,"IDEOGRAPHIC TELEGRAPH SYMBOL FOR DAY TWENTY-THREE"));
        data.insert(std::make_pair(0x33f7,"IDEOGRAPHIC TELEGRAPH SYMBOL FOR DAY TWENTY-FOUR"));
        data.insert(std::make_pair(0x33f8,"IDEOGRAPHIC TELEGRAPH SYMBOL FOR DAY TWENTY-FIVE"));
        data.insert(std::make_pair(0x33f9,"IDEOGRAPHIC TELEGRAPH SYMBOL FOR DAY TWENTY-SIX"));
        data.insert(std::make_pair(0x33fa,"IDEOGRAPHIC TELEGRAPH SYMBOL FOR DAY TWENTY-SEVEN"));
        data.insert(std::make_pair(0x33fb,"IDEOGRAPHIC TELEGRAPH SYMBOL FOR DAY TWENTY-EIGHT"));
        data.insert(std::make_pair(0x33fc,"IDEOGRAPHIC TELEGRAPH SYMBOL FOR DAY TWENTY-NINE"));
        data.insert(std::make_pair(0x33fd,"IDEOGRAPHIC TELEGRAPH SYMBOL FOR DAY THIRTY"));
        data.insert(std::make_pair(0x33fe,"IDEOGRAPHIC TELEGRAPH SYMBOL FOR DAY THIRTY-ONE"));
        data.insert(std::make_pair(0x33ff,"SQUARE GAL"));
        data.insert(std::make_pair(0x3400,"<CJK Ideograph Extension A, First>"));
        data.insert(std::make_pair(0x4dbf,"<CJK Ideograph Extension A, Last>"));
        data.insert(std::make_pair(0x4dc0,"HEXAGRAM FOR THE CREATIVE HEAVEN"));
        data.insert(std::make_pair(0x4dc1,"HEXAGRAM FOR THE RECEPTIVE EARTH"));
        data.insert(std::make_pair(0x4dc2,"HEXAGRAM FOR DIFFICULTY AT THE BEGINNING"));
        data.insert(std::make_pair(0x4dc3,"HEXAGRAM FOR YOUTHFUL FOLLY"));
        data.insert(std::make_pair(0x4dc4,"HEXAGRAM FOR WAITING"));
        data.insert(std::make_pair(0x4dc5,"HEXAGRAM FOR CONFLICT"));
        data.insert(std::make_pair(0x4dc6,"HEXAGRAM FOR THE ARMY"));
        data.insert(std::make_pair(0x4dc7,"HEXAGRAM FOR HOLDING TOGETHER"));
        data.insert(std::make_pair(0x4dc8,"HEXAGRAM FOR SMALL TAMING"));
        data.insert(std::make_pair(0x4dc9,"HEXAGRAM FOR TREADING"));
        data.insert(std::make_pair(0x4dca,"HEXAGRAM FOR PEACE"));
        data.insert(std::make_pair(0x4dcb,"HEXAGRAM FOR STANDSTILL"));
        data.insert(std::make_pair(0x4dcc,"HEXAGRAM FOR FELLOWSHIP"));
        data.insert(std::make_pair(0x4dcd,"HEXAGRAM FOR GREAT POSSESSION"));
        data.insert(std::make_pair(0x4dce,"HEXAGRAM FOR MODESTY"));
        data.insert(std::make_pair(0x4dcf,"HEXAGRAM FOR ENTHUSIASM"));
        data.insert(std::make_pair(0x4dd0,"HEXAGRAM FOR FOLLOWING"));
        data.insert(std::make_pair(0x4dd1,"HEXAGRAM FOR WORK ON THE DECAYED"));
        data.insert(std::make_pair(0x4dd2,"HEXAGRAM FOR APPROACH"));
        data.insert(std::make_pair(0x4dd3,"HEXAGRAM FOR CONTEMPLATION"));
        data.insert(std::make_pair(0x4dd4,"HEXAGRAM FOR BITING THROUGH"));
        data.insert(std::make_pair(0x4dd5,"HEXAGRAM FOR GRACE"));
        data.insert(std::make_pair(0x4dd6,"HEXAGRAM FOR SPLITTING APART"));
        data.insert(std::make_pair(0x4dd7,"HEXAGRAM FOR RETURN"));
        data.insert(std::make_pair(0x4dd8,"HEXAGRAM FOR INNOCENCE"));
        data.insert(std::make_pair(0x4dd9,"HEXAGRAM FOR GREAT TAMING"));
        data.insert(std::make_pair(0x4dda,"HEXAGRAM FOR MOUTH CORNERS"));
        data.insert(std::make_pair(0x4ddb,"HEXAGRAM FOR GREAT PREPONDERANCE"));
        data.insert(std::make_pair(0x4ddc,"HEXAGRAM FOR THE ABYSMAL WATER"));
        data.insert(std::make_pair(0x4ddd,"HEXAGRAM FOR THE CLINGING FIRE"));
        data.insert(std::make_pair(0x4dde,"HEXAGRAM FOR INFLUENCE"));
        data.insert(std::make_pair(0x4ddf,"HEXAGRAM FOR DURATION"));
        data.insert(std::make_pair(0x4de0,"HEXAGRAM FOR RETREAT"));
        data.insert(std::make_pair(0x4de1,"HEXAGRAM FOR GREAT POWER"));
        data.insert(std::make_pair(0x4de2,"HEXAGRAM FOR PROGRESS"));
        data.insert(std::make_pair(0x4de3,"HEXAGRAM FOR DARKENING OF THE LIGHT"));
        data.insert(std::make_pair(0x4de4,"HEXAGRAM FOR THE FAMILY"));
        data.insert(std::make_pair(0x4de5,"HEXAGRAM FOR OPPOSITION"));
        data.insert(std::make_pair(0x4de6,"HEXAGRAM FOR OBSTRUCTION"));
        data.insert(std::make_pair(0x4de7,"HEXAGRAM FOR DELIVERANCE"));
        data.insert(std::make_pair(0x4de8,"HEXAGRAM FOR DECREASE"));
        data.insert(std::make_pair(0x4de9,"HEXAGRAM FOR INCREASE"));
        data.insert(std::make_pair(0x4dea,"HEXAGRAM FOR BREAKTHROUGH"));
        data.insert(std::make_pair(0x4deb,"HEXAGRAM FOR COMING TO MEET"));
        data.insert(std::make_pair(0x4dec,"HEXAGRAM FOR GATHERING TOGETHER"));
        data.insert(std::make_pair(0x4ded,"HEXAGRAM FOR PUSHING UPWARD"));
        data.insert(std::make_pair(0x4dee,"HEXAGRAM FOR OPPRESSION"));
        data.insert(std::make_pair(0x4def,"HEXAGRAM FOR THE WELL"));
        data.insert(std::make_pair(0x4df0,"HEXAGRAM FOR REVOLUTION"));
        data.insert(std::make_pair(0x4df1,"HEXAGRAM FOR THE CAULDRON"));
        data.insert(std::make_pair(0x4df2,"HEXAGRAM FOR THE AROUSING THUNDER"));
        data.insert(std::make_pair(0x4df3,"HEXAGRAM FOR THE KEEPING STILL MOUNTAIN"));
        data.insert(std::make_pair(0x4df4,"HEXAGRAM FOR DEVELOPMENT"));
        data.insert(std::make_pair(0x4df5,"HEXAGRAM FOR THE MARRYING MAIDEN"));
        data.insert(std::make_pair(0x4df6,"HEXAGRAM FOR ABUNDANCE"));
        data.insert(std::make_pair(0x4df7,"HEXAGRAM FOR THE WANDERER"));
        data.insert(std::make_pair(0x4df8,"HEXAGRAM FOR THE GENTLE WIND"));
        data.insert(std::make_pair(0x4df9,"HEXAGRAM FOR THE JOYOUS LAKE"));
        data.insert(std::make_pair(0x4dfa,"HEXAGRAM FOR DISPERSION"));
        data.insert(std::make_pair(0x4dfb,"HEXAGRAM FOR LIMITATION"));
        data.insert(std::make_pair(0x4dfc,"HEXAGRAM FOR INNER TRUTH"));
        data.insert(std::make_pair(0x4dfd,"HEXAGRAM FOR SMALL PREPONDERANCE"));
        data.insert(std::make_pair(0x4dfe,"HEXAGRAM FOR AFTER COMPLETION"));
        data.insert(std::make_pair(0x4dff,"HEXAGRAM FOR BEFORE COMPLETION"));
        data.insert(std::make_pair(0x4e00,"<CJK Ideograph, First>"));
        data.insert(std::make_pair(0x9fff,"<CJK Ideograph, Last>"));
        data.insert(std::make_pair(0xa000,"YI SYLLABLE IT"));
        data.insert(std::make_pair(0xa001,"YI SYLLABLE IX"));
        data.insert(std::make_pair(0xa002,"YI SYLLABLE I"));
        data.insert(std::make_pair(0xa003,"YI SYLLABLE IP"));
        data.insert(std::make_pair(0xa004,"YI SYLLABLE IET"));
        data.insert(std::make_pair(0xa005,"YI SYLLABLE IEX"));
        data.insert(std::make_pair(0xa006,"YI SYLLABLE IE"));
        data.insert(std::make_pair(0xa007,"YI SYLLABLE IEP"));
        data.insert(std::make_pair(0xa008,"YI SYLLABLE AT"));
        data.insert(std::make_pair(0xa009,"YI SYLLABLE AX"));
        data.insert(std::make_pair(0xa00a,"YI SYLLABLE A"));
        data.insert(std::make_pair(0xa00b,"YI SYLLABLE AP"));
        data.insert(std::make_pair(0xa00c,"YI SYLLABLE UOX"));
        data.insert(std::make_pair(0xa00d,"YI SYLLABLE UO"));
        data.insert(std::make_pair(0xa00e,"YI SYLLABLE UOP"));
        data.insert(std::make_pair(0xa00f,"YI SYLLABLE OT"));
        data.insert(std::make_pair(0xa010,"YI SYLLABLE OX"));
        data.insert(std::make_pair(0xa011,"YI SYLLABLE O"));
        data.insert(std::make_pair(0xa012,"YI SYLLABLE OP"));
        data.insert(std::make_pair(0xa013,"YI SYLLABLE EX"));
        data.insert(std::make_pair(0xa014,"YI SYLLABLE E"));
        data.insert(std::make_pair(0xa015,"YI SYLLABLE WU"));
        data.insert(std::make_pair(0xa016,"YI SYLLABLE BIT"));
        data.insert(std::make_pair(0xa017,"YI SYLLABLE BIX"));
        data.insert(std::make_pair(0xa018,"YI SYLLABLE BI"));
        data.insert(std::make_pair(0xa019,"YI SYLLABLE BIP"));
        data.insert(std::make_pair(0xa01a,"YI SYLLABLE BIET"));
        data.insert(std::make_pair(0xa01b,"YI SYLLABLE BIEX"));
        data.insert(std::make_pair(0xa01c,"YI SYLLABLE BIE"));
        data.insert(std::make_pair(0xa01d,"YI SYLLABLE BIEP"));
        data.insert(std::make_pair(0xa01e,"YI SYLLABLE BAT"));
        data.insert(std::make_pair(0xa01f,"YI SYLLABLE BAX"));
        data.insert(std::make_pair(0xa020,"YI SYLLABLE BA"));
        data.insert(std::make_pair(0xa021,"YI SYLLABLE BAP"));
        data.insert(std::make_pair(0xa022,"YI SYLLABLE BUOX"));
        data.insert(std::make_pair(0xa023,"YI SYLLABLE BUO"));
        data.insert(std::make_pair(0xa024,"YI SYLLABLE BUOP"));
        data.insert(std::make_pair(0xa025,"YI SYLLABLE BOT"));
        data.insert(std::make_pair(0xa026,"YI SYLLABLE BOX"));
        data.insert(std::make_pair(0xa027,"YI SYLLABLE BO"));
        data.insert(std::make_pair(0xa028,"YI SYLLABLE BOP"));
        data.insert(std::make_pair(0xa029,"YI SYLLABLE BEX"));
        data.insert(std::make_pair(0xa02a,"YI SYLLABLE BE"));
        data.insert(std::make_pair(0xa02b,"YI SYLLABLE BEP"));
        data.insert(std::make_pair(0xa02c,"YI SYLLABLE BUT"));
        data.insert(std::make_pair(0xa02d,"YI SYLLABLE BUX"));
        data.insert(std::make_pair(0xa02e,"YI SYLLABLE BU"));
        data.insert(std::make_pair(0xa02f,"YI SYLLABLE BUP"));
        data.insert(std::make_pair(0xa030,"YI SYLLABLE BURX"));
        data.insert(std::make_pair(0xa031,"YI SYLLABLE BUR"));
        data.insert(std::make_pair(0xa032,"YI SYLLABLE BYT"));
        data.insert(std::make_pair(0xa033,"YI SYLLABLE BYX"));
        data.insert(std::make_pair(0xa034,"YI SYLLABLE BY"));
        data.insert(std::make_pair(0xa035,"YI SYLLABLE BYP"));
        data.insert(std::make_pair(0xa036,"YI SYLLABLE BYRX"));
        data.insert(std::make_pair(0xa037,"YI SYLLABLE BYR"));
        data.insert(std::make_pair(0xa038,"YI SYLLABLE PIT"));
        data.insert(std::make_pair(0xa039,"YI SYLLABLE PIX"));
        data.insert(std::make_pair(0xa03a,"YI SYLLABLE PI"));
        data.insert(std::make_pair(0xa03b,"YI SYLLABLE PIP"));
        data.insert(std::make_pair(0xa03c,"YI SYLLABLE PIEX"));
        data.insert(std::make_pair(0xa03d,"YI SYLLABLE PIE"));
        data.insert(std::make_pair(0xa03e,"YI SYLLABLE PIEP"));
        data.insert(std::make_pair(0xa03f,"YI SYLLABLE PAT"));
        data.insert(std::make_pair(0xa040,"YI SYLLABLE PAX"));
        data.insert(std::make_pair(0xa041,"YI SYLLABLE PA"));
        data.insert(std::make_pair(0xa042,"YI SYLLABLE PAP"));
        data.insert(std::make_pair(0xa043,"YI SYLLABLE PUOX"));
        data.insert(std::make_pair(0xa044,"YI SYLLABLE PUO"));
        data.insert(std::make_pair(0xa045,"YI SYLLABLE PUOP"));
        data.insert(std::make_pair(0xa046,"YI SYLLABLE POT"));
        data.insert(std::make_pair(0xa047,"YI SYLLABLE POX"));
        data.insert(std::make_pair(0xa048,"YI SYLLABLE PO"));
        data.insert(std::make_pair(0xa049,"YI SYLLABLE POP"));
        data.insert(std::make_pair(0xa04a,"YI SYLLABLE PUT"));
        data.insert(std::make_pair(0xa04b,"YI SYLLABLE PUX"));
        data.insert(std::make_pair(0xa04c,"YI SYLLABLE PU"));
        data.insert(std::make_pair(0xa04d,"YI SYLLABLE PUP"));
        data.insert(std::make_pair(0xa04e,"YI SYLLABLE PURX"));
        data.insert(std::make_pair(0xa04f,"YI SYLLABLE PUR"));
        data.insert(std::make_pair(0xa050,"YI SYLLABLE PYT"));
        data.insert(std::make_pair(0xa051,"YI SYLLABLE PYX"));
        data.insert(std::make_pair(0xa052,"YI SYLLABLE PY"));
        data.insert(std::make_pair(0xa053,"YI SYLLABLE PYP"));
        data.insert(std::make_pair(0xa054,"YI SYLLABLE PYRX"));
        data.insert(std::make_pair(0xa055,"YI SYLLABLE PYR"));
        data.insert(std::make_pair(0xa056,"YI SYLLABLE BBIT"));
        data.insert(std::make_pair(0xa057,"YI SYLLABLE BBIX"));
        data.insert(std::make_pair(0xa058,"YI SYLLABLE BBI"));
        data.insert(std::make_pair(0xa059,"YI SYLLABLE BBIP"));
        data.insert(std::make_pair(0xa05a,"YI SYLLABLE BBIET"));
        data.insert(std::make_pair(0xa05b,"YI SYLLABLE BBIEX"));
        data.insert(std::make_pair(0xa05c,"YI SYLLABLE BBIE"));
        data.insert(std::make_pair(0xa05d,"YI SYLLABLE BBIEP"));
        data.insert(std::make_pair(0xa05e,"YI SYLLABLE BBAT"));
        data.insert(std::make_pair(0xa05f,"YI SYLLABLE BBAX"));
        data.insert(std::make_pair(0xa060,"YI SYLLABLE BBA"));
        data.insert(std::make_pair(0xa061,"YI SYLLABLE BBAP"));
        data.insert(std::make_pair(0xa062,"YI SYLLABLE BBUOX"));
        data.insert(std::make_pair(0xa063,"YI SYLLABLE BBUO"));
        data.insert(std::make_pair(0xa064,"YI SYLLABLE BBUOP"));
        data.insert(std::make_pair(0xa065,"YI SYLLABLE BBOT"));
        data.insert(std::make_pair(0xa066,"YI SYLLABLE BBOX"));
        data.insert(std::make_pair(0xa067,"YI SYLLABLE BBO"));
        data.insert(std::make_pair(0xa068,"YI SYLLABLE BBOP"));
        data.insert(std::make_pair(0xa069,"YI SYLLABLE BBEX"));
        data.insert(std::make_pair(0xa06a,"YI SYLLABLE BBE"));
        data.insert(std::make_pair(0xa06b,"YI SYLLABLE BBEP"));
        data.insert(std::make_pair(0xa06c,"YI SYLLABLE BBUT"));
        data.insert(std::make_pair(0xa06d,"YI SYLLABLE BBUX"));
        data.insert(std::make_pair(0xa06e,"YI SYLLABLE BBU"));
        data.insert(std::make_pair(0xa06f,"YI SYLLABLE BBUP"));
        data.insert(std::make_pair(0xa070,"YI SYLLABLE BBURX"));
        data.insert(std::make_pair(0xa071,"YI SYLLABLE BBUR"));
        data.insert(std::make_pair(0xa072,"YI SYLLABLE BBYT"));
        data.insert(std::make_pair(0xa073,"YI SYLLABLE BBYX"));
        data.insert(std::make_pair(0xa074,"YI SYLLABLE BBY"));
        data.insert(std::make_pair(0xa075,"YI SYLLABLE BBYP"));
        data.insert(std::make_pair(0xa076,"YI SYLLABLE NBIT"));
        data.insert(std::make_pair(0xa077,"YI SYLLABLE NBIX"));
        data.insert(std::make_pair(0xa078,"YI SYLLABLE NBI"));
        data.insert(std::make_pair(0xa079,"YI SYLLABLE NBIP"));
        data.insert(std::make_pair(0xa07a,"YI SYLLABLE NBIEX"));
        data.insert(std::make_pair(0xa07b,"YI SYLLABLE NBIE"));
        data.insert(std::make_pair(0xa07c,"YI SYLLABLE NBIEP"));
        data.insert(std::make_pair(0xa07d,"YI SYLLABLE NBAT"));
        data.insert(std::make_pair(0xa07e,"YI SYLLABLE NBAX"));
        data.insert(std::make_pair(0xa07f,"YI SYLLABLE NBA"));
        data.insert(std::make_pair(0xa080,"YI SYLLABLE NBAP"));
        data.insert(std::make_pair(0xa081,"YI SYLLABLE NBOT"));
        data.insert(std::make_pair(0xa082,"YI SYLLABLE NBOX"));
        data.insert(std::make_pair(0xa083,"YI SYLLABLE NBO"));
        data.insert(std::make_pair(0xa084,"YI SYLLABLE NBOP"));
        data.insert(std::make_pair(0xa085,"YI SYLLABLE NBUT"));
        data.insert(std::make_pair(0xa086,"YI SYLLABLE NBUX"));
        data.insert(std::make_pair(0xa087,"YI SYLLABLE NBU"));
        data.insert(std::make_pair(0xa088,"YI SYLLABLE NBUP"));
        data.insert(std::make_pair(0xa089,"YI SYLLABLE NBURX"));
        data.insert(std::make_pair(0xa08a,"YI SYLLABLE NBUR"));
        data.insert(std::make_pair(0xa08b,"YI SYLLABLE NBYT"));
        data.insert(std::make_pair(0xa08c,"YI SYLLABLE NBYX"));
        data.insert(std::make_pair(0xa08d,"YI SYLLABLE NBY"));
        data.insert(std::make_pair(0xa08e,"YI SYLLABLE NBYP"));
        data.insert(std::make_pair(0xa08f,"YI SYLLABLE NBYRX"));
        data.insert(std::make_pair(0xa090,"YI SYLLABLE NBYR"));
        data.insert(std::make_pair(0xa091,"YI SYLLABLE HMIT"));
        data.insert(std::make_pair(0xa092,"YI SYLLABLE HMIX"));
        data.insert(std::make_pair(0xa093,"YI SYLLABLE HMI"));
        data.insert(std::make_pair(0xa094,"YI SYLLABLE HMIP"));
        data.insert(std::make_pair(0xa095,"YI SYLLABLE HMIEX"));
        data.insert(std::make_pair(0xa096,"YI SYLLABLE HMIE"));
        data.insert(std::make_pair(0xa097,"YI SYLLABLE HMIEP"));
        data.insert(std::make_pair(0xa098,"YI SYLLABLE HMAT"));
        data.insert(std::make_pair(0xa099,"YI SYLLABLE HMAX"));
        data.insert(std::make_pair(0xa09a,"YI SYLLABLE HMA"));
        data.insert(std::make_pair(0xa09b,"YI SYLLABLE HMAP"));
        data.insert(std::make_pair(0xa09c,"YI SYLLABLE HMUOX"));
        data.insert(std::make_pair(0xa09d,"YI SYLLABLE HMUO"));
        data.insert(std::make_pair(0xa09e,"YI SYLLABLE HMUOP"));
        data.insert(std::make_pair(0xa09f,"YI SYLLABLE HMOT"));
        data.insert(std::make_pair(0xa0a0,"YI SYLLABLE HMOX"));
        data.insert(std::make_pair(0xa0a1,"YI SYLLABLE HMO"));
        data.insert(std::make_pair(0xa0a2,"YI SYLLABLE HMOP"));
        data.insert(std::make_pair(0xa0a3,"YI SYLLABLE HMUT"));
        data.insert(std::make_pair(0xa0a4,"YI SYLLABLE HMUX"));
        data.insert(std::make_pair(0xa0a5,"YI SYLLABLE HMU"));
        data.insert(std::make_pair(0xa0a6,"YI SYLLABLE HMUP"));
        data.insert(std::make_pair(0xa0a7,"YI SYLLABLE HMURX"));
        data.insert(std::make_pair(0xa0a8,"YI SYLLABLE HMUR"));
        data.insert(std::make_pair(0xa0a9,"YI SYLLABLE HMYX"));
        data.insert(std::make_pair(0xa0aa,"YI SYLLABLE HMY"));
        data.insert(std::make_pair(0xa0ab,"YI SYLLABLE HMYP"));
        data.insert(std::make_pair(0xa0ac,"YI SYLLABLE HMYRX"));
        data.insert(std::make_pair(0xa0ad,"YI SYLLABLE HMYR"));
        data.insert(std::make_pair(0xa0ae,"YI SYLLABLE MIT"));
        data.insert(std::make_pair(0xa0af,"YI SYLLABLE MIX"));
        data.insert(std::make_pair(0xa0b0,"YI SYLLABLE MI"));
        data.insert(std::make_pair(0xa0b1,"YI SYLLABLE MIP"));
        data.insert(std::make_pair(0xa0b2,"YI SYLLABLE MIEX"));
        data.insert(std::make_pair(0xa0b3,"YI SYLLABLE MIE"));
        data.insert(std::make_pair(0xa0b4,"YI SYLLABLE MIEP"));
        data.insert(std::make_pair(0xa0b5,"YI SYLLABLE MAT"));
        data.insert(std::make_pair(0xa0b6,"YI SYLLABLE MAX"));
        data.insert(std::make_pair(0xa0b7,"YI SYLLABLE MA"));
        data.insert(std::make_pair(0xa0b8,"YI SYLLABLE MAP"));
        data.insert(std::make_pair(0xa0b9,"YI SYLLABLE MUOT"));
        data.insert(std::make_pair(0xa0ba,"YI SYLLABLE MUOX"));
        data.insert(std::make_pair(0xa0bb,"YI SYLLABLE MUO"));
        data.insert(std::make_pair(0xa0bc,"YI SYLLABLE MUOP"));
        data.insert(std::make_pair(0xa0bd,"YI SYLLABLE MOT"));
        data.insert(std::make_pair(0xa0be,"YI SYLLABLE MOX"));
        data.insert(std::make_pair(0xa0bf,"YI SYLLABLE MO"));
        data.insert(std::make_pair(0xa0c0,"YI SYLLABLE MOP"));
        data.insert(std::make_pair(0xa0c1,"YI SYLLABLE MEX"));
        data.insert(std::make_pair(0xa0c2,"YI SYLLABLE ME"));
        data.insert(std::make_pair(0xa0c3,"YI SYLLABLE MUT"));
        data.insert(std::make_pair(0xa0c4,"YI SYLLABLE MUX"));
        data.insert(std::make_pair(0xa0c5,"YI SYLLABLE MU"));
        data.insert(std::make_pair(0xa0c6,"YI SYLLABLE MUP"));
        data.insert(std::make_pair(0xa0c7,"YI SYLLABLE MURX"));
        data.insert(std::make_pair(0xa0c8,"YI SYLLABLE MUR"));
        data.insert(std::make_pair(0xa0c9,"YI SYLLABLE MYT"));
        data.insert(std::make_pair(0xa0ca,"YI SYLLABLE MYX"));
        data.insert(std::make_pair(0xa0cb,"YI SYLLABLE MY"));
        data.insert(std::make_pair(0xa0cc,"YI SYLLABLE MYP"));
        data.insert(std::make_pair(0xa0cd,"YI SYLLABLE FIT"));
        data.insert(std::make_pair(0xa0ce,"YI SYLLABLE FIX"));
        data.insert(std::make_pair(0xa0cf,"YI SYLLABLE FI"));
        data.insert(std::make_pair(0xa0d0,"YI SYLLABLE FIP"));
        data.insert(std::make_pair(0xa0d1,"YI SYLLABLE FAT"));
        data.insert(std::make_pair(0xa0d2,"YI SYLLABLE FAX"));
        data.insert(std::make_pair(0xa0d3,"YI SYLLABLE FA"));
        data.insert(std::make_pair(0xa0d4,"YI SYLLABLE FAP"));
        data.insert(std::make_pair(0xa0d5,"YI SYLLABLE FOX"));
        data.insert(std::make_pair(0xa0d6,"YI SYLLABLE FO"));
        data.insert(std::make_pair(0xa0d7,"YI SYLLABLE FOP"));
        data.insert(std::make_pair(0xa0d8,"YI SYLLABLE FUT"));
        data.insert(std::make_pair(0xa0d9,"YI SYLLABLE FUX"));
        data.insert(std::make_pair(0xa0da,"YI SYLLABLE FU"));
        data.insert(std::make_pair(0xa0db,"YI SYLLABLE FUP"));
        data.insert(std::make_pair(0xa0dc,"YI SYLLABLE FURX"));
        data.insert(std::make_pair(0xa0dd,"YI SYLLABLE FUR"));
        data.insert(std::make_pair(0xa0de,"YI SYLLABLE FYT"));
        data.insert(std::make_pair(0xa0df,"YI SYLLABLE FYX"));
        data.insert(std::make_pair(0xa0e0,"YI SYLLABLE FY"));
        data.insert(std::make_pair(0xa0e1,"YI SYLLABLE FYP"));
        data.insert(std::make_pair(0xa0e2,"YI SYLLABLE VIT"));
        data.insert(std::make_pair(0xa0e3,"YI SYLLABLE VIX"));
        data.insert(std::make_pair(0xa0e4,"YI SYLLABLE VI"));
        data.insert(std::make_pair(0xa0e5,"YI SYLLABLE VIP"));
        data.insert(std::make_pair(0xa0e6,"YI SYLLABLE VIET"));
        data.insert(std::make_pair(0xa0e7,"YI SYLLABLE VIEX"));
        data.insert(std::make_pair(0xa0e8,"YI SYLLABLE VIE"));
        data.insert(std::make_pair(0xa0e9,"YI SYLLABLE VIEP"));
        data.insert(std::make_pair(0xa0ea,"YI SYLLABLE VAT"));
        data.insert(std::make_pair(0xa0eb,"YI SYLLABLE VAX"));
        data.insert(std::make_pair(0xa0ec,"YI SYLLABLE VA"));
        data.insert(std::make_pair(0xa0ed,"YI SYLLABLE VAP"));
        data.insert(std::make_pair(0xa0ee,"YI SYLLABLE VOT"));
        data.insert(std::make_pair(0xa0ef,"YI SYLLABLE VOX"));
        data.insert(std::make_pair(0xa0f0,"YI SYLLABLE VO"));
        data.insert(std::make_pair(0xa0f1,"YI SYLLABLE VOP"));
        data.insert(std::make_pair(0xa0f2,"YI SYLLABLE VEX"));
        data.insert(std::make_pair(0xa0f3,"YI SYLLABLE VEP"));
        data.insert(std::make_pair(0xa0f4,"YI SYLLABLE VUT"));
        data.insert(std::make_pair(0xa0f5,"YI SYLLABLE VUX"));
        data.insert(std::make_pair(0xa0f6,"YI SYLLABLE VU"));
        data.insert(std::make_pair(0xa0f7,"YI SYLLABLE VUP"));
        data.insert(std::make_pair(0xa0f8,"YI SYLLABLE VURX"));
        data.insert(std::make_pair(0xa0f9,"YI SYLLABLE VUR"));
        data.insert(std::make_pair(0xa0fa,"YI SYLLABLE VYT"));
        data.insert(std::make_pair(0xa0fb,"YI SYLLABLE VYX"));
        data.insert(std::make_pair(0xa0fc,"YI SYLLABLE VY"));
        data.insert(std::make_pair(0xa0fd,"YI SYLLABLE VYP"));
        data.insert(std::make_pair(0xa0fe,"YI SYLLABLE VYRX"));
        data.insert(std::make_pair(0xa0ff,"YI SYLLABLE VYR"));
        data.insert(std::make_pair(0xa100,"YI SYLLABLE DIT"));
        data.insert(std::make_pair(0xa101,"YI SYLLABLE DIX"));
        data.insert(std::make_pair(0xa102,"YI SYLLABLE DI"));
        data.insert(std::make_pair(0xa103,"YI SYLLABLE DIP"));
        data.insert(std::make_pair(0xa104,"YI SYLLABLE DIEX"));
        data.insert(std::make_pair(0xa105,"YI SYLLABLE DIE"));
        data.insert(std::make_pair(0xa106,"YI SYLLABLE DIEP"));
        data.insert(std::make_pair(0xa107,"YI SYLLABLE DAT"));
        data.insert(std::make_pair(0xa108,"YI SYLLABLE DAX"));
        data.insert(std::make_pair(0xa109,"YI SYLLABLE DA"));
        data.insert(std::make_pair(0xa10a,"YI SYLLABLE DAP"));
        data.insert(std::make_pair(0xa10b,"YI SYLLABLE DUOX"));
        data.insert(std::make_pair(0xa10c,"YI SYLLABLE DUO"));
        data.insert(std::make_pair(0xa10d,"YI SYLLABLE DOT"));
        data.insert(std::make_pair(0xa10e,"YI SYLLABLE DOX"));
        data.insert(std::make_pair(0xa10f,"YI SYLLABLE DO"));
        data.insert(std::make_pair(0xa110,"YI SYLLABLE DOP"));
        data.insert(std::make_pair(0xa111,"YI SYLLABLE DEX"));
        data.insert(std::make_pair(0xa112,"YI SYLLABLE DE"));
        data.insert(std::make_pair(0xa113,"YI SYLLABLE DEP"));
        data.insert(std::make_pair(0xa114,"YI SYLLABLE DUT"));
        data.insert(std::make_pair(0xa115,"YI SYLLABLE DUX"));
        data.insert(std::make_pair(0xa116,"YI SYLLABLE DU"));
        data.insert(std::make_pair(0xa117,"YI SYLLABLE DUP"));
        data.insert(std::make_pair(0xa118,"YI SYLLABLE DURX"));
        data.insert(std::make_pair(0xa119,"YI SYLLABLE DUR"));
        data.insert(std::make_pair(0xa11a,"YI SYLLABLE TIT"));
        data.insert(std::make_pair(0xa11b,"YI SYLLABLE TIX"));
        data.insert(std::make_pair(0xa11c,"YI SYLLABLE TI"));
        data.insert(std::make_pair(0xa11d,"YI SYLLABLE TIP"));
        data.insert(std::make_pair(0xa11e,"YI SYLLABLE TIEX"));
        data.insert(std::make_pair(0xa11f,"YI SYLLABLE TIE"));
        data.insert(std::make_pair(0xa120,"YI SYLLABLE TIEP"));
        data.insert(std::make_pair(0xa121,"YI SYLLABLE TAT"));
        data.insert(std::make_pair(0xa122,"YI SYLLABLE TAX"));
        data.insert(std::make_pair(0xa123,"YI SYLLABLE TA"));
        data.insert(std::make_pair(0xa124,"YI SYLLABLE TAP"));
        data.insert(std::make_pair(0xa125,"YI SYLLABLE TUOT"));
        data.insert(std::make_pair(0xa126,"YI SYLLABLE TUOX"));
        data.insert(std::make_pair(0xa127,"YI SYLLABLE TUO"));
        data.insert(std::make_pair(0xa128,"YI SYLLABLE TUOP"));
        data.insert(std::make_pair(0xa129,"YI SYLLABLE TOT"));
        data.insert(std::make_pair(0xa12a,"YI SYLLABLE TOX"));
        data.insert(std::make_pair(0xa12b,"YI SYLLABLE TO"));
        data.insert(std::make_pair(0xa12c,"YI SYLLABLE TOP"));
        data.insert(std::make_pair(0xa12d,"YI SYLLABLE TEX"));
        data.insert(std::make_pair(0xa12e,"YI SYLLABLE TE"));
        data.insert(std::make_pair(0xa12f,"YI SYLLABLE TEP"));
        data.insert(std::make_pair(0xa130,"YI SYLLABLE TUT"));
        data.insert(std::make_pair(0xa131,"YI SYLLABLE TUX"));
        data.insert(std::make_pair(0xa132,"YI SYLLABLE TU"));
        data.insert(std::make_pair(0xa133,"YI SYLLABLE TUP"));
        data.insert(std::make_pair(0xa134,"YI SYLLABLE TURX"));
        data.insert(std::make_pair(0xa135,"YI SYLLABLE TUR"));
        data.insert(std::make_pair(0xa136,"YI SYLLABLE DDIT"));
        data.insert(std::make_pair(0xa137,"YI SYLLABLE DDIX"));
        data.insert(std::make_pair(0xa138,"YI SYLLABLE DDI"));
        data.insert(std::make_pair(0xa139,"YI SYLLABLE DDIP"));
        data.insert(std::make_pair(0xa13a,"YI SYLLABLE DDIEX"));
        data.insert(std::make_pair(0xa13b,"YI SYLLABLE DDIE"));
        data.insert(std::make_pair(0xa13c,"YI SYLLABLE DDIEP"));
        data.insert(std::make_pair(0xa13d,"YI SYLLABLE DDAT"));
        data.insert(std::make_pair(0xa13e,"YI SYLLABLE DDAX"));
        data.insert(std::make_pair(0xa13f,"YI SYLLABLE DDA"));
        data.insert(std::make_pair(0xa140,"YI SYLLABLE DDAP"));
        data.insert(std::make_pair(0xa141,"YI SYLLABLE DDUOX"));
        data.insert(std::make_pair(0xa142,"YI SYLLABLE DDUO"));
        data.insert(std::make_pair(0xa143,"YI SYLLABLE DDUOP"));
        data.insert(std::make_pair(0xa144,"YI SYLLABLE DDOT"));
        data.insert(std::make_pair(0xa145,"YI SYLLABLE DDOX"));
        data.insert(std::make_pair(0xa146,"YI SYLLABLE DDO"));
        data.insert(std::make_pair(0xa147,"YI SYLLABLE DDOP"));
        data.insert(std::make_pair(0xa148,"YI SYLLABLE DDEX"));
        data.insert(std::make_pair(0xa149,"YI SYLLABLE DDE"));
        data.insert(std::make_pair(0xa14a,"YI SYLLABLE DDEP"));
        data.insert(std::make_pair(0xa14b,"YI SYLLABLE DDUT"));
        data.insert(std::make_pair(0xa14c,"YI SYLLABLE DDUX"));
        data.insert(std::make_pair(0xa14d,"YI SYLLABLE DDU"));
        data.insert(std::make_pair(0xa14e,"YI SYLLABLE DDUP"));
        data.insert(std::make_pair(0xa14f,"YI SYLLABLE DDURX"));
        data.insert(std::make_pair(0xa150,"YI SYLLABLE DDUR"));
        data.insert(std::make_pair(0xa151,"YI SYLLABLE NDIT"));
        data.insert(std::make_pair(0xa152,"YI SYLLABLE NDIX"));
        data.insert(std::make_pair(0xa153,"YI SYLLABLE NDI"));
        data.insert(std::make_pair(0xa154,"YI SYLLABLE NDIP"));
        data.insert(std::make_pair(0xa155,"YI SYLLABLE NDIEX"));
        data.insert(std::make_pair(0xa156,"YI SYLLABLE NDIE"));
        data.insert(std::make_pair(0xa157,"YI SYLLABLE NDAT"));
        data.insert(std::make_pair(0xa158,"YI SYLLABLE NDAX"));
        data.insert(std::make_pair(0xa159,"YI SYLLABLE NDA"));
        data.insert(std::make_pair(0xa15a,"YI SYLLABLE NDAP"));
        data.insert(std::make_pair(0xa15b,"YI SYLLABLE NDOT"));
        data.insert(std::make_pair(0xa15c,"YI SYLLABLE NDOX"));
        data.insert(std::make_pair(0xa15d,"YI SYLLABLE NDO"));
        data.insert(std::make_pair(0xa15e,"YI SYLLABLE NDOP"));
        data.insert(std::make_pair(0xa15f,"YI SYLLABLE NDEX"));
        data.insert(std::make_pair(0xa160,"YI SYLLABLE NDE"));
        data.insert(std::make_pair(0xa161,"YI SYLLABLE NDEP"));
        data.insert(std::make_pair(0xa162,"YI SYLLABLE NDUT"));
        data.insert(std::make_pair(0xa163,"YI SYLLABLE NDUX"));
        data.insert(std::make_pair(0xa164,"YI SYLLABLE NDU"));
        data.insert(std::make_pair(0xa165,"YI SYLLABLE NDUP"));
        data.insert(std::make_pair(0xa166,"YI SYLLABLE NDURX"));
        data.insert(std::make_pair(0xa167,"YI SYLLABLE NDUR"));
        data.insert(std::make_pair(0xa168,"YI SYLLABLE HNIT"));
        data.insert(std::make_pair(0xa169,"YI SYLLABLE HNIX"));
        data.insert(std::make_pair(0xa16a,"YI SYLLABLE HNI"));
        data.insert(std::make_pair(0xa16b,"YI SYLLABLE HNIP"));
        data.insert(std::make_pair(0xa16c,"YI SYLLABLE HNIET"));
        data.insert(std::make_pair(0xa16d,"YI SYLLABLE HNIEX"));
        data.insert(std::make_pair(0xa16e,"YI SYLLABLE HNIE"));
        data.insert(std::make_pair(0xa16f,"YI SYLLABLE HNIEP"));
        data.insert(std::make_pair(0xa170,"YI SYLLABLE HNAT"));
        data.insert(std::make_pair(0xa171,"YI SYLLABLE HNAX"));
        data.insert(std::make_pair(0xa172,"YI SYLLABLE HNA"));
        data.insert(std::make_pair(0xa173,"YI SYLLABLE HNAP"));
        data.insert(std::make_pair(0xa174,"YI SYLLABLE HNUOX"));
        data.insert(std::make_pair(0xa175,"YI SYLLABLE HNUO"));
        data.insert(std::make_pair(0xa176,"YI SYLLABLE HNOT"));
        data.insert(std::make_pair(0xa177,"YI SYLLABLE HNOX"));
        data.insert(std::make_pair(0xa178,"YI SYLLABLE HNOP"));
        data.insert(std::make_pair(0xa179,"YI SYLLABLE HNEX"));
        data.insert(std::make_pair(0xa17a,"YI SYLLABLE HNE"));
        data.insert(std::make_pair(0xa17b,"YI SYLLABLE HNEP"));
        data.insert(std::make_pair(0xa17c,"YI SYLLABLE HNUT"));
        data.insert(std::make_pair(0xa17d,"YI SYLLABLE NIT"));
        data.insert(std::make_pair(0xa17e,"YI SYLLABLE NIX"));
        data.insert(std::make_pair(0xa17f,"YI SYLLABLE NI"));
        data.insert(std::make_pair(0xa180,"YI SYLLABLE NIP"));
        data.insert(std::make_pair(0xa181,"YI SYLLABLE NIEX"));
        data.insert(std::make_pair(0xa182,"YI SYLLABLE NIE"));
        data.insert(std::make_pair(0xa183,"YI SYLLABLE NIEP"));
        data.insert(std::make_pair(0xa184,"YI SYLLABLE NAX"));
        data.insert(std::make_pair(0xa185,"YI SYLLABLE NA"));
        data.insert(std::make_pair(0xa186,"YI SYLLABLE NAP"));
        data.insert(std::make_pair(0xa187,"YI SYLLABLE NUOX"));
        data.insert(std::make_pair(0xa188,"YI SYLLABLE NUO"));
        data.insert(std::make_pair(0xa189,"YI SYLLABLE NUOP"));
        data.insert(std::make_pair(0xa18a,"YI SYLLABLE NOT"));
        data.insert(std::make_pair(0xa18b,"YI SYLLABLE NOX"));
        data.insert(std::make_pair(0xa18c,"YI SYLLABLE NO"));
        data.insert(std::make_pair(0xa18d,"YI SYLLABLE NOP"));
        data.insert(std::make_pair(0xa18e,"YI SYLLABLE NEX"));
        data.insert(std::make_pair(0xa18f,"YI SYLLABLE NE"));
        data.insert(std::make_pair(0xa190,"YI SYLLABLE NEP"));
        data.insert(std::make_pair(0xa191,"YI SYLLABLE NUT"));
        data.insert(std::make_pair(0xa192,"YI SYLLABLE NUX"));
        data.insert(std::make_pair(0xa193,"YI SYLLABLE NU"));
        data.insert(std::make_pair(0xa194,"YI SYLLABLE NUP"));
        data.insert(std::make_pair(0xa195,"YI SYLLABLE NURX"));
        data.insert(std::make_pair(0xa196,"YI SYLLABLE NUR"));
        data.insert(std::make_pair(0xa197,"YI SYLLABLE HLIT"));
        data.insert(std::make_pair(0xa198,"YI SYLLABLE HLIX"));
        data.insert(std::make_pair(0xa199,"YI SYLLABLE HLI"));
        data.insert(std::make_pair(0xa19a,"YI SYLLABLE HLIP"));
        data.insert(std::make_pair(0xa19b,"YI SYLLABLE HLIEX"));
        data.insert(std::make_pair(0xa19c,"YI SYLLABLE HLIE"));
        data.insert(std::make_pair(0xa19d,"YI SYLLABLE HLIEP"));
        data.insert(std::make_pair(0xa19e,"YI SYLLABLE HLAT"));
        data.insert(std::make_pair(0xa19f,"YI SYLLABLE HLAX"));
        data.insert(std::make_pair(0xa1a0,"YI SYLLABLE HLA"));
        data.insert(std::make_pair(0xa1a1,"YI SYLLABLE HLAP"));
        data.insert(std::make_pair(0xa1a2,"YI SYLLABLE HLUOX"));
        data.insert(std::make_pair(0xa1a3,"YI SYLLABLE HLUO"));
        data.insert(std::make_pair(0xa1a4,"YI SYLLABLE HLUOP"));
        data.insert(std::make_pair(0xa1a5,"YI SYLLABLE HLOX"));
        data.insert(std::make_pair(0xa1a6,"YI SYLLABLE HLO"));
        data.insert(std::make_pair(0xa1a7,"YI SYLLABLE HLOP"));
        data.insert(std::make_pair(0xa1a8,"YI SYLLABLE HLEX"));
        data.insert(std::make_pair(0xa1a9,"YI SYLLABLE HLE"));
        data.insert(std::make_pair(0xa1aa,"YI SYLLABLE HLEP"));
        data.insert(std::make_pair(0xa1ab,"YI SYLLABLE HLUT"));
        data.insert(std::make_pair(0xa1ac,"YI SYLLABLE HLUX"));
        data.insert(std::make_pair(0xa1ad,"YI SYLLABLE HLU"));
        data.insert(std::make_pair(0xa1ae,"YI SYLLABLE HLUP"));
        data.insert(std::make_pair(0xa1af,"YI SYLLABLE HLURX"));
        data.insert(std::make_pair(0xa1b0,"YI SYLLABLE HLUR"));
        data.insert(std::make_pair(0xa1b1,"YI SYLLABLE HLYT"));
        data.insert(std::make_pair(0xa1b2,"YI SYLLABLE HLYX"));
        data.insert(std::make_pair(0xa1b3,"YI SYLLABLE HLY"));
        data.insert(std::make_pair(0xa1b4,"YI SYLLABLE HLYP"));
        data.insert(std::make_pair(0xa1b5,"YI SYLLABLE HLYRX"));
        data.insert(std::make_pair(0xa1b6,"YI SYLLABLE HLYR"));
        data.insert(std::make_pair(0xa1b7,"YI SYLLABLE LIT"));
        data.insert(std::make_pair(0xa1b8,"YI SYLLABLE LIX"));
        data.insert(std::make_pair(0xa1b9,"YI SYLLABLE LI"));
        data.insert(std::make_pair(0xa1ba,"YI SYLLABLE LIP"));
        data.insert(std::make_pair(0xa1bb,"YI SYLLABLE LIET"));
        data.insert(std::make_pair(0xa1bc,"YI SYLLABLE LIEX"));
        data.insert(std::make_pair(0xa1bd,"YI SYLLABLE LIE"));
        data.insert(std::make_pair(0xa1be,"YI SYLLABLE LIEP"));
        data.insert(std::make_pair(0xa1bf,"YI SYLLABLE LAT"));
        data.insert(std::make_pair(0xa1c0,"YI SYLLABLE LAX"));
        data.insert(std::make_pair(0xa1c1,"YI SYLLABLE LA"));
        data.insert(std::make_pair(0xa1c2,"YI SYLLABLE LAP"));
        data.insert(std::make_pair(0xa1c3,"YI SYLLABLE LUOT"));
        data.insert(std::make_pair(0xa1c4,"YI SYLLABLE LUOX"));
        data.insert(std::make_pair(0xa1c5,"YI SYLLABLE LUO"));
        data.insert(std::make_pair(0xa1c6,"YI SYLLABLE LUOP"));
        data.insert(std::make_pair(0xa1c7,"YI SYLLABLE LOT"));
        data.insert(std::make_pair(0xa1c8,"YI SYLLABLE LOX"));
        data.insert(std::make_pair(0xa1c9,"YI SYLLABLE LO"));
        data.insert(std::make_pair(0xa1ca,"YI SYLLABLE LOP"));
        data.insert(std::make_pair(0xa1cb,"YI SYLLABLE LEX"));
        data.insert(std::make_pair(0xa1cc,"YI SYLLABLE LE"));
        data.insert(std::make_pair(0xa1cd,"YI SYLLABLE LEP"));
        data.insert(std::make_pair(0xa1ce,"YI SYLLABLE LUT"));
        data.insert(std::make_pair(0xa1cf,"YI SYLLABLE LUX"));
        data.insert(std::make_pair(0xa1d0,"YI SYLLABLE LU"));
        data.insert(std::make_pair(0xa1d1,"YI SYLLABLE LUP"));
        data.insert(std::make_pair(0xa1d2,"YI SYLLABLE LURX"));
        data.insert(std::make_pair(0xa1d3,"YI SYLLABLE LUR"));
        data.insert(std::make_pair(0xa1d4,"YI SYLLABLE LYT"));
        data.insert(std::make_pair(0xa1d5,"YI SYLLABLE LYX"));
        data.insert(std::make_pair(0xa1d6,"YI SYLLABLE LY"));
        data.insert(std::make_pair(0xa1d7,"YI SYLLABLE LYP"));
        data.insert(std::make_pair(0xa1d8,"YI SYLLABLE LYRX"));
        data.insert(std::make_pair(0xa1d9,"YI SYLLABLE LYR"));
        data.insert(std::make_pair(0xa1da,"YI SYLLABLE GIT"));
        data.insert(std::make_pair(0xa1db,"YI SYLLABLE GIX"));
        data.insert(std::make_pair(0xa1dc,"YI SYLLABLE GI"));
        data.insert(std::make_pair(0xa1dd,"YI SYLLABLE GIP"));
        data.insert(std::make_pair(0xa1de,"YI SYLLABLE GIET"));
        data.insert(std::make_pair(0xa1df,"YI SYLLABLE GIEX"));
        data.insert(std::make_pair(0xa1e0,"YI SYLLABLE GIE"));
        data.insert(std::make_pair(0xa1e1,"YI SYLLABLE GIEP"));
        data.insert(std::make_pair(0xa1e2,"YI SYLLABLE GAT"));
        data.insert(std::make_pair(0xa1e3,"YI SYLLABLE GAX"));
        data.insert(std::make_pair(0xa1e4,"YI SYLLABLE GA"));
        data.insert(std::make_pair(0xa1e5,"YI SYLLABLE GAP"));
        data.insert(std::make_pair(0xa1e6,"YI SYLLABLE GUOT"));
        data.insert(std::make_pair(0xa1e7,"YI SYLLABLE GUOX"));
        data.insert(std::make_pair(0xa1e8,"YI SYLLABLE GUO"));
        data.insert(std::make_pair(0xa1e9,"YI SYLLABLE GUOP"));
        data.insert(std::make_pair(0xa1ea,"YI SYLLABLE GOT"));
        data.insert(std::make_pair(0xa1eb,"YI SYLLABLE GOX"));
        data.insert(std::make_pair(0xa1ec,"YI SYLLABLE GO"));
        data.insert(std::make_pair(0xa1ed,"YI SYLLABLE GOP"));
        data.insert(std::make_pair(0xa1ee,"YI SYLLABLE GET"));
        data.insert(std::make_pair(0xa1ef,"YI SYLLABLE GEX"));
        data.insert(std::make_pair(0xa1f0,"YI SYLLABLE GE"));
        data.insert(std::make_pair(0xa1f1,"YI SYLLABLE GEP"));
        data.insert(std::make_pair(0xa1f2,"YI SYLLABLE GUT"));
        data.insert(std::make_pair(0xa1f3,"YI SYLLABLE GUX"));
        data.insert(std::make_pair(0xa1f4,"YI SYLLABLE GU"));
        data.insert(std::make_pair(0xa1f5,"YI SYLLABLE GUP"));
        data.insert(std::make_pair(0xa1f6,"YI SYLLABLE GURX"));
        data.insert(std::make_pair(0xa1f7,"YI SYLLABLE GUR"));
        data.insert(std::make_pair(0xa1f8,"YI SYLLABLE KIT"));
        data.insert(std::make_pair(0xa1f9,"YI SYLLABLE KIX"));
        data.insert(std::make_pair(0xa1fa,"YI SYLLABLE KI"));
        data.insert(std::make_pair(0xa1fb,"YI SYLLABLE KIP"));
        data.insert(std::make_pair(0xa1fc,"YI SYLLABLE KIEX"));
        data.insert(std::make_pair(0xa1fd,"YI SYLLABLE KIE"));
        data.insert(std::make_pair(0xa1fe,"YI SYLLABLE KIEP"));
        data.insert(std::make_pair(0xa1ff,"YI SYLLABLE KAT"));
        data.insert(std::make_pair(0xa200,"YI SYLLABLE KAX"));
        data.insert(std::make_pair(0xa201,"YI SYLLABLE KA"));
        data.insert(std::make_pair(0xa202,"YI SYLLABLE KAP"));
        data.insert(std::make_pair(0xa203,"YI SYLLABLE KUOX"));
        data.insert(std::make_pair(0xa204,"YI SYLLABLE KUO"));
        data.insert(std::make_pair(0xa205,"YI SYLLABLE KUOP"));
        data.insert(std::make_pair(0xa206,"YI SYLLABLE KOT"));
        data.insert(std::make_pair(0xa207,"YI SYLLABLE KOX"));
        data.insert(std::make_pair(0xa208,"YI SYLLABLE KO"));
        data.insert(std::make_pair(0xa209,"YI SYLLABLE KOP"));
        data.insert(std::make_pair(0xa20a,"YI SYLLABLE KET"));
        data.insert(std::make_pair(0xa20b,"YI SYLLABLE KEX"));
        data.insert(std::make_pair(0xa20c,"YI SYLLABLE KE"));
        data.insert(std::make_pair(0xa20d,"YI SYLLABLE KEP"));
        data.insert(std::make_pair(0xa20e,"YI SYLLABLE KUT"));
        data.insert(std::make_pair(0xa20f,"YI SYLLABLE KUX"));
        data.insert(std::make_pair(0xa210,"YI SYLLABLE KU"));
        data.insert(std::make_pair(0xa211,"YI SYLLABLE KUP"));
        data.insert(std::make_pair(0xa212,"YI SYLLABLE KURX"));
        data.insert(std::make_pair(0xa213,"YI SYLLABLE KUR"));
        data.insert(std::make_pair(0xa214,"YI SYLLABLE GGIT"));
        data.insert(std::make_pair(0xa215,"YI SYLLABLE GGIX"));
        data.insert(std::make_pair(0xa216,"YI SYLLABLE GGI"));
        data.insert(std::make_pair(0xa217,"YI SYLLABLE GGIEX"));
        data.insert(std::make_pair(0xa218,"YI SYLLABLE GGIE"));
        data.insert(std::make_pair(0xa219,"YI SYLLABLE GGIEP"));
        data.insert(std::make_pair(0xa21a,"YI SYLLABLE GGAT"));
        data.insert(std::make_pair(0xa21b,"YI SYLLABLE GGAX"));
        data.insert(std::make_pair(0xa21c,"YI SYLLABLE GGA"));
        data.insert(std::make_pair(0xa21d,"YI SYLLABLE GGAP"));
        data.insert(std::make_pair(0xa21e,"YI SYLLABLE GGUOT"));
        data.insert(std::make_pair(0xa21f,"YI SYLLABLE GGUOX"));
        data.insert(std::make_pair(0xa220,"YI SYLLABLE GGUO"));
        data.insert(std::make_pair(0xa221,"YI SYLLABLE GGUOP"));
        data.insert(std::make_pair(0xa222,"YI SYLLABLE GGOT"));
        data.insert(std::make_pair(0xa223,"YI SYLLABLE GGOX"));
        data.insert(std::make_pair(0xa224,"YI SYLLABLE GGO"));
        data.insert(std::make_pair(0xa225,"YI SYLLABLE GGOP"));
        data.insert(std::make_pair(0xa226,"YI SYLLABLE GGET"));
        data.insert(std::make_pair(0xa227,"YI SYLLABLE GGEX"));
        data.insert(std::make_pair(0xa228,"YI SYLLABLE GGE"));
        data.insert(std::make_pair(0xa229,"YI SYLLABLE GGEP"));
        data.insert(std::make_pair(0xa22a,"YI SYLLABLE GGUT"));
        data.insert(std::make_pair(0xa22b,"YI SYLLABLE GGUX"));
        data.insert(std::make_pair(0xa22c,"YI SYLLABLE GGU"));
        data.insert(std::make_pair(0xa22d,"YI SYLLABLE GGUP"));
        data.insert(std::make_pair(0xa22e,"YI SYLLABLE GGURX"));
        data.insert(std::make_pair(0xa22f,"YI SYLLABLE GGUR"));
        data.insert(std::make_pair(0xa230,"YI SYLLABLE MGIEX"));
        data.insert(std::make_pair(0xa231,"YI SYLLABLE MGIE"));
        data.insert(std::make_pair(0xa232,"YI SYLLABLE MGAT"));
        data.insert(std::make_pair(0xa233,"YI SYLLABLE MGAX"));
        data.insert(std::make_pair(0xa234,"YI SYLLABLE MGA"));
        data.insert(std::make_pair(0xa235,"YI SYLLABLE MGAP"));
        data.insert(std::make_pair(0xa236,"YI SYLLABLE MGUOX"));
        data.insert(std::make_pair(0xa237,"YI SYLLABLE MGUO"));
        data.insert(std::make_pair(0xa238,"YI SYLLABLE MGUOP"));
        data.insert(std::make_pair(0xa239,"YI SYLLABLE MGOT"));
        data.insert(std::make_pair(0xa23a,"YI SYLLABLE MGOX"));
        data.insert(std::make_pair(0xa23b,"YI SYLLABLE MGO"));
        data.insert(std::make_pair(0xa23c,"YI SYLLABLE MGOP"));
        data.insert(std::make_pair(0xa23d,"YI SYLLABLE MGEX"));
        data.insert(std::make_pair(0xa23e,"YI SYLLABLE MGE"));
        data.insert(std::make_pair(0xa23f,"YI SYLLABLE MGEP"));
        data.insert(std::make_pair(0xa240,"YI SYLLABLE MGUT"));
        data.insert(std::make_pair(0xa241,"YI SYLLABLE MGUX"));
        data.insert(std::make_pair(0xa242,"YI SYLLABLE MGU"));
        data.insert(std::make_pair(0xa243,"YI SYLLABLE MGUP"));
        data.insert(std::make_pair(0xa244,"YI SYLLABLE MGURX"));
        data.insert(std::make_pair(0xa245,"YI SYLLABLE MGUR"));
        data.insert(std::make_pair(0xa246,"YI SYLLABLE HXIT"));
        data.insert(std::make_pair(0xa247,"YI SYLLABLE HXIX"));
        data.insert(std::make_pair(0xa248,"YI SYLLABLE HXI"));
        data.insert(std::make_pair(0xa249,"YI SYLLABLE HXIP"));
        data.insert(std::make_pair(0xa24a,"YI SYLLABLE HXIET"));
        data.insert(std::make_pair(0xa24b,"YI SYLLABLE HXIEX"));
        data.insert(std::make_pair(0xa24c,"YI SYLLABLE HXIE"));
        data.insert(std::make_pair(0xa24d,"YI SYLLABLE HXIEP"));
        data.insert(std::make_pair(0xa24e,"YI SYLLABLE HXAT"));
        data.insert(std::make_pair(0xa24f,"YI SYLLABLE HXAX"));
        data.insert(std::make_pair(0xa250,"YI SYLLABLE HXA"));
        data.insert(std::make_pair(0xa251,"YI SYLLABLE HXAP"));
        data.insert(std::make_pair(0xa252,"YI SYLLABLE HXUOT"));
        data.insert(std::make_pair(0xa253,"YI SYLLABLE HXUOX"));
        data.insert(std::make_pair(0xa254,"YI SYLLABLE HXUO"));
        data.insert(std::make_pair(0xa255,"YI SYLLABLE HXUOP"));
        data.insert(std::make_pair(0xa256,"YI SYLLABLE HXOT"));
        data.insert(std::make_pair(0xa257,"YI SYLLABLE HXOX"));
        data.insert(std::make_pair(0xa258,"YI SYLLABLE HXO"));
        data.insert(std::make_pair(0xa259,"YI SYLLABLE HXOP"));
        data.insert(std::make_pair(0xa25a,"YI SYLLABLE HXEX"));
        data.insert(std::make_pair(0xa25b,"YI SYLLABLE HXE"));
        data.insert(std::make_pair(0xa25c,"YI SYLLABLE HXEP"));
        data.insert(std::make_pair(0xa25d,"YI SYLLABLE NGIEX"));
        data.insert(std::make_pair(0xa25e,"YI SYLLABLE NGIE"));
        data.insert(std::make_pair(0xa25f,"YI SYLLABLE NGIEP"));
        data.insert(std::make_pair(0xa260,"YI SYLLABLE NGAT"));
        data.insert(std::make_pair(0xa261,"YI SYLLABLE NGAX"));
        data.insert(std::make_pair(0xa262,"YI SYLLABLE NGA"));
        data.insert(std::make_pair(0xa263,"YI SYLLABLE NGAP"));
        data.insert(std::make_pair(0xa264,"YI SYLLABLE NGUOT"));
        data.insert(std::make_pair(0xa265,"YI SYLLABLE NGUOX"));
        data.insert(std::make_pair(0xa266,"YI SYLLABLE NGUO"));
        data.insert(std::make_pair(0xa267,"YI SYLLABLE NGOT"));
        data.insert(std::make_pair(0xa268,"YI SYLLABLE NGOX"));
        data.insert(std::make_pair(0xa269,"YI SYLLABLE NGO"));
        data.insert(std::make_pair(0xa26a,"YI SYLLABLE NGOP"));
        data.insert(std::make_pair(0xa26b,"YI SYLLABLE NGEX"));
        data.insert(std::make_pair(0xa26c,"YI SYLLABLE NGE"));
        data.insert(std::make_pair(0xa26d,"YI SYLLABLE NGEP"));
        data.insert(std::make_pair(0xa26e,"YI SYLLABLE HIT"));
        data.insert(std::make_pair(0xa26f,"YI SYLLABLE HIEX"));
        data.insert(std::make_pair(0xa270,"YI SYLLABLE HIE"));
        data.insert(std::make_pair(0xa271,"YI SYLLABLE HAT"));
        data.insert(std::make_pair(0xa272,"YI SYLLABLE HAX"));
        data.insert(std::make_pair(0xa273,"YI SYLLABLE HA"));
        data.insert(std::make_pair(0xa274,"YI SYLLABLE HAP"));
        data.insert(std::make_pair(0xa275,"YI SYLLABLE HUOT"));
        data.insert(std::make_pair(0xa276,"YI SYLLABLE HUOX"));
        data.insert(std::make_pair(0xa277,"YI SYLLABLE HUO"));
        data.insert(std::make_pair(0xa278,"YI SYLLABLE HUOP"));
        data.insert(std::make_pair(0xa279,"YI SYLLABLE HOT"));
        data.insert(std::make_pair(0xa27a,"YI SYLLABLE HOX"));
        data.insert(std::make_pair(0xa27b,"YI SYLLABLE HO"));
        data.insert(std::make_pair(0xa27c,"YI SYLLABLE HOP"));
        data.insert(std::make_pair(0xa27d,"YI SYLLABLE HEX"));
        data.insert(std::make_pair(0xa27e,"YI SYLLABLE HE"));
        data.insert(std::make_pair(0xa27f,"YI SYLLABLE HEP"));
        data.insert(std::make_pair(0xa280,"YI SYLLABLE WAT"));
        data.insert(std::make_pair(0xa281,"YI SYLLABLE WAX"));
        data.insert(std::make_pair(0xa282,"YI SYLLABLE WA"));
        data.insert(std::make_pair(0xa283,"YI SYLLABLE WAP"));
        data.insert(std::make_pair(0xa284,"YI SYLLABLE WUOX"));
        data.insert(std::make_pair(0xa285,"YI SYLLABLE WUO"));
        data.insert(std::make_pair(0xa286,"YI SYLLABLE WUOP"));
        data.insert(std::make_pair(0xa287,"YI SYLLABLE WOX"));
        data.insert(std::make_pair(0xa288,"YI SYLLABLE WO"));
        data.insert(std::make_pair(0xa289,"YI SYLLABLE WOP"));
        data.insert(std::make_pair(0xa28a,"YI SYLLABLE WEX"));
        data.insert(std::make_pair(0xa28b,"YI SYLLABLE WE"));
        data.insert(std::make_pair(0xa28c,"YI SYLLABLE WEP"));
        data.insert(std::make_pair(0xa28d,"YI SYLLABLE ZIT"));
        data.insert(std::make_pair(0xa28e,"YI SYLLABLE ZIX"));
        data.insert(std::make_pair(0xa28f,"YI SYLLABLE ZI"));
        data.insert(std::make_pair(0xa290,"YI SYLLABLE ZIP"));
        data.insert(std::make_pair(0xa291,"YI SYLLABLE ZIEX"));
        data.insert(std::make_pair(0xa292,"YI SYLLABLE ZIE"));
        data.insert(std::make_pair(0xa293,"YI SYLLABLE ZIEP"));
        data.insert(std::make_pair(0xa294,"YI SYLLABLE ZAT"));
        data.insert(std::make_pair(0xa295,"YI SYLLABLE ZAX"));
        data.insert(std::make_pair(0xa296,"YI SYLLABLE ZA"));
        data.insert(std::make_pair(0xa297,"YI SYLLABLE ZAP"));
        data.insert(std::make_pair(0xa298,"YI SYLLABLE ZUOX"));
        data.insert(std::make_pair(0xa299,"YI SYLLABLE ZUO"));
        data.insert(std::make_pair(0xa29a,"YI SYLLABLE ZUOP"));
        data.insert(std::make_pair(0xa29b,"YI SYLLABLE ZOT"));
        data.insert(std::make_pair(0xa29c,"YI SYLLABLE ZOX"));
        data.insert(std::make_pair(0xa29d,"YI SYLLABLE ZO"));
        data.insert(std::make_pair(0xa29e,"YI SYLLABLE ZOP"));
        data.insert(std::make_pair(0xa29f,"YI SYLLABLE ZEX"));
        data.insert(std::make_pair(0xa2a0,"YI SYLLABLE ZE"));
        data.insert(std::make_pair(0xa2a1,"YI SYLLABLE ZEP"));
        data.insert(std::make_pair(0xa2a2,"YI SYLLABLE ZUT"));
        data.insert(std::make_pair(0xa2a3,"YI SYLLABLE ZUX"));
        data.insert(std::make_pair(0xa2a4,"YI SYLLABLE ZU"));
        data.insert(std::make_pair(0xa2a5,"YI SYLLABLE ZUP"));
        data.insert(std::make_pair(0xa2a6,"YI SYLLABLE ZURX"));
        data.insert(std::make_pair(0xa2a7,"YI SYLLABLE ZUR"));
        data.insert(std::make_pair(0xa2a8,"YI SYLLABLE ZYT"));
        data.insert(std::make_pair(0xa2a9,"YI SYLLABLE ZYX"));
        data.insert(std::make_pair(0xa2aa,"YI SYLLABLE ZY"));
        data.insert(std::make_pair(0xa2ab,"YI SYLLABLE ZYP"));
        data.insert(std::make_pair(0xa2ac,"YI SYLLABLE ZYRX"));
        data.insert(std::make_pair(0xa2ad,"YI SYLLABLE ZYR"));
        data.insert(std::make_pair(0xa2ae,"YI SYLLABLE CIT"));
        data.insert(std::make_pair(0xa2af,"YI SYLLABLE CIX"));
        data.insert(std::make_pair(0xa2b0,"YI SYLLABLE CI"));
        data.insert(std::make_pair(0xa2b1,"YI SYLLABLE CIP"));
        data.insert(std::make_pair(0xa2b2,"YI SYLLABLE CIET"));
        data.insert(std::make_pair(0xa2b3,"YI SYLLABLE CIEX"));
        data.insert(std::make_pair(0xa2b4,"YI SYLLABLE CIE"));
        data.insert(std::make_pair(0xa2b5,"YI SYLLABLE CIEP"));
        data.insert(std::make_pair(0xa2b6,"YI SYLLABLE CAT"));
        data.insert(std::make_pair(0xa2b7,"YI SYLLABLE CAX"));
        data.insert(std::make_pair(0xa2b8,"YI SYLLABLE CA"));
        data.insert(std::make_pair(0xa2b9,"YI SYLLABLE CAP"));
        data.insert(std::make_pair(0xa2ba,"YI SYLLABLE CUOX"));
        data.insert(std::make_pair(0xa2bb,"YI SYLLABLE CUO"));
        data.insert(std::make_pair(0xa2bc,"YI SYLLABLE CUOP"));
        data.insert(std::make_pair(0xa2bd,"YI SYLLABLE COT"));
        data.insert(std::make_pair(0xa2be,"YI SYLLABLE COX"));
        data.insert(std::make_pair(0xa2bf,"YI SYLLABLE CO"));
        data.insert(std::make_pair(0xa2c0,"YI SYLLABLE COP"));
        data.insert(std::make_pair(0xa2c1,"YI SYLLABLE CEX"));
        data.insert(std::make_pair(0xa2c2,"YI SYLLABLE CE"));
        data.insert(std::make_pair(0xa2c3,"YI SYLLABLE CEP"));
        data.insert(std::make_pair(0xa2c4,"YI SYLLABLE CUT"));
        data.insert(std::make_pair(0xa2c5,"YI SYLLABLE CUX"));
        data.insert(std::make_pair(0xa2c6,"YI SYLLABLE CU"));
        data.insert(std::make_pair(0xa2c7,"YI SYLLABLE CUP"));
        data.insert(std::make_pair(0xa2c8,"YI SYLLABLE CURX"));
        data.insert(std::make_pair(0xa2c9,"YI SYLLABLE CUR"));
        data.insert(std::make_pair(0xa2ca,"YI SYLLABLE CYT"));
        data.insert(std::make_pair(0xa2cb,"YI SYLLABLE CYX"));
        data.insert(std::make_pair(0xa2cc,"YI SYLLABLE CY"));
        data.insert(std::make_pair(0xa2cd,"YI SYLLABLE CYP"));
        data.insert(std::make_pair(0xa2ce,"YI SYLLABLE CYRX"));
        data.insert(std::make_pair(0xa2cf,"YI SYLLABLE CYR"));
        data.insert(std::make_pair(0xa2d0,"YI SYLLABLE ZZIT"));
        data.insert(std::make_pair(0xa2d1,"YI SYLLABLE ZZIX"));
        data.insert(std::make_pair(0xa2d2,"YI SYLLABLE ZZI"));
        data.insert(std::make_pair(0xa2d3,"YI SYLLABLE ZZIP"));
        data.insert(std::make_pair(0xa2d4,"YI SYLLABLE ZZIET"));
        data.insert(std::make_pair(0xa2d5,"YI SYLLABLE ZZIEX"));
        data.insert(std::make_pair(0xa2d6,"YI SYLLABLE ZZIE"));
        data.insert(std::make_pair(0xa2d7,"YI SYLLABLE ZZIEP"));
        data.insert(std::make_pair(0xa2d8,"YI SYLLABLE ZZAT"));
        data.insert(std::make_pair(0xa2d9,"YI SYLLABLE ZZAX"));
        data.insert(std::make_pair(0xa2da,"YI SYLLABLE ZZA"));
        data.insert(std::make_pair(0xa2db,"YI SYLLABLE ZZAP"));
        data.insert(std::make_pair(0xa2dc,"YI SYLLABLE ZZOX"));
        data.insert(std::make_pair(0xa2dd,"YI SYLLABLE ZZO"));
        data.insert(std::make_pair(0xa2de,"YI SYLLABLE ZZOP"));
        data.insert(std::make_pair(0xa2df,"YI SYLLABLE ZZEX"));
        data.insert(std::make_pair(0xa2e0,"YI SYLLABLE ZZE"));
        data.insert(std::make_pair(0xa2e1,"YI SYLLABLE ZZEP"));
        data.insert(std::make_pair(0xa2e2,"YI SYLLABLE ZZUX"));
        data.insert(std::make_pair(0xa2e3,"YI SYLLABLE ZZU"));
        data.insert(std::make_pair(0xa2e4,"YI SYLLABLE ZZUP"));
        data.insert(std::make_pair(0xa2e5,"YI SYLLABLE ZZURX"));
        data.insert(std::make_pair(0xa2e6,"YI SYLLABLE ZZUR"));
        data.insert(std::make_pair(0xa2e7,"YI SYLLABLE ZZYT"));
        data.insert(std::make_pair(0xa2e8,"YI SYLLABLE ZZYX"));
        data.insert(std::make_pair(0xa2e9,"YI SYLLABLE ZZY"));
        data.insert(std::make_pair(0xa2ea,"YI SYLLABLE ZZYP"));
        data.insert(std::make_pair(0xa2eb,"YI SYLLABLE ZZYRX"));
        data.insert(std::make_pair(0xa2ec,"YI SYLLABLE ZZYR"));
        data.insert(std::make_pair(0xa2ed,"YI SYLLABLE NZIT"));
        data.insert(std::make_pair(0xa2ee,"YI SYLLABLE NZIX"));
        data.insert(std::make_pair(0xa2ef,"YI SYLLABLE NZI"));
        data.insert(std::make_pair(0xa2f0,"YI SYLLABLE NZIP"));
        data.insert(std::make_pair(0xa2f1,"YI SYLLABLE NZIEX"));
        data.insert(std::make_pair(0xa2f2,"YI SYLLABLE NZIE"));
        data.insert(std::make_pair(0xa2f3,"YI SYLLABLE NZIEP"));
        data.insert(std::make_pair(0xa2f4,"YI SYLLABLE NZAT"));
        data.insert(std::make_pair(0xa2f5,"YI SYLLABLE NZAX"));
        data.insert(std::make_pair(0xa2f6,"YI SYLLABLE NZA"));
        data.insert(std::make_pair(0xa2f7,"YI SYLLABLE NZAP"));
        data.insert(std::make_pair(0xa2f8,"YI SYLLABLE NZUOX"));
        data.insert(std::make_pair(0xa2f9,"YI SYLLABLE NZUO"));
        data.insert(std::make_pair(0xa2fa,"YI SYLLABLE NZOX"));
        data.insert(std::make_pair(0xa2fb,"YI SYLLABLE NZOP"));
        data.insert(std::make_pair(0xa2fc,"YI SYLLABLE NZEX"));
        data.insert(std::make_pair(0xa2fd,"YI SYLLABLE NZE"));
        data.insert(std::make_pair(0xa2fe,"YI SYLLABLE NZUX"));
        data.insert(std::make_pair(0xa2ff,"YI SYLLABLE NZU"));
        data.insert(std::make_pair(0xa300,"YI SYLLABLE NZUP"));
        data.insert(std::make_pair(0xa301,"YI SYLLABLE NZURX"));
        data.insert(std::make_pair(0xa302,"YI SYLLABLE NZUR"));
        data.insert(std::make_pair(0xa303,"YI SYLLABLE NZYT"));
        data.insert(std::make_pair(0xa304,"YI SYLLABLE NZYX"));
        data.insert(std::make_pair(0xa305,"YI SYLLABLE NZY"));
        data.insert(std::make_pair(0xa306,"YI SYLLABLE NZYP"));
        data.insert(std::make_pair(0xa307,"YI SYLLABLE NZYRX"));
        data.insert(std::make_pair(0xa308,"YI SYLLABLE NZYR"));
        data.insert(std::make_pair(0xa309,"YI SYLLABLE SIT"));
        data.insert(std::make_pair(0xa30a,"YI SYLLABLE SIX"));
        data.insert(std::make_pair(0xa30b,"YI SYLLABLE SI"));
        data.insert(std::make_pair(0xa30c,"YI SYLLABLE SIP"));
        data.insert(std::make_pair(0xa30d,"YI SYLLABLE SIEX"));
        data.insert(std::make_pair(0xa30e,"YI SYLLABLE SIE"));
        data.insert(std::make_pair(0xa30f,"YI SYLLABLE SIEP"));
        data.insert(std::make_pair(0xa310,"YI SYLLABLE SAT"));
        data.insert(std::make_pair(0xa311,"YI SYLLABLE SAX"));
        data.insert(std::make_pair(0xa312,"YI SYLLABLE SA"));
        data.insert(std::make_pair(0xa313,"YI SYLLABLE SAP"));
        data.insert(std::make_pair(0xa314,"YI SYLLABLE SUOX"));
        data.insert(std::make_pair(0xa315,"YI SYLLABLE SUO"));
        data.insert(std::make_pair(0xa316,"YI SYLLABLE SUOP"));
        data.insert(std::make_pair(0xa317,"YI SYLLABLE SOT"));
        data.insert(std::make_pair(0xa318,"YI SYLLABLE SOX"));
        data.insert(std::make_pair(0xa319,"YI SYLLABLE SO"));
        data.insert(std::make_pair(0xa31a,"YI SYLLABLE SOP"));
        data.insert(std::make_pair(0xa31b,"YI SYLLABLE SEX"));
        data.insert(std::make_pair(0xa31c,"YI SYLLABLE SE"));
        data.insert(std::make_pair(0xa31d,"YI SYLLABLE SEP"));
        data.insert(std::make_pair(0xa31e,"YI SYLLABLE SUT"));
        data.insert(std::make_pair(0xa31f,"YI SYLLABLE SUX"));
        data.insert(std::make_pair(0xa320,"YI SYLLABLE SU"));
        data.insert(std::make_pair(0xa321,"YI SYLLABLE SUP"));
        data.insert(std::make_pair(0xa322,"YI SYLLABLE SURX"));
        data.insert(std::make_pair(0xa323,"YI SYLLABLE SUR"));
        data.insert(std::make_pair(0xa324,"YI SYLLABLE SYT"));
        data.insert(std::make_pair(0xa325,"YI SYLLABLE SYX"));
        data.insert(std::make_pair(0xa326,"YI SYLLABLE SY"));
        data.insert(std::make_pair(0xa327,"YI SYLLABLE SYP"));
        data.insert(std::make_pair(0xa328,"YI SYLLABLE SYRX"));
        data.insert(std::make_pair(0xa329,"YI SYLLABLE SYR"));
        data.insert(std::make_pair(0xa32a,"YI SYLLABLE SSIT"));
        data.insert(std::make_pair(0xa32b,"YI SYLLABLE SSIX"));
        data.insert(std::make_pair(0xa32c,"YI SYLLABLE SSI"));
        data.insert(std::make_pair(0xa32d,"YI SYLLABLE SSIP"));
        data.insert(std::make_pair(0xa32e,"YI SYLLABLE SSIEX"));
        data.insert(std::make_pair(0xa32f,"YI SYLLABLE SSIE"));
        data.insert(std::make_pair(0xa330,"YI SYLLABLE SSIEP"));
        data.insert(std::make_pair(0xa331,"YI SYLLABLE SSAT"));
        data.insert(std::make_pair(0xa332,"YI SYLLABLE SSAX"));
        data.insert(std::make_pair(0xa333,"YI SYLLABLE SSA"));
        data.insert(std::make_pair(0xa334,"YI SYLLABLE SSAP"));
        data.insert(std::make_pair(0xa335,"YI SYLLABLE SSOT"));
        data.insert(std::make_pair(0xa336,"YI SYLLABLE SSOX"));
        data.insert(std::make_pair(0xa337,"YI SYLLABLE SSO"));
        data.insert(std::make_pair(0xa338,"YI SYLLABLE SSOP"));
        data.insert(std::make_pair(0xa339,"YI SYLLABLE SSEX"));
        data.insert(std::make_pair(0xa33a,"YI SYLLABLE SSE"));
        data.insert(std::make_pair(0xa33b,"YI SYLLABLE SSEP"));
        data.insert(std::make_pair(0xa33c,"YI SYLLABLE SSUT"));
        data.insert(std::make_pair(0xa33d,"YI SYLLABLE SSUX"));
        data.insert(std::make_pair(0xa33e,"YI SYLLABLE SSU"));
        data.insert(std::make_pair(0xa33f,"YI SYLLABLE SSUP"));
        data.insert(std::make_pair(0xa340,"YI SYLLABLE SSYT"));
        data.insert(std::make_pair(0xa341,"YI SYLLABLE SSYX"));
        data.insert(std::make_pair(0xa342,"YI SYLLABLE SSY"));
        data.insert(std::make_pair(0xa343,"YI SYLLABLE SSYP"));
        data.insert(std::make_pair(0xa344,"YI SYLLABLE SSYRX"));
        data.insert(std::make_pair(0xa345,"YI SYLLABLE SSYR"));
        data.insert(std::make_pair(0xa346,"YI SYLLABLE ZHAT"));
        data.insert(std::make_pair(0xa347,"YI SYLLABLE ZHAX"));
        data.insert(std::make_pair(0xa348,"YI SYLLABLE ZHA"));
        data.insert(std::make_pair(0xa349,"YI SYLLABLE ZHAP"));
        data.insert(std::make_pair(0xa34a,"YI SYLLABLE ZHUOX"));
        data.insert(std::make_pair(0xa34b,"YI SYLLABLE ZHUO"));
        data.insert(std::make_pair(0xa34c,"YI SYLLABLE ZHUOP"));
        data.insert(std::make_pair(0xa34d,"YI SYLLABLE ZHOT"));
        data.insert(std::make_pair(0xa34e,"YI SYLLABLE ZHOX"));
        data.insert(std::make_pair(0xa34f,"YI SYLLABLE ZHO"));
        data.insert(std::make_pair(0xa350,"YI SYLLABLE ZHOP"));
        data.insert(std::make_pair(0xa351,"YI SYLLABLE ZHET"));
        data.insert(std::make_pair(0xa352,"YI SYLLABLE ZHEX"));
        data.insert(std::make_pair(0xa353,"YI SYLLABLE ZHE"));
        data.insert(std::make_pair(0xa354,"YI SYLLABLE ZHEP"));
        data.insert(std::make_pair(0xa355,"YI SYLLABLE ZHUT"));
        data.insert(std::make_pair(0xa356,"YI SYLLABLE ZHUX"));
        data.insert(std::make_pair(0xa357,"YI SYLLABLE ZHU"));
        data.insert(std::make_pair(0xa358,"YI SYLLABLE ZHUP"));
        data.insert(std::make_pair(0xa359,"YI SYLLABLE ZHURX"));
        data.insert(std::make_pair(0xa35a,"YI SYLLABLE ZHUR"));
        data.insert(std::make_pair(0xa35b,"YI SYLLABLE ZHYT"));
        data.insert(std::make_pair(0xa35c,"YI SYLLABLE ZHYX"));
        data.insert(std::make_pair(0xa35d,"YI SYLLABLE ZHY"));
        data.insert(std::make_pair(0xa35e,"YI SYLLABLE ZHYP"));
        data.insert(std::make_pair(0xa35f,"YI SYLLABLE ZHYRX"));
        data.insert(std::make_pair(0xa360,"YI SYLLABLE ZHYR"));
        data.insert(std::make_pair(0xa361,"YI SYLLABLE CHAT"));
        data.insert(std::make_pair(0xa362,"YI SYLLABLE CHAX"));
        data.insert(std::make_pair(0xa363,"YI SYLLABLE CHA"));
        data.insert(std::make_pair(0xa364,"YI SYLLABLE CHAP"));
        data.insert(std::make_pair(0xa365,"YI SYLLABLE CHUOT"));
        data.insert(std::make_pair(0xa366,"YI SYLLABLE CHUOX"));
        data.insert(std::make_pair(0xa367,"YI SYLLABLE CHUO"));
        data.insert(std::make_pair(0xa368,"YI SYLLABLE CHUOP"));
        data.insert(std::make_pair(0xa369,"YI SYLLABLE CHOT"));
        data.insert(std::make_pair(0xa36a,"YI SYLLABLE CHOX"));
        data.insert(std::make_pair(0xa36b,"YI SYLLABLE CHO"));
        data.insert(std::make_pair(0xa36c,"YI SYLLABLE CHOP"));
        data.insert(std::make_pair(0xa36d,"YI SYLLABLE CHET"));
        data.insert(std::make_pair(0xa36e,"YI SYLLABLE CHEX"));
        data.insert(std::make_pair(0xa36f,"YI SYLLABLE CHE"));
        data.insert(std::make_pair(0xa370,"YI SYLLABLE CHEP"));
        data.insert(std::make_pair(0xa371,"YI SYLLABLE CHUX"));
        data.insert(std::make_pair(0xa372,"YI SYLLABLE CHU"));
        data.insert(std::make_pair(0xa373,"YI SYLLABLE CHUP"));
        data.insert(std::make_pair(0xa374,"YI SYLLABLE CHURX"));
        data.insert(std::make_pair(0xa375,"YI SYLLABLE CHUR"));
        data.insert(std::make_pair(0xa376,"YI SYLLABLE CHYT"));
        data.insert(std::make_pair(0xa377,"YI SYLLABLE CHYX"));
        data.insert(std::make_pair(0xa378,"YI SYLLABLE CHY"));
        data.insert(std::make_pair(0xa379,"YI SYLLABLE CHYP"));
        data.insert(std::make_pair(0xa37a,"YI SYLLABLE CHYRX"));
        data.insert(std::make_pair(0xa37b,"YI SYLLABLE CHYR"));
        data.insert(std::make_pair(0xa37c,"YI SYLLABLE RRAX"));
        data.insert(std::make_pair(0xa37d,"YI SYLLABLE RRA"));
        data.insert(std::make_pair(0xa37e,"YI SYLLABLE RRUOX"));
        data.insert(std::make_pair(0xa37f,"YI SYLLABLE RRUO"));
        data.insert(std::make_pair(0xa380,"YI SYLLABLE RROT"));
        data.insert(std::make_pair(0xa381,"YI SYLLABLE RROX"));
        data.insert(std::make_pair(0xa382,"YI SYLLABLE RRO"));
        data.insert(std::make_pair(0xa383,"YI SYLLABLE RROP"));
        data.insert(std::make_pair(0xa384,"YI SYLLABLE RRET"));
        data.insert(std::make_pair(0xa385,"YI SYLLABLE RREX"));
        data.insert(std::make_pair(0xa386,"YI SYLLABLE RRE"));
        data.insert(std::make_pair(0xa387,"YI SYLLABLE RREP"));
        data.insert(std::make_pair(0xa388,"YI SYLLABLE RRUT"));
        data.insert(std::make_pair(0xa389,"YI SYLLABLE RRUX"));
        data.insert(std::make_pair(0xa38a,"YI SYLLABLE RRU"));
        data.insert(std::make_pair(0xa38b,"YI SYLLABLE RRUP"));
        data.insert(std::make_pair(0xa38c,"YI SYLLABLE RRURX"));
        data.insert(std::make_pair(0xa38d,"YI SYLLABLE RRUR"));
        data.insert(std::make_pair(0xa38e,"YI SYLLABLE RRYT"));
        data.insert(std::make_pair(0xa38f,"YI SYLLABLE RRYX"));
        data.insert(std::make_pair(0xa390,"YI SYLLABLE RRY"));
        data.insert(std::make_pair(0xa391,"YI SYLLABLE RRYP"));
        data.insert(std::make_pair(0xa392,"YI SYLLABLE RRYRX"));
        data.insert(std::make_pair(0xa393,"YI SYLLABLE RRYR"));
        data.insert(std::make_pair(0xa394,"YI SYLLABLE NRAT"));
        data.insert(std::make_pair(0xa395,"YI SYLLABLE NRAX"));
        data.insert(std::make_pair(0xa396,"YI SYLLABLE NRA"));
        data.insert(std::make_pair(0xa397,"YI SYLLABLE NRAP"));
        data.insert(std::make_pair(0xa398,"YI SYLLABLE NROX"));
        data.insert(std::make_pair(0xa399,"YI SYLLABLE NRO"));
        data.insert(std::make_pair(0xa39a,"YI SYLLABLE NROP"));
        data.insert(std::make_pair(0xa39b,"YI SYLLABLE NRET"));
        data.insert(std::make_pair(0xa39c,"YI SYLLABLE NREX"));
        data.insert(std::make_pair(0xa39d,"YI SYLLABLE NRE"));
        data.insert(std::make_pair(0xa39e,"YI SYLLABLE NREP"));
        data.insert(std::make_pair(0xa39f,"YI SYLLABLE NRUT"));
        data.insert(std::make_pair(0xa3a0,"YI SYLLABLE NRUX"));
        data.insert(std::make_pair(0xa3a1,"YI SYLLABLE NRU"));
        data.insert(std::make_pair(0xa3a2,"YI SYLLABLE NRUP"));
        data.insert(std::make_pair(0xa3a3,"YI SYLLABLE NRURX"));
        data.insert(std::make_pair(0xa3a4,"YI SYLLABLE NRUR"));
        data.insert(std::make_pair(0xa3a5,"YI SYLLABLE NRYT"));
        data.insert(std::make_pair(0xa3a6,"YI SYLLABLE NRYX"));
        data.insert(std::make_pair(0xa3a7,"YI SYLLABLE NRY"));
        data.insert(std::make_pair(0xa3a8,"YI SYLLABLE NRYP"));
        data.insert(std::make_pair(0xa3a9,"YI SYLLABLE NRYRX"));
        data.insert(std::make_pair(0xa3aa,"YI SYLLABLE NRYR"));
        data.insert(std::make_pair(0xa3ab,"YI SYLLABLE SHAT"));
        data.insert(std::make_pair(0xa3ac,"YI SYLLABLE SHAX"));
        data.insert(std::make_pair(0xa3ad,"YI SYLLABLE SHA"));
        data.insert(std::make_pair(0xa3ae,"YI SYLLABLE SHAP"));
        data.insert(std::make_pair(0xa3af,"YI SYLLABLE SHUOX"));
        data.insert(std::make_pair(0xa3b0,"YI SYLLABLE SHUO"));
        data.insert(std::make_pair(0xa3b1,"YI SYLLABLE SHUOP"));
        data.insert(std::make_pair(0xa3b2,"YI SYLLABLE SHOT"));
        data.insert(std::make_pair(0xa3b3,"YI SYLLABLE SHOX"));
        data.insert(std::make_pair(0xa3b4,"YI SYLLABLE SHO"));
        data.insert(std::make_pair(0xa3b5,"YI SYLLABLE SHOP"));
        data.insert(std::make_pair(0xa3b6,"YI SYLLABLE SHET"));
        data.insert(std::make_pair(0xa3b7,"YI SYLLABLE SHEX"));
        data.insert(std::make_pair(0xa3b8,"YI SYLLABLE SHE"));
        data.insert(std::make_pair(0xa3b9,"YI SYLLABLE SHEP"));
        data.insert(std::make_pair(0xa3ba,"YI SYLLABLE SHUT"));
        data.insert(std::make_pair(0xa3bb,"YI SYLLABLE SHUX"));
        data.insert(std::make_pair(0xa3bc,"YI SYLLABLE SHU"));
        data.insert(std::make_pair(0xa3bd,"YI SYLLABLE SHUP"));
        data.insert(std::make_pair(0xa3be,"YI SYLLABLE SHURX"));
        data.insert(std::make_pair(0xa3bf,"YI SYLLABLE SHUR"));
        data.insert(std::make_pair(0xa3c0,"YI SYLLABLE SHYT"));
        data.insert(std::make_pair(0xa3c1,"YI SYLLABLE SHYX"));
        data.insert(std::make_pair(0xa3c2,"YI SYLLABLE SHY"));
        data.insert(std::make_pair(0xa3c3,"YI SYLLABLE SHYP"));
        data.insert(std::make_pair(0xa3c4,"YI SYLLABLE SHYRX"));
        data.insert(std::make_pair(0xa3c5,"YI SYLLABLE SHYR"));
        data.insert(std::make_pair(0xa3c6,"YI SYLLABLE RAT"));
        data.insert(std::make_pair(0xa3c7,"YI SYLLABLE RAX"));
        data.insert(std::make_pair(0xa3c8,"YI SYLLABLE RA"));
        data.insert(std::make_pair(0xa3c9,"YI SYLLABLE RAP"));
        data.insert(std::make_pair(0xa3ca,"YI SYLLABLE RUOX"));
        data.insert(std::make_pair(0xa3cb,"YI SYLLABLE RUO"));
        data.insert(std::make_pair(0xa3cc,"YI SYLLABLE RUOP"));
        data.insert(std::make_pair(0xa3cd,"YI SYLLABLE ROT"));
        data.insert(std::make_pair(0xa3ce,"YI SYLLABLE ROX"));
        data.insert(std::make_pair(0xa3cf,"YI SYLLABLE RO"));
        data.insert(std::make_pair(0xa3d0,"YI SYLLABLE ROP"));
        data.insert(std::make_pair(0xa3d1,"YI SYLLABLE REX"));
        data.insert(std::make_pair(0xa3d2,"YI SYLLABLE RE"));
        data.insert(std::make_pair(0xa3d3,"YI SYLLABLE REP"));
        data.insert(std::make_pair(0xa3d4,"YI SYLLABLE RUT"));
        data.insert(std::make_pair(0xa3d5,"YI SYLLABLE RUX"));
        data.insert(std::make_pair(0xa3d6,"YI SYLLABLE RU"));
        data.insert(std::make_pair(0xa3d7,"YI SYLLABLE RUP"));
        data.insert(std::make_pair(0xa3d8,"YI SYLLABLE RURX"));
        data.insert(std::make_pair(0xa3d9,"YI SYLLABLE RUR"));
        data.insert(std::make_pair(0xa3da,"YI SYLLABLE RYT"));
        data.insert(std::make_pair(0xa3db,"YI SYLLABLE RYX"));
        data.insert(std::make_pair(0xa3dc,"YI SYLLABLE RY"));
        data.insert(std::make_pair(0xa3dd,"YI SYLLABLE RYP"));
        data.insert(std::make_pair(0xa3de,"YI SYLLABLE RYRX"));
        data.insert(std::make_pair(0xa3df,"YI SYLLABLE RYR"));
        data.insert(std::make_pair(0xa3e0,"YI SYLLABLE JIT"));
        data.insert(std::make_pair(0xa3e1,"YI SYLLABLE JIX"));
        data.insert(std::make_pair(0xa3e2,"YI SYLLABLE JI"));
        data.insert(std::make_pair(0xa3e3,"YI SYLLABLE JIP"));
        data.insert(std::make_pair(0xa3e4,"YI SYLLABLE JIET"));
        data.insert(std::make_pair(0xa3e5,"YI SYLLABLE JIEX"));
        data.insert(std::make_pair(0xa3e6,"YI SYLLABLE JIE"));
        data.insert(std::make_pair(0xa3e7,"YI SYLLABLE JIEP"));
        data.insert(std::make_pair(0xa3e8,"YI SYLLABLE JUOT"));
        data.insert(std::make_pair(0xa3e9,"YI SYLLABLE JUOX"));
        data.insert(std::make_pair(0xa3ea,"YI SYLLABLE JUO"));
        data.insert(std::make_pair(0xa3eb,"YI SYLLABLE JUOP"));
        data.insert(std::make_pair(0xa3ec,"YI SYLLABLE JOT"));
        data.insert(std::make_pair(0xa3ed,"YI SYLLABLE JOX"));
        data.insert(std::make_pair(0xa3ee,"YI SYLLABLE JO"));
        data.insert(std::make_pair(0xa3ef,"YI SYLLABLE JOP"));
        data.insert(std::make_pair(0xa3f0,"YI SYLLABLE JUT"));
        data.insert(std::make_pair(0xa3f1,"YI SYLLABLE JUX"));
        data.insert(std::make_pair(0xa3f2,"YI SYLLABLE JU"));
        data.insert(std::make_pair(0xa3f3,"YI SYLLABLE JUP"));
        data.insert(std::make_pair(0xa3f4,"YI SYLLABLE JURX"));
        data.insert(std::make_pair(0xa3f5,"YI SYLLABLE JUR"));
        data.insert(std::make_pair(0xa3f6,"YI SYLLABLE JYT"));
        data.insert(std::make_pair(0xa3f7,"YI SYLLABLE JYX"));
        data.insert(std::make_pair(0xa3f8,"YI SYLLABLE JY"));
        data.insert(std::make_pair(0xa3f9,"YI SYLLABLE JYP"));
        data.insert(std::make_pair(0xa3fa,"YI SYLLABLE JYRX"));
        data.insert(std::make_pair(0xa3fb,"YI SYLLABLE JYR"));
        data.insert(std::make_pair(0xa3fc,"YI SYLLABLE QIT"));
        data.insert(std::make_pair(0xa3fd,"YI SYLLABLE QIX"));
        data.insert(std::make_pair(0xa3fe,"YI SYLLABLE QI"));
        data.insert(std::make_pair(0xa3ff,"YI SYLLABLE QIP"));
        data.insert(std::make_pair(0xa400,"YI SYLLABLE QIET"));
        data.insert(std::make_pair(0xa401,"YI SYLLABLE QIEX"));
        data.insert(std::make_pair(0xa402,"YI SYLLABLE QIE"));
        data.insert(std::make_pair(0xa403,"YI SYLLABLE QIEP"));
        data.insert(std::make_pair(0xa404,"YI SYLLABLE QUOT"));
        data.insert(std::make_pair(0xa405,"YI SYLLABLE QUOX"));
        data.insert(std::make_pair(0xa406,"YI SYLLABLE QUO"));
        data.insert(std::make_pair(0xa407,"YI SYLLABLE QUOP"));
        data.insert(std::make_pair(0xa408,"YI SYLLABLE QOT"));
        data.insert(std::make_pair(0xa409,"YI SYLLABLE QOX"));
        data.insert(std::make_pair(0xa40a,"YI SYLLABLE QO"));
        data.insert(std::make_pair(0xa40b,"YI SYLLABLE QOP"));
        data.insert(std::make_pair(0xa40c,"YI SYLLABLE QUT"));
        data.insert(std::make_pair(0xa40d,"YI SYLLABLE QUX"));
        data.insert(std::make_pair(0xa40e,"YI SYLLABLE QU"));
        data.insert(std::make_pair(0xa40f,"YI SYLLABLE QUP"));
        data.insert(std::make_pair(0xa410,"YI SYLLABLE QURX"));
        data.insert(std::make_pair(0xa411,"YI SYLLABLE QUR"));
        data.insert(std::make_pair(0xa412,"YI SYLLABLE QYT"));
        data.insert(std::make_pair(0xa413,"YI SYLLABLE QYX"));
        data.insert(std::make_pair(0xa414,"YI SYLLABLE QY"));
        data.insert(std::make_pair(0xa415,"YI SYLLABLE QYP"));
        data.insert(std::make_pair(0xa416,"YI SYLLABLE QYRX"));
        data.insert(std::make_pair(0xa417,"YI SYLLABLE QYR"));
        data.insert(std::make_pair(0xa418,"YI SYLLABLE JJIT"));
        data.insert(std::make_pair(0xa419,"YI SYLLABLE JJIX"));
        data.insert(std::make_pair(0xa41a,"YI SYLLABLE JJI"));
        data.insert(std::make_pair(0xa41b,"YI SYLLABLE JJIP"));
        data.insert(std::make_pair(0xa41c,"YI SYLLABLE JJIET"));
        data.insert(std::make_pair(0xa41d,"YI SYLLABLE JJIEX"));
        data.insert(std::make_pair(0xa41e,"YI SYLLABLE JJIE"));
        data.insert(std::make_pair(0xa41f,"YI SYLLABLE JJIEP"));
        data.insert(std::make_pair(0xa420,"YI SYLLABLE JJUOX"));
        data.insert(std::make_pair(0xa421,"YI SYLLABLE JJUO"));
        data.insert(std::make_pair(0xa422,"YI SYLLABLE JJUOP"));
        data.insert(std::make_pair(0xa423,"YI SYLLABLE JJOT"));
        data.insert(std::make_pair(0xa424,"YI SYLLABLE JJOX"));
        data.insert(std::make_pair(0xa425,"YI SYLLABLE JJO"));
        data.insert(std::make_pair(0xa426,"YI SYLLABLE JJOP"));
        data.insert(std::make_pair(0xa427,"YI SYLLABLE JJUT"));
        data.insert(std::make_pair(0xa428,"YI SYLLABLE JJUX"));
        data.insert(std::make_pair(0xa429,"YI SYLLABLE JJU"));
        data.insert(std::make_pair(0xa42a,"YI SYLLABLE JJUP"));
        data.insert(std::make_pair(0xa42b,"YI SYLLABLE JJURX"));
        data.insert(std::make_pair(0xa42c,"YI SYLLABLE JJUR"));
        data.insert(std::make_pair(0xa42d,"YI SYLLABLE JJYT"));
        data.insert(std::make_pair(0xa42e,"YI SYLLABLE JJYX"));
        data.insert(std::make_pair(0xa42f,"YI SYLLABLE JJY"));
        data.insert(std::make_pair(0xa430,"YI SYLLABLE JJYP"));
        data.insert(std::make_pair(0xa431,"YI SYLLABLE NJIT"));
        data.insert(std::make_pair(0xa432,"YI SYLLABLE NJIX"));
        data.insert(std::make_pair(0xa433,"YI SYLLABLE NJI"));
        data.insert(std::make_pair(0xa434,"YI SYLLABLE NJIP"));
        data.insert(std::make_pair(0xa435,"YI SYLLABLE NJIET"));
        data.insert(std::make_pair(0xa436,"YI SYLLABLE NJIEX"));
        data.insert(std::make_pair(0xa437,"YI SYLLABLE NJIE"));
        data.insert(std::make_pair(0xa438,"YI SYLLABLE NJIEP"));
        data.insert(std::make_pair(0xa439,"YI SYLLABLE NJUOX"));
        data.insert(std::make_pair(0xa43a,"YI SYLLABLE NJUO"));
        data.insert(std::make_pair(0xa43b,"YI SYLLABLE NJOT"));
        data.insert(std::make_pair(0xa43c,"YI SYLLABLE NJOX"));
        data.insert(std::make_pair(0xa43d,"YI SYLLABLE NJO"));
        data.insert(std::make_pair(0xa43e,"YI SYLLABLE NJOP"));
        data.insert(std::make_pair(0xa43f,"YI SYLLABLE NJUX"));
        data.insert(std::make_pair(0xa440,"YI SYLLABLE NJU"));
        data.insert(std::make_pair(0xa441,"YI SYLLABLE NJUP"));
        data.insert(std::make_pair(0xa442,"YI SYLLABLE NJURX"));
        data.insert(std::make_pair(0xa443,"YI SYLLABLE NJUR"));
        data.insert(std::make_pair(0xa444,"YI SYLLABLE NJYT"));
        data.insert(std::make_pair(0xa445,"YI SYLLABLE NJYX"));
        data.insert(std::make_pair(0xa446,"YI SYLLABLE NJY"));
        data.insert(std::make_pair(0xa447,"YI SYLLABLE NJYP"));
        data.insert(std::make_pair(0xa448,"YI SYLLABLE NJYRX"));
        data.insert(std::make_pair(0xa449,"YI SYLLABLE NJYR"));
        data.insert(std::make_pair(0xa44a,"YI SYLLABLE NYIT"));
        data.insert(std::make_pair(0xa44b,"YI SYLLABLE NYIX"));
        data.insert(std::make_pair(0xa44c,"YI SYLLABLE NYI"));
        data.insert(std::make_pair(0xa44d,"YI SYLLABLE NYIP"));
        data.insert(std::make_pair(0xa44e,"YI SYLLABLE NYIET"));
        data.insert(std::make_pair(0xa44f,"YI SYLLABLE NYIEX"));
        data.insert(std::make_pair(0xa450,"YI SYLLABLE NYIE"));
        data.insert(std::make_pair(0xa451,"YI SYLLABLE NYIEP"));
        data.insert(std::make_pair(0xa452,"YI SYLLABLE NYUOX"));
        data.insert(std::make_pair(0xa453,"YI SYLLABLE NYUO"));
        data.insert(std::make_pair(0xa454,"YI SYLLABLE NYUOP"));
        data.insert(std::make_pair(0xa455,"YI SYLLABLE NYOT"));
        data.insert(std::make_pair(0xa456,"YI SYLLABLE NYOX"));
        data.insert(std::make_pair(0xa457,"YI SYLLABLE NYO"));
        data.insert(std::make_pair(0xa458,"YI SYLLABLE NYOP"));
        data.insert(std::make_pair(0xa459,"YI SYLLABLE NYUT"));
        data.insert(std::make_pair(0xa45a,"YI SYLLABLE NYUX"));
        data.insert(std::make_pair(0xa45b,"YI SYLLABLE NYU"));
        data.insert(std::make_pair(0xa45c,"YI SYLLABLE NYUP"));
        data.insert(std::make_pair(0xa45d,"YI SYLLABLE XIT"));
        data.insert(std::make_pair(0xa45e,"YI SYLLABLE XIX"));
        data.insert(std::make_pair(0xa45f,"YI SYLLABLE XI"));
        data.insert(std::make_pair(0xa460,"YI SYLLABLE XIP"));
        data.insert(std::make_pair(0xa461,"YI SYLLABLE XIET"));
        data.insert(std::make_pair(0xa462,"YI SYLLABLE XIEX"));
        data.insert(std::make_pair(0xa463,"YI SYLLABLE XIE"));
        data.insert(std::make_pair(0xa464,"YI SYLLABLE XIEP"));
        data.insert(std::make_pair(0xa465,"YI SYLLABLE XUOX"));
        data.insert(std::make_pair(0xa466,"YI SYLLABLE XUO"));
        data.insert(std::make_pair(0xa467,"YI SYLLABLE XOT"));
        data.insert(std::make_pair(0xa468,"YI SYLLABLE XOX"));
        data.insert(std::make_pair(0xa469,"YI SYLLABLE XO"));
        data.insert(std::make_pair(0xa46a,"YI SYLLABLE XOP"));
        data.insert(std::make_pair(0xa46b,"YI SYLLABLE XYT"));
        data.insert(std::make_pair(0xa46c,"YI SYLLABLE XYX"));
        data.insert(std::make_pair(0xa46d,"YI SYLLABLE XY"));
        data.insert(std::make_pair(0xa46e,"YI SYLLABLE XYP"));
        data.insert(std::make_pair(0xa46f,"YI SYLLABLE XYRX"));
        data.insert(std::make_pair(0xa470,"YI SYLLABLE XYR"));
        data.insert(std::make_pair(0xa471,"YI SYLLABLE YIT"));
        data.insert(std::make_pair(0xa472,"YI SYLLABLE YIX"));
        data.insert(std::make_pair(0xa473,"YI SYLLABLE YI"));
        data.insert(std::make_pair(0xa474,"YI SYLLABLE YIP"));
        data.insert(std::make_pair(0xa475,"YI SYLLABLE YIET"));
        data.insert(std::make_pair(0xa476,"YI SYLLABLE YIEX"));
        data.insert(std::make_pair(0xa477,"YI SYLLABLE YIE"));
        data.insert(std::make_pair(0xa478,"YI SYLLABLE YIEP"));
        data.insert(std::make_pair(0xa479,"YI SYLLABLE YUOT"));
        data.insert(std::make_pair(0xa47a,"YI SYLLABLE YUOX"));
        data.insert(std::make_pair(0xa47b,"YI SYLLABLE YUO"));
        data.insert(std::make_pair(0xa47c,"YI SYLLABLE YUOP"));
        data.insert(std::make_pair(0xa47d,"YI SYLLABLE YOT"));
        data.insert(std::make_pair(0xa47e,"YI SYLLABLE YOX"));
        data.insert(std::make_pair(0xa47f,"YI SYLLABLE YO"));
        data.insert(std::make_pair(0xa480,"YI SYLLABLE YOP"));
        data.insert(std::make_pair(0xa481,"YI SYLLABLE YUT"));
        data.insert(std::make_pair(0xa482,"YI SYLLABLE YUX"));
        data.insert(std::make_pair(0xa483,"YI SYLLABLE YU"));
        data.insert(std::make_pair(0xa484,"YI SYLLABLE YUP"));
        data.insert(std::make_pair(0xa485,"YI SYLLABLE YURX"));
        data.insert(std::make_pair(0xa486,"YI SYLLABLE YUR"));
        data.insert(std::make_pair(0xa487,"YI SYLLABLE YYT"));
        data.insert(std::make_pair(0xa488,"YI SYLLABLE YYX"));
        data.insert(std::make_pair(0xa489,"YI SYLLABLE YY"));
        data.insert(std::make_pair(0xa48a,"YI SYLLABLE YYP"));
        data.insert(std::make_pair(0xa48b,"YI SYLLABLE YYRX"));
        data.insert(std::make_pair(0xa48c,"YI SYLLABLE YYR"));
        data.insert(std::make_pair(0xa490,"YI RADICAL QOT"));
        data.insert(std::make_pair(0xa491,"YI RADICAL LI"));
        data.insert(std::make_pair(0xa492,"YI RADICAL KIT"));
        data.insert(std::make_pair(0xa493,"YI RADICAL NYIP"));
        data.insert(std::make_pair(0xa494,"YI RADICAL CYP"));
        data.insert(std::make_pair(0xa495,"YI RADICAL SSI"));
        data.insert(std::make_pair(0xa496,"YI RADICAL GGOP"));
        data.insert(std::make_pair(0xa497,"YI RADICAL GEP"));
        data.insert(std::make_pair(0xa498,"YI RADICAL MI"));
        data.insert(std::make_pair(0xa499,"YI RADICAL HXIT"));
        data.insert(std::make_pair(0xa49a,"YI RADICAL LYR"));
        data.insert(std::make_pair(0xa49b,"YI RADICAL BBUT"));
        data.insert(std::make_pair(0xa49c,"YI RADICAL MOP"));
        data.insert(std::make_pair(0xa49d,"YI RADICAL YO"));
        data.insert(std::make_pair(0xa49e,"YI RADICAL PUT"));
        data.insert(std::make_pair(0xa49f,"YI RADICAL HXUO"));
        data.insert(std::make_pair(0xa4a0,"YI RADICAL TAT"));
        data.insert(std::make_pair(0xa4a1,"YI RADICAL GA"));
        data.insert(std::make_pair(0xa4a2,"YI RADICAL ZUP"));
        data.insert(std::make_pair(0xa4a3,"YI RADICAL CYT"));
        data.insert(std::make_pair(0xa4a4,"YI RADICAL DDUR"));
        data.insert(std::make_pair(0xa4a5,"YI RADICAL BUR"));
        data.insert(std::make_pair(0xa4a6,"YI RADICAL GGUO"));
        data.insert(std::make_pair(0xa4a7,"YI RADICAL NYOP"));
        data.insert(std::make_pair(0xa4a8,"YI RADICAL TU"));
        data.insert(std::make_pair(0xa4a9,"YI RADICAL OP"));
        data.insert(std::make_pair(0xa4aa,"YI RADICAL JJUT"));
        data.insert(std::make_pair(0xa4ab,"YI RADICAL ZOT"));
        data.insert(std::make_pair(0xa4ac,"YI RADICAL PYT"));
        data.insert(std::make_pair(0xa4ad,"YI RADICAL HMO"));
        data.insert(std::make_pair(0xa4ae,"YI RADICAL YIT"));
        data.insert(std::make_pair(0xa4af,"YI RADICAL VUR"));
        data.insert(std::make_pair(0xa4b0,"YI RADICAL SHY"));
        data.insert(std::make_pair(0xa4b1,"YI RADICAL VEP"));
        data.insert(std::make_pair(0xa4b2,"YI RADICAL ZA"));
        data.insert(std::make_pair(0xa4b3,"YI RADICAL JO"));
        data.insert(std::make_pair(0xa4b4,"YI RADICAL NZUP"));
        data.insert(std::make_pair(0xa4b5,"YI RADICAL JJY"));
        data.insert(std::make_pair(0xa4b6,"YI RADICAL GOT"));
        data.insert(std::make_pair(0xa4b7,"YI RADICAL JJIE"));
        data.insert(std::make_pair(0xa4b8,"YI RADICAL WO"));
        data.insert(std::make_pair(0xa4b9,"YI RADICAL DU"));
        data.insert(std::make_pair(0xa4ba,"YI RADICAL SHUR"));
        data.insert(std::make_pair(0xa4bb,"YI RADICAL LIE"));
        data.insert(std::make_pair(0xa4bc,"YI RADICAL CY"));
        data.insert(std::make_pair(0xa4bd,"YI RADICAL CUOP"));
        data.insert(std::make_pair(0xa4be,"YI RADICAL CIP"));
        data.insert(std::make_pair(0xa4bf,"YI RADICAL HXOP"));
        data.insert(std::make_pair(0xa4c0,"YI RADICAL SHAT"));
        data.insert(std::make_pair(0xa4c1,"YI RADICAL ZUR"));
        data.insert(std::make_pair(0xa4c2,"YI RADICAL SHOP"));
        data.insert(std::make_pair(0xa4c3,"YI RADICAL CHE"));
        data.insert(std::make_pair(0xa4c4,"YI RADICAL ZZIET"));
        data.insert(std::make_pair(0xa4c5,"YI RADICAL NBIE"));
        data.insert(std::make_pair(0xa4c6,"YI RADICAL KE"));
        data.insert(std::make_pair(0xa4d0,"LISU LETTER BA"));
        data.insert(std::make_pair(0xa4d1,"LISU LETTER PA"));
        data.insert(std::make_pair(0xa4d2,"LISU LETTER PHA"));
        data.insert(std::make_pair(0xa4d3,"LISU LETTER DA"));
        data.insert(std::make_pair(0xa4d4,"LISU LETTER TA"));
        data.insert(std::make_pair(0xa4d5,"LISU LETTER THA"));
        data.insert(std::make_pair(0xa4d6,"LISU LETTER GA"));
        data.insert(std::make_pair(0xa4d7,"LISU LETTER KA"));
        data.insert(std::make_pair(0xa4d8,"LISU LETTER KHA"));
        data.insert(std::make_pair(0xa4d9,"LISU LETTER JA"));
        data.insert(std::make_pair(0xa4da,"LISU LETTER CA"));
        data.insert(std::make_pair(0xa4db,"LISU LETTER CHA"));
        data.insert(std::make_pair(0xa4dc,"LISU LETTER DZA"));
        data.insert(std::make_pair(0xa4dd,"LISU LETTER TSA"));
        data.insert(std::make_pair(0xa4de,"LISU LETTER TSHA"));
        data.insert(std::make_pair(0xa4df,"LISU LETTER MA"));
        data.insert(std::make_pair(0xa4e0,"LISU LETTER NA"));
        data.insert(std::make_pair(0xa4e1,"LISU LETTER LA"));
        data.insert(std::make_pair(0xa4e2,"LISU LETTER SA"));
        data.insert(std::make_pair(0xa4e3,"LISU LETTER ZHA"));
        data.insert(std::make_pair(0xa4e4,"LISU LETTER ZA"));
        data.insert(std::make_pair(0xa4e5,"LISU LETTER NGA"));
        data.insert(std::make_pair(0xa4e6,"LISU LETTER HA"));
        data.insert(std::make_pair(0xa4e7,"LISU LETTER XA"));
        data.insert(std::make_pair(0xa4e8,"LISU LETTER HHA"));
        data.insert(std::make_pair(0xa4e9,"LISU LETTER FA"));
        data.insert(std::make_pair(0xa4ea,"LISU LETTER WA"));
        data.insert(std::make_pair(0xa4eb,"LISU LETTER SHA"));
        data.insert(std::make_pair(0xa4ec,"LISU LETTER YA"));
        data.insert(std::make_pair(0xa4ed,"LISU LETTER GHA"));
        data.insert(std::make_pair(0xa4ee,"LISU LETTER A"));
        data.insert(std::make_pair(0xa4ef,"LISU LETTER AE"));
        data.insert(std::make_pair(0xa4f0,"LISU LETTER E"));
        data.insert(std::make_pair(0xa4f1,"LISU LETTER EU"));
        data.insert(std::make_pair(0xa4f2,"LISU LETTER I"));
        data.insert(std::make_pair(0xa4f3,"LISU LETTER O"));
        data.insert(std::make_pair(0xa4f4,"LISU LETTER U"));
        data.insert(std::make_pair(0xa4f5,"LISU LETTER UE"));
        data.insert(std::make_pair(0xa4f6,"LISU LETTER UH"));
        data.insert(std::make_pair(0xa4f7,"LISU LETTER OE"));
        data.insert(std::make_pair(0xa4f8,"LISU LETTER TONE MYA TI"));
        data.insert(std::make_pair(0xa4f9,"LISU LETTER TONE NA PO"));
        data.insert(std::make_pair(0xa4fa,"LISU LETTER TONE MYA CYA"));
        data.insert(std::make_pair(0xa4fb,"LISU LETTER TONE MYA BO"));
        data.insert(std::make_pair(0xa4fc,"LISU LETTER TONE MYA NA"));
        data.insert(std::make_pair(0xa4fd,"LISU LETTER TONE MYA JEU"));
        data.insert(std::make_pair(0xa4fe,"LISU PUNCTUATION COMMA"));
        data.insert(std::make_pair(0xa4ff,"LISU PUNCTUATION FULL STOP"));
        data.insert(std::make_pair(0xa500,"VAI SYLLABLE EE"));
        data.insert(std::make_pair(0xa501,"VAI SYLLABLE EEN"));
        data.insert(std::make_pair(0xa502,"VAI SYLLABLE HEE"));
        data.insert(std::make_pair(0xa503,"VAI SYLLABLE WEE"));
        data.insert(std::make_pair(0xa504,"VAI SYLLABLE WEEN"));
        data.insert(std::make_pair(0xa505,"VAI SYLLABLE PEE"));
        data.insert(std::make_pair(0xa506,"VAI SYLLABLE BHEE"));
        data.insert(std::make_pair(0xa507,"VAI SYLLABLE BEE"));
        data.insert(std::make_pair(0xa508,"VAI SYLLABLE MBEE"));
        data.insert(std::make_pair(0xa509,"VAI SYLLABLE KPEE"));
        data.insert(std::make_pair(0xa50a,"VAI SYLLABLE MGBEE"));
        data.insert(std::make_pair(0xa50b,"VAI SYLLABLE GBEE"));
        data.insert(std::make_pair(0xa50c,"VAI SYLLABLE FEE"));
        data.insert(std::make_pair(0xa50d,"VAI SYLLABLE VEE"));
        data.insert(std::make_pair(0xa50e,"VAI SYLLABLE TEE"));
        data.insert(std::make_pair(0xa50f,"VAI SYLLABLE THEE"));
        data.insert(std::make_pair(0xa510,"VAI SYLLABLE DHEE"));
        data.insert(std::make_pair(0xa511,"VAI SYLLABLE DHHEE"));
        data.insert(std::make_pair(0xa512,"VAI SYLLABLE LEE"));
        data.insert(std::make_pair(0xa513,"VAI SYLLABLE REE"));
        data.insert(std::make_pair(0xa514,"VAI SYLLABLE DEE"));
        data.insert(std::make_pair(0xa515,"VAI SYLLABLE NDEE"));
        data.insert(std::make_pair(0xa516,"VAI SYLLABLE SEE"));
        data.insert(std::make_pair(0xa517,"VAI SYLLABLE SHEE"));
        data.insert(std::make_pair(0xa518,"VAI SYLLABLE ZEE"));
        data.insert(std::make_pair(0xa519,"VAI SYLLABLE ZHEE"));
        data.insert(std::make_pair(0xa51a,"VAI SYLLABLE CEE"));
        data.insert(std::make_pair(0xa51b,"VAI SYLLABLE JEE"));
        data.insert(std::make_pair(0xa51c,"VAI SYLLABLE NJEE"));
        data.insert(std::make_pair(0xa51d,"VAI SYLLABLE YEE"));
        data.insert(std::make_pair(0xa51e,"VAI SYLLABLE KEE"));
        data.insert(std::make_pair(0xa51f,"VAI SYLLABLE NGGEE"));
        data.insert(std::make_pair(0xa520,"VAI SYLLABLE GEE"));
        data.insert(std::make_pair(0xa521,"VAI SYLLABLE MEE"));
        data.insert(std::make_pair(0xa522,"VAI SYLLABLE NEE"));
        data.insert(std::make_pair(0xa523,"VAI SYLLABLE NYEE"));
        data.insert(std::make_pair(0xa524,"VAI SYLLABLE I"));
        data.insert(std::make_pair(0xa525,"VAI SYLLABLE IN"));
        data.insert(std::make_pair(0xa526,"VAI SYLLABLE HI"));
        data.insert(std::make_pair(0xa527,"VAI SYLLABLE HIN"));
        data.insert(std::make_pair(0xa528,"VAI SYLLABLE WI"));
        data.insert(std::make_pair(0xa529,"VAI SYLLABLE WIN"));
        data.insert(std::make_pair(0xa52a,"VAI SYLLABLE PI"));
        data.insert(std::make_pair(0xa52b,"VAI SYLLABLE BHI"));
        data.insert(std::make_pair(0xa52c,"VAI SYLLABLE BI"));
        data.insert(std::make_pair(0xa52d,"VAI SYLLABLE MBI"));
        data.insert(std::make_pair(0xa52e,"VAI SYLLABLE KPI"));
        data.insert(std::make_pair(0xa52f,"VAI SYLLABLE MGBI"));
        data.insert(std::make_pair(0xa530,"VAI SYLLABLE GBI"));
        data.insert(std::make_pair(0xa531,"VAI SYLLABLE FI"));
        data.insert(std::make_pair(0xa532,"VAI SYLLABLE VI"));
        data.insert(std::make_pair(0xa533,"VAI SYLLABLE TI"));
        data.insert(std::make_pair(0xa534,"VAI SYLLABLE THI"));
        data.insert(std::make_pair(0xa535,"VAI SYLLABLE DHI"));
        data.insert(std::make_pair(0xa536,"VAI SYLLABLE DHHI"));
        data.insert(std::make_pair(0xa537,"VAI SYLLABLE LI"));
        data.insert(std::make_pair(0xa538,"VAI SYLLABLE RI"));
        data.insert(std::make_pair(0xa539,"VAI SYLLABLE DI"));
        data.insert(std::make_pair(0xa53a,"VAI SYLLABLE NDI"));
        data.insert(std::make_pair(0xa53b,"VAI SYLLABLE SI"));
        data.insert(std::make_pair(0xa53c,"VAI SYLLABLE SHI"));
        data.insert(std::make_pair(0xa53d,"VAI SYLLABLE ZI"));
        data.insert(std::make_pair(0xa53e,"VAI SYLLABLE ZHI"));
        data.insert(std::make_pair(0xa53f,"VAI SYLLABLE CI"));
        data.insert(std::make_pair(0xa540,"VAI SYLLABLE JI"));
        data.insert(std::make_pair(0xa541,"VAI SYLLABLE NJI"));
        data.insert(std::make_pair(0xa542,"VAI SYLLABLE YI"));
        data.insert(std::make_pair(0xa543,"VAI SYLLABLE KI"));
        data.insert(std::make_pair(0xa544,"VAI SYLLABLE NGGI"));
        data.insert(std::make_pair(0xa545,"VAI SYLLABLE GI"));
        data.insert(std::make_pair(0xa546,"VAI SYLLABLE MI"));
        data.insert(std::make_pair(0xa547,"VAI SYLLABLE NI"));
        data.insert(std::make_pair(0xa548,"VAI SYLLABLE NYI"));
        data.insert(std::make_pair(0xa549,"VAI SYLLABLE A"));
        data.insert(std::make_pair(0xa54a,"VAI SYLLABLE AN"));
        data.insert(std::make_pair(0xa54b,"VAI SYLLABLE NGAN"));
        data.insert(std::make_pair(0xa54c,"VAI SYLLABLE HA"));
        data.insert(std::make_pair(0xa54d,"VAI SYLLABLE HAN"));
        data.insert(std::make_pair(0xa54e,"VAI SYLLABLE WA"));
        data.insert(std::make_pair(0xa54f,"VAI SYLLABLE WAN"));
        data.insert(std::make_pair(0xa550,"VAI SYLLABLE PA"));
        data.insert(std::make_pair(0xa551,"VAI SYLLABLE BHA"));
        data.insert(std::make_pair(0xa552,"VAI SYLLABLE BA"));
        data.insert(std::make_pair(0xa553,"VAI SYLLABLE MBA"));
        data.insert(std::make_pair(0xa554,"VAI SYLLABLE KPA"));
        data.insert(std::make_pair(0xa555,"VAI SYLLABLE KPAN"));
        data.insert(std::make_pair(0xa556,"VAI SYLLABLE MGBA"));
        data.insert(std::make_pair(0xa557,"VAI SYLLABLE GBA"));
        data.insert(std::make_pair(0xa558,"VAI SYLLABLE FA"));
        data.insert(std::make_pair(0xa559,"VAI SYLLABLE VA"));
        data.insert(std::make_pair(0xa55a,"VAI SYLLABLE TA"));
        data.insert(std::make_pair(0xa55b,"VAI SYLLABLE THA"));
        data.insert(std::make_pair(0xa55c,"VAI SYLLABLE DHA"));
        data.insert(std::make_pair(0xa55d,"VAI SYLLABLE DHHA"));
        data.insert(std::make_pair(0xa55e,"VAI SYLLABLE LA"));
        data.insert(std::make_pair(0xa55f,"VAI SYLLABLE RA"));
        data.insert(std::make_pair(0xa560,"VAI SYLLABLE DA"));
        data.insert(std::make_pair(0xa561,"VAI SYLLABLE NDA"));
        data.insert(std::make_pair(0xa562,"VAI SYLLABLE SA"));
        data.insert(std::make_pair(0xa563,"VAI SYLLABLE SHA"));
        data.insert(std::make_pair(0xa564,"VAI SYLLABLE ZA"));
        data.insert(std::make_pair(0xa565,"VAI SYLLABLE ZHA"));
        data.insert(std::make_pair(0xa566,"VAI SYLLABLE CA"));
        data.insert(std::make_pair(0xa567,"VAI SYLLABLE JA"));
        data.insert(std::make_pair(0xa568,"VAI SYLLABLE NJA"));
        data.insert(std::make_pair(0xa569,"VAI SYLLABLE YA"));
        data.insert(std::make_pair(0xa56a,"VAI SYLLABLE KA"));
        data.insert(std::make_pair(0xa56b,"VAI SYLLABLE KAN"));
        data.insert(std::make_pair(0xa56c,"VAI SYLLABLE NGGA"));
        data.insert(std::make_pair(0xa56d,"VAI SYLLABLE GA"));
        data.insert(std::make_pair(0xa56e,"VAI SYLLABLE MA"));
        data.insert(std::make_pair(0xa56f,"VAI SYLLABLE NA"));
        data.insert(std::make_pair(0xa570,"VAI SYLLABLE NYA"));
        data.insert(std::make_pair(0xa571,"VAI SYLLABLE OO"));
        data.insert(std::make_pair(0xa572,"VAI SYLLABLE OON"));
        data.insert(std::make_pair(0xa573,"VAI SYLLABLE HOO"));
        data.insert(std::make_pair(0xa574,"VAI SYLLABLE WOO"));
        data.insert(std::make_pair(0xa575,"VAI SYLLABLE WOON"));
        data.insert(std::make_pair(0xa576,"VAI SYLLABLE POO"));
        data.insert(std::make_pair(0xa577,"VAI SYLLABLE BHOO"));
        data.insert(std::make_pair(0xa578,"VAI SYLLABLE BOO"));
        data.insert(std::make_pair(0xa579,"VAI SYLLABLE MBOO"));
        data.insert(std::make_pair(0xa57a,"VAI SYLLABLE KPOO"));
        data.insert(std::make_pair(0xa57b,"VAI SYLLABLE MGBOO"));
        data.insert(std::make_pair(0xa57c,"VAI SYLLABLE GBOO"));
        data.insert(std::make_pair(0xa57d,"VAI SYLLABLE FOO"));
        data.insert(std::make_pair(0xa57e,"VAI SYLLABLE VOO"));
        data.insert(std::make_pair(0xa57f,"VAI SYLLABLE TOO"));
        data.insert(std::make_pair(0xa580,"VAI SYLLABLE THOO"));
        data.insert(std::make_pair(0xa581,"VAI SYLLABLE DHOO"));
        data.insert(std::make_pair(0xa582,"VAI SYLLABLE DHHOO"));
        data.insert(std::make_pair(0xa583,"VAI SYLLABLE LOO"));
        data.insert(std::make_pair(0xa584,"VAI SYLLABLE ROO"));
        data.insert(std::make_pair(0xa585,"VAI SYLLABLE DOO"));
        data.insert(std::make_pair(0xa586,"VAI SYLLABLE NDOO"));
        data.insert(std::make_pair(0xa587,"VAI SYLLABLE SOO"));
        data.insert(std::make_pair(0xa588,"VAI SYLLABLE SHOO"));
        data.insert(std::make_pair(0xa589,"VAI SYLLABLE ZOO"));
        data.insert(std::make_pair(0xa58a,"VAI SYLLABLE ZHOO"));
        data.insert(std::make_pair(0xa58b,"VAI SYLLABLE COO"));
        data.insert(std::make_pair(0xa58c,"VAI SYLLABLE JOO"));
        data.insert(std::make_pair(0xa58d,"VAI SYLLABLE NJOO"));
        data.insert(std::make_pair(0xa58e,"VAI SYLLABLE YOO"));
        data.insert(std::make_pair(0xa58f,"VAI SYLLABLE KOO"));
        data.insert(std::make_pair(0xa590,"VAI SYLLABLE NGGOO"));
        data.insert(std::make_pair(0xa591,"VAI SYLLABLE GOO"));
        data.insert(std::make_pair(0xa592,"VAI SYLLABLE MOO"));
        data.insert(std::make_pair(0xa593,"VAI SYLLABLE NOO"));
        data.insert(std::make_pair(0xa594,"VAI SYLLABLE NYOO"));
        data.insert(std::make_pair(0xa595,"VAI SYLLABLE U"));
        data.insert(std::make_pair(0xa596,"VAI SYLLABLE UN"));
        data.insert(std::make_pair(0xa597,"VAI SYLLABLE HU"));
        data.insert(std::make_pair(0xa598,"VAI SYLLABLE HUN"));
        data.insert(std::make_pair(0xa599,"VAI SYLLABLE WU"));
        data.insert(std::make_pair(0xa59a,"VAI SYLLABLE WUN"));
        data.insert(std::make_pair(0xa59b,"VAI SYLLABLE PU"));
        data.insert(std::make_pair(0xa59c,"VAI SYLLABLE BHU"));
        data.insert(std::make_pair(0xa59d,"VAI SYLLABLE BU"));
        data.insert(std::make_pair(0xa59e,"VAI SYLLABLE MBU"));
        data.insert(std::make_pair(0xa59f,"VAI SYLLABLE KPU"));
        data.insert(std::make_pair(0xa5a0,"VAI SYLLABLE MGBU"));
        data.insert(std::make_pair(0xa5a1,"VAI SYLLABLE GBU"));
        data.insert(std::make_pair(0xa5a2,"VAI SYLLABLE FU"));
        data.insert(std::make_pair(0xa5a3,"VAI SYLLABLE VU"));
        data.insert(std::make_pair(0xa5a4,"VAI SYLLABLE TU"));
        data.insert(std::make_pair(0xa5a5,"VAI SYLLABLE THU"));
        data.insert(std::make_pair(0xa5a6,"VAI SYLLABLE DHU"));
        data.insert(std::make_pair(0xa5a7,"VAI SYLLABLE DHHU"));
        data.insert(std::make_pair(0xa5a8,"VAI SYLLABLE LU"));
        data.insert(std::make_pair(0xa5a9,"VAI SYLLABLE RU"));
        data.insert(std::make_pair(0xa5aa,"VAI SYLLABLE DU"));
        data.insert(std::make_pair(0xa5ab,"VAI SYLLABLE NDU"));
        data.insert(std::make_pair(0xa5ac,"VAI SYLLABLE SU"));
        data.insert(std::make_pair(0xa5ad,"VAI SYLLABLE SHU"));
        data.insert(std::make_pair(0xa5ae,"VAI SYLLABLE ZU"));
        data.insert(std::make_pair(0xa5af,"VAI SYLLABLE ZHU"));
        data.insert(std::make_pair(0xa5b0,"VAI SYLLABLE CU"));
        data.insert(std::make_pair(0xa5b1,"VAI SYLLABLE JU"));
        data.insert(std::make_pair(0xa5b2,"VAI SYLLABLE NJU"));
        data.insert(std::make_pair(0xa5b3,"VAI SYLLABLE YU"));
        data.insert(std::make_pair(0xa5b4,"VAI SYLLABLE KU"));
        data.insert(std::make_pair(0xa5b5,"VAI SYLLABLE NGGU"));
        data.insert(std::make_pair(0xa5b6,"VAI SYLLABLE GU"));
        data.insert(std::make_pair(0xa5b7,"VAI SYLLABLE MU"));
        data.insert(std::make_pair(0xa5b8,"VAI SYLLABLE NU"));
        data.insert(std::make_pair(0xa5b9,"VAI SYLLABLE NYU"));
        data.insert(std::make_pair(0xa5ba,"VAI SYLLABLE O"));
        data.insert(std::make_pair(0xa5bb,"VAI SYLLABLE ON"));
        data.insert(std::make_pair(0xa5bc,"VAI SYLLABLE NGON"));
        data.insert(std::make_pair(0xa5bd,"VAI SYLLABLE HO"));
        data.insert(std::make_pair(0xa5be,"VAI SYLLABLE HON"));
        data.insert(std::make_pair(0xa5bf,"VAI SYLLABLE WO"));
        data.insert(std::make_pair(0xa5c0,"VAI SYLLABLE WON"));
        data.insert(std::make_pair(0xa5c1,"VAI SYLLABLE PO"));
        data.insert(std::make_pair(0xa5c2,"VAI SYLLABLE BHO"));
        data.insert(std::make_pair(0xa5c3,"VAI SYLLABLE BO"));
        data.insert(std::make_pair(0xa5c4,"VAI SYLLABLE MBO"));
        data.insert(std::make_pair(0xa5c5,"VAI SYLLABLE KPO"));
        data.insert(std::make_pair(0xa5c6,"VAI SYLLABLE MGBO"));
        data.insert(std::make_pair(0xa5c7,"VAI SYLLABLE GBO"));
        data.insert(std::make_pair(0xa5c8,"VAI SYLLABLE GBON"));
        data.insert(std::make_pair(0xa5c9,"VAI SYLLABLE FO"));
        data.insert(std::make_pair(0xa5ca,"VAI SYLLABLE VO"));
        data.insert(std::make_pair(0xa5cb,"VAI SYLLABLE TO"));
        data.insert(std::make_pair(0xa5cc,"VAI SYLLABLE THO"));
        data.insert(std::make_pair(0xa5cd,"VAI SYLLABLE DHO"));
        data.insert(std::make_pair(0xa5ce,"VAI SYLLABLE DHHO"));
        data.insert(std::make_pair(0xa5cf,"VAI SYLLABLE LO"));
        data.insert(std::make_pair(0xa5d0,"VAI SYLLABLE RO"));
        data.insert(std::make_pair(0xa5d1,"VAI SYLLABLE DO"));
        data.insert(std::make_pair(0xa5d2,"VAI SYLLABLE NDO"));
        data.insert(std::make_pair(0xa5d3,"VAI SYLLABLE SO"));
        data.insert(std::make_pair(0xa5d4,"VAI SYLLABLE SHO"));
        data.insert(std::make_pair(0xa5d5,"VAI SYLLABLE ZO"));
        data.insert(std::make_pair(0xa5d6,"VAI SYLLABLE ZHO"));
        data.insert(std::make_pair(0xa5d7,"VAI SYLLABLE CO"));
        data.insert(std::make_pair(0xa5d8,"VAI SYLLABLE JO"));
        data.insert(std::make_pair(0xa5d9,"VAI SYLLABLE NJO"));
        data.insert(std::make_pair(0xa5da,"VAI SYLLABLE YO"));
        data.insert(std::make_pair(0xa5db,"VAI SYLLABLE KO"));
        data.insert(std::make_pair(0xa5dc,"VAI SYLLABLE NGGO"));
        data.insert(std::make_pair(0xa5dd,"VAI SYLLABLE GO"));
        data.insert(std::make_pair(0xa5de,"VAI SYLLABLE MO"));
        data.insert(std::make_pair(0xa5df,"VAI SYLLABLE NO"));
        data.insert(std::make_pair(0xa5e0,"VAI SYLLABLE NYO"));
        data.insert(std::make_pair(0xa5e1,"VAI SYLLABLE E"));
        data.insert(std::make_pair(0xa5e2,"VAI SYLLABLE EN"));
        data.insert(std::make_pair(0xa5e3,"VAI SYLLABLE NGEN"));
        data.insert(std::make_pair(0xa5e4,"VAI SYLLABLE HE"));
        data.insert(std::make_pair(0xa5e5,"VAI SYLLABLE HEN"));
        data.insert(std::make_pair(0xa5e6,"VAI SYLLABLE WE"));
        data.insert(std::make_pair(0xa5e7,"VAI SYLLABLE WEN"));
        data.insert(std::make_pair(0xa5e8,"VAI SYLLABLE PE"));
        data.insert(std::make_pair(0xa5e9,"VAI SYLLABLE BHE"));
        data.insert(std::make_pair(0xa5ea,"VAI SYLLABLE BE"));
        data.insert(std::make_pair(0xa5eb,"VAI SYLLABLE MBE"));
        data.insert(std::make_pair(0xa5ec,"VAI SYLLABLE KPE"));
        data.insert(std::make_pair(0xa5ed,"VAI SYLLABLE KPEN"));
        data.insert(std::make_pair(0xa5ee,"VAI SYLLABLE MGBE"));
        data.insert(std::make_pair(0xa5ef,"VAI SYLLABLE GBE"));
        data.insert(std::make_pair(0xa5f0,"VAI SYLLABLE GBEN"));
        data.insert(std::make_pair(0xa5f1,"VAI SYLLABLE FE"));
        data.insert(std::make_pair(0xa5f2,"VAI SYLLABLE VE"));
        data.insert(std::make_pair(0xa5f3,"VAI SYLLABLE TE"));
        data.insert(std::make_pair(0xa5f4,"VAI SYLLABLE THE"));
        data.insert(std::make_pair(0xa5f5,"VAI SYLLABLE DHE"));
        data.insert(std::make_pair(0xa5f6,"VAI SYLLABLE DHHE"));
        data.insert(std::make_pair(0xa5f7,"VAI SYLLABLE LE"));
        data.insert(std::make_pair(0xa5f8,"VAI SYLLABLE RE"));
        data.insert(std::make_pair(0xa5f9,"VAI SYLLABLE DE"));
        data.insert(std::make_pair(0xa5fa,"VAI SYLLABLE NDE"));
        data.insert(std::make_pair(0xa5fb,"VAI SYLLABLE SE"));
        data.insert(std::make_pair(0xa5fc,"VAI SYLLABLE SHE"));
        data.insert(std::make_pair(0xa5fd,"VAI SYLLABLE ZE"));
        data.insert(std::make_pair(0xa5fe,"VAI SYLLABLE ZHE"));
        data.insert(std::make_pair(0xa5ff,"VAI SYLLABLE CE"));
        data.insert(std::make_pair(0xa600,"VAI SYLLABLE JE"));
        data.insert(std::make_pair(0xa601,"VAI SYLLABLE NJE"));
        data.insert(std::make_pair(0xa602,"VAI SYLLABLE YE"));
        data.insert(std::make_pair(0xa603,"VAI SYLLABLE KE"));
        data.insert(std::make_pair(0xa604,"VAI SYLLABLE NGGE"));
        data.insert(std::make_pair(0xa605,"VAI SYLLABLE NGGEN"));
        data.insert(std::make_pair(0xa606,"VAI SYLLABLE GE"));
        data.insert(std::make_pair(0xa607,"VAI SYLLABLE GEN"));
        data.insert(std::make_pair(0xa608,"VAI SYLLABLE ME"));
        data.insert(std::make_pair(0xa609,"VAI SYLLABLE NE"));
        data.insert(std::make_pair(0xa60a,"VAI SYLLABLE NYE"));
        data.insert(std::make_pair(0xa60b,"VAI SYLLABLE NG"));
        data.insert(std::make_pair(0xa60c,"VAI SYLLABLE LENGTHENER"));
        data.insert(std::make_pair(0xa60d,"VAI COMMA"));
        data.insert(std::make_pair(0xa60e,"VAI FULL STOP"));
        data.insert(std::make_pair(0xa60f,"VAI QUESTION MARK"));
        data.insert(std::make_pair(0xa610,"VAI SYLLABLE NDOLE FA"));
        data.insert(std::make_pair(0xa611,"VAI SYLLABLE NDOLE KA"));
        data.insert(std::make_pair(0xa612,"VAI SYLLABLE NDOLE SOO"));
        data.insert(std::make_pair(0xa613,"VAI SYMBOL FEENG"));
        data.insert(std::make_pair(0xa614,"VAI SYMBOL KEENG"));
        data.insert(std::make_pair(0xa615,"VAI SYMBOL TING"));
        data.insert(std::make_pair(0xa616,"VAI SYMBOL NII"));
        data.insert(std::make_pair(0xa617,"VAI SYMBOL BANG"));
        data.insert(std::make_pair(0xa618,"VAI SYMBOL FAA"));
        data.insert(std::make_pair(0xa619,"VAI SYMBOL TAA"));
        data.insert(std::make_pair(0xa61a,"VAI SYMBOL DANG"));
        data.insert(std::make_pair(0xa61b,"VAI SYMBOL DOONG"));
        data.insert(std::make_pair(0xa61c,"VAI SYMBOL KUNG"));
        data.insert(std::make_pair(0xa61d,"VAI SYMBOL TONG"));
        data.insert(std::make_pair(0xa61e,"VAI SYMBOL DO-O"));
        data.insert(std::make_pair(0xa61f,"VAI SYMBOL JONG"));
        data.insert(std::make_pair(0xa620,"VAI DIGIT ZERO"));
        data.insert(std::make_pair(0xa621,"VAI DIGIT ONE"));
        data.insert(std::make_pair(0xa622,"VAI DIGIT TWO"));
        data.insert(std::make_pair(0xa623,"VAI DIGIT THREE"));
        data.insert(std::make_pair(0xa624,"VAI DIGIT FOUR"));
        data.insert(std::make_pair(0xa625,"VAI DIGIT FIVE"));
        data.insert(std::make_pair(0xa626,"VAI DIGIT SIX"));
        data.insert(std::make_pair(0xa627,"VAI DIGIT SEVEN"));
        data.insert(std::make_pair(0xa628,"VAI DIGIT EIGHT"));
        data.insert(std::make_pair(0xa629,"VAI DIGIT NINE"));
        data.insert(std::make_pair(0xa62a,"VAI SYLLABLE NDOLE MA"));
        data.insert(std::make_pair(0xa62b,"VAI SYLLABLE NDOLE DO"));
        data.insert(std::make_pair(0xa640,"CYRILLIC CAPITAL LETTER ZEMLYA"));
        data.insert(std::make_pair(0xa641,"CYRILLIC SMALL LETTER ZEMLYA"));
        data.insert(std::make_pair(0xa642,"CYRILLIC CAPITAL LETTER DZELO"));
        data.insert(std::make_pair(0xa643,"CYRILLIC SMALL LETTER DZELO"));
        data.insert(std::make_pair(0xa644,"CYRILLIC CAPITAL LETTER REVERSED DZE"));
        data.insert(std::make_pair(0xa645,"CYRILLIC SMALL LETTER REVERSED DZE"));
        data.insert(std::make_pair(0xa646,"CYRILLIC CAPITAL LETTER IOTA"));
        data.insert(std::make_pair(0xa647,"CYRILLIC SMALL LETTER IOTA"));
        data.insert(std::make_pair(0xa648,"CYRILLIC CAPITAL LETTER DJERV"));
        data.insert(std::make_pair(0xa649,"CYRILLIC SMALL LETTER DJERV"));
        data.insert(std::make_pair(0xa64a,"CYRILLIC CAPITAL LETTER MONOGRAPH UK"));
        data.insert(std::make_pair(0xa64b,"CYRILLIC SMALL LETTER MONOGRAPH UK"));
        data.insert(std::make_pair(0xa64c,"CYRILLIC CAPITAL LETTER BROAD OMEGA"));
        data.insert(std::make_pair(0xa64d,"CYRILLIC SMALL LETTER BROAD OMEGA"));
        data.insert(std::make_pair(0xa64e,"CYRILLIC CAPITAL LETTER NEUTRAL YER"));
        data.insert(std::make_pair(0xa64f,"CYRILLIC SMALL LETTER NEUTRAL YER"));
        data.insert(std::make_pair(0xa650,"CYRILLIC CAPITAL LETTER YERU WITH BACK YER"));
        data.insert(std::make_pair(0xa651,"CYRILLIC SMALL LETTER YERU WITH BACK YER"));
        data.insert(std::make_pair(0xa652,"CYRILLIC CAPITAL LETTER IOTIFIED YAT"));
        data.insert(std::make_pair(0xa653,"CYRILLIC SMALL LETTER IOTIFIED YAT"));
        data.insert(std::make_pair(0xa654,"CYRILLIC CAPITAL LETTER REVERSED YU"));
        data.insert(std::make_pair(0xa655,"CYRILLIC SMALL LETTER REVERSED YU"));
        data.insert(std::make_pair(0xa656,"CYRILLIC CAPITAL LETTER IOTIFIED A"));
        data.insert(std::make_pair(0xa657,"CYRILLIC SMALL LETTER IOTIFIED A"));
        data.insert(std::make_pair(0xa658,"CYRILLIC CAPITAL LETTER CLOSED LITTLE YUS"));
        data.insert(std::make_pair(0xa659,"CYRILLIC SMALL LETTER CLOSED LITTLE YUS"));
        data.insert(std::make_pair(0xa65a,"CYRILLIC CAPITAL LETTER BLENDED YUS"));
        data.insert(std::make_pair(0xa65b,"CYRILLIC SMALL LETTER BLENDED YUS"));
        data.insert(std::make_pair(0xa65c,"CYRILLIC CAPITAL LETTER IOTIFIED CLOSED LITTLE YUS"));
        data.insert(std::make_pair(0xa65d,"CYRILLIC SMALL LETTER IOTIFIED CLOSED LITTLE YUS"));
        data.insert(std::make_pair(0xa65e,"CYRILLIC CAPITAL LETTER YN"));
        data.insert(std::make_pair(0xa65f,"CYRILLIC SMALL LETTER YN"));
        data.insert(std::make_pair(0xa660,"CYRILLIC CAPITAL LETTER REVERSED TSE"));
        data.insert(std::make_pair(0xa661,"CYRILLIC SMALL LETTER REVERSED TSE"));
        data.insert(std::make_pair(0xa662,"CYRILLIC CAPITAL LETTER SOFT DE"));
        data.insert(std::make_pair(0xa663,"CYRILLIC SMALL LETTER SOFT DE"));
        data.insert(std::make_pair(0xa664,"CYRILLIC CAPITAL LETTER SOFT EL"));
        data.insert(std::make_pair(0xa665,"CYRILLIC SMALL LETTER SOFT EL"));
        data.insert(std::make_pair(0xa666,"CYRILLIC CAPITAL LETTER SOFT EM"));
        data.insert(std::make_pair(0xa667,"CYRILLIC SMALL LETTER SOFT EM"));
        data.insert(std::make_pair(0xa668,"CYRILLIC CAPITAL LETTER MONOCULAR O"));
        data.insert(std::make_pair(0xa669,"CYRILLIC SMALL LETTER MONOCULAR O"));
        data.insert(std::make_pair(0xa66a,"CYRILLIC CAPITAL LETTER BINOCULAR O"));
        data.insert(std::make_pair(0xa66b,"CYRILLIC SMALL LETTER BINOCULAR O"));
        data.insert(std::make_pair(0xa66c,"CYRILLIC CAPITAL LETTER DOUBLE MONOCULAR O"));
        data.insert(std::make_pair(0xa66d,"CYRILLIC SMALL LETTER DOUBLE MONOCULAR O"));
        data.insert(std::make_pair(0xa66e,"CYRILLIC LETTER MULTIOCULAR O"));
        data.insert(std::make_pair(0xa66f,"COMBINING CYRILLIC VZMET"));
        data.insert(std::make_pair(0xa670,"COMBINING CYRILLIC TEN MILLIONS SIGN"));
        data.insert(std::make_pair(0xa671,"COMBINING CYRILLIC HUNDRED MILLIONS SIGN"));
        data.insert(std::make_pair(0xa672,"COMBINING CYRILLIC THOUSAND MILLIONS SIGN"));
        data.insert(std::make_pair(0xa673,"SLAVONIC ASTERISK"));
        data.insert(std::make_pair(0xa674,"COMBINING CYRILLIC LETTER UKRAINIAN IE"));
        data.insert(std::make_pair(0xa675,"COMBINING CYRILLIC LETTER I"));
        data.insert(std::make_pair(0xa676,"COMBINING CYRILLIC LETTER YI"));
        data.insert(std::make_pair(0xa677,"COMBINING CYRILLIC LETTER U"));
        data.insert(std::make_pair(0xa678,"COMBINING CYRILLIC LETTER HARD SIGN"));
        data.insert(std::make_pair(0xa679,"COMBINING CYRILLIC LETTER YERU"));
        data.insert(std::make_pair(0xa67a,"COMBINING CYRILLIC LETTER SOFT SIGN"));
        data.insert(std::make_pair(0xa67b,"COMBINING CYRILLIC LETTER OMEGA"));
        data.insert(std::make_pair(0xa67c,"COMBINING CYRILLIC KAVYKA"));
        data.insert(std::make_pair(0xa67d,"COMBINING CYRILLIC PAYEROK"));
        data.insert(std::make_pair(0xa67e,"CYRILLIC KAVYKA"));
        data.insert(std::make_pair(0xa67f,"CYRILLIC PAYEROK"));
        data.insert(std::make_pair(0xa680,"CYRILLIC CAPITAL LETTER DWE"));
        data.insert(std::make_pair(0xa681,"CYRILLIC SMALL LETTER DWE"));
        data.insert(std::make_pair(0xa682,"CYRILLIC CAPITAL LETTER DZWE"));
        data.insert(std::make_pair(0xa683,"CYRILLIC SMALL LETTER DZWE"));
        data.insert(std::make_pair(0xa684,"CYRILLIC CAPITAL LETTER ZHWE"));
        data.insert(std::make_pair(0xa685,"CYRILLIC SMALL LETTER ZHWE"));
        data.insert(std::make_pair(0xa686,"CYRILLIC CAPITAL LETTER CCHE"));
        data.insert(std::make_pair(0xa687,"CYRILLIC SMALL LETTER CCHE"));
        data.insert(std::make_pair(0xa688,"CYRILLIC CAPITAL LETTER DZZE"));
        data.insert(std::make_pair(0xa689,"CYRILLIC SMALL LETTER DZZE"));
        data.insert(std::make_pair(0xa68a,"CYRILLIC CAPITAL LETTER TE WITH MIDDLE HOOK"));
        data.insert(std::make_pair(0xa68b,"CYRILLIC SMALL LETTER TE WITH MIDDLE HOOK"));
        data.insert(std::make_pair(0xa68c,"CYRILLIC CAPITAL LETTER TWE"));
        data.insert(std::make_pair(0xa68d,"CYRILLIC SMALL LETTER TWE"));
        data.insert(std::make_pair(0xa68e,"CYRILLIC CAPITAL LETTER TSWE"));
        data.insert(std::make_pair(0xa68f,"CYRILLIC SMALL LETTER TSWE"));
        data.insert(std::make_pair(0xa690,"CYRILLIC CAPITAL LETTER TSSE"));
        data.insert(std::make_pair(0xa691,"CYRILLIC SMALL LETTER TSSE"));
        data.insert(std::make_pair(0xa692,"CYRILLIC CAPITAL LETTER TCHE"));
        data.insert(std::make_pair(0xa693,"CYRILLIC SMALL LETTER TCHE"));
        data.insert(std::make_pair(0xa694,"CYRILLIC CAPITAL LETTER HWE"));
        data.insert(std::make_pair(0xa695,"CYRILLIC SMALL LETTER HWE"));
        data.insert(std::make_pair(0xa696,"CYRILLIC CAPITAL LETTER SHWE"));
        data.insert(std::make_pair(0xa697,"CYRILLIC SMALL LETTER SHWE"));
        data.insert(std::make_pair(0xa698,"CYRILLIC CAPITAL LETTER DOUBLE O"));
        data.insert(std::make_pair(0xa699,"CYRILLIC SMALL LETTER DOUBLE O"));
        data.insert(std::make_pair(0xa69a,"CYRILLIC CAPITAL LETTER CROSSED O"));
        data.insert(std::make_pair(0xa69b,"CYRILLIC SMALL LETTER CROSSED O"));
        data.insert(std::make_pair(0xa69c,"MODIFIER LETTER CYRILLIC HARD SIGN"));
        data.insert(std::make_pair(0xa69d,"MODIFIER LETTER CYRILLIC SOFT SIGN"));
        data.insert(std::make_pair(0xa69e,"COMBINING CYRILLIC LETTER EF"));
        data.insert(std::make_pair(0xa69f,"COMBINING CYRILLIC LETTER IOTIFIED E"));
        data.insert(std::make_pair(0xa6a0,"BAMUM LETTER A"));
        data.insert(std::make_pair(0xa6a1,"BAMUM LETTER KA"));
        data.insert(std::make_pair(0xa6a2,"BAMUM LETTER U"));
        data.insert(std::make_pair(0xa6a3,"BAMUM LETTER KU"));
        data.insert(std::make_pair(0xa6a4,"BAMUM LETTER EE"));
        data.insert(std::make_pair(0xa6a5,"BAMUM LETTER REE"));
        data.insert(std::make_pair(0xa6a6,"BAMUM LETTER TAE"));
        data.insert(std::make_pair(0xa6a7,"BAMUM LETTER O"));
        data.insert(std::make_pair(0xa6a8,"BAMUM LETTER NYI"));
        data.insert(std::make_pair(0xa6a9,"BAMUM LETTER I"));
        data.insert(std::make_pair(0xa6aa,"BAMUM LETTER LA"));
        data.insert(std::make_pair(0xa6ab,"BAMUM LETTER PA"));
        data.insert(std::make_pair(0xa6ac,"BAMUM LETTER RII"));
        data.insert(std::make_pair(0xa6ad,"BAMUM LETTER RIEE"));
        data.insert(std::make_pair(0xa6ae,"BAMUM LETTER LEEEE"));
        data.insert(std::make_pair(0xa6af,"BAMUM LETTER MEEEE"));
        data.insert(std::make_pair(0xa6b0,"BAMUM LETTER TAA"));
        data.insert(std::make_pair(0xa6b1,"BAMUM LETTER NDAA"));
        data.insert(std::make_pair(0xa6b2,"BAMUM LETTER NJAEM"));
        data.insert(std::make_pair(0xa6b3,"BAMUM LETTER M"));
        data.insert(std::make_pair(0xa6b4,"BAMUM LETTER SUU"));
        data.insert(std::make_pair(0xa6b5,"BAMUM LETTER MU"));
        data.insert(std::make_pair(0xa6b6,"BAMUM LETTER SHII"));
        data.insert(std::make_pair(0xa6b7,"BAMUM LETTER SI"));
        data.insert(std::make_pair(0xa6b8,"BAMUM LETTER SHEUX"));
        data.insert(std::make_pair(0xa6b9,"BAMUM LETTER SEUX"));
        data.insert(std::make_pair(0xa6ba,"BAMUM LETTER KYEE"));
        data.insert(std::make_pair(0xa6bb,"BAMUM LETTER KET"));
        data.insert(std::make_pair(0xa6bc,"BAMUM LETTER NUAE"));
        data.insert(std::make_pair(0xa6bd,"BAMUM LETTER NU"));
        data.insert(std::make_pair(0xa6be,"BAMUM LETTER NJUAE"));
        data.insert(std::make_pair(0xa6bf,"BAMUM LETTER YOQ"));
        data.insert(std::make_pair(0xa6c0,"BAMUM LETTER SHU"));
        data.insert(std::make_pair(0xa6c1,"BAMUM LETTER YUQ"));
        data.insert(std::make_pair(0xa6c2,"BAMUM LETTER YA"));
        data.insert(std::make_pair(0xa6c3,"BAMUM LETTER NSHA"));
        data.insert(std::make_pair(0xa6c4,"BAMUM LETTER KEUX"));
        data.insert(std::make_pair(0xa6c5,"BAMUM LETTER PEUX"));
        data.insert(std::make_pair(0xa6c6,"BAMUM LETTER NJEE"));
        data.insert(std::make_pair(0xa6c7,"BAMUM LETTER NTEE"));
        data.insert(std::make_pair(0xa6c8,"BAMUM LETTER PUE"));
        data.insert(std::make_pair(0xa6c9,"BAMUM LETTER WUE"));
        data.insert(std::make_pair(0xa6ca,"BAMUM LETTER PEE"));
        data.insert(std::make_pair(0xa6cb,"BAMUM LETTER FEE"));
        data.insert(std::make_pair(0xa6cc,"BAMUM LETTER RU"));
        data.insert(std::make_pair(0xa6cd,"BAMUM LETTER LU"));
        data.insert(std::make_pair(0xa6ce,"BAMUM LETTER MI"));
        data.insert(std::make_pair(0xa6cf,"BAMUM LETTER NI"));
        data.insert(std::make_pair(0xa6d0,"BAMUM LETTER REUX"));
        data.insert(std::make_pair(0xa6d1,"BAMUM LETTER RAE"));
        data.insert(std::make_pair(0xa6d2,"BAMUM LETTER KEN"));
        data.insert(std::make_pair(0xa6d3,"BAMUM LETTER NGKWAEN"));
        data.insert(std::make_pair(0xa6d4,"BAMUM LETTER NGGA"));
        data.insert(std::make_pair(0xa6d5,"BAMUM LETTER NGA"));
        data.insert(std::make_pair(0xa6d6,"BAMUM LETTER SHO"));
        data.insert(std::make_pair(0xa6d7,"BAMUM LETTER PUAE"));
        data.insert(std::make_pair(0xa6d8,"BAMUM LETTER FU"));
        data.insert(std::make_pair(0xa6d9,"BAMUM LETTER FOM"));
        data.insert(std::make_pair(0xa6da,"BAMUM LETTER WA"));
        data.insert(std::make_pair(0xa6db,"BAMUM LETTER NA"));
        data.insert(std::make_pair(0xa6dc,"BAMUM LETTER LI"));
        data.insert(std::make_pair(0xa6dd,"BAMUM LETTER PI"));
        data.insert(std::make_pair(0xa6de,"BAMUM LETTER LOQ"));
        data.insert(std::make_pair(0xa6df,"BAMUM LETTER KO"));
        data.insert(std::make_pair(0xa6e0,"BAMUM LETTER MBEN"));
        data.insert(std::make_pair(0xa6e1,"BAMUM LETTER REN"));
        data.insert(std::make_pair(0xa6e2,"BAMUM LETTER MEN"));
        data.insert(std::make_pair(0xa6e3,"BAMUM LETTER MA"));
        data.insert(std::make_pair(0xa6e4,"BAMUM LETTER TI"));
        data.insert(std::make_pair(0xa6e5,"BAMUM LETTER KI"));
        data.insert(std::make_pair(0xa6e6,"BAMUM LETTER MO"));
        data.insert(std::make_pair(0xa6e7,"BAMUM LETTER MBAA"));
        data.insert(std::make_pair(0xa6e8,"BAMUM LETTER TET"));
        data.insert(std::make_pair(0xa6e9,"BAMUM LETTER KPA"));
        data.insert(std::make_pair(0xa6ea,"BAMUM LETTER TEN"));
        data.insert(std::make_pair(0xa6eb,"BAMUM LETTER NTUU"));
        data.insert(std::make_pair(0xa6ec,"BAMUM LETTER SAMBA"));
        data.insert(std::make_pair(0xa6ed,"BAMUM LETTER FAAMAE"));
        data.insert(std::make_pair(0xa6ee,"BAMUM LETTER KOVUU"));
        data.insert(std::make_pair(0xa6ef,"BAMUM LETTER KOGHOM"));
        data.insert(std::make_pair(0xa6f0,"BAMUM COMBINING MARK KOQNDON"));
        data.insert(std::make_pair(0xa6f1,"BAMUM COMBINING MARK TUKWENTIS"));
        data.insert(std::make_pair(0xa6f2,"BAMUM NJAEMLI"));
        data.insert(std::make_pair(0xa6f3,"BAMUM FULL STOP"));
        data.insert(std::make_pair(0xa6f4,"BAMUM COLON"));
        data.insert(std::make_pair(0xa6f5,"BAMUM COMMA"));
        data.insert(std::make_pair(0xa6f6,"BAMUM SEMICOLON"));
        data.insert(std::make_pair(0xa6f7,"BAMUM QUESTION MARK"));
        data.insert(std::make_pair(0xa700,"MODIFIER LETTER CHINESE TONE YIN PING"));
        data.insert(std::make_pair(0xa701,"MODIFIER LETTER CHINESE TONE YANG PING"));
        data.insert(std::make_pair(0xa702,"MODIFIER LETTER CHINESE TONE YIN SHANG"));
        data.insert(std::make_pair(0xa703,"MODIFIER LETTER CHINESE TONE YANG SHANG"));
        data.insert(std::make_pair(0xa704,"MODIFIER LETTER CHINESE TONE YIN QU"));
        data.insert(std::make_pair(0xa705,"MODIFIER LETTER CHINESE TONE YANG QU"));
        data.insert(std::make_pair(0xa706,"MODIFIER LETTER CHINESE TONE YIN RU"));
        data.insert(std::make_pair(0xa707,"MODIFIER LETTER CHINESE TONE YANG RU"));
        data.insert(std::make_pair(0xa708,"MODIFIER LETTER EXTRA-HIGH DOTTED TONE BAR"));
        data.insert(std::make_pair(0xa709,"MODIFIER LETTER HIGH DOTTED TONE BAR"));
        data.insert(std::make_pair(0xa70a,"MODIFIER LETTER MID DOTTED TONE BAR"));
        data.insert(std::make_pair(0xa70b,"MODIFIER LETTER LOW DOTTED TONE BAR"));
        data.insert(std::make_pair(0xa70c,"MODIFIER LETTER EXTRA-LOW DOTTED TONE BAR"));
        data.insert(std::make_pair(0xa70d,"MODIFIER LETTER EXTRA-HIGH DOTTED LEFT-STEM TONE BAR"));
        data.insert(std::make_pair(0xa70e,"MODIFIER LETTER HIGH DOTTED LEFT-STEM TONE BAR"));
        data.insert(std::make_pair(0xa70f,"MODIFIER LETTER MID DOTTED LEFT-STEM TONE BAR"));
        data.insert(std::make_pair(0xa710,"MODIFIER LETTER LOW DOTTED LEFT-STEM TONE BAR"));
        data.insert(std::make_pair(0xa711,"MODIFIER LETTER EXTRA-LOW DOTTED LEFT-STEM TONE BAR"));
        data.insert(std::make_pair(0xa712,"MODIFIER LETTER EXTRA-HIGH LEFT-STEM TONE BAR"));
        data.insert(std::make_pair(0xa713,"MODIFIER LETTER HIGH LEFT-STEM TONE BAR"));
        data.insert(std::make_pair(0xa714,"MODIFIER LETTER MID LEFT-STEM TONE BAR"));
        data.insert(std::make_pair(0xa715,"MODIFIER LETTER LOW LEFT-STEM TONE BAR"));
        data.insert(std::make_pair(0xa716,"MODIFIER LETTER EXTRA-LOW LEFT-STEM TONE BAR"));
        data.insert(std::make_pair(0xa717,"MODIFIER LETTER DOT VERTICAL BAR"));
        data.insert(std::make_pair(0xa718,"MODIFIER LETTER DOT SLASH"));
        data.insert(std::make_pair(0xa719,"MODIFIER LETTER DOT HORIZONTAL BAR"));
        data.insert(std::make_pair(0xa71a,"MODIFIER LETTER LOWER RIGHT CORNER ANGLE"));
        data.insert(std::make_pair(0xa71b,"MODIFIER LETTER RAISED UP ARROW"));
        data.insert(std::make_pair(0xa71c,"MODIFIER LETTER RAISED DOWN ARROW"));
        data.insert(std::make_pair(0xa71d,"MODIFIER LETTER RAISED EXCLAMATION MARK"));
        data.insert(std::make_pair(0xa71e,"MODIFIER LETTER RAISED INVERTED EXCLAMATION MARK"));
        data.insert(std::make_pair(0xa71f,"MODIFIER LETTER LOW INVERTED EXCLAMATION MARK"));
        data.insert(std::make_pair(0xa720,"MODIFIER LETTER STRESS AND HIGH TONE"));
        data.insert(std::make_pair(0xa721,"MODIFIER LETTER STRESS AND LOW TONE"));
        data.insert(std::make_pair(0xa722,"LATIN CAPITAL LETTER EGYPTOLOGICAL ALEF"));
        data.insert(std::make_pair(0xa723,"LATIN SMALL LETTER EGYPTOLOGICAL ALEF"));
        data.insert(std::make_pair(0xa724,"LATIN CAPITAL LETTER EGYPTOLOGICAL AIN"));
        data.insert(std::make_pair(0xa725,"LATIN SMALL LETTER EGYPTOLOGICAL AIN"));
        data.insert(std::make_pair(0xa726,"LATIN CAPITAL LETTER HENG"));
        data.insert(std::make_pair(0xa727,"LATIN SMALL LETTER HENG"));
        data.insert(std::make_pair(0xa728,"LATIN CAPITAL LETTER TZ"));
        data.insert(std::make_pair(0xa729,"LATIN SMALL LETTER TZ"));
        data.insert(std::make_pair(0xa72a,"LATIN CAPITAL LETTER TRESILLO"));
        data.insert(std::make_pair(0xa72b,"LATIN SMALL LETTER TRESILLO"));
        data.insert(std::make_pair(0xa72c,"LATIN CAPITAL LETTER CUATRILLO"));
        data.insert(std::make_pair(0xa72d,"LATIN SMALL LETTER CUATRILLO"));
        data.insert(std::make_pair(0xa72e,"LATIN CAPITAL LETTER CUATRILLO WITH COMMA"));
        data.insert(std::make_pair(0xa72f,"LATIN SMALL LETTER CUATRILLO WITH COMMA"));
        data.insert(std::make_pair(0xa730,"LATIN LETTER SMALL CAPITAL F"));
        data.insert(std::make_pair(0xa731,"LATIN LETTER SMALL CAPITAL S"));
        data.insert(std::make_pair(0xa732,"LATIN CAPITAL LETTER AA"));
        data.insert(std::make_pair(0xa733,"LATIN SMALL LETTER AA"));
        data.insert(std::make_pair(0xa734,"LATIN CAPITAL LETTER AO"));
        data.insert(std::make_pair(0xa735,"LATIN SMALL LETTER AO"));
        data.insert(std::make_pair(0xa736,"LATIN CAPITAL LETTER AU"));
        data.insert(std::make_pair(0xa737,"LATIN SMALL LETTER AU"));
        data.insert(std::make_pair(0xa738,"LATIN CAPITAL LETTER AV"));
        data.insert(std::make_pair(0xa739,"LATIN SMALL LETTER AV"));
        data.insert(std::make_pair(0xa73a,"LATIN CAPITAL LETTER AV WITH HORIZONTAL BAR"));
        data.insert(std::make_pair(0xa73b,"LATIN SMALL LETTER AV WITH HORIZONTAL BAR"));
        data.insert(std::make_pair(0xa73c,"LATIN CAPITAL LETTER AY"));
        data.insert(std::make_pair(0xa73d,"LATIN SMALL LETTER AY"));
        data.insert(std::make_pair(0xa73e,"LATIN CAPITAL LETTER REVERSED C WITH DOT"));
        data.insert(std::make_pair(0xa73f,"LATIN SMALL LETTER REVERSED C WITH DOT"));
        data.insert(std::make_pair(0xa740,"LATIN CAPITAL LETTER K WITH STROKE"));
        data.insert(std::make_pair(0xa741,"LATIN SMALL LETTER K WITH STROKE"));
        data.insert(std::make_pair(0xa742,"LATIN CAPITAL LETTER K WITH DIAGONAL STROKE"));
        data.insert(std::make_pair(0xa743,"LATIN SMALL LETTER K WITH DIAGONAL STROKE"));
        data.insert(std::make_pair(0xa744,"LATIN CAPITAL LETTER K WITH STROKE AND DIAGONAL STROKE"));
        data.insert(std::make_pair(0xa745,"LATIN SMALL LETTER K WITH STROKE AND DIAGONAL STROKE"));
        data.insert(std::make_pair(0xa746,"LATIN CAPITAL LETTER BROKEN L"));
        data.insert(std::make_pair(0xa747,"LATIN SMALL LETTER BROKEN L"));
        data.insert(std::make_pair(0xa748,"LATIN CAPITAL LETTER L WITH HIGH STROKE"));
        data.insert(std::make_pair(0xa749,"LATIN SMALL LETTER L WITH HIGH STROKE"));
        data.insert(std::make_pair(0xa74a,"LATIN CAPITAL LETTER O WITH LONG STROKE OVERLAY"));
        data.insert(std::make_pair(0xa74b,"LATIN SMALL LETTER O WITH LONG STROKE OVERLAY"));
        data.insert(std::make_pair(0xa74c,"LATIN CAPITAL LETTER O WITH LOOP"));
        data.insert(std::make_pair(0xa74d,"LATIN SMALL LETTER O WITH LOOP"));
        data.insert(std::make_pair(0xa74e,"LATIN CAPITAL LETTER OO"));
        data.insert(std::make_pair(0xa74f,"LATIN SMALL LETTER OO"));
        data.insert(std::make_pair(0xa750,"LATIN CAPITAL LETTER P WITH STROKE THROUGH DESCENDER"));
        data.insert(std::make_pair(0xa751,"LATIN SMALL LETTER P WITH STROKE THROUGH DESCENDER"));
        data.insert(std::make_pair(0xa752,"LATIN CAPITAL LETTER P WITH FLOURISH"));
        data.insert(std::make_pair(0xa753,"LATIN SMALL LETTER P WITH FLOURISH"));
        data.insert(std::make_pair(0xa754,"LATIN CAPITAL LETTER P WITH SQUIRREL TAIL"));
        data.insert(std::make_pair(0xa755,"LATIN SMALL LETTER P WITH SQUIRREL TAIL"));
        data.insert(std::make_pair(0xa756,"LATIN CAPITAL LETTER Q WITH STROKE THROUGH DESCENDER"));
        data.insert(std::make_pair(0xa757,"LATIN SMALL LETTER Q WITH STROKE THROUGH DESCENDER"));
        data.insert(std::make_pair(0xa758,"LATIN CAPITAL LETTER Q WITH DIAGONAL STROKE"));
        data.insert(std::make_pair(0xa759,"LATIN SMALL LETTER Q WITH DIAGONAL STROKE"));
        data.insert(std::make_pair(0xa75a,"LATIN CAPITAL LETTER R ROTUNDA"));
        data.insert(std::make_pair(0xa75b,"LATIN SMALL LETTER R ROTUNDA"));
        data.insert(std::make_pair(0xa75c,"LATIN CAPITAL LETTER RUM ROTUNDA"));
        data.insert(std::make_pair(0xa75d,"LATIN SMALL LETTER RUM ROTUNDA"));
        data.insert(std::make_pair(0xa75e,"LATIN CAPITAL LETTER V WITH DIAGONAL STROKE"));
        data.insert(std::make_pair(0xa75f,"LATIN SMALL LETTER V WITH DIAGONAL STROKE"));
        data.insert(std::make_pair(0xa760,"LATIN CAPITAL LETTER VY"));
        data.insert(std::make_pair(0xa761,"LATIN SMALL LETTER VY"));
        data.insert(std::make_pair(0xa762,"LATIN CAPITAL LETTER VISIGOTHIC Z"));
        data.insert(std::make_pair(0xa763,"LATIN SMALL LETTER VISIGOTHIC Z"));
        data.insert(std::make_pair(0xa764,"LATIN CAPITAL LETTER THORN WITH STROKE"));
        data.insert(std::make_pair(0xa765,"LATIN SMALL LETTER THORN WITH STROKE"));
        data.insert(std::make_pair(0xa766,"LATIN CAPITAL LETTER THORN WITH STROKE THROUGH DESCENDER"));
        data.insert(std::make_pair(0xa767,"LATIN SMALL LETTER THORN WITH STROKE THROUGH DESCENDER"));
        data.insert(std::make_pair(0xa768,"LATIN CAPITAL LETTER VEND"));
        data.insert(std::make_pair(0xa769,"LATIN SMALL LETTER VEND"));
        data.insert(std::make_pair(0xa76a,"LATIN CAPITAL LETTER ET"));
        data.insert(std::make_pair(0xa76b,"LATIN SMALL LETTER ET"));
        data.insert(std::make_pair(0xa76c,"LATIN CAPITAL LETTER IS"));
        data.insert(std::make_pair(0xa76d,"LATIN SMALL LETTER IS"));
        data.insert(std::make_pair(0xa76e,"LATIN CAPITAL LETTER CON"));
        data.insert(std::make_pair(0xa76f,"LATIN SMALL LETTER CON"));
        data.insert(std::make_pair(0xa770,"MODIFIER LETTER US"));
        data.insert(std::make_pair(0xa771,"LATIN SMALL LETTER DUM"));
        data.insert(std::make_pair(0xa772,"LATIN SMALL LETTER LUM"));
        data.insert(std::make_pair(0xa773,"LATIN SMALL LETTER MUM"));
        data.insert(std::make_pair(0xa774,"LATIN SMALL LETTER NUM"));
        data.insert(std::make_pair(0xa775,"LATIN SMALL LETTER RUM"));
        data.insert(std::make_pair(0xa776,"LATIN LETTER SMALL CAPITAL RUM"));
        data.insert(std::make_pair(0xa777,"LATIN SMALL LETTER TUM"));
        data.insert(std::make_pair(0xa778,"LATIN SMALL LETTER UM"));
        data.insert(std::make_pair(0xa779,"LATIN CAPITAL LETTER INSULAR D"));
        data.insert(std::make_pair(0xa77a,"LATIN SMALL LETTER INSULAR D"));
        data.insert(std::make_pair(0xa77b,"LATIN CAPITAL LETTER INSULAR F"));
        data.insert(std::make_pair(0xa77c,"LATIN SMALL LETTER INSULAR F"));
        data.insert(std::make_pair(0xa77d,"LATIN CAPITAL LETTER INSULAR G"));
        data.insert(std::make_pair(0xa77e,"LATIN CAPITAL LETTER TURNED INSULAR G"));
        data.insert(std::make_pair(0xa77f,"LATIN SMALL LETTER TURNED INSULAR G"));
        data.insert(std::make_pair(0xa780,"LATIN CAPITAL LETTER TURNED L"));
        data.insert(std::make_pair(0xa781,"LATIN SMALL LETTER TURNED L"));
        data.insert(std::make_pair(0xa782,"LATIN CAPITAL LETTER INSULAR R"));
        data.insert(std::make_pair(0xa783,"LATIN SMALL LETTER INSULAR R"));
        data.insert(std::make_pair(0xa784,"LATIN CAPITAL LETTER INSULAR S"));
        data.insert(std::make_pair(0xa785,"LATIN SMALL LETTER INSULAR S"));
        data.insert(std::make_pair(0xa786,"LATIN CAPITAL LETTER INSULAR T"));
        data.insert(std::make_pair(0xa787,"LATIN SMALL LETTER INSULAR T"));
        data.insert(std::make_pair(0xa788,"MODIFIER LETTER LOW CIRCUMFLEX ACCENT"));
        data.insert(std::make_pair(0xa789,"MODIFIER LETTER COLON"));
        data.insert(std::make_pair(0xa78a,"MODIFIER LETTER SHORT EQUALS SIGN"));
        data.insert(std::make_pair(0xa78b,"LATIN CAPITAL LETTER SALTILLO"));
        data.insert(std::make_pair(0xa78c,"LATIN SMALL LETTER SALTILLO"));
        data.insert(std::make_pair(0xa78d,"LATIN CAPITAL LETTER TURNED H"));
        data.insert(std::make_pair(0xa78e,"LATIN SMALL LETTER L WITH RETROFLEX HOOK AND BELT"));
        data.insert(std::make_pair(0xa78f,"LATIN LETTER SINOLOGICAL DOT"));
        data.insert(std::make_pair(0xa790,"LATIN CAPITAL LETTER N WITH DESCENDER"));
        data.insert(std::make_pair(0xa791,"LATIN SMALL LETTER N WITH DESCENDER"));
        data.insert(std::make_pair(0xa792,"LATIN CAPITAL LETTER C WITH BAR"));
        data.insert(std::make_pair(0xa793,"LATIN SMALL LETTER C WITH BAR"));
        data.insert(std::make_pair(0xa794,"LATIN SMALL LETTER C WITH PALATAL HOOK"));
        data.insert(std::make_pair(0xa795,"LATIN SMALL LETTER H WITH PALATAL HOOK"));
        data.insert(std::make_pair(0xa796,"LATIN CAPITAL LETTER B WITH FLOURISH"));
        data.insert(std::make_pair(0xa797,"LATIN SMALL LETTER B WITH FLOURISH"));
        data.insert(std::make_pair(0xa798,"LATIN CAPITAL LETTER F WITH STROKE"));
        data.insert(std::make_pair(0xa799,"LATIN SMALL LETTER F WITH STROKE"));
        data.insert(std::make_pair(0xa79a,"LATIN CAPITAL LETTER VOLAPUK AE"));
        data.insert(std::make_pair(0xa79b,"LATIN SMALL LETTER VOLAPUK AE"));
        data.insert(std::make_pair(0xa79c,"LATIN CAPITAL LETTER VOLAPUK OE"));
        data.insert(std::make_pair(0xa79d,"LATIN SMALL LETTER VOLAPUK OE"));
        data.insert(std::make_pair(0xa79e,"LATIN CAPITAL LETTER VOLAPUK UE"));
        data.insert(std::make_pair(0xa79f,"LATIN SMALL LETTER VOLAPUK UE"));
        data.insert(std::make_pair(0xa7a0,"LATIN CAPITAL LETTER G WITH OBLIQUE STROKE"));
        data.insert(std::make_pair(0xa7a1,"LATIN SMALL LETTER G WITH OBLIQUE STROKE"));
        data.insert(std::make_pair(0xa7a2,"LATIN CAPITAL LETTER K WITH OBLIQUE STROKE"));
        data.insert(std::make_pair(0xa7a3,"LATIN SMALL LETTER K WITH OBLIQUE STROKE"));
        data.insert(std::make_pair(0xa7a4,"LATIN CAPITAL LETTER N WITH OBLIQUE STROKE"));
        data.insert(std::make_pair(0xa7a5,"LATIN SMALL LETTER N WITH OBLIQUE STROKE"));
        data.insert(std::make_pair(0xa7a6,"LATIN CAPITAL LETTER R WITH OBLIQUE STROKE"));
        data.insert(std::make_pair(0xa7a7,"LATIN SMALL LETTER R WITH OBLIQUE STROKE"));
        data.insert(std::make_pair(0xa7a8,"LATIN CAPITAL LETTER S WITH OBLIQUE STROKE"));
        data.insert(std::make_pair(0xa7a9,"LATIN SMALL LETTER S WITH OBLIQUE STROKE"));
        data.insert(std::make_pair(0xa7aa,"LATIN CAPITAL LETTER H WITH HOOK"));
        data.insert(std::make_pair(0xa7ab,"LATIN CAPITAL LETTER REVERSED OPEN E"));
        data.insert(std::make_pair(0xa7ac,"LATIN CAPITAL LETTER SCRIPT G"));
        data.insert(std::make_pair(0xa7ad,"LATIN CAPITAL LETTER L WITH BELT"));
        data.insert(std::make_pair(0xa7ae,"LATIN CAPITAL LETTER SMALL CAPITAL I"));
        data.insert(std::make_pair(0xa7af,"LATIN LETTER SMALL CAPITAL Q"));
        data.insert(std::make_pair(0xa7b0,"LATIN CAPITAL LETTER TURNED K"));
        data.insert(std::make_pair(0xa7b1,"LATIN CAPITAL LETTER TURNED T"));
        data.insert(std::make_pair(0xa7b2,"LATIN CAPITAL LETTER J WITH CROSSED-TAIL"));
        data.insert(std::make_pair(0xa7b3,"LATIN CAPITAL LETTER CHI"));
        data.insert(std::make_pair(0xa7b4,"LATIN CAPITAL LETTER BETA"));
        data.insert(std::make_pair(0xa7b5,"LATIN SMALL LETTER BETA"));
        data.insert(std::make_pair(0xa7b6,"LATIN CAPITAL LETTER OMEGA"));
        data.insert(std::make_pair(0xa7b7,"LATIN SMALL LETTER OMEGA"));
        data.insert(std::make_pair(0xa7b8,"LATIN CAPITAL LETTER U WITH STROKE"));
        data.insert(std::make_pair(0xa7b9,"LATIN SMALL LETTER U WITH STROKE"));
        data.insert(std::make_pair(0xa7ba,"LATIN CAPITAL LETTER GLOTTAL A"));
        data.insert(std::make_pair(0xa7bb,"LATIN SMALL LETTER GLOTTAL A"));
        data.insert(std::make_pair(0xa7bc,"LATIN CAPITAL LETTER GLOTTAL I"));
        data.insert(std::make_pair(0xa7bd,"LATIN SMALL LETTER GLOTTAL I"));
        data.insert(std::make_pair(0xa7be,"LATIN CAPITAL LETTER GLOTTAL U"));
        data.insert(std::make_pair(0xa7bf,"LATIN SMALL LETTER GLOTTAL U"));
        data.insert(std::make_pair(0xa7c0,"LATIN CAPITAL LETTER OLD POLISH O"));
        data.insert(std::make_pair(0xa7c1,"LATIN SMALL LETTER OLD POLISH O"));
        data.insert(std::make_pair(0xa7c2,"LATIN CAPITAL LETTER ANGLICANA W"));
        data.insert(std::make_pair(0xa7c3,"LATIN SMALL LETTER ANGLICANA W"));
        data.insert(std::make_pair(0xa7c4,"LATIN CAPITAL LETTER C WITH PALATAL HOOK"));
        data.insert(std::make_pair(0xa7c5,"LATIN CAPITAL LETTER S WITH HOOK"));
        data.insert(std::make_pair(0xa7c6,"LATIN CAPITAL LETTER Z WITH PALATAL HOOK"));
        data.insert(std::make_pair(0xa7c7,"LATIN CAPITAL LETTER D WITH SHORT STROKE OVERLAY"));
        data.insert(std::make_pair(0xa7c8,"LATIN SMALL LETTER D WITH SHORT STROKE OVERLAY"));
        data.insert(std::make_pair(0xa7c9,"LATIN CAPITAL LETTER S WITH SHORT STROKE OVERLAY"));
        data.insert(std::make_pair(0xa7ca,"LATIN SMALL LETTER S WITH SHORT STROKE OVERLAY"));
        data.insert(std::make_pair(0xa7d0,"LATIN CAPITAL LETTER CLOSED INSULAR G"));
        data.insert(std::make_pair(0xa7d1,"LATIN SMALL LETTER CLOSED INSULAR G"));
        data.insert(std::make_pair(0xa7d3,"LATIN SMALL LETTER DOUBLE THORN"));
        data.insert(std::make_pair(0xa7d5,"LATIN SMALL LETTER DOUBLE WYNN"));
        data.insert(std::make_pair(0xa7d6,"LATIN CAPITAL LETTER MIDDLE SCOTS S"));
        data.insert(std::make_pair(0xa7d7,"LATIN SMALL LETTER MIDDLE SCOTS S"));
        data.insert(std::make_pair(0xa7d8,"LATIN CAPITAL LETTER SIGMOID S"));
        data.insert(std::make_pair(0xa7d9,"LATIN SMALL LETTER SIGMOID S"));
        data.insert(std::make_pair(0xa7f2,"MODIFIER LETTER CAPITAL C"));
        data.insert(std::make_pair(0xa7f3,"MODIFIER LETTER CAPITAL F"));
        data.insert(std::make_pair(0xa7f4,"MODIFIER LETTER CAPITAL Q"));
        data.insert(std::make_pair(0xa7f5,"LATIN CAPITAL LETTER REVERSED HALF H"));
        data.insert(std::make_pair(0xa7f6,"LATIN SMALL LETTER REVERSED HALF H"));
        data.insert(std::make_pair(0xa7f7,"LATIN EPIGRAPHIC LETTER SIDEWAYS I"));
        data.insert(std::make_pair(0xa7f8,"MODIFIER LETTER CAPITAL H WITH STROKE"));
        data.insert(std::make_pair(0xa7f9,"MODIFIER LETTER SMALL LIGATURE OE"));
        data.insert(std::make_pair(0xa7fa,"LATIN LETTER SMALL CAPITAL TURNED M"));
        data.insert(std::make_pair(0xa7fb,"LATIN EPIGRAPHIC LETTER REVERSED F"));
        data.insert(std::make_pair(0xa7fc,"LATIN EPIGRAPHIC LETTER REVERSED P"));
        data.insert(std::make_pair(0xa7fd,"LATIN EPIGRAPHIC LETTER INVERTED M"));
        data.insert(std::make_pair(0xa7fe,"LATIN EPIGRAPHIC LETTER I LONGA"));
        data.insert(std::make_pair(0xa7ff,"LATIN EPIGRAPHIC LETTER ARCHAIC M"));
        data.insert(std::make_pair(0xa800,"SYLOTI NAGRI LETTER A"));
        data.insert(std::make_pair(0xa801,"SYLOTI NAGRI LETTER I"));
        data.insert(std::make_pair(0xa802,"SYLOTI NAGRI SIGN DVISVARA"));
        data.insert(std::make_pair(0xa803,"SYLOTI NAGRI LETTER U"));
        data.insert(std::make_pair(0xa804,"SYLOTI NAGRI LETTER E"));
        data.insert(std::make_pair(0xa805,"SYLOTI NAGRI LETTER O"));
        data.insert(std::make_pair(0xa806,"SYLOTI NAGRI SIGN HASANTA"));
        data.insert(std::make_pair(0xa807,"SYLOTI NAGRI LETTER KO"));
        data.insert(std::make_pair(0xa808,"SYLOTI NAGRI LETTER KHO"));
        data.insert(std::make_pair(0xa809,"SYLOTI NAGRI LETTER GO"));
        data.insert(std::make_pair(0xa80a,"SYLOTI NAGRI LETTER GHO"));
        data.insert(std::make_pair(0xa80b,"SYLOTI NAGRI SIGN ANUSVARA"));
        data.insert(std::make_pair(0xa80c,"SYLOTI NAGRI LETTER CO"));
        data.insert(std::make_pair(0xa80d,"SYLOTI NAGRI LETTER CHO"));
        data.insert(std::make_pair(0xa80e,"SYLOTI NAGRI LETTER JO"));
        data.insert(std::make_pair(0xa80f,"SYLOTI NAGRI LETTER JHO"));
        data.insert(std::make_pair(0xa810,"SYLOTI NAGRI LETTER TTO"));
        data.insert(std::make_pair(0xa811,"SYLOTI NAGRI LETTER TTHO"));
        data.insert(std::make_pair(0xa812,"SYLOTI NAGRI LETTER DDO"));
        data.insert(std::make_pair(0xa813,"SYLOTI NAGRI LETTER DDHO"));
        data.insert(std::make_pair(0xa814,"SYLOTI NAGRI LETTER TO"));
        data.insert(std::make_pair(0xa815,"SYLOTI NAGRI LETTER THO"));
        data.insert(std::make_pair(0xa816,"SYLOTI NAGRI LETTER DO"));
        data.insert(std::make_pair(0xa817,"SYLOTI NAGRI LETTER DHO"));
        data.insert(std::make_pair(0xa818,"SYLOTI NAGRI LETTER NO"));
        data.insert(std::make_pair(0xa819,"SYLOTI NAGRI LETTER PO"));
        data.insert(std::make_pair(0xa81a,"SYLOTI NAGRI LETTER PHO"));
        data.insert(std::make_pair(0xa81b,"SYLOTI NAGRI LETTER BO"));
        data.insert(std::make_pair(0xa81c,"SYLOTI NAGRI LETTER BHO"));
        data.insert(std::make_pair(0xa81d,"SYLOTI NAGRI LETTER MO"));
        data.insert(std::make_pair(0xa81e,"SYLOTI NAGRI LETTER RO"));
        data.insert(std::make_pair(0xa81f,"SYLOTI NAGRI LETTER LO"));
        data.insert(std::make_pair(0xa820,"SYLOTI NAGRI LETTER RRO"));
        data.insert(std::make_pair(0xa821,"SYLOTI NAGRI LETTER SO"));
        data.insert(std::make_pair(0xa822,"SYLOTI NAGRI LETTER HO"));
        data.insert(std::make_pair(0xa823,"SYLOTI NAGRI VOWEL SIGN A"));
        data.insert(std::make_pair(0xa824,"SYLOTI NAGRI VOWEL SIGN I"));
        data.insert(std::make_pair(0xa825,"SYLOTI NAGRI VOWEL SIGN U"));
        data.insert(std::make_pair(0xa826,"SYLOTI NAGRI VOWEL SIGN E"));
        data.insert(std::make_pair(0xa827,"SYLOTI NAGRI VOWEL SIGN OO"));
        data.insert(std::make_pair(0xa828,"SYLOTI NAGRI POETRY MARK-1"));
        data.insert(std::make_pair(0xa829,"SYLOTI NAGRI POETRY MARK-2"));
        data.insert(std::make_pair(0xa82a,"SYLOTI NAGRI POETRY MARK-3"));
        data.insert(std::make_pair(0xa82b,"SYLOTI NAGRI POETRY MARK-4"));
        data.insert(std::make_pair(0xa82c,"SYLOTI NAGRI SIGN ALTERNATE HASANTA"));
        data.insert(std::make_pair(0xa830,"NORTH INDIC FRACTION ONE QUARTER"));
        data.insert(std::make_pair(0xa831,"NORTH INDIC FRACTION ONE HALF"));
        data.insert(std::make_pair(0xa832,"NORTH INDIC FRACTION THREE QUARTERS"));
        data.insert(std::make_pair(0xa833,"NORTH INDIC FRACTION ONE SIXTEENTH"));
        data.insert(std::make_pair(0xa834,"NORTH INDIC FRACTION ONE EIGHTH"));
        data.insert(std::make_pair(0xa835,"NORTH INDIC FRACTION THREE SIXTEENTHS"));
        data.insert(std::make_pair(0xa836,"NORTH INDIC QUARTER MARK"));
        data.insert(std::make_pair(0xa837,"NORTH INDIC PLACEHOLDER MARK"));
        data.insert(std::make_pair(0xa838,"NORTH INDIC RUPEE MARK"));
        data.insert(std::make_pair(0xa839,"NORTH INDIC QUANTITY MARK"));
        data.insert(std::make_pair(0xa840,"PHAGS-PA LETTER KA"));
        data.insert(std::make_pair(0xa841,"PHAGS-PA LETTER KHA"));
        data.insert(std::make_pair(0xa842,"PHAGS-PA LETTER GA"));
        data.insert(std::make_pair(0xa843,"PHAGS-PA LETTER NGA"));
        data.insert(std::make_pair(0xa844,"PHAGS-PA LETTER CA"));
        data.insert(std::make_pair(0xa845,"PHAGS-PA LETTER CHA"));
        data.insert(std::make_pair(0xa846,"PHAGS-PA LETTER JA"));
        data.insert(std::make_pair(0xa847,"PHAGS-PA LETTER NYA"));
        data.insert(std::make_pair(0xa848,"PHAGS-PA LETTER TA"));
        data.insert(std::make_pair(0xa849,"PHAGS-PA LETTER THA"));
        data.insert(std::make_pair(0xa84a,"PHAGS-PA LETTER DA"));
        data.insert(std::make_pair(0xa84b,"PHAGS-PA LETTER NA"));
        data.insert(std::make_pair(0xa84c,"PHAGS-PA LETTER PA"));
        data.insert(std::make_pair(0xa84d,"PHAGS-PA LETTER PHA"));
        data.insert(std::make_pair(0xa84e,"PHAGS-PA LETTER BA"));
        data.insert(std::make_pair(0xa84f,"PHAGS-PA LETTER MA"));
        data.insert(std::make_pair(0xa850,"PHAGS-PA LETTER TSA"));
        data.insert(std::make_pair(0xa851,"PHAGS-PA LETTER TSHA"));
        data.insert(std::make_pair(0xa852,"PHAGS-PA LETTER DZA"));
        data.insert(std::make_pair(0xa853,"PHAGS-PA LETTER WA"));
        data.insert(std::make_pair(0xa854,"PHAGS-PA LETTER ZHA"));
        data.insert(std::make_pair(0xa855,"PHAGS-PA LETTER ZA"));
        data.insert(std::make_pair(0xa856,"PHAGS-PA LETTER SMALL A"));
        data.insert(std::make_pair(0xa857,"PHAGS-PA LETTER YA"));
        data.insert(std::make_pair(0xa858,"PHAGS-PA LETTER RA"));
        data.insert(std::make_pair(0xa859,"PHAGS-PA LETTER LA"));
        data.insert(std::make_pair(0xa85a,"PHAGS-PA LETTER SHA"));
        data.insert(std::make_pair(0xa85b,"PHAGS-PA LETTER SA"));
        data.insert(std::make_pair(0xa85c,"PHAGS-PA LETTER HA"));
        data.insert(std::make_pair(0xa85d,"PHAGS-PA LETTER A"));
        data.insert(std::make_pair(0xa85e,"PHAGS-PA LETTER I"));
        data.insert(std::make_pair(0xa85f,"PHAGS-PA LETTER U"));
        data.insert(std::make_pair(0xa860,"PHAGS-PA LETTER E"));
        data.insert(std::make_pair(0xa861,"PHAGS-PA LETTER O"));
        data.insert(std::make_pair(0xa862,"PHAGS-PA LETTER QA"));
        data.insert(std::make_pair(0xa863,"PHAGS-PA LETTER XA"));
        data.insert(std::make_pair(0xa864,"PHAGS-PA LETTER FA"));
        data.insert(std::make_pair(0xa865,"PHAGS-PA LETTER GGA"));
        data.insert(std::make_pair(0xa866,"PHAGS-PA LETTER EE"));
        data.insert(std::make_pair(0xa867,"PHAGS-PA SUBJOINED LETTER WA"));
        data.insert(std::make_pair(0xa868,"PHAGS-PA SUBJOINED LETTER YA"));
        data.insert(std::make_pair(0xa869,"PHAGS-PA LETTER TTA"));
        data.insert(std::make_pair(0xa86a,"PHAGS-PA LETTER TTHA"));
        data.insert(std::make_pair(0xa86b,"PHAGS-PA LETTER DDA"));
        data.insert(std::make_pair(0xa86c,"PHAGS-PA LETTER NNA"));
        data.insert(std::make_pair(0xa86d,"PHAGS-PA LETTER ALTERNATE YA"));
        data.insert(std::make_pair(0xa86e,"PHAGS-PA LETTER VOICELESS SHA"));
        data.insert(std::make_pair(0xa86f,"PHAGS-PA LETTER VOICED HA"));
        data.insert(std::make_pair(0xa870,"PHAGS-PA LETTER ASPIRATED FA"));
        data.insert(std::make_pair(0xa871,"PHAGS-PA SUBJOINED LETTER RA"));
        data.insert(std::make_pair(0xa872,"PHAGS-PA SUPERFIXED LETTER RA"));
        data.insert(std::make_pair(0xa873,"PHAGS-PA LETTER CANDRABINDU"));
        data.insert(std::make_pair(0xa874,"PHAGS-PA SINGLE HEAD MARK"));
        data.insert(std::make_pair(0xa875,"PHAGS-PA DOUBLE HEAD MARK"));
        data.insert(std::make_pair(0xa876,"PHAGS-PA MARK SHAD"));
        data.insert(std::make_pair(0xa877,"PHAGS-PA MARK DOUBLE SHAD"));
        data.insert(std::make_pair(0xa880,"SAURASHTRA SIGN ANUSVARA"));
        data.insert(std::make_pair(0xa881,"SAURASHTRA SIGN VISARGA"));
        data.insert(std::make_pair(0xa882,"SAURASHTRA LETTER A"));
        data.insert(std::make_pair(0xa883,"SAURASHTRA LETTER AA"));
        data.insert(std::make_pair(0xa884,"SAURASHTRA LETTER I"));
        data.insert(std::make_pair(0xa885,"SAURASHTRA LETTER II"));
        data.insert(std::make_pair(0xa886,"SAURASHTRA LETTER U"));
        data.insert(std::make_pair(0xa887,"SAURASHTRA LETTER UU"));
        data.insert(std::make_pair(0xa888,"SAURASHTRA LETTER VOCALIC R"));
        data.insert(std::make_pair(0xa889,"SAURASHTRA LETTER VOCALIC RR"));
        data.insert(std::make_pair(0xa88a,"SAURASHTRA LETTER VOCALIC L"));
        data.insert(std::make_pair(0xa88b,"SAURASHTRA LETTER VOCALIC LL"));
        data.insert(std::make_pair(0xa88c,"SAURASHTRA LETTER E"));
        data.insert(std::make_pair(0xa88d,"SAURASHTRA LETTER EE"));
        data.insert(std::make_pair(0xa88e,"SAURASHTRA LETTER AI"));
        data.insert(std::make_pair(0xa88f,"SAURASHTRA LETTER O"));
        data.insert(std::make_pair(0xa890,"SAURASHTRA LETTER OO"));
        data.insert(std::make_pair(0xa891,"SAURASHTRA LETTER AU"));
        data.insert(std::make_pair(0xa892,"SAURASHTRA LETTER KA"));
        data.insert(std::make_pair(0xa893,"SAURASHTRA LETTER KHA"));
        data.insert(std::make_pair(0xa894,"SAURASHTRA LETTER GA"));
        data.insert(std::make_pair(0xa895,"SAURASHTRA LETTER GHA"));
        data.insert(std::make_pair(0xa896,"SAURASHTRA LETTER NGA"));
        data.insert(std::make_pair(0xa897,"SAURASHTRA LETTER CA"));
        data.insert(std::make_pair(0xa898,"SAURASHTRA LETTER CHA"));
        data.insert(std::make_pair(0xa899,"SAURASHTRA LETTER JA"));
        data.insert(std::make_pair(0xa89a,"SAURASHTRA LETTER JHA"));
        data.insert(std::make_pair(0xa89b,"SAURASHTRA LETTER NYA"));
        data.insert(std::make_pair(0xa89c,"SAURASHTRA LETTER TTA"));
        data.insert(std::make_pair(0xa89d,"SAURASHTRA LETTER TTHA"));
        data.insert(std::make_pair(0xa89e,"SAURASHTRA LETTER DDA"));
        data.insert(std::make_pair(0xa89f,"SAURASHTRA LETTER DDHA"));
        data.insert(std::make_pair(0xa8a0,"SAURASHTRA LETTER NNA"));
        data.insert(std::make_pair(0xa8a1,"SAURASHTRA LETTER TA"));
        data.insert(std::make_pair(0xa8a2,"SAURASHTRA LETTER THA"));
        data.insert(std::make_pair(0xa8a3,"SAURASHTRA LETTER DA"));
        data.insert(std::make_pair(0xa8a4,"SAURASHTRA LETTER DHA"));
        data.insert(std::make_pair(0xa8a5,"SAURASHTRA LETTER NA"));
        data.insert(std::make_pair(0xa8a6,"SAURASHTRA LETTER PA"));
        data.insert(std::make_pair(0xa8a7,"SAURASHTRA LETTER PHA"));
        data.insert(std::make_pair(0xa8a8,"SAURASHTRA LETTER BA"));
        data.insert(std::make_pair(0xa8a9,"SAURASHTRA LETTER BHA"));
        data.insert(std::make_pair(0xa8aa,"SAURASHTRA LETTER MA"));
        data.insert(std::make_pair(0xa8ab,"SAURASHTRA LETTER YA"));
        data.insert(std::make_pair(0xa8ac,"SAURASHTRA LETTER RA"));
        data.insert(std::make_pair(0xa8ad,"SAURASHTRA LETTER LA"));
        data.insert(std::make_pair(0xa8ae,"SAURASHTRA LETTER VA"));
        data.insert(std::make_pair(0xa8af,"SAURASHTRA LETTER SHA"));
        data.insert(std::make_pair(0xa8b0,"SAURASHTRA LETTER SSA"));
        data.insert(std::make_pair(0xa8b1,"SAURASHTRA LETTER SA"));
        data.insert(std::make_pair(0xa8b2,"SAURASHTRA LETTER HA"));
        data.insert(std::make_pair(0xa8b3,"SAURASHTRA LETTER LLA"));
        data.insert(std::make_pair(0xa8b4,"SAURASHTRA CONSONANT SIGN HAARU"));
        data.insert(std::make_pair(0xa8b5,"SAURASHTRA VOWEL SIGN AA"));
        data.insert(std::make_pair(0xa8b6,"SAURASHTRA VOWEL SIGN I"));
        data.insert(std::make_pair(0xa8b7,"SAURASHTRA VOWEL SIGN II"));
        data.insert(std::make_pair(0xa8b8,"SAURASHTRA VOWEL SIGN U"));
        data.insert(std::make_pair(0xa8b9,"SAURASHTRA VOWEL SIGN UU"));
        data.insert(std::make_pair(0xa8ba,"SAURASHTRA VOWEL SIGN VOCALIC R"));
        data.insert(std::make_pair(0xa8bb,"SAURASHTRA VOWEL SIGN VOCALIC RR"));
        data.insert(std::make_pair(0xa8bc,"SAURASHTRA VOWEL SIGN VOCALIC L"));
        data.insert(std::make_pair(0xa8bd,"SAURASHTRA VOWEL SIGN VOCALIC LL"));
        data.insert(std::make_pair(0xa8be,"SAURASHTRA VOWEL SIGN E"));
        data.insert(std::make_pair(0xa8bf,"SAURASHTRA VOWEL SIGN EE"));
        data.insert(std::make_pair(0xa8c0,"SAURASHTRA VOWEL SIGN AI"));
        data.insert(std::make_pair(0xa8c1,"SAURASHTRA VOWEL SIGN O"));
        data.insert(std::make_pair(0xa8c2,"SAURASHTRA VOWEL SIGN OO"));
        data.insert(std::make_pair(0xa8c3,"SAURASHTRA VOWEL SIGN AU"));
        data.insert(std::make_pair(0xa8c4,"SAURASHTRA SIGN VIRAMA"));
        data.insert(std::make_pair(0xa8c5,"SAURASHTRA SIGN CANDRABINDU"));
        data.insert(std::make_pair(0xa8ce,"SAURASHTRA DANDA"));
        data.insert(std::make_pair(0xa8cf,"SAURASHTRA DOUBLE DANDA"));
        data.insert(std::make_pair(0xa8d0,"SAURASHTRA DIGIT ZERO"));
        data.insert(std::make_pair(0xa8d1,"SAURASHTRA DIGIT ONE"));
        data.insert(std::make_pair(0xa8d2,"SAURASHTRA DIGIT TWO"));
        data.insert(std::make_pair(0xa8d3,"SAURASHTRA DIGIT THREE"));
        data.insert(std::make_pair(0xa8d4,"SAURASHTRA DIGIT FOUR"));
        data.insert(std::make_pair(0xa8d5,"SAURASHTRA DIGIT FIVE"));
        data.insert(std::make_pair(0xa8d6,"SAURASHTRA DIGIT SIX"));
        data.insert(std::make_pair(0xa8d7,"SAURASHTRA DIGIT SEVEN"));
        data.insert(std::make_pair(0xa8d8,"SAURASHTRA DIGIT EIGHT"));
        data.insert(std::make_pair(0xa8d9,"SAURASHTRA DIGIT NINE"));
        data.insert(std::make_pair(0xa8e0,"COMBINING DEVANAGARI DIGIT ZERO"));
        data.insert(std::make_pair(0xa8e1,"COMBINING DEVANAGARI DIGIT ONE"));
        data.insert(std::make_pair(0xa8e2,"COMBINING DEVANAGARI DIGIT TWO"));
        data.insert(std::make_pair(0xa8e3,"COMBINING DEVANAGARI DIGIT THREE"));
        data.insert(std::make_pair(0xa8e4,"COMBINING DEVANAGARI DIGIT FOUR"));
        data.insert(std::make_pair(0xa8e5,"COMBINING DEVANAGARI DIGIT FIVE"));
        data.insert(std::make_pair(0xa8e6,"COMBINING DEVANAGARI DIGIT SIX"));
        data.insert(std::make_pair(0xa8e7,"COMBINING DEVANAGARI DIGIT SEVEN"));
        data.insert(std::make_pair(0xa8e8,"COMBINING DEVANAGARI DIGIT EIGHT"));
        data.insert(std::make_pair(0xa8e9,"COMBINING DEVANAGARI DIGIT NINE"));
        data.insert(std::make_pair(0xa8ea,"COMBINING DEVANAGARI LETTER A"));
        data.insert(std::make_pair(0xa8eb,"COMBINING DEVANAGARI LETTER U"));
        data.insert(std::make_pair(0xa8ec,"COMBINING DEVANAGARI LETTER KA"));
        data.insert(std::make_pair(0xa8ed,"COMBINING DEVANAGARI LETTER NA"));
        data.insert(std::make_pair(0xa8ee,"COMBINING DEVANAGARI LETTER PA"));
        data.insert(std::make_pair(0xa8ef,"COMBINING DEVANAGARI LETTER RA"));
        data.insert(std::make_pair(0xa8f0,"COMBINING DEVANAGARI LETTER VI"));
        data.insert(std::make_pair(0xa8f1,"COMBINING DEVANAGARI SIGN AVAGRAHA"));
        data.insert(std::make_pair(0xa8f2,"DEVANAGARI SIGN SPACING CANDRABINDU"));
        data.insert(std::make_pair(0xa8f3,"DEVANAGARI SIGN CANDRABINDU VIRAMA"));
        data.insert(std::make_pair(0xa8f4,"DEVANAGARI SIGN DOUBLE CANDRABINDU VIRAMA"));
        data.insert(std::make_pair(0xa8f5,"DEVANAGARI SIGN CANDRABINDU TWO"));
        data.insert(std::make_pair(0xa8f6,"DEVANAGARI SIGN CANDRABINDU THREE"));
        data.insert(std::make_pair(0xa8f7,"DEVANAGARI SIGN CANDRABINDU AVAGRAHA"));
        data.insert(std::make_pair(0xa8f8,"DEVANAGARI SIGN PUSHPIKA"));
        data.insert(std::make_pair(0xa8f9,"DEVANAGARI GAP FILLER"));
        data.insert(std::make_pair(0xa8fa,"DEVANAGARI CARET"));
        data.insert(std::make_pair(0xa8fb,"DEVANAGARI HEADSTROKE"));
        data.insert(std::make_pair(0xa8fc,"DEVANAGARI SIGN SIDDHAM"));
        data.insert(std::make_pair(0xa8fd,"DEVANAGARI JAIN OM"));
        data.insert(std::make_pair(0xa8fe,"DEVANAGARI LETTER AY"));
        data.insert(std::make_pair(0xa8ff,"DEVANAGARI VOWEL SIGN AY"));
        data.insert(std::make_pair(0xa900,"KAYAH LI DIGIT ZERO"));
        data.insert(std::make_pair(0xa901,"KAYAH LI DIGIT ONE"));
        data.insert(std::make_pair(0xa902,"KAYAH LI DIGIT TWO"));
        data.insert(std::make_pair(0xa903,"KAYAH LI DIGIT THREE"));
        data.insert(std::make_pair(0xa904,"KAYAH LI DIGIT FOUR"));
        data.insert(std::make_pair(0xa905,"KAYAH LI DIGIT FIVE"));
        data.insert(std::make_pair(0xa906,"KAYAH LI DIGIT SIX"));
        data.insert(std::make_pair(0xa907,"KAYAH LI DIGIT SEVEN"));
        data.insert(std::make_pair(0xa908,"KAYAH LI DIGIT EIGHT"));
        data.insert(std::make_pair(0xa909,"KAYAH LI DIGIT NINE"));
        data.insert(std::make_pair(0xa90a,"KAYAH LI LETTER KA"));
        data.insert(std::make_pair(0xa90b,"KAYAH LI LETTER KHA"));
        data.insert(std::make_pair(0xa90c,"KAYAH LI LETTER GA"));
        data.insert(std::make_pair(0xa90d,"KAYAH LI LETTER NGA"));
        data.insert(std::make_pair(0xa90e,"KAYAH LI LETTER SA"));
        data.insert(std::make_pair(0xa90f,"KAYAH LI LETTER SHA"));
        data.insert(std::make_pair(0xa910,"KAYAH LI LETTER ZA"));
        data.insert(std::make_pair(0xa911,"KAYAH LI LETTER NYA"));
        data.insert(std::make_pair(0xa912,"KAYAH LI LETTER TA"));
        data.insert(std::make_pair(0xa913,"KAYAH LI LETTER HTA"));
        data.insert(std::make_pair(0xa914,"KAYAH LI LETTER NA"));
        data.insert(std::make_pair(0xa915,"KAYAH LI LETTER PA"));
        data.insert(std::make_pair(0xa916,"KAYAH LI LETTER PHA"));
        data.insert(std::make_pair(0xa917,"KAYAH LI LETTER MA"));
        data.insert(std::make_pair(0xa918,"KAYAH LI LETTER DA"));
        data.insert(std::make_pair(0xa919,"KAYAH LI LETTER BA"));
        data.insert(std::make_pair(0xa91a,"KAYAH LI LETTER RA"));
        data.insert(std::make_pair(0xa91b,"KAYAH LI LETTER YA"));
        data.insert(std::make_pair(0xa91c,"KAYAH LI LETTER LA"));
        data.insert(std::make_pair(0xa91d,"KAYAH LI LETTER WA"));
        data.insert(std::make_pair(0xa91e,"KAYAH LI LETTER THA"));
        data.insert(std::make_pair(0xa91f,"KAYAH LI LETTER HA"));
        data.insert(std::make_pair(0xa920,"KAYAH LI LETTER VA"));
        data.insert(std::make_pair(0xa921,"KAYAH LI LETTER CA"));
        data.insert(std::make_pair(0xa922,"KAYAH LI LETTER A"));
        data.insert(std::make_pair(0xa923,"KAYAH LI LETTER OE"));
        data.insert(std::make_pair(0xa924,"KAYAH LI LETTER I"));
        data.insert(std::make_pair(0xa925,"KAYAH LI LETTER OO"));
        data.insert(std::make_pair(0xa926,"KAYAH LI VOWEL UE"));
        data.insert(std::make_pair(0xa927,"KAYAH LI VOWEL E"));
        data.insert(std::make_pair(0xa928,"KAYAH LI VOWEL U"));
        data.insert(std::make_pair(0xa929,"KAYAH LI VOWEL EE"));
        data.insert(std::make_pair(0xa92a,"KAYAH LI VOWEL O"));
        data.insert(std::make_pair(0xa92b,"KAYAH LI TONE PLOPHU"));
        data.insert(std::make_pair(0xa92c,"KAYAH LI TONE CALYA"));
        data.insert(std::make_pair(0xa92d,"KAYAH LI TONE CALYA PLOPHU"));
        data.insert(std::make_pair(0xa92e,"KAYAH LI SIGN CWI"));
        data.insert(std::make_pair(0xa92f,"KAYAH LI SIGN SHYA"));
        data.insert(std::make_pair(0xa930,"REJANG LETTER KA"));
        data.insert(std::make_pair(0xa931,"REJANG LETTER GA"));
        data.insert(std::make_pair(0xa932,"REJANG LETTER NGA"));
        data.insert(std::make_pair(0xa933,"REJANG LETTER TA"));
        data.insert(std::make_pair(0xa934,"REJANG LETTER DA"));
        data.insert(std::make_pair(0xa935,"REJANG LETTER NA"));
        data.insert(std::make_pair(0xa936,"REJANG LETTER PA"));
        data.insert(std::make_pair(0xa937,"REJANG LETTER BA"));
        data.insert(std::make_pair(0xa938,"REJANG LETTER MA"));
        data.insert(std::make_pair(0xa939,"REJANG LETTER CA"));
        data.insert(std::make_pair(0xa93a,"REJANG LETTER JA"));
        data.insert(std::make_pair(0xa93b,"REJANG LETTER NYA"));
        data.insert(std::make_pair(0xa93c,"REJANG LETTER SA"));
        data.insert(std::make_pair(0xa93d,"REJANG LETTER RA"));
        data.insert(std::make_pair(0xa93e,"REJANG LETTER LA"));
        data.insert(std::make_pair(0xa93f,"REJANG LETTER YA"));
        data.insert(std::make_pair(0xa940,"REJANG LETTER WA"));
        data.insert(std::make_pair(0xa941,"REJANG LETTER HA"));
        data.insert(std::make_pair(0xa942,"REJANG LETTER MBA"));
        data.insert(std::make_pair(0xa943,"REJANG LETTER NGGA"));
        data.insert(std::make_pair(0xa944,"REJANG LETTER NDA"));
        data.insert(std::make_pair(0xa945,"REJANG LETTER NYJA"));
        data.insert(std::make_pair(0xa946,"REJANG LETTER A"));
        data.insert(std::make_pair(0xa947,"REJANG VOWEL SIGN I"));
        data.insert(std::make_pair(0xa948,"REJANG VOWEL SIGN U"));
        data.insert(std::make_pair(0xa949,"REJANG VOWEL SIGN E"));
        data.insert(std::make_pair(0xa94a,"REJANG VOWEL SIGN AI"));
        data.insert(std::make_pair(0xa94b,"REJANG VOWEL SIGN O"));
        data.insert(std::make_pair(0xa94c,"REJANG VOWEL SIGN AU"));
        data.insert(std::make_pair(0xa94d,"REJANG VOWEL SIGN EU"));
        data.insert(std::make_pair(0xa94e,"REJANG VOWEL SIGN EA"));
        data.insert(std::make_pair(0xa94f,"REJANG CONSONANT SIGN NG"));
        data.insert(std::make_pair(0xa950,"REJANG CONSONANT SIGN N"));
        data.insert(std::make_pair(0xa951,"REJANG CONSONANT SIGN R"));
        data.insert(std::make_pair(0xa952,"REJANG CONSONANT SIGN H"));
        data.insert(std::make_pair(0xa953,"REJANG VIRAMA"));
        data.insert(std::make_pair(0xa95f,"REJANG SECTION MARK"));
        data.insert(std::make_pair(0xa960,"HANGUL CHOSEONG TIKEUT-MIEUM"));
        data.insert(std::make_pair(0xa961,"HANGUL CHOSEONG TIKEUT-PIEUP"));
        data.insert(std::make_pair(0xa962,"HANGUL CHOSEONG TIKEUT-SIOS"));
        data.insert(std::make_pair(0xa963,"HANGUL CHOSEONG TIKEUT-CIEUC"));
        data.insert(std::make_pair(0xa964,"HANGUL CHOSEONG RIEUL-KIYEOK"));
        data.insert(std::make_pair(0xa965,"HANGUL CHOSEONG RIEUL-SSANGKIYEOK"));
        data.insert(std::make_pair(0xa966,"HANGUL CHOSEONG RIEUL-TIKEUT"));
        data.insert(std::make_pair(0xa967,"HANGUL CHOSEONG RIEUL-SSANGTIKEUT"));
        data.insert(std::make_pair(0xa968,"HANGUL CHOSEONG RIEUL-MIEUM"));
        data.insert(std::make_pair(0xa969,"HANGUL CHOSEONG RIEUL-PIEUP"));
        data.insert(std::make_pair(0xa96a,"HANGUL CHOSEONG RIEUL-SSANGPIEUP"));
        data.insert(std::make_pair(0xa96b,"HANGUL CHOSEONG RIEUL-KAPYEOUNPIEUP"));
        data.insert(std::make_pair(0xa96c,"HANGUL CHOSEONG RIEUL-SIOS"));
        data.insert(std::make_pair(0xa96d,"HANGUL CHOSEONG RIEUL-CIEUC"));
        data.insert(std::make_pair(0xa96e,"HANGUL CHOSEONG RIEUL-KHIEUKH"));
        data.insert(std::make_pair(0xa96f,"HANGUL CHOSEONG MIEUM-KIYEOK"));
        data.insert(std::make_pair(0xa970,"HANGUL CHOSEONG MIEUM-TIKEUT"));
        data.insert(std::make_pair(0xa971,"HANGUL CHOSEONG MIEUM-SIOS"));
        data.insert(std::make_pair(0xa972,"HANGUL CHOSEONG PIEUP-SIOS-THIEUTH"));
        data.insert(std::make_pair(0xa973,"HANGUL CHOSEONG PIEUP-KHIEUKH"));
        data.insert(std::make_pair(0xa974,"HANGUL CHOSEONG PIEUP-HIEUH"));
        data.insert(std::make_pair(0xa975,"HANGUL CHOSEONG SSANGSIOS-PIEUP"));
        data.insert(std::make_pair(0xa976,"HANGUL CHOSEONG IEUNG-RIEUL"));
        data.insert(std::make_pair(0xa977,"HANGUL CHOSEONG IEUNG-HIEUH"));
        data.insert(std::make_pair(0xa978,"HANGUL CHOSEONG SSANGCIEUC-HIEUH"));
        data.insert(std::make_pair(0xa979,"HANGUL CHOSEONG SSANGTHIEUTH"));
        data.insert(std::make_pair(0xa97a,"HANGUL CHOSEONG PHIEUPH-HIEUH"));
        data.insert(std::make_pair(0xa97b,"HANGUL CHOSEONG HIEUH-SIOS"));
        data.insert(std::make_pair(0xa97c,"HANGUL CHOSEONG SSANGYEORINHIEUH"));
        data.insert(std::make_pair(0xa980,"JAVANESE SIGN PANYANGGA"));
        data.insert(std::make_pair(0xa981,"JAVANESE SIGN CECAK"));
        data.insert(std::make_pair(0xa982,"JAVANESE SIGN LAYAR"));
        data.insert(std::make_pair(0xa983,"JAVANESE SIGN WIGNYAN"));
        data.insert(std::make_pair(0xa984,"JAVANESE LETTER A"));
        data.insert(std::make_pair(0xa985,"JAVANESE LETTER I KAWI"));
        data.insert(std::make_pair(0xa986,"JAVANESE LETTER I"));
        data.insert(std::make_pair(0xa987,"JAVANESE LETTER II"));
        data.insert(std::make_pair(0xa988,"JAVANESE LETTER U"));
        data.insert(std::make_pair(0xa989,"JAVANESE LETTER PA CEREK"));
        data.insert(std::make_pair(0xa98a,"JAVANESE LETTER NGA LELET"));
        data.insert(std::make_pair(0xa98b,"JAVANESE LETTER NGA LELET RASWADI"));
        data.insert(std::make_pair(0xa98c,"JAVANESE LETTER E"));
        data.insert(std::make_pair(0xa98d,"JAVANESE LETTER AI"));
        data.insert(std::make_pair(0xa98e,"JAVANESE LETTER O"));
        data.insert(std::make_pair(0xa98f,"JAVANESE LETTER KA"));
        data.insert(std::make_pair(0xa990,"JAVANESE LETTER KA SASAK"));
        data.insert(std::make_pair(0xa991,"JAVANESE LETTER KA MURDA"));
        data.insert(std::make_pair(0xa992,"JAVANESE LETTER GA"));
        data.insert(std::make_pair(0xa993,"JAVANESE LETTER GA MURDA"));
        data.insert(std::make_pair(0xa994,"JAVANESE LETTER NGA"));
        data.insert(std::make_pair(0xa995,"JAVANESE LETTER CA"));
        data.insert(std::make_pair(0xa996,"JAVANESE LETTER CA MURDA"));
        data.insert(std::make_pair(0xa997,"JAVANESE LETTER JA"));
        data.insert(std::make_pair(0xa998,"JAVANESE LETTER NYA MURDA"));
        data.insert(std::make_pair(0xa999,"JAVANESE LETTER JA MAHAPRANA"));
        data.insert(std::make_pair(0xa99a,"JAVANESE LETTER NYA"));
        data.insert(std::make_pair(0xa99b,"JAVANESE LETTER TTA"));
        data.insert(std::make_pair(0xa99c,"JAVANESE LETTER TTA MAHAPRANA"));
        data.insert(std::make_pair(0xa99d,"JAVANESE LETTER DDA"));
        data.insert(std::make_pair(0xa99e,"JAVANESE LETTER DDA MAHAPRANA"));
        data.insert(std::make_pair(0xa99f,"JAVANESE LETTER NA MURDA"));
        data.insert(std::make_pair(0xa9a0,"JAVANESE LETTER TA"));
        data.insert(std::make_pair(0xa9a1,"JAVANESE LETTER TA MURDA"));
        data.insert(std::make_pair(0xa9a2,"JAVANESE LETTER DA"));
        data.insert(std::make_pair(0xa9a3,"JAVANESE LETTER DA MAHAPRANA"));
        data.insert(std::make_pair(0xa9a4,"JAVANESE LETTER NA"));
        data.insert(std::make_pair(0xa9a5,"JAVANESE LETTER PA"));
        data.insert(std::make_pair(0xa9a6,"JAVANESE LETTER PA MURDA"));
        data.insert(std::make_pair(0xa9a7,"JAVANESE LETTER BA"));
        data.insert(std::make_pair(0xa9a8,"JAVANESE LETTER BA MURDA"));
        data.insert(std::make_pair(0xa9a9,"JAVANESE LETTER MA"));
        data.insert(std::make_pair(0xa9aa,"JAVANESE LETTER YA"));
        data.insert(std::make_pair(0xa9ab,"JAVANESE LETTER RA"));
        data.insert(std::make_pair(0xa9ac,"JAVANESE LETTER RA AGUNG"));
        data.insert(std::make_pair(0xa9ad,"JAVANESE LETTER LA"));
        data.insert(std::make_pair(0xa9ae,"JAVANESE LETTER WA"));
        data.insert(std::make_pair(0xa9af,"JAVANESE LETTER SA MURDA"));
        data.insert(std::make_pair(0xa9b0,"JAVANESE LETTER SA MAHAPRANA"));
        data.insert(std::make_pair(0xa9b1,"JAVANESE LETTER SA"));
        data.insert(std::make_pair(0xa9b2,"JAVANESE LETTER HA"));
        data.insert(std::make_pair(0xa9b3,"JAVANESE SIGN CECAK TELU"));
        data.insert(std::make_pair(0xa9b4,"JAVANESE VOWEL SIGN TARUNG"));
        data.insert(std::make_pair(0xa9b5,"JAVANESE VOWEL SIGN TOLONG"));
        data.insert(std::make_pair(0xa9b6,"JAVANESE VOWEL SIGN WULU"));
        data.insert(std::make_pair(0xa9b7,"JAVANESE VOWEL SIGN WULU MELIK"));
        data.insert(std::make_pair(0xa9b8,"JAVANESE VOWEL SIGN SUKU"));
        data.insert(std::make_pair(0xa9b9,"JAVANESE VOWEL SIGN SUKU MENDUT"));
        data.insert(std::make_pair(0xa9ba,"JAVANESE VOWEL SIGN TALING"));
        data.insert(std::make_pair(0xa9bb,"JAVANESE VOWEL SIGN DIRGA MURE"));
        data.insert(std::make_pair(0xa9bc,"JAVANESE VOWEL SIGN PEPET"));
        data.insert(std::make_pair(0xa9bd,"JAVANESE CONSONANT SIGN KERET"));
        data.insert(std::make_pair(0xa9be,"JAVANESE CONSONANT SIGN PENGKAL"));
        data.insert(std::make_pair(0xa9bf,"JAVANESE CONSONANT SIGN CAKRA"));
        data.insert(std::make_pair(0xa9c0,"JAVANESE PANGKON"));
        data.insert(std::make_pair(0xa9c1,"JAVANESE LEFT RERENGGAN"));
        data.insert(std::make_pair(0xa9c2,"JAVANESE RIGHT RERENGGAN"));
        data.insert(std::make_pair(0xa9c3,"JAVANESE PADA ANDAP"));
        data.insert(std::make_pair(0xa9c4,"JAVANESE PADA MADYA"));
        data.insert(std::make_pair(0xa9c5,"JAVANESE PADA LUHUR"));
        data.insert(std::make_pair(0xa9c6,"JAVANESE PADA WINDU"));
        data.insert(std::make_pair(0xa9c7,"JAVANESE PADA PANGKAT"));
        data.insert(std::make_pair(0xa9c8,"JAVANESE PADA LINGSA"));
        data.insert(std::make_pair(0xa9c9,"JAVANESE PADA LUNGSI"));
        data.insert(std::make_pair(0xa9ca,"JAVANESE PADA ADEG"));
        data.insert(std::make_pair(0xa9cb,"JAVANESE PADA ADEG ADEG"));
        data.insert(std::make_pair(0xa9cc,"JAVANESE PADA PISELEH"));
        data.insert(std::make_pair(0xa9cd,"JAVANESE TURNED PADA PISELEH"));
        data.insert(std::make_pair(0xa9cf,"JAVANESE PANGRANGKEP"));
        data.insert(std::make_pair(0xa9d0,"JAVANESE DIGIT ZERO"));
        data.insert(std::make_pair(0xa9d1,"JAVANESE DIGIT ONE"));
        data.insert(std::make_pair(0xa9d2,"JAVANESE DIGIT TWO"));
        data.insert(std::make_pair(0xa9d3,"JAVANESE DIGIT THREE"));
        data.insert(std::make_pair(0xa9d4,"JAVANESE DIGIT FOUR"));
        data.insert(std::make_pair(0xa9d5,"JAVANESE DIGIT FIVE"));
        data.insert(std::make_pair(0xa9d6,"JAVANESE DIGIT SIX"));
        data.insert(std::make_pair(0xa9d7,"JAVANESE DIGIT SEVEN"));
        data.insert(std::make_pair(0xa9d8,"JAVANESE DIGIT EIGHT"));
        data.insert(std::make_pair(0xa9d9,"JAVANESE DIGIT NINE"));
        data.insert(std::make_pair(0xa9de,"JAVANESE PADA TIRTA TUMETES"));
        data.insert(std::make_pair(0xa9df,"JAVANESE PADA ISEN-ISEN"));
        data.insert(std::make_pair(0xa9e0,"MYANMAR LETTER SHAN GHA"));
        data.insert(std::make_pair(0xa9e1,"MYANMAR LETTER SHAN CHA"));
        data.insert(std::make_pair(0xa9e2,"MYANMAR LETTER SHAN JHA"));
        data.insert(std::make_pair(0xa9e3,"MYANMAR LETTER SHAN NNA"));
        data.insert(std::make_pair(0xa9e4,"MYANMAR LETTER SHAN BHA"));
        data.insert(std::make_pair(0xa9e5,"MYANMAR SIGN SHAN SAW"));
        data.insert(std::make_pair(0xa9e6,"MYANMAR MODIFIER LETTER SHAN REDUPLICATION"));
        data.insert(std::make_pair(0xa9e7,"MYANMAR LETTER TAI LAING NYA"));
        data.insert(std::make_pair(0xa9e8,"MYANMAR LETTER TAI LAING FA"));
        data.insert(std::make_pair(0xa9e9,"MYANMAR LETTER TAI LAING GA"));
        data.insert(std::make_pair(0xa9ea,"MYANMAR LETTER TAI LAING GHA"));
        data.insert(std::make_pair(0xa9eb,"MYANMAR LETTER TAI LAING JA"));
        data.insert(std::make_pair(0xa9ec,"MYANMAR LETTER TAI LAING JHA"));
        data.insert(std::make_pair(0xa9ed,"MYANMAR LETTER TAI LAING DDA"));
        data.insert(std::make_pair(0xa9ee,"MYANMAR LETTER TAI LAING DDHA"));
        data.insert(std::make_pair(0xa9ef,"MYANMAR LETTER TAI LAING NNA"));
        data.insert(std::make_pair(0xa9f0,"MYANMAR TAI LAING DIGIT ZERO"));
        data.insert(std::make_pair(0xa9f1,"MYANMAR TAI LAING DIGIT ONE"));
        data.insert(std::make_pair(0xa9f2,"MYANMAR TAI LAING DIGIT TWO"));
        data.insert(std::make_pair(0xa9f3,"MYANMAR TAI LAING DIGIT THREE"));
        data.insert(std::make_pair(0xa9f4,"MYANMAR TAI LAING DIGIT FOUR"));
        data.insert(std::make_pair(0xa9f5,"MYANMAR TAI LAING DIGIT FIVE"));
        data.insert(std::make_pair(0xa9f6,"MYANMAR TAI LAING DIGIT SIX"));
        data.insert(std::make_pair(0xa9f7,"MYANMAR TAI LAING DIGIT SEVEN"));
        data.insert(std::make_pair(0xa9f8,"MYANMAR TAI LAING DIGIT EIGHT"));
        data.insert(std::make_pair(0xa9f9,"MYANMAR TAI LAING DIGIT NINE"));
        data.insert(std::make_pair(0xa9fa,"MYANMAR LETTER TAI LAING LLA"));
        data.insert(std::make_pair(0xa9fb,"MYANMAR LETTER TAI LAING DA"));
        data.insert(std::make_pair(0xa9fc,"MYANMAR LETTER TAI LAING DHA"));
        data.insert(std::make_pair(0xa9fd,"MYANMAR LETTER TAI LAING BA"));
        data.insert(std::make_pair(0xa9fe,"MYANMAR LETTER TAI LAING BHA"));
        data.insert(std::make_pair(0xaa00,"CHAM LETTER A"));
        data.insert(std::make_pair(0xaa01,"CHAM LETTER I"));
        data.insert(std::make_pair(0xaa02,"CHAM LETTER U"));
        data.insert(std::make_pair(0xaa03,"CHAM LETTER E"));
        data.insert(std::make_pair(0xaa04,"CHAM LETTER AI"));
        data.insert(std::make_pair(0xaa05,"CHAM LETTER O"));
        data.insert(std::make_pair(0xaa06,"CHAM LETTER KA"));
        data.insert(std::make_pair(0xaa07,"CHAM LETTER KHA"));
        data.insert(std::make_pair(0xaa08,"CHAM LETTER GA"));
        data.insert(std::make_pair(0xaa09,"CHAM LETTER GHA"));
        data.insert(std::make_pair(0xaa0a,"CHAM LETTER NGUE"));
        data.insert(std::make_pair(0xaa0b,"CHAM LETTER NGA"));
        data.insert(std::make_pair(0xaa0c,"CHAM LETTER CHA"));
        data.insert(std::make_pair(0xaa0d,"CHAM LETTER CHHA"));
        data.insert(std::make_pair(0xaa0e,"CHAM LETTER JA"));
        data.insert(std::make_pair(0xaa0f,"CHAM LETTER JHA"));
        data.insert(std::make_pair(0xaa10,"CHAM LETTER NHUE"));
        data.insert(std::make_pair(0xaa11,"CHAM LETTER NHA"));
        data.insert(std::make_pair(0xaa12,"CHAM LETTER NHJA"));
        data.insert(std::make_pair(0xaa13,"CHAM LETTER TA"));
        data.insert(std::make_pair(0xaa14,"CHAM LETTER THA"));
        data.insert(std::make_pair(0xaa15,"CHAM LETTER DA"));
        data.insert(std::make_pair(0xaa16,"CHAM LETTER DHA"));
        data.insert(std::make_pair(0xaa17,"CHAM LETTER NUE"));
        data.insert(std::make_pair(0xaa18,"CHAM LETTER NA"));
        data.insert(std::make_pair(0xaa19,"CHAM LETTER DDA"));
        data.insert(std::make_pair(0xaa1a,"CHAM LETTER PA"));
        data.insert(std::make_pair(0xaa1b,"CHAM LETTER PPA"));
        data.insert(std::make_pair(0xaa1c,"CHAM LETTER PHA"));
        data.insert(std::make_pair(0xaa1d,"CHAM LETTER BA"));
        data.insert(std::make_pair(0xaa1e,"CHAM LETTER BHA"));
        data.insert(std::make_pair(0xaa1f,"CHAM LETTER MUE"));
        data.insert(std::make_pair(0xaa20,"CHAM LETTER MA"));
        data.insert(std::make_pair(0xaa21,"CHAM LETTER BBA"));
        data.insert(std::make_pair(0xaa22,"CHAM LETTER YA"));
        data.insert(std::make_pair(0xaa23,"CHAM LETTER RA"));
        data.insert(std::make_pair(0xaa24,"CHAM LETTER LA"));
        data.insert(std::make_pair(0xaa25,"CHAM LETTER VA"));
        data.insert(std::make_pair(0xaa26,"CHAM LETTER SSA"));
        data.insert(std::make_pair(0xaa27,"CHAM LETTER SA"));
        data.insert(std::make_pair(0xaa28,"CHAM LETTER HA"));
        data.insert(std::make_pair(0xaa29,"CHAM VOWEL SIGN AA"));
        data.insert(std::make_pair(0xaa2a,"CHAM VOWEL SIGN I"));
        data.insert(std::make_pair(0xaa2b,"CHAM VOWEL SIGN II"));
        data.insert(std::make_pair(0xaa2c,"CHAM VOWEL SIGN EI"));
        data.insert(std::make_pair(0xaa2d,"CHAM VOWEL SIGN U"));
        data.insert(std::make_pair(0xaa2e,"CHAM VOWEL SIGN OE"));
        data.insert(std::make_pair(0xaa2f,"CHAM VOWEL SIGN O"));
        data.insert(std::make_pair(0xaa30,"CHAM VOWEL SIGN AI"));
        data.insert(std::make_pair(0xaa31,"CHAM VOWEL SIGN AU"));
        data.insert(std::make_pair(0xaa32,"CHAM VOWEL SIGN UE"));
        data.insert(std::make_pair(0xaa33,"CHAM CONSONANT SIGN YA"));
        data.insert(std::make_pair(0xaa34,"CHAM CONSONANT SIGN RA"));
        data.insert(std::make_pair(0xaa35,"CHAM CONSONANT SIGN LA"));
        data.insert(std::make_pair(0xaa36,"CHAM CONSONANT SIGN WA"));
        data.insert(std::make_pair(0xaa40,"CHAM LETTER FINAL K"));
        data.insert(std::make_pair(0xaa41,"CHAM LETTER FINAL G"));
        data.insert(std::make_pair(0xaa42,"CHAM LETTER FINAL NG"));
        data.insert(std::make_pair(0xaa43,"CHAM CONSONANT SIGN FINAL NG"));
        data.insert(std::make_pair(0xaa44,"CHAM LETTER FINAL CH"));
        data.insert(std::make_pair(0xaa45,"CHAM LETTER FINAL T"));
        data.insert(std::make_pair(0xaa46,"CHAM LETTER FINAL N"));
        data.insert(std::make_pair(0xaa47,"CHAM LETTER FINAL P"));
        data.insert(std::make_pair(0xaa48,"CHAM LETTER FINAL Y"));
        data.insert(std::make_pair(0xaa49,"CHAM LETTER FINAL R"));
        data.insert(std::make_pair(0xaa4a,"CHAM LETTER FINAL L"));
        data.insert(std::make_pair(0xaa4b,"CHAM LETTER FINAL SS"));
        data.insert(std::make_pair(0xaa4c,"CHAM CONSONANT SIGN FINAL M"));
        data.insert(std::make_pair(0xaa4d,"CHAM CONSONANT SIGN FINAL H"));
        data.insert(std::make_pair(0xaa50,"CHAM DIGIT ZERO"));
        data.insert(std::make_pair(0xaa51,"CHAM DIGIT ONE"));
        data.insert(std::make_pair(0xaa52,"CHAM DIGIT TWO"));
        data.insert(std::make_pair(0xaa53,"CHAM DIGIT THREE"));
        data.insert(std::make_pair(0xaa54,"CHAM DIGIT FOUR"));
        data.insert(std::make_pair(0xaa55,"CHAM DIGIT FIVE"));
        data.insert(std::make_pair(0xaa56,"CHAM DIGIT SIX"));
        data.insert(std::make_pair(0xaa57,"CHAM DIGIT SEVEN"));
        data.insert(std::make_pair(0xaa58,"CHAM DIGIT EIGHT"));
        data.insert(std::make_pair(0xaa59,"CHAM DIGIT NINE"));
        data.insert(std::make_pair(0xaa5c,"CHAM PUNCTUATION SPIRAL"));
        data.insert(std::make_pair(0xaa5d,"CHAM PUNCTUATION DANDA"));
        data.insert(std::make_pair(0xaa5e,"CHAM PUNCTUATION DOUBLE DANDA"));
        data.insert(std::make_pair(0xaa5f,"CHAM PUNCTUATION TRIPLE DANDA"));
        data.insert(std::make_pair(0xaa60,"MYANMAR LETTER KHAMTI GA"));
        data.insert(std::make_pair(0xaa61,"MYANMAR LETTER KHAMTI CA"));
        data.insert(std::make_pair(0xaa62,"MYANMAR LETTER KHAMTI CHA"));
        data.insert(std::make_pair(0xaa63,"MYANMAR LETTER KHAMTI JA"));
        data.insert(std::make_pair(0xaa64,"MYANMAR LETTER KHAMTI JHA"));
        data.insert(std::make_pair(0xaa65,"MYANMAR LETTER KHAMTI NYA"));
        data.insert(std::make_pair(0xaa66,"MYANMAR LETTER KHAMTI TTA"));
        data.insert(std::make_pair(0xaa67,"MYANMAR LETTER KHAMTI TTHA"));
        data.insert(std::make_pair(0xaa68,"MYANMAR LETTER KHAMTI DDA"));
        data.insert(std::make_pair(0xaa69,"MYANMAR LETTER KHAMTI DDHA"));
        data.insert(std::make_pair(0xaa6a,"MYANMAR LETTER KHAMTI DHA"));
        data.insert(std::make_pair(0xaa6b,"MYANMAR LETTER KHAMTI NA"));
        data.insert(std::make_pair(0xaa6c,"MYANMAR LETTER KHAMTI SA"));
        data.insert(std::make_pair(0xaa6d,"MYANMAR LETTER KHAMTI HA"));
        data.insert(std::make_pair(0xaa6e,"MYANMAR LETTER KHAMTI HHA"));
        data.insert(std::make_pair(0xaa6f,"MYANMAR LETTER KHAMTI FA"));
        data.insert(std::make_pair(0xaa70,"MYANMAR MODIFIER LETTER KHAMTI REDUPLICATION"));
        data.insert(std::make_pair(0xaa71,"MYANMAR LETTER KHAMTI XA"));
        data.insert(std::make_pair(0xaa72,"MYANMAR LETTER KHAMTI ZA"));
        data.insert(std::make_pair(0xaa73,"MYANMAR LETTER KHAMTI RA"));
        data.insert(std::make_pair(0xaa74,"MYANMAR LOGOGRAM KHAMTI OAY"));
        data.insert(std::make_pair(0xaa75,"MYANMAR LOGOGRAM KHAMTI QN"));
        data.insert(std::make_pair(0xaa76,"MYANMAR LOGOGRAM KHAMTI HM"));
        data.insert(std::make_pair(0xaa77,"MYANMAR SYMBOL AITON EXCLAMATION"));
        data.insert(std::make_pair(0xaa78,"MYANMAR SYMBOL AITON ONE"));
        data.insert(std::make_pair(0xaa79,"MYANMAR SYMBOL AITON TWO"));
        data.insert(std::make_pair(0xaa7a,"MYANMAR LETTER AITON RA"));
        data.insert(std::make_pair(0xaa7b,"MYANMAR SIGN PAO KAREN TONE"));
        data.insert(std::make_pair(0xaa7c,"MYANMAR SIGN TAI LAING TONE-2"));
        data.insert(std::make_pair(0xaa7d,"MYANMAR SIGN TAI LAING TONE-5"));
        data.insert(std::make_pair(0xaa7e,"MYANMAR LETTER SHWE PALAUNG CHA"));
        data.insert(std::make_pair(0xaa7f,"MYANMAR LETTER SHWE PALAUNG SHA"));
        data.insert(std::make_pair(0xaa80,"TAI VIET LETTER LOW KO"));
        data.insert(std::make_pair(0xaa81,"TAI VIET LETTER HIGH KO"));
        data.insert(std::make_pair(0xaa82,"TAI VIET LETTER LOW KHO"));
        data.insert(std::make_pair(0xaa83,"TAI VIET LETTER HIGH KHO"));
        data.insert(std::make_pair(0xaa84,"TAI VIET LETTER LOW KHHO"));
        data.insert(std::make_pair(0xaa85,"TAI VIET LETTER HIGH KHHO"));
        data.insert(std::make_pair(0xaa86,"TAI VIET LETTER LOW GO"));
        data.insert(std::make_pair(0xaa87,"TAI VIET LETTER HIGH GO"));
        data.insert(std::make_pair(0xaa88,"TAI VIET LETTER LOW NGO"));
        data.insert(std::make_pair(0xaa89,"TAI VIET LETTER HIGH NGO"));
        data.insert(std::make_pair(0xaa8a,"TAI VIET LETTER LOW CO"));
        data.insert(std::make_pair(0xaa8b,"TAI VIET LETTER HIGH CO"));
        data.insert(std::make_pair(0xaa8c,"TAI VIET LETTER LOW CHO"));
        data.insert(std::make_pair(0xaa8d,"TAI VIET LETTER HIGH CHO"));
        data.insert(std::make_pair(0xaa8e,"TAI VIET LETTER LOW SO"));
        data.insert(std::make_pair(0xaa8f,"TAI VIET LETTER HIGH SO"));
        data.insert(std::make_pair(0xaa90,"TAI VIET LETTER LOW NYO"));
        data.insert(std::make_pair(0xaa91,"TAI VIET LETTER HIGH NYO"));
        data.insert(std::make_pair(0xaa92,"TAI VIET LETTER LOW DO"));
        data.insert(std::make_pair(0xaa93,"TAI VIET LETTER HIGH DO"));
        data.insert(std::make_pair(0xaa94,"TAI VIET LETTER LOW TO"));
        data.insert(std::make_pair(0xaa95,"TAI VIET LETTER HIGH TO"));
        data.insert(std::make_pair(0xaa96,"TAI VIET LETTER LOW THO"));
        data.insert(std::make_pair(0xaa97,"TAI VIET LETTER HIGH THO"));
        data.insert(std::make_pair(0xaa98,"TAI VIET LETTER LOW NO"));
        data.insert(std::make_pair(0xaa99,"TAI VIET LETTER HIGH NO"));
        data.insert(std::make_pair(0xaa9a,"TAI VIET LETTER LOW BO"));
        data.insert(std::make_pair(0xaa9b,"TAI VIET LETTER HIGH BO"));
        data.insert(std::make_pair(0xaa9c,"TAI VIET LETTER LOW PO"));
        data.insert(std::make_pair(0xaa9d,"TAI VIET LETTER HIGH PO"));
        data.insert(std::make_pair(0xaa9e,"TAI VIET LETTER LOW PHO"));
        data.insert(std::make_pair(0xaa9f,"TAI VIET LETTER HIGH PHO"));
        data.insert(std::make_pair(0xaaa0,"TAI VIET LETTER LOW FO"));
        data.insert(std::make_pair(0xaaa1,"TAI VIET LETTER HIGH FO"));
        data.insert(std::make_pair(0xaaa2,"TAI VIET LETTER LOW MO"));
        data.insert(std::make_pair(0xaaa3,"TAI VIET LETTER HIGH MO"));
        data.insert(std::make_pair(0xaaa4,"TAI VIET LETTER LOW YO"));
        data.insert(std::make_pair(0xaaa5,"TAI VIET LETTER HIGH YO"));
        data.insert(std::make_pair(0xaaa6,"TAI VIET LETTER LOW RO"));
        data.insert(std::make_pair(0xaaa7,"TAI VIET LETTER HIGH RO"));
        data.insert(std::make_pair(0xaaa8,"TAI VIET LETTER LOW LO"));
        data.insert(std::make_pair(0xaaa9,"TAI VIET LETTER HIGH LO"));
        data.insert(std::make_pair(0xaaaa,"TAI VIET LETTER LOW VO"));
        data.insert(std::make_pair(0xaaab,"TAI VIET LETTER HIGH VO"));
        data.insert(std::make_pair(0xaaac,"TAI VIET LETTER LOW HO"));
        data.insert(std::make_pair(0xaaad,"TAI VIET LETTER HIGH HO"));
        data.insert(std::make_pair(0xaaae,"TAI VIET LETTER LOW O"));
        data.insert(std::make_pair(0xaaaf,"TAI VIET LETTER HIGH O"));
        data.insert(std::make_pair(0xaab0,"TAI VIET MAI KANG"));
        data.insert(std::make_pair(0xaab1,"TAI VIET VOWEL AA"));
        data.insert(std::make_pair(0xaab2,"TAI VIET VOWEL I"));
        data.insert(std::make_pair(0xaab3,"TAI VIET VOWEL UE"));
        data.insert(std::make_pair(0xaab4,"TAI VIET VOWEL U"));
        data.insert(std::make_pair(0xaab5,"TAI VIET VOWEL E"));
        data.insert(std::make_pair(0xaab6,"TAI VIET VOWEL O"));
        data.insert(std::make_pair(0xaab7,"TAI VIET MAI KHIT"));
        data.insert(std::make_pair(0xaab8,"TAI VIET VOWEL IA"));
        data.insert(std::make_pair(0xaab9,"TAI VIET VOWEL UEA"));
        data.insert(std::make_pair(0xaaba,"TAI VIET VOWEL UA"));
        data.insert(std::make_pair(0xaabb,"TAI VIET VOWEL AUE"));
        data.insert(std::make_pair(0xaabc,"TAI VIET VOWEL AY"));
        data.insert(std::make_pair(0xaabd,"TAI VIET VOWEL AN"));
        data.insert(std::make_pair(0xaabe,"TAI VIET VOWEL AM"));
        data.insert(std::make_pair(0xaabf,"TAI VIET TONE MAI EK"));
        data.insert(std::make_pair(0xaac0,"TAI VIET TONE MAI NUENG"));
        data.insert(std::make_pair(0xaac1,"TAI VIET TONE MAI THO"));
        data.insert(std::make_pair(0xaac2,"TAI VIET TONE MAI SONG"));
        data.insert(std::make_pair(0xaadb,"TAI VIET SYMBOL KON"));
        data.insert(std::make_pair(0xaadc,"TAI VIET SYMBOL NUENG"));
        data.insert(std::make_pair(0xaadd,"TAI VIET SYMBOL SAM"));
        data.insert(std::make_pair(0xaade,"TAI VIET SYMBOL HO HOI"));
        data.insert(std::make_pair(0xaadf,"TAI VIET SYMBOL KOI KOI"));
        data.insert(std::make_pair(0xaae0,"MEETEI MAYEK LETTER E"));
        data.insert(std::make_pair(0xaae1,"MEETEI MAYEK LETTER O"));
        data.insert(std::make_pair(0xaae2,"MEETEI MAYEK LETTER CHA"));
        data.insert(std::make_pair(0xaae3,"MEETEI MAYEK LETTER NYA"));
        data.insert(std::make_pair(0xaae4,"MEETEI MAYEK LETTER TTA"));
        data.insert(std::make_pair(0xaae5,"MEETEI MAYEK LETTER TTHA"));
        data.insert(std::make_pair(0xaae6,"MEETEI MAYEK LETTER DDA"));
        data.insert(std::make_pair(0xaae7,"MEETEI MAYEK LETTER DDHA"));
        data.insert(std::make_pair(0xaae8,"MEETEI MAYEK LETTER NNA"));
        data.insert(std::make_pair(0xaae9,"MEETEI MAYEK LETTER SHA"));
        data.insert(std::make_pair(0xaaea,"MEETEI MAYEK LETTER SSA"));
        data.insert(std::make_pair(0xaaeb,"MEETEI MAYEK VOWEL SIGN II"));
        data.insert(std::make_pair(0xaaec,"MEETEI MAYEK VOWEL SIGN UU"));
        data.insert(std::make_pair(0xaaed,"MEETEI MAYEK VOWEL SIGN AAI"));
        data.insert(std::make_pair(0xaaee,"MEETEI MAYEK VOWEL SIGN AU"));
        data.insert(std::make_pair(0xaaef,"MEETEI MAYEK VOWEL SIGN AAU"));
        data.insert(std::make_pair(0xaaf0,"MEETEI MAYEK CHEIKHAN"));
        data.insert(std::make_pair(0xaaf1,"MEETEI MAYEK AHANG KHUDAM"));
        data.insert(std::make_pair(0xaaf2,"MEETEI MAYEK ANJI"));
        data.insert(std::make_pair(0xaaf3,"MEETEI MAYEK SYLLABLE REPETITION MARK"));
        data.insert(std::make_pair(0xaaf4,"MEETEI MAYEK WORD REPETITION MARK"));
        data.insert(std::make_pair(0xaaf5,"MEETEI MAYEK VOWEL SIGN VISARGA"));
        data.insert(std::make_pair(0xaaf6,"MEETEI MAYEK VIRAMA"));
        data.insert(std::make_pair(0xab01,"ETHIOPIC SYLLABLE TTHU"));
        data.insert(std::make_pair(0xab02,"ETHIOPIC SYLLABLE TTHI"));
        data.insert(std::make_pair(0xab03,"ETHIOPIC SYLLABLE TTHAA"));
        data.insert(std::make_pair(0xab04,"ETHIOPIC SYLLABLE TTHEE"));
        data.insert(std::make_pair(0xab05,"ETHIOPIC SYLLABLE TTHE"));
        data.insert(std::make_pair(0xab06,"ETHIOPIC SYLLABLE TTHO"));
        data.insert(std::make_pair(0xab09,"ETHIOPIC SYLLABLE DDHU"));
        data.insert(std::make_pair(0xab0a,"ETHIOPIC SYLLABLE DDHI"));
        data.insert(std::make_pair(0xab0b,"ETHIOPIC SYLLABLE DDHAA"));
        data.insert(std::make_pair(0xab0c,"ETHIOPIC SYLLABLE DDHEE"));
        data.insert(std::make_pair(0xab0d,"ETHIOPIC SYLLABLE DDHE"));
        data.insert(std::make_pair(0xab0e,"ETHIOPIC SYLLABLE DDHO"));
        data.insert(std::make_pair(0xab11,"ETHIOPIC SYLLABLE DZU"));
        data.insert(std::make_pair(0xab12,"ETHIOPIC SYLLABLE DZI"));
        data.insert(std::make_pair(0xab13,"ETHIOPIC SYLLABLE DZAA"));
        data.insert(std::make_pair(0xab14,"ETHIOPIC SYLLABLE DZEE"));
        data.insert(std::make_pair(0xab15,"ETHIOPIC SYLLABLE DZE"));
        data.insert(std::make_pair(0xab16,"ETHIOPIC SYLLABLE DZO"));
        data.insert(std::make_pair(0xab20,"ETHIOPIC SYLLABLE CCHHA"));
        data.insert(std::make_pair(0xab21,"ETHIOPIC SYLLABLE CCHHU"));
        data.insert(std::make_pair(0xab22,"ETHIOPIC SYLLABLE CCHHI"));
        data.insert(std::make_pair(0xab23,"ETHIOPIC SYLLABLE CCHHAA"));
        data.insert(std::make_pair(0xab24,"ETHIOPIC SYLLABLE CCHHEE"));
        data.insert(std::make_pair(0xab25,"ETHIOPIC SYLLABLE CCHHE"));
        data.insert(std::make_pair(0xab26,"ETHIOPIC SYLLABLE CCHHO"));
        data.insert(std::make_pair(0xab28,"ETHIOPIC SYLLABLE BBA"));
        data.insert(std::make_pair(0xab29,"ETHIOPIC SYLLABLE BBU"));
        data.insert(std::make_pair(0xab2a,"ETHIOPIC SYLLABLE BBI"));
        data.insert(std::make_pair(0xab2b,"ETHIOPIC SYLLABLE BBAA"));
        data.insert(std::make_pair(0xab2c,"ETHIOPIC SYLLABLE BBEE"));
        data.insert(std::make_pair(0xab2d,"ETHIOPIC SYLLABLE BBE"));
        data.insert(std::make_pair(0xab2e,"ETHIOPIC SYLLABLE BBO"));
        data.insert(std::make_pair(0xab30,"LATIN SMALL LETTER BARRED ALPHA"));
        data.insert(std::make_pair(0xab31,"LATIN SMALL LETTER A REVERSED-SCHWA"));
        data.insert(std::make_pair(0xab32,"LATIN SMALL LETTER BLACKLETTER E"));
        data.insert(std::make_pair(0xab33,"LATIN SMALL LETTER BARRED E"));
        data.insert(std::make_pair(0xab34,"LATIN SMALL LETTER E WITH FLOURISH"));
        data.insert(std::make_pair(0xab35,"LATIN SMALL LETTER LENIS F"));
        data.insert(std::make_pair(0xab36,"LATIN SMALL LETTER SCRIPT G WITH CROSSED-TAIL"));
        data.insert(std::make_pair(0xab37,"LATIN SMALL LETTER L WITH INVERTED LAZY S"));
        data.insert(std::make_pair(0xab38,"LATIN SMALL LETTER L WITH DOUBLE MIDDLE TILDE"));
        data.insert(std::make_pair(0xab39,"LATIN SMALL LETTER L WITH MIDDLE RING"));
        data.insert(std::make_pair(0xab3a,"LATIN SMALL LETTER M WITH CROSSED-TAIL"));
        data.insert(std::make_pair(0xab3b,"LATIN SMALL LETTER N WITH CROSSED-TAIL"));
        data.insert(std::make_pair(0xab3c,"LATIN SMALL LETTER ENG WITH CROSSED-TAIL"));
        data.insert(std::make_pair(0xab3d,"LATIN SMALL LETTER BLACKLETTER O"));
        data.insert(std::make_pair(0xab3e,"LATIN SMALL LETTER BLACKLETTER O WITH STROKE"));
        data.insert(std::make_pair(0xab3f,"LATIN SMALL LETTER OPEN O WITH STROKE"));
        data.insert(std::make_pair(0xab40,"LATIN SMALL LETTER INVERTED OE"));
        data.insert(std::make_pair(0xab41,"LATIN SMALL LETTER TURNED OE WITH STROKE"));
        data.insert(std::make_pair(0xab42,"LATIN SMALL LETTER TURNED OE WITH HORIZONTAL STROKE"));
        data.insert(std::make_pair(0xab43,"LATIN SMALL LETTER TURNED O OPEN-O"));
        data.insert(std::make_pair(0xab44,"LATIN SMALL LETTER TURNED O OPEN-O WITH STROKE"));
        data.insert(std::make_pair(0xab45,"LATIN SMALL LETTER STIRRUP R"));
        data.insert(std::make_pair(0xab46,"LATIN LETTER SMALL CAPITAL R WITH RIGHT LEG"));
        data.insert(std::make_pair(0xab47,"LATIN SMALL LETTER R WITHOUT HANDLE"));
        data.insert(std::make_pair(0xab48,"LATIN SMALL LETTER DOUBLE R"));
        data.insert(std::make_pair(0xab49,"LATIN SMALL LETTER R WITH CROSSED-TAIL"));
        data.insert(std::make_pair(0xab4a,"LATIN SMALL LETTER DOUBLE R WITH CROSSED-TAIL"));
        data.insert(std::make_pair(0xab4b,"LATIN SMALL LETTER SCRIPT R"));
        data.insert(std::make_pair(0xab4c,"LATIN SMALL LETTER SCRIPT R WITH RING"));
        data.insert(std::make_pair(0xab4d,"LATIN SMALL LETTER BASELINE ESH"));
        data.insert(std::make_pair(0xab4e,"LATIN SMALL LETTER U WITH SHORT RIGHT LEG"));
        data.insert(std::make_pair(0xab4f,"LATIN SMALL LETTER U BAR WITH SHORT RIGHT LEG"));
        data.insert(std::make_pair(0xab50,"LATIN SMALL LETTER UI"));
        data.insert(std::make_pair(0xab51,"LATIN SMALL LETTER TURNED UI"));
        data.insert(std::make_pair(0xab52,"LATIN SMALL LETTER U WITH LEFT HOOK"));
        data.insert(std::make_pair(0xab53,"LATIN SMALL LETTER CHI"));
        data.insert(std::make_pair(0xab54,"LATIN SMALL LETTER CHI WITH LOW RIGHT RING"));
        data.insert(std::make_pair(0xab55,"LATIN SMALL LETTER CHI WITH LOW LEFT SERIF"));
        data.insert(std::make_pair(0xab56,"LATIN SMALL LETTER X WITH LOW RIGHT RING"));
        data.insert(std::make_pair(0xab57,"LATIN SMALL LETTER X WITH LONG LEFT LEG"));
        data.insert(std::make_pair(0xab58,"LATIN SMALL LETTER X WITH LONG LEFT LEG AND LOW RIGHT RING"));
        data.insert(std::make_pair(0xab59,"LATIN SMALL LETTER X WITH LONG LEFT LEG WITH SERIF"));
        data.insert(std::make_pair(0xab5a,"LATIN SMALL LETTER Y WITH SHORT RIGHT LEG"));
        data.insert(std::make_pair(0xab5b,"MODIFIER BREVE WITH INVERTED BREVE"));
        data.insert(std::make_pair(0xab5c,"MODIFIER LETTER SMALL HENG"));
        data.insert(std::make_pair(0xab5d,"MODIFIER LETTER SMALL L WITH INVERTED LAZY S"));
        data.insert(std::make_pair(0xab5e,"MODIFIER LETTER SMALL L WITH MIDDLE TILDE"));
        data.insert(std::make_pair(0xab5f,"MODIFIER LETTER SMALL U WITH LEFT HOOK"));
        data.insert(std::make_pair(0xab60,"LATIN SMALL LETTER SAKHA YAT"));
        data.insert(std::make_pair(0xab61,"LATIN SMALL LETTER IOTIFIED E"));
        data.insert(std::make_pair(0xab62,"LATIN SMALL LETTER OPEN OE"));
        data.insert(std::make_pair(0xab63,"LATIN SMALL LETTER UO"));
        data.insert(std::make_pair(0xab64,"LATIN SMALL LETTER INVERTED ALPHA"));
        data.insert(std::make_pair(0xab65,"GREEK LETTER SMALL CAPITAL OMEGA"));
        data.insert(std::make_pair(0xab66,"LATIN SMALL LETTER DZ DIGRAPH WITH RETROFLEX HOOK"));
        data.insert(std::make_pair(0xab67,"LATIN SMALL LETTER TS DIGRAPH WITH RETROFLEX HOOK"));
        data.insert(std::make_pair(0xab68,"LATIN SMALL LETTER TURNED R WITH MIDDLE TILDE"));
        data.insert(std::make_pair(0xab69,"MODIFIER LETTER SMALL TURNED W"));
        data.insert(std::make_pair(0xab6a,"MODIFIER LETTER LEFT TACK"));
        data.insert(std::make_pair(0xab6b,"MODIFIER LETTER RIGHT TACK"));
        data.insert(std::make_pair(0xab70,"CHEROKEE SMALL LETTER A"));
        data.insert(std::make_pair(0xab71,"CHEROKEE SMALL LETTER E"));
        data.insert(std::make_pair(0xab72,"CHEROKEE SMALL LETTER I"));
        data.insert(std::make_pair(0xab73,"CHEROKEE SMALL LETTER O"));
        data.insert(std::make_pair(0xab74,"CHEROKEE SMALL LETTER U"));
        data.insert(std::make_pair(0xab75,"CHEROKEE SMALL LETTER V"));
        data.insert(std::make_pair(0xab76,"CHEROKEE SMALL LETTER GA"));
        data.insert(std::make_pair(0xab77,"CHEROKEE SMALL LETTER KA"));
        data.insert(std::make_pair(0xab78,"CHEROKEE SMALL LETTER GE"));
        data.insert(std::make_pair(0xab79,"CHEROKEE SMALL LETTER GI"));
        data.insert(std::make_pair(0xab7a,"CHEROKEE SMALL LETTER GO"));
        data.insert(std::make_pair(0xab7b,"CHEROKEE SMALL LETTER GU"));
        data.insert(std::make_pair(0xab7c,"CHEROKEE SMALL LETTER GV"));
        data.insert(std::make_pair(0xab7d,"CHEROKEE SMALL LETTER HA"));
        data.insert(std::make_pair(0xab7e,"CHEROKEE SMALL LETTER HE"));
        data.insert(std::make_pair(0xab7f,"CHEROKEE SMALL LETTER HI"));
        data.insert(std::make_pair(0xab80,"CHEROKEE SMALL LETTER HO"));
        data.insert(std::make_pair(0xab81,"CHEROKEE SMALL LETTER HU"));
        data.insert(std::make_pair(0xab82,"CHEROKEE SMALL LETTER HV"));
        data.insert(std::make_pair(0xab83,"CHEROKEE SMALL LETTER LA"));
        data.insert(std::make_pair(0xab84,"CHEROKEE SMALL LETTER LE"));
        data.insert(std::make_pair(0xab85,"CHEROKEE SMALL LETTER LI"));
        data.insert(std::make_pair(0xab86,"CHEROKEE SMALL LETTER LO"));
        data.insert(std::make_pair(0xab87,"CHEROKEE SMALL LETTER LU"));
        data.insert(std::make_pair(0xab88,"CHEROKEE SMALL LETTER LV"));
        data.insert(std::make_pair(0xab89,"CHEROKEE SMALL LETTER MA"));
        data.insert(std::make_pair(0xab8a,"CHEROKEE SMALL LETTER ME"));
        data.insert(std::make_pair(0xab8b,"CHEROKEE SMALL LETTER MI"));
        data.insert(std::make_pair(0xab8c,"CHEROKEE SMALL LETTER MO"));
        data.insert(std::make_pair(0xab8d,"CHEROKEE SMALL LETTER MU"));
        data.insert(std::make_pair(0xab8e,"CHEROKEE SMALL LETTER NA"));
        data.insert(std::make_pair(0xab8f,"CHEROKEE SMALL LETTER HNA"));
        data.insert(std::make_pair(0xab90,"CHEROKEE SMALL LETTER NAH"));
        data.insert(std::make_pair(0xab91,"CHEROKEE SMALL LETTER NE"));
        data.insert(std::make_pair(0xab92,"CHEROKEE SMALL LETTER NI"));
        data.insert(std::make_pair(0xab93,"CHEROKEE SMALL LETTER NO"));
        data.insert(std::make_pair(0xab94,"CHEROKEE SMALL LETTER NU"));
        data.insert(std::make_pair(0xab95,"CHEROKEE SMALL LETTER NV"));
        data.insert(std::make_pair(0xab96,"CHEROKEE SMALL LETTER QUA"));
        data.insert(std::make_pair(0xab97,"CHEROKEE SMALL LETTER QUE"));
        data.insert(std::make_pair(0xab98,"CHEROKEE SMALL LETTER QUI"));
        data.insert(std::make_pair(0xab99,"CHEROKEE SMALL LETTER QUO"));
        data.insert(std::make_pair(0xab9a,"CHEROKEE SMALL LETTER QUU"));
        data.insert(std::make_pair(0xab9b,"CHEROKEE SMALL LETTER QUV"));
        data.insert(std::make_pair(0xab9c,"CHEROKEE SMALL LETTER SA"));
        data.insert(std::make_pair(0xab9d,"CHEROKEE SMALL LETTER S"));
        data.insert(std::make_pair(0xab9e,"CHEROKEE SMALL LETTER SE"));
        data.insert(std::make_pair(0xab9f,"CHEROKEE SMALL LETTER SI"));
        data.insert(std::make_pair(0xaba0,"CHEROKEE SMALL LETTER SO"));
        data.insert(std::make_pair(0xaba1,"CHEROKEE SMALL LETTER SU"));
        data.insert(std::make_pair(0xaba2,"CHEROKEE SMALL LETTER SV"));
        data.insert(std::make_pair(0xaba3,"CHEROKEE SMALL LETTER DA"));
        data.insert(std::make_pair(0xaba4,"CHEROKEE SMALL LETTER TA"));
        data.insert(std::make_pair(0xaba5,"CHEROKEE SMALL LETTER DE"));
        data.insert(std::make_pair(0xaba6,"CHEROKEE SMALL LETTER TE"));
        data.insert(std::make_pair(0xaba7,"CHEROKEE SMALL LETTER DI"));
        data.insert(std::make_pair(0xaba8,"CHEROKEE SMALL LETTER TI"));
        data.insert(std::make_pair(0xaba9,"CHEROKEE SMALL LETTER DO"));
        data.insert(std::make_pair(0xabaa,"CHEROKEE SMALL LETTER DU"));
        data.insert(std::make_pair(0xabab,"CHEROKEE SMALL LETTER DV"));
        data.insert(std::make_pair(0xabac,"CHEROKEE SMALL LETTER DLA"));
        data.insert(std::make_pair(0xabad,"CHEROKEE SMALL LETTER TLA"));
        data.insert(std::make_pair(0xabae,"CHEROKEE SMALL LETTER TLE"));
        data.insert(std::make_pair(0xabaf,"CHEROKEE SMALL LETTER TLI"));
        data.insert(std::make_pair(0xabb0,"CHEROKEE SMALL LETTER TLO"));
        data.insert(std::make_pair(0xabb1,"CHEROKEE SMALL LETTER TLU"));
        data.insert(std::make_pair(0xabb2,"CHEROKEE SMALL LETTER TLV"));
        data.insert(std::make_pair(0xabb3,"CHEROKEE SMALL LETTER TSA"));
        data.insert(std::make_pair(0xabb4,"CHEROKEE SMALL LETTER TSE"));
        data.insert(std::make_pair(0xabb5,"CHEROKEE SMALL LETTER TSI"));
        data.insert(std::make_pair(0xabb6,"CHEROKEE SMALL LETTER TSO"));
        data.insert(std::make_pair(0xabb7,"CHEROKEE SMALL LETTER TSU"));
        data.insert(std::make_pair(0xabb8,"CHEROKEE SMALL LETTER TSV"));
        data.insert(std::make_pair(0xabb9,"CHEROKEE SMALL LETTER WA"));
        data.insert(std::make_pair(0xabba,"CHEROKEE SMALL LETTER WE"));
        data.insert(std::make_pair(0xabbb,"CHEROKEE SMALL LETTER WI"));
        data.insert(std::make_pair(0xabbc,"CHEROKEE SMALL LETTER WO"));
        data.insert(std::make_pair(0xabbd,"CHEROKEE SMALL LETTER WU"));
        data.insert(std::make_pair(0xabbe,"CHEROKEE SMALL LETTER WV"));
        data.insert(std::make_pair(0xabbf,"CHEROKEE SMALL LETTER YA"));
        data.insert(std::make_pair(0xabc0,"MEETEI MAYEK LETTER KOK"));
        data.insert(std::make_pair(0xabc1,"MEETEI MAYEK LETTER SAM"));
        data.insert(std::make_pair(0xabc2,"MEETEI MAYEK LETTER LAI"));
        data.insert(std::make_pair(0xabc3,"MEETEI MAYEK LETTER MIT"));
        data.insert(std::make_pair(0xabc4,"MEETEI MAYEK LETTER PA"));
        data.insert(std::make_pair(0xabc5,"MEETEI MAYEK LETTER NA"));
        data.insert(std::make_pair(0xabc6,"MEETEI MAYEK LETTER CHIL"));
        data.insert(std::make_pair(0xabc7,"MEETEI MAYEK LETTER TIL"));
        data.insert(std::make_pair(0xabc8,"MEETEI MAYEK LETTER KHOU"));
        data.insert(std::make_pair(0xabc9,"MEETEI MAYEK LETTER NGOU"));
        data.insert(std::make_pair(0xabca,"MEETEI MAYEK LETTER THOU"));
        data.insert(std::make_pair(0xabcb,"MEETEI MAYEK LETTER WAI"));
        data.insert(std::make_pair(0xabcc,"MEETEI MAYEK LETTER YANG"));
        data.insert(std::make_pair(0xabcd,"MEETEI MAYEK LETTER HUK"));
        data.insert(std::make_pair(0xabce,"MEETEI MAYEK LETTER UN"));
        data.insert(std::make_pair(0xabcf,"MEETEI MAYEK LETTER I"));
        data.insert(std::make_pair(0xabd0,"MEETEI MAYEK LETTER PHAM"));
        data.insert(std::make_pair(0xabd1,"MEETEI MAYEK LETTER ATIYA"));
        data.insert(std::make_pair(0xabd2,"MEETEI MAYEK LETTER GOK"));
        data.insert(std::make_pair(0xabd3,"MEETEI MAYEK LETTER JHAM"));
        data.insert(std::make_pair(0xabd4,"MEETEI MAYEK LETTER RAI"));
        data.insert(std::make_pair(0xabd5,"MEETEI MAYEK LETTER BA"));
        data.insert(std::make_pair(0xabd6,"MEETEI MAYEK LETTER JIL"));
        data.insert(std::make_pair(0xabd7,"MEETEI MAYEK LETTER DIL"));
        data.insert(std::make_pair(0xabd8,"MEETEI MAYEK LETTER GHOU"));
        data.insert(std::make_pair(0xabd9,"MEETEI MAYEK LETTER DHOU"));
        data.insert(std::make_pair(0xabda,"MEETEI MAYEK LETTER BHAM"));
        data.insert(std::make_pair(0xabdb,"MEETEI MAYEK LETTER KOK LONSUM"));
        data.insert(std::make_pair(0xabdc,"MEETEI MAYEK LETTER LAI LONSUM"));
        data.insert(std::make_pair(0xabdd,"MEETEI MAYEK LETTER MIT LONSUM"));
        data.insert(std::make_pair(0xabde,"MEETEI MAYEK LETTER PA LONSUM"));
        data.insert(std::make_pair(0xabdf,"MEETEI MAYEK LETTER NA LONSUM"));
        data.insert(std::make_pair(0xabe0,"MEETEI MAYEK LETTER TIL LONSUM"));
        data.insert(std::make_pair(0xabe1,"MEETEI MAYEK LETTER NGOU LONSUM"));
        data.insert(std::make_pair(0xabe2,"MEETEI MAYEK LETTER I LONSUM"));
        data.insert(std::make_pair(0xabe3,"MEETEI MAYEK VOWEL SIGN ONAP"));
        data.insert(std::make_pair(0xabe4,"MEETEI MAYEK VOWEL SIGN INAP"));
        data.insert(std::make_pair(0xabe5,"MEETEI MAYEK VOWEL SIGN ANAP"));
        data.insert(std::make_pair(0xabe6,"MEETEI MAYEK VOWEL SIGN YENAP"));
        data.insert(std::make_pair(0xabe7,"MEETEI MAYEK VOWEL SIGN SOUNAP"));
        data.insert(std::make_pair(0xabe8,"MEETEI MAYEK VOWEL SIGN UNAP"));
        data.insert(std::make_pair(0xabe9,"MEETEI MAYEK VOWEL SIGN CHEINAP"));
        data.insert(std::make_pair(0xabea,"MEETEI MAYEK VOWEL SIGN NUNG"));
        data.insert(std::make_pair(0xabeb,"MEETEI MAYEK CHEIKHEI"));
        data.insert(std::make_pair(0xabec,"MEETEI MAYEK LUM IYEK"));
        data.insert(std::make_pair(0xabed,"MEETEI MAYEK APUN IYEK"));
        data.insert(std::make_pair(0xabf0,"MEETEI MAYEK DIGIT ZERO"));
        data.insert(std::make_pair(0xabf1,"MEETEI MAYEK DIGIT ONE"));
        data.insert(std::make_pair(0xabf2,"MEETEI MAYEK DIGIT TWO"));
        data.insert(std::make_pair(0xabf3,"MEETEI MAYEK DIGIT THREE"));
        data.insert(std::make_pair(0xabf4,"MEETEI MAYEK DIGIT FOUR"));
        data.insert(std::make_pair(0xabf5,"MEETEI MAYEK DIGIT FIVE"));
        data.insert(std::make_pair(0xabf6,"MEETEI MAYEK DIGIT SIX"));
        data.insert(std::make_pair(0xabf7,"MEETEI MAYEK DIGIT SEVEN"));
        data.insert(std::make_pair(0xabf8,"MEETEI MAYEK DIGIT EIGHT"));
        data.insert(std::make_pair(0xabf9,"MEETEI MAYEK DIGIT NINE"));
        data.insert(std::make_pair(0xac00,"<Hangul Syllable, First>"));
        data.insert(std::make_pair(0xd7a3,"<Hangul Syllable, Last>"));
        data.insert(std::make_pair(0xd7b0,"HANGUL JUNGSEONG O-YEO"));
        data.insert(std::make_pair(0xd7b1,"HANGUL JUNGSEONG O-O-I"));
        data.insert(std::make_pair(0xd7b2,"HANGUL JUNGSEONG YO-A"));
        data.insert(std::make_pair(0xd7b3,"HANGUL JUNGSEONG YO-AE"));
        data.insert(std::make_pair(0xd7b4,"HANGUL JUNGSEONG YO-EO"));
        data.insert(std::make_pair(0xd7b5,"HANGUL JUNGSEONG U-YEO"));
        data.insert(std::make_pair(0xd7b6,"HANGUL JUNGSEONG U-I-I"));
        data.insert(std::make_pair(0xd7b7,"HANGUL JUNGSEONG YU-AE"));
        data.insert(std::make_pair(0xd7b8,"HANGUL JUNGSEONG YU-O"));
        data.insert(std::make_pair(0xd7b9,"HANGUL JUNGSEONG EU-A"));
        data.insert(std::make_pair(0xd7ba,"HANGUL JUNGSEONG EU-EO"));
        data.insert(std::make_pair(0xd7bb,"HANGUL JUNGSEONG EU-E"));
        data.insert(std::make_pair(0xd7bc,"HANGUL JUNGSEONG EU-O"));
        data.insert(std::make_pair(0xd7bd,"HANGUL JUNGSEONG I-YA-O"));
        data.insert(std::make_pair(0xd7be,"HANGUL JUNGSEONG I-YAE"));
        data.insert(std::make_pair(0xd7bf,"HANGUL JUNGSEONG I-YEO"));
        data.insert(std::make_pair(0xd7c0,"HANGUL JUNGSEONG I-YE"));
        data.insert(std::make_pair(0xd7c1,"HANGUL JUNGSEONG I-O-I"));
        data.insert(std::make_pair(0xd7c2,"HANGUL JUNGSEONG I-YO"));
        data.insert(std::make_pair(0xd7c3,"HANGUL JUNGSEONG I-YU"));
        data.insert(std::make_pair(0xd7c4,"HANGUL JUNGSEONG I-I"));
        data.insert(std::make_pair(0xd7c5,"HANGUL JUNGSEONG ARAEA-A"));
        data.insert(std::make_pair(0xd7c6,"HANGUL JUNGSEONG ARAEA-E"));
        data.insert(std::make_pair(0xd7cb,"HANGUL JONGSEONG NIEUN-RIEUL"));
        data.insert(std::make_pair(0xd7cc,"HANGUL JONGSEONG NIEUN-CHIEUCH"));
        data.insert(std::make_pair(0xd7cd,"HANGUL JONGSEONG SSANGTIKEUT"));
        data.insert(std::make_pair(0xd7ce,"HANGUL JONGSEONG SSANGTIKEUT-PIEUP"));
        data.insert(std::make_pair(0xd7cf,"HANGUL JONGSEONG TIKEUT-PIEUP"));
        data.insert(std::make_pair(0xd7d0,"HANGUL JONGSEONG TIKEUT-SIOS"));
        data.insert(std::make_pair(0xd7d1,"HANGUL JONGSEONG TIKEUT-SIOS-KIYEOK"));
        data.insert(std::make_pair(0xd7d2,"HANGUL JONGSEONG TIKEUT-CIEUC"));
        data.insert(std::make_pair(0xd7d3,"HANGUL JONGSEONG TIKEUT-CHIEUCH"));
        data.insert(std::make_pair(0xd7d4,"HANGUL JONGSEONG TIKEUT-THIEUTH"));
        data.insert(std::make_pair(0xd7d5,"HANGUL JONGSEONG RIEUL-SSANGKIYEOK"));
        data.insert(std::make_pair(0xd7d6,"HANGUL JONGSEONG RIEUL-KIYEOK-HIEUH"));
        data.insert(std::make_pair(0xd7d7,"HANGUL JONGSEONG SSANGRIEUL-KHIEUKH"));
        data.insert(std::make_pair(0xd7d8,"HANGUL JONGSEONG RIEUL-MIEUM-HIEUH"));
        data.insert(std::make_pair(0xd7d9,"HANGUL JONGSEONG RIEUL-PIEUP-TIKEUT"));
        data.insert(std::make_pair(0xd7da,"HANGUL JONGSEONG RIEUL-PIEUP-PHIEUPH"));
        data.insert(std::make_pair(0xd7db,"HANGUL JONGSEONG RIEUL-YESIEUNG"));
        data.insert(std::make_pair(0xd7dc,"HANGUL JONGSEONG RIEUL-YEORINHIEUH-HIEUH"));
        data.insert(std::make_pair(0xd7dd,"HANGUL JONGSEONG KAPYEOUNRIEUL"));
        data.insert(std::make_pair(0xd7de,"HANGUL JONGSEONG MIEUM-NIEUN"));
        data.insert(std::make_pair(0xd7df,"HANGUL JONGSEONG MIEUM-SSANGNIEUN"));
        data.insert(std::make_pair(0xd7e0,"HANGUL JONGSEONG SSANGMIEUM"));
        data.insert(std::make_pair(0xd7e1,"HANGUL JONGSEONG MIEUM-PIEUP-SIOS"));
        data.insert(std::make_pair(0xd7e2,"HANGUL JONGSEONG MIEUM-CIEUC"));
        data.insert(std::make_pair(0xd7e3,"HANGUL JONGSEONG PIEUP-TIKEUT"));
        data.insert(std::make_pair(0xd7e4,"HANGUL JONGSEONG PIEUP-RIEUL-PHIEUPH"));
        data.insert(std::make_pair(0xd7e5,"HANGUL JONGSEONG PIEUP-MIEUM"));
        data.insert(std::make_pair(0xd7e6,"HANGUL JONGSEONG SSANGPIEUP"));
        data.insert(std::make_pair(0xd7e7,"HANGUL JONGSEONG PIEUP-SIOS-TIKEUT"));
        data.insert(std::make_pair(0xd7e8,"HANGUL JONGSEONG PIEUP-CIEUC"));
        data.insert(std::make_pair(0xd7e9,"HANGUL JONGSEONG PIEUP-CHIEUCH"));
        data.insert(std::make_pair(0xd7ea,"HANGUL JONGSEONG SIOS-MIEUM"));
        data.insert(std::make_pair(0xd7eb,"HANGUL JONGSEONG SIOS-KAPYEOUNPIEUP"));
        data.insert(std::make_pair(0xd7ec,"HANGUL JONGSEONG SSANGSIOS-KIYEOK"));
        data.insert(std::make_pair(0xd7ed,"HANGUL JONGSEONG SSANGSIOS-TIKEUT"));
        data.insert(std::make_pair(0xd7ee,"HANGUL JONGSEONG SIOS-PANSIOS"));
        data.insert(std::make_pair(0xd7ef,"HANGUL JONGSEONG SIOS-CIEUC"));
        data.insert(std::make_pair(0xd7f0,"HANGUL JONGSEONG SIOS-CHIEUCH"));
        data.insert(std::make_pair(0xd7f1,"HANGUL JONGSEONG SIOS-THIEUTH"));
        data.insert(std::make_pair(0xd7f2,"HANGUL JONGSEONG SIOS-HIEUH"));
        data.insert(std::make_pair(0xd7f3,"HANGUL JONGSEONG PANSIOS-PIEUP"));
        data.insert(std::make_pair(0xd7f4,"HANGUL JONGSEONG PANSIOS-KAPYEOUNPIEUP"));
        data.insert(std::make_pair(0xd7f5,"HANGUL JONGSEONG YESIEUNG-MIEUM"));
        data.insert(std::make_pair(0xd7f6,"HANGUL JONGSEONG YESIEUNG-HIEUH"));
        data.insert(std::make_pair(0xd7f7,"HANGUL JONGSEONG CIEUC-PIEUP"));
        data.insert(std::make_pair(0xd7f8,"HANGUL JONGSEONG CIEUC-SSANGPIEUP"));
        data.insert(std::make_pair(0xd7f9,"HANGUL JONGSEONG SSANGCIEUC"));
        data.insert(std::make_pair(0xd7fa,"HANGUL JONGSEONG PHIEUPH-SIOS"));
        data.insert(std::make_pair(0xd7fb,"HANGUL JONGSEONG PHIEUPH-THIEUTH"));
        data.insert(std::make_pair(0xd800,"<Non Private Use High Surrogate, First>"));
        data.insert(std::make_pair(0xdb7f,"<Non Private Use High Surrogate, Last>"));
        data.insert(std::make_pair(0xdb80,"<Private Use High Surrogate, First>"));
        data.insert(std::make_pair(0xdbff,"<Private Use High Surrogate, Last>"));
        data.insert(std::make_pair(0xdc00,"<Low Surrogate, First>"));
        data.insert(std::make_pair(0xdfff,"<Low Surrogate, Last>"));
        data.insert(std::make_pair(0xe000,"<Private Use, First>"));
        data.insert(std::make_pair(0xf8ff,"<Private Use, Last>"));
        data.insert(std::make_pair(0xf900,"CJK COMPATIBILITY IDEOGRAPH-F900"));
        data.insert(std::make_pair(0xf901,"CJK COMPATIBILITY IDEOGRAPH-F901"));
        data.insert(std::make_pair(0xf902,"CJK COMPATIBILITY IDEOGRAPH-F902"));
        data.insert(std::make_pair(0xf903,"CJK COMPATIBILITY IDEOGRAPH-F903"));
        data.insert(std::make_pair(0xf904,"CJK COMPATIBILITY IDEOGRAPH-F904"));
        data.insert(std::make_pair(0xf905,"CJK COMPATIBILITY IDEOGRAPH-F905"));
        data.insert(std::make_pair(0xf906,"CJK COMPATIBILITY IDEOGRAPH-F906"));
        data.insert(std::make_pair(0xf907,"CJK COMPATIBILITY IDEOGRAPH-F907"));
        data.insert(std::make_pair(0xf908,"CJK COMPATIBILITY IDEOGRAPH-F908"));
        data.insert(std::make_pair(0xf909,"CJK COMPATIBILITY IDEOGRAPH-F909"));
        data.insert(std::make_pair(0xf90a,"CJK COMPATIBILITY IDEOGRAPH-F90A"));
        data.insert(std::make_pair(0xf90b,"CJK COMPATIBILITY IDEOGRAPH-F90B"));
        data.insert(std::make_pair(0xf90c,"CJK COMPATIBILITY IDEOGRAPH-F90C"));
        data.insert(std::make_pair(0xf90d,"CJK COMPATIBILITY IDEOGRAPH-F90D"));
        data.insert(std::make_pair(0xf90e,"CJK COMPATIBILITY IDEOGRAPH-F90E"));
        data.insert(std::make_pair(0xf90f,"CJK COMPATIBILITY IDEOGRAPH-F90F"));
        data.insert(std::make_pair(0xf910,"CJK COMPATIBILITY IDEOGRAPH-F910"));
        data.insert(std::make_pair(0xf911,"CJK COMPATIBILITY IDEOGRAPH-F911"));
        data.insert(std::make_pair(0xf912,"CJK COMPATIBILITY IDEOGRAPH-F912"));
        data.insert(std::make_pair(0xf913,"CJK COMPATIBILITY IDEOGRAPH-F913"));
        data.insert(std::make_pair(0xf914,"CJK COMPATIBILITY IDEOGRAPH-F914"));
        data.insert(std::make_pair(0xf915,"CJK COMPATIBILITY IDEOGRAPH-F915"));
        data.insert(std::make_pair(0xf916,"CJK COMPATIBILITY IDEOGRAPH-F916"));
        data.insert(std::make_pair(0xf917,"CJK COMPATIBILITY IDEOGRAPH-F917"));
        data.insert(std::make_pair(0xf918,"CJK COMPATIBILITY IDEOGRAPH-F918"));
        data.insert(std::make_pair(0xf919,"CJK COMPATIBILITY IDEOGRAPH-F919"));
        data.insert(std::make_pair(0xf91a,"CJK COMPATIBILITY IDEOGRAPH-F91A"));
        data.insert(std::make_pair(0xf91b,"CJK COMPATIBILITY IDEOGRAPH-F91B"));
        data.insert(std::make_pair(0xf91c,"CJK COMPATIBILITY IDEOGRAPH-F91C"));
        data.insert(std::make_pair(0xf91d,"CJK COMPATIBILITY IDEOGRAPH-F91D"));
        data.insert(std::make_pair(0xf91e,"CJK COMPATIBILITY IDEOGRAPH-F91E"));
        data.insert(std::make_pair(0xf91f,"CJK COMPATIBILITY IDEOGRAPH-F91F"));
        data.insert(std::make_pair(0xf920,"CJK COMPATIBILITY IDEOGRAPH-F920"));
        data.insert(std::make_pair(0xf921,"CJK COMPATIBILITY IDEOGRAPH-F921"));
        data.insert(std::make_pair(0xf922,"CJK COMPATIBILITY IDEOGRAPH-F922"));
        data.insert(std::make_pair(0xf923,"CJK COMPATIBILITY IDEOGRAPH-F923"));
        data.insert(std::make_pair(0xf924,"CJK COMPATIBILITY IDEOGRAPH-F924"));
        data.insert(std::make_pair(0xf925,"CJK COMPATIBILITY IDEOGRAPH-F925"));
        data.insert(std::make_pair(0xf926,"CJK COMPATIBILITY IDEOGRAPH-F926"));
        data.insert(std::make_pair(0xf927,"CJK COMPATIBILITY IDEOGRAPH-F927"));
        data.insert(std::make_pair(0xf928,"CJK COMPATIBILITY IDEOGRAPH-F928"));
        data.insert(std::make_pair(0xf929,"CJK COMPATIBILITY IDEOGRAPH-F929"));
        data.insert(std::make_pair(0xf92a,"CJK COMPATIBILITY IDEOGRAPH-F92A"));
        data.insert(std::make_pair(0xf92b,"CJK COMPATIBILITY IDEOGRAPH-F92B"));
        data.insert(std::make_pair(0xf92c,"CJK COMPATIBILITY IDEOGRAPH-F92C"));
        data.insert(std::make_pair(0xf92d,"CJK COMPATIBILITY IDEOGRAPH-F92D"));
        data.insert(std::make_pair(0xf92e,"CJK COMPATIBILITY IDEOGRAPH-F92E"));
        data.insert(std::make_pair(0xf92f,"CJK COMPATIBILITY IDEOGRAPH-F92F"));
        data.insert(std::make_pair(0xf930,"CJK COMPATIBILITY IDEOGRAPH-F930"));
        data.insert(std::make_pair(0xf931,"CJK COMPATIBILITY IDEOGRAPH-F931"));
        data.insert(std::make_pair(0xf932,"CJK COMPATIBILITY IDEOGRAPH-F932"));
        data.insert(std::make_pair(0xf933,"CJK COMPATIBILITY IDEOGRAPH-F933"));
        data.insert(std::make_pair(0xf934,"CJK COMPATIBILITY IDEOGRAPH-F934"));
        data.insert(std::make_pair(0xf935,"CJK COMPATIBILITY IDEOGRAPH-F935"));
        data.insert(std::make_pair(0xf936,"CJK COMPATIBILITY IDEOGRAPH-F936"));
        data.insert(std::make_pair(0xf937,"CJK COMPATIBILITY IDEOGRAPH-F937"));
        data.insert(std::make_pair(0xf938,"CJK COMPATIBILITY IDEOGRAPH-F938"));
        data.insert(std::make_pair(0xf939,"CJK COMPATIBILITY IDEOGRAPH-F939"));
        data.insert(std::make_pair(0xf93a,"CJK COMPATIBILITY IDEOGRAPH-F93A"));
        data.insert(std::make_pair(0xf93b,"CJK COMPATIBILITY IDEOGRAPH-F93B"));
        data.insert(std::make_pair(0xf93c,"CJK COMPATIBILITY IDEOGRAPH-F93C"));
        data.insert(std::make_pair(0xf93d,"CJK COMPATIBILITY IDEOGRAPH-F93D"));
        data.insert(std::make_pair(0xf93e,"CJK COMPATIBILITY IDEOGRAPH-F93E"));
        data.insert(std::make_pair(0xf93f,"CJK COMPATIBILITY IDEOGRAPH-F93F"));
        data.insert(std::make_pair(0xf940,"CJK COMPATIBILITY IDEOGRAPH-F940"));
        data.insert(std::make_pair(0xf941,"CJK COMPATIBILITY IDEOGRAPH-F941"));
        data.insert(std::make_pair(0xf942,"CJK COMPATIBILITY IDEOGRAPH-F942"));
        data.insert(std::make_pair(0xf943,"CJK COMPATIBILITY IDEOGRAPH-F943"));
        data.insert(std::make_pair(0xf944,"CJK COMPATIBILITY IDEOGRAPH-F944"));
        data.insert(std::make_pair(0xf945,"CJK COMPATIBILITY IDEOGRAPH-F945"));
        data.insert(std::make_pair(0xf946,"CJK COMPATIBILITY IDEOGRAPH-F946"));
        data.insert(std::make_pair(0xf947,"CJK COMPATIBILITY IDEOGRAPH-F947"));
        data.insert(std::make_pair(0xf948,"CJK COMPATIBILITY IDEOGRAPH-F948"));
        data.insert(std::make_pair(0xf949,"CJK COMPATIBILITY IDEOGRAPH-F949"));
        data.insert(std::make_pair(0xf94a,"CJK COMPATIBILITY IDEOGRAPH-F94A"));
        data.insert(std::make_pair(0xf94b,"CJK COMPATIBILITY IDEOGRAPH-F94B"));
        data.insert(std::make_pair(0xf94c,"CJK COMPATIBILITY IDEOGRAPH-F94C"));
        data.insert(std::make_pair(0xf94d,"CJK COMPATIBILITY IDEOGRAPH-F94D"));
        data.insert(std::make_pair(0xf94e,"CJK COMPATIBILITY IDEOGRAPH-F94E"));
        data.insert(std::make_pair(0xf94f,"CJK COMPATIBILITY IDEOGRAPH-F94F"));
        data.insert(std::make_pair(0xf950,"CJK COMPATIBILITY IDEOGRAPH-F950"));
        data.insert(std::make_pair(0xf951,"CJK COMPATIBILITY IDEOGRAPH-F951"));
        data.insert(std::make_pair(0xf952,"CJK COMPATIBILITY IDEOGRAPH-F952"));
        data.insert(std::make_pair(0xf953,"CJK COMPATIBILITY IDEOGRAPH-F953"));
        data.insert(std::make_pair(0xf954,"CJK COMPATIBILITY IDEOGRAPH-F954"));
        data.insert(std::make_pair(0xf955,"CJK COMPATIBILITY IDEOGRAPH-F955"));
        data.insert(std::make_pair(0xf956,"CJK COMPATIBILITY IDEOGRAPH-F956"));
        data.insert(std::make_pair(0xf957,"CJK COMPATIBILITY IDEOGRAPH-F957"));
        data.insert(std::make_pair(0xf958,"CJK COMPATIBILITY IDEOGRAPH-F958"));
        data.insert(std::make_pair(0xf959,"CJK COMPATIBILITY IDEOGRAPH-F959"));
        data.insert(std::make_pair(0xf95a,"CJK COMPATIBILITY IDEOGRAPH-F95A"));
        data.insert(std::make_pair(0xf95b,"CJK COMPATIBILITY IDEOGRAPH-F95B"));
        data.insert(std::make_pair(0xf95c,"CJK COMPATIBILITY IDEOGRAPH-F95C"));
        data.insert(std::make_pair(0xf95d,"CJK COMPATIBILITY IDEOGRAPH-F95D"));
        data.insert(std::make_pair(0xf95e,"CJK COMPATIBILITY IDEOGRAPH-F95E"));
        data.insert(std::make_pair(0xf95f,"CJK COMPATIBILITY IDEOGRAPH-F95F"));
        data.insert(std::make_pair(0xf960,"CJK COMPATIBILITY IDEOGRAPH-F960"));
        data.insert(std::make_pair(0xf961,"CJK COMPATIBILITY IDEOGRAPH-F961"));
        data.insert(std::make_pair(0xf962,"CJK COMPATIBILITY IDEOGRAPH-F962"));
        data.insert(std::make_pair(0xf963,"CJK COMPATIBILITY IDEOGRAPH-F963"));
        data.insert(std::make_pair(0xf964,"CJK COMPATIBILITY IDEOGRAPH-F964"));
        data.insert(std::make_pair(0xf965,"CJK COMPATIBILITY IDEOGRAPH-F965"));
        data.insert(std::make_pair(0xf966,"CJK COMPATIBILITY IDEOGRAPH-F966"));
        data.insert(std::make_pair(0xf967,"CJK COMPATIBILITY IDEOGRAPH-F967"));
        data.insert(std::make_pair(0xf968,"CJK COMPATIBILITY IDEOGRAPH-F968"));
        data.insert(std::make_pair(0xf969,"CJK COMPATIBILITY IDEOGRAPH-F969"));
        data.insert(std::make_pair(0xf96a,"CJK COMPATIBILITY IDEOGRAPH-F96A"));
        data.insert(std::make_pair(0xf96b,"CJK COMPATIBILITY IDEOGRAPH-F96B"));
        data.insert(std::make_pair(0xf96c,"CJK COMPATIBILITY IDEOGRAPH-F96C"));
        data.insert(std::make_pair(0xf96d,"CJK COMPATIBILITY IDEOGRAPH-F96D"));
        data.insert(std::make_pair(0xf96e,"CJK COMPATIBILITY IDEOGRAPH-F96E"));
        data.insert(std::make_pair(0xf96f,"CJK COMPATIBILITY IDEOGRAPH-F96F"));
        data.insert(std::make_pair(0xf970,"CJK COMPATIBILITY IDEOGRAPH-F970"));
        data.insert(std::make_pair(0xf971,"CJK COMPATIBILITY IDEOGRAPH-F971"));
        data.insert(std::make_pair(0xf972,"CJK COMPATIBILITY IDEOGRAPH-F972"));
        data.insert(std::make_pair(0xf973,"CJK COMPATIBILITY IDEOGRAPH-F973"));
        data.insert(std::make_pair(0xf974,"CJK COMPATIBILITY IDEOGRAPH-F974"));
        data.insert(std::make_pair(0xf975,"CJK COMPATIBILITY IDEOGRAPH-F975"));
        data.insert(std::make_pair(0xf976,"CJK COMPATIBILITY IDEOGRAPH-F976"));
        data.insert(std::make_pair(0xf977,"CJK COMPATIBILITY IDEOGRAPH-F977"));
        data.insert(std::make_pair(0xf978,"CJK COMPATIBILITY IDEOGRAPH-F978"));
        data.insert(std::make_pair(0xf979,"CJK COMPATIBILITY IDEOGRAPH-F979"));
        data.insert(std::make_pair(0xf97a,"CJK COMPATIBILITY IDEOGRAPH-F97A"));
        data.insert(std::make_pair(0xf97b,"CJK COMPATIBILITY IDEOGRAPH-F97B"));
        data.insert(std::make_pair(0xf97c,"CJK COMPATIBILITY IDEOGRAPH-F97C"));
        data.insert(std::make_pair(0xf97d,"CJK COMPATIBILITY IDEOGRAPH-F97D"));
        data.insert(std::make_pair(0xf97e,"CJK COMPATIBILITY IDEOGRAPH-F97E"));
        data.insert(std::make_pair(0xf97f,"CJK COMPATIBILITY IDEOGRAPH-F97F"));
        data.insert(std::make_pair(0xf980,"CJK COMPATIBILITY IDEOGRAPH-F980"));
        data.insert(std::make_pair(0xf981,"CJK COMPATIBILITY IDEOGRAPH-F981"));
        data.insert(std::make_pair(0xf982,"CJK COMPATIBILITY IDEOGRAPH-F982"));
        data.insert(std::make_pair(0xf983,"CJK COMPATIBILITY IDEOGRAPH-F983"));
        data.insert(std::make_pair(0xf984,"CJK COMPATIBILITY IDEOGRAPH-F984"));
        data.insert(std::make_pair(0xf985,"CJK COMPATIBILITY IDEOGRAPH-F985"));
        data.insert(std::make_pair(0xf986,"CJK COMPATIBILITY IDEOGRAPH-F986"));
        data.insert(std::make_pair(0xf987,"CJK COMPATIBILITY IDEOGRAPH-F987"));
        data.insert(std::make_pair(0xf988,"CJK COMPATIBILITY IDEOGRAPH-F988"));
        data.insert(std::make_pair(0xf989,"CJK COMPATIBILITY IDEOGRAPH-F989"));
        data.insert(std::make_pair(0xf98a,"CJK COMPATIBILITY IDEOGRAPH-F98A"));
        data.insert(std::make_pair(0xf98b,"CJK COMPATIBILITY IDEOGRAPH-F98B"));
        data.insert(std::make_pair(0xf98c,"CJK COMPATIBILITY IDEOGRAPH-F98C"));
        data.insert(std::make_pair(0xf98d,"CJK COMPATIBILITY IDEOGRAPH-F98D"));
        data.insert(std::make_pair(0xf98e,"CJK COMPATIBILITY IDEOGRAPH-F98E"));
        data.insert(std::make_pair(0xf98f,"CJK COMPATIBILITY IDEOGRAPH-F98F"));
        data.insert(std::make_pair(0xf990,"CJK COMPATIBILITY IDEOGRAPH-F990"));
        data.insert(std::make_pair(0xf991,"CJK COMPATIBILITY IDEOGRAPH-F991"));
        data.insert(std::make_pair(0xf992,"CJK COMPATIBILITY IDEOGRAPH-F992"));
        data.insert(std::make_pair(0xf993,"CJK COMPATIBILITY IDEOGRAPH-F993"));
        data.insert(std::make_pair(0xf994,"CJK COMPATIBILITY IDEOGRAPH-F994"));
        data.insert(std::make_pair(0xf995,"CJK COMPATIBILITY IDEOGRAPH-F995"));
        data.insert(std::make_pair(0xf996,"CJK COMPATIBILITY IDEOGRAPH-F996"));
        data.insert(std::make_pair(0xf997,"CJK COMPATIBILITY IDEOGRAPH-F997"));
        data.insert(std::make_pair(0xf998,"CJK COMPATIBILITY IDEOGRAPH-F998"));
        data.insert(std::make_pair(0xf999,"CJK COMPATIBILITY IDEOGRAPH-F999"));
        data.insert(std::make_pair(0xf99a,"CJK COMPATIBILITY IDEOGRAPH-F99A"));
        data.insert(std::make_pair(0xf99b,"CJK COMPATIBILITY IDEOGRAPH-F99B"));
        data.insert(std::make_pair(0xf99c,"CJK COMPATIBILITY IDEOGRAPH-F99C"));
        data.insert(std::make_pair(0xf99d,"CJK COMPATIBILITY IDEOGRAPH-F99D"));
        data.insert(std::make_pair(0xf99e,"CJK COMPATIBILITY IDEOGRAPH-F99E"));
        data.insert(std::make_pair(0xf99f,"CJK COMPATIBILITY IDEOGRAPH-F99F"));
        data.insert(std::make_pair(0xf9a0,"CJK COMPATIBILITY IDEOGRAPH-F9A0"));
        data.insert(std::make_pair(0xf9a1,"CJK COMPATIBILITY IDEOGRAPH-F9A1"));
        data.insert(std::make_pair(0xf9a2,"CJK COMPATIBILITY IDEOGRAPH-F9A2"));
        data.insert(std::make_pair(0xf9a3,"CJK COMPATIBILITY IDEOGRAPH-F9A3"));
        data.insert(std::make_pair(0xf9a4,"CJK COMPATIBILITY IDEOGRAPH-F9A4"));
        data.insert(std::make_pair(0xf9a5,"CJK COMPATIBILITY IDEOGRAPH-F9A5"));
        data.insert(std::make_pair(0xf9a6,"CJK COMPATIBILITY IDEOGRAPH-F9A6"));
        data.insert(std::make_pair(0xf9a7,"CJK COMPATIBILITY IDEOGRAPH-F9A7"));
        data.insert(std::make_pair(0xf9a8,"CJK COMPATIBILITY IDEOGRAPH-F9A8"));
        data.insert(std::make_pair(0xf9a9,"CJK COMPATIBILITY IDEOGRAPH-F9A9"));
        data.insert(std::make_pair(0xf9aa,"CJK COMPATIBILITY IDEOGRAPH-F9AA"));
        data.insert(std::make_pair(0xf9ab,"CJK COMPATIBILITY IDEOGRAPH-F9AB"));
        data.insert(std::make_pair(0xf9ac,"CJK COMPATIBILITY IDEOGRAPH-F9AC"));
        data.insert(std::make_pair(0xf9ad,"CJK COMPATIBILITY IDEOGRAPH-F9AD"));
        data.insert(std::make_pair(0xf9ae,"CJK COMPATIBILITY IDEOGRAPH-F9AE"));
        data.insert(std::make_pair(0xf9af,"CJK COMPATIBILITY IDEOGRAPH-F9AF"));
        data.insert(std::make_pair(0xf9b0,"CJK COMPATIBILITY IDEOGRAPH-F9B0"));
        data.insert(std::make_pair(0xf9b1,"CJK COMPATIBILITY IDEOGRAPH-F9B1"));
        data.insert(std::make_pair(0xf9b2,"CJK COMPATIBILITY IDEOGRAPH-F9B2"));
        data.insert(std::make_pair(0xf9b3,"CJK COMPATIBILITY IDEOGRAPH-F9B3"));
        data.insert(std::make_pair(0xf9b4,"CJK COMPATIBILITY IDEOGRAPH-F9B4"));
        data.insert(std::make_pair(0xf9b5,"CJK COMPATIBILITY IDEOGRAPH-F9B5"));
        data.insert(std::make_pair(0xf9b6,"CJK COMPATIBILITY IDEOGRAPH-F9B6"));
        data.insert(std::make_pair(0xf9b7,"CJK COMPATIBILITY IDEOGRAPH-F9B7"));
        data.insert(std::make_pair(0xf9b8,"CJK COMPATIBILITY IDEOGRAPH-F9B8"));
        data.insert(std::make_pair(0xf9b9,"CJK COMPATIBILITY IDEOGRAPH-F9B9"));
        data.insert(std::make_pair(0xf9ba,"CJK COMPATIBILITY IDEOGRAPH-F9BA"));
        data.insert(std::make_pair(0xf9bb,"CJK COMPATIBILITY IDEOGRAPH-F9BB"));
        data.insert(std::make_pair(0xf9bc,"CJK COMPATIBILITY IDEOGRAPH-F9BC"));
        data.insert(std::make_pair(0xf9bd,"CJK COMPATIBILITY IDEOGRAPH-F9BD"));
        data.insert(std::make_pair(0xf9be,"CJK COMPATIBILITY IDEOGRAPH-F9BE"));
        data.insert(std::make_pair(0xf9bf,"CJK COMPATIBILITY IDEOGRAPH-F9BF"));
        data.insert(std::make_pair(0xf9c0,"CJK COMPATIBILITY IDEOGRAPH-F9C0"));
        data.insert(std::make_pair(0xf9c1,"CJK COMPATIBILITY IDEOGRAPH-F9C1"));
        data.insert(std::make_pair(0xf9c2,"CJK COMPATIBILITY IDEOGRAPH-F9C2"));
        data.insert(std::make_pair(0xf9c3,"CJK COMPATIBILITY IDEOGRAPH-F9C3"));
        data.insert(std::make_pair(0xf9c4,"CJK COMPATIBILITY IDEOGRAPH-F9C4"));
        data.insert(std::make_pair(0xf9c5,"CJK COMPATIBILITY IDEOGRAPH-F9C5"));
        data.insert(std::make_pair(0xf9c6,"CJK COMPATIBILITY IDEOGRAPH-F9C6"));
        data.insert(std::make_pair(0xf9c7,"CJK COMPATIBILITY IDEOGRAPH-F9C7"));
        data.insert(std::make_pair(0xf9c8,"CJK COMPATIBILITY IDEOGRAPH-F9C8"));
        data.insert(std::make_pair(0xf9c9,"CJK COMPATIBILITY IDEOGRAPH-F9C9"));
        data.insert(std::make_pair(0xf9ca,"CJK COMPATIBILITY IDEOGRAPH-F9CA"));
        data.insert(std::make_pair(0xf9cb,"CJK COMPATIBILITY IDEOGRAPH-F9CB"));
        data.insert(std::make_pair(0xf9cc,"CJK COMPATIBILITY IDEOGRAPH-F9CC"));
        data.insert(std::make_pair(0xf9cd,"CJK COMPATIBILITY IDEOGRAPH-F9CD"));
        data.insert(std::make_pair(0xf9ce,"CJK COMPATIBILITY IDEOGRAPH-F9CE"));
        data.insert(std::make_pair(0xf9cf,"CJK COMPATIBILITY IDEOGRAPH-F9CF"));
        data.insert(std::make_pair(0xf9d0,"CJK COMPATIBILITY IDEOGRAPH-F9D0"));
        data.insert(std::make_pair(0xf9d1,"CJK COMPATIBILITY IDEOGRAPH-F9D1"));
        data.insert(std::make_pair(0xf9d2,"CJK COMPATIBILITY IDEOGRAPH-F9D2"));
        data.insert(std::make_pair(0xf9d3,"CJK COMPATIBILITY IDEOGRAPH-F9D3"));
        data.insert(std::make_pair(0xf9d4,"CJK COMPATIBILITY IDEOGRAPH-F9D4"));
        data.insert(std::make_pair(0xf9d5,"CJK COMPATIBILITY IDEOGRAPH-F9D5"));
        data.insert(std::make_pair(0xf9d6,"CJK COMPATIBILITY IDEOGRAPH-F9D6"));
        data.insert(std::make_pair(0xf9d7,"CJK COMPATIBILITY IDEOGRAPH-F9D7"));
        data.insert(std::make_pair(0xf9d8,"CJK COMPATIBILITY IDEOGRAPH-F9D8"));
        data.insert(std::make_pair(0xf9d9,"CJK COMPATIBILITY IDEOGRAPH-F9D9"));
        data.insert(std::make_pair(0xf9da,"CJK COMPATIBILITY IDEOGRAPH-F9DA"));
        data.insert(std::make_pair(0xf9db,"CJK COMPATIBILITY IDEOGRAPH-F9DB"));
        data.insert(std::make_pair(0xf9dc,"CJK COMPATIBILITY IDEOGRAPH-F9DC"));
        data.insert(std::make_pair(0xf9dd,"CJK COMPATIBILITY IDEOGRAPH-F9DD"));
        data.insert(std::make_pair(0xf9de,"CJK COMPATIBILITY IDEOGRAPH-F9DE"));
        data.insert(std::make_pair(0xf9df,"CJK COMPATIBILITY IDEOGRAPH-F9DF"));
        data.insert(std::make_pair(0xf9e0,"CJK COMPATIBILITY IDEOGRAPH-F9E0"));
        data.insert(std::make_pair(0xf9e1,"CJK COMPATIBILITY IDEOGRAPH-F9E1"));
        data.insert(std::make_pair(0xf9e2,"CJK COMPATIBILITY IDEOGRAPH-F9E2"));
        data.insert(std::make_pair(0xf9e3,"CJK COMPATIBILITY IDEOGRAPH-F9E3"));
        data.insert(std::make_pair(0xf9e4,"CJK COMPATIBILITY IDEOGRAPH-F9E4"));
        data.insert(std::make_pair(0xf9e5,"CJK COMPATIBILITY IDEOGRAPH-F9E5"));
        data.insert(std::make_pair(0xf9e6,"CJK COMPATIBILITY IDEOGRAPH-F9E6"));
        data.insert(std::make_pair(0xf9e7,"CJK COMPATIBILITY IDEOGRAPH-F9E7"));
        data.insert(std::make_pair(0xf9e8,"CJK COMPATIBILITY IDEOGRAPH-F9E8"));
        data.insert(std::make_pair(0xf9e9,"CJK COMPATIBILITY IDEOGRAPH-F9E9"));
        data.insert(std::make_pair(0xf9ea,"CJK COMPATIBILITY IDEOGRAPH-F9EA"));
        data.insert(std::make_pair(0xf9eb,"CJK COMPATIBILITY IDEOGRAPH-F9EB"));
        data.insert(std::make_pair(0xf9ec,"CJK COMPATIBILITY IDEOGRAPH-F9EC"));
        data.insert(std::make_pair(0xf9ed,"CJK COMPATIBILITY IDEOGRAPH-F9ED"));
        data.insert(std::make_pair(0xf9ee,"CJK COMPATIBILITY IDEOGRAPH-F9EE"));
        data.insert(std::make_pair(0xf9ef,"CJK COMPATIBILITY IDEOGRAPH-F9EF"));
        data.insert(std::make_pair(0xf9f0,"CJK COMPATIBILITY IDEOGRAPH-F9F0"));
        data.insert(std::make_pair(0xf9f1,"CJK COMPATIBILITY IDEOGRAPH-F9F1"));
        data.insert(std::make_pair(0xf9f2,"CJK COMPATIBILITY IDEOGRAPH-F9F2"));
        data.insert(std::make_pair(0xf9f3,"CJK COMPATIBILITY IDEOGRAPH-F9F3"));
        data.insert(std::make_pair(0xf9f4,"CJK COMPATIBILITY IDEOGRAPH-F9F4"));
        data.insert(std::make_pair(0xf9f5,"CJK COMPATIBILITY IDEOGRAPH-F9F5"));
        data.insert(std::make_pair(0xf9f6,"CJK COMPATIBILITY IDEOGRAPH-F9F6"));
        data.insert(std::make_pair(0xf9f7,"CJK COMPATIBILITY IDEOGRAPH-F9F7"));
        data.insert(std::make_pair(0xf9f8,"CJK COMPATIBILITY IDEOGRAPH-F9F8"));
        data.insert(std::make_pair(0xf9f9,"CJK COMPATIBILITY IDEOGRAPH-F9F9"));
        data.insert(std::make_pair(0xf9fa,"CJK COMPATIBILITY IDEOGRAPH-F9FA"));
        data.insert(std::make_pair(0xf9fb,"CJK COMPATIBILITY IDEOGRAPH-F9FB"));
        data.insert(std::make_pair(0xf9fc,"CJK COMPATIBILITY IDEOGRAPH-F9FC"));
        data.insert(std::make_pair(0xf9fd,"CJK COMPATIBILITY IDEOGRAPH-F9FD"));
        data.insert(std::make_pair(0xf9fe,"CJK COMPATIBILITY IDEOGRAPH-F9FE"));
        data.insert(std::make_pair(0xf9ff,"CJK COMPATIBILITY IDEOGRAPH-F9FF"));
        data.insert(std::make_pair(0xfa00,"CJK COMPATIBILITY IDEOGRAPH-FA00"));
        data.insert(std::make_pair(0xfa01,"CJK COMPATIBILITY IDEOGRAPH-FA01"));
        data.insert(std::make_pair(0xfa02,"CJK COMPATIBILITY IDEOGRAPH-FA02"));
        data.insert(std::make_pair(0xfa03,"CJK COMPATIBILITY IDEOGRAPH-FA03"));
        data.insert(std::make_pair(0xfa04,"CJK COMPATIBILITY IDEOGRAPH-FA04"));
        data.insert(std::make_pair(0xfa05,"CJK COMPATIBILITY IDEOGRAPH-FA05"));
        data.insert(std::make_pair(0xfa06,"CJK COMPATIBILITY IDEOGRAPH-FA06"));
        data.insert(std::make_pair(0xfa07,"CJK COMPATIBILITY IDEOGRAPH-FA07"));
        data.insert(std::make_pair(0xfa08,"CJK COMPATIBILITY IDEOGRAPH-FA08"));
        data.insert(std::make_pair(0xfa09,"CJK COMPATIBILITY IDEOGRAPH-FA09"));
        data.insert(std::make_pair(0xfa0a,"CJK COMPATIBILITY IDEOGRAPH-FA0A"));
        data.insert(std::make_pair(0xfa0b,"CJK COMPATIBILITY IDEOGRAPH-FA0B"));
        data.insert(std::make_pair(0xfa0c,"CJK COMPATIBILITY IDEOGRAPH-FA0C"));
        data.insert(std::make_pair(0xfa0d,"CJK COMPATIBILITY IDEOGRAPH-FA0D"));
        data.insert(std::make_pair(0xfa0e,"CJK COMPATIBILITY IDEOGRAPH-FA0E"));
        data.insert(std::make_pair(0xfa0f,"CJK COMPATIBILITY IDEOGRAPH-FA0F"));
        data.insert(std::make_pair(0xfa10,"CJK COMPATIBILITY IDEOGRAPH-FA10"));
        data.insert(std::make_pair(0xfa11,"CJK COMPATIBILITY IDEOGRAPH-FA11"));
        data.insert(std::make_pair(0xfa12,"CJK COMPATIBILITY IDEOGRAPH-FA12"));
        data.insert(std::make_pair(0xfa13,"CJK COMPATIBILITY IDEOGRAPH-FA13"));
        data.insert(std::make_pair(0xfa14,"CJK COMPATIBILITY IDEOGRAPH-FA14"));
        data.insert(std::make_pair(0xfa15,"CJK COMPATIBILITY IDEOGRAPH-FA15"));
        data.insert(std::make_pair(0xfa16,"CJK COMPATIBILITY IDEOGRAPH-FA16"));
        data.insert(std::make_pair(0xfa17,"CJK COMPATIBILITY IDEOGRAPH-FA17"));
        data.insert(std::make_pair(0xfa18,"CJK COMPATIBILITY IDEOGRAPH-FA18"));
        data.insert(std::make_pair(0xfa19,"CJK COMPATIBILITY IDEOGRAPH-FA19"));
        data.insert(std::make_pair(0xfa1a,"CJK COMPATIBILITY IDEOGRAPH-FA1A"));
        data.insert(std::make_pair(0xfa1b,"CJK COMPATIBILITY IDEOGRAPH-FA1B"));
        data.insert(std::make_pair(0xfa1c,"CJK COMPATIBILITY IDEOGRAPH-FA1C"));
        data.insert(std::make_pair(0xfa1d,"CJK COMPATIBILITY IDEOGRAPH-FA1D"));
        data.insert(std::make_pair(0xfa1e,"CJK COMPATIBILITY IDEOGRAPH-FA1E"));
        data.insert(std::make_pair(0xfa1f,"CJK COMPATIBILITY IDEOGRAPH-FA1F"));
        data.insert(std::make_pair(0xfa20,"CJK COMPATIBILITY IDEOGRAPH-FA20"));
        data.insert(std::make_pair(0xfa21,"CJK COMPATIBILITY IDEOGRAPH-FA21"));
        data.insert(std::make_pair(0xfa22,"CJK COMPATIBILITY IDEOGRAPH-FA22"));
        data.insert(std::make_pair(0xfa23,"CJK COMPATIBILITY IDEOGRAPH-FA23"));
        data.insert(std::make_pair(0xfa24,"CJK COMPATIBILITY IDEOGRAPH-FA24"));
        data.insert(std::make_pair(0xfa25,"CJK COMPATIBILITY IDEOGRAPH-FA25"));
        data.insert(std::make_pair(0xfa26,"CJK COMPATIBILITY IDEOGRAPH-FA26"));
        data.insert(std::make_pair(0xfa27,"CJK COMPATIBILITY IDEOGRAPH-FA27"));
        data.insert(std::make_pair(0xfa28,"CJK COMPATIBILITY IDEOGRAPH-FA28"));
        data.insert(std::make_pair(0xfa29,"CJK COMPATIBILITY IDEOGRAPH-FA29"));
        data.insert(std::make_pair(0xfa2a,"CJK COMPATIBILITY IDEOGRAPH-FA2A"));
        data.insert(std::make_pair(0xfa2b,"CJK COMPATIBILITY IDEOGRAPH-FA2B"));
        data.insert(std::make_pair(0xfa2c,"CJK COMPATIBILITY IDEOGRAPH-FA2C"));
        data.insert(std::make_pair(0xfa2d,"CJK COMPATIBILITY IDEOGRAPH-FA2D"));
        data.insert(std::make_pair(0xfa2e,"CJK COMPATIBILITY IDEOGRAPH-FA2E"));
        data.insert(std::make_pair(0xfa2f,"CJK COMPATIBILITY IDEOGRAPH-FA2F"));
        data.insert(std::make_pair(0xfa30,"CJK COMPATIBILITY IDEOGRAPH-FA30"));
        data.insert(std::make_pair(0xfa31,"CJK COMPATIBILITY IDEOGRAPH-FA31"));
        data.insert(std::make_pair(0xfa32,"CJK COMPATIBILITY IDEOGRAPH-FA32"));
        data.insert(std::make_pair(0xfa33,"CJK COMPATIBILITY IDEOGRAPH-FA33"));
        data.insert(std::make_pair(0xfa34,"CJK COMPATIBILITY IDEOGRAPH-FA34"));
        data.insert(std::make_pair(0xfa35,"CJK COMPATIBILITY IDEOGRAPH-FA35"));
        data.insert(std::make_pair(0xfa36,"CJK COMPATIBILITY IDEOGRAPH-FA36"));
        data.insert(std::make_pair(0xfa37,"CJK COMPATIBILITY IDEOGRAPH-FA37"));
        data.insert(std::make_pair(0xfa38,"CJK COMPATIBILITY IDEOGRAPH-FA38"));
        data.insert(std::make_pair(0xfa39,"CJK COMPATIBILITY IDEOGRAPH-FA39"));
        data.insert(std::make_pair(0xfa3a,"CJK COMPATIBILITY IDEOGRAPH-FA3A"));
        data.insert(std::make_pair(0xfa3b,"CJK COMPATIBILITY IDEOGRAPH-FA3B"));
        data.insert(std::make_pair(0xfa3c,"CJK COMPATIBILITY IDEOGRAPH-FA3C"));
        data.insert(std::make_pair(0xfa3d,"CJK COMPATIBILITY IDEOGRAPH-FA3D"));
        data.insert(std::make_pair(0xfa3e,"CJK COMPATIBILITY IDEOGRAPH-FA3E"));
        data.insert(std::make_pair(0xfa3f,"CJK COMPATIBILITY IDEOGRAPH-FA3F"));
        data.insert(std::make_pair(0xfa40,"CJK COMPATIBILITY IDEOGRAPH-FA40"));
        data.insert(std::make_pair(0xfa41,"CJK COMPATIBILITY IDEOGRAPH-FA41"));
        data.insert(std::make_pair(0xfa42,"CJK COMPATIBILITY IDEOGRAPH-FA42"));
        data.insert(std::make_pair(0xfa43,"CJK COMPATIBILITY IDEOGRAPH-FA43"));
        data.insert(std::make_pair(0xfa44,"CJK COMPATIBILITY IDEOGRAPH-FA44"));
        data.insert(std::make_pair(0xfa45,"CJK COMPATIBILITY IDEOGRAPH-FA45"));
        data.insert(std::make_pair(0xfa46,"CJK COMPATIBILITY IDEOGRAPH-FA46"));
        data.insert(std::make_pair(0xfa47,"CJK COMPATIBILITY IDEOGRAPH-FA47"));
        data.insert(std::make_pair(0xfa48,"CJK COMPATIBILITY IDEOGRAPH-FA48"));
        data.insert(std::make_pair(0xfa49,"CJK COMPATIBILITY IDEOGRAPH-FA49"));
        data.insert(std::make_pair(0xfa4a,"CJK COMPATIBILITY IDEOGRAPH-FA4A"));
        data.insert(std::make_pair(0xfa4b,"CJK COMPATIBILITY IDEOGRAPH-FA4B"));
        data.insert(std::make_pair(0xfa4c,"CJK COMPATIBILITY IDEOGRAPH-FA4C"));
        data.insert(std::make_pair(0xfa4d,"CJK COMPATIBILITY IDEOGRAPH-FA4D"));
        data.insert(std::make_pair(0xfa4e,"CJK COMPATIBILITY IDEOGRAPH-FA4E"));
        data.insert(std::make_pair(0xfa4f,"CJK COMPATIBILITY IDEOGRAPH-FA4F"));
        data.insert(std::make_pair(0xfa50,"CJK COMPATIBILITY IDEOGRAPH-FA50"));
        data.insert(std::make_pair(0xfa51,"CJK COMPATIBILITY IDEOGRAPH-FA51"));
        data.insert(std::make_pair(0xfa52,"CJK COMPATIBILITY IDEOGRAPH-FA52"));
        data.insert(std::make_pair(0xfa53,"CJK COMPATIBILITY IDEOGRAPH-FA53"));
        data.insert(std::make_pair(0xfa54,"CJK COMPATIBILITY IDEOGRAPH-FA54"));
        data.insert(std::make_pair(0xfa55,"CJK COMPATIBILITY IDEOGRAPH-FA55"));
        data.insert(std::make_pair(0xfa56,"CJK COMPATIBILITY IDEOGRAPH-FA56"));
        data.insert(std::make_pair(0xfa57,"CJK COMPATIBILITY IDEOGRAPH-FA57"));
        data.insert(std::make_pair(0xfa58,"CJK COMPATIBILITY IDEOGRAPH-FA58"));
        data.insert(std::make_pair(0xfa59,"CJK COMPATIBILITY IDEOGRAPH-FA59"));
        data.insert(std::make_pair(0xfa5a,"CJK COMPATIBILITY IDEOGRAPH-FA5A"));
        data.insert(std::make_pair(0xfa5b,"CJK COMPATIBILITY IDEOGRAPH-FA5B"));
        data.insert(std::make_pair(0xfa5c,"CJK COMPATIBILITY IDEOGRAPH-FA5C"));
        data.insert(std::make_pair(0xfa5d,"CJK COMPATIBILITY IDEOGRAPH-FA5D"));
        data.insert(std::make_pair(0xfa5e,"CJK COMPATIBILITY IDEOGRAPH-FA5E"));
        data.insert(std::make_pair(0xfa5f,"CJK COMPATIBILITY IDEOGRAPH-FA5F"));
        data.insert(std::make_pair(0xfa60,"CJK COMPATIBILITY IDEOGRAPH-FA60"));
        data.insert(std::make_pair(0xfa61,"CJK COMPATIBILITY IDEOGRAPH-FA61"));
        data.insert(std::make_pair(0xfa62,"CJK COMPATIBILITY IDEOGRAPH-FA62"));
        data.insert(std::make_pair(0xfa63,"CJK COMPATIBILITY IDEOGRAPH-FA63"));
        data.insert(std::make_pair(0xfa64,"CJK COMPATIBILITY IDEOGRAPH-FA64"));
        data.insert(std::make_pair(0xfa65,"CJK COMPATIBILITY IDEOGRAPH-FA65"));
        data.insert(std::make_pair(0xfa66,"CJK COMPATIBILITY IDEOGRAPH-FA66"));
        data.insert(std::make_pair(0xfa67,"CJK COMPATIBILITY IDEOGRAPH-FA67"));
        data.insert(std::make_pair(0xfa68,"CJK COMPATIBILITY IDEOGRAPH-FA68"));
        data.insert(std::make_pair(0xfa69,"CJK COMPATIBILITY IDEOGRAPH-FA69"));
        data.insert(std::make_pair(0xfa6a,"CJK COMPATIBILITY IDEOGRAPH-FA6A"));
        data.insert(std::make_pair(0xfa6b,"CJK COMPATIBILITY IDEOGRAPH-FA6B"));
        data.insert(std::make_pair(0xfa6c,"CJK COMPATIBILITY IDEOGRAPH-FA6C"));
        data.insert(std::make_pair(0xfa6d,"CJK COMPATIBILITY IDEOGRAPH-FA6D"));
        data.insert(std::make_pair(0xfa70,"CJK COMPATIBILITY IDEOGRAPH-FA70"));
        data.insert(std::make_pair(0xfa71,"CJK COMPATIBILITY IDEOGRAPH-FA71"));
        data.insert(std::make_pair(0xfa72,"CJK COMPATIBILITY IDEOGRAPH-FA72"));
        data.insert(std::make_pair(0xfa73,"CJK COMPATIBILITY IDEOGRAPH-FA73"));
        data.insert(std::make_pair(0xfa74,"CJK COMPATIBILITY IDEOGRAPH-FA74"));
        data.insert(std::make_pair(0xfa75,"CJK COMPATIBILITY IDEOGRAPH-FA75"));
        data.insert(std::make_pair(0xfa76,"CJK COMPATIBILITY IDEOGRAPH-FA76"));
        data.insert(std::make_pair(0xfa77,"CJK COMPATIBILITY IDEOGRAPH-FA77"));
        data.insert(std::make_pair(0xfa78,"CJK COMPATIBILITY IDEOGRAPH-FA78"));
        data.insert(std::make_pair(0xfa79,"CJK COMPATIBILITY IDEOGRAPH-FA79"));
        data.insert(std::make_pair(0xfa7a,"CJK COMPATIBILITY IDEOGRAPH-FA7A"));
        data.insert(std::make_pair(0xfa7b,"CJK COMPATIBILITY IDEOGRAPH-FA7B"));
        data.insert(std::make_pair(0xfa7c,"CJK COMPATIBILITY IDEOGRAPH-FA7C"));
        data.insert(std::make_pair(0xfa7d,"CJK COMPATIBILITY IDEOGRAPH-FA7D"));
        data.insert(std::make_pair(0xfa7e,"CJK COMPATIBILITY IDEOGRAPH-FA7E"));
        data.insert(std::make_pair(0xfa7f,"CJK COMPATIBILITY IDEOGRAPH-FA7F"));
        data.insert(std::make_pair(0xfa80,"CJK COMPATIBILITY IDEOGRAPH-FA80"));
        data.insert(std::make_pair(0xfa81,"CJK COMPATIBILITY IDEOGRAPH-FA81"));
        data.insert(std::make_pair(0xfa82,"CJK COMPATIBILITY IDEOGRAPH-FA82"));
        data.insert(std::make_pair(0xfa83,"CJK COMPATIBILITY IDEOGRAPH-FA83"));
        data.insert(std::make_pair(0xfa84,"CJK COMPATIBILITY IDEOGRAPH-FA84"));
        data.insert(std::make_pair(0xfa85,"CJK COMPATIBILITY IDEOGRAPH-FA85"));
        data.insert(std::make_pair(0xfa86,"CJK COMPATIBILITY IDEOGRAPH-FA86"));
        data.insert(std::make_pair(0xfa87,"CJK COMPATIBILITY IDEOGRAPH-FA87"));
        data.insert(std::make_pair(0xfa88,"CJK COMPATIBILITY IDEOGRAPH-FA88"));
        data.insert(std::make_pair(0xfa89,"CJK COMPATIBILITY IDEOGRAPH-FA89"));
        data.insert(std::make_pair(0xfa8a,"CJK COMPATIBILITY IDEOGRAPH-FA8A"));
        data.insert(std::make_pair(0xfa8b,"CJK COMPATIBILITY IDEOGRAPH-FA8B"));
        data.insert(std::make_pair(0xfa8c,"CJK COMPATIBILITY IDEOGRAPH-FA8C"));
        data.insert(std::make_pair(0xfa8d,"CJK COMPATIBILITY IDEOGRAPH-FA8D"));
        data.insert(std::make_pair(0xfa8e,"CJK COMPATIBILITY IDEOGRAPH-FA8E"));
        data.insert(std::make_pair(0xfa8f,"CJK COMPATIBILITY IDEOGRAPH-FA8F"));
        data.insert(std::make_pair(0xfa90,"CJK COMPATIBILITY IDEOGRAPH-FA90"));
        data.insert(std::make_pair(0xfa91,"CJK COMPATIBILITY IDEOGRAPH-FA91"));
        data.insert(std::make_pair(0xfa92,"CJK COMPATIBILITY IDEOGRAPH-FA92"));
        data.insert(std::make_pair(0xfa93,"CJK COMPATIBILITY IDEOGRAPH-FA93"));
        data.insert(std::make_pair(0xfa94,"CJK COMPATIBILITY IDEOGRAPH-FA94"));
        data.insert(std::make_pair(0xfa95,"CJK COMPATIBILITY IDEOGRAPH-FA95"));
        data.insert(std::make_pair(0xfa96,"CJK COMPATIBILITY IDEOGRAPH-FA96"));
        data.insert(std::make_pair(0xfa97,"CJK COMPATIBILITY IDEOGRAPH-FA97"));
        data.insert(std::make_pair(0xfa98,"CJK COMPATIBILITY IDEOGRAPH-FA98"));
        data.insert(std::make_pair(0xfa99,"CJK COMPATIBILITY IDEOGRAPH-FA99"));
        data.insert(std::make_pair(0xfa9a,"CJK COMPATIBILITY IDEOGRAPH-FA9A"));
        data.insert(std::make_pair(0xfa9b,"CJK COMPATIBILITY IDEOGRAPH-FA9B"));
        data.insert(std::make_pair(0xfa9c,"CJK COMPATIBILITY IDEOGRAPH-FA9C"));
        data.insert(std::make_pair(0xfa9d,"CJK COMPATIBILITY IDEOGRAPH-FA9D"));
        data.insert(std::make_pair(0xfa9e,"CJK COMPATIBILITY IDEOGRAPH-FA9E"));
        data.insert(std::make_pair(0xfa9f,"CJK COMPATIBILITY IDEOGRAPH-FA9F"));
        data.insert(std::make_pair(0xfaa0,"CJK COMPATIBILITY IDEOGRAPH-FAA0"));
        data.insert(std::make_pair(0xfaa1,"CJK COMPATIBILITY IDEOGRAPH-FAA1"));
        data.insert(std::make_pair(0xfaa2,"CJK COMPATIBILITY IDEOGRAPH-FAA2"));
        data.insert(std::make_pair(0xfaa3,"CJK COMPATIBILITY IDEOGRAPH-FAA3"));
        data.insert(std::make_pair(0xfaa4,"CJK COMPATIBILITY IDEOGRAPH-FAA4"));
        data.insert(std::make_pair(0xfaa5,"CJK COMPATIBILITY IDEOGRAPH-FAA5"));
        data.insert(std::make_pair(0xfaa6,"CJK COMPATIBILITY IDEOGRAPH-FAA6"));
        data.insert(std::make_pair(0xfaa7,"CJK COMPATIBILITY IDEOGRAPH-FAA7"));
        data.insert(std::make_pair(0xfaa8,"CJK COMPATIBILITY IDEOGRAPH-FAA8"));
        data.insert(std::make_pair(0xfaa9,"CJK COMPATIBILITY IDEOGRAPH-FAA9"));
        data.insert(std::make_pair(0xfaaa,"CJK COMPATIBILITY IDEOGRAPH-FAAA"));
        data.insert(std::make_pair(0xfaab,"CJK COMPATIBILITY IDEOGRAPH-FAAB"));
        data.insert(std::make_pair(0xfaac,"CJK COMPATIBILITY IDEOGRAPH-FAAC"));
        data.insert(std::make_pair(0xfaad,"CJK COMPATIBILITY IDEOGRAPH-FAAD"));
        data.insert(std::make_pair(0xfaae,"CJK COMPATIBILITY IDEOGRAPH-FAAE"));
        data.insert(std::make_pair(0xfaaf,"CJK COMPATIBILITY IDEOGRAPH-FAAF"));
        data.insert(std::make_pair(0xfab0,"CJK COMPATIBILITY IDEOGRAPH-FAB0"));
        data.insert(std::make_pair(0xfab1,"CJK COMPATIBILITY IDEOGRAPH-FAB1"));
        data.insert(std::make_pair(0xfab2,"CJK COMPATIBILITY IDEOGRAPH-FAB2"));
        data.insert(std::make_pair(0xfab3,"CJK COMPATIBILITY IDEOGRAPH-FAB3"));
        data.insert(std::make_pair(0xfab4,"CJK COMPATIBILITY IDEOGRAPH-FAB4"));
        data.insert(std::make_pair(0xfab5,"CJK COMPATIBILITY IDEOGRAPH-FAB5"));
        data.insert(std::make_pair(0xfab6,"CJK COMPATIBILITY IDEOGRAPH-FAB6"));
        data.insert(std::make_pair(0xfab7,"CJK COMPATIBILITY IDEOGRAPH-FAB7"));
        data.insert(std::make_pair(0xfab8,"CJK COMPATIBILITY IDEOGRAPH-FAB8"));
        data.insert(std::make_pair(0xfab9,"CJK COMPATIBILITY IDEOGRAPH-FAB9"));
        data.insert(std::make_pair(0xfaba,"CJK COMPATIBILITY IDEOGRAPH-FABA"));
        data.insert(std::make_pair(0xfabb,"CJK COMPATIBILITY IDEOGRAPH-FABB"));
        data.insert(std::make_pair(0xfabc,"CJK COMPATIBILITY IDEOGRAPH-FABC"));
        data.insert(std::make_pair(0xfabd,"CJK COMPATIBILITY IDEOGRAPH-FABD"));
        data.insert(std::make_pair(0xfabe,"CJK COMPATIBILITY IDEOGRAPH-FABE"));
        data.insert(std::make_pair(0xfabf,"CJK COMPATIBILITY IDEOGRAPH-FABF"));
        data.insert(std::make_pair(0xfac0,"CJK COMPATIBILITY IDEOGRAPH-FAC0"));
        data.insert(std::make_pair(0xfac1,"CJK COMPATIBILITY IDEOGRAPH-FAC1"));
        data.insert(std::make_pair(0xfac2,"CJK COMPATIBILITY IDEOGRAPH-FAC2"));
        data.insert(std::make_pair(0xfac3,"CJK COMPATIBILITY IDEOGRAPH-FAC3"));
        data.insert(std::make_pair(0xfac4,"CJK COMPATIBILITY IDEOGRAPH-FAC4"));
        data.insert(std::make_pair(0xfac5,"CJK COMPATIBILITY IDEOGRAPH-FAC5"));
        data.insert(std::make_pair(0xfac6,"CJK COMPATIBILITY IDEOGRAPH-FAC6"));
        data.insert(std::make_pair(0xfac7,"CJK COMPATIBILITY IDEOGRAPH-FAC7"));
        data.insert(std::make_pair(0xfac8,"CJK COMPATIBILITY IDEOGRAPH-FAC8"));
        data.insert(std::make_pair(0xfac9,"CJK COMPATIBILITY IDEOGRAPH-FAC9"));
        data.insert(std::make_pair(0xfaca,"CJK COMPATIBILITY IDEOGRAPH-FACA"));
        data.insert(std::make_pair(0xfacb,"CJK COMPATIBILITY IDEOGRAPH-FACB"));
        data.insert(std::make_pair(0xfacc,"CJK COMPATIBILITY IDEOGRAPH-FACC"));
        data.insert(std::make_pair(0xfacd,"CJK COMPATIBILITY IDEOGRAPH-FACD"));
        data.insert(std::make_pair(0xface,"CJK COMPATIBILITY IDEOGRAPH-FACE"));
        data.insert(std::make_pair(0xfacf,"CJK COMPATIBILITY IDEOGRAPH-FACF"));
        data.insert(std::make_pair(0xfad0,"CJK COMPATIBILITY IDEOGRAPH-FAD0"));
        data.insert(std::make_pair(0xfad1,"CJK COMPATIBILITY IDEOGRAPH-FAD1"));
        data.insert(std::make_pair(0xfad2,"CJK COMPATIBILITY IDEOGRAPH-FAD2"));
        data.insert(std::make_pair(0xfad3,"CJK COMPATIBILITY IDEOGRAPH-FAD3"));
        data.insert(std::make_pair(0xfad4,"CJK COMPATIBILITY IDEOGRAPH-FAD4"));
        data.insert(std::make_pair(0xfad5,"CJK COMPATIBILITY IDEOGRAPH-FAD5"));
        data.insert(std::make_pair(0xfad6,"CJK COMPATIBILITY IDEOGRAPH-FAD6"));
        data.insert(std::make_pair(0xfad7,"CJK COMPATIBILITY IDEOGRAPH-FAD7"));
        data.insert(std::make_pair(0xfad8,"CJK COMPATIBILITY IDEOGRAPH-FAD8"));
        data.insert(std::make_pair(0xfad9,"CJK COMPATIBILITY IDEOGRAPH-FAD9"));
        data.insert(std::make_pair(0xfb00,"LATIN SMALL LIGATURE FF"));
        data.insert(std::make_pair(0xfb01,"LATIN SMALL LIGATURE FI"));
        data.insert(std::make_pair(0xfb02,"LATIN SMALL LIGATURE FL"));
        data.insert(std::make_pair(0xfb03,"LATIN SMALL LIGATURE FFI"));
        data.insert(std::make_pair(0xfb04,"LATIN SMALL LIGATURE FFL"));
        data.insert(std::make_pair(0xfb05,"LATIN SMALL LIGATURE LONG S T"));
        data.insert(std::make_pair(0xfb06,"LATIN SMALL LIGATURE ST"));
        data.insert(std::make_pair(0xfb13,"ARMENIAN SMALL LIGATURE MEN NOW"));
        data.insert(std::make_pair(0xfb14,"ARMENIAN SMALL LIGATURE MEN ECH"));
        data.insert(std::make_pair(0xfb15,"ARMENIAN SMALL LIGATURE MEN INI"));
        data.insert(std::make_pair(0xfb16,"ARMENIAN SMALL LIGATURE VEW NOW"));
        data.insert(std::make_pair(0xfb17,"ARMENIAN SMALL LIGATURE MEN XEH"));
        data.insert(std::make_pair(0xfb1d,"HEBREW LETTER YOD WITH HIRIQ"));
        data.insert(std::make_pair(0xfb1e,"HEBREW POINT JUDEO-SPANISH VARIKA"));
        data.insert(std::make_pair(0xfb1f,"HEBREW LIGATURE YIDDISH YOD YOD PATAH"));
        data.insert(std::make_pair(0xfb20,"HEBREW LETTER ALTERNATIVE AYIN"));
        data.insert(std::make_pair(0xfb21,"HEBREW LETTER WIDE ALEF"));
        data.insert(std::make_pair(0xfb22,"HEBREW LETTER WIDE DALET"));
        data.insert(std::make_pair(0xfb23,"HEBREW LETTER WIDE HE"));
        data.insert(std::make_pair(0xfb24,"HEBREW LETTER WIDE KAF"));
        data.insert(std::make_pair(0xfb25,"HEBREW LETTER WIDE LAMED"));
        data.insert(std::make_pair(0xfb26,"HEBREW LETTER WIDE FINAL MEM"));
        data.insert(std::make_pair(0xfb27,"HEBREW LETTER WIDE RESH"));
        data.insert(std::make_pair(0xfb28,"HEBREW LETTER WIDE TAV"));
        data.insert(std::make_pair(0xfb29,"HEBREW LETTER ALTERNATIVE PLUS SIGN"));
        data.insert(std::make_pair(0xfb2a,"HEBREW LETTER SHIN WITH SHIN DOT"));
        data.insert(std::make_pair(0xfb2b,"HEBREW LETTER SHIN WITH SIN DOT"));
        data.insert(std::make_pair(0xfb2c,"HEBREW LETTER SHIN WITH DAGESH AND SHIN DOT"));
        data.insert(std::make_pair(0xfb2d,"HEBREW LETTER SHIN WITH DAGESH AND SIN DOT"));
        data.insert(std::make_pair(0xfb2e,"HEBREW LETTER ALEF WITH PATAH"));
        data.insert(std::make_pair(0xfb2f,"HEBREW LETTER ALEF WITH QAMATS"));
        data.insert(std::make_pair(0xfb30,"HEBREW LETTER ALEF WITH MAPIQ"));
        data.insert(std::make_pair(0xfb31,"HEBREW LETTER BET WITH DAGESH"));
        data.insert(std::make_pair(0xfb32,"HEBREW LETTER GIMEL WITH DAGESH"));
        data.insert(std::make_pair(0xfb33,"HEBREW LETTER DALET WITH DAGESH"));
        data.insert(std::make_pair(0xfb34,"HEBREW LETTER HE WITH MAPIQ"));
        data.insert(std::make_pair(0xfb35,"HEBREW LETTER VAV WITH DAGESH"));
        data.insert(std::make_pair(0xfb36,"HEBREW LETTER ZAYIN WITH DAGESH"));
        data.insert(std::make_pair(0xfb38,"HEBREW LETTER TET WITH DAGESH"));
        data.insert(std::make_pair(0xfb39,"HEBREW LETTER YOD WITH DAGESH"));
        data.insert(std::make_pair(0xfb3a,"HEBREW LETTER FINAL KAF WITH DAGESH"));
        data.insert(std::make_pair(0xfb3b,"HEBREW LETTER KAF WITH DAGESH"));
        data.insert(std::make_pair(0xfb3c,"HEBREW LETTER LAMED WITH DAGESH"));
        data.insert(std::make_pair(0xfb3e,"HEBREW LETTER MEM WITH DAGESH"));
        data.insert(std::make_pair(0xfb40,"HEBREW LETTER NUN WITH DAGESH"));
        data.insert(std::make_pair(0xfb41,"HEBREW LETTER SAMEKH WITH DAGESH"));
        data.insert(std::make_pair(0xfb43,"HEBREW LETTER FINAL PE WITH DAGESH"));
        data.insert(std::make_pair(0xfb44,"HEBREW LETTER PE WITH DAGESH"));
        data.insert(std::make_pair(0xfb46,"HEBREW LETTER TSADI WITH DAGESH"));
        data.insert(std::make_pair(0xfb47,"HEBREW LETTER QOF WITH DAGESH"));
        data.insert(std::make_pair(0xfb48,"HEBREW LETTER RESH WITH DAGESH"));
        data.insert(std::make_pair(0xfb49,"HEBREW LETTER SHIN WITH DAGESH"));
        data.insert(std::make_pair(0xfb4a,"HEBREW LETTER TAV WITH DAGESH"));
        data.insert(std::make_pair(0xfb4b,"HEBREW LETTER VAV WITH HOLAM"));
        data.insert(std::make_pair(0xfb4c,"HEBREW LETTER BET WITH RAFE"));
        data.insert(std::make_pair(0xfb4d,"HEBREW LETTER KAF WITH RAFE"));
        data.insert(std::make_pair(0xfb4e,"HEBREW LETTER PE WITH RAFE"));
        data.insert(std::make_pair(0xfb4f,"HEBREW LIGATURE ALEF LAMED"));
        data.insert(std::make_pair(0xfb50,"ARABIC LETTER ALEF WASLA ISOLATED FORM"));
        data.insert(std::make_pair(0xfb51,"ARABIC LETTER ALEF WASLA FINAL FORM"));
        data.insert(std::make_pair(0xfb52,"ARABIC LETTER BEEH ISOLATED FORM"));
        data.insert(std::make_pair(0xfb53,"ARABIC LETTER BEEH FINAL FORM"));
        data.insert(std::make_pair(0xfb54,"ARABIC LETTER BEEH INITIAL FORM"));
        data.insert(std::make_pair(0xfb55,"ARABIC LETTER BEEH MEDIAL FORM"));
        data.insert(std::make_pair(0xfb56,"ARABIC LETTER PEH ISOLATED FORM"));
        data.insert(std::make_pair(0xfb57,"ARABIC LETTER PEH FINAL FORM"));
        data.insert(std::make_pair(0xfb58,"ARABIC LETTER PEH INITIAL FORM"));
        data.insert(std::make_pair(0xfb59,"ARABIC LETTER PEH MEDIAL FORM"));
        data.insert(std::make_pair(0xfb5a,"ARABIC LETTER BEHEH ISOLATED FORM"));
        data.insert(std::make_pair(0xfb5b,"ARABIC LETTER BEHEH FINAL FORM"));
        data.insert(std::make_pair(0xfb5c,"ARABIC LETTER BEHEH INITIAL FORM"));
        data.insert(std::make_pair(0xfb5d,"ARABIC LETTER BEHEH MEDIAL FORM"));
        data.insert(std::make_pair(0xfb5e,"ARABIC LETTER TTEHEH ISOLATED FORM"));
        data.insert(std::make_pair(0xfb5f,"ARABIC LETTER TTEHEH FINAL FORM"));
        data.insert(std::make_pair(0xfb60,"ARABIC LETTER TTEHEH INITIAL FORM"));
        data.insert(std::make_pair(0xfb61,"ARABIC LETTER TTEHEH MEDIAL FORM"));
        data.insert(std::make_pair(0xfb62,"ARABIC LETTER TEHEH ISOLATED FORM"));
        data.insert(std::make_pair(0xfb63,"ARABIC LETTER TEHEH FINAL FORM"));
        data.insert(std::make_pair(0xfb64,"ARABIC LETTER TEHEH INITIAL FORM"));
        data.insert(std::make_pair(0xfb65,"ARABIC LETTER TEHEH MEDIAL FORM"));
        data.insert(std::make_pair(0xfb66,"ARABIC LETTER TTEH ISOLATED FORM"));
        data.insert(std::make_pair(0xfb67,"ARABIC LETTER TTEH FINAL FORM"));
        data.insert(std::make_pair(0xfb68,"ARABIC LETTER TTEH INITIAL FORM"));
        data.insert(std::make_pair(0xfb69,"ARABIC LETTER TTEH MEDIAL FORM"));
        data.insert(std::make_pair(0xfb6a,"ARABIC LETTER VEH ISOLATED FORM"));
        data.insert(std::make_pair(0xfb6b,"ARABIC LETTER VEH FINAL FORM"));
        data.insert(std::make_pair(0xfb6c,"ARABIC LETTER VEH INITIAL FORM"));
        data.insert(std::make_pair(0xfb6d,"ARABIC LETTER VEH MEDIAL FORM"));
        data.insert(std::make_pair(0xfb6e,"ARABIC LETTER PEHEH ISOLATED FORM"));
        data.insert(std::make_pair(0xfb6f,"ARABIC LETTER PEHEH FINAL FORM"));
        data.insert(std::make_pair(0xfb70,"ARABIC LETTER PEHEH INITIAL FORM"));
        data.insert(std::make_pair(0xfb71,"ARABIC LETTER PEHEH MEDIAL FORM"));
        data.insert(std::make_pair(0xfb72,"ARABIC LETTER DYEH ISOLATED FORM"));
        data.insert(std::make_pair(0xfb73,"ARABIC LETTER DYEH FINAL FORM"));
        data.insert(std::make_pair(0xfb74,"ARABIC LETTER DYEH INITIAL FORM"));
        data.insert(std::make_pair(0xfb75,"ARABIC LETTER DYEH MEDIAL FORM"));
        data.insert(std::make_pair(0xfb76,"ARABIC LETTER NYEH ISOLATED FORM"));
        data.insert(std::make_pair(0xfb77,"ARABIC LETTER NYEH FINAL FORM"));
        data.insert(std::make_pair(0xfb78,"ARABIC LETTER NYEH INITIAL FORM"));
        data.insert(std::make_pair(0xfb79,"ARABIC LETTER NYEH MEDIAL FORM"));
        data.insert(std::make_pair(0xfb7a,"ARABIC LETTER TCHEH ISOLATED FORM"));
        data.insert(std::make_pair(0xfb7b,"ARABIC LETTER TCHEH FINAL FORM"));
        data.insert(std::make_pair(0xfb7c,"ARABIC LETTER TCHEH INITIAL FORM"));
        data.insert(std::make_pair(0xfb7d,"ARABIC LETTER TCHEH MEDIAL FORM"));
        data.insert(std::make_pair(0xfb7e,"ARABIC LETTER TCHEHEH ISOLATED FORM"));
        data.insert(std::make_pair(0xfb7f,"ARABIC LETTER TCHEHEH FINAL FORM"));
        data.insert(std::make_pair(0xfb80,"ARABIC LETTER TCHEHEH INITIAL FORM"));
        data.insert(std::make_pair(0xfb81,"ARABIC LETTER TCHEHEH MEDIAL FORM"));
        data.insert(std::make_pair(0xfb82,"ARABIC LETTER DDAHAL ISOLATED FORM"));
        data.insert(std::make_pair(0xfb83,"ARABIC LETTER DDAHAL FINAL FORM"));
        data.insert(std::make_pair(0xfb84,"ARABIC LETTER DAHAL ISOLATED FORM"));
        data.insert(std::make_pair(0xfb85,"ARABIC LETTER DAHAL FINAL FORM"));
        data.insert(std::make_pair(0xfb86,"ARABIC LETTER DUL ISOLATED FORM"));
        data.insert(std::make_pair(0xfb87,"ARABIC LETTER DUL FINAL FORM"));
        data.insert(std::make_pair(0xfb88,"ARABIC LETTER DDAL ISOLATED FORM"));
        data.insert(std::make_pair(0xfb89,"ARABIC LETTER DDAL FINAL FORM"));
        data.insert(std::make_pair(0xfb8a,"ARABIC LETTER JEH ISOLATED FORM"));
        data.insert(std::make_pair(0xfb8b,"ARABIC LETTER JEH FINAL FORM"));
        data.insert(std::make_pair(0xfb8c,"ARABIC LETTER RREH ISOLATED FORM"));
        data.insert(std::make_pair(0xfb8d,"ARABIC LETTER RREH FINAL FORM"));
        data.insert(std::make_pair(0xfb8e,"ARABIC LETTER KEHEH ISOLATED FORM"));
        data.insert(std::make_pair(0xfb8f,"ARABIC LETTER KEHEH FINAL FORM"));
        data.insert(std::make_pair(0xfb90,"ARABIC LETTER KEHEH INITIAL FORM"));
        data.insert(std::make_pair(0xfb91,"ARABIC LETTER KEHEH MEDIAL FORM"));
        data.insert(std::make_pair(0xfb92,"ARABIC LETTER GAF ISOLATED FORM"));
        data.insert(std::make_pair(0xfb93,"ARABIC LETTER GAF FINAL FORM"));
        data.insert(std::make_pair(0xfb94,"ARABIC LETTER GAF INITIAL FORM"));
        data.insert(std::make_pair(0xfb95,"ARABIC LETTER GAF MEDIAL FORM"));
        data.insert(std::make_pair(0xfb96,"ARABIC LETTER GUEH ISOLATED FORM"));
        data.insert(std::make_pair(0xfb97,"ARABIC LETTER GUEH FINAL FORM"));
        data.insert(std::make_pair(0xfb98,"ARABIC LETTER GUEH INITIAL FORM"));
        data.insert(std::make_pair(0xfb99,"ARABIC LETTER GUEH MEDIAL FORM"));
        data.insert(std::make_pair(0xfb9a,"ARABIC LETTER NGOEH ISOLATED FORM"));
        data.insert(std::make_pair(0xfb9b,"ARABIC LETTER NGOEH FINAL FORM"));
        data.insert(std::make_pair(0xfb9c,"ARABIC LETTER NGOEH INITIAL FORM"));
        data.insert(std::make_pair(0xfb9d,"ARABIC LETTER NGOEH MEDIAL FORM"));
        data.insert(std::make_pair(0xfb9e,"ARABIC LETTER NOON GHUNNA ISOLATED FORM"));
        data.insert(std::make_pair(0xfb9f,"ARABIC LETTER NOON GHUNNA FINAL FORM"));
        data.insert(std::make_pair(0xfba0,"ARABIC LETTER RNOON ISOLATED FORM"));
        data.insert(std::make_pair(0xfba1,"ARABIC LETTER RNOON FINAL FORM"));
        data.insert(std::make_pair(0xfba2,"ARABIC LETTER RNOON INITIAL FORM"));
        data.insert(std::make_pair(0xfba3,"ARABIC LETTER RNOON MEDIAL FORM"));
        data.insert(std::make_pair(0xfba4,"ARABIC LETTER HEH WITH YEH ABOVE ISOLATED FORM"));
        data.insert(std::make_pair(0xfba5,"ARABIC LETTER HEH WITH YEH ABOVE FINAL FORM"));
        data.insert(std::make_pair(0xfba6,"ARABIC LETTER HEH GOAL ISOLATED FORM"));
        data.insert(std::make_pair(0xfba7,"ARABIC LETTER HEH GOAL FINAL FORM"));
        data.insert(std::make_pair(0xfba8,"ARABIC LETTER HEH GOAL INITIAL FORM"));
        data.insert(std::make_pair(0xfba9,"ARABIC LETTER HEH GOAL MEDIAL FORM"));
        data.insert(std::make_pair(0xfbaa,"ARABIC LETTER HEH DOACHASHMEE ISOLATED FORM"));
        data.insert(std::make_pair(0xfbab,"ARABIC LETTER HEH DOACHASHMEE FINAL FORM"));
        data.insert(std::make_pair(0xfbac,"ARABIC LETTER HEH DOACHASHMEE INITIAL FORM"));
        data.insert(std::make_pair(0xfbad,"ARABIC LETTER HEH DOACHASHMEE MEDIAL FORM"));
        data.insert(std::make_pair(0xfbae,"ARABIC LETTER YEH BARREE ISOLATED FORM"));
        data.insert(std::make_pair(0xfbaf,"ARABIC LETTER YEH BARREE FINAL FORM"));
        data.insert(std::make_pair(0xfbb0,"ARABIC LETTER YEH BARREE WITH HAMZA ABOVE ISOLATED FORM"));
        data.insert(std::make_pair(0xfbb1,"ARABIC LETTER YEH BARREE WITH HAMZA ABOVE FINAL FORM"));
        data.insert(std::make_pair(0xfbb2,"ARABIC SYMBOL DOT ABOVE"));
        data.insert(std::make_pair(0xfbb3,"ARABIC SYMBOL DOT BELOW"));
        data.insert(std::make_pair(0xfbb4,"ARABIC SYMBOL TWO DOTS ABOVE"));
        data.insert(std::make_pair(0xfbb5,"ARABIC SYMBOL TWO DOTS BELOW"));
        data.insert(std::make_pair(0xfbb6,"ARABIC SYMBOL THREE DOTS ABOVE"));
        data.insert(std::make_pair(0xfbb7,"ARABIC SYMBOL THREE DOTS BELOW"));
        data.insert(std::make_pair(0xfbb8,"ARABIC SYMBOL THREE DOTS POINTING DOWNWARDS ABOVE"));
        data.insert(std::make_pair(0xfbb9,"ARABIC SYMBOL THREE DOTS POINTING DOWNWARDS BELOW"));
        data.insert(std::make_pair(0xfbba,"ARABIC SYMBOL FOUR DOTS ABOVE"));
        data.insert(std::make_pair(0xfbbb,"ARABIC SYMBOL FOUR DOTS BELOW"));
        data.insert(std::make_pair(0xfbbc,"ARABIC SYMBOL DOUBLE VERTICAL BAR BELOW"));
        data.insert(std::make_pair(0xfbbd,"ARABIC SYMBOL TWO DOTS VERTICALLY ABOVE"));
        data.insert(std::make_pair(0xfbbe,"ARABIC SYMBOL TWO DOTS VERTICALLY BELOW"));
        data.insert(std::make_pair(0xfbbf,"ARABIC SYMBOL RING"));
        data.insert(std::make_pair(0xfbc0,"ARABIC SYMBOL SMALL TAH ABOVE"));
        data.insert(std::make_pair(0xfbc1,"ARABIC SYMBOL SMALL TAH BELOW"));
        data.insert(std::make_pair(0xfbc2,"ARABIC SYMBOL WASLA ABOVE"));
        data.insert(std::make_pair(0xfbd3,"ARABIC LETTER NG ISOLATED FORM"));
        data.insert(std::make_pair(0xfbd4,"ARABIC LETTER NG FINAL FORM"));
        data.insert(std::make_pair(0xfbd5,"ARABIC LETTER NG INITIAL FORM"));
        data.insert(std::make_pair(0xfbd6,"ARABIC LETTER NG MEDIAL FORM"));
        data.insert(std::make_pair(0xfbd7,"ARABIC LETTER U ISOLATED FORM"));
        data.insert(std::make_pair(0xfbd8,"ARABIC LETTER U FINAL FORM"));
        data.insert(std::make_pair(0xfbd9,"ARABIC LETTER OE ISOLATED FORM"));
        data.insert(std::make_pair(0xfbda,"ARABIC LETTER OE FINAL FORM"));
        data.insert(std::make_pair(0xfbdb,"ARABIC LETTER YU ISOLATED FORM"));
        data.insert(std::make_pair(0xfbdc,"ARABIC LETTER YU FINAL FORM"));
        data.insert(std::make_pair(0xfbdd,"ARABIC LETTER U WITH HAMZA ABOVE ISOLATED FORM"));
        data.insert(std::make_pair(0xfbde,"ARABIC LETTER VE ISOLATED FORM"));
        data.insert(std::make_pair(0xfbdf,"ARABIC LETTER VE FINAL FORM"));
        data.insert(std::make_pair(0xfbe0,"ARABIC LETTER KIRGHIZ OE ISOLATED FORM"));
        data.insert(std::make_pair(0xfbe1,"ARABIC LETTER KIRGHIZ OE FINAL FORM"));
        data.insert(std::make_pair(0xfbe2,"ARABIC LETTER KIRGHIZ YU ISOLATED FORM"));
        data.insert(std::make_pair(0xfbe3,"ARABIC LETTER KIRGHIZ YU FINAL FORM"));
        data.insert(std::make_pair(0xfbe4,"ARABIC LETTER E ISOLATED FORM"));
        data.insert(std::make_pair(0xfbe5,"ARABIC LETTER E FINAL FORM"));
        data.insert(std::make_pair(0xfbe6,"ARABIC LETTER E INITIAL FORM"));
        data.insert(std::make_pair(0xfbe7,"ARABIC LETTER E MEDIAL FORM"));
        data.insert(std::make_pair(0xfbe8,"ARABIC LETTER UIGHUR KAZAKH KIRGHIZ ALEF MAKSURA INITIAL FORM"));
        data.insert(std::make_pair(0xfbe9,"ARABIC LETTER UIGHUR KAZAKH KIRGHIZ ALEF MAKSURA MEDIAL FORM"));
        data.insert(std::make_pair(0xfbea,"ARABIC LIGATURE YEH WITH HAMZA ABOVE WITH ALEF ISOLATED FORM"));
        data.insert(std::make_pair(0xfbeb,"ARABIC LIGATURE YEH WITH HAMZA ABOVE WITH ALEF FINAL FORM"));
        data.insert(std::make_pair(0xfbec,"ARABIC LIGATURE YEH WITH HAMZA ABOVE WITH AE ISOLATED FORM"));
        data.insert(std::make_pair(0xfbed,"ARABIC LIGATURE YEH WITH HAMZA ABOVE WITH AE FINAL FORM"));
        data.insert(std::make_pair(0xfbee,"ARABIC LIGATURE YEH WITH HAMZA ABOVE WITH WAW ISOLATED FORM"));
        data.insert(std::make_pair(0xfbef,"ARABIC LIGATURE YEH WITH HAMZA ABOVE WITH WAW FINAL FORM"));
        data.insert(std::make_pair(0xfbf0,"ARABIC LIGATURE YEH WITH HAMZA ABOVE WITH U ISOLATED FORM"));
        data.insert(std::make_pair(0xfbf1,"ARABIC LIGATURE YEH WITH HAMZA ABOVE WITH U FINAL FORM"));
        data.insert(std::make_pair(0xfbf2,"ARABIC LIGATURE YEH WITH HAMZA ABOVE WITH OE ISOLATED FORM"));
        data.insert(std::make_pair(0xfbf3,"ARABIC LIGATURE YEH WITH HAMZA ABOVE WITH OE FINAL FORM"));
        data.insert(std::make_pair(0xfbf4,"ARABIC LIGATURE YEH WITH HAMZA ABOVE WITH YU ISOLATED FORM"));
        data.insert(std::make_pair(0xfbf5,"ARABIC LIGATURE YEH WITH HAMZA ABOVE WITH YU FINAL FORM"));
        data.insert(std::make_pair(0xfbf6,"ARABIC LIGATURE YEH WITH HAMZA ABOVE WITH E ISOLATED FORM"));
        data.insert(std::make_pair(0xfbf7,"ARABIC LIGATURE YEH WITH HAMZA ABOVE WITH E FINAL FORM"));
        data.insert(std::make_pair(0xfbf8,"ARABIC LIGATURE YEH WITH HAMZA ABOVE WITH E INITIAL FORM"));
        data.insert(std::make_pair(0xfbf9,"ARABIC LIGATURE UIGHUR KIRGHIZ YEH WITH HAMZA ABOVE WITH ALEF MAKSURA ISOLATED FORM"));
        data.insert(std::make_pair(0xfbfa,"ARABIC LIGATURE UIGHUR KIRGHIZ YEH WITH HAMZA ABOVE WITH ALEF MAKSURA FINAL FORM"));
        data.insert(std::make_pair(0xfbfb,"ARABIC LIGATURE UIGHUR KIRGHIZ YEH WITH HAMZA ABOVE WITH ALEF MAKSURA INITIAL FORM"));
        data.insert(std::make_pair(0xfbfc,"ARABIC LETTER FARSI YEH ISOLATED FORM"));
        data.insert(std::make_pair(0xfbfd,"ARABIC LETTER FARSI YEH FINAL FORM"));
        data.insert(std::make_pair(0xfbfe,"ARABIC LETTER FARSI YEH INITIAL FORM"));
        data.insert(std::make_pair(0xfbff,"ARABIC LETTER FARSI YEH MEDIAL FORM"));
        data.insert(std::make_pair(0xfc00,"ARABIC LIGATURE YEH WITH HAMZA ABOVE WITH JEEM ISOLATED FORM"));
        data.insert(std::make_pair(0xfc01,"ARABIC LIGATURE YEH WITH HAMZA ABOVE WITH HAH ISOLATED FORM"));
        data.insert(std::make_pair(0xfc02,"ARABIC LIGATURE YEH WITH HAMZA ABOVE WITH MEEM ISOLATED FORM"));
        data.insert(std::make_pair(0xfc03,"ARABIC LIGATURE YEH WITH HAMZA ABOVE WITH ALEF MAKSURA ISOLATED FORM"));
        data.insert(std::make_pair(0xfc04,"ARABIC LIGATURE YEH WITH HAMZA ABOVE WITH YEH ISOLATED FORM"));
        data.insert(std::make_pair(0xfc05,"ARABIC LIGATURE BEH WITH JEEM ISOLATED FORM"));
        data.insert(std::make_pair(0xfc06,"ARABIC LIGATURE BEH WITH HAH ISOLATED FORM"));
        data.insert(std::make_pair(0xfc07,"ARABIC LIGATURE BEH WITH KHAH ISOLATED FORM"));
        data.insert(std::make_pair(0xfc08,"ARABIC LIGATURE BEH WITH MEEM ISOLATED FORM"));
        data.insert(std::make_pair(0xfc09,"ARABIC LIGATURE BEH WITH ALEF MAKSURA ISOLATED FORM"));
        data.insert(std::make_pair(0xfc0a,"ARABIC LIGATURE BEH WITH YEH ISOLATED FORM"));
        data.insert(std::make_pair(0xfc0b,"ARABIC LIGATURE TEH WITH JEEM ISOLATED FORM"));
        data.insert(std::make_pair(0xfc0c,"ARABIC LIGATURE TEH WITH HAH ISOLATED FORM"));
        data.insert(std::make_pair(0xfc0d,"ARABIC LIGATURE TEH WITH KHAH ISOLATED FORM"));
        data.insert(std::make_pair(0xfc0e,"ARABIC LIGATURE TEH WITH MEEM ISOLATED FORM"));
        data.insert(std::make_pair(0xfc0f,"ARABIC LIGATURE TEH WITH ALEF MAKSURA ISOLATED FORM"));
        data.insert(std::make_pair(0xfc10,"ARABIC LIGATURE TEH WITH YEH ISOLATED FORM"));
        data.insert(std::make_pair(0xfc11,"ARABIC LIGATURE THEH WITH JEEM ISOLATED FORM"));
        data.insert(std::make_pair(0xfc12,"ARABIC LIGATURE THEH WITH MEEM ISOLATED FORM"));
        data.insert(std::make_pair(0xfc13,"ARABIC LIGATURE THEH WITH ALEF MAKSURA ISOLATED FORM"));
        data.insert(std::make_pair(0xfc14,"ARABIC LIGATURE THEH WITH YEH ISOLATED FORM"));
        data.insert(std::make_pair(0xfc15,"ARABIC LIGATURE JEEM WITH HAH ISOLATED FORM"));
        data.insert(std::make_pair(0xfc16,"ARABIC LIGATURE JEEM WITH MEEM ISOLATED FORM"));
        data.insert(std::make_pair(0xfc17,"ARABIC LIGATURE HAH WITH JEEM ISOLATED FORM"));
        data.insert(std::make_pair(0xfc18,"ARABIC LIGATURE HAH WITH MEEM ISOLATED FORM"));
        data.insert(std::make_pair(0xfc19,"ARABIC LIGATURE KHAH WITH JEEM ISOLATED FORM"));
        data.insert(std::make_pair(0xfc1a,"ARABIC LIGATURE KHAH WITH HAH ISOLATED FORM"));
        data.insert(std::make_pair(0xfc1b,"ARABIC LIGATURE KHAH WITH MEEM ISOLATED FORM"));
        data.insert(std::make_pair(0xfc1c,"ARABIC LIGATURE SEEN WITH JEEM ISOLATED FORM"));
        data.insert(std::make_pair(0xfc1d,"ARABIC LIGATURE SEEN WITH HAH ISOLATED FORM"));
        data.insert(std::make_pair(0xfc1e,"ARABIC LIGATURE SEEN WITH KHAH ISOLATED FORM"));
        data.insert(std::make_pair(0xfc1f,"ARABIC LIGATURE SEEN WITH MEEM ISOLATED FORM"));
        data.insert(std::make_pair(0xfc20,"ARABIC LIGATURE SAD WITH HAH ISOLATED FORM"));
        data.insert(std::make_pair(0xfc21,"ARABIC LIGATURE SAD WITH MEEM ISOLATED FORM"));
        data.insert(std::make_pair(0xfc22,"ARABIC LIGATURE DAD WITH JEEM ISOLATED FORM"));
        data.insert(std::make_pair(0xfc23,"ARABIC LIGATURE DAD WITH HAH ISOLATED FORM"));
        data.insert(std::make_pair(0xfc24,"ARABIC LIGATURE DAD WITH KHAH ISOLATED FORM"));
        data.insert(std::make_pair(0xfc25,"ARABIC LIGATURE DAD WITH MEEM ISOLATED FORM"));
        data.insert(std::make_pair(0xfc26,"ARABIC LIGATURE TAH WITH HAH ISOLATED FORM"));
        data.insert(std::make_pair(0xfc27,"ARABIC LIGATURE TAH WITH MEEM ISOLATED FORM"));
        data.insert(std::make_pair(0xfc28,"ARABIC LIGATURE ZAH WITH MEEM ISOLATED FORM"));
        data.insert(std::make_pair(0xfc29,"ARABIC LIGATURE AIN WITH JEEM ISOLATED FORM"));
        data.insert(std::make_pair(0xfc2a,"ARABIC LIGATURE AIN WITH MEEM ISOLATED FORM"));
        data.insert(std::make_pair(0xfc2b,"ARABIC LIGATURE GHAIN WITH JEEM ISOLATED FORM"));
        data.insert(std::make_pair(0xfc2c,"ARABIC LIGATURE GHAIN WITH MEEM ISOLATED FORM"));
        data.insert(std::make_pair(0xfc2d,"ARABIC LIGATURE FEH WITH JEEM ISOLATED FORM"));
        data.insert(std::make_pair(0xfc2e,"ARABIC LIGATURE FEH WITH HAH ISOLATED FORM"));
        data.insert(std::make_pair(0xfc2f,"ARABIC LIGATURE FEH WITH KHAH ISOLATED FORM"));
        data.insert(std::make_pair(0xfc30,"ARABIC LIGATURE FEH WITH MEEM ISOLATED FORM"));
        data.insert(std::make_pair(0xfc31,"ARABIC LIGATURE FEH WITH ALEF MAKSURA ISOLATED FORM"));
        data.insert(std::make_pair(0xfc32,"ARABIC LIGATURE FEH WITH YEH ISOLATED FORM"));
        data.insert(std::make_pair(0xfc33,"ARABIC LIGATURE QAF WITH HAH ISOLATED FORM"));
        data.insert(std::make_pair(0xfc34,"ARABIC LIGATURE QAF WITH MEEM ISOLATED FORM"));
        data.insert(std::make_pair(0xfc35,"ARABIC LIGATURE QAF WITH ALEF MAKSURA ISOLATED FORM"));
        data.insert(std::make_pair(0xfc36,"ARABIC LIGATURE QAF WITH YEH ISOLATED FORM"));
        data.insert(std::make_pair(0xfc37,"ARABIC LIGATURE KAF WITH ALEF ISOLATED FORM"));
        data.insert(std::make_pair(0xfc38,"ARABIC LIGATURE KAF WITH JEEM ISOLATED FORM"));
        data.insert(std::make_pair(0xfc39,"ARABIC LIGATURE KAF WITH HAH ISOLATED FORM"));
        data.insert(std::make_pair(0xfc3a,"ARABIC LIGATURE KAF WITH KHAH ISOLATED FORM"));
        data.insert(std::make_pair(0xfc3b,"ARABIC LIGATURE KAF WITH LAM ISOLATED FORM"));
        data.insert(std::make_pair(0xfc3c,"ARABIC LIGATURE KAF WITH MEEM ISOLATED FORM"));
        data.insert(std::make_pair(0xfc3d,"ARABIC LIGATURE KAF WITH ALEF MAKSURA ISOLATED FORM"));
        data.insert(std::make_pair(0xfc3e,"ARABIC LIGATURE KAF WITH YEH ISOLATED FORM"));
        data.insert(std::make_pair(0xfc3f,"ARABIC LIGATURE LAM WITH JEEM ISOLATED FORM"));
        data.insert(std::make_pair(0xfc40,"ARABIC LIGATURE LAM WITH HAH ISOLATED FORM"));
        data.insert(std::make_pair(0xfc41,"ARABIC LIGATURE LAM WITH KHAH ISOLATED FORM"));
        data.insert(std::make_pair(0xfc42,"ARABIC LIGATURE LAM WITH MEEM ISOLATED FORM"));
        data.insert(std::make_pair(0xfc43,"ARABIC LIGATURE LAM WITH ALEF MAKSURA ISOLATED FORM"));
        data.insert(std::make_pair(0xfc44,"ARABIC LIGATURE LAM WITH YEH ISOLATED FORM"));
        data.insert(std::make_pair(0xfc45,"ARABIC LIGATURE MEEM WITH JEEM ISOLATED FORM"));
        data.insert(std::make_pair(0xfc46,"ARABIC LIGATURE MEEM WITH HAH ISOLATED FORM"));
        data.insert(std::make_pair(0xfc47,"ARABIC LIGATURE MEEM WITH KHAH ISOLATED FORM"));
        data.insert(std::make_pair(0xfc48,"ARABIC LIGATURE MEEM WITH MEEM ISOLATED FORM"));
        data.insert(std::make_pair(0xfc49,"ARABIC LIGATURE MEEM WITH ALEF MAKSURA ISOLATED FORM"));
        data.insert(std::make_pair(0xfc4a,"ARABIC LIGATURE MEEM WITH YEH ISOLATED FORM"));
        data.insert(std::make_pair(0xfc4b,"ARABIC LIGATURE NOON WITH JEEM ISOLATED FORM"));
        data.insert(std::make_pair(0xfc4c,"ARABIC LIGATURE NOON WITH HAH ISOLATED FORM"));
        data.insert(std::make_pair(0xfc4d,"ARABIC LIGATURE NOON WITH KHAH ISOLATED FORM"));
        data.insert(std::make_pair(0xfc4e,"ARABIC LIGATURE NOON WITH MEEM ISOLATED FORM"));
        data.insert(std::make_pair(0xfc4f,"ARABIC LIGATURE NOON WITH ALEF MAKSURA ISOLATED FORM"));
        data.insert(std::make_pair(0xfc50,"ARABIC LIGATURE NOON WITH YEH ISOLATED FORM"));
        data.insert(std::make_pair(0xfc51,"ARABIC LIGATURE HEH WITH JEEM ISOLATED FORM"));
        data.insert(std::make_pair(0xfc52,"ARABIC LIGATURE HEH WITH MEEM ISOLATED FORM"));
        data.insert(std::make_pair(0xfc53,"ARABIC LIGATURE HEH WITH ALEF MAKSURA ISOLATED FORM"));
        data.insert(std::make_pair(0xfc54,"ARABIC LIGATURE HEH WITH YEH ISOLATED FORM"));
        data.insert(std::make_pair(0xfc55,"ARABIC LIGATURE YEH WITH JEEM ISOLATED FORM"));
        data.insert(std::make_pair(0xfc56,"ARABIC LIGATURE YEH WITH HAH ISOLATED FORM"));
        data.insert(std::make_pair(0xfc57,"ARABIC LIGATURE YEH WITH KHAH ISOLATED FORM"));
        data.insert(std::make_pair(0xfc58,"ARABIC LIGATURE YEH WITH MEEM ISOLATED FORM"));
        data.insert(std::make_pair(0xfc59,"ARABIC LIGATURE YEH WITH ALEF MAKSURA ISOLATED FORM"));
        data.insert(std::make_pair(0xfc5a,"ARABIC LIGATURE YEH WITH YEH ISOLATED FORM"));
        data.insert(std::make_pair(0xfc5b,"ARABIC LIGATURE THAL WITH SUPERSCRIPT ALEF ISOLATED FORM"));
        data.insert(std::make_pair(0xfc5c,"ARABIC LIGATURE REH WITH SUPERSCRIPT ALEF ISOLATED FORM"));
        data.insert(std::make_pair(0xfc5d,"ARABIC LIGATURE ALEF MAKSURA WITH SUPERSCRIPT ALEF ISOLATED FORM"));
        data.insert(std::make_pair(0xfc5e,"ARABIC LIGATURE SHADDA WITH DAMMATAN ISOLATED FORM"));
        data.insert(std::make_pair(0xfc5f,"ARABIC LIGATURE SHADDA WITH KASRATAN ISOLATED FORM"));
        data.insert(std::make_pair(0xfc60,"ARABIC LIGATURE SHADDA WITH FATHA ISOLATED FORM"));
        data.insert(std::make_pair(0xfc61,"ARABIC LIGATURE SHADDA WITH DAMMA ISOLATED FORM"));
        data.insert(std::make_pair(0xfc62,"ARABIC LIGATURE SHADDA WITH KASRA ISOLATED FORM"));
        data.insert(std::make_pair(0xfc63,"ARABIC LIGATURE SHADDA WITH SUPERSCRIPT ALEF ISOLATED FORM"));
        data.insert(std::make_pair(0xfc64,"ARABIC LIGATURE YEH WITH HAMZA ABOVE WITH REH FINAL FORM"));
        data.insert(std::make_pair(0xfc65,"ARABIC LIGATURE YEH WITH HAMZA ABOVE WITH ZAIN FINAL FORM"));
        data.insert(std::make_pair(0xfc66,"ARABIC LIGATURE YEH WITH HAMZA ABOVE WITH MEEM FINAL FORM"));
        data.insert(std::make_pair(0xfc67,"ARABIC LIGATURE YEH WITH HAMZA ABOVE WITH NOON FINAL FORM"));
        data.insert(std::make_pair(0xfc68,"ARABIC LIGATURE YEH WITH HAMZA ABOVE WITH ALEF MAKSURA FINAL FORM"));
        data.insert(std::make_pair(0xfc69,"ARABIC LIGATURE YEH WITH HAMZA ABOVE WITH YEH FINAL FORM"));
        data.insert(std::make_pair(0xfc6a,"ARABIC LIGATURE BEH WITH REH FINAL FORM"));
        data.insert(std::make_pair(0xfc6b,"ARABIC LIGATURE BEH WITH ZAIN FINAL FORM"));
        data.insert(std::make_pair(0xfc6c,"ARABIC LIGATURE BEH WITH MEEM FINAL FORM"));
        data.insert(std::make_pair(0xfc6d,"ARABIC LIGATURE BEH WITH NOON FINAL FORM"));
        data.insert(std::make_pair(0xfc6e,"ARABIC LIGATURE BEH WITH ALEF MAKSURA FINAL FORM"));
        data.insert(std::make_pair(0xfc6f,"ARABIC LIGATURE BEH WITH YEH FINAL FORM"));
        data.insert(std::make_pair(0xfc70,"ARABIC LIGATURE TEH WITH REH FINAL FORM"));
        data.insert(std::make_pair(0xfc71,"ARABIC LIGATURE TEH WITH ZAIN FINAL FORM"));
        data.insert(std::make_pair(0xfc72,"ARABIC LIGATURE TEH WITH MEEM FINAL FORM"));
        data.insert(std::make_pair(0xfc73,"ARABIC LIGATURE TEH WITH NOON FINAL FORM"));
        data.insert(std::make_pair(0xfc74,"ARABIC LIGATURE TEH WITH ALEF MAKSURA FINAL FORM"));
        data.insert(std::make_pair(0xfc75,"ARABIC LIGATURE TEH WITH YEH FINAL FORM"));
        data.insert(std::make_pair(0xfc76,"ARABIC LIGATURE THEH WITH REH FINAL FORM"));
        data.insert(std::make_pair(0xfc77,"ARABIC LIGATURE THEH WITH ZAIN FINAL FORM"));
        data.insert(std::make_pair(0xfc78,"ARABIC LIGATURE THEH WITH MEEM FINAL FORM"));
        data.insert(std::make_pair(0xfc79,"ARABIC LIGATURE THEH WITH NOON FINAL FORM"));
        data.insert(std::make_pair(0xfc7a,"ARABIC LIGATURE THEH WITH ALEF MAKSURA FINAL FORM"));
        data.insert(std::make_pair(0xfc7b,"ARABIC LIGATURE THEH WITH YEH FINAL FORM"));
        data.insert(std::make_pair(0xfc7c,"ARABIC LIGATURE FEH WITH ALEF MAKSURA FINAL FORM"));
        data.insert(std::make_pair(0xfc7d,"ARABIC LIGATURE FEH WITH YEH FINAL FORM"));
        data.insert(std::make_pair(0xfc7e,"ARABIC LIGATURE QAF WITH ALEF MAKSURA FINAL FORM"));
        data.insert(std::make_pair(0xfc7f,"ARABIC LIGATURE QAF WITH YEH FINAL FORM"));
        data.insert(std::make_pair(0xfc80,"ARABIC LIGATURE KAF WITH ALEF FINAL FORM"));
        data.insert(std::make_pair(0xfc81,"ARABIC LIGATURE KAF WITH LAM FINAL FORM"));
        data.insert(std::make_pair(0xfc82,"ARABIC LIGATURE KAF WITH MEEM FINAL FORM"));
        data.insert(std::make_pair(0xfc83,"ARABIC LIGATURE KAF WITH ALEF MAKSURA FINAL FORM"));
        data.insert(std::make_pair(0xfc84,"ARABIC LIGATURE KAF WITH YEH FINAL FORM"));
        data.insert(std::make_pair(0xfc85,"ARABIC LIGATURE LAM WITH MEEM FINAL FORM"));
        data.insert(std::make_pair(0xfc86,"ARABIC LIGATURE LAM WITH ALEF MAKSURA FINAL FORM"));
        data.insert(std::make_pair(0xfc87,"ARABIC LIGATURE LAM WITH YEH FINAL FORM"));
        data.insert(std::make_pair(0xfc88,"ARABIC LIGATURE MEEM WITH ALEF FINAL FORM"));
        data.insert(std::make_pair(0xfc89,"ARABIC LIGATURE MEEM WITH MEEM FINAL FORM"));
        data.insert(std::make_pair(0xfc8a,"ARABIC LIGATURE NOON WITH REH FINAL FORM"));
        data.insert(std::make_pair(0xfc8b,"ARABIC LIGATURE NOON WITH ZAIN FINAL FORM"));
        data.insert(std::make_pair(0xfc8c,"ARABIC LIGATURE NOON WITH MEEM FINAL FORM"));
        data.insert(std::make_pair(0xfc8d,"ARABIC LIGATURE NOON WITH NOON FINAL FORM"));
        data.insert(std::make_pair(0xfc8e,"ARABIC LIGATURE NOON WITH ALEF MAKSURA FINAL FORM"));
        data.insert(std::make_pair(0xfc8f,"ARABIC LIGATURE NOON WITH YEH FINAL FORM"));
        data.insert(std::make_pair(0xfc90,"ARABIC LIGATURE ALEF MAKSURA WITH SUPERSCRIPT ALEF FINAL FORM"));
        data.insert(std::make_pair(0xfc91,"ARABIC LIGATURE YEH WITH REH FINAL FORM"));
        data.insert(std::make_pair(0xfc92,"ARABIC LIGATURE YEH WITH ZAIN FINAL FORM"));
        data.insert(std::make_pair(0xfc93,"ARABIC LIGATURE YEH WITH MEEM FINAL FORM"));
        data.insert(std::make_pair(0xfc94,"ARABIC LIGATURE YEH WITH NOON FINAL FORM"));
        data.insert(std::make_pair(0xfc95,"ARABIC LIGATURE YEH WITH ALEF MAKSURA FINAL FORM"));
        data.insert(std::make_pair(0xfc96,"ARABIC LIGATURE YEH WITH YEH FINAL FORM"));
        data.insert(std::make_pair(0xfc97,"ARABIC LIGATURE YEH WITH HAMZA ABOVE WITH JEEM INITIAL FORM"));
        data.insert(std::make_pair(0xfc98,"ARABIC LIGATURE YEH WITH HAMZA ABOVE WITH HAH INITIAL FORM"));
        data.insert(std::make_pair(0xfc99,"ARABIC LIGATURE YEH WITH HAMZA ABOVE WITH KHAH INITIAL FORM"));
        data.insert(std::make_pair(0xfc9a,"ARABIC LIGATURE YEH WITH HAMZA ABOVE WITH MEEM INITIAL FORM"));
        data.insert(std::make_pair(0xfc9b,"ARABIC LIGATURE YEH WITH HAMZA ABOVE WITH HEH INITIAL FORM"));
        data.insert(std::make_pair(0xfc9c,"ARABIC LIGATURE BEH WITH JEEM INITIAL FORM"));
        data.insert(std::make_pair(0xfc9d,"ARABIC LIGATURE BEH WITH HAH INITIAL FORM"));
        data.insert(std::make_pair(0xfc9e,"ARABIC LIGATURE BEH WITH KHAH INITIAL FORM"));
        data.insert(std::make_pair(0xfc9f,"ARABIC LIGATURE BEH WITH MEEM INITIAL FORM"));
        data.insert(std::make_pair(0xfca0,"ARABIC LIGATURE BEH WITH HEH INITIAL FORM"));
        data.insert(std::make_pair(0xfca1,"ARABIC LIGATURE TEH WITH JEEM INITIAL FORM"));
        data.insert(std::make_pair(0xfca2,"ARABIC LIGATURE TEH WITH HAH INITIAL FORM"));
        data.insert(std::make_pair(0xfca3,"ARABIC LIGATURE TEH WITH KHAH INITIAL FORM"));
        data.insert(std::make_pair(0xfca4,"ARABIC LIGATURE TEH WITH MEEM INITIAL FORM"));
        data.insert(std::make_pair(0xfca5,"ARABIC LIGATURE TEH WITH HEH INITIAL FORM"));
        data.insert(std::make_pair(0xfca6,"ARABIC LIGATURE THEH WITH MEEM INITIAL FORM"));
        data.insert(std::make_pair(0xfca7,"ARABIC LIGATURE JEEM WITH HAH INITIAL FORM"));
        data.insert(std::make_pair(0xfca8,"ARABIC LIGATURE JEEM WITH MEEM INITIAL FORM"));
        data.insert(std::make_pair(0xfca9,"ARABIC LIGATURE HAH WITH JEEM INITIAL FORM"));
        data.insert(std::make_pair(0xfcaa,"ARABIC LIGATURE HAH WITH MEEM INITIAL FORM"));
        data.insert(std::make_pair(0xfcab,"ARABIC LIGATURE KHAH WITH JEEM INITIAL FORM"));
        data.insert(std::make_pair(0xfcac,"ARABIC LIGATURE KHAH WITH MEEM INITIAL FORM"));
        data.insert(std::make_pair(0xfcad,"ARABIC LIGATURE SEEN WITH JEEM INITIAL FORM"));
        data.insert(std::make_pair(0xfcae,"ARABIC LIGATURE SEEN WITH HAH INITIAL FORM"));
        data.insert(std::make_pair(0xfcaf,"ARABIC LIGATURE SEEN WITH KHAH INITIAL FORM"));
        data.insert(std::make_pair(0xfcb0,"ARABIC LIGATURE SEEN WITH MEEM INITIAL FORM"));
        data.insert(std::make_pair(0xfcb1,"ARABIC LIGATURE SAD WITH HAH INITIAL FORM"));
        data.insert(std::make_pair(0xfcb2,"ARABIC LIGATURE SAD WITH KHAH INITIAL FORM"));
        data.insert(std::make_pair(0xfcb3,"ARABIC LIGATURE SAD WITH MEEM INITIAL FORM"));
        data.insert(std::make_pair(0xfcb4,"ARABIC LIGATURE DAD WITH JEEM INITIAL FORM"));
        data.insert(std::make_pair(0xfcb5,"ARABIC LIGATURE DAD WITH HAH INITIAL FORM"));
        data.insert(std::make_pair(0xfcb6,"ARABIC LIGATURE DAD WITH KHAH INITIAL FORM"));
        data.insert(std::make_pair(0xfcb7,"ARABIC LIGATURE DAD WITH MEEM INITIAL FORM"));
        data.insert(std::make_pair(0xfcb8,"ARABIC LIGATURE TAH WITH HAH INITIAL FORM"));
        data.insert(std::make_pair(0xfcb9,"ARABIC LIGATURE ZAH WITH MEEM INITIAL FORM"));
        data.insert(std::make_pair(0xfcba,"ARABIC LIGATURE AIN WITH JEEM INITIAL FORM"));
        data.insert(std::make_pair(0xfcbb,"ARABIC LIGATURE AIN WITH MEEM INITIAL FORM"));
        data.insert(std::make_pair(0xfcbc,"ARABIC LIGATURE GHAIN WITH JEEM INITIAL FORM"));
        data.insert(std::make_pair(0xfcbd,"ARABIC LIGATURE GHAIN WITH MEEM INITIAL FORM"));
        data.insert(std::make_pair(0xfcbe,"ARABIC LIGATURE FEH WITH JEEM INITIAL FORM"));
        data.insert(std::make_pair(0xfcbf,"ARABIC LIGATURE FEH WITH HAH INITIAL FORM"));
        data.insert(std::make_pair(0xfcc0,"ARABIC LIGATURE FEH WITH KHAH INITIAL FORM"));
        data.insert(std::make_pair(0xfcc1,"ARABIC LIGATURE FEH WITH MEEM INITIAL FORM"));
        data.insert(std::make_pair(0xfcc2,"ARABIC LIGATURE QAF WITH HAH INITIAL FORM"));
        data.insert(std::make_pair(0xfcc3,"ARABIC LIGATURE QAF WITH MEEM INITIAL FORM"));
        data.insert(std::make_pair(0xfcc4,"ARABIC LIGATURE KAF WITH JEEM INITIAL FORM"));
        data.insert(std::make_pair(0xfcc5,"ARABIC LIGATURE KAF WITH HAH INITIAL FORM"));
        data.insert(std::make_pair(0xfcc6,"ARABIC LIGATURE KAF WITH KHAH INITIAL FORM"));
        data.insert(std::make_pair(0xfcc7,"ARABIC LIGATURE KAF WITH LAM INITIAL FORM"));
        data.insert(std::make_pair(0xfcc8,"ARABIC LIGATURE KAF WITH MEEM INITIAL FORM"));
        data.insert(std::make_pair(0xfcc9,"ARABIC LIGATURE LAM WITH JEEM INITIAL FORM"));
        data.insert(std::make_pair(0xfcca,"ARABIC LIGATURE LAM WITH HAH INITIAL FORM"));
        data.insert(std::make_pair(0xfccb,"ARABIC LIGATURE LAM WITH KHAH INITIAL FORM"));
        data.insert(std::make_pair(0xfccc,"ARABIC LIGATURE LAM WITH MEEM INITIAL FORM"));
        data.insert(std::make_pair(0xfccd,"ARABIC LIGATURE LAM WITH HEH INITIAL FORM"));
        data.insert(std::make_pair(0xfcce,"ARABIC LIGATURE MEEM WITH JEEM INITIAL FORM"));
        data.insert(std::make_pair(0xfccf,"ARABIC LIGATURE MEEM WITH HAH INITIAL FORM"));
        data.insert(std::make_pair(0xfcd0,"ARABIC LIGATURE MEEM WITH KHAH INITIAL FORM"));
        data.insert(std::make_pair(0xfcd1,"ARABIC LIGATURE MEEM WITH MEEM INITIAL FORM"));
        data.insert(std::make_pair(0xfcd2,"ARABIC LIGATURE NOON WITH JEEM INITIAL FORM"));
        data.insert(std::make_pair(0xfcd3,"ARABIC LIGATURE NOON WITH HAH INITIAL FORM"));
        data.insert(std::make_pair(0xfcd4,"ARABIC LIGATURE NOON WITH KHAH INITIAL FORM"));
        data.insert(std::make_pair(0xfcd5,"ARABIC LIGATURE NOON WITH MEEM INITIAL FORM"));
        data.insert(std::make_pair(0xfcd6,"ARABIC LIGATURE NOON WITH HEH INITIAL FORM"));
        data.insert(std::make_pair(0xfcd7,"ARABIC LIGATURE HEH WITH JEEM INITIAL FORM"));
        data.insert(std::make_pair(0xfcd8,"ARABIC LIGATURE HEH WITH MEEM INITIAL FORM"));
        data.insert(std::make_pair(0xfcd9,"ARABIC LIGATURE HEH WITH SUPERSCRIPT ALEF INITIAL FORM"));
        data.insert(std::make_pair(0xfcda,"ARABIC LIGATURE YEH WITH JEEM INITIAL FORM"));
        data.insert(std::make_pair(0xfcdb,"ARABIC LIGATURE YEH WITH HAH INITIAL FORM"));
        data.insert(std::make_pair(0xfcdc,"ARABIC LIGATURE YEH WITH KHAH INITIAL FORM"));
        data.insert(std::make_pair(0xfcdd,"ARABIC LIGATURE YEH WITH MEEM INITIAL FORM"));
        data.insert(std::make_pair(0xfcde,"ARABIC LIGATURE YEH WITH HEH INITIAL FORM"));
        data.insert(std::make_pair(0xfcdf,"ARABIC LIGATURE YEH WITH HAMZA ABOVE WITH MEEM MEDIAL FORM"));
        data.insert(std::make_pair(0xfce0,"ARABIC LIGATURE YEH WITH HAMZA ABOVE WITH HEH MEDIAL FORM"));
        data.insert(std::make_pair(0xfce1,"ARABIC LIGATURE BEH WITH MEEM MEDIAL FORM"));
        data.insert(std::make_pair(0xfce2,"ARABIC LIGATURE BEH WITH HEH MEDIAL FORM"));
        data.insert(std::make_pair(0xfce3,"ARABIC LIGATURE TEH WITH MEEM MEDIAL FORM"));
        data.insert(std::make_pair(0xfce4,"ARABIC LIGATURE TEH WITH HEH MEDIAL FORM"));
        data.insert(std::make_pair(0xfce5,"ARABIC LIGATURE THEH WITH MEEM MEDIAL FORM"));
        data.insert(std::make_pair(0xfce6,"ARABIC LIGATURE THEH WITH HEH MEDIAL FORM"));
        data.insert(std::make_pair(0xfce7,"ARABIC LIGATURE SEEN WITH MEEM MEDIAL FORM"));
        data.insert(std::make_pair(0xfce8,"ARABIC LIGATURE SEEN WITH HEH MEDIAL FORM"));
        data.insert(std::make_pair(0xfce9,"ARABIC LIGATURE SHEEN WITH MEEM MEDIAL FORM"));
        data.insert(std::make_pair(0xfcea,"ARABIC LIGATURE SHEEN WITH HEH MEDIAL FORM"));
        data.insert(std::make_pair(0xfceb,"ARABIC LIGATURE KAF WITH LAM MEDIAL FORM"));
        data.insert(std::make_pair(0xfcec,"ARABIC LIGATURE KAF WITH MEEM MEDIAL FORM"));
        data.insert(std::make_pair(0xfced,"ARABIC LIGATURE LAM WITH MEEM MEDIAL FORM"));
        data.insert(std::make_pair(0xfcee,"ARABIC LIGATURE NOON WITH MEEM MEDIAL FORM"));
        data.insert(std::make_pair(0xfcef,"ARABIC LIGATURE NOON WITH HEH MEDIAL FORM"));
        data.insert(std::make_pair(0xfcf0,"ARABIC LIGATURE YEH WITH MEEM MEDIAL FORM"));
        data.insert(std::make_pair(0xfcf1,"ARABIC LIGATURE YEH WITH HEH MEDIAL FORM"));
        data.insert(std::make_pair(0xfcf2,"ARABIC LIGATURE SHADDA WITH FATHA MEDIAL FORM"));
        data.insert(std::make_pair(0xfcf3,"ARABIC LIGATURE SHADDA WITH DAMMA MEDIAL FORM"));
        data.insert(std::make_pair(0xfcf4,"ARABIC LIGATURE SHADDA WITH KASRA MEDIAL FORM"));
        data.insert(std::make_pair(0xfcf5,"ARABIC LIGATURE TAH WITH ALEF MAKSURA ISOLATED FORM"));
        data.insert(std::make_pair(0xfcf6,"ARABIC LIGATURE TAH WITH YEH ISOLATED FORM"));
        data.insert(std::make_pair(0xfcf7,"ARABIC LIGATURE AIN WITH ALEF MAKSURA ISOLATED FORM"));
        data.insert(std::make_pair(0xfcf8,"ARABIC LIGATURE AIN WITH YEH ISOLATED FORM"));
        data.insert(std::make_pair(0xfcf9,"ARABIC LIGATURE GHAIN WITH ALEF MAKSURA ISOLATED FORM"));
        data.insert(std::make_pair(0xfcfa,"ARABIC LIGATURE GHAIN WITH YEH ISOLATED FORM"));
        data.insert(std::make_pair(0xfcfb,"ARABIC LIGATURE SEEN WITH ALEF MAKSURA ISOLATED FORM"));
        data.insert(std::make_pair(0xfcfc,"ARABIC LIGATURE SEEN WITH YEH ISOLATED FORM"));
        data.insert(std::make_pair(0xfcfd,"ARABIC LIGATURE SHEEN WITH ALEF MAKSURA ISOLATED FORM"));
        data.insert(std::make_pair(0xfcfe,"ARABIC LIGATURE SHEEN WITH YEH ISOLATED FORM"));
        data.insert(std::make_pair(0xfcff,"ARABIC LIGATURE HAH WITH ALEF MAKSURA ISOLATED FORM"));
        data.insert(std::make_pair(0xfd00,"ARABIC LIGATURE HAH WITH YEH ISOLATED FORM"));
        data.insert(std::make_pair(0xfd01,"ARABIC LIGATURE JEEM WITH ALEF MAKSURA ISOLATED FORM"));
        data.insert(std::make_pair(0xfd02,"ARABIC LIGATURE JEEM WITH YEH ISOLATED FORM"));
        data.insert(std::make_pair(0xfd03,"ARABIC LIGATURE KHAH WITH ALEF MAKSURA ISOLATED FORM"));
        data.insert(std::make_pair(0xfd04,"ARABIC LIGATURE KHAH WITH YEH ISOLATED FORM"));
        data.insert(std::make_pair(0xfd05,"ARABIC LIGATURE SAD WITH ALEF MAKSURA ISOLATED FORM"));
        data.insert(std::make_pair(0xfd06,"ARABIC LIGATURE SAD WITH YEH ISOLATED FORM"));
        data.insert(std::make_pair(0xfd07,"ARABIC LIGATURE DAD WITH ALEF MAKSURA ISOLATED FORM"));
        data.insert(std::make_pair(0xfd08,"ARABIC LIGATURE DAD WITH YEH ISOLATED FORM"));
        data.insert(std::make_pair(0xfd09,"ARABIC LIGATURE SHEEN WITH JEEM ISOLATED FORM"));
        data.insert(std::make_pair(0xfd0a,"ARABIC LIGATURE SHEEN WITH HAH ISOLATED FORM"));
        data.insert(std::make_pair(0xfd0b,"ARABIC LIGATURE SHEEN WITH KHAH ISOLATED FORM"));
        data.insert(std::make_pair(0xfd0c,"ARABIC LIGATURE SHEEN WITH MEEM ISOLATED FORM"));
        data.insert(std::make_pair(0xfd0d,"ARABIC LIGATURE SHEEN WITH REH ISOLATED FORM"));
        data.insert(std::make_pair(0xfd0e,"ARABIC LIGATURE SEEN WITH REH ISOLATED FORM"));
        data.insert(std::make_pair(0xfd0f,"ARABIC LIGATURE SAD WITH REH ISOLATED FORM"));
        data.insert(std::make_pair(0xfd10,"ARABIC LIGATURE DAD WITH REH ISOLATED FORM"));
        data.insert(std::make_pair(0xfd11,"ARABIC LIGATURE TAH WITH ALEF MAKSURA FINAL FORM"));
        data.insert(std::make_pair(0xfd12,"ARABIC LIGATURE TAH WITH YEH FINAL FORM"));
        data.insert(std::make_pair(0xfd13,"ARABIC LIGATURE AIN WITH ALEF MAKSURA FINAL FORM"));
        data.insert(std::make_pair(0xfd14,"ARABIC LIGATURE AIN WITH YEH FINAL FORM"));
        data.insert(std::make_pair(0xfd15,"ARABIC LIGATURE GHAIN WITH ALEF MAKSURA FINAL FORM"));
        data.insert(std::make_pair(0xfd16,"ARABIC LIGATURE GHAIN WITH YEH FINAL FORM"));
        data.insert(std::make_pair(0xfd17,"ARABIC LIGATURE SEEN WITH ALEF MAKSURA FINAL FORM"));
        data.insert(std::make_pair(0xfd18,"ARABIC LIGATURE SEEN WITH YEH FINAL FORM"));
        data.insert(std::make_pair(0xfd19,"ARABIC LIGATURE SHEEN WITH ALEF MAKSURA FINAL FORM"));
        data.insert(std::make_pair(0xfd1a,"ARABIC LIGATURE SHEEN WITH YEH FINAL FORM"));
        data.insert(std::make_pair(0xfd1b,"ARABIC LIGATURE HAH WITH ALEF MAKSURA FINAL FORM"));
        data.insert(std::make_pair(0xfd1c,"ARABIC LIGATURE HAH WITH YEH FINAL FORM"));
        data.insert(std::make_pair(0xfd1d,"ARABIC LIGATURE JEEM WITH ALEF MAKSURA FINAL FORM"));
        data.insert(std::make_pair(0xfd1e,"ARABIC LIGATURE JEEM WITH YEH FINAL FORM"));
        data.insert(std::make_pair(0xfd1f,"ARABIC LIGATURE KHAH WITH ALEF MAKSURA FINAL FORM"));
        data.insert(std::make_pair(0xfd20,"ARABIC LIGATURE KHAH WITH YEH FINAL FORM"));
        data.insert(std::make_pair(0xfd21,"ARABIC LIGATURE SAD WITH ALEF MAKSURA FINAL FORM"));
        data.insert(std::make_pair(0xfd22,"ARABIC LIGATURE SAD WITH YEH FINAL FORM"));
        data.insert(std::make_pair(0xfd23,"ARABIC LIGATURE DAD WITH ALEF MAKSURA FINAL FORM"));
        data.insert(std::make_pair(0xfd24,"ARABIC LIGATURE DAD WITH YEH FINAL FORM"));
        data.insert(std::make_pair(0xfd25,"ARABIC LIGATURE SHEEN WITH JEEM FINAL FORM"));
        data.insert(std::make_pair(0xfd26,"ARABIC LIGATURE SHEEN WITH HAH FINAL FORM"));
        data.insert(std::make_pair(0xfd27,"ARABIC LIGATURE SHEEN WITH KHAH FINAL FORM"));
        data.insert(std::make_pair(0xfd28,"ARABIC LIGATURE SHEEN WITH MEEM FINAL FORM"));
        data.insert(std::make_pair(0xfd29,"ARABIC LIGATURE SHEEN WITH REH FINAL FORM"));
        data.insert(std::make_pair(0xfd2a,"ARABIC LIGATURE SEEN WITH REH FINAL FORM"));
        data.insert(std::make_pair(0xfd2b,"ARABIC LIGATURE SAD WITH REH FINAL FORM"));
        data.insert(std::make_pair(0xfd2c,"ARABIC LIGATURE DAD WITH REH FINAL FORM"));
        data.insert(std::make_pair(0xfd2d,"ARABIC LIGATURE SHEEN WITH JEEM INITIAL FORM"));
        data.insert(std::make_pair(0xfd2e,"ARABIC LIGATURE SHEEN WITH HAH INITIAL FORM"));
        data.insert(std::make_pair(0xfd2f,"ARABIC LIGATURE SHEEN WITH KHAH INITIAL FORM"));
        data.insert(std::make_pair(0xfd30,"ARABIC LIGATURE SHEEN WITH MEEM INITIAL FORM"));
        data.insert(std::make_pair(0xfd31,"ARABIC LIGATURE SEEN WITH HEH INITIAL FORM"));
        data.insert(std::make_pair(0xfd32,"ARABIC LIGATURE SHEEN WITH HEH INITIAL FORM"));
        data.insert(std::make_pair(0xfd33,"ARABIC LIGATURE TAH WITH MEEM INITIAL FORM"));
        data.insert(std::make_pair(0xfd34,"ARABIC LIGATURE SEEN WITH JEEM MEDIAL FORM"));
        data.insert(std::make_pair(0xfd35,"ARABIC LIGATURE SEEN WITH HAH MEDIAL FORM"));
        data.insert(std::make_pair(0xfd36,"ARABIC LIGATURE SEEN WITH KHAH MEDIAL FORM"));
        data.insert(std::make_pair(0xfd37,"ARABIC LIGATURE SHEEN WITH JEEM MEDIAL FORM"));
        data.insert(std::make_pair(0xfd38,"ARABIC LIGATURE SHEEN WITH HAH MEDIAL FORM"));
        data.insert(std::make_pair(0xfd39,"ARABIC LIGATURE SHEEN WITH KHAH MEDIAL FORM"));
        data.insert(std::make_pair(0xfd3a,"ARABIC LIGATURE TAH WITH MEEM MEDIAL FORM"));
        data.insert(std::make_pair(0xfd3b,"ARABIC LIGATURE ZAH WITH MEEM MEDIAL FORM"));
        data.insert(std::make_pair(0xfd3c,"ARABIC LIGATURE ALEF WITH FATHATAN FINAL FORM"));
        data.insert(std::make_pair(0xfd3d,"ARABIC LIGATURE ALEF WITH FATHATAN ISOLATED FORM"));
        data.insert(std::make_pair(0xfd3e,"ORNATE LEFT PARENTHESIS"));
        data.insert(std::make_pair(0xfd3f,"ORNATE RIGHT PARENTHESIS"));
        data.insert(std::make_pair(0xfd40,"ARABIC LIGATURE RAHIMAHU ALLAAH"));
        data.insert(std::make_pair(0xfd41,"ARABIC LIGATURE RADI ALLAAHU ANH"));
        data.insert(std::make_pair(0xfd42,"ARABIC LIGATURE RADI ALLAAHU ANHAA"));
        data.insert(std::make_pair(0xfd43,"ARABIC LIGATURE RADI ALLAAHU ANHUM"));
        data.insert(std::make_pair(0xfd44,"ARABIC LIGATURE RADI ALLAAHU ANHUMAA"));
        data.insert(std::make_pair(0xfd45,"ARABIC LIGATURE RADI ALLAAHU ANHUNNA"));
        data.insert(std::make_pair(0xfd46,"ARABIC LIGATURE SALLALLAAHU ALAYHI WA-AALIH"));
        data.insert(std::make_pair(0xfd47,"ARABIC LIGATURE ALAYHI AS-SALAAM"));
        data.insert(std::make_pair(0xfd48,"ARABIC LIGATURE ALAYHIM AS-SALAAM"));
        data.insert(std::make_pair(0xfd49,"ARABIC LIGATURE ALAYHIMAA AS-SALAAM"));
        data.insert(std::make_pair(0xfd4a,"ARABIC LIGATURE ALAYHI AS-SALAATU WAS-SALAAM"));
        data.insert(std::make_pair(0xfd4b,"ARABIC LIGATURE QUDDISA SIRRAH"));
        data.insert(std::make_pair(0xfd4c,"ARABIC LIGATURE SALLALLAHU ALAYHI WAAALIHEE WA-SALLAM"));
        data.insert(std::make_pair(0xfd4d,"ARABIC LIGATURE ALAYHAA AS-SALAAM"));
        data.insert(std::make_pair(0xfd4e,"ARABIC LIGATURE TABAARAKA WA-TAAALAA"));
        data.insert(std::make_pair(0xfd4f,"ARABIC LIGATURE RAHIMAHUM ALLAAH"));
        data.insert(std::make_pair(0xfd50,"ARABIC LIGATURE TEH WITH JEEM WITH MEEM INITIAL FORM"));
        data.insert(std::make_pair(0xfd51,"ARABIC LIGATURE TEH WITH HAH WITH JEEM FINAL FORM"));
        data.insert(std::make_pair(0xfd52,"ARABIC LIGATURE TEH WITH HAH WITH JEEM INITIAL FORM"));
        data.insert(std::make_pair(0xfd53,"ARABIC LIGATURE TEH WITH HAH WITH MEEM INITIAL FORM"));
        data.insert(std::make_pair(0xfd54,"ARABIC LIGATURE TEH WITH KHAH WITH MEEM INITIAL FORM"));
        data.insert(std::make_pair(0xfd55,"ARABIC LIGATURE TEH WITH MEEM WITH JEEM INITIAL FORM"));
        data.insert(std::make_pair(0xfd56,"ARABIC LIGATURE TEH WITH MEEM WITH HAH INITIAL FORM"));
        data.insert(std::make_pair(0xfd57,"ARABIC LIGATURE TEH WITH MEEM WITH KHAH INITIAL FORM"));
        data.insert(std::make_pair(0xfd58,"ARABIC LIGATURE JEEM WITH MEEM WITH HAH FINAL FORM"));
        data.insert(std::make_pair(0xfd59,"ARABIC LIGATURE JEEM WITH MEEM WITH HAH INITIAL FORM"));
        data.insert(std::make_pair(0xfd5a,"ARABIC LIGATURE HAH WITH MEEM WITH YEH FINAL FORM"));
        data.insert(std::make_pair(0xfd5b,"ARABIC LIGATURE HAH WITH MEEM WITH ALEF MAKSURA FINAL FORM"));
        data.insert(std::make_pair(0xfd5c,"ARABIC LIGATURE SEEN WITH HAH WITH JEEM INITIAL FORM"));
        data.insert(std::make_pair(0xfd5d,"ARABIC LIGATURE SEEN WITH JEEM WITH HAH INITIAL FORM"));
        data.insert(std::make_pair(0xfd5e,"ARABIC LIGATURE SEEN WITH JEEM WITH ALEF MAKSURA FINAL FORM"));
        data.insert(std::make_pair(0xfd5f,"ARABIC LIGATURE SEEN WITH MEEM WITH HAH FINAL FORM"));
        data.insert(std::make_pair(0xfd60,"ARABIC LIGATURE SEEN WITH MEEM WITH HAH INITIAL FORM"));
        data.insert(std::make_pair(0xfd61,"ARABIC LIGATURE SEEN WITH MEEM WITH JEEM INITIAL FORM"));
        data.insert(std::make_pair(0xfd62,"ARABIC LIGATURE SEEN WITH MEEM WITH MEEM FINAL FORM"));
        data.insert(std::make_pair(0xfd63,"ARABIC LIGATURE SEEN WITH MEEM WITH MEEM INITIAL FORM"));
        data.insert(std::make_pair(0xfd64,"ARABIC LIGATURE SAD WITH HAH WITH HAH FINAL FORM"));
        data.insert(std::make_pair(0xfd65,"ARABIC LIGATURE SAD WITH HAH WITH HAH INITIAL FORM"));
        data.insert(std::make_pair(0xfd66,"ARABIC LIGATURE SAD WITH MEEM WITH MEEM FINAL FORM"));
        data.insert(std::make_pair(0xfd67,"ARABIC LIGATURE SHEEN WITH HAH WITH MEEM FINAL FORM"));
        data.insert(std::make_pair(0xfd68,"ARABIC LIGATURE SHEEN WITH HAH WITH MEEM INITIAL FORM"));
        data.insert(std::make_pair(0xfd69,"ARABIC LIGATURE SHEEN WITH JEEM WITH YEH FINAL FORM"));
        data.insert(std::make_pair(0xfd6a,"ARABIC LIGATURE SHEEN WITH MEEM WITH KHAH FINAL FORM"));
        data.insert(std::make_pair(0xfd6b,"ARABIC LIGATURE SHEEN WITH MEEM WITH KHAH INITIAL FORM"));
        data.insert(std::make_pair(0xfd6c,"ARABIC LIGATURE SHEEN WITH MEEM WITH MEEM FINAL FORM"));
        data.insert(std::make_pair(0xfd6d,"ARABIC LIGATURE SHEEN WITH MEEM WITH MEEM INITIAL FORM"));
        data.insert(std::make_pair(0xfd6e,"ARABIC LIGATURE DAD WITH HAH WITH ALEF MAKSURA FINAL FORM"));
        data.insert(std::make_pair(0xfd6f,"ARABIC LIGATURE DAD WITH KHAH WITH MEEM FINAL FORM"));
        data.insert(std::make_pair(0xfd70,"ARABIC LIGATURE DAD WITH KHAH WITH MEEM INITIAL FORM"));
        data.insert(std::make_pair(0xfd71,"ARABIC LIGATURE TAH WITH MEEM WITH HAH FINAL FORM"));
        data.insert(std::make_pair(0xfd72,"ARABIC LIGATURE TAH WITH MEEM WITH HAH INITIAL FORM"));
        data.insert(std::make_pair(0xfd73,"ARABIC LIGATURE TAH WITH MEEM WITH MEEM INITIAL FORM"));
        data.insert(std::make_pair(0xfd74,"ARABIC LIGATURE TAH WITH MEEM WITH YEH FINAL FORM"));
        data.insert(std::make_pair(0xfd75,"ARABIC LIGATURE AIN WITH JEEM WITH MEEM FINAL FORM"));
        data.insert(std::make_pair(0xfd76,"ARABIC LIGATURE AIN WITH MEEM WITH MEEM FINAL FORM"));
        data.insert(std::make_pair(0xfd77,"ARABIC LIGATURE AIN WITH MEEM WITH MEEM INITIAL FORM"));
        data.insert(std::make_pair(0xfd78,"ARABIC LIGATURE AIN WITH MEEM WITH ALEF MAKSURA FINAL FORM"));
        data.insert(std::make_pair(0xfd79,"ARABIC LIGATURE GHAIN WITH MEEM WITH MEEM FINAL FORM"));
        data.insert(std::make_pair(0xfd7a,"ARABIC LIGATURE GHAIN WITH MEEM WITH YEH FINAL FORM"));
        data.insert(std::make_pair(0xfd7b,"ARABIC LIGATURE GHAIN WITH MEEM WITH ALEF MAKSURA FINAL FORM"));
        data.insert(std::make_pair(0xfd7c,"ARABIC LIGATURE FEH WITH KHAH WITH MEEM FINAL FORM"));
        data.insert(std::make_pair(0xfd7d,"ARABIC LIGATURE FEH WITH KHAH WITH MEEM INITIAL FORM"));
        data.insert(std::make_pair(0xfd7e,"ARABIC LIGATURE QAF WITH MEEM WITH HAH FINAL FORM"));
        data.insert(std::make_pair(0xfd7f,"ARABIC LIGATURE QAF WITH MEEM WITH MEEM FINAL FORM"));
        data.insert(std::make_pair(0xfd80,"ARABIC LIGATURE LAM WITH HAH WITH MEEM FINAL FORM"));
        data.insert(std::make_pair(0xfd81,"ARABIC LIGATURE LAM WITH HAH WITH YEH FINAL FORM"));
        data.insert(std::make_pair(0xfd82,"ARABIC LIGATURE LAM WITH HAH WITH ALEF MAKSURA FINAL FORM"));
        data.insert(std::make_pair(0xfd83,"ARABIC LIGATURE LAM WITH JEEM WITH JEEM INITIAL FORM"));
        data.insert(std::make_pair(0xfd84,"ARABIC LIGATURE LAM WITH JEEM WITH JEEM FINAL FORM"));
        data.insert(std::make_pair(0xfd85,"ARABIC LIGATURE LAM WITH KHAH WITH MEEM FINAL FORM"));
        data.insert(std::make_pair(0xfd86,"ARABIC LIGATURE LAM WITH KHAH WITH MEEM INITIAL FORM"));
        data.insert(std::make_pair(0xfd87,"ARABIC LIGATURE LAM WITH MEEM WITH HAH FINAL FORM"));
        data.insert(std::make_pair(0xfd88,"ARABIC LIGATURE LAM WITH MEEM WITH HAH INITIAL FORM"));
        data.insert(std::make_pair(0xfd89,"ARABIC LIGATURE MEEM WITH HAH WITH JEEM INITIAL FORM"));
        data.insert(std::make_pair(0xfd8a,"ARABIC LIGATURE MEEM WITH HAH WITH MEEM INITIAL FORM"));
        data.insert(std::make_pair(0xfd8b,"ARABIC LIGATURE MEEM WITH HAH WITH YEH FINAL FORM"));
        data.insert(std::make_pair(0xfd8c,"ARABIC LIGATURE MEEM WITH JEEM WITH HAH INITIAL FORM"));
        data.insert(std::make_pair(0xfd8d,"ARABIC LIGATURE MEEM WITH JEEM WITH MEEM INITIAL FORM"));
        data.insert(std::make_pair(0xfd8e,"ARABIC LIGATURE MEEM WITH KHAH WITH JEEM INITIAL FORM"));
        data.insert(std::make_pair(0xfd8f,"ARABIC LIGATURE MEEM WITH KHAH WITH MEEM INITIAL FORM"));
        data.insert(std::make_pair(0xfd92,"ARABIC LIGATURE MEEM WITH JEEM WITH KHAH INITIAL FORM"));
        data.insert(std::make_pair(0xfd93,"ARABIC LIGATURE HEH WITH MEEM WITH JEEM INITIAL FORM"));
        data.insert(std::make_pair(0xfd94,"ARABIC LIGATURE HEH WITH MEEM WITH MEEM INITIAL FORM"));
        data.insert(std::make_pair(0xfd95,"ARABIC LIGATURE NOON WITH HAH WITH MEEM INITIAL FORM"));
        data.insert(std::make_pair(0xfd96,"ARABIC LIGATURE NOON WITH HAH WITH ALEF MAKSURA FINAL FORM"));
        data.insert(std::make_pair(0xfd97,"ARABIC LIGATURE NOON WITH JEEM WITH MEEM FINAL FORM"));
        data.insert(std::make_pair(0xfd98,"ARABIC LIGATURE NOON WITH JEEM WITH MEEM INITIAL FORM"));
        data.insert(std::make_pair(0xfd99,"ARABIC LIGATURE NOON WITH JEEM WITH ALEF MAKSURA FINAL FORM"));
        data.insert(std::make_pair(0xfd9a,"ARABIC LIGATURE NOON WITH MEEM WITH YEH FINAL FORM"));
        data.insert(std::make_pair(0xfd9b,"ARABIC LIGATURE NOON WITH MEEM WITH ALEF MAKSURA FINAL FORM"));
        data.insert(std::make_pair(0xfd9c,"ARABIC LIGATURE YEH WITH MEEM WITH MEEM FINAL FORM"));
        data.insert(std::make_pair(0xfd9d,"ARABIC LIGATURE YEH WITH MEEM WITH MEEM INITIAL FORM"));
        data.insert(std::make_pair(0xfd9e,"ARABIC LIGATURE BEH WITH KHAH WITH YEH FINAL FORM"));
        data.insert(std::make_pair(0xfd9f,"ARABIC LIGATURE TEH WITH JEEM WITH YEH FINAL FORM"));
        data.insert(std::make_pair(0xfda0,"ARABIC LIGATURE TEH WITH JEEM WITH ALEF MAKSURA FINAL FORM"));
        data.insert(std::make_pair(0xfda1,"ARABIC LIGATURE TEH WITH KHAH WITH YEH FINAL FORM"));
        data.insert(std::make_pair(0xfda2,"ARABIC LIGATURE TEH WITH KHAH WITH ALEF MAKSURA FINAL FORM"));
        data.insert(std::make_pair(0xfda3,"ARABIC LIGATURE TEH WITH MEEM WITH YEH FINAL FORM"));
        data.insert(std::make_pair(0xfda4,"ARABIC LIGATURE TEH WITH MEEM WITH ALEF MAKSURA FINAL FORM"));
        data.insert(std::make_pair(0xfda5,"ARABIC LIGATURE JEEM WITH MEEM WITH YEH FINAL FORM"));
        data.insert(std::make_pair(0xfda6,"ARABIC LIGATURE JEEM WITH HAH WITH ALEF MAKSURA FINAL FORM"));
        data.insert(std::make_pair(0xfda7,"ARABIC LIGATURE JEEM WITH MEEM WITH ALEF MAKSURA FINAL FORM"));
        data.insert(std::make_pair(0xfda8,"ARABIC LIGATURE SEEN WITH KHAH WITH ALEF MAKSURA FINAL FORM"));
        data.insert(std::make_pair(0xfda9,"ARABIC LIGATURE SAD WITH HAH WITH YEH FINAL FORM"));
        data.insert(std::make_pair(0xfdaa,"ARABIC LIGATURE SHEEN WITH HAH WITH YEH FINAL FORM"));
        data.insert(std::make_pair(0xfdab,"ARABIC LIGATURE DAD WITH HAH WITH YEH FINAL FORM"));
        data.insert(std::make_pair(0xfdac,"ARABIC LIGATURE LAM WITH JEEM WITH YEH FINAL FORM"));
        data.insert(std::make_pair(0xfdad,"ARABIC LIGATURE LAM WITH MEEM WITH YEH FINAL FORM"));
        data.insert(std::make_pair(0xfdae,"ARABIC LIGATURE YEH WITH HAH WITH YEH FINAL FORM"));
        data.insert(std::make_pair(0xfdaf,"ARABIC LIGATURE YEH WITH JEEM WITH YEH FINAL FORM"));
        data.insert(std::make_pair(0xfdb0,"ARABIC LIGATURE YEH WITH MEEM WITH YEH FINAL FORM"));
        data.insert(std::make_pair(0xfdb1,"ARABIC LIGATURE MEEM WITH MEEM WITH YEH FINAL FORM"));
        data.insert(std::make_pair(0xfdb2,"ARABIC LIGATURE QAF WITH MEEM WITH YEH FINAL FORM"));
        data.insert(std::make_pair(0xfdb3,"ARABIC LIGATURE NOON WITH HAH WITH YEH FINAL FORM"));
        data.insert(std::make_pair(0xfdb4,"ARABIC LIGATURE QAF WITH MEEM WITH HAH INITIAL FORM"));
        data.insert(std::make_pair(0xfdb5,"ARABIC LIGATURE LAM WITH HAH WITH MEEM INITIAL FORM"));
        data.insert(std::make_pair(0xfdb6,"ARABIC LIGATURE AIN WITH MEEM WITH YEH FINAL FORM"));
        data.insert(std::make_pair(0xfdb7,"ARABIC LIGATURE KAF WITH MEEM WITH YEH FINAL FORM"));
        data.insert(std::make_pair(0xfdb8,"ARABIC LIGATURE NOON WITH JEEM WITH HAH INITIAL FORM"));
        data.insert(std::make_pair(0xfdb9,"ARABIC LIGATURE MEEM WITH KHAH WITH YEH FINAL FORM"));
        data.insert(std::make_pair(0xfdba,"ARABIC LIGATURE LAM WITH JEEM WITH MEEM INITIAL FORM"));
        data.insert(std::make_pair(0xfdbb,"ARABIC LIGATURE KAF WITH MEEM WITH MEEM FINAL FORM"));
        data.insert(std::make_pair(0xfdbc,"ARABIC LIGATURE LAM WITH JEEM WITH MEEM FINAL FORM"));
        data.insert(std::make_pair(0xfdbd,"ARABIC LIGATURE NOON WITH JEEM WITH HAH FINAL FORM"));
        data.insert(std::make_pair(0xfdbe,"ARABIC LIGATURE JEEM WITH HAH WITH YEH FINAL FORM"));
        data.insert(std::make_pair(0xfdbf,"ARABIC LIGATURE HAH WITH JEEM WITH YEH FINAL FORM"));
        data.insert(std::make_pair(0xfdc0,"ARABIC LIGATURE MEEM WITH JEEM WITH YEH FINAL FORM"));
        data.insert(std::make_pair(0xfdc1,"ARABIC LIGATURE FEH WITH MEEM WITH YEH FINAL FORM"));
        data.insert(std::make_pair(0xfdc2,"ARABIC LIGATURE BEH WITH HAH WITH YEH FINAL FORM"));
        data.insert(std::make_pair(0xfdc3,"ARABIC LIGATURE KAF WITH MEEM WITH MEEM INITIAL FORM"));
        data.insert(std::make_pair(0xfdc4,"ARABIC LIGATURE AIN WITH JEEM WITH MEEM INITIAL FORM"));
        data.insert(std::make_pair(0xfdc5,"ARABIC LIGATURE SAD WITH MEEM WITH MEEM INITIAL FORM"));
        data.insert(std::make_pair(0xfdc6,"ARABIC LIGATURE SEEN WITH KHAH WITH YEH FINAL FORM"));
        data.insert(std::make_pair(0xfdc7,"ARABIC LIGATURE NOON WITH JEEM WITH YEH FINAL FORM"));
        data.insert(std::make_pair(0xfdcf,"ARABIC LIGATURE SALAAMUHU ALAYNAA"));
        data.insert(std::make_pair(0xfdf0,"ARABIC LIGATURE SALLA USED AS KORANIC STOP SIGN ISOLATED FORM"));
        data.insert(std::make_pair(0xfdf1,"ARABIC LIGATURE QALA USED AS KORANIC STOP SIGN ISOLATED FORM"));
        data.insert(std::make_pair(0xfdf2,"ARABIC LIGATURE ALLAH ISOLATED FORM"));
        data.insert(std::make_pair(0xfdf3,"ARABIC LIGATURE AKBAR ISOLATED FORM"));
        data.insert(std::make_pair(0xfdf4,"ARABIC LIGATURE MOHAMMAD ISOLATED FORM"));
        data.insert(std::make_pair(0xfdf5,"ARABIC LIGATURE SALAM ISOLATED FORM"));
        data.insert(std::make_pair(0xfdf6,"ARABIC LIGATURE RASOUL ISOLATED FORM"));
        data.insert(std::make_pair(0xfdf7,"ARABIC LIGATURE ALAYHE ISOLATED FORM"));
        data.insert(std::make_pair(0xfdf8,"ARABIC LIGATURE WASALLAM ISOLATED FORM"));
        data.insert(std::make_pair(0xfdf9,"ARABIC LIGATURE SALLA ISOLATED FORM"));
        data.insert(std::make_pair(0xfdfa,"ARABIC LIGATURE SALLALLAHOU ALAYHE WASALLAM"));
        data.insert(std::make_pair(0xfdfb,"ARABIC LIGATURE JALLAJALALOUHOU"));
        data.insert(std::make_pair(0xfdfc,"RIAL SIGN"));
        data.insert(std::make_pair(0xfdfd,"ARABIC LIGATURE BISMILLAH AR-RAHMAN AR-RAHEEM"));
        data.insert(std::make_pair(0xfdfe,"ARABIC LIGATURE SUBHAANAHU WA TAAALAA"));
        data.insert(std::make_pair(0xfdff,"ARABIC LIGATURE AZZA WA JALL"));
        data.insert(std::make_pair(0xfe00,"VARIATION SELECTOR-1"));
        data.insert(std::make_pair(0xfe01,"VARIATION SELECTOR-2"));
        data.insert(std::make_pair(0xfe02,"VARIATION SELECTOR-3"));
        data.insert(std::make_pair(0xfe03,"VARIATION SELECTOR-4"));
        data.insert(std::make_pair(0xfe04,"VARIATION SELECTOR-5"));
        data.insert(std::make_pair(0xfe05,"VARIATION SELECTOR-6"));
        data.insert(std::make_pair(0xfe06,"VARIATION SELECTOR-7"));
        data.insert(std::make_pair(0xfe07,"VARIATION SELECTOR-8"));
        data.insert(std::make_pair(0xfe08,"VARIATION SELECTOR-9"));
        data.insert(std::make_pair(0xfe09,"VARIATION SELECTOR-10"));
        data.insert(std::make_pair(0xfe0a,"VARIATION SELECTOR-11"));
        data.insert(std::make_pair(0xfe0b,"VARIATION SELECTOR-12"));
        data.insert(std::make_pair(0xfe0c,"VARIATION SELECTOR-13"));
        data.insert(std::make_pair(0xfe0d,"VARIATION SELECTOR-14"));
        data.insert(std::make_pair(0xfe0e,"VARIATION SELECTOR-15"));
        data.insert(std::make_pair(0xfe0f,"VARIATION SELECTOR-16"));
        data.insert(std::make_pair(0xfe10,"PRESENTATION FORM FOR VERTICAL COMMA"));
        data.insert(std::make_pair(0xfe11,"PRESENTATION FORM FOR VERTICAL IDEOGRAPHIC COMMA"));
        data.insert(std::make_pair(0xfe12,"PRESENTATION FORM FOR VERTICAL IDEOGRAPHIC FULL STOP"));
        data.insert(std::make_pair(0xfe13,"PRESENTATION FORM FOR VERTICAL COLON"));
        data.insert(std::make_pair(0xfe14,"PRESENTATION FORM FOR VERTICAL SEMICOLON"));
        data.insert(std::make_pair(0xfe15,"PRESENTATION FORM FOR VERTICAL EXCLAMATION MARK"));
        data.insert(std::make_pair(0xfe16,"PRESENTATION FORM FOR VERTICAL QUESTION MARK"));
        data.insert(std::make_pair(0xfe17,"PRESENTATION FORM FOR VERTICAL LEFT WHITE LENTICULAR BRACKET"));
        data.insert(std::make_pair(0xfe18,"PRESENTATION FORM FOR VERTICAL RIGHT WHITE LENTICULAR BRAKCET"));
        data.insert(std::make_pair(0xfe19,"PRESENTATION FORM FOR VERTICAL HORIZONTAL ELLIPSIS"));
        data.insert(std::make_pair(0xfe20,"COMBINING LIGATURE LEFT HALF"));
        data.insert(std::make_pair(0xfe21,"COMBINING LIGATURE RIGHT HALF"));
        data.insert(std::make_pair(0xfe22,"COMBINING DOUBLE TILDE LEFT HALF"));
        data.insert(std::make_pair(0xfe23,"COMBINING DOUBLE TILDE RIGHT HALF"));
        data.insert(std::make_pair(0xfe24,"COMBINING MACRON LEFT HALF"));
        data.insert(std::make_pair(0xfe25,"COMBINING MACRON RIGHT HALF"));
        data.insert(std::make_pair(0xfe26,"COMBINING CONJOINING MACRON"));
        data.insert(std::make_pair(0xfe27,"COMBINING LIGATURE LEFT HALF BELOW"));
        data.insert(std::make_pair(0xfe28,"COMBINING LIGATURE RIGHT HALF BELOW"));
        data.insert(std::make_pair(0xfe29,"COMBINING TILDE LEFT HALF BELOW"));
        data.insert(std::make_pair(0xfe2a,"COMBINING TILDE RIGHT HALF BELOW"));
        data.insert(std::make_pair(0xfe2b,"COMBINING MACRON LEFT HALF BELOW"));
        data.insert(std::make_pair(0xfe2c,"COMBINING MACRON RIGHT HALF BELOW"));
        data.insert(std::make_pair(0xfe2d,"COMBINING CONJOINING MACRON BELOW"));
        data.insert(std::make_pair(0xfe2e,"COMBINING CYRILLIC TITLO LEFT HALF"));
        data.insert(std::make_pair(0xfe2f,"COMBINING CYRILLIC TITLO RIGHT HALF"));
        data.insert(std::make_pair(0xfe30,"PRESENTATION FORM FOR VERTICAL TWO DOT LEADER"));
        data.insert(std::make_pair(0xfe31,"PRESENTATION FORM FOR VERTICAL EM DASH"));
        data.insert(std::make_pair(0xfe32,"PRESENTATION FORM FOR VERTICAL EN DASH"));
        data.insert(std::make_pair(0xfe33,"PRESENTATION FORM FOR VERTICAL LOW LINE"));
        data.insert(std::make_pair(0xfe34,"PRESENTATION FORM FOR VERTICAL WAVY LOW LINE"));
        data.insert(std::make_pair(0xfe35,"PRESENTATION FORM FOR VERTICAL LEFT PARENTHESIS"));
        data.insert(std::make_pair(0xfe36,"PRESENTATION FORM FOR VERTICAL RIGHT PARENTHESIS"));
        data.insert(std::make_pair(0xfe37,"PRESENTATION FORM FOR VERTICAL LEFT CURLY BRACKET"));
        data.insert(std::make_pair(0xfe38,"PRESENTATION FORM FOR VERTICAL RIGHT CURLY BRACKET"));
        data.insert(std::make_pair(0xfe39,"PRESENTATION FORM FOR VERTICAL LEFT TORTOISE SHELL BRACKET"));
        data.insert(std::make_pair(0xfe3a,"PRESENTATION FORM FOR VERTICAL RIGHT TORTOISE SHELL BRACKET"));
        data.insert(std::make_pair(0xfe3b,"PRESENTATION FORM FOR VERTICAL LEFT BLACK LENTICULAR BRACKET"));
        data.insert(std::make_pair(0xfe3c,"PRESENTATION FORM FOR VERTICAL RIGHT BLACK LENTICULAR BRACKET"));
        data.insert(std::make_pair(0xfe3d,"PRESENTATION FORM FOR VERTICAL LEFT DOUBLE ANGLE BRACKET"));
        data.insert(std::make_pair(0xfe3e,"PRESENTATION FORM FOR VERTICAL RIGHT DOUBLE ANGLE BRACKET"));
        data.insert(std::make_pair(0xfe3f,"PRESENTATION FORM FOR VERTICAL LEFT ANGLE BRACKET"));
        data.insert(std::make_pair(0xfe40,"PRESENTATION FORM FOR VERTICAL RIGHT ANGLE BRACKET"));
        data.insert(std::make_pair(0xfe41,"PRESENTATION FORM FOR VERTICAL LEFT CORNER BRACKET"));
        data.insert(std::make_pair(0xfe42,"PRESENTATION FORM FOR VERTICAL RIGHT CORNER BRACKET"));
        data.insert(std::make_pair(0xfe43,"PRESENTATION FORM FOR VERTICAL LEFT WHITE CORNER BRACKET"));
        data.insert(std::make_pair(0xfe44,"PRESENTATION FORM FOR VERTICAL RIGHT WHITE CORNER BRACKET"));
        data.insert(std::make_pair(0xfe45,"SESAME DOT"));
        data.insert(std::make_pair(0xfe46,"WHITE SESAME DOT"));
        data.insert(std::make_pair(0xfe47,"PRESENTATION FORM FOR VERTICAL LEFT SQUARE BRACKET"));
        data.insert(std::make_pair(0xfe48,"PRESENTATION FORM FOR VERTICAL RIGHT SQUARE BRACKET"));
        data.insert(std::make_pair(0xfe49,"DASHED OVERLINE"));
        data.insert(std::make_pair(0xfe4a,"CENTRELINE OVERLINE"));
        data.insert(std::make_pair(0xfe4b,"WAVY OVERLINE"));
        data.insert(std::make_pair(0xfe4c,"DOUBLE WAVY OVERLINE"));
        data.insert(std::make_pair(0xfe4d,"DASHED LOW LINE"));
        data.insert(std::make_pair(0xfe4e,"CENTRELINE LOW LINE"));
        data.insert(std::make_pair(0xfe4f,"WAVY LOW LINE"));
        data.insert(std::make_pair(0xfe50,"SMALL COMMA"));
        data.insert(std::make_pair(0xfe51,"SMALL IDEOGRAPHIC COMMA"));
        data.insert(std::make_pair(0xfe52,"SMALL FULL STOP"));
        data.insert(std::make_pair(0xfe54,"SMALL SEMICOLON"));
        data.insert(std::make_pair(0xfe55,"SMALL COLON"));
        data.insert(std::make_pair(0xfe56,"SMALL QUESTION MARK"));
        data.insert(std::make_pair(0xfe57,"SMALL EXCLAMATION MARK"));
        data.insert(std::make_pair(0xfe58,"SMALL EM DASH"));
        data.insert(std::make_pair(0xfe59,"SMALL LEFT PARENTHESIS"));
        data.insert(std::make_pair(0xfe5a,"SMALL RIGHT PARENTHESIS"));
        data.insert(std::make_pair(0xfe5b,"SMALL LEFT CURLY BRACKET"));
        data.insert(std::make_pair(0xfe5c,"SMALL RIGHT CURLY BRACKET"));
        data.insert(std::make_pair(0xfe5d,"SMALL LEFT TORTOISE SHELL BRACKET"));
        data.insert(std::make_pair(0xfe5e,"SMALL RIGHT TORTOISE SHELL BRACKET"));
        data.insert(std::make_pair(0xfe5f,"SMALL NUMBER SIGN"));
        data.insert(std::make_pair(0xfe60,"SMALL AMPERSAND"));
        data.insert(std::make_pair(0xfe61,"SMALL ASTERISK"));
        data.insert(std::make_pair(0xfe62,"SMALL PLUS SIGN"));
        data.insert(std::make_pair(0xfe63,"SMALL HYPHEN-MINUS"));
        data.insert(std::make_pair(0xfe64,"SMALL LESS-THAN SIGN"));
        data.insert(std::make_pair(0xfe65,"SMALL GREATER-THAN SIGN"));
        data.insert(std::make_pair(0xfe66,"SMALL EQUALS SIGN"));
        data.insert(std::make_pair(0xfe68,"SMALL REVERSE SOLIDUS"));
        data.insert(std::make_pair(0xfe69,"SMALL DOLLAR SIGN"));
        data.insert(std::make_pair(0xfe6a,"SMALL PERCENT SIGN"));
        data.insert(std::make_pair(0xfe6b,"SMALL COMMERCIAL AT"));
        data.insert(std::make_pair(0xfe70,"ARABIC FATHATAN ISOLATED FORM"));
        data.insert(std::make_pair(0xfe71,"ARABIC TATWEEL WITH FATHATAN ABOVE"));
        data.insert(std::make_pair(0xfe72,"ARABIC DAMMATAN ISOLATED FORM"));
        data.insert(std::make_pair(0xfe73,"ARABIC TAIL FRAGMENT"));
        data.insert(std::make_pair(0xfe74,"ARABIC KASRATAN ISOLATED FORM"));
        data.insert(std::make_pair(0xfe76,"ARABIC FATHA ISOLATED FORM"));
        data.insert(std::make_pair(0xfe77,"ARABIC FATHA MEDIAL FORM"));
        data.insert(std::make_pair(0xfe78,"ARABIC DAMMA ISOLATED FORM"));
        data.insert(std::make_pair(0xfe79,"ARABIC DAMMA MEDIAL FORM"));
        data.insert(std::make_pair(0xfe7a,"ARABIC KASRA ISOLATED FORM"));
        data.insert(std::make_pair(0xfe7b,"ARABIC KASRA MEDIAL FORM"));
        data.insert(std::make_pair(0xfe7c,"ARABIC SHADDA ISOLATED FORM"));
        data.insert(std::make_pair(0xfe7d,"ARABIC SHADDA MEDIAL FORM"));
        data.insert(std::make_pair(0xfe7e,"ARABIC SUKUN ISOLATED FORM"));
        data.insert(std::make_pair(0xfe7f,"ARABIC SUKUN MEDIAL FORM"));
        data.insert(std::make_pair(0xfe80,"ARABIC LETTER HAMZA ISOLATED FORM"));
        data.insert(std::make_pair(0xfe81,"ARABIC LETTER ALEF WITH MADDA ABOVE ISOLATED FORM"));
        data.insert(std::make_pair(0xfe82,"ARABIC LETTER ALEF WITH MADDA ABOVE FINAL FORM"));
        data.insert(std::make_pair(0xfe83,"ARABIC LETTER ALEF WITH HAMZA ABOVE ISOLATED FORM"));
        data.insert(std::make_pair(0xfe84,"ARABIC LETTER ALEF WITH HAMZA ABOVE FINAL FORM"));
        data.insert(std::make_pair(0xfe85,"ARABIC LETTER WAW WITH HAMZA ABOVE ISOLATED FORM"));
        data.insert(std::make_pair(0xfe86,"ARABIC LETTER WAW WITH HAMZA ABOVE FINAL FORM"));
        data.insert(std::make_pair(0xfe87,"ARABIC LETTER ALEF WITH HAMZA BELOW ISOLATED FORM"));
        data.insert(std::make_pair(0xfe88,"ARABIC LETTER ALEF WITH HAMZA BELOW FINAL FORM"));
        data.insert(std::make_pair(0xfe89,"ARABIC LETTER YEH WITH HAMZA ABOVE ISOLATED FORM"));
        data.insert(std::make_pair(0xfe8a,"ARABIC LETTER YEH WITH HAMZA ABOVE FINAL FORM"));
        data.insert(std::make_pair(0xfe8b,"ARABIC LETTER YEH WITH HAMZA ABOVE INITIAL FORM"));
        data.insert(std::make_pair(0xfe8c,"ARABIC LETTER YEH WITH HAMZA ABOVE MEDIAL FORM"));
        data.insert(std::make_pair(0xfe8d,"ARABIC LETTER ALEF ISOLATED FORM"));
        data.insert(std::make_pair(0xfe8e,"ARABIC LETTER ALEF FINAL FORM"));
        data.insert(std::make_pair(0xfe8f,"ARABIC LETTER BEH ISOLATED FORM"));
        data.insert(std::make_pair(0xfe90,"ARABIC LETTER BEH FINAL FORM"));
        data.insert(std::make_pair(0xfe91,"ARABIC LETTER BEH INITIAL FORM"));
        data.insert(std::make_pair(0xfe92,"ARABIC LETTER BEH MEDIAL FORM"));
        data.insert(std::make_pair(0xfe93,"ARABIC LETTER TEH MARBUTA ISOLATED FORM"));
        data.insert(std::make_pair(0xfe94,"ARABIC LETTER TEH MARBUTA FINAL FORM"));
        data.insert(std::make_pair(0xfe95,"ARABIC LETTER TEH ISOLATED FORM"));
        data.insert(std::make_pair(0xfe96,"ARABIC LETTER TEH FINAL FORM"));
        data.insert(std::make_pair(0xfe97,"ARABIC LETTER TEH INITIAL FORM"));
        data.insert(std::make_pair(0xfe98,"ARABIC LETTER TEH MEDIAL FORM"));
        data.insert(std::make_pair(0xfe99,"ARABIC LETTER THEH ISOLATED FORM"));
        data.insert(std::make_pair(0xfe9a,"ARABIC LETTER THEH FINAL FORM"));
        data.insert(std::make_pair(0xfe9b,"ARABIC LETTER THEH INITIAL FORM"));
        data.insert(std::make_pair(0xfe9c,"ARABIC LETTER THEH MEDIAL FORM"));
        data.insert(std::make_pair(0xfe9d,"ARABIC LETTER JEEM ISOLATED FORM"));
        data.insert(std::make_pair(0xfe9e,"ARABIC LETTER JEEM FINAL FORM"));
        data.insert(std::make_pair(0xfe9f,"ARABIC LETTER JEEM INITIAL FORM"));
        data.insert(std::make_pair(0xfea0,"ARABIC LETTER JEEM MEDIAL FORM"));
        data.insert(std::make_pair(0xfea1,"ARABIC LETTER HAH ISOLATED FORM"));
        data.insert(std::make_pair(0xfea2,"ARABIC LETTER HAH FINAL FORM"));
        data.insert(std::make_pair(0xfea3,"ARABIC LETTER HAH INITIAL FORM"));
        data.insert(std::make_pair(0xfea4,"ARABIC LETTER HAH MEDIAL FORM"));
        data.insert(std::make_pair(0xfea5,"ARABIC LETTER KHAH ISOLATED FORM"));
        data.insert(std::make_pair(0xfea6,"ARABIC LETTER KHAH FINAL FORM"));
        data.insert(std::make_pair(0xfea7,"ARABIC LETTER KHAH INITIAL FORM"));
        data.insert(std::make_pair(0xfea8,"ARABIC LETTER KHAH MEDIAL FORM"));
        data.insert(std::make_pair(0xfea9,"ARABIC LETTER DAL ISOLATED FORM"));
        data.insert(std::make_pair(0xfeaa,"ARABIC LETTER DAL FINAL FORM"));
        data.insert(std::make_pair(0xfeab,"ARABIC LETTER THAL ISOLATED FORM"));
        data.insert(std::make_pair(0xfeac,"ARABIC LETTER THAL FINAL FORM"));
        data.insert(std::make_pair(0xfead,"ARABIC LETTER REH ISOLATED FORM"));
        data.insert(std::make_pair(0xfeae,"ARABIC LETTER REH FINAL FORM"));
        data.insert(std::make_pair(0xfeaf,"ARABIC LETTER ZAIN ISOLATED FORM"));
        data.insert(std::make_pair(0xfeb0,"ARABIC LETTER ZAIN FINAL FORM"));
        data.insert(std::make_pair(0xfeb1,"ARABIC LETTER SEEN ISOLATED FORM"));
        data.insert(std::make_pair(0xfeb2,"ARABIC LETTER SEEN FINAL FORM"));
        data.insert(std::make_pair(0xfeb3,"ARABIC LETTER SEEN INITIAL FORM"));
        data.insert(std::make_pair(0xfeb4,"ARABIC LETTER SEEN MEDIAL FORM"));
        data.insert(std::make_pair(0xfeb5,"ARABIC LETTER SHEEN ISOLATED FORM"));
        data.insert(std::make_pair(0xfeb6,"ARABIC LETTER SHEEN FINAL FORM"));
        data.insert(std::make_pair(0xfeb7,"ARABIC LETTER SHEEN INITIAL FORM"));
        data.insert(std::make_pair(0xfeb8,"ARABIC LETTER SHEEN MEDIAL FORM"));
        data.insert(std::make_pair(0xfeb9,"ARABIC LETTER SAD ISOLATED FORM"));
        data.insert(std::make_pair(0xfeba,"ARABIC LETTER SAD FINAL FORM"));
        data.insert(std::make_pair(0xfebb,"ARABIC LETTER SAD INITIAL FORM"));
        data.insert(std::make_pair(0xfebc,"ARABIC LETTER SAD MEDIAL FORM"));
        data.insert(std::make_pair(0xfebd,"ARABIC LETTER DAD ISOLATED FORM"));
        data.insert(std::make_pair(0xfebe,"ARABIC LETTER DAD FINAL FORM"));
        data.insert(std::make_pair(0xfebf,"ARABIC LETTER DAD INITIAL FORM"));
        data.insert(std::make_pair(0xfec0,"ARABIC LETTER DAD MEDIAL FORM"));
        data.insert(std::make_pair(0xfec1,"ARABIC LETTER TAH ISOLATED FORM"));
        data.insert(std::make_pair(0xfec2,"ARABIC LETTER TAH FINAL FORM"));
        data.insert(std::make_pair(0xfec3,"ARABIC LETTER TAH INITIAL FORM"));
        data.insert(std::make_pair(0xfec4,"ARABIC LETTER TAH MEDIAL FORM"));
        data.insert(std::make_pair(0xfec5,"ARABIC LETTER ZAH ISOLATED FORM"));
        data.insert(std::make_pair(0xfec6,"ARABIC LETTER ZAH FINAL FORM"));
        data.insert(std::make_pair(0xfec7,"ARABIC LETTER ZAH INITIAL FORM"));
        data.insert(std::make_pair(0xfec8,"ARABIC LETTER ZAH MEDIAL FORM"));
        data.insert(std::make_pair(0xfec9,"ARABIC LETTER AIN ISOLATED FORM"));
        data.insert(std::make_pair(0xfeca,"ARABIC LETTER AIN FINAL FORM"));
        data.insert(std::make_pair(0xfecb,"ARABIC LETTER AIN INITIAL FORM"));
        data.insert(std::make_pair(0xfecc,"ARABIC LETTER AIN MEDIAL FORM"));
        data.insert(std::make_pair(0xfecd,"ARABIC LETTER GHAIN ISOLATED FORM"));
        data.insert(std::make_pair(0xfece,"ARABIC LETTER GHAIN FINAL FORM"));
        data.insert(std::make_pair(0xfecf,"ARABIC LETTER GHAIN INITIAL FORM"));
        data.insert(std::make_pair(0xfed0,"ARABIC LETTER GHAIN MEDIAL FORM"));
        data.insert(std::make_pair(0xfed1,"ARABIC LETTER FEH ISOLATED FORM"));
        data.insert(std::make_pair(0xfed2,"ARABIC LETTER FEH FINAL FORM"));
        data.insert(std::make_pair(0xfed3,"ARABIC LETTER FEH INITIAL FORM"));
        data.insert(std::make_pair(0xfed4,"ARABIC LETTER FEH MEDIAL FORM"));
        data.insert(std::make_pair(0xfed5,"ARABIC LETTER QAF ISOLATED FORM"));
        data.insert(std::make_pair(0xfed6,"ARABIC LETTER QAF FINAL FORM"));
        data.insert(std::make_pair(0xfed7,"ARABIC LETTER QAF INITIAL FORM"));
        data.insert(std::make_pair(0xfed8,"ARABIC LETTER QAF MEDIAL FORM"));
        data.insert(std::make_pair(0xfed9,"ARABIC LETTER KAF ISOLATED FORM"));
        data.insert(std::make_pair(0xfeda,"ARABIC LETTER KAF FINAL FORM"));
        data.insert(std::make_pair(0xfedb,"ARABIC LETTER KAF INITIAL FORM"));
        data.insert(std::make_pair(0xfedc,"ARABIC LETTER KAF MEDIAL FORM"));
        data.insert(std::make_pair(0xfedd,"ARABIC LETTER LAM ISOLATED FORM"));
        data.insert(std::make_pair(0xfede,"ARABIC LETTER LAM FINAL FORM"));
        data.insert(std::make_pair(0xfedf,"ARABIC LETTER LAM INITIAL FORM"));
        data.insert(std::make_pair(0xfee0,"ARABIC LETTER LAM MEDIAL FORM"));
        data.insert(std::make_pair(0xfee1,"ARABIC LETTER MEEM ISOLATED FORM"));
        data.insert(std::make_pair(0xfee2,"ARABIC LETTER MEEM FINAL FORM"));
        data.insert(std::make_pair(0xfee3,"ARABIC LETTER MEEM INITIAL FORM"));
        data.insert(std::make_pair(0xfee4,"ARABIC LETTER MEEM MEDIAL FORM"));
        data.insert(std::make_pair(0xfee5,"ARABIC LETTER NOON ISOLATED FORM"));
        data.insert(std::make_pair(0xfee6,"ARABIC LETTER NOON FINAL FORM"));
        data.insert(std::make_pair(0xfee7,"ARABIC LETTER NOON INITIAL FORM"));
        data.insert(std::make_pair(0xfee8,"ARABIC LETTER NOON MEDIAL FORM"));
        data.insert(std::make_pair(0xfee9,"ARABIC LETTER HEH ISOLATED FORM"));
        data.insert(std::make_pair(0xfeea,"ARABIC LETTER HEH FINAL FORM"));
        data.insert(std::make_pair(0xfeeb,"ARABIC LETTER HEH INITIAL FORM"));
        data.insert(std::make_pair(0xfeec,"ARABIC LETTER HEH MEDIAL FORM"));
        data.insert(std::make_pair(0xfeed,"ARABIC LETTER WAW ISOLATED FORM"));
        data.insert(std::make_pair(0xfeee,"ARABIC LETTER WAW FINAL FORM"));
        data.insert(std::make_pair(0xfeef,"ARABIC LETTER ALEF MAKSURA ISOLATED FORM"));
        data.insert(std::make_pair(0xfef0,"ARABIC LETTER ALEF MAKSURA FINAL FORM"));
        data.insert(std::make_pair(0xfef1,"ARABIC LETTER YEH ISOLATED FORM"));
        data.insert(std::make_pair(0xfef2,"ARABIC LETTER YEH FINAL FORM"));
        data.insert(std::make_pair(0xfef3,"ARABIC LETTER YEH INITIAL FORM"));
        data.insert(std::make_pair(0xfef4,"ARABIC LETTER YEH MEDIAL FORM"));
        data.insert(std::make_pair(0xfef5,"ARABIC LIGATURE LAM WITH ALEF WITH MADDA ABOVE ISOLATED FORM"));
        data.insert(std::make_pair(0xfef6,"ARABIC LIGATURE LAM WITH ALEF WITH MADDA ABOVE FINAL FORM"));
        data.insert(std::make_pair(0xfef7,"ARABIC LIGATURE LAM WITH ALEF WITH HAMZA ABOVE ISOLATED FORM"));
        data.insert(std::make_pair(0xfef8,"ARABIC LIGATURE LAM WITH ALEF WITH HAMZA ABOVE FINAL FORM"));
        data.insert(std::make_pair(0xfef9,"ARABIC LIGATURE LAM WITH ALEF WITH HAMZA BELOW ISOLATED FORM"));
        data.insert(std::make_pair(0xfefa,"ARABIC LIGATURE LAM WITH ALEF WITH HAMZA BELOW FINAL FORM"));
        data.insert(std::make_pair(0xfefb,"ARABIC LIGATURE LAM WITH ALEF ISOLATED FORM"));
        data.insert(std::make_pair(0xfefc,"ARABIC LIGATURE LAM WITH ALEF FINAL FORM"));
        data.insert(std::make_pair(0xfeff,"ZERO WIDTH NO-BREAK SPACE"));
        data.insert(std::make_pair(0xff01,"FULLWIDTH EXCLAMATION MARK"));
        data.insert(std::make_pair(0xff02,"FULLWIDTH QUOTATION MARK"));
        data.insert(std::make_pair(0xff03,"FULLWIDTH NUMBER SIGN"));
        data.insert(std::make_pair(0xff04,"FULLWIDTH DOLLAR SIGN"));
        data.insert(std::make_pair(0xff05,"FULLWIDTH PERCENT SIGN"));
        data.insert(std::make_pair(0xff06,"FULLWIDTH AMPERSAND"));
        data.insert(std::make_pair(0xff07,"FULLWIDTH APOSTROPHE"));
        data.insert(std::make_pair(0xff08,"FULLWIDTH LEFT PARENTHESIS"));
        data.insert(std::make_pair(0xff09,"FULLWIDTH RIGHT PARENTHESIS"));
        data.insert(std::make_pair(0xff0a,"FULLWIDTH ASTERISK"));
        data.insert(std::make_pair(0xff0b,"FULLWIDTH PLUS SIGN"));
        data.insert(std::make_pair(0xff0c,"FULLWIDTH COMMA"));
        data.insert(std::make_pair(0xff0d,"FULLWIDTH HYPHEN-MINUS"));
        data.insert(std::make_pair(0xff0e,"FULLWIDTH FULL STOP"));
        data.insert(std::make_pair(0xff0f,"FULLWIDTH SOLIDUS"));
        data.insert(std::make_pair(0xff10,"FULLWIDTH DIGIT ZERO"));
        data.insert(std::make_pair(0xff11,"FULLWIDTH DIGIT ONE"));
        data.insert(std::make_pair(0xff12,"FULLWIDTH DIGIT TWO"));
        data.insert(std::make_pair(0xff13,"FULLWIDTH DIGIT THREE"));
        data.insert(std::make_pair(0xff14,"FULLWIDTH DIGIT FOUR"));
        data.insert(std::make_pair(0xff15,"FULLWIDTH DIGIT FIVE"));
        data.insert(std::make_pair(0xff16,"FULLWIDTH DIGIT SIX"));
        data.insert(std::make_pair(0xff17,"FULLWIDTH DIGIT SEVEN"));
        data.insert(std::make_pair(0xff18,"FULLWIDTH DIGIT EIGHT"));
        data.insert(std::make_pair(0xff19,"FULLWIDTH DIGIT NINE"));
        data.insert(std::make_pair(0xff1a,"FULLWIDTH COLON"));
        data.insert(std::make_pair(0xff1b,"FULLWIDTH SEMICOLON"));
        data.insert(std::make_pair(0xff1c,"FULLWIDTH LESS-THAN SIGN"));
        data.insert(std::make_pair(0xff1d,"FULLWIDTH EQUALS SIGN"));
        data.insert(std::make_pair(0xff1e,"FULLWIDTH GREATER-THAN SIGN"));
        data.insert(std::make_pair(0xff1f,"FULLWIDTH QUESTION MARK"));
        data.insert(std::make_pair(0xff20,"FULLWIDTH COMMERCIAL AT"));
        data.insert(std::make_pair(0xff21,"FULLWIDTH LATIN CAPITAL LETTER A"));
        data.insert(std::make_pair(0xff22,"FULLWIDTH LATIN CAPITAL LETTER B"));
        data.insert(std::make_pair(0xff23,"FULLWIDTH LATIN CAPITAL LETTER C"));
        data.insert(std::make_pair(0xff24,"FULLWIDTH LATIN CAPITAL LETTER D"));
        data.insert(std::make_pair(0xff25,"FULLWIDTH LATIN CAPITAL LETTER E"));
        data.insert(std::make_pair(0xff26,"FULLWIDTH LATIN CAPITAL LETTER F"));
        data.insert(std::make_pair(0xff27,"FULLWIDTH LATIN CAPITAL LETTER G"));
        data.insert(std::make_pair(0xff28,"FULLWIDTH LATIN CAPITAL LETTER H"));
        data.insert(std::make_pair(0xff29,"FULLWIDTH LATIN CAPITAL LETTER I"));
        data.insert(std::make_pair(0xff2a,"FULLWIDTH LATIN CAPITAL LETTER J"));
        data.insert(std::make_pair(0xff2b,"FULLWIDTH LATIN CAPITAL LETTER K"));
        data.insert(std::make_pair(0xff2c,"FULLWIDTH LATIN CAPITAL LETTER L"));
        data.insert(std::make_pair(0xff2d,"FULLWIDTH LATIN CAPITAL LETTER M"));
        data.insert(std::make_pair(0xff2e,"FULLWIDTH LATIN CAPITAL LETTER N"));
        data.insert(std::make_pair(0xff2f,"FULLWIDTH LATIN CAPITAL LETTER O"));
        data.insert(std::make_pair(0xff30,"FULLWIDTH LATIN CAPITAL LETTER P"));
        data.insert(std::make_pair(0xff31,"FULLWIDTH LATIN CAPITAL LETTER Q"));
        data.insert(std::make_pair(0xff32,"FULLWIDTH LATIN CAPITAL LETTER R"));
        data.insert(std::make_pair(0xff33,"FULLWIDTH LATIN CAPITAL LETTER S"));
        data.insert(std::make_pair(0xff34,"FULLWIDTH LATIN CAPITAL LETTER T"));
        data.insert(std::make_pair(0xff35,"FULLWIDTH LATIN CAPITAL LETTER U"));
        data.insert(std::make_pair(0xff36,"FULLWIDTH LATIN CAPITAL LETTER V"));
        data.insert(std::make_pair(0xff37,"FULLWIDTH LATIN CAPITAL LETTER W"));
        data.insert(std::make_pair(0xff38,"FULLWIDTH LATIN CAPITAL LETTER X"));
        data.insert(std::make_pair(0xff39,"FULLWIDTH LATIN CAPITAL LETTER Y"));
        data.insert(std::make_pair(0xff3a,"FULLWIDTH LATIN CAPITAL LETTER Z"));
        data.insert(std::make_pair(0xff3b,"FULLWIDTH LEFT SQUARE BRACKET"));
        data.insert(std::make_pair(0xff3c,"FULLWIDTH REVERSE SOLIDUS"));
        data.insert(std::make_pair(0xff3d,"FULLWIDTH RIGHT SQUARE BRACKET"));
        data.insert(std::make_pair(0xff3e,"FULLWIDTH CIRCUMFLEX ACCENT"));
        data.insert(std::make_pair(0xff3f,"FULLWIDTH LOW LINE"));
        data.insert(std::make_pair(0xff40,"FULLWIDTH GRAVE ACCENT"));
        data.insert(std::make_pair(0xff41,"FULLWIDTH LATIN SMALL LETTER A"));
        data.insert(std::make_pair(0xff42,"FULLWIDTH LATIN SMALL LETTER B"));
        data.insert(std::make_pair(0xff43,"FULLWIDTH LATIN SMALL LETTER C"));
        data.insert(std::make_pair(0xff44,"FULLWIDTH LATIN SMALL LETTER D"));
        data.insert(std::make_pair(0xff45,"FULLWIDTH LATIN SMALL LETTER E"));
        data.insert(std::make_pair(0xff46,"FULLWIDTH LATIN SMALL LETTER F"));
        data.insert(std::make_pair(0xff47,"FULLWIDTH LATIN SMALL LETTER G"));
        data.insert(std::make_pair(0xff48,"FULLWIDTH LATIN SMALL LETTER H"));
        data.insert(std::make_pair(0xff49,"FULLWIDTH LATIN SMALL LETTER I"));
        data.insert(std::make_pair(0xff4a,"FULLWIDTH LATIN SMALL LETTER J"));
        data.insert(std::make_pair(0xff4b,"FULLWIDTH LATIN SMALL LETTER K"));
        data.insert(std::make_pair(0xff4c,"FULLWIDTH LATIN SMALL LETTER L"));
        data.insert(std::make_pair(0xff4d,"FULLWIDTH LATIN SMALL LETTER M"));
        data.insert(std::make_pair(0xff4e,"FULLWIDTH LATIN SMALL LETTER N"));
        data.insert(std::make_pair(0xff4f,"FULLWIDTH LATIN SMALL LETTER O"));
        data.insert(std::make_pair(0xff50,"FULLWIDTH LATIN SMALL LETTER P"));
        data.insert(std::make_pair(0xff51,"FULLWIDTH LATIN SMALL LETTER Q"));
        data.insert(std::make_pair(0xff52,"FULLWIDTH LATIN SMALL LETTER R"));
        data.insert(std::make_pair(0xff53,"FULLWIDTH LATIN SMALL LETTER S"));
        data.insert(std::make_pair(0xff54,"FULLWIDTH LATIN SMALL LETTER T"));
        data.insert(std::make_pair(0xff55,"FULLWIDTH LATIN SMALL LETTER U"));
        data.insert(std::make_pair(0xff56,"FULLWIDTH LATIN SMALL LETTER V"));
        data.insert(std::make_pair(0xff57,"FULLWIDTH LATIN SMALL LETTER W"));
        data.insert(std::make_pair(0xff58,"FULLWIDTH LATIN SMALL LETTER X"));
        data.insert(std::make_pair(0xff59,"FULLWIDTH LATIN SMALL LETTER Y"));
        data.insert(std::make_pair(0xff5a,"FULLWIDTH LATIN SMALL LETTER Z"));
        data.insert(std::make_pair(0xff5b,"FULLWIDTH LEFT CURLY BRACKET"));
        data.insert(std::make_pair(0xff5c,"FULLWIDTH VERTICAL LINE"));
        data.insert(std::make_pair(0xff5d,"FULLWIDTH RIGHT CURLY BRACKET"));
        data.insert(std::make_pair(0xff5e,"FULLWIDTH TILDE"));
        data.insert(std::make_pair(0xff5f,"FULLWIDTH LEFT WHITE PARENTHESIS"));
        data.insert(std::make_pair(0xff60,"FULLWIDTH RIGHT WHITE PARENTHESIS"));
        data.insert(std::make_pair(0xff61,"HALFWIDTH IDEOGRAPHIC FULL STOP"));
        data.insert(std::make_pair(0xff62,"HALFWIDTH LEFT CORNER BRACKET"));
        data.insert(std::make_pair(0xff63,"HALFWIDTH RIGHT CORNER BRACKET"));
        data.insert(std::make_pair(0xff64,"HALFWIDTH IDEOGRAPHIC COMMA"));
        data.insert(std::make_pair(0xff65,"HALFWIDTH KATAKANA MIDDLE DOT"));
        data.insert(std::make_pair(0xff66,"HALFWIDTH KATAKANA LETTER WO"));
        data.insert(std::make_pair(0xff67,"HALFWIDTH KATAKANA LETTER SMALL A"));
        data.insert(std::make_pair(0xff68,"HALFWIDTH KATAKANA LETTER SMALL I"));
        data.insert(std::make_pair(0xff69,"HALFWIDTH KATAKANA LETTER SMALL U"));
        data.insert(std::make_pair(0xff6a,"HALFWIDTH KATAKANA LETTER SMALL E"));
        data.insert(std::make_pair(0xff6b,"HALFWIDTH KATAKANA LETTER SMALL O"));
        data.insert(std::make_pair(0xff6c,"HALFWIDTH KATAKANA LETTER SMALL YA"));
        data.insert(std::make_pair(0xff6d,"HALFWIDTH KATAKANA LETTER SMALL YU"));
        data.insert(std::make_pair(0xff6e,"HALFWIDTH KATAKANA LETTER SMALL YO"));
        data.insert(std::make_pair(0xff6f,"HALFWIDTH KATAKANA LETTER SMALL TU"));
        data.insert(std::make_pair(0xff70,"HALFWIDTH KATAKANA-HIRAGANA PROLONGED SOUND MARK"));
        data.insert(std::make_pair(0xff71,"HALFWIDTH KATAKANA LETTER A"));
        data.insert(std::make_pair(0xff72,"HALFWIDTH KATAKANA LETTER I"));
        data.insert(std::make_pair(0xff73,"HALFWIDTH KATAKANA LETTER U"));
        data.insert(std::make_pair(0xff74,"HALFWIDTH KATAKANA LETTER E"));
        data.insert(std::make_pair(0xff75,"HALFWIDTH KATAKANA LETTER O"));
        data.insert(std::make_pair(0xff76,"HALFWIDTH KATAKANA LETTER KA"));
        data.insert(std::make_pair(0xff77,"HALFWIDTH KATAKANA LETTER KI"));
        data.insert(std::make_pair(0xff78,"HALFWIDTH KATAKANA LETTER KU"));
        data.insert(std::make_pair(0xff79,"HALFWIDTH KATAKANA LETTER KE"));
        data.insert(std::make_pair(0xff7a,"HALFWIDTH KATAKANA LETTER KO"));
        data.insert(std::make_pair(0xff7b,"HALFWIDTH KATAKANA LETTER SA"));
        data.insert(std::make_pair(0xff7c,"HALFWIDTH KATAKANA LETTER SI"));
        data.insert(std::make_pair(0xff7d,"HALFWIDTH KATAKANA LETTER SU"));
        data.insert(std::make_pair(0xff7e,"HALFWIDTH KATAKANA LETTER SE"));
        data.insert(std::make_pair(0xff7f,"HALFWIDTH KATAKANA LETTER SO"));
        data.insert(std::make_pair(0xff80,"HALFWIDTH KATAKANA LETTER TA"));
        data.insert(std::make_pair(0xff81,"HALFWIDTH KATAKANA LETTER TI"));
        data.insert(std::make_pair(0xff82,"HALFWIDTH KATAKANA LETTER TU"));
        data.insert(std::make_pair(0xff83,"HALFWIDTH KATAKANA LETTER TE"));
        data.insert(std::make_pair(0xff84,"HALFWIDTH KATAKANA LETTER TO"));
        data.insert(std::make_pair(0xff85,"HALFWIDTH KATAKANA LETTER NA"));
        data.insert(std::make_pair(0xff86,"HALFWIDTH KATAKANA LETTER NI"));
        data.insert(std::make_pair(0xff87,"HALFWIDTH KATAKANA LETTER NU"));
        data.insert(std::make_pair(0xff88,"HALFWIDTH KATAKANA LETTER NE"));
        data.insert(std::make_pair(0xff89,"HALFWIDTH KATAKANA LETTER NO"));
        data.insert(std::make_pair(0xff8a,"HALFWIDTH KATAKANA LETTER HA"));
        data.insert(std::make_pair(0xff8b,"HALFWIDTH KATAKANA LETTER HI"));
        data.insert(std::make_pair(0xff8c,"HALFWIDTH KATAKANA LETTER HU"));
        data.insert(std::make_pair(0xff8d,"HALFWIDTH KATAKANA LETTER HE"));
        data.insert(std::make_pair(0xff8e,"HALFWIDTH KATAKANA LETTER HO"));
        data.insert(std::make_pair(0xff8f,"HALFWIDTH KATAKANA LETTER MA"));
        data.insert(std::make_pair(0xff90,"HALFWIDTH KATAKANA LETTER MI"));
        data.insert(std::make_pair(0xff91,"HALFWIDTH KATAKANA LETTER MU"));
        data.insert(std::make_pair(0xff92,"HALFWIDTH KATAKANA LETTER ME"));
        data.insert(std::make_pair(0xff93,"HALFWIDTH KATAKANA LETTER MO"));
        data.insert(std::make_pair(0xff94,"HALFWIDTH KATAKANA LETTER YA"));
        data.insert(std::make_pair(0xff95,"HALFWIDTH KATAKANA LETTER YU"));
        data.insert(std::make_pair(0xff96,"HALFWIDTH KATAKANA LETTER YO"));
        data.insert(std::make_pair(0xff97,"HALFWIDTH KATAKANA LETTER RA"));
        data.insert(std::make_pair(0xff98,"HALFWIDTH KATAKANA LETTER RI"));
        data.insert(std::make_pair(0xff99,"HALFWIDTH KATAKANA LETTER RU"));
        data.insert(std::make_pair(0xff9a,"HALFWIDTH KATAKANA LETTER RE"));
        data.insert(std::make_pair(0xff9b,"HALFWIDTH KATAKANA LETTER RO"));
        data.insert(std::make_pair(0xff9c,"HALFWIDTH KATAKANA LETTER WA"));
        data.insert(std::make_pair(0xff9d,"HALFWIDTH KATAKANA LETTER N"));
        data.insert(std::make_pair(0xff9e,"HALFWIDTH KATAKANA VOICED SOUND MARK"));
        data.insert(std::make_pair(0xff9f,"HALFWIDTH KATAKANA SEMI-VOICED SOUND MARK"));
        data.insert(std::make_pair(0xffa0,"HALFWIDTH HANGUL FILLER"));
        data.insert(std::make_pair(0xffa1,"HALFWIDTH HANGUL LETTER KIYEOK"));
        data.insert(std::make_pair(0xffa2,"HALFWIDTH HANGUL LETTER SSANGKIYEOK"));
        data.insert(std::make_pair(0xffa3,"HALFWIDTH HANGUL LETTER KIYEOK-SIOS"));
        data.insert(std::make_pair(0xffa4,"HALFWIDTH HANGUL LETTER NIEUN"));
        data.insert(std::make_pair(0xffa5,"HALFWIDTH HANGUL LETTER NIEUN-CIEUC"));
        data.insert(std::make_pair(0xffa6,"HALFWIDTH HANGUL LETTER NIEUN-HIEUH"));
        data.insert(std::make_pair(0xffa7,"HALFWIDTH HANGUL LETTER TIKEUT"));
        data.insert(std::make_pair(0xffa8,"HALFWIDTH HANGUL LETTER SSANGTIKEUT"));
        data.insert(std::make_pair(0xffa9,"HALFWIDTH HANGUL LETTER RIEUL"));
        data.insert(std::make_pair(0xffaa,"HALFWIDTH HANGUL LETTER RIEUL-KIYEOK"));
        data.insert(std::make_pair(0xffab,"HALFWIDTH HANGUL LETTER RIEUL-MIEUM"));
        data.insert(std::make_pair(0xffac,"HALFWIDTH HANGUL LETTER RIEUL-PIEUP"));
        data.insert(std::make_pair(0xffad,"HALFWIDTH HANGUL LETTER RIEUL-SIOS"));
        data.insert(std::make_pair(0xffae,"HALFWIDTH HANGUL LETTER RIEUL-THIEUTH"));
        data.insert(std::make_pair(0xffaf,"HALFWIDTH HANGUL LETTER RIEUL-PHIEUPH"));
        data.insert(std::make_pair(0xffb0,"HALFWIDTH HANGUL LETTER RIEUL-HIEUH"));
        data.insert(std::make_pair(0xffb1,"HALFWIDTH HANGUL LETTER MIEUM"));
        data.insert(std::make_pair(0xffb2,"HALFWIDTH HANGUL LETTER PIEUP"));
        data.insert(std::make_pair(0xffb3,"HALFWIDTH HANGUL LETTER SSANGPIEUP"));
        data.insert(std::make_pair(0xffb4,"HALFWIDTH HANGUL LETTER PIEUP-SIOS"));
        data.insert(std::make_pair(0xffb5,"HALFWIDTH HANGUL LETTER SIOS"));
        data.insert(std::make_pair(0xffb6,"HALFWIDTH HANGUL LETTER SSANGSIOS"));
        data.insert(std::make_pair(0xffb7,"HALFWIDTH HANGUL LETTER IEUNG"));
        data.insert(std::make_pair(0xffb8,"HALFWIDTH HANGUL LETTER CIEUC"));
        data.insert(std::make_pair(0xffb9,"HALFWIDTH HANGUL LETTER SSANGCIEUC"));
        data.insert(std::make_pair(0xffba,"HALFWIDTH HANGUL LETTER CHIEUCH"));
        data.insert(std::make_pair(0xffbb,"HALFWIDTH HANGUL LETTER KHIEUKH"));
        data.insert(std::make_pair(0xffbc,"HALFWIDTH HANGUL LETTER THIEUTH"));
        data.insert(std::make_pair(0xffbd,"HALFWIDTH HANGUL LETTER PHIEUPH"));
        data.insert(std::make_pair(0xffbe,"HALFWIDTH HANGUL LETTER HIEUH"));
        data.insert(std::make_pair(0xffc2,"HALFWIDTH HANGUL LETTER A"));
        data.insert(std::make_pair(0xffc3,"HALFWIDTH HANGUL LETTER AE"));
        data.insert(std::make_pair(0xffc4,"HALFWIDTH HANGUL LETTER YA"));
        data.insert(std::make_pair(0xffc5,"HALFWIDTH HANGUL LETTER YAE"));
        data.insert(std::make_pair(0xffc6,"HALFWIDTH HANGUL LETTER EO"));
        data.insert(std::make_pair(0xffc7,"HALFWIDTH HANGUL LETTER E"));
        data.insert(std::make_pair(0xffca,"HALFWIDTH HANGUL LETTER YEO"));
        data.insert(std::make_pair(0xffcb,"HALFWIDTH HANGUL LETTER YE"));
        data.insert(std::make_pair(0xffcc,"HALFWIDTH HANGUL LETTER O"));
        data.insert(std::make_pair(0xffcd,"HALFWIDTH HANGUL LETTER WA"));
        data.insert(std::make_pair(0xffce,"HALFWIDTH HANGUL LETTER WAE"));
        data.insert(std::make_pair(0xffcf,"HALFWIDTH HANGUL LETTER OE"));
        data.insert(std::make_pair(0xffd2,"HALFWIDTH HANGUL LETTER YO"));
        data.insert(std::make_pair(0xffd3,"HALFWIDTH HANGUL LETTER U"));
        data.insert(std::make_pair(0xffd4,"HALFWIDTH HANGUL LETTER WEO"));
        data.insert(std::make_pair(0xffd5,"HALFWIDTH HANGUL LETTER WE"));
        data.insert(std::make_pair(0xffd6,"HALFWIDTH HANGUL LETTER WI"));
        data.insert(std::make_pair(0xffd7,"HALFWIDTH HANGUL LETTER YU"));
        data.insert(std::make_pair(0xffda,"HALFWIDTH HANGUL LETTER EU"));
        data.insert(std::make_pair(0xffdb,"HALFWIDTH HANGUL LETTER YI"));
        data.insert(std::make_pair(0xffdc,"HALFWIDTH HANGUL LETTER I"));
        data.insert(std::make_pair(0xffe0,"FULLWIDTH CENT SIGN"));
        data.insert(std::make_pair(0xffe1,"FULLWIDTH POUND SIGN"));
        data.insert(std::make_pair(0xffe2,"FULLWIDTH NOT SIGN"));
        data.insert(std::make_pair(0xffe3,"FULLWIDTH MACRON"));
        data.insert(std::make_pair(0xffe4,"FULLWIDTH BROKEN BAR"));
        data.insert(std::make_pair(0xffe5,"FULLWIDTH YEN SIGN"));
        data.insert(std::make_pair(0xffe6,"FULLWIDTH WON SIGN"));
        data.insert(std::make_pair(0xffe8,"HALFWIDTH FORMS LIGHT VERTICAL"));
        data.insert(std::make_pair(0xffe9,"HALFWIDTH LEFTWARDS ARROW"));
        data.insert(std::make_pair(0xffea,"HALFWIDTH UPWARDS ARROW"));
        data.insert(std::make_pair(0xffeb,"HALFWIDTH RIGHTWARDS ARROW"));
        data.insert(std::make_pair(0xffec,"HALFWIDTH DOWNWARDS ARROW"));
        data.insert(std::make_pair(0xffed,"HALFWIDTH BLACK SQUARE"));
        data.insert(std::make_pair(0xffee,"HALFWIDTH WHITE CIRCLE"));
        data.insert(std::make_pair(0xfff9,"INTERLINEAR ANNOTATION ANCHOR"));
        data.insert(std::make_pair(0xfffa,"INTERLINEAR ANNOTATION SEPARATOR"));
        data.insert(std::make_pair(0xfffb,"INTERLINEAR ANNOTATION TERMINATOR"));
        data.insert(std::make_pair(0xfffc,"OBJECT REPLACEMENT CHARACTER"));
        data.insert(std::make_pair(0xfffd,"REPLACEMENT CHARACTER"));
        data.insert(std::make_pair(0x10000,"LINEAR B SYLLABLE B008 A"));
        data.insert(std::make_pair(0x10001,"LINEAR B SYLLABLE B038 E"));
        data.insert(std::make_pair(0x10002,"LINEAR B SYLLABLE B028 I"));
        data.insert(std::make_pair(0x10003,"LINEAR B SYLLABLE B061 O"));
        data.insert(std::make_pair(0x10004,"LINEAR B SYLLABLE B010 U"));
        data.insert(std::make_pair(0x10005,"LINEAR B SYLLABLE B001 DA"));
        data.insert(std::make_pair(0x10006,"LINEAR B SYLLABLE B045 DE"));
        data.insert(std::make_pair(0x10007,"LINEAR B SYLLABLE B007 DI"));
        data.insert(std::make_pair(0x10008,"LINEAR B SYLLABLE B014 DO"));
        data.insert(std::make_pair(0x10009,"LINEAR B SYLLABLE B051 DU"));
        data.insert(std::make_pair(0x1000a,"LINEAR B SYLLABLE B057 JA"));
        data.insert(std::make_pair(0x1000b,"LINEAR B SYLLABLE B046 JE"));
        data.insert(std::make_pair(0x1000d,"LINEAR B SYLLABLE B036 JO"));
        data.insert(std::make_pair(0x1000e,"LINEAR B SYLLABLE B065 JU"));
        data.insert(std::make_pair(0x1000f,"LINEAR B SYLLABLE B077 KA"));
        data.insert(std::make_pair(0x10010,"LINEAR B SYLLABLE B044 KE"));
        data.insert(std::make_pair(0x10011,"LINEAR B SYLLABLE B067 KI"));
        data.insert(std::make_pair(0x10012,"LINEAR B SYLLABLE B070 KO"));
        data.insert(std::make_pair(0x10013,"LINEAR B SYLLABLE B081 KU"));
        data.insert(std::make_pair(0x10014,"LINEAR B SYLLABLE B080 MA"));
        data.insert(std::make_pair(0x10015,"LINEAR B SYLLABLE B013 ME"));
        data.insert(std::make_pair(0x10016,"LINEAR B SYLLABLE B073 MI"));
        data.insert(std::make_pair(0x10017,"LINEAR B SYLLABLE B015 MO"));
        data.insert(std::make_pair(0x10018,"LINEAR B SYLLABLE B023 MU"));
        data.insert(std::make_pair(0x10019,"LINEAR B SYLLABLE B006 NA"));
        data.insert(std::make_pair(0x1001a,"LINEAR B SYLLABLE B024 NE"));
        data.insert(std::make_pair(0x1001b,"LINEAR B SYLLABLE B030 NI"));
        data.insert(std::make_pair(0x1001c,"LINEAR B SYLLABLE B052 NO"));
        data.insert(std::make_pair(0x1001d,"LINEAR B SYLLABLE B055 NU"));
        data.insert(std::make_pair(0x1001e,"LINEAR B SYLLABLE B003 PA"));
        data.insert(std::make_pair(0x1001f,"LINEAR B SYLLABLE B072 PE"));
        data.insert(std::make_pair(0x10020,"LINEAR B SYLLABLE B039 PI"));
        data.insert(std::make_pair(0x10021,"LINEAR B SYLLABLE B011 PO"));
        data.insert(std::make_pair(0x10022,"LINEAR B SYLLABLE B050 PU"));
        data.insert(std::make_pair(0x10023,"LINEAR B SYLLABLE B016 QA"));
        data.insert(std::make_pair(0x10024,"LINEAR B SYLLABLE B078 QE"));
        data.insert(std::make_pair(0x10025,"LINEAR B SYLLABLE B021 QI"));
        data.insert(std::make_pair(0x10026,"LINEAR B SYLLABLE B032 QO"));
        data.insert(std::make_pair(0x10028,"LINEAR B SYLLABLE B060 RA"));
        data.insert(std::make_pair(0x10029,"LINEAR B SYLLABLE B027 RE"));
        data.insert(std::make_pair(0x1002a,"LINEAR B SYLLABLE B053 RI"));
        data.insert(std::make_pair(0x1002b,"LINEAR B SYLLABLE B002 RO"));
        data.insert(std::make_pair(0x1002c,"LINEAR B SYLLABLE B026 RU"));
        data.insert(std::make_pair(0x1002d,"LINEAR B SYLLABLE B031 SA"));
        data.insert(std::make_pair(0x1002e,"LINEAR B SYLLABLE B009 SE"));
        data.insert(std::make_pair(0x1002f,"LINEAR B SYLLABLE B041 SI"));
        data.insert(std::make_pair(0x10030,"LINEAR B SYLLABLE B012 SO"));
        data.insert(std::make_pair(0x10031,"LINEAR B SYLLABLE B058 SU"));
        data.insert(std::make_pair(0x10032,"LINEAR B SYLLABLE B059 TA"));
        data.insert(std::make_pair(0x10033,"LINEAR B SYLLABLE B004 TE"));
        data.insert(std::make_pair(0x10034,"LINEAR B SYLLABLE B037 TI"));
        data.insert(std::make_pair(0x10035,"LINEAR B SYLLABLE B005 TO"));
        data.insert(std::make_pair(0x10036,"LINEAR B SYLLABLE B069 TU"));
        data.insert(std::make_pair(0x10037,"LINEAR B SYLLABLE B054 WA"));
        data.insert(std::make_pair(0x10038,"LINEAR B SYLLABLE B075 WE"));
        data.insert(std::make_pair(0x10039,"LINEAR B SYLLABLE B040 WI"));
        data.insert(std::make_pair(0x1003a,"LINEAR B SYLLABLE B042 WO"));
        data.insert(std::make_pair(0x1003c,"LINEAR B SYLLABLE B017 ZA"));
        data.insert(std::make_pair(0x1003d,"LINEAR B SYLLABLE B074 ZE"));
        data.insert(std::make_pair(0x1003f,"LINEAR B SYLLABLE B020 ZO"));
        data.insert(std::make_pair(0x10040,"LINEAR B SYLLABLE B025 A2"));
        data.insert(std::make_pair(0x10041,"LINEAR B SYLLABLE B043 A3"));
        data.insert(std::make_pair(0x10042,"LINEAR B SYLLABLE B085 AU"));
        data.insert(std::make_pair(0x10043,"LINEAR B SYLLABLE B071 DWE"));
        data.insert(std::make_pair(0x10044,"LINEAR B SYLLABLE B090 DWO"));
        data.insert(std::make_pair(0x10045,"LINEAR B SYLLABLE B048 NWA"));
        data.insert(std::make_pair(0x10046,"LINEAR B SYLLABLE B029 PU2"));
        data.insert(std::make_pair(0x10047,"LINEAR B SYLLABLE B062 PTE"));
        data.insert(std::make_pair(0x10048,"LINEAR B SYLLABLE B076 RA2"));
        data.insert(std::make_pair(0x10049,"LINEAR B SYLLABLE B033 RA3"));
        data.insert(std::make_pair(0x1004a,"LINEAR B SYLLABLE B068 RO2"));
        data.insert(std::make_pair(0x1004b,"LINEAR B SYLLABLE B066 TA2"));
        data.insert(std::make_pair(0x1004c,"LINEAR B SYLLABLE B087 TWE"));
        data.insert(std::make_pair(0x1004d,"LINEAR B SYLLABLE B091 TWO"));
        data.insert(std::make_pair(0x10050,"LINEAR B SYMBOL B018"));
        data.insert(std::make_pair(0x10051,"LINEAR B SYMBOL B019"));
        data.insert(std::make_pair(0x10052,"LINEAR B SYMBOL B022"));
        data.insert(std::make_pair(0x10053,"LINEAR B SYMBOL B034"));
        data.insert(std::make_pair(0x10054,"LINEAR B SYMBOL B047"));
        data.insert(std::make_pair(0x10055,"LINEAR B SYMBOL B049"));
        data.insert(std::make_pair(0x10056,"LINEAR B SYMBOL B056"));
        data.insert(std::make_pair(0x10057,"LINEAR B SYMBOL B063"));
        data.insert(std::make_pair(0x10058,"LINEAR B SYMBOL B064"));
        data.insert(std::make_pair(0x10059,"LINEAR B SYMBOL B079"));
        data.insert(std::make_pair(0x1005a,"LINEAR B SYMBOL B082"));
        data.insert(std::make_pair(0x1005b,"LINEAR B SYMBOL B083"));
        data.insert(std::make_pair(0x1005c,"LINEAR B SYMBOL B086"));
        data.insert(std::make_pair(0x1005d,"LINEAR B SYMBOL B089"));
        data.insert(std::make_pair(0x10080,"LINEAR B IDEOGRAM B100 MAN"));
        data.insert(std::make_pair(0x10081,"LINEAR B IDEOGRAM B102 WOMAN"));
        data.insert(std::make_pair(0x10082,"LINEAR B IDEOGRAM B104 DEER"));
        data.insert(std::make_pair(0x10083,"LINEAR B IDEOGRAM B105 EQUID"));
        data.insert(std::make_pair(0x10084,"LINEAR B IDEOGRAM B105F MARE"));
        data.insert(std::make_pair(0x10085,"LINEAR B IDEOGRAM B105M STALLION"));
        data.insert(std::make_pair(0x10086,"LINEAR B IDEOGRAM B106F EWE"));
        data.insert(std::make_pair(0x10087,"LINEAR B IDEOGRAM B106M RAM"));
        data.insert(std::make_pair(0x10088,"LINEAR B IDEOGRAM B107F SHE-GOAT"));
        data.insert(std::make_pair(0x10089,"LINEAR B IDEOGRAM B107M HE-GOAT"));
        data.insert(std::make_pair(0x1008a,"LINEAR B IDEOGRAM B108F SOW"));
        data.insert(std::make_pair(0x1008b,"LINEAR B IDEOGRAM B108M BOAR"));
        data.insert(std::make_pair(0x1008c,"LINEAR B IDEOGRAM B109F COW"));
        data.insert(std::make_pair(0x1008d,"LINEAR B IDEOGRAM B109M BULL"));
        data.insert(std::make_pair(0x1008e,"LINEAR B IDEOGRAM B120 WHEAT"));
        data.insert(std::make_pair(0x1008f,"LINEAR B IDEOGRAM B121 BARLEY"));
        data.insert(std::make_pair(0x10090,"LINEAR B IDEOGRAM B122 OLIVE"));
        data.insert(std::make_pair(0x10091,"LINEAR B IDEOGRAM B123 SPICE"));
        data.insert(std::make_pair(0x10092,"LINEAR B IDEOGRAM B125 CYPERUS"));
        data.insert(std::make_pair(0x10093,"LINEAR B MONOGRAM B127 KAPO"));
        data.insert(std::make_pair(0x10094,"LINEAR B MONOGRAM B128 KANAKO"));
        data.insert(std::make_pair(0x10095,"LINEAR B IDEOGRAM B130 OIL"));
        data.insert(std::make_pair(0x10096,"LINEAR B IDEOGRAM B131 WINE"));
        data.insert(std::make_pair(0x10097,"LINEAR B IDEOGRAM B132"));
        data.insert(std::make_pair(0x10098,"LINEAR B MONOGRAM B133 AREPA"));
        data.insert(std::make_pair(0x10099,"LINEAR B MONOGRAM B135 MERI"));
        data.insert(std::make_pair(0x1009a,"LINEAR B IDEOGRAM B140 BRONZE"));
        data.insert(std::make_pair(0x1009b,"LINEAR B IDEOGRAM B141 GOLD"));
        data.insert(std::make_pair(0x1009c,"LINEAR B IDEOGRAM B142"));
        data.insert(std::make_pair(0x1009d,"LINEAR B IDEOGRAM B145 WOOL"));
        data.insert(std::make_pair(0x1009e,"LINEAR B IDEOGRAM B146"));
        data.insert(std::make_pair(0x1009f,"LINEAR B IDEOGRAM B150"));
        data.insert(std::make_pair(0x100a0,"LINEAR B IDEOGRAM B151 HORN"));
        data.insert(std::make_pair(0x100a1,"LINEAR B IDEOGRAM B152"));
        data.insert(std::make_pair(0x100a2,"LINEAR B IDEOGRAM B153"));
        data.insert(std::make_pair(0x100a3,"LINEAR B IDEOGRAM B154"));
        data.insert(std::make_pair(0x100a4,"LINEAR B MONOGRAM B156 TURO2"));
        data.insert(std::make_pair(0x100a5,"LINEAR B IDEOGRAM B157"));
        data.insert(std::make_pair(0x100a6,"LINEAR B IDEOGRAM B158"));
        data.insert(std::make_pair(0x100a7,"LINEAR B IDEOGRAM B159 CLOTH"));
        data.insert(std::make_pair(0x100a8,"LINEAR B IDEOGRAM B160"));
        data.insert(std::make_pair(0x100a9,"LINEAR B IDEOGRAM B161"));
        data.insert(std::make_pair(0x100aa,"LINEAR B IDEOGRAM B162 GARMENT"));
        data.insert(std::make_pair(0x100ab,"LINEAR B IDEOGRAM B163 ARMOUR"));
        data.insert(std::make_pair(0x100ac,"LINEAR B IDEOGRAM B164"));
        data.insert(std::make_pair(0x100ad,"LINEAR B IDEOGRAM B165"));
        data.insert(std::make_pair(0x100ae,"LINEAR B IDEOGRAM B166"));
        data.insert(std::make_pair(0x100af,"LINEAR B IDEOGRAM B167"));
        data.insert(std::make_pair(0x100b0,"LINEAR B IDEOGRAM B168"));
        data.insert(std::make_pair(0x100b1,"LINEAR B IDEOGRAM B169"));
        data.insert(std::make_pair(0x100b2,"LINEAR B IDEOGRAM B170"));
        data.insert(std::make_pair(0x100b3,"LINEAR B IDEOGRAM B171"));
        data.insert(std::make_pair(0x100b4,"LINEAR B IDEOGRAM B172"));
        data.insert(std::make_pair(0x100b5,"LINEAR B IDEOGRAM B173 MONTH"));
        data.insert(std::make_pair(0x100b6,"LINEAR B IDEOGRAM B174"));
        data.insert(std::make_pair(0x100b7,"LINEAR B IDEOGRAM B176 TREE"));
        data.insert(std::make_pair(0x100b8,"LINEAR B IDEOGRAM B177"));
        data.insert(std::make_pair(0x100b9,"LINEAR B IDEOGRAM B178"));
        data.insert(std::make_pair(0x100ba,"LINEAR B IDEOGRAM B179"));
        data.insert(std::make_pair(0x100bb,"LINEAR B IDEOGRAM B180"));
        data.insert(std::make_pair(0x100bc,"LINEAR B IDEOGRAM B181"));
        data.insert(std::make_pair(0x100bd,"LINEAR B IDEOGRAM B182"));
        data.insert(std::make_pair(0x100be,"LINEAR B IDEOGRAM B183"));
        data.insert(std::make_pair(0x100bf,"LINEAR B IDEOGRAM B184"));
        data.insert(std::make_pair(0x100c0,"LINEAR B IDEOGRAM B185"));
        data.insert(std::make_pair(0x100c1,"LINEAR B IDEOGRAM B189"));
        data.insert(std::make_pair(0x100c2,"LINEAR B IDEOGRAM B190"));
        data.insert(std::make_pair(0x100c3,"LINEAR B IDEOGRAM B191 HELMET"));
        data.insert(std::make_pair(0x100c4,"LINEAR B IDEOGRAM B220 FOOTSTOOL"));
        data.insert(std::make_pair(0x100c5,"LINEAR B IDEOGRAM B225 BATHTUB"));
        data.insert(std::make_pair(0x100c6,"LINEAR B IDEOGRAM B230 SPEAR"));
        data.insert(std::make_pair(0x100c7,"LINEAR B IDEOGRAM B231 ARROW"));
        data.insert(std::make_pair(0x100c8,"LINEAR B IDEOGRAM B232"));
        data.insert(std::make_pair(0x100c9,"LINEAR B IDEOGRAM B233 SWORD"));
        data.insert(std::make_pair(0x100ca,"LINEAR B IDEOGRAM B234"));
        data.insert(std::make_pair(0x100cb,"LINEAR B IDEOGRAM B236"));
        data.insert(std::make_pair(0x100cc,"LINEAR B IDEOGRAM B240 WHEELED CHARIOT"));
        data.insert(std::make_pair(0x100cd,"LINEAR B IDEOGRAM B241 CHARIOT"));
        data.insert(std::make_pair(0x100ce,"LINEAR B IDEOGRAM B242 CHARIOT FRAME"));
        data.insert(std::make_pair(0x100cf,"LINEAR B IDEOGRAM B243 WHEEL"));
        data.insert(std::make_pair(0x100d0,"LINEAR B IDEOGRAM B245"));
        data.insert(std::make_pair(0x100d1,"LINEAR B IDEOGRAM B246"));
        data.insert(std::make_pair(0x100d2,"LINEAR B MONOGRAM B247 DIPTE"));
        data.insert(std::make_pair(0x100d3,"LINEAR B IDEOGRAM B248"));
        data.insert(std::make_pair(0x100d4,"LINEAR B IDEOGRAM B249"));
        data.insert(std::make_pair(0x100d5,"LINEAR B IDEOGRAM B251"));
        data.insert(std::make_pair(0x100d6,"LINEAR B IDEOGRAM B252"));
        data.insert(std::make_pair(0x100d7,"LINEAR B IDEOGRAM B253"));
        data.insert(std::make_pair(0x100d8,"LINEAR B IDEOGRAM B254 DART"));
        data.insert(std::make_pair(0x100d9,"LINEAR B IDEOGRAM B255"));
        data.insert(std::make_pair(0x100da,"LINEAR B IDEOGRAM B256"));
        data.insert(std::make_pair(0x100db,"LINEAR B IDEOGRAM B257"));
        data.insert(std::make_pair(0x100dc,"LINEAR B IDEOGRAM B258"));
        data.insert(std::make_pair(0x100dd,"LINEAR B IDEOGRAM B259"));
        data.insert(std::make_pair(0x100de,"LINEAR B IDEOGRAM VESSEL B155"));
        data.insert(std::make_pair(0x100df,"LINEAR B IDEOGRAM VESSEL B200"));
        data.insert(std::make_pair(0x100e0,"LINEAR B IDEOGRAM VESSEL B201"));
        data.insert(std::make_pair(0x100e1,"LINEAR B IDEOGRAM VESSEL B202"));
        data.insert(std::make_pair(0x100e2,"LINEAR B IDEOGRAM VESSEL B203"));
        data.insert(std::make_pair(0x100e3,"LINEAR B IDEOGRAM VESSEL B204"));
        data.insert(std::make_pair(0x100e4,"LINEAR B IDEOGRAM VESSEL B205"));
        data.insert(std::make_pair(0x100e5,"LINEAR B IDEOGRAM VESSEL B206"));
        data.insert(std::make_pair(0x100e6,"LINEAR B IDEOGRAM VESSEL B207"));
        data.insert(std::make_pair(0x100e7,"LINEAR B IDEOGRAM VESSEL B208"));
        data.insert(std::make_pair(0x100e8,"LINEAR B IDEOGRAM VESSEL B209"));
        data.insert(std::make_pair(0x100e9,"LINEAR B IDEOGRAM VESSEL B210"));
        data.insert(std::make_pair(0x100ea,"LINEAR B IDEOGRAM VESSEL B211"));
        data.insert(std::make_pair(0x100eb,"LINEAR B IDEOGRAM VESSEL B212"));
        data.insert(std::make_pair(0x100ec,"LINEAR B IDEOGRAM VESSEL B213"));
        data.insert(std::make_pair(0x100ed,"LINEAR B IDEOGRAM VESSEL B214"));
        data.insert(std::make_pair(0x100ee,"LINEAR B IDEOGRAM VESSEL B215"));
        data.insert(std::make_pair(0x100ef,"LINEAR B IDEOGRAM VESSEL B216"));
        data.insert(std::make_pair(0x100f0,"LINEAR B IDEOGRAM VESSEL B217"));
        data.insert(std::make_pair(0x100f1,"LINEAR B IDEOGRAM VESSEL B218"));
        data.insert(std::make_pair(0x100f2,"LINEAR B IDEOGRAM VESSEL B219"));
        data.insert(std::make_pair(0x100f3,"LINEAR B IDEOGRAM VESSEL B221"));
        data.insert(std::make_pair(0x100f4,"LINEAR B IDEOGRAM VESSEL B222"));
        data.insert(std::make_pair(0x100f5,"LINEAR B IDEOGRAM VESSEL B226"));
        data.insert(std::make_pair(0x100f6,"LINEAR B IDEOGRAM VESSEL B227"));
        data.insert(std::make_pair(0x100f7,"LINEAR B IDEOGRAM VESSEL B228"));
        data.insert(std::make_pair(0x100f8,"LINEAR B IDEOGRAM VESSEL B229"));
        data.insert(std::make_pair(0x100f9,"LINEAR B IDEOGRAM VESSEL B250"));
        data.insert(std::make_pair(0x100fa,"LINEAR B IDEOGRAM VESSEL B305"));
        data.insert(std::make_pair(0x10100,"AEGEAN WORD SEPARATOR LINE"));
        data.insert(std::make_pair(0x10101,"AEGEAN WORD SEPARATOR DOT"));
        data.insert(std::make_pair(0x10102,"AEGEAN CHECK MARK"));
        data.insert(std::make_pair(0x10107,"AEGEAN NUMBER ONE"));
        data.insert(std::make_pair(0x10108,"AEGEAN NUMBER TWO"));
        data.insert(std::make_pair(0x10109,"AEGEAN NUMBER THREE"));
        data.insert(std::make_pair(0x1010a,"AEGEAN NUMBER FOUR"));
        data.insert(std::make_pair(0x1010b,"AEGEAN NUMBER FIVE"));
        data.insert(std::make_pair(0x1010c,"AEGEAN NUMBER SIX"));
        data.insert(std::make_pair(0x1010d,"AEGEAN NUMBER SEVEN"));
        data.insert(std::make_pair(0x1010e,"AEGEAN NUMBER EIGHT"));
        data.insert(std::make_pair(0x1010f,"AEGEAN NUMBER NINE"));
        data.insert(std::make_pair(0x10110,"AEGEAN NUMBER TEN"));
        data.insert(std::make_pair(0x10111,"AEGEAN NUMBER TWENTY"));
        data.insert(std::make_pair(0x10112,"AEGEAN NUMBER THIRTY"));
        data.insert(std::make_pair(0x10113,"AEGEAN NUMBER FORTY"));
        data.insert(std::make_pair(0x10114,"AEGEAN NUMBER FIFTY"));
        data.insert(std::make_pair(0x10115,"AEGEAN NUMBER SIXTY"));
        data.insert(std::make_pair(0x10116,"AEGEAN NUMBER SEVENTY"));
        data.insert(std::make_pair(0x10117,"AEGEAN NUMBER EIGHTY"));
        data.insert(std::make_pair(0x10118,"AEGEAN NUMBER NINETY"));
        data.insert(std::make_pair(0x10119,"AEGEAN NUMBER ONE HUNDRED"));
        data.insert(std::make_pair(0x1011a,"AEGEAN NUMBER TWO HUNDRED"));
        data.insert(std::make_pair(0x1011b,"AEGEAN NUMBER THREE HUNDRED"));
        data.insert(std::make_pair(0x1011c,"AEGEAN NUMBER FOUR HUNDRED"));
        data.insert(std::make_pair(0x1011d,"AEGEAN NUMBER FIVE HUNDRED"));
        data.insert(std::make_pair(0x1011e,"AEGEAN NUMBER SIX HUNDRED"));
        data.insert(std::make_pair(0x1011f,"AEGEAN NUMBER SEVEN HUNDRED"));
        data.insert(std::make_pair(0x10120,"AEGEAN NUMBER EIGHT HUNDRED"));
        data.insert(std::make_pair(0x10121,"AEGEAN NUMBER NINE HUNDRED"));
        data.insert(std::make_pair(0x10122,"AEGEAN NUMBER ONE THOUSAND"));
        data.insert(std::make_pair(0x10123,"AEGEAN NUMBER TWO THOUSAND"));
        data.insert(std::make_pair(0x10124,"AEGEAN NUMBER THREE THOUSAND"));
        data.insert(std::make_pair(0x10125,"AEGEAN NUMBER FOUR THOUSAND"));
        data.insert(std::make_pair(0x10126,"AEGEAN NUMBER FIVE THOUSAND"));
        data.insert(std::make_pair(0x10127,"AEGEAN NUMBER SIX THOUSAND"));
        data.insert(std::make_pair(0x10128,"AEGEAN NUMBER SEVEN THOUSAND"));
        data.insert(std::make_pair(0x10129,"AEGEAN NUMBER EIGHT THOUSAND"));
        data.insert(std::make_pair(0x1012a,"AEGEAN NUMBER NINE THOUSAND"));
        data.insert(std::make_pair(0x1012b,"AEGEAN NUMBER TEN THOUSAND"));
        data.insert(std::make_pair(0x1012c,"AEGEAN NUMBER TWENTY THOUSAND"));
        data.insert(std::make_pair(0x1012d,"AEGEAN NUMBER THIRTY THOUSAND"));
        data.insert(std::make_pair(0x1012e,"AEGEAN NUMBER FORTY THOUSAND"));
        data.insert(std::make_pair(0x1012f,"AEGEAN NUMBER FIFTY THOUSAND"));
        data.insert(std::make_pair(0x10130,"AEGEAN NUMBER SIXTY THOUSAND"));
        data.insert(std::make_pair(0x10131,"AEGEAN NUMBER SEVENTY THOUSAND"));
        data.insert(std::make_pair(0x10132,"AEGEAN NUMBER EIGHTY THOUSAND"));
        data.insert(std::make_pair(0x10133,"AEGEAN NUMBER NINETY THOUSAND"));
        data.insert(std::make_pair(0x10137,"AEGEAN WEIGHT BASE UNIT"));
        data.insert(std::make_pair(0x10138,"AEGEAN WEIGHT FIRST SUBUNIT"));
        data.insert(std::make_pair(0x10139,"AEGEAN WEIGHT SECOND SUBUNIT"));
        data.insert(std::make_pair(0x1013a,"AEGEAN WEIGHT THIRD SUBUNIT"));
        data.insert(std::make_pair(0x1013b,"AEGEAN WEIGHT FOURTH SUBUNIT"));
        data.insert(std::make_pair(0x1013c,"AEGEAN DRY MEASURE FIRST SUBUNIT"));
        data.insert(std::make_pair(0x1013d,"AEGEAN LIQUID MEASURE FIRST SUBUNIT"));
        data.insert(std::make_pair(0x1013e,"AEGEAN MEASURE SECOND SUBUNIT"));
        data.insert(std::make_pair(0x1013f,"AEGEAN MEASURE THIRD SUBUNIT"));
        data.insert(std::make_pair(0x10140,"GREEK ACROPHONIC ATTIC ONE QUARTER"));
        data.insert(std::make_pair(0x10141,"GREEK ACROPHONIC ATTIC ONE HALF"));
        data.insert(std::make_pair(0x10142,"GREEK ACROPHONIC ATTIC ONE DRACHMA"));
        data.insert(std::make_pair(0x10143,"GREEK ACROPHONIC ATTIC FIVE"));
        data.insert(std::make_pair(0x10144,"GREEK ACROPHONIC ATTIC FIFTY"));
        data.insert(std::make_pair(0x10145,"GREEK ACROPHONIC ATTIC FIVE HUNDRED"));
        data.insert(std::make_pair(0x10146,"GREEK ACROPHONIC ATTIC FIVE THOUSAND"));
        data.insert(std::make_pair(0x10147,"GREEK ACROPHONIC ATTIC FIFTY THOUSAND"));
        data.insert(std::make_pair(0x10148,"GREEK ACROPHONIC ATTIC FIVE TALENTS"));
        data.insert(std::make_pair(0x10149,"GREEK ACROPHONIC ATTIC TEN TALENTS"));
        data.insert(std::make_pair(0x1014a,"GREEK ACROPHONIC ATTIC FIFTY TALENTS"));
        data.insert(std::make_pair(0x1014b,"GREEK ACROPHONIC ATTIC ONE HUNDRED TALENTS"));
        data.insert(std::make_pair(0x1014c,"GREEK ACROPHONIC ATTIC FIVE HUNDRED TALENTS"));
        data.insert(std::make_pair(0x1014d,"GREEK ACROPHONIC ATTIC ONE THOUSAND TALENTS"));
        data.insert(std::make_pair(0x1014e,"GREEK ACROPHONIC ATTIC FIVE THOUSAND TALENTS"));
        data.insert(std::make_pair(0x1014f,"GREEK ACROPHONIC ATTIC FIVE STATERS"));
        data.insert(std::make_pair(0x10150,"GREEK ACROPHONIC ATTIC TEN STATERS"));
        data.insert(std::make_pair(0x10151,"GREEK ACROPHONIC ATTIC FIFTY STATERS"));
        data.insert(std::make_pair(0x10152,"GREEK ACROPHONIC ATTIC ONE HUNDRED STATERS"));
        data.insert(std::make_pair(0x10153,"GREEK ACROPHONIC ATTIC FIVE HUNDRED STATERS"));
        data.insert(std::make_pair(0x10154,"GREEK ACROPHONIC ATTIC ONE THOUSAND STATERS"));
        data.insert(std::make_pair(0x10155,"GREEK ACROPHONIC ATTIC TEN THOUSAND STATERS"));
        data.insert(std::make_pair(0x10156,"GREEK ACROPHONIC ATTIC FIFTY THOUSAND STATERS"));
        data.insert(std::make_pair(0x10157,"GREEK ACROPHONIC ATTIC TEN MNAS"));
        data.insert(std::make_pair(0x10158,"GREEK ACROPHONIC HERAEUM ONE PLETHRON"));
        data.insert(std::make_pair(0x10159,"GREEK ACROPHONIC THESPIAN ONE"));
        data.insert(std::make_pair(0x1015a,"GREEK ACROPHONIC HERMIONIAN ONE"));
        data.insert(std::make_pair(0x1015b,"GREEK ACROPHONIC EPIDAUREAN TWO"));
        data.insert(std::make_pair(0x1015c,"GREEK ACROPHONIC THESPIAN TWO"));
        data.insert(std::make_pair(0x1015d,"GREEK ACROPHONIC CYRENAIC TWO DRACHMAS"));
        data.insert(std::make_pair(0x1015e,"GREEK ACROPHONIC EPIDAUREAN TWO DRACHMAS"));
        data.insert(std::make_pair(0x1015f,"GREEK ACROPHONIC TROEZENIAN FIVE"));
        data.insert(std::make_pair(0x10160,"GREEK ACROPHONIC TROEZENIAN TEN"));
        data.insert(std::make_pair(0x10161,"GREEK ACROPHONIC TROEZENIAN TEN ALTERNATE FORM"));
        data.insert(std::make_pair(0x10162,"GREEK ACROPHONIC HERMIONIAN TEN"));
        data.insert(std::make_pair(0x10163,"GREEK ACROPHONIC MESSENIAN TEN"));
        data.insert(std::make_pair(0x10164,"GREEK ACROPHONIC THESPIAN TEN"));
        data.insert(std::make_pair(0x10165,"GREEK ACROPHONIC THESPIAN THIRTY"));
        data.insert(std::make_pair(0x10166,"GREEK ACROPHONIC TROEZENIAN FIFTY"));
        data.insert(std::make_pair(0x10167,"GREEK ACROPHONIC TROEZENIAN FIFTY ALTERNATE FORM"));
        data.insert(std::make_pair(0x10168,"GREEK ACROPHONIC HERMIONIAN FIFTY"));
        data.insert(std::make_pair(0x10169,"GREEK ACROPHONIC THESPIAN FIFTY"));
        data.insert(std::make_pair(0x1016a,"GREEK ACROPHONIC THESPIAN ONE HUNDRED"));
        data.insert(std::make_pair(0x1016b,"GREEK ACROPHONIC THESPIAN THREE HUNDRED"));
        data.insert(std::make_pair(0x1016c,"GREEK ACROPHONIC EPIDAUREAN FIVE HUNDRED"));
        data.insert(std::make_pair(0x1016d,"GREEK ACROPHONIC TROEZENIAN FIVE HUNDRED"));
        data.insert(std::make_pair(0x1016e,"GREEK ACROPHONIC THESPIAN FIVE HUNDRED"));
        data.insert(std::make_pair(0x1016f,"GREEK ACROPHONIC CARYSTIAN FIVE HUNDRED"));
        data.insert(std::make_pair(0x10170,"GREEK ACROPHONIC NAXIAN FIVE HUNDRED"));
        data.insert(std::make_pair(0x10171,"GREEK ACROPHONIC THESPIAN ONE THOUSAND"));
        data.insert(std::make_pair(0x10172,"GREEK ACROPHONIC THESPIAN FIVE THOUSAND"));
        data.insert(std::make_pair(0x10173,"GREEK ACROPHONIC DELPHIC FIVE MNAS"));
        data.insert(std::make_pair(0x10174,"GREEK ACROPHONIC STRATIAN FIFTY MNAS"));
        data.insert(std::make_pair(0x10175,"GREEK ONE HALF SIGN"));
        data.insert(std::make_pair(0x10176,"GREEK ONE HALF SIGN ALTERNATE FORM"));
        data.insert(std::make_pair(0x10177,"GREEK TWO THIRDS SIGN"));
        data.insert(std::make_pair(0x10178,"GREEK THREE QUARTERS SIGN"));
        data.insert(std::make_pair(0x10179,"GREEK YEAR SIGN"));
        data.insert(std::make_pair(0x1017a,"GREEK TALENT SIGN"));
        data.insert(std::make_pair(0x1017b,"GREEK DRACHMA SIGN"));
        data.insert(std::make_pair(0x1017c,"GREEK OBOL SIGN"));
        data.insert(std::make_pair(0x1017d,"GREEK TWO OBOLS SIGN"));
        data.insert(std::make_pair(0x1017e,"GREEK THREE OBOLS SIGN"));
        data.insert(std::make_pair(0x1017f,"GREEK FOUR OBOLS SIGN"));
        data.insert(std::make_pair(0x10180,"GREEK FIVE OBOLS SIGN"));
        data.insert(std::make_pair(0x10181,"GREEK METRETES SIGN"));
        data.insert(std::make_pair(0x10182,"GREEK KYATHOS BASE SIGN"));
        data.insert(std::make_pair(0x10183,"GREEK LITRA SIGN"));
        data.insert(std::make_pair(0x10184,"GREEK OUNKIA SIGN"));
        data.insert(std::make_pair(0x10185,"GREEK XESTES SIGN"));
        data.insert(std::make_pair(0x10186,"GREEK ARTABE SIGN"));
        data.insert(std::make_pair(0x10187,"GREEK AROURA SIGN"));
        data.insert(std::make_pair(0x10188,"GREEK GRAMMA SIGN"));
        data.insert(std::make_pair(0x10189,"GREEK TRYBLION BASE SIGN"));
        data.insert(std::make_pair(0x1018a,"GREEK ZERO SIGN"));
        data.insert(std::make_pair(0x1018b,"GREEK ONE QUARTER SIGN"));
        data.insert(std::make_pair(0x1018c,"GREEK SINUSOID SIGN"));
        data.insert(std::make_pair(0x1018d,"GREEK INDICTION SIGN"));
        data.insert(std::make_pair(0x1018e,"NOMISMA SIGN"));
        data.insert(std::make_pair(0x10190,"ROMAN SEXTANS SIGN"));
        data.insert(std::make_pair(0x10191,"ROMAN UNCIA SIGN"));
        data.insert(std::make_pair(0x10192,"ROMAN SEMUNCIA SIGN"));
        data.insert(std::make_pair(0x10193,"ROMAN SEXTULA SIGN"));
        data.insert(std::make_pair(0x10194,"ROMAN DIMIDIA SEXTULA SIGN"));
        data.insert(std::make_pair(0x10195,"ROMAN SILIQUA SIGN"));
        data.insert(std::make_pair(0x10196,"ROMAN DENARIUS SIGN"));
        data.insert(std::make_pair(0x10197,"ROMAN QUINARIUS SIGN"));
        data.insert(std::make_pair(0x10198,"ROMAN SESTERTIUS SIGN"));
        data.insert(std::make_pair(0x10199,"ROMAN DUPONDIUS SIGN"));
        data.insert(std::make_pair(0x1019a,"ROMAN AS SIGN"));
        data.insert(std::make_pair(0x1019b,"ROMAN CENTURIAL SIGN"));
        data.insert(std::make_pair(0x1019c,"ASCIA SYMBOL"));
        data.insert(std::make_pair(0x101a0,"GREEK SYMBOL TAU RHO"));
        data.insert(std::make_pair(0x101d0,"PHAISTOS DISC SIGN PEDESTRIAN"));
        data.insert(std::make_pair(0x101d1,"PHAISTOS DISC SIGN PLUMED HEAD"));
        data.insert(std::make_pair(0x101d2,"PHAISTOS DISC SIGN TATTOOED HEAD"));
        data.insert(std::make_pair(0x101d3,"PHAISTOS DISC SIGN CAPTIVE"));
        data.insert(std::make_pair(0x101d4,"PHAISTOS DISC SIGN CHILD"));
        data.insert(std::make_pair(0x101d5,"PHAISTOS DISC SIGN WOMAN"));
        data.insert(std::make_pair(0x101d6,"PHAISTOS DISC SIGN HELMET"));
        data.insert(std::make_pair(0x101d7,"PHAISTOS DISC SIGN GAUNTLET"));
        data.insert(std::make_pair(0x101d8,"PHAISTOS DISC SIGN TIARA"));
        data.insert(std::make_pair(0x101d9,"PHAISTOS DISC SIGN ARROW"));
        data.insert(std::make_pair(0x101da,"PHAISTOS DISC SIGN BOW"));
        data.insert(std::make_pair(0x101db,"PHAISTOS DISC SIGN SHIELD"));
        data.insert(std::make_pair(0x101dc,"PHAISTOS DISC SIGN CLUB"));
        data.insert(std::make_pair(0x101dd,"PHAISTOS DISC SIGN MANACLES"));
        data.insert(std::make_pair(0x101de,"PHAISTOS DISC SIGN MATTOCK"));
        data.insert(std::make_pair(0x101df,"PHAISTOS DISC SIGN SAW"));
        data.insert(std::make_pair(0x101e0,"PHAISTOS DISC SIGN LID"));
        data.insert(std::make_pair(0x101e1,"PHAISTOS DISC SIGN BOOMERANG"));
        data.insert(std::make_pair(0x101e2,"PHAISTOS DISC SIGN CARPENTRY PLANE"));
        data.insert(std::make_pair(0x101e3,"PHAISTOS DISC SIGN DOLIUM"));
        data.insert(std::make_pair(0x101e4,"PHAISTOS DISC SIGN COMB"));
        data.insert(std::make_pair(0x101e5,"PHAISTOS DISC SIGN SLING"));
        data.insert(std::make_pair(0x101e6,"PHAISTOS DISC SIGN COLUMN"));
        data.insert(std::make_pair(0x101e7,"PHAISTOS DISC SIGN BEEHIVE"));
        data.insert(std::make_pair(0x101e8,"PHAISTOS DISC SIGN SHIP"));
        data.insert(std::make_pair(0x101e9,"PHAISTOS DISC SIGN HORN"));
        data.insert(std::make_pair(0x101ea,"PHAISTOS DISC SIGN HIDE"));
        data.insert(std::make_pair(0x101eb,"PHAISTOS DISC SIGN BULLS LEG"));
        data.insert(std::make_pair(0x101ec,"PHAISTOS DISC SIGN CAT"));
        data.insert(std::make_pair(0x101ed,"PHAISTOS DISC SIGN RAM"));
        data.insert(std::make_pair(0x101ee,"PHAISTOS DISC SIGN EAGLE"));
        data.insert(std::make_pair(0x101ef,"PHAISTOS DISC SIGN DOVE"));
        data.insert(std::make_pair(0x101f0,"PHAISTOS DISC SIGN TUNNY"));
        data.insert(std::make_pair(0x101f1,"PHAISTOS DISC SIGN BEE"));
        data.insert(std::make_pair(0x101f2,"PHAISTOS DISC SIGN PLANE TREE"));
        data.insert(std::make_pair(0x101f3,"PHAISTOS DISC SIGN VINE"));
        data.insert(std::make_pair(0x101f4,"PHAISTOS DISC SIGN PAPYRUS"));
        data.insert(std::make_pair(0x101f5,"PHAISTOS DISC SIGN ROSETTE"));
        data.insert(std::make_pair(0x101f6,"PHAISTOS DISC SIGN LILY"));
        data.insert(std::make_pair(0x101f7,"PHAISTOS DISC SIGN OX BACK"));
        data.insert(std::make_pair(0x101f8,"PHAISTOS DISC SIGN FLUTE"));
        data.insert(std::make_pair(0x101f9,"PHAISTOS DISC SIGN GRATER"));
        data.insert(std::make_pair(0x101fa,"PHAISTOS DISC SIGN STRAINER"));
        data.insert(std::make_pair(0x101fb,"PHAISTOS DISC SIGN SMALL AXE"));
        data.insert(std::make_pair(0x101fc,"PHAISTOS DISC SIGN WAVY BAND"));
        data.insert(std::make_pair(0x101fd,"PHAISTOS DISC SIGN COMBINING OBLIQUE STROKE"));
        data.insert(std::make_pair(0x10280,"LYCIAN LETTER A"));
        data.insert(std::make_pair(0x10281,"LYCIAN LETTER E"));
        data.insert(std::make_pair(0x10282,"LYCIAN LETTER B"));
        data.insert(std::make_pair(0x10283,"LYCIAN LETTER BH"));
        data.insert(std::make_pair(0x10284,"LYCIAN LETTER G"));
        data.insert(std::make_pair(0x10285,"LYCIAN LETTER D"));
        data.insert(std::make_pair(0x10286,"LYCIAN LETTER I"));
        data.insert(std::make_pair(0x10287,"LYCIAN LETTER W"));
        data.insert(std::make_pair(0x10288,"LYCIAN LETTER Z"));
        data.insert(std::make_pair(0x10289,"LYCIAN LETTER TH"));
        data.insert(std::make_pair(0x1028a,"LYCIAN LETTER J"));
        data.insert(std::make_pair(0x1028b,"LYCIAN LETTER K"));
        data.insert(std::make_pair(0x1028c,"LYCIAN LETTER Q"));
        data.insert(std::make_pair(0x1028d,"LYCIAN LETTER L"));
        data.insert(std::make_pair(0x1028e,"LYCIAN LETTER M"));
        data.insert(std::make_pair(0x1028f,"LYCIAN LETTER N"));
        data.insert(std::make_pair(0x10290,"LYCIAN LETTER MM"));
        data.insert(std::make_pair(0x10291,"LYCIAN LETTER NN"));
        data.insert(std::make_pair(0x10292,"LYCIAN LETTER U"));
        data.insert(std::make_pair(0x10293,"LYCIAN LETTER P"));
        data.insert(std::make_pair(0x10294,"LYCIAN LETTER KK"));
        data.insert(std::make_pair(0x10295,"LYCIAN LETTER R"));
        data.insert(std::make_pair(0x10296,"LYCIAN LETTER S"));
        data.insert(std::make_pair(0x10297,"LYCIAN LETTER T"));
        data.insert(std::make_pair(0x10298,"LYCIAN LETTER TT"));
        data.insert(std::make_pair(0x10299,"LYCIAN LETTER AN"));
        data.insert(std::make_pair(0x1029a,"LYCIAN LETTER EN"));
        data.insert(std::make_pair(0x1029b,"LYCIAN LETTER H"));
        data.insert(std::make_pair(0x1029c,"LYCIAN LETTER X"));
        data.insert(std::make_pair(0x102a0,"CARIAN LETTER A"));
        data.insert(std::make_pair(0x102a1,"CARIAN LETTER P2"));
        data.insert(std::make_pair(0x102a2,"CARIAN LETTER D"));
        data.insert(std::make_pair(0x102a3,"CARIAN LETTER L"));
        data.insert(std::make_pair(0x102a4,"CARIAN LETTER UUU"));
        data.insert(std::make_pair(0x102a5,"CARIAN LETTER R"));
        data.insert(std::make_pair(0x102a6,"CARIAN LETTER LD"));
        data.insert(std::make_pair(0x102a7,"CARIAN LETTER A2"));
        data.insert(std::make_pair(0x102a8,"CARIAN LETTER Q"));
        data.insert(std::make_pair(0x102a9,"CARIAN LETTER B"));
        data.insert(std::make_pair(0x102aa,"CARIAN LETTER M"));
        data.insert(std::make_pair(0x102ab,"CARIAN LETTER O"));
        data.insert(std::make_pair(0x102ac,"CARIAN LETTER D2"));
        data.insert(std::make_pair(0x102ad,"CARIAN LETTER T"));
        data.insert(std::make_pair(0x102ae,"CARIAN LETTER SH"));
        data.insert(std::make_pair(0x102af,"CARIAN LETTER SH2"));
        data.insert(std::make_pair(0x102b0,"CARIAN LETTER S"));
        data.insert(std::make_pair(0x102b1,"CARIAN LETTER C-18"));
        data.insert(std::make_pair(0x102b2,"CARIAN LETTER U"));
        data.insert(std::make_pair(0x102b3,"CARIAN LETTER NN"));
        data.insert(std::make_pair(0x102b4,"CARIAN LETTER X"));
        data.insert(std::make_pair(0x102b5,"CARIAN LETTER N"));
        data.insert(std::make_pair(0x102b6,"CARIAN LETTER TT2"));
        data.insert(std::make_pair(0x102b7,"CARIAN LETTER P"));
        data.insert(std::make_pair(0x102b8,"CARIAN LETTER SS"));
        data.insert(std::make_pair(0x102b9,"CARIAN LETTER I"));
        data.insert(std::make_pair(0x102ba,"CARIAN LETTER E"));
        data.insert(std::make_pair(0x102bb,"CARIAN LETTER UUUU"));
        data.insert(std::make_pair(0x102bc,"CARIAN LETTER K"));
        data.insert(std::make_pair(0x102bd,"CARIAN LETTER K2"));
        data.insert(std::make_pair(0x102be,"CARIAN LETTER ND"));
        data.insert(std::make_pair(0x102bf,"CARIAN LETTER UU"));
        data.insert(std::make_pair(0x102c0,"CARIAN LETTER G"));
        data.insert(std::make_pair(0x102c1,"CARIAN LETTER G2"));
        data.insert(std::make_pair(0x102c2,"CARIAN LETTER ST"));
        data.insert(std::make_pair(0x102c3,"CARIAN LETTER ST2"));
        data.insert(std::make_pair(0x102c4,"CARIAN LETTER NG"));
        data.insert(std::make_pair(0x102c5,"CARIAN LETTER II"));
        data.insert(std::make_pair(0x102c6,"CARIAN LETTER C-39"));
        data.insert(std::make_pair(0x102c7,"CARIAN LETTER TT"));
        data.insert(std::make_pair(0x102c8,"CARIAN LETTER UUU2"));
        data.insert(std::make_pair(0x102c9,"CARIAN LETTER RR"));
        data.insert(std::make_pair(0x102ca,"CARIAN LETTER MB"));
        data.insert(std::make_pair(0x102cb,"CARIAN LETTER MB2"));
        data.insert(std::make_pair(0x102cc,"CARIAN LETTER MB3"));
        data.insert(std::make_pair(0x102cd,"CARIAN LETTER MB4"));
        data.insert(std::make_pair(0x102ce,"CARIAN LETTER LD2"));
        data.insert(std::make_pair(0x102cf,"CARIAN LETTER E2"));
        data.insert(std::make_pair(0x102d0,"CARIAN LETTER UUU3"));
        data.insert(std::make_pair(0x102e0,"COPTIC EPACT THOUSANDS MARK"));
        data.insert(std::make_pair(0x102e1,"COPTIC EPACT DIGIT ONE"));
        data.insert(std::make_pair(0x102e2,"COPTIC EPACT DIGIT TWO"));
        data.insert(std::make_pair(0x102e3,"COPTIC EPACT DIGIT THREE"));
        data.insert(std::make_pair(0x102e4,"COPTIC EPACT DIGIT FOUR"));
        data.insert(std::make_pair(0x102e5,"COPTIC EPACT DIGIT FIVE"));
        data.insert(std::make_pair(0x102e6,"COPTIC EPACT DIGIT SIX"));
        data.insert(std::make_pair(0x102e7,"COPTIC EPACT DIGIT SEVEN"));
        data.insert(std::make_pair(0x102e8,"COPTIC EPACT DIGIT EIGHT"));
        data.insert(std::make_pair(0x102e9,"COPTIC EPACT DIGIT NINE"));
        data.insert(std::make_pair(0x102ea,"COPTIC EPACT NUMBER TEN"));
        data.insert(std::make_pair(0x102eb,"COPTIC EPACT NUMBER TWENTY"));
        data.insert(std::make_pair(0x102ec,"COPTIC EPACT NUMBER THIRTY"));
        data.insert(std::make_pair(0x102ed,"COPTIC EPACT NUMBER FORTY"));
        data.insert(std::make_pair(0x102ee,"COPTIC EPACT NUMBER FIFTY"));
        data.insert(std::make_pair(0x102ef,"COPTIC EPACT NUMBER SIXTY"));
        data.insert(std::make_pair(0x102f0,"COPTIC EPACT NUMBER SEVENTY"));
        data.insert(std::make_pair(0x102f1,"COPTIC EPACT NUMBER EIGHTY"));
        data.insert(std::make_pair(0x102f2,"COPTIC EPACT NUMBER NINETY"));
        data.insert(std::make_pair(0x102f3,"COPTIC EPACT NUMBER ONE HUNDRED"));
        data.insert(std::make_pair(0x102f4,"COPTIC EPACT NUMBER TWO HUNDRED"));
        data.insert(std::make_pair(0x102f5,"COPTIC EPACT NUMBER THREE HUNDRED"));
        data.insert(std::make_pair(0x102f6,"COPTIC EPACT NUMBER FOUR HUNDRED"));
        data.insert(std::make_pair(0x102f7,"COPTIC EPACT NUMBER FIVE HUNDRED"));
        data.insert(std::make_pair(0x102f8,"COPTIC EPACT NUMBER SIX HUNDRED"));
        data.insert(std::make_pair(0x102f9,"COPTIC EPACT NUMBER SEVEN HUNDRED"));
        data.insert(std::make_pair(0x102fa,"COPTIC EPACT NUMBER EIGHT HUNDRED"));
        data.insert(std::make_pair(0x102fb,"COPTIC EPACT NUMBER NINE HUNDRED"));
        data.insert(std::make_pair(0x10300,"OLD ITALIC LETTER A"));
        data.insert(std::make_pair(0x10301,"OLD ITALIC LETTER BE"));
        data.insert(std::make_pair(0x10302,"OLD ITALIC LETTER KE"));
        data.insert(std::make_pair(0x10303,"OLD ITALIC LETTER DE"));
        data.insert(std::make_pair(0x10304,"OLD ITALIC LETTER E"));
        data.insert(std::make_pair(0x10305,"OLD ITALIC LETTER VE"));
        data.insert(std::make_pair(0x10306,"OLD ITALIC LETTER ZE"));
        data.insert(std::make_pair(0x10307,"OLD ITALIC LETTER HE"));
        data.insert(std::make_pair(0x10308,"OLD ITALIC LETTER THE"));
        data.insert(std::make_pair(0x10309,"OLD ITALIC LETTER I"));
        data.insert(std::make_pair(0x1030a,"OLD ITALIC LETTER KA"));
        data.insert(std::make_pair(0x1030b,"OLD ITALIC LETTER EL"));
        data.insert(std::make_pair(0x1030c,"OLD ITALIC LETTER EM"));
        data.insert(std::make_pair(0x1030d,"OLD ITALIC LETTER EN"));
        data.insert(std::make_pair(0x1030e,"OLD ITALIC LETTER ESH"));
        data.insert(std::make_pair(0x1030f,"OLD ITALIC LETTER O"));
        data.insert(std::make_pair(0x10310,"OLD ITALIC LETTER PE"));
        data.insert(std::make_pair(0x10311,"OLD ITALIC LETTER SHE"));
        data.insert(std::make_pair(0x10312,"OLD ITALIC LETTER KU"));
        data.insert(std::make_pair(0x10313,"OLD ITALIC LETTER ER"));
        data.insert(std::make_pair(0x10314,"OLD ITALIC LETTER ES"));
        data.insert(std::make_pair(0x10315,"OLD ITALIC LETTER TE"));
        data.insert(std::make_pair(0x10316,"OLD ITALIC LETTER U"));
        data.insert(std::make_pair(0x10317,"OLD ITALIC LETTER EKS"));
        data.insert(std::make_pair(0x10318,"OLD ITALIC LETTER PHE"));
        data.insert(std::make_pair(0x10319,"OLD ITALIC LETTER KHE"));
        data.insert(std::make_pair(0x1031a,"OLD ITALIC LETTER EF"));
        data.insert(std::make_pair(0x1031b,"OLD ITALIC LETTER ERS"));
        data.insert(std::make_pair(0x1031c,"OLD ITALIC LETTER CHE"));
        data.insert(std::make_pair(0x1031d,"OLD ITALIC LETTER II"));
        data.insert(std::make_pair(0x1031e,"OLD ITALIC LETTER UU"));
        data.insert(std::make_pair(0x1031f,"OLD ITALIC LETTER ESS"));
        data.insert(std::make_pair(0x10320,"OLD ITALIC NUMERAL ONE"));
        data.insert(std::make_pair(0x10321,"OLD ITALIC NUMERAL FIVE"));
        data.insert(std::make_pair(0x10322,"OLD ITALIC NUMERAL TEN"));
        data.insert(std::make_pair(0x10323,"OLD ITALIC NUMERAL FIFTY"));
        data.insert(std::make_pair(0x1032d,"OLD ITALIC LETTER YE"));
        data.insert(std::make_pair(0x1032e,"OLD ITALIC LETTER NORTHERN TSE"));
        data.insert(std::make_pair(0x1032f,"OLD ITALIC LETTER SOUTHERN TSE"));
        data.insert(std::make_pair(0x10330,"GOTHIC LETTER AHSA"));
        data.insert(std::make_pair(0x10331,"GOTHIC LETTER BAIRKAN"));
        data.insert(std::make_pair(0x10332,"GOTHIC LETTER GIBA"));
        data.insert(std::make_pair(0x10333,"GOTHIC LETTER DAGS"));
        data.insert(std::make_pair(0x10334,"GOTHIC LETTER AIHVUS"));
        data.insert(std::make_pair(0x10335,"GOTHIC LETTER QAIRTHRA"));
        data.insert(std::make_pair(0x10336,"GOTHIC LETTER IUJA"));
        data.insert(std::make_pair(0x10337,"GOTHIC LETTER HAGL"));
        data.insert(std::make_pair(0x10338,"GOTHIC LETTER THIUTH"));
        data.insert(std::make_pair(0x10339,"GOTHIC LETTER EIS"));
        data.insert(std::make_pair(0x1033a,"GOTHIC LETTER KUSMA"));
        data.insert(std::make_pair(0x1033b,"GOTHIC LETTER LAGUS"));
        data.insert(std::make_pair(0x1033c,"GOTHIC LETTER MANNA"));
        data.insert(std::make_pair(0x1033d,"GOTHIC LETTER NAUTHS"));
        data.insert(std::make_pair(0x1033e,"GOTHIC LETTER JER"));
        data.insert(std::make_pair(0x1033f,"GOTHIC LETTER URUS"));
        data.insert(std::make_pair(0x10340,"GOTHIC LETTER PAIRTHRA"));
        data.insert(std::make_pair(0x10341,"GOTHIC LETTER NINETY"));
        data.insert(std::make_pair(0x10342,"GOTHIC LETTER RAIDA"));
        data.insert(std::make_pair(0x10343,"GOTHIC LETTER SAUIL"));
        data.insert(std::make_pair(0x10344,"GOTHIC LETTER TEIWS"));
        data.insert(std::make_pair(0x10345,"GOTHIC LETTER WINJA"));
        data.insert(std::make_pair(0x10346,"GOTHIC LETTER FAIHU"));
        data.insert(std::make_pair(0x10347,"GOTHIC LETTER IGGWS"));
        data.insert(std::make_pair(0x10348,"GOTHIC LETTER HWAIR"));
        data.insert(std::make_pair(0x10349,"GOTHIC LETTER OTHAL"));
        data.insert(std::make_pair(0x1034a,"GOTHIC LETTER NINE HUNDRED"));
        data.insert(std::make_pair(0x10350,"OLD PERMIC LETTER AN"));
        data.insert(std::make_pair(0x10351,"OLD PERMIC LETTER BUR"));
        data.insert(std::make_pair(0x10352,"OLD PERMIC LETTER GAI"));
        data.insert(std::make_pair(0x10353,"OLD PERMIC LETTER DOI"));
        data.insert(std::make_pair(0x10354,"OLD PERMIC LETTER E"));
        data.insert(std::make_pair(0x10355,"OLD PERMIC LETTER ZHOI"));
        data.insert(std::make_pair(0x10356,"OLD PERMIC LETTER DZHOI"));
        data.insert(std::make_pair(0x10357,"OLD PERMIC LETTER ZATA"));
        data.insert(std::make_pair(0x10358,"OLD PERMIC LETTER DZITA"));
        data.insert(std::make_pair(0x10359,"OLD PERMIC LETTER I"));
        data.insert(std::make_pair(0x1035a,"OLD PERMIC LETTER KOKE"));
        data.insert(std::make_pair(0x1035b,"OLD PERMIC LETTER LEI"));
        data.insert(std::make_pair(0x1035c,"OLD PERMIC LETTER MENOE"));
        data.insert(std::make_pair(0x1035d,"OLD PERMIC LETTER NENOE"));
        data.insert(std::make_pair(0x1035e,"OLD PERMIC LETTER VOOI"));
        data.insert(std::make_pair(0x1035f,"OLD PERMIC LETTER PEEI"));
        data.insert(std::make_pair(0x10360,"OLD PERMIC LETTER REI"));
        data.insert(std::make_pair(0x10361,"OLD PERMIC LETTER SII"));
        data.insert(std::make_pair(0x10362,"OLD PERMIC LETTER TAI"));
        data.insert(std::make_pair(0x10363,"OLD PERMIC LETTER U"));
        data.insert(std::make_pair(0x10364,"OLD PERMIC LETTER CHERY"));
        data.insert(std::make_pair(0x10365,"OLD PERMIC LETTER SHOOI"));
        data.insert(std::make_pair(0x10366,"OLD PERMIC LETTER SHCHOOI"));
        data.insert(std::make_pair(0x10367,"OLD PERMIC LETTER YRY"));
        data.insert(std::make_pair(0x10368,"OLD PERMIC LETTER YERU"));
        data.insert(std::make_pair(0x10369,"OLD PERMIC LETTER O"));
        data.insert(std::make_pair(0x1036a,"OLD PERMIC LETTER OO"));
        data.insert(std::make_pair(0x1036b,"OLD PERMIC LETTER EF"));
        data.insert(std::make_pair(0x1036c,"OLD PERMIC LETTER HA"));
        data.insert(std::make_pair(0x1036d,"OLD PERMIC LETTER TSIU"));
        data.insert(std::make_pair(0x1036e,"OLD PERMIC LETTER VER"));
        data.insert(std::make_pair(0x1036f,"OLD PERMIC LETTER YER"));
        data.insert(std::make_pair(0x10370,"OLD PERMIC LETTER YERI"));
        data.insert(std::make_pair(0x10371,"OLD PERMIC LETTER YAT"));
        data.insert(std::make_pair(0x10372,"OLD PERMIC LETTER IE"));
        data.insert(std::make_pair(0x10373,"OLD PERMIC LETTER YU"));
        data.insert(std::make_pair(0x10374,"OLD PERMIC LETTER YA"));
        data.insert(std::make_pair(0x10375,"OLD PERMIC LETTER IA"));
        data.insert(std::make_pair(0x10376,"COMBINING OLD PERMIC LETTER AN"));
        data.insert(std::make_pair(0x10377,"COMBINING OLD PERMIC LETTER DOI"));
        data.insert(std::make_pair(0x10378,"COMBINING OLD PERMIC LETTER ZATA"));
        data.insert(std::make_pair(0x10379,"COMBINING OLD PERMIC LETTER NENOE"));
        data.insert(std::make_pair(0x1037a,"COMBINING OLD PERMIC LETTER SII"));
        data.insert(std::make_pair(0x10380,"UGARITIC LETTER ALPA"));
        data.insert(std::make_pair(0x10381,"UGARITIC LETTER BETA"));
        data.insert(std::make_pair(0x10382,"UGARITIC LETTER GAMLA"));
        data.insert(std::make_pair(0x10383,"UGARITIC LETTER KHA"));
        data.insert(std::make_pair(0x10384,"UGARITIC LETTER DELTA"));
        data.insert(std::make_pair(0x10385,"UGARITIC LETTER HO"));
        data.insert(std::make_pair(0x10386,"UGARITIC LETTER WO"));
        data.insert(std::make_pair(0x10387,"UGARITIC LETTER ZETA"));
        data.insert(std::make_pair(0x10388,"UGARITIC LETTER HOTA"));
        data.insert(std::make_pair(0x10389,"UGARITIC LETTER TET"));
        data.insert(std::make_pair(0x1038a,"UGARITIC LETTER YOD"));
        data.insert(std::make_pair(0x1038b,"UGARITIC LETTER KAF"));
        data.insert(std::make_pair(0x1038c,"UGARITIC LETTER SHIN"));
        data.insert(std::make_pair(0x1038d,"UGARITIC LETTER LAMDA"));
        data.insert(std::make_pair(0x1038e,"UGARITIC LETTER MEM"));
        data.insert(std::make_pair(0x1038f,"UGARITIC LETTER DHAL"));
        data.insert(std::make_pair(0x10390,"UGARITIC LETTER NUN"));
        data.insert(std::make_pair(0x10391,"UGARITIC LETTER ZU"));
        data.insert(std::make_pair(0x10392,"UGARITIC LETTER SAMKA"));
        data.insert(std::make_pair(0x10393,"UGARITIC LETTER AIN"));
        data.insert(std::make_pair(0x10394,"UGARITIC LETTER PU"));
        data.insert(std::make_pair(0x10395,"UGARITIC LETTER SADE"));
        data.insert(std::make_pair(0x10396,"UGARITIC LETTER QOPA"));
        data.insert(std::make_pair(0x10397,"UGARITIC LETTER RASHA"));
        data.insert(std::make_pair(0x10398,"UGARITIC LETTER THANNA"));
        data.insert(std::make_pair(0x10399,"UGARITIC LETTER GHAIN"));
        data.insert(std::make_pair(0x1039a,"UGARITIC LETTER TO"));
        data.insert(std::make_pair(0x1039b,"UGARITIC LETTER I"));
        data.insert(std::make_pair(0x1039c,"UGARITIC LETTER U"));
        data.insert(std::make_pair(0x1039d,"UGARITIC LETTER SSU"));
        data.insert(std::make_pair(0x1039f,"UGARITIC WORD DIVIDER"));
        data.insert(std::make_pair(0x103a0,"OLD PERSIAN SIGN A"));
        data.insert(std::make_pair(0x103a1,"OLD PERSIAN SIGN I"));
        data.insert(std::make_pair(0x103a2,"OLD PERSIAN SIGN U"));
        data.insert(std::make_pair(0x103a3,"OLD PERSIAN SIGN KA"));
        data.insert(std::make_pair(0x103a4,"OLD PERSIAN SIGN KU"));
        data.insert(std::make_pair(0x103a5,"OLD PERSIAN SIGN GA"));
        data.insert(std::make_pair(0x103a6,"OLD PERSIAN SIGN GU"));
        data.insert(std::make_pair(0x103a7,"OLD PERSIAN SIGN XA"));
        data.insert(std::make_pair(0x103a8,"OLD PERSIAN SIGN CA"));
        data.insert(std::make_pair(0x103a9,"OLD PERSIAN SIGN JA"));
        data.insert(std::make_pair(0x103aa,"OLD PERSIAN SIGN JI"));
        data.insert(std::make_pair(0x103ab,"OLD PERSIAN SIGN TA"));
        data.insert(std::make_pair(0x103ac,"OLD PERSIAN SIGN TU"));
        data.insert(std::make_pair(0x103ad,"OLD PERSIAN SIGN DA"));
        data.insert(std::make_pair(0x103ae,"OLD PERSIAN SIGN DI"));
        data.insert(std::make_pair(0x103af,"OLD PERSIAN SIGN DU"));
        data.insert(std::make_pair(0x103b0,"OLD PERSIAN SIGN THA"));
        data.insert(std::make_pair(0x103b1,"OLD PERSIAN SIGN PA"));
        data.insert(std::make_pair(0x103b2,"OLD PERSIAN SIGN BA"));
        data.insert(std::make_pair(0x103b3,"OLD PERSIAN SIGN FA"));
        data.insert(std::make_pair(0x103b4,"OLD PERSIAN SIGN NA"));
        data.insert(std::make_pair(0x103b5,"OLD PERSIAN SIGN NU"));
        data.insert(std::make_pair(0x103b6,"OLD PERSIAN SIGN MA"));
        data.insert(std::make_pair(0x103b7,"OLD PERSIAN SIGN MI"));
        data.insert(std::make_pair(0x103b8,"OLD PERSIAN SIGN MU"));
        data.insert(std::make_pair(0x103b9,"OLD PERSIAN SIGN YA"));
        data.insert(std::make_pair(0x103ba,"OLD PERSIAN SIGN VA"));
        data.insert(std::make_pair(0x103bb,"OLD PERSIAN SIGN VI"));
        data.insert(std::make_pair(0x103bc,"OLD PERSIAN SIGN RA"));
        data.insert(std::make_pair(0x103bd,"OLD PERSIAN SIGN RU"));
        data.insert(std::make_pair(0x103be,"OLD PERSIAN SIGN LA"));
        data.insert(std::make_pair(0x103bf,"OLD PERSIAN SIGN SA"));
        data.insert(std::make_pair(0x103c0,"OLD PERSIAN SIGN ZA"));
        data.insert(std::make_pair(0x103c1,"OLD PERSIAN SIGN SHA"));
        data.insert(std::make_pair(0x103c2,"OLD PERSIAN SIGN SSA"));
        data.insert(std::make_pair(0x103c3,"OLD PERSIAN SIGN HA"));
        data.insert(std::make_pair(0x103c8,"OLD PERSIAN SIGN AURAMAZDAA"));
        data.insert(std::make_pair(0x103c9,"OLD PERSIAN SIGN AURAMAZDAA-2"));
        data.insert(std::make_pair(0x103ca,"OLD PERSIAN SIGN AURAMAZDAAHA"));
        data.insert(std::make_pair(0x103cb,"OLD PERSIAN SIGN XSHAAYATHIYA"));
        data.insert(std::make_pair(0x103cc,"OLD PERSIAN SIGN DAHYAAUSH"));
        data.insert(std::make_pair(0x103cd,"OLD PERSIAN SIGN DAHYAAUSH-2"));
        data.insert(std::make_pair(0x103ce,"OLD PERSIAN SIGN BAGA"));
        data.insert(std::make_pair(0x103cf,"OLD PERSIAN SIGN BUUMISH"));
        data.insert(std::make_pair(0x103d0,"OLD PERSIAN WORD DIVIDER"));
        data.insert(std::make_pair(0x103d1,"OLD PERSIAN NUMBER ONE"));
        data.insert(std::make_pair(0x103d2,"OLD PERSIAN NUMBER TWO"));
        data.insert(std::make_pair(0x103d3,"OLD PERSIAN NUMBER TEN"));
        data.insert(std::make_pair(0x103d4,"OLD PERSIAN NUMBER TWENTY"));
        data.insert(std::make_pair(0x103d5,"OLD PERSIAN NUMBER HUNDRED"));
        data.insert(std::make_pair(0x10400,"DESERET CAPITAL LETTER LONG I"));
        data.insert(std::make_pair(0x10401,"DESERET CAPITAL LETTER LONG E"));
        data.insert(std::make_pair(0x10402,"DESERET CAPITAL LETTER LONG A"));
        data.insert(std::make_pair(0x10403,"DESERET CAPITAL LETTER LONG AH"));
        data.insert(std::make_pair(0x10404,"DESERET CAPITAL LETTER LONG O"));
        data.insert(std::make_pair(0x10405,"DESERET CAPITAL LETTER LONG OO"));
        data.insert(std::make_pair(0x10406,"DESERET CAPITAL LETTER SHORT I"));
        data.insert(std::make_pair(0x10407,"DESERET CAPITAL LETTER SHORT E"));
        data.insert(std::make_pair(0x10408,"DESERET CAPITAL LETTER SHORT A"));
        data.insert(std::make_pair(0x10409,"DESERET CAPITAL LETTER SHORT AH"));
        data.insert(std::make_pair(0x1040a,"DESERET CAPITAL LETTER SHORT O"));
        data.insert(std::make_pair(0x1040b,"DESERET CAPITAL LETTER SHORT OO"));
        data.insert(std::make_pair(0x1040c,"DESERET CAPITAL LETTER AY"));
        data.insert(std::make_pair(0x1040d,"DESERET CAPITAL LETTER OW"));
        data.insert(std::make_pair(0x1040e,"DESERET CAPITAL LETTER WU"));
        data.insert(std::make_pair(0x1040f,"DESERET CAPITAL LETTER YEE"));
        data.insert(std::make_pair(0x10410,"DESERET CAPITAL LETTER H"));
        data.insert(std::make_pair(0x10411,"DESERET CAPITAL LETTER PEE"));
        data.insert(std::make_pair(0x10412,"DESERET CAPITAL LETTER BEE"));
        data.insert(std::make_pair(0x10413,"DESERET CAPITAL LETTER TEE"));
        data.insert(std::make_pair(0x10414,"DESERET CAPITAL LETTER DEE"));
        data.insert(std::make_pair(0x10415,"DESERET CAPITAL LETTER CHEE"));
        data.insert(std::make_pair(0x10416,"DESERET CAPITAL LETTER JEE"));
        data.insert(std::make_pair(0x10417,"DESERET CAPITAL LETTER KAY"));
        data.insert(std::make_pair(0x10418,"DESERET CAPITAL LETTER GAY"));
        data.insert(std::make_pair(0x10419,"DESERET CAPITAL LETTER EF"));
        data.insert(std::make_pair(0x1041a,"DESERET CAPITAL LETTER VEE"));
        data.insert(std::make_pair(0x1041b,"DESERET CAPITAL LETTER ETH"));
        data.insert(std::make_pair(0x1041c,"DESERET CAPITAL LETTER THEE"));
        data.insert(std::make_pair(0x1041d,"DESERET CAPITAL LETTER ES"));
        data.insert(std::make_pair(0x1041e,"DESERET CAPITAL LETTER ZEE"));
        data.insert(std::make_pair(0x1041f,"DESERET CAPITAL LETTER ESH"));
        data.insert(std::make_pair(0x10420,"DESERET CAPITAL LETTER ZHEE"));
        data.insert(std::make_pair(0x10421,"DESERET CAPITAL LETTER ER"));
        data.insert(std::make_pair(0x10422,"DESERET CAPITAL LETTER EL"));
        data.insert(std::make_pair(0x10423,"DESERET CAPITAL LETTER EM"));
        data.insert(std::make_pair(0x10424,"DESERET CAPITAL LETTER EN"));
        data.insert(std::make_pair(0x10425,"DESERET CAPITAL LETTER ENG"));
        data.insert(std::make_pair(0x10426,"DESERET CAPITAL LETTER OI"));
        data.insert(std::make_pair(0x10427,"DESERET CAPITAL LETTER EW"));
        data.insert(std::make_pair(0x10428,"DESERET SMALL LETTER LONG I"));
        data.insert(std::make_pair(0x10429,"DESERET SMALL LETTER LONG E"));
        data.insert(std::make_pair(0x1042a,"DESERET SMALL LETTER LONG A"));
        data.insert(std::make_pair(0x1042b,"DESERET SMALL LETTER LONG AH"));
        data.insert(std::make_pair(0x1042c,"DESERET SMALL LETTER LONG O"));
        data.insert(std::make_pair(0x1042d,"DESERET SMALL LETTER LONG OO"));
        data.insert(std::make_pair(0x1042e,"DESERET SMALL LETTER SHORT I"));
        data.insert(std::make_pair(0x1042f,"DESERET SMALL LETTER SHORT E"));
        data.insert(std::make_pair(0x10430,"DESERET SMALL LETTER SHORT A"));
        data.insert(std::make_pair(0x10431,"DESERET SMALL LETTER SHORT AH"));
        data.insert(std::make_pair(0x10432,"DESERET SMALL LETTER SHORT O"));
        data.insert(std::make_pair(0x10433,"DESERET SMALL LETTER SHORT OO"));
        data.insert(std::make_pair(0x10434,"DESERET SMALL LETTER AY"));
        data.insert(std::make_pair(0x10435,"DESERET SMALL LETTER OW"));
        data.insert(std::make_pair(0x10436,"DESERET SMALL LETTER WU"));
        data.insert(std::make_pair(0x10437,"DESERET SMALL LETTER YEE"));
        data.insert(std::make_pair(0x10438,"DESERET SMALL LETTER H"));
        data.insert(std::make_pair(0x10439,"DESERET SMALL LETTER PEE"));
        data.insert(std::make_pair(0x1043a,"DESERET SMALL LETTER BEE"));
        data.insert(std::make_pair(0x1043b,"DESERET SMALL LETTER TEE"));
        data.insert(std::make_pair(0x1043c,"DESERET SMALL LETTER DEE"));
        data.insert(std::make_pair(0x1043d,"DESERET SMALL LETTER CHEE"));
        data.insert(std::make_pair(0x1043e,"DESERET SMALL LETTER JEE"));
        data.insert(std::make_pair(0x1043f,"DESERET SMALL LETTER KAY"));
        data.insert(std::make_pair(0x10440,"DESERET SMALL LETTER GAY"));
        data.insert(std::make_pair(0x10441,"DESERET SMALL LETTER EF"));
        data.insert(std::make_pair(0x10442,"DESERET SMALL LETTER VEE"));
        data.insert(std::make_pair(0x10443,"DESERET SMALL LETTER ETH"));
        data.insert(std::make_pair(0x10444,"DESERET SMALL LETTER THEE"));
        data.insert(std::make_pair(0x10445,"DESERET SMALL LETTER ES"));
        data.insert(std::make_pair(0x10446,"DESERET SMALL LETTER ZEE"));
        data.insert(std::make_pair(0x10447,"DESERET SMALL LETTER ESH"));
        data.insert(std::make_pair(0x10448,"DESERET SMALL LETTER ZHEE"));
        data.insert(std::make_pair(0x10449,"DESERET SMALL LETTER ER"));
        data.insert(std::make_pair(0x1044a,"DESERET SMALL LETTER EL"));
        data.insert(std::make_pair(0x1044b,"DESERET SMALL LETTER EM"));
        data.insert(std::make_pair(0x1044c,"DESERET SMALL LETTER EN"));
        data.insert(std::make_pair(0x1044d,"DESERET SMALL LETTER ENG"));
        data.insert(std::make_pair(0x1044e,"DESERET SMALL LETTER OI"));
        data.insert(std::make_pair(0x1044f,"DESERET SMALL LETTER EW"));
        data.insert(std::make_pair(0x10450,"SHAVIAN LETTER PEEP"));
        data.insert(std::make_pair(0x10451,"SHAVIAN LETTER TOT"));
        data.insert(std::make_pair(0x10452,"SHAVIAN LETTER KICK"));
        data.insert(std::make_pair(0x10453,"SHAVIAN LETTER FEE"));
        data.insert(std::make_pair(0x10454,"SHAVIAN LETTER THIGH"));
        data.insert(std::make_pair(0x10455,"SHAVIAN LETTER SO"));
        data.insert(std::make_pair(0x10456,"SHAVIAN LETTER SURE"));
        data.insert(std::make_pair(0x10457,"SHAVIAN LETTER CHURCH"));
        data.insert(std::make_pair(0x10458,"SHAVIAN LETTER YEA"));
        data.insert(std::make_pair(0x10459,"SHAVIAN LETTER HUNG"));
        data.insert(std::make_pair(0x1045a,"SHAVIAN LETTER BIB"));
        data.insert(std::make_pair(0x1045b,"SHAVIAN LETTER DEAD"));
        data.insert(std::make_pair(0x1045c,"SHAVIAN LETTER GAG"));
        data.insert(std::make_pair(0x1045d,"SHAVIAN LETTER VOW"));
        data.insert(std::make_pair(0x1045e,"SHAVIAN LETTER THEY"));
        data.insert(std::make_pair(0x1045f,"SHAVIAN LETTER ZOO"));
        data.insert(std::make_pair(0x10460,"SHAVIAN LETTER MEASURE"));
        data.insert(std::make_pair(0x10461,"SHAVIAN LETTER JUDGE"));
        data.insert(std::make_pair(0x10462,"SHAVIAN LETTER WOE"));
        data.insert(std::make_pair(0x10463,"SHAVIAN LETTER HA-HA"));
        data.insert(std::make_pair(0x10464,"SHAVIAN LETTER LOLL"));
        data.insert(std::make_pair(0x10465,"SHAVIAN LETTER MIME"));
        data.insert(std::make_pair(0x10466,"SHAVIAN LETTER IF"));
        data.insert(std::make_pair(0x10467,"SHAVIAN LETTER EGG"));
        data.insert(std::make_pair(0x10468,"SHAVIAN LETTER ASH"));
        data.insert(std::make_pair(0x10469,"SHAVIAN LETTER ADO"));
        data.insert(std::make_pair(0x1046a,"SHAVIAN LETTER ON"));
        data.insert(std::make_pair(0x1046b,"SHAVIAN LETTER WOOL"));
        data.insert(std::make_pair(0x1046c,"SHAVIAN LETTER OUT"));
        data.insert(std::make_pair(0x1046d,"SHAVIAN LETTER AH"));
        data.insert(std::make_pair(0x1046e,"SHAVIAN LETTER ROAR"));
        data.insert(std::make_pair(0x1046f,"SHAVIAN LETTER NUN"));
        data.insert(std::make_pair(0x10470,"SHAVIAN LETTER EAT"));
        data.insert(std::make_pair(0x10471,"SHAVIAN LETTER AGE"));
        data.insert(std::make_pair(0x10472,"SHAVIAN LETTER ICE"));
        data.insert(std::make_pair(0x10473,"SHAVIAN LETTER UP"));
        data.insert(std::make_pair(0x10474,"SHAVIAN LETTER OAK"));
        data.insert(std::make_pair(0x10475,"SHAVIAN LETTER OOZE"));
        data.insert(std::make_pair(0x10476,"SHAVIAN LETTER OIL"));
        data.insert(std::make_pair(0x10477,"SHAVIAN LETTER AWE"));
        data.insert(std::make_pair(0x10478,"SHAVIAN LETTER ARE"));
        data.insert(std::make_pair(0x10479,"SHAVIAN LETTER OR"));
        data.insert(std::make_pair(0x1047a,"SHAVIAN LETTER AIR"));
        data.insert(std::make_pair(0x1047b,"SHAVIAN LETTER ERR"));
        data.insert(std::make_pair(0x1047c,"SHAVIAN LETTER ARRAY"));
        data.insert(std::make_pair(0x1047d,"SHAVIAN LETTER EAR"));
        data.insert(std::make_pair(0x1047e,"SHAVIAN LETTER IAN"));
        data.insert(std::make_pair(0x1047f,"SHAVIAN LETTER YEW"));
        data.insert(std::make_pair(0x10480,"OSMANYA LETTER ALEF"));
        data.insert(std::make_pair(0x10481,"OSMANYA LETTER BA"));
        data.insert(std::make_pair(0x10482,"OSMANYA LETTER TA"));
        data.insert(std::make_pair(0x10483,"OSMANYA LETTER JA"));
        data.insert(std::make_pair(0x10484,"OSMANYA LETTER XA"));
        data.insert(std::make_pair(0x10485,"OSMANYA LETTER KHA"));
        data.insert(std::make_pair(0x10486,"OSMANYA LETTER DEEL"));
        data.insert(std::make_pair(0x10487,"OSMANYA LETTER RA"));
        data.insert(std::make_pair(0x10488,"OSMANYA LETTER SA"));
        data.insert(std::make_pair(0x10489,"OSMANYA LETTER SHIIN"));
        data.insert(std::make_pair(0x1048a,"OSMANYA LETTER DHA"));
        data.insert(std::make_pair(0x1048b,"OSMANYA LETTER CAYN"));
        data.insert(std::make_pair(0x1048c,"OSMANYA LETTER GA"));
        data.insert(std::make_pair(0x1048d,"OSMANYA LETTER FA"));
        data.insert(std::make_pair(0x1048e,"OSMANYA LETTER QAAF"));
        data.insert(std::make_pair(0x1048f,"OSMANYA LETTER KAAF"));
        data.insert(std::make_pair(0x10490,"OSMANYA LETTER LAAN"));
        data.insert(std::make_pair(0x10491,"OSMANYA LETTER MIIN"));
        data.insert(std::make_pair(0x10492,"OSMANYA LETTER NUUN"));
        data.insert(std::make_pair(0x10493,"OSMANYA LETTER WAW"));
        data.insert(std::make_pair(0x10494,"OSMANYA LETTER HA"));
        data.insert(std::make_pair(0x10495,"OSMANYA LETTER YA"));
        data.insert(std::make_pair(0x10496,"OSMANYA LETTER A"));
        data.insert(std::make_pair(0x10497,"OSMANYA LETTER E"));
        data.insert(std::make_pair(0x10498,"OSMANYA LETTER I"));
        data.insert(std::make_pair(0x10499,"OSMANYA LETTER O"));
        data.insert(std::make_pair(0x1049a,"OSMANYA LETTER U"));
        data.insert(std::make_pair(0x1049b,"OSMANYA LETTER AA"));
        data.insert(std::make_pair(0x1049c,"OSMANYA LETTER EE"));
        data.insert(std::make_pair(0x1049d,"OSMANYA LETTER OO"));
        data.insert(std::make_pair(0x104a0,"OSMANYA DIGIT ZERO"));
        data.insert(std::make_pair(0x104a1,"OSMANYA DIGIT ONE"));
        data.insert(std::make_pair(0x104a2,"OSMANYA DIGIT TWO"));
        data.insert(std::make_pair(0x104a3,"OSMANYA DIGIT THREE"));
        data.insert(std::make_pair(0x104a4,"OSMANYA DIGIT FOUR"));
        data.insert(std::make_pair(0x104a5,"OSMANYA DIGIT FIVE"));
        data.insert(std::make_pair(0x104a6,"OSMANYA DIGIT SIX"));
        data.insert(std::make_pair(0x104a7,"OSMANYA DIGIT SEVEN"));
        data.insert(std::make_pair(0x104a8,"OSMANYA DIGIT EIGHT"));
        data.insert(std::make_pair(0x104a9,"OSMANYA DIGIT NINE"));
        data.insert(std::make_pair(0x104b0,"OSAGE CAPITAL LETTER A"));
        data.insert(std::make_pair(0x104b1,"OSAGE CAPITAL LETTER AI"));
        data.insert(std::make_pair(0x104b2,"OSAGE CAPITAL LETTER AIN"));
        data.insert(std::make_pair(0x104b3,"OSAGE CAPITAL LETTER AH"));
        data.insert(std::make_pair(0x104b4,"OSAGE CAPITAL LETTER BRA"));
        data.insert(std::make_pair(0x104b5,"OSAGE CAPITAL LETTER CHA"));
        data.insert(std::make_pair(0x104b6,"OSAGE CAPITAL LETTER EHCHA"));
        data.insert(std::make_pair(0x104b7,"OSAGE CAPITAL LETTER E"));
        data.insert(std::make_pair(0x104b8,"OSAGE CAPITAL LETTER EIN"));
        data.insert(std::make_pair(0x104b9,"OSAGE CAPITAL LETTER HA"));
        data.insert(std::make_pair(0x104ba,"OSAGE CAPITAL LETTER HYA"));
        data.insert(std::make_pair(0x104bb,"OSAGE CAPITAL LETTER I"));
        data.insert(std::make_pair(0x104bc,"OSAGE CAPITAL LETTER KA"));
        data.insert(std::make_pair(0x104bd,"OSAGE CAPITAL LETTER EHKA"));
        data.insert(std::make_pair(0x104be,"OSAGE CAPITAL LETTER KYA"));
        data.insert(std::make_pair(0x104bf,"OSAGE CAPITAL LETTER LA"));
        data.insert(std::make_pair(0x104c0,"OSAGE CAPITAL LETTER MA"));
        data.insert(std::make_pair(0x104c1,"OSAGE CAPITAL LETTER NA"));
        data.insert(std::make_pair(0x104c2,"OSAGE CAPITAL LETTER O"));
        data.insert(std::make_pair(0x104c3,"OSAGE CAPITAL LETTER OIN"));
        data.insert(std::make_pair(0x104c4,"OSAGE CAPITAL LETTER PA"));
        data.insert(std::make_pair(0x104c5,"OSAGE CAPITAL LETTER EHPA"));
        data.insert(std::make_pair(0x104c6,"OSAGE CAPITAL LETTER SA"));
        data.insert(std::make_pair(0x104c7,"OSAGE CAPITAL LETTER SHA"));
        data.insert(std::make_pair(0x104c8,"OSAGE CAPITAL LETTER TA"));
        data.insert(std::make_pair(0x104c9,"OSAGE CAPITAL LETTER EHTA"));
        data.insert(std::make_pair(0x104ca,"OSAGE CAPITAL LETTER TSA"));
        data.insert(std::make_pair(0x104cb,"OSAGE CAPITAL LETTER EHTSA"));
        data.insert(std::make_pair(0x104cc,"OSAGE CAPITAL LETTER TSHA"));
        data.insert(std::make_pair(0x104cd,"OSAGE CAPITAL LETTER DHA"));
        data.insert(std::make_pair(0x104ce,"OSAGE CAPITAL LETTER U"));
        data.insert(std::make_pair(0x104cf,"OSAGE CAPITAL LETTER WA"));
        data.insert(std::make_pair(0x104d0,"OSAGE CAPITAL LETTER KHA"));
        data.insert(std::make_pair(0x104d1,"OSAGE CAPITAL LETTER GHA"));
        data.insert(std::make_pair(0x104d2,"OSAGE CAPITAL LETTER ZA"));
        data.insert(std::make_pair(0x104d3,"OSAGE CAPITAL LETTER ZHA"));
        data.insert(std::make_pair(0x104d8,"OSAGE SMALL LETTER A"));
        data.insert(std::make_pair(0x104d9,"OSAGE SMALL LETTER AI"));
        data.insert(std::make_pair(0x104da,"OSAGE SMALL LETTER AIN"));
        data.insert(std::make_pair(0x104db,"OSAGE SMALL LETTER AH"));
        data.insert(std::make_pair(0x104dc,"OSAGE SMALL LETTER BRA"));
        data.insert(std::make_pair(0x104dd,"OSAGE SMALL LETTER CHA"));
        data.insert(std::make_pair(0x104de,"OSAGE SMALL LETTER EHCHA"));
        data.insert(std::make_pair(0x104df,"OSAGE SMALL LETTER E"));
        data.insert(std::make_pair(0x104e0,"OSAGE SMALL LETTER EIN"));
        data.insert(std::make_pair(0x104e1,"OSAGE SMALL LETTER HA"));
        data.insert(std::make_pair(0x104e2,"OSAGE SMALL LETTER HYA"));
        data.insert(std::make_pair(0x104e3,"OSAGE SMALL LETTER I"));
        data.insert(std::make_pair(0x104e4,"OSAGE SMALL LETTER KA"));
        data.insert(std::make_pair(0x104e5,"OSAGE SMALL LETTER EHKA"));
        data.insert(std::make_pair(0x104e6,"OSAGE SMALL LETTER KYA"));
        data.insert(std::make_pair(0x104e7,"OSAGE SMALL LETTER LA"));
        data.insert(std::make_pair(0x104e8,"OSAGE SMALL LETTER MA"));
        data.insert(std::make_pair(0x104e9,"OSAGE SMALL LETTER NA"));
        data.insert(std::make_pair(0x104ea,"OSAGE SMALL LETTER O"));
        data.insert(std::make_pair(0x104eb,"OSAGE SMALL LETTER OIN"));
        data.insert(std::make_pair(0x104ec,"OSAGE SMALL LETTER PA"));
        data.insert(std::make_pair(0x104ed,"OSAGE SMALL LETTER EHPA"));
        data.insert(std::make_pair(0x104ee,"OSAGE SMALL LETTER SA"));
        data.insert(std::make_pair(0x104ef,"OSAGE SMALL LETTER SHA"));
        data.insert(std::make_pair(0x104f0,"OSAGE SMALL LETTER TA"));
        data.insert(std::make_pair(0x104f1,"OSAGE SMALL LETTER EHTA"));
        data.insert(std::make_pair(0x104f2,"OSAGE SMALL LETTER TSA"));
        data.insert(std::make_pair(0x104f3,"OSAGE SMALL LETTER EHTSA"));
        data.insert(std::make_pair(0x104f4,"OSAGE SMALL LETTER TSHA"));
        data.insert(std::make_pair(0x104f5,"OSAGE SMALL LETTER DHA"));
        data.insert(std::make_pair(0x104f6,"OSAGE SMALL LETTER U"));
        data.insert(std::make_pair(0x104f7,"OSAGE SMALL LETTER WA"));
        data.insert(std::make_pair(0x104f8,"OSAGE SMALL LETTER KHA"));
        data.insert(std::make_pair(0x104f9,"OSAGE SMALL LETTER GHA"));
        data.insert(std::make_pair(0x104fa,"OSAGE SMALL LETTER ZA"));
        data.insert(std::make_pair(0x104fb,"OSAGE SMALL LETTER ZHA"));
        data.insert(std::make_pair(0x10500,"ELBASAN LETTER A"));
        data.insert(std::make_pair(0x10501,"ELBASAN LETTER BE"));
        data.insert(std::make_pair(0x10502,"ELBASAN LETTER CE"));
        data.insert(std::make_pair(0x10503,"ELBASAN LETTER CHE"));
        data.insert(std::make_pair(0x10504,"ELBASAN LETTER DE"));
        data.insert(std::make_pair(0x10505,"ELBASAN LETTER NDE"));
        data.insert(std::make_pair(0x10506,"ELBASAN LETTER DHE"));
        data.insert(std::make_pair(0x10507,"ELBASAN LETTER EI"));
        data.insert(std::make_pair(0x10508,"ELBASAN LETTER E"));
        data.insert(std::make_pair(0x10509,"ELBASAN LETTER FE"));
        data.insert(std::make_pair(0x1050a,"ELBASAN LETTER GE"));
        data.insert(std::make_pair(0x1050b,"ELBASAN LETTER GJE"));
        data.insert(std::make_pair(0x1050c,"ELBASAN LETTER HE"));
        data.insert(std::make_pair(0x1050d,"ELBASAN LETTER I"));
        data.insert(std::make_pair(0x1050e,"ELBASAN LETTER JE"));
        data.insert(std::make_pair(0x1050f,"ELBASAN LETTER KE"));
        data.insert(std::make_pair(0x10510,"ELBASAN LETTER LE"));
        data.insert(std::make_pair(0x10511,"ELBASAN LETTER LLE"));
        data.insert(std::make_pair(0x10512,"ELBASAN LETTER ME"));
        data.insert(std::make_pair(0x10513,"ELBASAN LETTER NE"));
        data.insert(std::make_pair(0x10514,"ELBASAN LETTER NA"));
        data.insert(std::make_pair(0x10515,"ELBASAN LETTER NJE"));
        data.insert(std::make_pair(0x10516,"ELBASAN LETTER O"));
        data.insert(std::make_pair(0x10517,"ELBASAN LETTER PE"));
        data.insert(std::make_pair(0x10518,"ELBASAN LETTER QE"));
        data.insert(std::make_pair(0x10519,"ELBASAN LETTER RE"));
        data.insert(std::make_pair(0x1051a,"ELBASAN LETTER RRE"));
        data.insert(std::make_pair(0x1051b,"ELBASAN LETTER SE"));
        data.insert(std::make_pair(0x1051c,"ELBASAN LETTER SHE"));
        data.insert(std::make_pair(0x1051d,"ELBASAN LETTER TE"));
        data.insert(std::make_pair(0x1051e,"ELBASAN LETTER THE"));
        data.insert(std::make_pair(0x1051f,"ELBASAN LETTER U"));
        data.insert(std::make_pair(0x10520,"ELBASAN LETTER VE"));
        data.insert(std::make_pair(0x10521,"ELBASAN LETTER XE"));
        data.insert(std::make_pair(0x10522,"ELBASAN LETTER Y"));
        data.insert(std::make_pair(0x10523,"ELBASAN LETTER ZE"));
        data.insert(std::make_pair(0x10524,"ELBASAN LETTER ZHE"));
        data.insert(std::make_pair(0x10525,"ELBASAN LETTER GHE"));
        data.insert(std::make_pair(0x10526,"ELBASAN LETTER GHAMMA"));
        data.insert(std::make_pair(0x10527,"ELBASAN LETTER KHE"));
        data.insert(std::make_pair(0x10530,"CAUCASIAN ALBANIAN LETTER ALT"));
        data.insert(std::make_pair(0x10531,"CAUCASIAN ALBANIAN LETTER BET"));
        data.insert(std::make_pair(0x10532,"CAUCASIAN ALBANIAN LETTER GIM"));
        data.insert(std::make_pair(0x10533,"CAUCASIAN ALBANIAN LETTER DAT"));
        data.insert(std::make_pair(0x10534,"CAUCASIAN ALBANIAN LETTER EB"));
        data.insert(std::make_pair(0x10535,"CAUCASIAN ALBANIAN LETTER ZARL"));
        data.insert(std::make_pair(0x10536,"CAUCASIAN ALBANIAN LETTER EYN"));
        data.insert(std::make_pair(0x10537,"CAUCASIAN ALBANIAN LETTER ZHIL"));
        data.insert(std::make_pair(0x10538,"CAUCASIAN ALBANIAN LETTER TAS"));
        data.insert(std::make_pair(0x10539,"CAUCASIAN ALBANIAN LETTER CHA"));
        data.insert(std::make_pair(0x1053a,"CAUCASIAN ALBANIAN LETTER YOWD"));
        data.insert(std::make_pair(0x1053b,"CAUCASIAN ALBANIAN LETTER ZHA"));
        data.insert(std::make_pair(0x1053c,"CAUCASIAN ALBANIAN LETTER IRB"));
        data.insert(std::make_pair(0x1053d,"CAUCASIAN ALBANIAN LETTER SHA"));
        data.insert(std::make_pair(0x1053e,"CAUCASIAN ALBANIAN LETTER LAN"));
        data.insert(std::make_pair(0x1053f,"CAUCASIAN ALBANIAN LETTER INYA"));
        data.insert(std::make_pair(0x10540,"CAUCASIAN ALBANIAN LETTER XEYN"));
        data.insert(std::make_pair(0x10541,"CAUCASIAN ALBANIAN LETTER DYAN"));
        data.insert(std::make_pair(0x10542,"CAUCASIAN ALBANIAN LETTER CAR"));
        data.insert(std::make_pair(0x10543,"CAUCASIAN ALBANIAN LETTER JHOX"));
        data.insert(std::make_pair(0x10544,"CAUCASIAN ALBANIAN LETTER KAR"));
        data.insert(std::make_pair(0x10545,"CAUCASIAN ALBANIAN LETTER LYIT"));
        data.insert(std::make_pair(0x10546,"CAUCASIAN ALBANIAN LETTER HEYT"));
        data.insert(std::make_pair(0x10547,"CAUCASIAN ALBANIAN LETTER QAY"));
        data.insert(std::make_pair(0x10548,"CAUCASIAN ALBANIAN LETTER AOR"));
        data.insert(std::make_pair(0x10549,"CAUCASIAN ALBANIAN LETTER CHOY"));
        data.insert(std::make_pair(0x1054a,"CAUCASIAN ALBANIAN LETTER CHI"));
        data.insert(std::make_pair(0x1054b,"CAUCASIAN ALBANIAN LETTER CYAY"));
        data.insert(std::make_pair(0x1054c,"CAUCASIAN ALBANIAN LETTER MAQ"));
        data.insert(std::make_pair(0x1054d,"CAUCASIAN ALBANIAN LETTER QAR"));
        data.insert(std::make_pair(0x1054e,"CAUCASIAN ALBANIAN LETTER NOWC"));
        data.insert(std::make_pair(0x1054f,"CAUCASIAN ALBANIAN LETTER DZYAY"));
        data.insert(std::make_pair(0x10550,"CAUCASIAN ALBANIAN LETTER SHAK"));
        data.insert(std::make_pair(0x10551,"CAUCASIAN ALBANIAN LETTER JAYN"));
        data.insert(std::make_pair(0x10552,"CAUCASIAN ALBANIAN LETTER ON"));
        data.insert(std::make_pair(0x10553,"CAUCASIAN ALBANIAN LETTER TYAY"));
        data.insert(std::make_pair(0x10554,"CAUCASIAN ALBANIAN LETTER FAM"));
        data.insert(std::make_pair(0x10555,"CAUCASIAN ALBANIAN LETTER DZAY"));
        data.insert(std::make_pair(0x10556,"CAUCASIAN ALBANIAN LETTER CHAT"));
        data.insert(std::make_pair(0x10557,"CAUCASIAN ALBANIAN LETTER PEN"));
        data.insert(std::make_pair(0x10558,"CAUCASIAN ALBANIAN LETTER GHEYS"));
        data.insert(std::make_pair(0x10559,"CAUCASIAN ALBANIAN LETTER RAT"));
        data.insert(std::make_pair(0x1055a,"CAUCASIAN ALBANIAN LETTER SEYK"));
        data.insert(std::make_pair(0x1055b,"CAUCASIAN ALBANIAN LETTER VEYZ"));
        data.insert(std::make_pair(0x1055c,"CAUCASIAN ALBANIAN LETTER TIWR"));
        data.insert(std::make_pair(0x1055d,"CAUCASIAN ALBANIAN LETTER SHOY"));
        data.insert(std::make_pair(0x1055e,"CAUCASIAN ALBANIAN LETTER IWN"));
        data.insert(std::make_pair(0x1055f,"CAUCASIAN ALBANIAN LETTER CYAW"));
        data.insert(std::make_pair(0x10560,"CAUCASIAN ALBANIAN LETTER CAYN"));
        data.insert(std::make_pair(0x10561,"CAUCASIAN ALBANIAN LETTER YAYD"));
        data.insert(std::make_pair(0x10562,"CAUCASIAN ALBANIAN LETTER PIWR"));
        data.insert(std::make_pair(0x10563,"CAUCASIAN ALBANIAN LETTER KIW"));
        data.insert(std::make_pair(0x1056f,"CAUCASIAN ALBANIAN CITATION MARK"));
        data.insert(std::make_pair(0x10570,"VITHKUQI CAPITAL LETTER A"));
        data.insert(std::make_pair(0x10571,"VITHKUQI CAPITAL LETTER BBE"));
        data.insert(std::make_pair(0x10572,"VITHKUQI CAPITAL LETTER BE"));
        data.insert(std::make_pair(0x10573,"VITHKUQI CAPITAL LETTER CE"));
        data.insert(std::make_pair(0x10574,"VITHKUQI CAPITAL LETTER CHE"));
        data.insert(std::make_pair(0x10575,"VITHKUQI CAPITAL LETTER DE"));
        data.insert(std::make_pair(0x10576,"VITHKUQI CAPITAL LETTER DHE"));
        data.insert(std::make_pair(0x10577,"VITHKUQI CAPITAL LETTER EI"));
        data.insert(std::make_pair(0x10578,"VITHKUQI CAPITAL LETTER E"));
        data.insert(std::make_pair(0x10579,"VITHKUQI CAPITAL LETTER FE"));
        data.insert(std::make_pair(0x1057a,"VITHKUQI CAPITAL LETTER GA"));
        data.insert(std::make_pair(0x1057c,"VITHKUQI CAPITAL LETTER HA"));
        data.insert(std::make_pair(0x1057d,"VITHKUQI CAPITAL LETTER HHA"));
        data.insert(std::make_pair(0x1057e,"VITHKUQI CAPITAL LETTER I"));
        data.insert(std::make_pair(0x1057f,"VITHKUQI CAPITAL LETTER IJE"));
        data.insert(std::make_pair(0x10580,"VITHKUQI CAPITAL LETTER JE"));
        data.insert(std::make_pair(0x10581,"VITHKUQI CAPITAL LETTER KA"));
        data.insert(std::make_pair(0x10582,"VITHKUQI CAPITAL LETTER LA"));
        data.insert(std::make_pair(0x10583,"VITHKUQI CAPITAL LETTER LLA"));
        data.insert(std::make_pair(0x10584,"VITHKUQI CAPITAL LETTER ME"));
        data.insert(std::make_pair(0x10585,"VITHKUQI CAPITAL LETTER NE"));
        data.insert(std::make_pair(0x10586,"VITHKUQI CAPITAL LETTER NJE"));
        data.insert(std::make_pair(0x10587,"VITHKUQI CAPITAL LETTER O"));
        data.insert(std::make_pair(0x10588,"VITHKUQI CAPITAL LETTER PE"));
        data.insert(std::make_pair(0x10589,"VITHKUQI CAPITAL LETTER QA"));
        data.insert(std::make_pair(0x1058a,"VITHKUQI CAPITAL LETTER RE"));
        data.insert(std::make_pair(0x1058c,"VITHKUQI CAPITAL LETTER SE"));
        data.insert(std::make_pair(0x1058d,"VITHKUQI CAPITAL LETTER SHE"));
        data.insert(std::make_pair(0x1058e,"VITHKUQI CAPITAL LETTER TE"));
        data.insert(std::make_pair(0x1058f,"VITHKUQI CAPITAL LETTER THE"));
        data.insert(std::make_pair(0x10590,"VITHKUQI CAPITAL LETTER U"));
        data.insert(std::make_pair(0x10591,"VITHKUQI CAPITAL LETTER VE"));
        data.insert(std::make_pair(0x10592,"VITHKUQI CAPITAL LETTER XE"));
        data.insert(std::make_pair(0x10594,"VITHKUQI CAPITAL LETTER Y"));
        data.insert(std::make_pair(0x10595,"VITHKUQI CAPITAL LETTER ZE"));
        data.insert(std::make_pair(0x10597,"VITHKUQI SMALL LETTER A"));
        data.insert(std::make_pair(0x10598,"VITHKUQI SMALL LETTER BBE"));
        data.insert(std::make_pair(0x10599,"VITHKUQI SMALL LETTER BE"));
        data.insert(std::make_pair(0x1059a,"VITHKUQI SMALL LETTER CE"));
        data.insert(std::make_pair(0x1059b,"VITHKUQI SMALL LETTER CHE"));
        data.insert(std::make_pair(0x1059c,"VITHKUQI SMALL LETTER DE"));
        data.insert(std::make_pair(0x1059d,"VITHKUQI SMALL LETTER DHE"));
        data.insert(std::make_pair(0x1059e,"VITHKUQI SMALL LETTER EI"));
        data.insert(std::make_pair(0x1059f,"VITHKUQI SMALL LETTER E"));
        data.insert(std::make_pair(0x105a0,"VITHKUQI SMALL LETTER FE"));
        data.insert(std::make_pair(0x105a1,"VITHKUQI SMALL LETTER GA"));
        data.insert(std::make_pair(0x105a3,"VITHKUQI SMALL LETTER HA"));
        data.insert(std::make_pair(0x105a4,"VITHKUQI SMALL LETTER HHA"));
        data.insert(std::make_pair(0x105a5,"VITHKUQI SMALL LETTER I"));
        data.insert(std::make_pair(0x105a6,"VITHKUQI SMALL LETTER IJE"));
        data.insert(std::make_pair(0x105a7,"VITHKUQI SMALL LETTER JE"));
        data.insert(std::make_pair(0x105a8,"VITHKUQI SMALL LETTER KA"));
        data.insert(std::make_pair(0x105a9,"VITHKUQI SMALL LETTER LA"));
        data.insert(std::make_pair(0x105aa,"VITHKUQI SMALL LETTER LLA"));
        data.insert(std::make_pair(0x105ab,"VITHKUQI SMALL LETTER ME"));
        data.insert(std::make_pair(0x105ac,"VITHKUQI SMALL LETTER NE"));
        data.insert(std::make_pair(0x105ad,"VITHKUQI SMALL LETTER NJE"));
        data.insert(std::make_pair(0x105ae,"VITHKUQI SMALL LETTER O"));
        data.insert(std::make_pair(0x105af,"VITHKUQI SMALL LETTER PE"));
        data.insert(std::make_pair(0x105b0,"VITHKUQI SMALL LETTER QA"));
        data.insert(std::make_pair(0x105b1,"VITHKUQI SMALL LETTER RE"));
        data.insert(std::make_pair(0x105b3,"VITHKUQI SMALL LETTER SE"));
        data.insert(std::make_pair(0x105b4,"VITHKUQI SMALL LETTER SHE"));
        data.insert(std::make_pair(0x105b5,"VITHKUQI SMALL LETTER TE"));
        data.insert(std::make_pair(0x105b6,"VITHKUQI SMALL LETTER THE"));
        data.insert(std::make_pair(0x105b7,"VITHKUQI SMALL LETTER U"));
        data.insert(std::make_pair(0x105b8,"VITHKUQI SMALL LETTER VE"));
        data.insert(std::make_pair(0x105b9,"VITHKUQI SMALL LETTER XE"));
        data.insert(std::make_pair(0x105bb,"VITHKUQI SMALL LETTER Y"));
        data.insert(std::make_pair(0x105bc,"VITHKUQI SMALL LETTER ZE"));
        data.insert(std::make_pair(0x10600,"LINEAR A SIGN AB001"));
        data.insert(std::make_pair(0x10601,"LINEAR A SIGN AB002"));
        data.insert(std::make_pair(0x10602,"LINEAR A SIGN AB003"));
        data.insert(std::make_pair(0x10603,"LINEAR A SIGN AB004"));
        data.insert(std::make_pair(0x10604,"LINEAR A SIGN AB005"));
        data.insert(std::make_pair(0x10605,"LINEAR A SIGN AB006"));
        data.insert(std::make_pair(0x10606,"LINEAR A SIGN AB007"));
        data.insert(std::make_pair(0x10607,"LINEAR A SIGN AB008"));
        data.insert(std::make_pair(0x10608,"LINEAR A SIGN AB009"));
        data.insert(std::make_pair(0x10609,"LINEAR A SIGN AB010"));
        data.insert(std::make_pair(0x1060a,"LINEAR A SIGN AB011"));
        data.insert(std::make_pair(0x1060b,"LINEAR A SIGN AB013"));
        data.insert(std::make_pair(0x1060c,"LINEAR A SIGN AB016"));
        data.insert(std::make_pair(0x1060d,"LINEAR A SIGN AB017"));
        data.insert(std::make_pair(0x1060e,"LINEAR A SIGN AB020"));
        data.insert(std::make_pair(0x1060f,"LINEAR A SIGN AB021"));
        data.insert(std::make_pair(0x10610,"LINEAR A SIGN AB021F"));
        data.insert(std::make_pair(0x10611,"LINEAR A SIGN AB021M"));
        data.insert(std::make_pair(0x10612,"LINEAR A SIGN AB022"));
        data.insert(std::make_pair(0x10613,"LINEAR A SIGN AB022F"));
        data.insert(std::make_pair(0x10614,"LINEAR A SIGN AB022M"));
        data.insert(std::make_pair(0x10615,"LINEAR A SIGN AB023"));
        data.insert(std::make_pair(0x10616,"LINEAR A SIGN AB023M"));
        data.insert(std::make_pair(0x10617,"LINEAR A SIGN AB024"));
        data.insert(std::make_pair(0x10618,"LINEAR A SIGN AB026"));
        data.insert(std::make_pair(0x10619,"LINEAR A SIGN AB027"));
        data.insert(std::make_pair(0x1061a,"LINEAR A SIGN AB028"));
        data.insert(std::make_pair(0x1061b,"LINEAR A SIGN A028B"));
        data.insert(std::make_pair(0x1061c,"LINEAR A SIGN AB029"));
        data.insert(std::make_pair(0x1061d,"LINEAR A SIGN AB030"));
        data.insert(std::make_pair(0x1061e,"LINEAR A SIGN AB031"));
        data.insert(std::make_pair(0x1061f,"LINEAR A SIGN AB034"));
        data.insert(std::make_pair(0x10620,"LINEAR A SIGN AB037"));
        data.insert(std::make_pair(0x10621,"LINEAR A SIGN AB038"));
        data.insert(std::make_pair(0x10622,"LINEAR A SIGN AB039"));
        data.insert(std::make_pair(0x10623,"LINEAR A SIGN AB040"));
        data.insert(std::make_pair(0x10624,"LINEAR A SIGN AB041"));
        data.insert(std::make_pair(0x10625,"LINEAR A SIGN AB044"));
        data.insert(std::make_pair(0x10626,"LINEAR A SIGN AB045"));
        data.insert(std::make_pair(0x10627,"LINEAR A SIGN AB046"));
        data.insert(std::make_pair(0x10628,"LINEAR A SIGN AB047"));
        data.insert(std::make_pair(0x10629,"LINEAR A SIGN AB048"));
        data.insert(std::make_pair(0x1062a,"LINEAR A SIGN AB049"));
        data.insert(std::make_pair(0x1062b,"LINEAR A SIGN AB050"));
        data.insert(std::make_pair(0x1062c,"LINEAR A SIGN AB051"));
        data.insert(std::make_pair(0x1062d,"LINEAR A SIGN AB053"));
        data.insert(std::make_pair(0x1062e,"LINEAR A SIGN AB054"));
        data.insert(std::make_pair(0x1062f,"LINEAR A SIGN AB055"));
        data.insert(std::make_pair(0x10630,"LINEAR A SIGN AB056"));
        data.insert(std::make_pair(0x10631,"LINEAR A SIGN AB057"));
        data.insert(std::make_pair(0x10632,"LINEAR A SIGN AB058"));
        data.insert(std::make_pair(0x10633,"LINEAR A SIGN AB059"));
        data.insert(std::make_pair(0x10634,"LINEAR A SIGN AB060"));
        data.insert(std::make_pair(0x10635,"LINEAR A SIGN AB061"));
        data.insert(std::make_pair(0x10636,"LINEAR A SIGN AB065"));
        data.insert(std::make_pair(0x10637,"LINEAR A SIGN AB066"));
        data.insert(std::make_pair(0x10638,"LINEAR A SIGN AB067"));
        data.insert(std::make_pair(0x10639,"LINEAR A SIGN AB069"));
        data.insert(std::make_pair(0x1063a,"LINEAR A SIGN AB070"));
        data.insert(std::make_pair(0x1063b,"LINEAR A SIGN AB073"));
        data.insert(std::make_pair(0x1063c,"LINEAR A SIGN AB074"));
        data.insert(std::make_pair(0x1063d,"LINEAR A SIGN AB076"));
        data.insert(std::make_pair(0x1063e,"LINEAR A SIGN AB077"));
        data.insert(std::make_pair(0x1063f,"LINEAR A SIGN AB078"));
        data.insert(std::make_pair(0x10640,"LINEAR A SIGN AB079"));
        data.insert(std::make_pair(0x10641,"LINEAR A SIGN AB080"));
        data.insert(std::make_pair(0x10642,"LINEAR A SIGN AB081"));
        data.insert(std::make_pair(0x10643,"LINEAR A SIGN AB082"));
        data.insert(std::make_pair(0x10644,"LINEAR A SIGN AB085"));
        data.insert(std::make_pair(0x10645,"LINEAR A SIGN AB086"));
        data.insert(std::make_pair(0x10646,"LINEAR A SIGN AB087"));
        data.insert(std::make_pair(0x10647,"LINEAR A SIGN A100-102"));
        data.insert(std::make_pair(0x10648,"LINEAR A SIGN AB118"));
        data.insert(std::make_pair(0x10649,"LINEAR A SIGN AB120"));
        data.insert(std::make_pair(0x1064a,"LINEAR A SIGN A120B"));
        data.insert(std::make_pair(0x1064b,"LINEAR A SIGN AB122"));
        data.insert(std::make_pair(0x1064c,"LINEAR A SIGN AB123"));
        data.insert(std::make_pair(0x1064d,"LINEAR A SIGN AB131A"));
        data.insert(std::make_pair(0x1064e,"LINEAR A SIGN AB131B"));
        data.insert(std::make_pair(0x1064f,"LINEAR A SIGN A131C"));
        data.insert(std::make_pair(0x10650,"LINEAR A SIGN AB164"));
        data.insert(std::make_pair(0x10651,"LINEAR A SIGN AB171"));
        data.insert(std::make_pair(0x10652,"LINEAR A SIGN AB180"));
        data.insert(std::make_pair(0x10653,"LINEAR A SIGN AB188"));
        data.insert(std::make_pair(0x10654,"LINEAR A SIGN AB191"));
        data.insert(std::make_pair(0x10655,"LINEAR A SIGN A301"));
        data.insert(std::make_pair(0x10656,"LINEAR A SIGN A302"));
        data.insert(std::make_pair(0x10657,"LINEAR A SIGN A303"));
        data.insert(std::make_pair(0x10658,"LINEAR A SIGN A304"));
        data.insert(std::make_pair(0x10659,"LINEAR A SIGN A305"));
        data.insert(std::make_pair(0x1065a,"LINEAR A SIGN A306"));
        data.insert(std::make_pair(0x1065b,"LINEAR A SIGN A307"));
        data.insert(std::make_pair(0x1065c,"LINEAR A SIGN A308"));
        data.insert(std::make_pair(0x1065d,"LINEAR A SIGN A309A"));
        data.insert(std::make_pair(0x1065e,"LINEAR A SIGN A309B"));
        data.insert(std::make_pair(0x1065f,"LINEAR A SIGN A309C"));
        data.insert(std::make_pair(0x10660,"LINEAR A SIGN A310"));
        data.insert(std::make_pair(0x10661,"LINEAR A SIGN A311"));
        data.insert(std::make_pair(0x10662,"LINEAR A SIGN A312"));
        data.insert(std::make_pair(0x10663,"LINEAR A SIGN A313A"));
        data.insert(std::make_pair(0x10664,"LINEAR A SIGN A313B"));
        data.insert(std::make_pair(0x10665,"LINEAR A SIGN A313C"));
        data.insert(std::make_pair(0x10666,"LINEAR A SIGN A314"));
        data.insert(std::make_pair(0x10667,"LINEAR A SIGN A315"));
        data.insert(std::make_pair(0x10668,"LINEAR A SIGN A316"));
        data.insert(std::make_pair(0x10669,"LINEAR A SIGN A317"));
        data.insert(std::make_pair(0x1066a,"LINEAR A SIGN A318"));
        data.insert(std::make_pair(0x1066b,"LINEAR A SIGN A319"));
        data.insert(std::make_pair(0x1066c,"LINEAR A SIGN A320"));
        data.insert(std::make_pair(0x1066d,"LINEAR A SIGN A321"));
        data.insert(std::make_pair(0x1066e,"LINEAR A SIGN A322"));
        data.insert(std::make_pair(0x1066f,"LINEAR A SIGN A323"));
        data.insert(std::make_pair(0x10670,"LINEAR A SIGN A324"));
        data.insert(std::make_pair(0x10671,"LINEAR A SIGN A325"));
        data.insert(std::make_pair(0x10672,"LINEAR A SIGN A326"));
        data.insert(std::make_pair(0x10673,"LINEAR A SIGN A327"));
        data.insert(std::make_pair(0x10674,"LINEAR A SIGN A328"));
        data.insert(std::make_pair(0x10675,"LINEAR A SIGN A329"));
        data.insert(std::make_pair(0x10676,"LINEAR A SIGN A330"));
        data.insert(std::make_pair(0x10677,"LINEAR A SIGN A331"));
        data.insert(std::make_pair(0x10678,"LINEAR A SIGN A332"));
        data.insert(std::make_pair(0x10679,"LINEAR A SIGN A333"));
        data.insert(std::make_pair(0x1067a,"LINEAR A SIGN A334"));
        data.insert(std::make_pair(0x1067b,"LINEAR A SIGN A335"));
        data.insert(std::make_pair(0x1067c,"LINEAR A SIGN A336"));
        data.insert(std::make_pair(0x1067d,"LINEAR A SIGN A337"));
        data.insert(std::make_pair(0x1067e,"LINEAR A SIGN A338"));
        data.insert(std::make_pair(0x1067f,"LINEAR A SIGN A339"));
        data.insert(std::make_pair(0x10680,"LINEAR A SIGN A340"));
        data.insert(std::make_pair(0x10681,"LINEAR A SIGN A341"));
        data.insert(std::make_pair(0x10682,"LINEAR A SIGN A342"));
        data.insert(std::make_pair(0x10683,"LINEAR A SIGN A343"));
        data.insert(std::make_pair(0x10684,"LINEAR A SIGN A344"));
        data.insert(std::make_pair(0x10685,"LINEAR A SIGN A345"));
        data.insert(std::make_pair(0x10686,"LINEAR A SIGN A346"));
        data.insert(std::make_pair(0x10687,"LINEAR A SIGN A347"));
        data.insert(std::make_pair(0x10688,"LINEAR A SIGN A348"));
        data.insert(std::make_pair(0x10689,"LINEAR A SIGN A349"));
        data.insert(std::make_pair(0x1068a,"LINEAR A SIGN A350"));
        data.insert(std::make_pair(0x1068b,"LINEAR A SIGN A351"));
        data.insert(std::make_pair(0x1068c,"LINEAR A SIGN A352"));
        data.insert(std::make_pair(0x1068d,"LINEAR A SIGN A353"));
        data.insert(std::make_pair(0x1068e,"LINEAR A SIGN A354"));
        data.insert(std::make_pair(0x1068f,"LINEAR A SIGN A355"));
        data.insert(std::make_pair(0x10690,"LINEAR A SIGN A356"));
        data.insert(std::make_pair(0x10691,"LINEAR A SIGN A357"));
        data.insert(std::make_pair(0x10692,"LINEAR A SIGN A358"));
        data.insert(std::make_pair(0x10693,"LINEAR A SIGN A359"));
        data.insert(std::make_pair(0x10694,"LINEAR A SIGN A360"));
        data.insert(std::make_pair(0x10695,"LINEAR A SIGN A361"));
        data.insert(std::make_pair(0x10696,"LINEAR A SIGN A362"));
        data.insert(std::make_pair(0x10697,"LINEAR A SIGN A363"));
        data.insert(std::make_pair(0x10698,"LINEAR A SIGN A364"));
        data.insert(std::make_pair(0x10699,"LINEAR A SIGN A365"));
        data.insert(std::make_pair(0x1069a,"LINEAR A SIGN A366"));
        data.insert(std::make_pair(0x1069b,"LINEAR A SIGN A367"));
        data.insert(std::make_pair(0x1069c,"LINEAR A SIGN A368"));
        data.insert(std::make_pair(0x1069d,"LINEAR A SIGN A369"));
        data.insert(std::make_pair(0x1069e,"LINEAR A SIGN A370"));
        data.insert(std::make_pair(0x1069f,"LINEAR A SIGN A371"));
        data.insert(std::make_pair(0x106a0,"LINEAR A SIGN A400-VAS"));
        data.insert(std::make_pair(0x106a1,"LINEAR A SIGN A401-VAS"));
        data.insert(std::make_pair(0x106a2,"LINEAR A SIGN A402-VAS"));
        data.insert(std::make_pair(0x106a3,"LINEAR A SIGN A403-VAS"));
        data.insert(std::make_pair(0x106a4,"LINEAR A SIGN A404-VAS"));
        data.insert(std::make_pair(0x106a5,"LINEAR A SIGN A405-VAS"));
        data.insert(std::make_pair(0x106a6,"LINEAR A SIGN A406-VAS"));
        data.insert(std::make_pair(0x106a7,"LINEAR A SIGN A407-VAS"));
        data.insert(std::make_pair(0x106a8,"LINEAR A SIGN A408-VAS"));
        data.insert(std::make_pair(0x106a9,"LINEAR A SIGN A409-VAS"));
        data.insert(std::make_pair(0x106aa,"LINEAR A SIGN A410-VAS"));
        data.insert(std::make_pair(0x106ab,"LINEAR A SIGN A411-VAS"));
        data.insert(std::make_pair(0x106ac,"LINEAR A SIGN A412-VAS"));
        data.insert(std::make_pair(0x106ad,"LINEAR A SIGN A413-VAS"));
        data.insert(std::make_pair(0x106ae,"LINEAR A SIGN A414-VAS"));
        data.insert(std::make_pair(0x106af,"LINEAR A SIGN A415-VAS"));
        data.insert(std::make_pair(0x106b0,"LINEAR A SIGN A416-VAS"));
        data.insert(std::make_pair(0x106b1,"LINEAR A SIGN A417-VAS"));
        data.insert(std::make_pair(0x106b2,"LINEAR A SIGN A418-VAS"));
        data.insert(std::make_pair(0x106b3,"LINEAR A SIGN A501"));
        data.insert(std::make_pair(0x106b4,"LINEAR A SIGN A502"));
        data.insert(std::make_pair(0x106b5,"LINEAR A SIGN A503"));
        data.insert(std::make_pair(0x106b6,"LINEAR A SIGN A504"));
        data.insert(std::make_pair(0x106b7,"LINEAR A SIGN A505"));
        data.insert(std::make_pair(0x106b8,"LINEAR A SIGN A506"));
        data.insert(std::make_pair(0x106b9,"LINEAR A SIGN A508"));
        data.insert(std::make_pair(0x106ba,"LINEAR A SIGN A509"));
        data.insert(std::make_pair(0x106bb,"LINEAR A SIGN A510"));
        data.insert(std::make_pair(0x106bc,"LINEAR A SIGN A511"));
        data.insert(std::make_pair(0x106bd,"LINEAR A SIGN A512"));
        data.insert(std::make_pair(0x106be,"LINEAR A SIGN A513"));
        data.insert(std::make_pair(0x106bf,"LINEAR A SIGN A515"));
        data.insert(std::make_pair(0x106c0,"LINEAR A SIGN A516"));
        data.insert(std::make_pair(0x106c1,"LINEAR A SIGN A520"));
        data.insert(std::make_pair(0x106c2,"LINEAR A SIGN A521"));
        data.insert(std::make_pair(0x106c3,"LINEAR A SIGN A523"));
        data.insert(std::make_pair(0x106c4,"LINEAR A SIGN A524"));
        data.insert(std::make_pair(0x106c5,"LINEAR A SIGN A525"));
        data.insert(std::make_pair(0x106c6,"LINEAR A SIGN A526"));
        data.insert(std::make_pair(0x106c7,"LINEAR A SIGN A527"));
        data.insert(std::make_pair(0x106c8,"LINEAR A SIGN A528"));
        data.insert(std::make_pair(0x106c9,"LINEAR A SIGN A529"));
        data.insert(std::make_pair(0x106ca,"LINEAR A SIGN A530"));
        data.insert(std::make_pair(0x106cb,"LINEAR A SIGN A531"));
        data.insert(std::make_pair(0x106cc,"LINEAR A SIGN A532"));
        data.insert(std::make_pair(0x106cd,"LINEAR A SIGN A534"));
        data.insert(std::make_pair(0x106ce,"LINEAR A SIGN A535"));
        data.insert(std::make_pair(0x106cf,"LINEAR A SIGN A536"));
        data.insert(std::make_pair(0x106d0,"LINEAR A SIGN A537"));
        data.insert(std::make_pair(0x106d1,"LINEAR A SIGN A538"));
        data.insert(std::make_pair(0x106d2,"LINEAR A SIGN A539"));
        data.insert(std::make_pair(0x106d3,"LINEAR A SIGN A540"));
        data.insert(std::make_pair(0x106d4,"LINEAR A SIGN A541"));
        data.insert(std::make_pair(0x106d5,"LINEAR A SIGN A542"));
        data.insert(std::make_pair(0x106d6,"LINEAR A SIGN A545"));
        data.insert(std::make_pair(0x106d7,"LINEAR A SIGN A547"));
        data.insert(std::make_pair(0x106d8,"LINEAR A SIGN A548"));
        data.insert(std::make_pair(0x106d9,"LINEAR A SIGN A549"));
        data.insert(std::make_pair(0x106da,"LINEAR A SIGN A550"));
        data.insert(std::make_pair(0x106db,"LINEAR A SIGN A551"));
        data.insert(std::make_pair(0x106dc,"LINEAR A SIGN A552"));
        data.insert(std::make_pair(0x106dd,"LINEAR A SIGN A553"));
        data.insert(std::make_pair(0x106de,"LINEAR A SIGN A554"));
        data.insert(std::make_pair(0x106df,"LINEAR A SIGN A555"));
        data.insert(std::make_pair(0x106e0,"LINEAR A SIGN A556"));
        data.insert(std::make_pair(0x106e1,"LINEAR A SIGN A557"));
        data.insert(std::make_pair(0x106e2,"LINEAR A SIGN A559"));
        data.insert(std::make_pair(0x106e3,"LINEAR A SIGN A563"));
        data.insert(std::make_pair(0x106e4,"LINEAR A SIGN A564"));
        data.insert(std::make_pair(0x106e5,"LINEAR A SIGN A565"));
        data.insert(std::make_pair(0x106e6,"LINEAR A SIGN A566"));
        data.insert(std::make_pair(0x106e7,"LINEAR A SIGN A568"));
        data.insert(std::make_pair(0x106e8,"LINEAR A SIGN A569"));
        data.insert(std::make_pair(0x106e9,"LINEAR A SIGN A570"));
        data.insert(std::make_pair(0x106ea,"LINEAR A SIGN A571"));
        data.insert(std::make_pair(0x106eb,"LINEAR A SIGN A572"));
        data.insert(std::make_pair(0x106ec,"LINEAR A SIGN A573"));
        data.insert(std::make_pair(0x106ed,"LINEAR A SIGN A574"));
        data.insert(std::make_pair(0x106ee,"LINEAR A SIGN A575"));
        data.insert(std::make_pair(0x106ef,"LINEAR A SIGN A576"));
        data.insert(std::make_pair(0x106f0,"LINEAR A SIGN A577"));
        data.insert(std::make_pair(0x106f1,"LINEAR A SIGN A578"));
        data.insert(std::make_pair(0x106f2,"LINEAR A SIGN A579"));
        data.insert(std::make_pair(0x106f3,"LINEAR A SIGN A580"));
        data.insert(std::make_pair(0x106f4,"LINEAR A SIGN A581"));
        data.insert(std::make_pair(0x106f5,"LINEAR A SIGN A582"));
        data.insert(std::make_pair(0x106f6,"LINEAR A SIGN A583"));
        data.insert(std::make_pair(0x106f7,"LINEAR A SIGN A584"));
        data.insert(std::make_pair(0x106f8,"LINEAR A SIGN A585"));
        data.insert(std::make_pair(0x106f9,"LINEAR A SIGN A586"));
        data.insert(std::make_pair(0x106fa,"LINEAR A SIGN A587"));
        data.insert(std::make_pair(0x106fb,"LINEAR A SIGN A588"));
        data.insert(std::make_pair(0x106fc,"LINEAR A SIGN A589"));
        data.insert(std::make_pair(0x106fd,"LINEAR A SIGN A591"));
        data.insert(std::make_pair(0x106fe,"LINEAR A SIGN A592"));
        data.insert(std::make_pair(0x106ff,"LINEAR A SIGN A594"));
        data.insert(std::make_pair(0x10700,"LINEAR A SIGN A595"));
        data.insert(std::make_pair(0x10701,"LINEAR A SIGN A596"));
        data.insert(std::make_pair(0x10702,"LINEAR A SIGN A598"));
        data.insert(std::make_pair(0x10703,"LINEAR A SIGN A600"));
        data.insert(std::make_pair(0x10704,"LINEAR A SIGN A601"));
        data.insert(std::make_pair(0x10705,"LINEAR A SIGN A602"));
        data.insert(std::make_pair(0x10706,"LINEAR A SIGN A603"));
        data.insert(std::make_pair(0x10707,"LINEAR A SIGN A604"));
        data.insert(std::make_pair(0x10708,"LINEAR A SIGN A606"));
        data.insert(std::make_pair(0x10709,"LINEAR A SIGN A608"));
        data.insert(std::make_pair(0x1070a,"LINEAR A SIGN A609"));
        data.insert(std::make_pair(0x1070b,"LINEAR A SIGN A610"));
        data.insert(std::make_pair(0x1070c,"LINEAR A SIGN A611"));
        data.insert(std::make_pair(0x1070d,"LINEAR A SIGN A612"));
        data.insert(std::make_pair(0x1070e,"LINEAR A SIGN A613"));
        data.insert(std::make_pair(0x1070f,"LINEAR A SIGN A614"));
        data.insert(std::make_pair(0x10710,"LINEAR A SIGN A615"));
        data.insert(std::make_pair(0x10711,"LINEAR A SIGN A616"));
        data.insert(std::make_pair(0x10712,"LINEAR A SIGN A617"));
        data.insert(std::make_pair(0x10713,"LINEAR A SIGN A618"));
        data.insert(std::make_pair(0x10714,"LINEAR A SIGN A619"));
        data.insert(std::make_pair(0x10715,"LINEAR A SIGN A620"));
        data.insert(std::make_pair(0x10716,"LINEAR A SIGN A621"));
        data.insert(std::make_pair(0x10717,"LINEAR A SIGN A622"));
        data.insert(std::make_pair(0x10718,"LINEAR A SIGN A623"));
        data.insert(std::make_pair(0x10719,"LINEAR A SIGN A624"));
        data.insert(std::make_pair(0x1071a,"LINEAR A SIGN A626"));
        data.insert(std::make_pair(0x1071b,"LINEAR A SIGN A627"));
        data.insert(std::make_pair(0x1071c,"LINEAR A SIGN A628"));
        data.insert(std::make_pair(0x1071d,"LINEAR A SIGN A629"));
        data.insert(std::make_pair(0x1071e,"LINEAR A SIGN A634"));
        data.insert(std::make_pair(0x1071f,"LINEAR A SIGN A637"));
        data.insert(std::make_pair(0x10720,"LINEAR A SIGN A638"));
        data.insert(std::make_pair(0x10721,"LINEAR A SIGN A640"));
        data.insert(std::make_pair(0x10722,"LINEAR A SIGN A642"));
        data.insert(std::make_pair(0x10723,"LINEAR A SIGN A643"));
        data.insert(std::make_pair(0x10724,"LINEAR A SIGN A644"));
        data.insert(std::make_pair(0x10725,"LINEAR A SIGN A645"));
        data.insert(std::make_pair(0x10726,"LINEAR A SIGN A646"));
        data.insert(std::make_pair(0x10727,"LINEAR A SIGN A648"));
        data.insert(std::make_pair(0x10728,"LINEAR A SIGN A649"));
        data.insert(std::make_pair(0x10729,"LINEAR A SIGN A651"));
        data.insert(std::make_pair(0x1072a,"LINEAR A SIGN A652"));
        data.insert(std::make_pair(0x1072b,"LINEAR A SIGN A653"));
        data.insert(std::make_pair(0x1072c,"LINEAR A SIGN A654"));
        data.insert(std::make_pair(0x1072d,"LINEAR A SIGN A655"));
        data.insert(std::make_pair(0x1072e,"LINEAR A SIGN A656"));
        data.insert(std::make_pair(0x1072f,"LINEAR A SIGN A657"));
        data.insert(std::make_pair(0x10730,"LINEAR A SIGN A658"));
        data.insert(std::make_pair(0x10731,"LINEAR A SIGN A659"));
        data.insert(std::make_pair(0x10732,"LINEAR A SIGN A660"));
        data.insert(std::make_pair(0x10733,"LINEAR A SIGN A661"));
        data.insert(std::make_pair(0x10734,"LINEAR A SIGN A662"));
        data.insert(std::make_pair(0x10735,"LINEAR A SIGN A663"));
        data.insert(std::make_pair(0x10736,"LINEAR A SIGN A664"));
        data.insert(std::make_pair(0x10740,"LINEAR A SIGN A701 A"));
        data.insert(std::make_pair(0x10741,"LINEAR A SIGN A702 B"));
        data.insert(std::make_pair(0x10742,"LINEAR A SIGN A703 D"));
        data.insert(std::make_pair(0x10743,"LINEAR A SIGN A704 E"));
        data.insert(std::make_pair(0x10744,"LINEAR A SIGN A705 F"));
        data.insert(std::make_pair(0x10745,"LINEAR A SIGN A706 H"));
        data.insert(std::make_pair(0x10746,"LINEAR A SIGN A707 J"));
        data.insert(std::make_pair(0x10747,"LINEAR A SIGN A708 K"));
        data.insert(std::make_pair(0x10748,"LINEAR A SIGN A709 L"));
        data.insert(std::make_pair(0x10749,"LINEAR A SIGN A709-2 L2"));
        data.insert(std::make_pair(0x1074a,"LINEAR A SIGN A709-3 L3"));
        data.insert(std::make_pair(0x1074b,"LINEAR A SIGN A709-4 L4"));
        data.insert(std::make_pair(0x1074c,"LINEAR A SIGN A709-6 L6"));
        data.insert(std::make_pair(0x1074d,"LINEAR A SIGN A710 W"));
        data.insert(std::make_pair(0x1074e,"LINEAR A SIGN A711 X"));
        data.insert(std::make_pair(0x1074f,"LINEAR A SIGN A712 Y"));
        data.insert(std::make_pair(0x10750,"LINEAR A SIGN A713 OMEGA"));
        data.insert(std::make_pair(0x10751,"LINEAR A SIGN A714 ABB"));
        data.insert(std::make_pair(0x10752,"LINEAR A SIGN A715 BB"));
        data.insert(std::make_pair(0x10753,"LINEAR A SIGN A717 DD"));
        data.insert(std::make_pair(0x10754,"LINEAR A SIGN A726 EYYY"));
        data.insert(std::make_pair(0x10755,"LINEAR A SIGN A732 JE"));
        data.insert(std::make_pair(0x10760,"LINEAR A SIGN A800"));
        data.insert(std::make_pair(0x10761,"LINEAR A SIGN A801"));
        data.insert(std::make_pair(0x10762,"LINEAR A SIGN A802"));
        data.insert(std::make_pair(0x10763,"LINEAR A SIGN A803"));
        data.insert(std::make_pair(0x10764,"LINEAR A SIGN A804"));
        data.insert(std::make_pair(0x10765,"LINEAR A SIGN A805"));
        data.insert(std::make_pair(0x10766,"LINEAR A SIGN A806"));
        data.insert(std::make_pair(0x10767,"LINEAR A SIGN A807"));
        data.insert(std::make_pair(0x10780,"MODIFIER LETTER SMALL CAPITAL AA"));
        data.insert(std::make_pair(0x10781,"MODIFIER LETTER SUPERSCRIPT TRIANGULAR COLON"));
        data.insert(std::make_pair(0x10782,"MODIFIER LETTER SUPERSCRIPT HALF TRIANGULAR COLON"));
        data.insert(std::make_pair(0x10783,"MODIFIER LETTER SMALL AE"));
        data.insert(std::make_pair(0x10784,"MODIFIER LETTER SMALL CAPITAL B"));
        data.insert(std::make_pair(0x10785,"MODIFIER LETTER SMALL B WITH HOOK"));
        data.insert(std::make_pair(0x10787,"MODIFIER LETTER SMALL DZ DIGRAPH"));
        data.insert(std::make_pair(0x10788,"MODIFIER LETTER SMALL DZ DIGRAPH WITH RETROFLEX HOOK"));
        data.insert(std::make_pair(0x10789,"MODIFIER LETTER SMALL DZ DIGRAPH WITH CURL"));
        data.insert(std::make_pair(0x1078a,"MODIFIER LETTER SMALL DEZH DIGRAPH"));
        data.insert(std::make_pair(0x1078b,"MODIFIER LETTER SMALL D WITH TAIL"));
        data.insert(std::make_pair(0x1078c,"MODIFIER LETTER SMALL D WITH HOOK"));
        data.insert(std::make_pair(0x1078d,"MODIFIER LETTER SMALL D WITH HOOK AND TAIL"));
        data.insert(std::make_pair(0x1078e,"MODIFIER LETTER SMALL REVERSED E"));
        data.insert(std::make_pair(0x1078f,"MODIFIER LETTER SMALL CLOSED REVERSED OPEN E"));
        data.insert(std::make_pair(0x10790,"MODIFIER LETTER SMALL FENG DIGRAPH"));
        data.insert(std::make_pair(0x10791,"MODIFIER LETTER SMALL RAMS HORN"));
        data.insert(std::make_pair(0x10792,"MODIFIER LETTER SMALL CAPITAL G"));
        data.insert(std::make_pair(0x10793,"MODIFIER LETTER SMALL G WITH HOOK"));
        data.insert(std::make_pair(0x10794,"MODIFIER LETTER SMALL CAPITAL G WITH HOOK"));
        data.insert(std::make_pair(0x10795,"MODIFIER LETTER SMALL H WITH STROKE"));
        data.insert(std::make_pair(0x10796,"MODIFIER LETTER SMALL CAPITAL H"));
        data.insert(std::make_pair(0x10797,"MODIFIER LETTER SMALL HENG WITH HOOK"));
        data.insert(std::make_pair(0x10798,"MODIFIER LETTER SMALL DOTLESS J WITH STROKE AND HOOK"));
        data.insert(std::make_pair(0x10799,"MODIFIER LETTER SMALL LS DIGRAPH"));
        data.insert(std::make_pair(0x1079a,"MODIFIER LETTER SMALL LZ DIGRAPH"));
        data.insert(std::make_pair(0x1079b,"MODIFIER LETTER SMALL L WITH BELT"));
        data.insert(std::make_pair(0x1079c,"MODIFIER LETTER SMALL CAPITAL L WITH BELT"));
        data.insert(std::make_pair(0x1079d,"MODIFIER LETTER SMALL L WITH RETROFLEX HOOK AND BELT"));
        data.insert(std::make_pair(0x1079e,"MODIFIER LETTER SMALL LEZH"));
        data.insert(std::make_pair(0x1079f,"MODIFIER LETTER SMALL LEZH WITH RETROFLEX HOOK"));
        data.insert(std::make_pair(0x107a0,"MODIFIER LETTER SMALL TURNED Y"));
        data.insert(std::make_pair(0x107a1,"MODIFIER LETTER SMALL TURNED Y WITH BELT"));
        data.insert(std::make_pair(0x107a2,"MODIFIER LETTER SMALL O WITH STROKE"));
        data.insert(std::make_pair(0x107a3,"MODIFIER LETTER SMALL CAPITAL OE"));
        data.insert(std::make_pair(0x107a4,"MODIFIER LETTER SMALL CLOSED OMEGA"));
        data.insert(std::make_pair(0x107a5,"MODIFIER LETTER SMALL Q"));
        data.insert(std::make_pair(0x107a6,"MODIFIER LETTER SMALL TURNED R WITH LONG LEG"));
        data.insert(std::make_pair(0x107a7,"MODIFIER LETTER SMALL TURNED R WITH LONG LEG AND RETROFLEX HOOK"));
        data.insert(std::make_pair(0x107a8,"MODIFIER LETTER SMALL R WITH TAIL"));
        data.insert(std::make_pair(0x107a9,"MODIFIER LETTER SMALL R WITH FISHHOOK"));
        data.insert(std::make_pair(0x107aa,"MODIFIER LETTER SMALL CAPITAL R"));
        data.insert(std::make_pair(0x107ab,"MODIFIER LETTER SMALL TC DIGRAPH WITH CURL"));
        data.insert(std::make_pair(0x107ac,"MODIFIER LETTER SMALL TS DIGRAPH"));
        data.insert(std::make_pair(0x107ad,"MODIFIER LETTER SMALL TS DIGRAPH WITH RETROFLEX HOOK"));
        data.insert(std::make_pair(0x107ae,"MODIFIER LETTER SMALL TESH DIGRAPH"));
        data.insert(std::make_pair(0x107af,"MODIFIER LETTER SMALL T WITH RETROFLEX HOOK"));
        data.insert(std::make_pair(0x107b0,"MODIFIER LETTER SMALL V WITH RIGHT HOOK"));
        data.insert(std::make_pair(0x107b2,"MODIFIER LETTER SMALL CAPITAL Y"));
        data.insert(std::make_pair(0x107b3,"MODIFIER LETTER GLOTTAL STOP WITH STROKE"));
        data.insert(std::make_pair(0x107b4,"MODIFIER LETTER REVERSED GLOTTAL STOP WITH STROKE"));
        data.insert(std::make_pair(0x107b5,"MODIFIER LETTER BILABIAL CLICK"));
        data.insert(std::make_pair(0x107b6,"MODIFIER LETTER DENTAL CLICK"));
        data.insert(std::make_pair(0x107b7,"MODIFIER LETTER LATERAL CLICK"));
        data.insert(std::make_pair(0x107b8,"MODIFIER LETTER ALVEOLAR CLICK"));
        data.insert(std::make_pair(0x107b9,"MODIFIER LETTER RETROFLEX CLICK WITH RETROFLEX HOOK"));
        data.insert(std::make_pair(0x107ba,"MODIFIER LETTER SMALL S WITH CURL"));
        data.insert(std::make_pair(0x10800,"CYPRIOT SYLLABLE A"));
        data.insert(std::make_pair(0x10801,"CYPRIOT SYLLABLE E"));
        data.insert(std::make_pair(0x10802,"CYPRIOT SYLLABLE I"));
        data.insert(std::make_pair(0x10803,"CYPRIOT SYLLABLE O"));
        data.insert(std::make_pair(0x10804,"CYPRIOT SYLLABLE U"));
        data.insert(std::make_pair(0x10805,"CYPRIOT SYLLABLE JA"));
        data.insert(std::make_pair(0x10808,"CYPRIOT SYLLABLE JO"));
        data.insert(std::make_pair(0x1080a,"CYPRIOT SYLLABLE KA"));
        data.insert(std::make_pair(0x1080b,"CYPRIOT SYLLABLE KE"));
        data.insert(std::make_pair(0x1080c,"CYPRIOT SYLLABLE KI"));
        data.insert(std::make_pair(0x1080d,"CYPRIOT SYLLABLE KO"));
        data.insert(std::make_pair(0x1080e,"CYPRIOT SYLLABLE KU"));
        data.insert(std::make_pair(0x1080f,"CYPRIOT SYLLABLE LA"));
        data.insert(std::make_pair(0x10810,"CYPRIOT SYLLABLE LE"));
        data.insert(std::make_pair(0x10811,"CYPRIOT SYLLABLE LI"));
        data.insert(std::make_pair(0x10812,"CYPRIOT SYLLABLE LO"));
        data.insert(std::make_pair(0x10813,"CYPRIOT SYLLABLE LU"));
        data.insert(std::make_pair(0x10814,"CYPRIOT SYLLABLE MA"));
        data.insert(std::make_pair(0x10815,"CYPRIOT SYLLABLE ME"));
        data.insert(std::make_pair(0x10816,"CYPRIOT SYLLABLE MI"));
        data.insert(std::make_pair(0x10817,"CYPRIOT SYLLABLE MO"));
        data.insert(std::make_pair(0x10818,"CYPRIOT SYLLABLE MU"));
        data.insert(std::make_pair(0x10819,"CYPRIOT SYLLABLE NA"));
        data.insert(std::make_pair(0x1081a,"CYPRIOT SYLLABLE NE"));
        data.insert(std::make_pair(0x1081b,"CYPRIOT SYLLABLE NI"));
        data.insert(std::make_pair(0x1081c,"CYPRIOT SYLLABLE NO"));
        data.insert(std::make_pair(0x1081d,"CYPRIOT SYLLABLE NU"));
        data.insert(std::make_pair(0x1081e,"CYPRIOT SYLLABLE PA"));
        data.insert(std::make_pair(0x1081f,"CYPRIOT SYLLABLE PE"));
        data.insert(std::make_pair(0x10820,"CYPRIOT SYLLABLE PI"));
        data.insert(std::make_pair(0x10821,"CYPRIOT SYLLABLE PO"));
        data.insert(std::make_pair(0x10822,"CYPRIOT SYLLABLE PU"));
        data.insert(std::make_pair(0x10823,"CYPRIOT SYLLABLE RA"));
        data.insert(std::make_pair(0x10824,"CYPRIOT SYLLABLE RE"));
        data.insert(std::make_pair(0x10825,"CYPRIOT SYLLABLE RI"));
        data.insert(std::make_pair(0x10826,"CYPRIOT SYLLABLE RO"));
        data.insert(std::make_pair(0x10827,"CYPRIOT SYLLABLE RU"));
        data.insert(std::make_pair(0x10828,"CYPRIOT SYLLABLE SA"));
        data.insert(std::make_pair(0x10829,"CYPRIOT SYLLABLE SE"));
        data.insert(std::make_pair(0x1082a,"CYPRIOT SYLLABLE SI"));
        data.insert(std::make_pair(0x1082b,"CYPRIOT SYLLABLE SO"));
        data.insert(std::make_pair(0x1082c,"CYPRIOT SYLLABLE SU"));
        data.insert(std::make_pair(0x1082d,"CYPRIOT SYLLABLE TA"));
        data.insert(std::make_pair(0x1082e,"CYPRIOT SYLLABLE TE"));
        data.insert(std::make_pair(0x1082f,"CYPRIOT SYLLABLE TI"));
        data.insert(std::make_pair(0x10830,"CYPRIOT SYLLABLE TO"));
        data.insert(std::make_pair(0x10831,"CYPRIOT SYLLABLE TU"));
        data.insert(std::make_pair(0x10832,"CYPRIOT SYLLABLE WA"));
        data.insert(std::make_pair(0x10833,"CYPRIOT SYLLABLE WE"));
        data.insert(std::make_pair(0x10834,"CYPRIOT SYLLABLE WI"));
        data.insert(std::make_pair(0x10835,"CYPRIOT SYLLABLE WO"));
        data.insert(std::make_pair(0x10837,"CYPRIOT SYLLABLE XA"));
        data.insert(std::make_pair(0x10838,"CYPRIOT SYLLABLE XE"));
        data.insert(std::make_pair(0x1083c,"CYPRIOT SYLLABLE ZA"));
        data.insert(std::make_pair(0x1083f,"CYPRIOT SYLLABLE ZO"));
        data.insert(std::make_pair(0x10840,"IMPERIAL ARAMAIC LETTER ALEPH"));
        data.insert(std::make_pair(0x10841,"IMPERIAL ARAMAIC LETTER BETH"));
        data.insert(std::make_pair(0x10842,"IMPERIAL ARAMAIC LETTER GIMEL"));
        data.insert(std::make_pair(0x10843,"IMPERIAL ARAMAIC LETTER DALETH"));
        data.insert(std::make_pair(0x10844,"IMPERIAL ARAMAIC LETTER HE"));
        data.insert(std::make_pair(0x10845,"IMPERIAL ARAMAIC LETTER WAW"));
        data.insert(std::make_pair(0x10846,"IMPERIAL ARAMAIC LETTER ZAYIN"));
        data.insert(std::make_pair(0x10847,"IMPERIAL ARAMAIC LETTER HETH"));
        data.insert(std::make_pair(0x10848,"IMPERIAL ARAMAIC LETTER TETH"));
        data.insert(std::make_pair(0x10849,"IMPERIAL ARAMAIC LETTER YODH"));
        data.insert(std::make_pair(0x1084a,"IMPERIAL ARAMAIC LETTER KAPH"));
        data.insert(std::make_pair(0x1084b,"IMPERIAL ARAMAIC LETTER LAMEDH"));
        data.insert(std::make_pair(0x1084c,"IMPERIAL ARAMAIC LETTER MEM"));
        data.insert(std::make_pair(0x1084d,"IMPERIAL ARAMAIC LETTER NUN"));
        data.insert(std::make_pair(0x1084e,"IMPERIAL ARAMAIC LETTER SAMEKH"));
        data.insert(std::make_pair(0x1084f,"IMPERIAL ARAMAIC LETTER AYIN"));
        data.insert(std::make_pair(0x10850,"IMPERIAL ARAMAIC LETTER PE"));
        data.insert(std::make_pair(0x10851,"IMPERIAL ARAMAIC LETTER SADHE"));
        data.insert(std::make_pair(0x10852,"IMPERIAL ARAMAIC LETTER QOPH"));
        data.insert(std::make_pair(0x10853,"IMPERIAL ARAMAIC LETTER RESH"));
        data.insert(std::make_pair(0x10854,"IMPERIAL ARAMAIC LETTER SHIN"));
        data.insert(std::make_pair(0x10855,"IMPERIAL ARAMAIC LETTER TAW"));
        data.insert(std::make_pair(0x10857,"IMPERIAL ARAMAIC SECTION SIGN"));
        data.insert(std::make_pair(0x10858,"IMPERIAL ARAMAIC NUMBER ONE"));
        data.insert(std::make_pair(0x10859,"IMPERIAL ARAMAIC NUMBER TWO"));
        data.insert(std::make_pair(0x1085a,"IMPERIAL ARAMAIC NUMBER THREE"));
        data.insert(std::make_pair(0x1085b,"IMPERIAL ARAMAIC NUMBER TEN"));
        data.insert(std::make_pair(0x1085c,"IMPERIAL ARAMAIC NUMBER TWENTY"));
        data.insert(std::make_pair(0x1085d,"IMPERIAL ARAMAIC NUMBER ONE HUNDRED"));
        data.insert(std::make_pair(0x1085e,"IMPERIAL ARAMAIC NUMBER ONE THOUSAND"));
        data.insert(std::make_pair(0x1085f,"IMPERIAL ARAMAIC NUMBER TEN THOUSAND"));
        data.insert(std::make_pair(0x10860,"PALMYRENE LETTER ALEPH"));
        data.insert(std::make_pair(0x10861,"PALMYRENE LETTER BETH"));
        data.insert(std::make_pair(0x10862,"PALMYRENE LETTER GIMEL"));
        data.insert(std::make_pair(0x10863,"PALMYRENE LETTER DALETH"));
        data.insert(std::make_pair(0x10864,"PALMYRENE LETTER HE"));
        data.insert(std::make_pair(0x10865,"PALMYRENE LETTER WAW"));
        data.insert(std::make_pair(0x10866,"PALMYRENE LETTER ZAYIN"));
        data.insert(std::make_pair(0x10867,"PALMYRENE LETTER HETH"));
        data.insert(std::make_pair(0x10868,"PALMYRENE LETTER TETH"));
        data.insert(std::make_pair(0x10869,"PALMYRENE LETTER YODH"));
        data.insert(std::make_pair(0x1086a,"PALMYRENE LETTER KAPH"));
        data.insert(std::make_pair(0x1086b,"PALMYRENE LETTER LAMEDH"));
        data.insert(std::make_pair(0x1086c,"PALMYRENE LETTER MEM"));
        data.insert(std::make_pair(0x1086d,"PALMYRENE LETTER FINAL NUN"));
        data.insert(std::make_pair(0x1086e,"PALMYRENE LETTER NUN"));
        data.insert(std::make_pair(0x1086f,"PALMYRENE LETTER SAMEKH"));
        data.insert(std::make_pair(0x10870,"PALMYRENE LETTER AYIN"));
        data.insert(std::make_pair(0x10871,"PALMYRENE LETTER PE"));
        data.insert(std::make_pair(0x10872,"PALMYRENE LETTER SADHE"));
        data.insert(std::make_pair(0x10873,"PALMYRENE LETTER QOPH"));
        data.insert(std::make_pair(0x10874,"PALMYRENE LETTER RESH"));
        data.insert(std::make_pair(0x10875,"PALMYRENE LETTER SHIN"));
        data.insert(std::make_pair(0x10876,"PALMYRENE LETTER TAW"));
        data.insert(std::make_pair(0x10877,"PALMYRENE LEFT-POINTING FLEURON"));
        data.insert(std::make_pair(0x10878,"PALMYRENE RIGHT-POINTING FLEURON"));
        data.insert(std::make_pair(0x10879,"PALMYRENE NUMBER ONE"));
        data.insert(std::make_pair(0x1087a,"PALMYRENE NUMBER TWO"));
        data.insert(std::make_pair(0x1087b,"PALMYRENE NUMBER THREE"));
        data.insert(std::make_pair(0x1087c,"PALMYRENE NUMBER FOUR"));
        data.insert(std::make_pair(0x1087d,"PALMYRENE NUMBER FIVE"));
        data.insert(std::make_pair(0x1087e,"PALMYRENE NUMBER TEN"));
        data.insert(std::make_pair(0x1087f,"PALMYRENE NUMBER TWENTY"));
        data.insert(std::make_pair(0x10880,"NABATAEAN LETTER FINAL ALEPH"));
        data.insert(std::make_pair(0x10881,"NABATAEAN LETTER ALEPH"));
        data.insert(std::make_pair(0x10882,"NABATAEAN LETTER FINAL BETH"));
        data.insert(std::make_pair(0x10883,"NABATAEAN LETTER BETH"));
        data.insert(std::make_pair(0x10884,"NABATAEAN LETTER GIMEL"));
        data.insert(std::make_pair(0x10885,"NABATAEAN LETTER DALETH"));
        data.insert(std::make_pair(0x10886,"NABATAEAN LETTER FINAL HE"));
        data.insert(std::make_pair(0x10887,"NABATAEAN LETTER HE"));
        data.insert(std::make_pair(0x10888,"NABATAEAN LETTER WAW"));
        data.insert(std::make_pair(0x10889,"NABATAEAN LETTER ZAYIN"));
        data.insert(std::make_pair(0x1088a,"NABATAEAN LETTER HETH"));
        data.insert(std::make_pair(0x1088b,"NABATAEAN LETTER TETH"));
        data.insert(std::make_pair(0x1088c,"NABATAEAN LETTER FINAL YODH"));
        data.insert(std::make_pair(0x1088d,"NABATAEAN LETTER YODH"));
        data.insert(std::make_pair(0x1088e,"NABATAEAN LETTER FINAL KAPH"));
        data.insert(std::make_pair(0x1088f,"NABATAEAN LETTER KAPH"));
        data.insert(std::make_pair(0x10890,"NABATAEAN LETTER FINAL LAMEDH"));
        data.insert(std::make_pair(0x10891,"NABATAEAN LETTER LAMEDH"));
        data.insert(std::make_pair(0x10892,"NABATAEAN LETTER FINAL MEM"));
        data.insert(std::make_pair(0x10893,"NABATAEAN LETTER MEM"));
        data.insert(std::make_pair(0x10894,"NABATAEAN LETTER FINAL NUN"));
        data.insert(std::make_pair(0x10895,"NABATAEAN LETTER NUN"));
        data.insert(std::make_pair(0x10896,"NABATAEAN LETTER SAMEKH"));
        data.insert(std::make_pair(0x10897,"NABATAEAN LETTER AYIN"));
        data.insert(std::make_pair(0x10898,"NABATAEAN LETTER PE"));
        data.insert(std::make_pair(0x10899,"NABATAEAN LETTER SADHE"));
        data.insert(std::make_pair(0x1089a,"NABATAEAN LETTER QOPH"));
        data.insert(std::make_pair(0x1089b,"NABATAEAN LETTER RESH"));
        data.insert(std::make_pair(0x1089c,"NABATAEAN LETTER FINAL SHIN"));
        data.insert(std::make_pair(0x1089d,"NABATAEAN LETTER SHIN"));
        data.insert(std::make_pair(0x1089e,"NABATAEAN LETTER TAW"));
        data.insert(std::make_pair(0x108a7,"NABATAEAN NUMBER ONE"));
        data.insert(std::make_pair(0x108a8,"NABATAEAN NUMBER TWO"));
        data.insert(std::make_pair(0x108a9,"NABATAEAN NUMBER THREE"));
        data.insert(std::make_pair(0x108aa,"NABATAEAN NUMBER FOUR"));
        data.insert(std::make_pair(0x108ab,"NABATAEAN CRUCIFORM NUMBER FOUR"));
        data.insert(std::make_pair(0x108ac,"NABATAEAN NUMBER FIVE"));
        data.insert(std::make_pair(0x108ad,"NABATAEAN NUMBER TEN"));
        data.insert(std::make_pair(0x108ae,"NABATAEAN NUMBER TWENTY"));
        data.insert(std::make_pair(0x108af,"NABATAEAN NUMBER ONE HUNDRED"));
        data.insert(std::make_pair(0x108e0,"HATRAN LETTER ALEPH"));
        data.insert(std::make_pair(0x108e1,"HATRAN LETTER BETH"));
        data.insert(std::make_pair(0x108e2,"HATRAN LETTER GIMEL"));
        data.insert(std::make_pair(0x108e3,"HATRAN LETTER DALETH-RESH"));
        data.insert(std::make_pair(0x108e4,"HATRAN LETTER HE"));
        data.insert(std::make_pair(0x108e5,"HATRAN LETTER WAW"));
        data.insert(std::make_pair(0x108e6,"HATRAN LETTER ZAYN"));
        data.insert(std::make_pair(0x108e7,"HATRAN LETTER HETH"));
        data.insert(std::make_pair(0x108e8,"HATRAN LETTER TETH"));
        data.insert(std::make_pair(0x108e9,"HATRAN LETTER YODH"));
        data.insert(std::make_pair(0x108ea,"HATRAN LETTER KAPH"));
        data.insert(std::make_pair(0x108eb,"HATRAN LETTER LAMEDH"));
        data.insert(std::make_pair(0x108ec,"HATRAN LETTER MEM"));
        data.insert(std::make_pair(0x108ed,"HATRAN LETTER NUN"));
        data.insert(std::make_pair(0x108ee,"HATRAN LETTER SAMEKH"));
        data.insert(std::make_pair(0x108ef,"HATRAN LETTER AYN"));
        data.insert(std::make_pair(0x108f0,"HATRAN LETTER PE"));
        data.insert(std::make_pair(0x108f1,"HATRAN LETTER SADHE"));
        data.insert(std::make_pair(0x108f2,"HATRAN LETTER QOPH"));
        data.insert(std::make_pair(0x108f4,"HATRAN LETTER SHIN"));
        data.insert(std::make_pair(0x108f5,"HATRAN LETTER TAW"));
        data.insert(std::make_pair(0x108fb,"HATRAN NUMBER ONE"));
        data.insert(std::make_pair(0x108fc,"HATRAN NUMBER FIVE"));
        data.insert(std::make_pair(0x108fd,"HATRAN NUMBER TEN"));
        data.insert(std::make_pair(0x108fe,"HATRAN NUMBER TWENTY"));
        data.insert(std::make_pair(0x108ff,"HATRAN NUMBER ONE HUNDRED"));
        data.insert(std::make_pair(0x10900,"PHOENICIAN LETTER ALF"));
        data.insert(std::make_pair(0x10901,"PHOENICIAN LETTER BET"));
        data.insert(std::make_pair(0x10902,"PHOENICIAN LETTER GAML"));
        data.insert(std::make_pair(0x10903,"PHOENICIAN LETTER DELT"));
        data.insert(std::make_pair(0x10904,"PHOENICIAN LETTER HE"));
        data.insert(std::make_pair(0x10905,"PHOENICIAN LETTER WAU"));
        data.insert(std::make_pair(0x10906,"PHOENICIAN LETTER ZAI"));
        data.insert(std::make_pair(0x10907,"PHOENICIAN LETTER HET"));
        data.insert(std::make_pair(0x10908,"PHOENICIAN LETTER TET"));
        data.insert(std::make_pair(0x10909,"PHOENICIAN LETTER YOD"));
        data.insert(std::make_pair(0x1090a,"PHOENICIAN LETTER KAF"));
        data.insert(std::make_pair(0x1090b,"PHOENICIAN LETTER LAMD"));
        data.insert(std::make_pair(0x1090c,"PHOENICIAN LETTER MEM"));
        data.insert(std::make_pair(0x1090d,"PHOENICIAN LETTER NUN"));
        data.insert(std::make_pair(0x1090e,"PHOENICIAN LETTER SEMK"));
        data.insert(std::make_pair(0x1090f,"PHOENICIAN LETTER AIN"));
        data.insert(std::make_pair(0x10910,"PHOENICIAN LETTER PE"));
        data.insert(std::make_pair(0x10911,"PHOENICIAN LETTER SADE"));
        data.insert(std::make_pair(0x10912,"PHOENICIAN LETTER QOF"));
        data.insert(std::make_pair(0x10913,"PHOENICIAN LETTER ROSH"));
        data.insert(std::make_pair(0x10914,"PHOENICIAN LETTER SHIN"));
        data.insert(std::make_pair(0x10915,"PHOENICIAN LETTER TAU"));
        data.insert(std::make_pair(0x10916,"PHOENICIAN NUMBER ONE"));
        data.insert(std::make_pair(0x10917,"PHOENICIAN NUMBER TEN"));
        data.insert(std::make_pair(0x10918,"PHOENICIAN NUMBER TWENTY"));
        data.insert(std::make_pair(0x10919,"PHOENICIAN NUMBER ONE HUNDRED"));
        data.insert(std::make_pair(0x1091a,"PHOENICIAN NUMBER TWO"));
        data.insert(std::make_pair(0x1091b,"PHOENICIAN NUMBER THREE"));
        data.insert(std::make_pair(0x1091f,"PHOENICIAN WORD SEPARATOR"));
        data.insert(std::make_pair(0x10920,"LYDIAN LETTER A"));
        data.insert(std::make_pair(0x10921,"LYDIAN LETTER B"));
        data.insert(std::make_pair(0x10922,"LYDIAN LETTER G"));
        data.insert(std::make_pair(0x10923,"LYDIAN LETTER D"));
        data.insert(std::make_pair(0x10924,"LYDIAN LETTER E"));
        data.insert(std::make_pair(0x10925,"LYDIAN LETTER V"));
        data.insert(std::make_pair(0x10926,"LYDIAN LETTER I"));
        data.insert(std::make_pair(0x10927,"LYDIAN LETTER Y"));
        data.insert(std::make_pair(0x10928,"LYDIAN LETTER K"));
        data.insert(std::make_pair(0x10929,"LYDIAN LETTER L"));
        data.insert(std::make_pair(0x1092a,"LYDIAN LETTER M"));
        data.insert(std::make_pair(0x1092b,"LYDIAN LETTER N"));
        data.insert(std::make_pair(0x1092c,"LYDIAN LETTER O"));
        data.insert(std::make_pair(0x1092d,"LYDIAN LETTER R"));
        data.insert(std::make_pair(0x1092e,"LYDIAN LETTER SS"));
        data.insert(std::make_pair(0x1092f,"LYDIAN LETTER T"));
        data.insert(std::make_pair(0x10930,"LYDIAN LETTER U"));
        data.insert(std::make_pair(0x10931,"LYDIAN LETTER F"));
        data.insert(std::make_pair(0x10932,"LYDIAN LETTER Q"));
        data.insert(std::make_pair(0x10933,"LYDIAN LETTER S"));
        data.insert(std::make_pair(0x10934,"LYDIAN LETTER TT"));
        data.insert(std::make_pair(0x10935,"LYDIAN LETTER AN"));
        data.insert(std::make_pair(0x10936,"LYDIAN LETTER EN"));
        data.insert(std::make_pair(0x10937,"LYDIAN LETTER LY"));
        data.insert(std::make_pair(0x10938,"LYDIAN LETTER NN"));
        data.insert(std::make_pair(0x10939,"LYDIAN LETTER C"));
        data.insert(std::make_pair(0x1093f,"LYDIAN TRIANGULAR MARK"));
        data.insert(std::make_pair(0x10980,"MEROITIC HIEROGLYPHIC LETTER A"));
        data.insert(std::make_pair(0x10981,"MEROITIC HIEROGLYPHIC LETTER E"));
        data.insert(std::make_pair(0x10982,"MEROITIC HIEROGLYPHIC LETTER I"));
        data.insert(std::make_pair(0x10983,"MEROITIC HIEROGLYPHIC LETTER O"));
        data.insert(std::make_pair(0x10984,"MEROITIC HIEROGLYPHIC LETTER YA"));
        data.insert(std::make_pair(0x10985,"MEROITIC HIEROGLYPHIC LETTER WA"));
        data.insert(std::make_pair(0x10986,"MEROITIC HIEROGLYPHIC LETTER BA"));
        data.insert(std::make_pair(0x10987,"MEROITIC HIEROGLYPHIC LETTER BA-2"));
        data.insert(std::make_pair(0x10988,"MEROITIC HIEROGLYPHIC LETTER PA"));
        data.insert(std::make_pair(0x10989,"MEROITIC HIEROGLYPHIC LETTER MA"));
        data.insert(std::make_pair(0x1098a,"MEROITIC HIEROGLYPHIC LETTER NA"));
        data.insert(std::make_pair(0x1098b,"MEROITIC HIEROGLYPHIC LETTER NA-2"));
        data.insert(std::make_pair(0x1098c,"MEROITIC HIEROGLYPHIC LETTER NE"));
        data.insert(std::make_pair(0x1098d,"MEROITIC HIEROGLYPHIC LETTER NE-2"));
        data.insert(std::make_pair(0x1098e,"MEROITIC HIEROGLYPHIC LETTER RA"));
        data.insert(std::make_pair(0x1098f,"MEROITIC HIEROGLYPHIC LETTER RA-2"));
        data.insert(std::make_pair(0x10990,"MEROITIC HIEROGLYPHIC LETTER LA"));
        data.insert(std::make_pair(0x10991,"MEROITIC HIEROGLYPHIC LETTER KHA"));
        data.insert(std::make_pair(0x10992,"MEROITIC HIEROGLYPHIC LETTER HHA"));
        data.insert(std::make_pair(0x10993,"MEROITIC HIEROGLYPHIC LETTER SA"));
        data.insert(std::make_pair(0x10994,"MEROITIC HIEROGLYPHIC LETTER SA-2"));
        data.insert(std::make_pair(0x10995,"MEROITIC HIEROGLYPHIC LETTER SE"));
        data.insert(std::make_pair(0x10996,"MEROITIC HIEROGLYPHIC LETTER KA"));
        data.insert(std::make_pair(0x10997,"MEROITIC HIEROGLYPHIC LETTER QA"));
        data.insert(std::make_pair(0x10998,"MEROITIC HIEROGLYPHIC LETTER TA"));
        data.insert(std::make_pair(0x10999,"MEROITIC HIEROGLYPHIC LETTER TA-2"));
        data.insert(std::make_pair(0x1099a,"MEROITIC HIEROGLYPHIC LETTER TE"));
        data.insert(std::make_pair(0x1099b,"MEROITIC HIEROGLYPHIC LETTER TE-2"));
        data.insert(std::make_pair(0x1099c,"MEROITIC HIEROGLYPHIC LETTER TO"));
        data.insert(std::make_pair(0x1099d,"MEROITIC HIEROGLYPHIC LETTER DA"));
        data.insert(std::make_pair(0x1099e,"MEROITIC HIEROGLYPHIC SYMBOL VIDJ"));
        data.insert(std::make_pair(0x1099f,"MEROITIC HIEROGLYPHIC SYMBOL VIDJ-2"));
        data.insert(std::make_pair(0x109a0,"MEROITIC CURSIVE LETTER A"));
        data.insert(std::make_pair(0x109a1,"MEROITIC CURSIVE LETTER E"));
        data.insert(std::make_pair(0x109a2,"MEROITIC CURSIVE LETTER I"));
        data.insert(std::make_pair(0x109a3,"MEROITIC CURSIVE LETTER O"));
        data.insert(std::make_pair(0x109a4,"MEROITIC CURSIVE LETTER YA"));
        data.insert(std::make_pair(0x109a5,"MEROITIC CURSIVE LETTER WA"));
        data.insert(std::make_pair(0x109a6,"MEROITIC CURSIVE LETTER BA"));
        data.insert(std::make_pair(0x109a7,"MEROITIC CURSIVE LETTER PA"));
        data.insert(std::make_pair(0x109a8,"MEROITIC CURSIVE LETTER MA"));
        data.insert(std::make_pair(0x109a9,"MEROITIC CURSIVE LETTER NA"));
        data.insert(std::make_pair(0x109aa,"MEROITIC CURSIVE LETTER NE"));
        data.insert(std::make_pair(0x109ab,"MEROITIC CURSIVE LETTER RA"));
        data.insert(std::make_pair(0x109ac,"MEROITIC CURSIVE LETTER LA"));
        data.insert(std::make_pair(0x109ad,"MEROITIC CURSIVE LETTER KHA"));
        data.insert(std::make_pair(0x109ae,"MEROITIC CURSIVE LETTER HHA"));
        data.insert(std::make_pair(0x109af,"MEROITIC CURSIVE LETTER SA"));
        data.insert(std::make_pair(0x109b0,"MEROITIC CURSIVE LETTER ARCHAIC SA"));
        data.insert(std::make_pair(0x109b1,"MEROITIC CURSIVE LETTER SE"));
        data.insert(std::make_pair(0x109b2,"MEROITIC CURSIVE LETTER KA"));
        data.insert(std::make_pair(0x109b3,"MEROITIC CURSIVE LETTER QA"));
        data.insert(std::make_pair(0x109b4,"MEROITIC CURSIVE LETTER TA"));
        data.insert(std::make_pair(0x109b5,"MEROITIC CURSIVE LETTER TE"));
        data.insert(std::make_pair(0x109b6,"MEROITIC CURSIVE LETTER TO"));
        data.insert(std::make_pair(0x109b7,"MEROITIC CURSIVE LETTER DA"));
        data.insert(std::make_pair(0x109bc,"MEROITIC CURSIVE FRACTION ELEVEN TWELFTHS"));
        data.insert(std::make_pair(0x109bd,"MEROITIC CURSIVE FRACTION ONE HALF"));
        data.insert(std::make_pair(0x109be,"MEROITIC CURSIVE LOGOGRAM RMT"));
        data.insert(std::make_pair(0x109bf,"MEROITIC CURSIVE LOGOGRAM IMN"));
        data.insert(std::make_pair(0x109c0,"MEROITIC CURSIVE NUMBER ONE"));
        data.insert(std::make_pair(0x109c1,"MEROITIC CURSIVE NUMBER TWO"));
        data.insert(std::make_pair(0x109c2,"MEROITIC CURSIVE NUMBER THREE"));
        data.insert(std::make_pair(0x109c3,"MEROITIC CURSIVE NUMBER FOUR"));
        data.insert(std::make_pair(0x109c4,"MEROITIC CURSIVE NUMBER FIVE"));
        data.insert(std::make_pair(0x109c5,"MEROITIC CURSIVE NUMBER SIX"));
        data.insert(std::make_pair(0x109c6,"MEROITIC CURSIVE NUMBER SEVEN"));
        data.insert(std::make_pair(0x109c7,"MEROITIC CURSIVE NUMBER EIGHT"));
        data.insert(std::make_pair(0x109c8,"MEROITIC CURSIVE NUMBER NINE"));
        data.insert(std::make_pair(0x109c9,"MEROITIC CURSIVE NUMBER TEN"));
        data.insert(std::make_pair(0x109ca,"MEROITIC CURSIVE NUMBER TWENTY"));
        data.insert(std::make_pair(0x109cb,"MEROITIC CURSIVE NUMBER THIRTY"));
        data.insert(std::make_pair(0x109cc,"MEROITIC CURSIVE NUMBER FORTY"));
        data.insert(std::make_pair(0x109cd,"MEROITIC CURSIVE NUMBER FIFTY"));
        data.insert(std::make_pair(0x109ce,"MEROITIC CURSIVE NUMBER SIXTY"));
        data.insert(std::make_pair(0x109cf,"MEROITIC CURSIVE NUMBER SEVENTY"));
        data.insert(std::make_pair(0x109d2,"MEROITIC CURSIVE NUMBER ONE HUNDRED"));
        data.insert(std::make_pair(0x109d3,"MEROITIC CURSIVE NUMBER TWO HUNDRED"));
        data.insert(std::make_pair(0x109d4,"MEROITIC CURSIVE NUMBER THREE HUNDRED"));
        data.insert(std::make_pair(0x109d5,"MEROITIC CURSIVE NUMBER FOUR HUNDRED"));
        data.insert(std::make_pair(0x109d6,"MEROITIC CURSIVE NUMBER FIVE HUNDRED"));
        data.insert(std::make_pair(0x109d7,"MEROITIC CURSIVE NUMBER SIX HUNDRED"));
        data.insert(std::make_pair(0x109d8,"MEROITIC CURSIVE NUMBER SEVEN HUNDRED"));
        data.insert(std::make_pair(0x109d9,"MEROITIC CURSIVE NUMBER EIGHT HUNDRED"));
        data.insert(std::make_pair(0x109da,"MEROITIC CURSIVE NUMBER NINE HUNDRED"));
        data.insert(std::make_pair(0x109db,"MEROITIC CURSIVE NUMBER ONE THOUSAND"));
        data.insert(std::make_pair(0x109dc,"MEROITIC CURSIVE NUMBER TWO THOUSAND"));
        data.insert(std::make_pair(0x109dd,"MEROITIC CURSIVE NUMBER THREE THOUSAND"));
        data.insert(std::make_pair(0x109de,"MEROITIC CURSIVE NUMBER FOUR THOUSAND"));
        data.insert(std::make_pair(0x109df,"MEROITIC CURSIVE NUMBER FIVE THOUSAND"));
        data.insert(std::make_pair(0x109e0,"MEROITIC CURSIVE NUMBER SIX THOUSAND"));
        data.insert(std::make_pair(0x109e1,"MEROITIC CURSIVE NUMBER SEVEN THOUSAND"));
        data.insert(std::make_pair(0x109e2,"MEROITIC CURSIVE NUMBER EIGHT THOUSAND"));
        data.insert(std::make_pair(0x109e3,"MEROITIC CURSIVE NUMBER NINE THOUSAND"));
        data.insert(std::make_pair(0x109e4,"MEROITIC CURSIVE NUMBER TEN THOUSAND"));
        data.insert(std::make_pair(0x109e5,"MEROITIC CURSIVE NUMBER TWENTY THOUSAND"));
        data.insert(std::make_pair(0x109e6,"MEROITIC CURSIVE NUMBER THIRTY THOUSAND"));
        data.insert(std::make_pair(0x109e7,"MEROITIC CURSIVE NUMBER FORTY THOUSAND"));
        data.insert(std::make_pair(0x109e8,"MEROITIC CURSIVE NUMBER FIFTY THOUSAND"));
        data.insert(std::make_pair(0x109e9,"MEROITIC CURSIVE NUMBER SIXTY THOUSAND"));
        data.insert(std::make_pair(0x109ea,"MEROITIC CURSIVE NUMBER SEVENTY THOUSAND"));
        data.insert(std::make_pair(0x109eb,"MEROITIC CURSIVE NUMBER EIGHTY THOUSAND"));
        data.insert(std::make_pair(0x109ec,"MEROITIC CURSIVE NUMBER NINETY THOUSAND"));
        data.insert(std::make_pair(0x109ed,"MEROITIC CURSIVE NUMBER ONE HUNDRED THOUSAND"));
        data.insert(std::make_pair(0x109ee,"MEROITIC CURSIVE NUMBER TWO HUNDRED THOUSAND"));
        data.insert(std::make_pair(0x109ef,"MEROITIC CURSIVE NUMBER THREE HUNDRED THOUSAND"));
        data.insert(std::make_pair(0x109f0,"MEROITIC CURSIVE NUMBER FOUR HUNDRED THOUSAND"));
        data.insert(std::make_pair(0x109f1,"MEROITIC CURSIVE NUMBER FIVE HUNDRED THOUSAND"));
        data.insert(std::make_pair(0x109f2,"MEROITIC CURSIVE NUMBER SIX HUNDRED THOUSAND"));
        data.insert(std::make_pair(0x109f3,"MEROITIC CURSIVE NUMBER SEVEN HUNDRED THOUSAND"));
        data.insert(std::make_pair(0x109f4,"MEROITIC CURSIVE NUMBER EIGHT HUNDRED THOUSAND"));
        data.insert(std::make_pair(0x109f5,"MEROITIC CURSIVE NUMBER NINE HUNDRED THOUSAND"));
        data.insert(std::make_pair(0x109f6,"MEROITIC CURSIVE FRACTION ONE TWELFTH"));
        data.insert(std::make_pair(0x109f7,"MEROITIC CURSIVE FRACTION TWO TWELFTHS"));
        data.insert(std::make_pair(0x109f8,"MEROITIC CURSIVE FRACTION THREE TWELFTHS"));
        data.insert(std::make_pair(0x109f9,"MEROITIC CURSIVE FRACTION FOUR TWELFTHS"));
        data.insert(std::make_pair(0x109fa,"MEROITIC CURSIVE FRACTION FIVE TWELFTHS"));
        data.insert(std::make_pair(0x109fb,"MEROITIC CURSIVE FRACTION SIX TWELFTHS"));
        data.insert(std::make_pair(0x109fc,"MEROITIC CURSIVE FRACTION SEVEN TWELFTHS"));
        data.insert(std::make_pair(0x109fd,"MEROITIC CURSIVE FRACTION EIGHT TWELFTHS"));
        data.insert(std::make_pair(0x109fe,"MEROITIC CURSIVE FRACTION NINE TWELFTHS"));
        data.insert(std::make_pair(0x109ff,"MEROITIC CURSIVE FRACTION TEN TWELFTHS"));
        data.insert(std::make_pair(0x10a00,"KHAROSHTHI LETTER A"));
        data.insert(std::make_pair(0x10a01,"KHAROSHTHI VOWEL SIGN I"));
        data.insert(std::make_pair(0x10a02,"KHAROSHTHI VOWEL SIGN U"));
        data.insert(std::make_pair(0x10a03,"KHAROSHTHI VOWEL SIGN VOCALIC R"));
        data.insert(std::make_pair(0x10a05,"KHAROSHTHI VOWEL SIGN E"));
        data.insert(std::make_pair(0x10a06,"KHAROSHTHI VOWEL SIGN O"));
        data.insert(std::make_pair(0x10a0c,"KHAROSHTHI VOWEL LENGTH MARK"));
        data.insert(std::make_pair(0x10a0d,"KHAROSHTHI SIGN DOUBLE RING BELOW"));
        data.insert(std::make_pair(0x10a0e,"KHAROSHTHI SIGN ANUSVARA"));
        data.insert(std::make_pair(0x10a0f,"KHAROSHTHI SIGN VISARGA"));
        data.insert(std::make_pair(0x10a10,"KHAROSHTHI LETTER KA"));
        data.insert(std::make_pair(0x10a11,"KHAROSHTHI LETTER KHA"));
        data.insert(std::make_pair(0x10a12,"KHAROSHTHI LETTER GA"));
        data.insert(std::make_pair(0x10a13,"KHAROSHTHI LETTER GHA"));
        data.insert(std::make_pair(0x10a15,"KHAROSHTHI LETTER CA"));
        data.insert(std::make_pair(0x10a16,"KHAROSHTHI LETTER CHA"));
        data.insert(std::make_pair(0x10a17,"KHAROSHTHI LETTER JA"));
        data.insert(std::make_pair(0x10a19,"KHAROSHTHI LETTER NYA"));
        data.insert(std::make_pair(0x10a1a,"KHAROSHTHI LETTER TTA"));
        data.insert(std::make_pair(0x10a1b,"KHAROSHTHI LETTER TTHA"));
        data.insert(std::make_pair(0x10a1c,"KHAROSHTHI LETTER DDA"));
        data.insert(std::make_pair(0x10a1d,"KHAROSHTHI LETTER DDHA"));
        data.insert(std::make_pair(0x10a1e,"KHAROSHTHI LETTER NNA"));
        data.insert(std::make_pair(0x10a1f,"KHAROSHTHI LETTER TA"));
        data.insert(std::make_pair(0x10a20,"KHAROSHTHI LETTER THA"));
        data.insert(std::make_pair(0x10a21,"KHAROSHTHI LETTER DA"));
        data.insert(std::make_pair(0x10a22,"KHAROSHTHI LETTER DHA"));
        data.insert(std::make_pair(0x10a23,"KHAROSHTHI LETTER NA"));
        data.insert(std::make_pair(0x10a24,"KHAROSHTHI LETTER PA"));
        data.insert(std::make_pair(0x10a25,"KHAROSHTHI LETTER PHA"));
        data.insert(std::make_pair(0x10a26,"KHAROSHTHI LETTER BA"));
        data.insert(std::make_pair(0x10a27,"KHAROSHTHI LETTER BHA"));
        data.insert(std::make_pair(0x10a28,"KHAROSHTHI LETTER MA"));
        data.insert(std::make_pair(0x10a29,"KHAROSHTHI LETTER YA"));
        data.insert(std::make_pair(0x10a2a,"KHAROSHTHI LETTER RA"));
        data.insert(std::make_pair(0x10a2b,"KHAROSHTHI LETTER LA"));
        data.insert(std::make_pair(0x10a2c,"KHAROSHTHI LETTER VA"));
        data.insert(std::make_pair(0x10a2d,"KHAROSHTHI LETTER SHA"));
        data.insert(std::make_pair(0x10a2e,"KHAROSHTHI LETTER SSA"));
        data.insert(std::make_pair(0x10a2f,"KHAROSHTHI LETTER SA"));
        data.insert(std::make_pair(0x10a30,"KHAROSHTHI LETTER ZA"));
        data.insert(std::make_pair(0x10a31,"KHAROSHTHI LETTER HA"));
        data.insert(std::make_pair(0x10a32,"KHAROSHTHI LETTER KKA"));
        data.insert(std::make_pair(0x10a33,"KHAROSHTHI LETTER TTTHA"));
        data.insert(std::make_pair(0x10a34,"KHAROSHTHI LETTER TTTA"));
        data.insert(std::make_pair(0x10a35,"KHAROSHTHI LETTER VHA"));
        data.insert(std::make_pair(0x10a38,"KHAROSHTHI SIGN BAR ABOVE"));
        data.insert(std::make_pair(0x10a39,"KHAROSHTHI SIGN CAUDA"));
        data.insert(std::make_pair(0x10a3a,"KHAROSHTHI SIGN DOT BELOW"));
        data.insert(std::make_pair(0x10a3f,"KHAROSHTHI VIRAMA"));
        data.insert(std::make_pair(0x10a40,"KHAROSHTHI DIGIT ONE"));
        data.insert(std::make_pair(0x10a41,"KHAROSHTHI DIGIT TWO"));
        data.insert(std::make_pair(0x10a42,"KHAROSHTHI DIGIT THREE"));
        data.insert(std::make_pair(0x10a43,"KHAROSHTHI DIGIT FOUR"));
        data.insert(std::make_pair(0x10a44,"KHAROSHTHI NUMBER TEN"));
        data.insert(std::make_pair(0x10a45,"KHAROSHTHI NUMBER TWENTY"));
        data.insert(std::make_pair(0x10a46,"KHAROSHTHI NUMBER ONE HUNDRED"));
        data.insert(std::make_pair(0x10a47,"KHAROSHTHI NUMBER ONE THOUSAND"));
        data.insert(std::make_pair(0x10a48,"KHAROSHTHI FRACTION ONE HALF"));
        data.insert(std::make_pair(0x10a50,"KHAROSHTHI PUNCTUATION DOT"));
        data.insert(std::make_pair(0x10a51,"KHAROSHTHI PUNCTUATION SMALL CIRCLE"));
        data.insert(std::make_pair(0x10a52,"KHAROSHTHI PUNCTUATION CIRCLE"));
        data.insert(std::make_pair(0x10a53,"KHAROSHTHI PUNCTUATION CRESCENT BAR"));
        data.insert(std::make_pair(0x10a54,"KHAROSHTHI PUNCTUATION MANGALAM"));
        data.insert(std::make_pair(0x10a55,"KHAROSHTHI PUNCTUATION LOTUS"));
        data.insert(std::make_pair(0x10a56,"KHAROSHTHI PUNCTUATION DANDA"));
        data.insert(std::make_pair(0x10a57,"KHAROSHTHI PUNCTUATION DOUBLE DANDA"));
        data.insert(std::make_pair(0x10a58,"KHAROSHTHI PUNCTUATION LINES"));
        data.insert(std::make_pair(0x10a60,"OLD SOUTH ARABIAN LETTER HE"));
        data.insert(std::make_pair(0x10a61,"OLD SOUTH ARABIAN LETTER LAMEDH"));
        data.insert(std::make_pair(0x10a62,"OLD SOUTH ARABIAN LETTER HETH"));
        data.insert(std::make_pair(0x10a63,"OLD SOUTH ARABIAN LETTER MEM"));
        data.insert(std::make_pair(0x10a64,"OLD SOUTH ARABIAN LETTER QOPH"));
        data.insert(std::make_pair(0x10a65,"OLD SOUTH ARABIAN LETTER WAW"));
        data.insert(std::make_pair(0x10a66,"OLD SOUTH ARABIAN LETTER SHIN"));
        data.insert(std::make_pair(0x10a67,"OLD SOUTH ARABIAN LETTER RESH"));
        data.insert(std::make_pair(0x10a68,"OLD SOUTH ARABIAN LETTER BETH"));
        data.insert(std::make_pair(0x10a69,"OLD SOUTH ARABIAN LETTER TAW"));
        data.insert(std::make_pair(0x10a6a,"OLD SOUTH ARABIAN LETTER SAT"));
        data.insert(std::make_pair(0x10a6b,"OLD SOUTH ARABIAN LETTER KAPH"));
        data.insert(std::make_pair(0x10a6c,"OLD SOUTH ARABIAN LETTER NUN"));
        data.insert(std::make_pair(0x10a6d,"OLD SOUTH ARABIAN LETTER KHETH"));
        data.insert(std::make_pair(0x10a6e,"OLD SOUTH ARABIAN LETTER SADHE"));
        data.insert(std::make_pair(0x10a6f,"OLD SOUTH ARABIAN LETTER SAMEKH"));
        data.insert(std::make_pair(0x10a70,"OLD SOUTH ARABIAN LETTER FE"));
        data.insert(std::make_pair(0x10a71,"OLD SOUTH ARABIAN LETTER ALEF"));
        data.insert(std::make_pair(0x10a72,"OLD SOUTH ARABIAN LETTER AYN"));
        data.insert(std::make_pair(0x10a73,"OLD SOUTH ARABIAN LETTER DHADHE"));
        data.insert(std::make_pair(0x10a74,"OLD SOUTH ARABIAN LETTER GIMEL"));
        data.insert(std::make_pair(0x10a75,"OLD SOUTH ARABIAN LETTER DALETH"));
        data.insert(std::make_pair(0x10a76,"OLD SOUTH ARABIAN LETTER GHAYN"));
        data.insert(std::make_pair(0x10a77,"OLD SOUTH ARABIAN LETTER TETH"));
        data.insert(std::make_pair(0x10a78,"OLD SOUTH ARABIAN LETTER ZAYN"));
        data.insert(std::make_pair(0x10a79,"OLD SOUTH ARABIAN LETTER DHALETH"));
        data.insert(std::make_pair(0x10a7a,"OLD SOUTH ARABIAN LETTER YODH"));
        data.insert(std::make_pair(0x10a7b,"OLD SOUTH ARABIAN LETTER THAW"));
        data.insert(std::make_pair(0x10a7c,"OLD SOUTH ARABIAN LETTER THETH"));
        data.insert(std::make_pair(0x10a7d,"OLD SOUTH ARABIAN NUMBER ONE"));
        data.insert(std::make_pair(0x10a7e,"OLD SOUTH ARABIAN NUMBER FIFTY"));
        data.insert(std::make_pair(0x10a7f,"OLD SOUTH ARABIAN NUMERIC INDICATOR"));
        data.insert(std::make_pair(0x10a80,"OLD NORTH ARABIAN LETTER HEH"));
        data.insert(std::make_pair(0x10a81,"OLD NORTH ARABIAN LETTER LAM"));
        data.insert(std::make_pair(0x10a82,"OLD NORTH ARABIAN LETTER HAH"));
        data.insert(std::make_pair(0x10a83,"OLD NORTH ARABIAN LETTER MEEM"));
        data.insert(std::make_pair(0x10a84,"OLD NORTH ARABIAN LETTER QAF"));
        data.insert(std::make_pair(0x10a85,"OLD NORTH ARABIAN LETTER WAW"));
        data.insert(std::make_pair(0x10a86,"OLD NORTH ARABIAN LETTER ES-2"));
        data.insert(std::make_pair(0x10a87,"OLD NORTH ARABIAN LETTER REH"));
        data.insert(std::make_pair(0x10a88,"OLD NORTH ARABIAN LETTER BEH"));
        data.insert(std::make_pair(0x10a89,"OLD NORTH ARABIAN LETTER TEH"));
        data.insert(std::make_pair(0x10a8a,"OLD NORTH ARABIAN LETTER ES-1"));
        data.insert(std::make_pair(0x10a8b,"OLD NORTH ARABIAN LETTER KAF"));
        data.insert(std::make_pair(0x10a8c,"OLD NORTH ARABIAN LETTER NOON"));
        data.insert(std::make_pair(0x10a8d,"OLD NORTH ARABIAN LETTER KHAH"));
        data.insert(std::make_pair(0x10a8e,"OLD NORTH ARABIAN LETTER SAD"));
        data.insert(std::make_pair(0x10a8f,"OLD NORTH ARABIAN LETTER ES-3"));
        data.insert(std::make_pair(0x10a90,"OLD NORTH ARABIAN LETTER FEH"));
        data.insert(std::make_pair(0x10a91,"OLD NORTH ARABIAN LETTER ALEF"));
        data.insert(std::make_pair(0x10a92,"OLD NORTH ARABIAN LETTER AIN"));
        data.insert(std::make_pair(0x10a93,"OLD NORTH ARABIAN LETTER DAD"));
        data.insert(std::make_pair(0x10a94,"OLD NORTH ARABIAN LETTER GEEM"));
        data.insert(std::make_pair(0x10a95,"OLD NORTH ARABIAN LETTER DAL"));
        data.insert(std::make_pair(0x10a96,"OLD NORTH ARABIAN LETTER GHAIN"));
        data.insert(std::make_pair(0x10a97,"OLD NORTH ARABIAN LETTER TAH"));
        data.insert(std::make_pair(0x10a98,"OLD NORTH ARABIAN LETTER ZAIN"));
        data.insert(std::make_pair(0x10a99,"OLD NORTH ARABIAN LETTER THAL"));
        data.insert(std::make_pair(0x10a9a,"OLD NORTH ARABIAN LETTER YEH"));
        data.insert(std::make_pair(0x10a9b,"OLD NORTH ARABIAN LETTER THEH"));
        data.insert(std::make_pair(0x10a9c,"OLD NORTH ARABIAN LETTER ZAH"));
        data.insert(std::make_pair(0x10a9d,"OLD NORTH ARABIAN NUMBER ONE"));
        data.insert(std::make_pair(0x10a9e,"OLD NORTH ARABIAN NUMBER TEN"));
        data.insert(std::make_pair(0x10a9f,"OLD NORTH ARABIAN NUMBER TWENTY"));
        data.insert(std::make_pair(0x10ac0,"MANICHAEAN LETTER ALEPH"));
        data.insert(std::make_pair(0x10ac1,"MANICHAEAN LETTER BETH"));
        data.insert(std::make_pair(0x10ac2,"MANICHAEAN LETTER BHETH"));
        data.insert(std::make_pair(0x10ac3,"MANICHAEAN LETTER GIMEL"));
        data.insert(std::make_pair(0x10ac4,"MANICHAEAN LETTER GHIMEL"));
        data.insert(std::make_pair(0x10ac5,"MANICHAEAN LETTER DALETH"));
        data.insert(std::make_pair(0x10ac6,"MANICHAEAN LETTER HE"));
        data.insert(std::make_pair(0x10ac7,"MANICHAEAN LETTER WAW"));
        data.insert(std::make_pair(0x10ac8,"MANICHAEAN SIGN UD"));
        data.insert(std::make_pair(0x10ac9,"MANICHAEAN LETTER ZAYIN"));
        data.insert(std::make_pair(0x10aca,"MANICHAEAN LETTER ZHAYIN"));
        data.insert(std::make_pair(0x10acb,"MANICHAEAN LETTER JAYIN"));
        data.insert(std::make_pair(0x10acc,"MANICHAEAN LETTER JHAYIN"));
        data.insert(std::make_pair(0x10acd,"MANICHAEAN LETTER HETH"));
        data.insert(std::make_pair(0x10ace,"MANICHAEAN LETTER TETH"));
        data.insert(std::make_pair(0x10acf,"MANICHAEAN LETTER YODH"));
        data.insert(std::make_pair(0x10ad0,"MANICHAEAN LETTER KAPH"));
        data.insert(std::make_pair(0x10ad1,"MANICHAEAN LETTER XAPH"));
        data.insert(std::make_pair(0x10ad2,"MANICHAEAN LETTER KHAPH"));
        data.insert(std::make_pair(0x10ad3,"MANICHAEAN LETTER LAMEDH"));
        data.insert(std::make_pair(0x10ad4,"MANICHAEAN LETTER DHAMEDH"));
        data.insert(std::make_pair(0x10ad5,"MANICHAEAN LETTER THAMEDH"));
        data.insert(std::make_pair(0x10ad6,"MANICHAEAN LETTER MEM"));
        data.insert(std::make_pair(0x10ad7,"MANICHAEAN LETTER NUN"));
        data.insert(std::make_pair(0x10ad8,"MANICHAEAN LETTER SAMEKH"));
        data.insert(std::make_pair(0x10ad9,"MANICHAEAN LETTER AYIN"));
        data.insert(std::make_pair(0x10ada,"MANICHAEAN LETTER AAYIN"));
        data.insert(std::make_pair(0x10adb,"MANICHAEAN LETTER PE"));
        data.insert(std::make_pair(0x10adc,"MANICHAEAN LETTER FE"));
        data.insert(std::make_pair(0x10add,"MANICHAEAN LETTER SADHE"));
        data.insert(std::make_pair(0x10ade,"MANICHAEAN LETTER QOPH"));
        data.insert(std::make_pair(0x10adf,"MANICHAEAN LETTER XOPH"));
        data.insert(std::make_pair(0x10ae0,"MANICHAEAN LETTER QHOPH"));
        data.insert(std::make_pair(0x10ae1,"MANICHAEAN LETTER RESH"));
        data.insert(std::make_pair(0x10ae2,"MANICHAEAN LETTER SHIN"));
        data.insert(std::make_pair(0x10ae3,"MANICHAEAN LETTER SSHIN"));
        data.insert(std::make_pair(0x10ae4,"MANICHAEAN LETTER TAW"));
        data.insert(std::make_pair(0x10ae5,"MANICHAEAN ABBREVIATION MARK ABOVE"));
        data.insert(std::make_pair(0x10ae6,"MANICHAEAN ABBREVIATION MARK BELOW"));
        data.insert(std::make_pair(0x10aeb,"MANICHAEAN NUMBER ONE"));
        data.insert(std::make_pair(0x10aec,"MANICHAEAN NUMBER FIVE"));
        data.insert(std::make_pair(0x10aed,"MANICHAEAN NUMBER TEN"));
        data.insert(std::make_pair(0x10aee,"MANICHAEAN NUMBER TWENTY"));
        data.insert(std::make_pair(0x10aef,"MANICHAEAN NUMBER ONE HUNDRED"));
        data.insert(std::make_pair(0x10af0,"MANICHAEAN PUNCTUATION STAR"));
        data.insert(std::make_pair(0x10af1,"MANICHAEAN PUNCTUATION FLEURON"));
        data.insert(std::make_pair(0x10af2,"MANICHAEAN PUNCTUATION DOUBLE DOT WITHIN DOT"));
        data.insert(std::make_pair(0x10af3,"MANICHAEAN PUNCTUATION DOT WITHIN DOT"));
        data.insert(std::make_pair(0x10af4,"MANICHAEAN PUNCTUATION DOT"));
        data.insert(std::make_pair(0x10af5,"MANICHAEAN PUNCTUATION TWO DOTS"));
        data.insert(std::make_pair(0x10af6,"MANICHAEAN PUNCTUATION LINE FILLER"));
        data.insert(std::make_pair(0x10b00,"AVESTAN LETTER A"));
        data.insert(std::make_pair(0x10b01,"AVESTAN LETTER AA"));
        data.insert(std::make_pair(0x10b02,"AVESTAN LETTER AO"));
        data.insert(std::make_pair(0x10b03,"AVESTAN LETTER AAO"));
        data.insert(std::make_pair(0x10b04,"AVESTAN LETTER AN"));
        data.insert(std::make_pair(0x10b05,"AVESTAN LETTER AAN"));
        data.insert(std::make_pair(0x10b06,"AVESTAN LETTER AE"));
        data.insert(std::make_pair(0x10b07,"AVESTAN LETTER AEE"));
        data.insert(std::make_pair(0x10b08,"AVESTAN LETTER E"));
        data.insert(std::make_pair(0x10b09,"AVESTAN LETTER EE"));
        data.insert(std::make_pair(0x10b0a,"AVESTAN LETTER O"));
        data.insert(std::make_pair(0x10b0b,"AVESTAN LETTER OO"));
        data.insert(std::make_pair(0x10b0c,"AVESTAN LETTER I"));
        data.insert(std::make_pair(0x10b0d,"AVESTAN LETTER II"));
        data.insert(std::make_pair(0x10b0e,"AVESTAN LETTER U"));
        data.insert(std::make_pair(0x10b0f,"AVESTAN LETTER UU"));
        data.insert(std::make_pair(0x10b10,"AVESTAN LETTER KE"));
        data.insert(std::make_pair(0x10b11,"AVESTAN LETTER XE"));
        data.insert(std::make_pair(0x10b12,"AVESTAN LETTER XYE"));
        data.insert(std::make_pair(0x10b13,"AVESTAN LETTER XVE"));
        data.insert(std::make_pair(0x10b14,"AVESTAN LETTER GE"));
        data.insert(std::make_pair(0x10b15,"AVESTAN LETTER GGE"));
        data.insert(std::make_pair(0x10b16,"AVESTAN LETTER GHE"));
        data.insert(std::make_pair(0x10b17,"AVESTAN LETTER CE"));
        data.insert(std::make_pair(0x10b18,"AVESTAN LETTER JE"));
        data.insert(std::make_pair(0x10b19,"AVESTAN LETTER TE"));
        data.insert(std::make_pair(0x10b1a,"AVESTAN LETTER THE"));
        data.insert(std::make_pair(0x10b1b,"AVESTAN LETTER DE"));
        data.insert(std::make_pair(0x10b1c,"AVESTAN LETTER DHE"));
        data.insert(std::make_pair(0x10b1d,"AVESTAN LETTER TTE"));
        data.insert(std::make_pair(0x10b1e,"AVESTAN LETTER PE"));
        data.insert(std::make_pair(0x10b1f,"AVESTAN LETTER FE"));
        data.insert(std::make_pair(0x10b20,"AVESTAN LETTER BE"));
        data.insert(std::make_pair(0x10b21,"AVESTAN LETTER BHE"));
        data.insert(std::make_pair(0x10b22,"AVESTAN LETTER NGE"));
        data.insert(std::make_pair(0x10b23,"AVESTAN LETTER NGYE"));
        data.insert(std::make_pair(0x10b24,"AVESTAN LETTER NGVE"));
        data.insert(std::make_pair(0x10b25,"AVESTAN LETTER NE"));
        data.insert(std::make_pair(0x10b26,"AVESTAN LETTER NYE"));
        data.insert(std::make_pair(0x10b27,"AVESTAN LETTER NNE"));
        data.insert(std::make_pair(0x10b28,"AVESTAN LETTER ME"));
        data.insert(std::make_pair(0x10b29,"AVESTAN LETTER HME"));
        data.insert(std::make_pair(0x10b2a,"AVESTAN LETTER YYE"));
        data.insert(std::make_pair(0x10b2b,"AVESTAN LETTER YE"));
        data.insert(std::make_pair(0x10b2c,"AVESTAN LETTER VE"));
        data.insert(std::make_pair(0x10b2d,"AVESTAN LETTER RE"));
        data.insert(std::make_pair(0x10b2e,"AVESTAN LETTER LE"));
        data.insert(std::make_pair(0x10b2f,"AVESTAN LETTER SE"));
        data.insert(std::make_pair(0x10b30,"AVESTAN LETTER ZE"));
        data.insert(std::make_pair(0x10b31,"AVESTAN LETTER SHE"));
        data.insert(std::make_pair(0x10b32,"AVESTAN LETTER ZHE"));
        data.insert(std::make_pair(0x10b33,"AVESTAN LETTER SHYE"));
        data.insert(std::make_pair(0x10b34,"AVESTAN LETTER SSHE"));
        data.insert(std::make_pair(0x10b35,"AVESTAN LETTER HE"));
        data.insert(std::make_pair(0x10b39,"AVESTAN ABBREVIATION MARK"));
        data.insert(std::make_pair(0x10b3a,"TINY TWO DOTS OVER ONE DOT PUNCTUATION"));
        data.insert(std::make_pair(0x10b3b,"SMALL TWO DOTS OVER ONE DOT PUNCTUATION"));
        data.insert(std::make_pair(0x10b3c,"LARGE TWO DOTS OVER ONE DOT PUNCTUATION"));
        data.insert(std::make_pair(0x10b3d,"LARGE ONE DOT OVER TWO DOTS PUNCTUATION"));
        data.insert(std::make_pair(0x10b3e,"LARGE TWO RINGS OVER ONE RING PUNCTUATION"));
        data.insert(std::make_pair(0x10b3f,"LARGE ONE RING OVER TWO RINGS PUNCTUATION"));
        data.insert(std::make_pair(0x10b40,"INSCRIPTIONAL PARTHIAN LETTER ALEPH"));
        data.insert(std::make_pair(0x10b41,"INSCRIPTIONAL PARTHIAN LETTER BETH"));
        data.insert(std::make_pair(0x10b42,"INSCRIPTIONAL PARTHIAN LETTER GIMEL"));
        data.insert(std::make_pair(0x10b43,"INSCRIPTIONAL PARTHIAN LETTER DALETH"));
        data.insert(std::make_pair(0x10b44,"INSCRIPTIONAL PARTHIAN LETTER HE"));
        data.insert(std::make_pair(0x10b45,"INSCRIPTIONAL PARTHIAN LETTER WAW"));
        data.insert(std::make_pair(0x10b46,"INSCRIPTIONAL PARTHIAN LETTER ZAYIN"));
        data.insert(std::make_pair(0x10b47,"INSCRIPTIONAL PARTHIAN LETTER HETH"));
        data.insert(std::make_pair(0x10b48,"INSCRIPTIONAL PARTHIAN LETTER TETH"));
        data.insert(std::make_pair(0x10b49,"INSCRIPTIONAL PARTHIAN LETTER YODH"));
        data.insert(std::make_pair(0x10b4a,"INSCRIPTIONAL PARTHIAN LETTER KAPH"));
        data.insert(std::make_pair(0x10b4b,"INSCRIPTIONAL PARTHIAN LETTER LAMEDH"));
        data.insert(std::make_pair(0x10b4c,"INSCRIPTIONAL PARTHIAN LETTER MEM"));
        data.insert(std::make_pair(0x10b4d,"INSCRIPTIONAL PARTHIAN LETTER NUN"));
        data.insert(std::make_pair(0x10b4e,"INSCRIPTIONAL PARTHIAN LETTER SAMEKH"));
        data.insert(std::make_pair(0x10b4f,"INSCRIPTIONAL PARTHIAN LETTER AYIN"));
        data.insert(std::make_pair(0x10b50,"INSCRIPTIONAL PARTHIAN LETTER PE"));
        data.insert(std::make_pair(0x10b51,"INSCRIPTIONAL PARTHIAN LETTER SADHE"));
        data.insert(std::make_pair(0x10b52,"INSCRIPTIONAL PARTHIAN LETTER QOPH"));
        data.insert(std::make_pair(0x10b53,"INSCRIPTIONAL PARTHIAN LETTER RESH"));
        data.insert(std::make_pair(0x10b54,"INSCRIPTIONAL PARTHIAN LETTER SHIN"));
        data.insert(std::make_pair(0x10b55,"INSCRIPTIONAL PARTHIAN LETTER TAW"));
        data.insert(std::make_pair(0x10b58,"INSCRIPTIONAL PARTHIAN NUMBER ONE"));
        data.insert(std::make_pair(0x10b59,"INSCRIPTIONAL PARTHIAN NUMBER TWO"));
        data.insert(std::make_pair(0x10b5a,"INSCRIPTIONAL PARTHIAN NUMBER THREE"));
        data.insert(std::make_pair(0x10b5b,"INSCRIPTIONAL PARTHIAN NUMBER FOUR"));
        data.insert(std::make_pair(0x10b5c,"INSCRIPTIONAL PARTHIAN NUMBER TEN"));
        data.insert(std::make_pair(0x10b5d,"INSCRIPTIONAL PARTHIAN NUMBER TWENTY"));
        data.insert(std::make_pair(0x10b5e,"INSCRIPTIONAL PARTHIAN NUMBER ONE HUNDRED"));
        data.insert(std::make_pair(0x10b5f,"INSCRIPTIONAL PARTHIAN NUMBER ONE THOUSAND"));
        data.insert(std::make_pair(0x10b60,"INSCRIPTIONAL PAHLAVI LETTER ALEPH"));
        data.insert(std::make_pair(0x10b61,"INSCRIPTIONAL PAHLAVI LETTER BETH"));
        data.insert(std::make_pair(0x10b62,"INSCRIPTIONAL PAHLAVI LETTER GIMEL"));
        data.insert(std::make_pair(0x10b63,"INSCRIPTIONAL PAHLAVI LETTER DALETH"));
        data.insert(std::make_pair(0x10b64,"INSCRIPTIONAL PAHLAVI LETTER HE"));
        data.insert(std::make_pair(0x10b65,"INSCRIPTIONAL PAHLAVI LETTER WAW-AYIN-RESH"));
        data.insert(std::make_pair(0x10b66,"INSCRIPTIONAL PAHLAVI LETTER ZAYIN"));
        data.insert(std::make_pair(0x10b67,"INSCRIPTIONAL PAHLAVI LETTER HETH"));
        data.insert(std::make_pair(0x10b68,"INSCRIPTIONAL PAHLAVI LETTER TETH"));
        data.insert(std::make_pair(0x10b69,"INSCRIPTIONAL PAHLAVI LETTER YODH"));
        data.insert(std::make_pair(0x10b6a,"INSCRIPTIONAL PAHLAVI LETTER KAPH"));
        data.insert(std::make_pair(0x10b6b,"INSCRIPTIONAL PAHLAVI LETTER LAMEDH"));
        data.insert(std::make_pair(0x10b6c,"INSCRIPTIONAL PAHLAVI LETTER MEM-QOPH"));
        data.insert(std::make_pair(0x10b6d,"INSCRIPTIONAL PAHLAVI LETTER NUN"));
        data.insert(std::make_pair(0x10b6e,"INSCRIPTIONAL PAHLAVI LETTER SAMEKH"));
        data.insert(std::make_pair(0x10b6f,"INSCRIPTIONAL PAHLAVI LETTER PE"));
        data.insert(std::make_pair(0x10b70,"INSCRIPTIONAL PAHLAVI LETTER SADHE"));
        data.insert(std::make_pair(0x10b71,"INSCRIPTIONAL PAHLAVI LETTER SHIN"));
        data.insert(std::make_pair(0x10b72,"INSCRIPTIONAL PAHLAVI LETTER TAW"));
        data.insert(std::make_pair(0x10b78,"INSCRIPTIONAL PAHLAVI NUMBER ONE"));
        data.insert(std::make_pair(0x10b79,"INSCRIPTIONAL PAHLAVI NUMBER TWO"));
        data.insert(std::make_pair(0x10b7a,"INSCRIPTIONAL PAHLAVI NUMBER THREE"));
        data.insert(std::make_pair(0x10b7b,"INSCRIPTIONAL PAHLAVI NUMBER FOUR"));
        data.insert(std::make_pair(0x10b7c,"INSCRIPTIONAL PAHLAVI NUMBER TEN"));
        data.insert(std::make_pair(0x10b7d,"INSCRIPTIONAL PAHLAVI NUMBER TWENTY"));
        data.insert(std::make_pair(0x10b7e,"INSCRIPTIONAL PAHLAVI NUMBER ONE HUNDRED"));
        data.insert(std::make_pair(0x10b7f,"INSCRIPTIONAL PAHLAVI NUMBER ONE THOUSAND"));
        data.insert(std::make_pair(0x10b80,"PSALTER PAHLAVI LETTER ALEPH"));
        data.insert(std::make_pair(0x10b81,"PSALTER PAHLAVI LETTER BETH"));
        data.insert(std::make_pair(0x10b82,"PSALTER PAHLAVI LETTER GIMEL"));
        data.insert(std::make_pair(0x10b83,"PSALTER PAHLAVI LETTER DALETH"));
        data.insert(std::make_pair(0x10b84,"PSALTER PAHLAVI LETTER HE"));
        data.insert(std::make_pair(0x10b85,"PSALTER PAHLAVI LETTER WAW-AYIN-RESH"));
        data.insert(std::make_pair(0x10b86,"PSALTER PAHLAVI LETTER ZAYIN"));
        data.insert(std::make_pair(0x10b87,"PSALTER PAHLAVI LETTER HETH"));
        data.insert(std::make_pair(0x10b88,"PSALTER PAHLAVI LETTER YODH"));
        data.insert(std::make_pair(0x10b89,"PSALTER PAHLAVI LETTER KAPH"));
        data.insert(std::make_pair(0x10b8a,"PSALTER PAHLAVI LETTER LAMEDH"));
        data.insert(std::make_pair(0x10b8b,"PSALTER PAHLAVI LETTER MEM-QOPH"));
        data.insert(std::make_pair(0x10b8c,"PSALTER PAHLAVI LETTER NUN"));
        data.insert(std::make_pair(0x10b8d,"PSALTER PAHLAVI LETTER SAMEKH"));
        data.insert(std::make_pair(0x10b8e,"PSALTER PAHLAVI LETTER PE"));
        data.insert(std::make_pair(0x10b8f,"PSALTER PAHLAVI LETTER SADHE"));
        data.insert(std::make_pair(0x10b90,"PSALTER PAHLAVI LETTER SHIN"));
        data.insert(std::make_pair(0x10b91,"PSALTER PAHLAVI LETTER TAW"));
        data.insert(std::make_pair(0x10b99,"PSALTER PAHLAVI SECTION MARK"));
        data.insert(std::make_pair(0x10b9a,"PSALTER PAHLAVI TURNED SECTION MARK"));
        data.insert(std::make_pair(0x10b9b,"PSALTER PAHLAVI FOUR DOTS WITH CROSS"));
        data.insert(std::make_pair(0x10b9c,"PSALTER PAHLAVI FOUR DOTS WITH DOT"));
        data.insert(std::make_pair(0x10ba9,"PSALTER PAHLAVI NUMBER ONE"));
        data.insert(std::make_pair(0x10baa,"PSALTER PAHLAVI NUMBER TWO"));
        data.insert(std::make_pair(0x10bab,"PSALTER PAHLAVI NUMBER THREE"));
        data.insert(std::make_pair(0x10bac,"PSALTER PAHLAVI NUMBER FOUR"));
        data.insert(std::make_pair(0x10bad,"PSALTER PAHLAVI NUMBER TEN"));
        data.insert(std::make_pair(0x10bae,"PSALTER PAHLAVI NUMBER TWENTY"));
        data.insert(std::make_pair(0x10baf,"PSALTER PAHLAVI NUMBER ONE HUNDRED"));
        data.insert(std::make_pair(0x10c00,"OLD TURKIC LETTER ORKHON A"));
        data.insert(std::make_pair(0x10c01,"OLD TURKIC LETTER YENISEI A"));
        data.insert(std::make_pair(0x10c02,"OLD TURKIC LETTER YENISEI AE"));
        data.insert(std::make_pair(0x10c03,"OLD TURKIC LETTER ORKHON I"));
        data.insert(std::make_pair(0x10c04,"OLD TURKIC LETTER YENISEI I"));
        data.insert(std::make_pair(0x10c05,"OLD TURKIC LETTER YENISEI E"));
        data.insert(std::make_pair(0x10c06,"OLD TURKIC LETTER ORKHON O"));
        data.insert(std::make_pair(0x10c07,"OLD TURKIC LETTER ORKHON OE"));
        data.insert(std::make_pair(0x10c08,"OLD TURKIC LETTER YENISEI OE"));
        data.insert(std::make_pair(0x10c09,"OLD TURKIC LETTER ORKHON AB"));
        data.insert(std::make_pair(0x10c0a,"OLD TURKIC LETTER YENISEI AB"));
        data.insert(std::make_pair(0x10c0b,"OLD TURKIC LETTER ORKHON AEB"));
        data.insert(std::make_pair(0x10c0c,"OLD TURKIC LETTER YENISEI AEB"));
        data.insert(std::make_pair(0x10c0d,"OLD TURKIC LETTER ORKHON AG"));
        data.insert(std::make_pair(0x10c0e,"OLD TURKIC LETTER YENISEI AG"));
        data.insert(std::make_pair(0x10c0f,"OLD TURKIC LETTER ORKHON AEG"));
        data.insert(std::make_pair(0x10c10,"OLD TURKIC LETTER YENISEI AEG"));
        data.insert(std::make_pair(0x10c11,"OLD TURKIC LETTER ORKHON AD"));
        data.insert(std::make_pair(0x10c12,"OLD TURKIC LETTER YENISEI AD"));
        data.insert(std::make_pair(0x10c13,"OLD TURKIC LETTER ORKHON AED"));
        data.insert(std::make_pair(0x10c14,"OLD TURKIC LETTER ORKHON EZ"));
        data.insert(std::make_pair(0x10c15,"OLD TURKIC LETTER YENISEI EZ"));
        data.insert(std::make_pair(0x10c16,"OLD TURKIC LETTER ORKHON AY"));
        data.insert(std::make_pair(0x10c17,"OLD TURKIC LETTER YENISEI AY"));
        data.insert(std::make_pair(0x10c18,"OLD TURKIC LETTER ORKHON AEY"));
        data.insert(std::make_pair(0x10c19,"OLD TURKIC LETTER YENISEI AEY"));
        data.insert(std::make_pair(0x10c1a,"OLD TURKIC LETTER ORKHON AEK"));
        data.insert(std::make_pair(0x10c1b,"OLD TURKIC LETTER YENISEI AEK"));
        data.insert(std::make_pair(0x10c1c,"OLD TURKIC LETTER ORKHON OEK"));
        data.insert(std::make_pair(0x10c1d,"OLD TURKIC LETTER YENISEI OEK"));
        data.insert(std::make_pair(0x10c1e,"OLD TURKIC LETTER ORKHON AL"));
        data.insert(std::make_pair(0x10c1f,"OLD TURKIC LETTER YENISEI AL"));
        data.insert(std::make_pair(0x10c20,"OLD TURKIC LETTER ORKHON AEL"));
        data.insert(std::make_pair(0x10c21,"OLD TURKIC LETTER ORKHON ELT"));
        data.insert(std::make_pair(0x10c22,"OLD TURKIC LETTER ORKHON EM"));
        data.insert(std::make_pair(0x10c23,"OLD TURKIC LETTER ORKHON AN"));
        data.insert(std::make_pair(0x10c24,"OLD TURKIC LETTER ORKHON AEN"));
        data.insert(std::make_pair(0x10c25,"OLD TURKIC LETTER YENISEI AEN"));
        data.insert(std::make_pair(0x10c26,"OLD TURKIC LETTER ORKHON ENT"));
        data.insert(std::make_pair(0x10c27,"OLD TURKIC LETTER YENISEI ENT"));
        data.insert(std::make_pair(0x10c28,"OLD TURKIC LETTER ORKHON ENC"));
        data.insert(std::make_pair(0x10c29,"OLD TURKIC LETTER YENISEI ENC"));
        data.insert(std::make_pair(0x10c2a,"OLD TURKIC LETTER ORKHON ENY"));
        data.insert(std::make_pair(0x10c2b,"OLD TURKIC LETTER YENISEI ENY"));
        data.insert(std::make_pair(0x10c2c,"OLD TURKIC LETTER YENISEI ANG"));
        data.insert(std::make_pair(0x10c2d,"OLD TURKIC LETTER ORKHON ENG"));
        data.insert(std::make_pair(0x10c2e,"OLD TURKIC LETTER YENISEI AENG"));
        data.insert(std::make_pair(0x10c2f,"OLD TURKIC LETTER ORKHON EP"));
        data.insert(std::make_pair(0x10c30,"OLD TURKIC LETTER ORKHON OP"));
        data.insert(std::make_pair(0x10c31,"OLD TURKIC LETTER ORKHON IC"));
        data.insert(std::make_pair(0x10c32,"OLD TURKIC LETTER ORKHON EC"));
        data.insert(std::make_pair(0x10c33,"OLD TURKIC LETTER YENISEI EC"));
        data.insert(std::make_pair(0x10c34,"OLD TURKIC LETTER ORKHON AQ"));
        data.insert(std::make_pair(0x10c35,"OLD TURKIC LETTER YENISEI AQ"));
        data.insert(std::make_pair(0x10c36,"OLD TURKIC LETTER ORKHON IQ"));
        data.insert(std::make_pair(0x10c37,"OLD TURKIC LETTER YENISEI IQ"));
        data.insert(std::make_pair(0x10c38,"OLD TURKIC LETTER ORKHON OQ"));
        data.insert(std::make_pair(0x10c39,"OLD TURKIC LETTER YENISEI OQ"));
        data.insert(std::make_pair(0x10c3a,"OLD TURKIC LETTER ORKHON AR"));
        data.insert(std::make_pair(0x10c3b,"OLD TURKIC LETTER YENISEI AR"));
        data.insert(std::make_pair(0x10c3c,"OLD TURKIC LETTER ORKHON AER"));
        data.insert(std::make_pair(0x10c3d,"OLD TURKIC LETTER ORKHON AS"));
        data.insert(std::make_pair(0x10c3e,"OLD TURKIC LETTER ORKHON AES"));
        data.insert(std::make_pair(0x10c3f,"OLD TURKIC LETTER ORKHON ASH"));
        data.insert(std::make_pair(0x10c40,"OLD TURKIC LETTER YENISEI ASH"));
        data.insert(std::make_pair(0x10c41,"OLD TURKIC LETTER ORKHON ESH"));
        data.insert(std::make_pair(0x10c42,"OLD TURKIC LETTER YENISEI ESH"));
        data.insert(std::make_pair(0x10c43,"OLD TURKIC LETTER ORKHON AT"));
        data.insert(std::make_pair(0x10c44,"OLD TURKIC LETTER YENISEI AT"));
        data.insert(std::make_pair(0x10c45,"OLD TURKIC LETTER ORKHON AET"));
        data.insert(std::make_pair(0x10c46,"OLD TURKIC LETTER YENISEI AET"));
        data.insert(std::make_pair(0x10c47,"OLD TURKIC LETTER ORKHON OT"));
        data.insert(std::make_pair(0x10c48,"OLD TURKIC LETTER ORKHON BASH"));
        data.insert(std::make_pair(0x10c80,"OLD HUNGARIAN CAPITAL LETTER A"));
        data.insert(std::make_pair(0x10c81,"OLD HUNGARIAN CAPITAL LETTER AA"));
        data.insert(std::make_pair(0x10c82,"OLD HUNGARIAN CAPITAL LETTER EB"));
        data.insert(std::make_pair(0x10c83,"OLD HUNGARIAN CAPITAL LETTER AMB"));
        data.insert(std::make_pair(0x10c84,"OLD HUNGARIAN CAPITAL LETTER EC"));
        data.insert(std::make_pair(0x10c85,"OLD HUNGARIAN CAPITAL LETTER ENC"));
        data.insert(std::make_pair(0x10c86,"OLD HUNGARIAN CAPITAL LETTER ECS"));
        data.insert(std::make_pair(0x10c87,"OLD HUNGARIAN CAPITAL LETTER ED"));
        data.insert(std::make_pair(0x10c88,"OLD HUNGARIAN CAPITAL LETTER AND"));
        data.insert(std::make_pair(0x10c89,"OLD HUNGARIAN CAPITAL LETTER E"));
        data.insert(std::make_pair(0x10c8a,"OLD HUNGARIAN CAPITAL LETTER CLOSE E"));
        data.insert(std::make_pair(0x10c8b,"OLD HUNGARIAN CAPITAL LETTER EE"));
        data.insert(std::make_pair(0x10c8c,"OLD HUNGARIAN CAPITAL LETTER EF"));
        data.insert(std::make_pair(0x10c8d,"OLD HUNGARIAN CAPITAL LETTER EG"));
        data.insert(std::make_pair(0x10c8e,"OLD HUNGARIAN CAPITAL LETTER EGY"));
        data.insert(std::make_pair(0x10c8f,"OLD HUNGARIAN CAPITAL LETTER EH"));
        data.insert(std::make_pair(0x10c90,"OLD HUNGARIAN CAPITAL LETTER I"));
        data.insert(std::make_pair(0x10c91,"OLD HUNGARIAN CAPITAL LETTER II"));
        data.insert(std::make_pair(0x10c92,"OLD HUNGARIAN CAPITAL LETTER EJ"));
        data.insert(std::make_pair(0x10c93,"OLD HUNGARIAN CAPITAL LETTER EK"));
        data.insert(std::make_pair(0x10c94,"OLD HUNGARIAN CAPITAL LETTER AK"));
        data.insert(std::make_pair(0x10c95,"OLD HUNGARIAN CAPITAL LETTER UNK"));
        data.insert(std::make_pair(0x10c96,"OLD HUNGARIAN CAPITAL LETTER EL"));
        data.insert(std::make_pair(0x10c97,"OLD HUNGARIAN CAPITAL LETTER ELY"));
        data.insert(std::make_pair(0x10c98,"OLD HUNGARIAN CAPITAL LETTER EM"));
        data.insert(std::make_pair(0x10c99,"OLD HUNGARIAN CAPITAL LETTER EN"));
        data.insert(std::make_pair(0x10c9a,"OLD HUNGARIAN CAPITAL LETTER ENY"));
        data.insert(std::make_pair(0x10c9b,"OLD HUNGARIAN CAPITAL LETTER O"));
        data.insert(std::make_pair(0x10c9c,"OLD HUNGARIAN CAPITAL LETTER OO"));
        data.insert(std::make_pair(0x10c9d,"OLD HUNGARIAN CAPITAL LETTER NIKOLSBURG OE"));
        data.insert(std::make_pair(0x10c9e,"OLD HUNGARIAN CAPITAL LETTER RUDIMENTA OE"));
        data.insert(std::make_pair(0x10c9f,"OLD HUNGARIAN CAPITAL LETTER OEE"));
        data.insert(std::make_pair(0x10ca0,"OLD HUNGARIAN CAPITAL LETTER EP"));
        data.insert(std::make_pair(0x10ca1,"OLD HUNGARIAN CAPITAL LETTER EMP"));
        data.insert(std::make_pair(0x10ca2,"OLD HUNGARIAN CAPITAL LETTER ER"));
        data.insert(std::make_pair(0x10ca3,"OLD HUNGARIAN CAPITAL LETTER SHORT ER"));
        data.insert(std::make_pair(0x10ca4,"OLD HUNGARIAN CAPITAL LETTER ES"));
        data.insert(std::make_pair(0x10ca5,"OLD HUNGARIAN CAPITAL LETTER ESZ"));
        data.insert(std::make_pair(0x10ca6,"OLD HUNGARIAN CAPITAL LETTER ET"));
        data.insert(std::make_pair(0x10ca7,"OLD HUNGARIAN CAPITAL LETTER ENT"));
        data.insert(std::make_pair(0x10ca8,"OLD HUNGARIAN CAPITAL LETTER ETY"));
        data.insert(std::make_pair(0x10ca9,"OLD HUNGARIAN CAPITAL LETTER ECH"));
        data.insert(std::make_pair(0x10caa,"OLD HUNGARIAN CAPITAL LETTER U"));
        data.insert(std::make_pair(0x10cab,"OLD HUNGARIAN CAPITAL LETTER UU"));
        data.insert(std::make_pair(0x10cac,"OLD HUNGARIAN CAPITAL LETTER NIKOLSBURG UE"));
        data.insert(std::make_pair(0x10cad,"OLD HUNGARIAN CAPITAL LETTER RUDIMENTA UE"));
        data.insert(std::make_pair(0x10cae,"OLD HUNGARIAN CAPITAL LETTER EV"));
        data.insert(std::make_pair(0x10caf,"OLD HUNGARIAN CAPITAL LETTER EZ"));
        data.insert(std::make_pair(0x10cb0,"OLD HUNGARIAN CAPITAL LETTER EZS"));
        data.insert(std::make_pair(0x10cb1,"OLD HUNGARIAN CAPITAL LETTER ENT-SHAPED SIGN"));
        data.insert(std::make_pair(0x10cb2,"OLD HUNGARIAN CAPITAL LETTER US"));
        data.insert(std::make_pair(0x10cc0,"OLD HUNGARIAN SMALL LETTER A"));
        data.insert(std::make_pair(0x10cc1,"OLD HUNGARIAN SMALL LETTER AA"));
        data.insert(std::make_pair(0x10cc2,"OLD HUNGARIAN SMALL LETTER EB"));
        data.insert(std::make_pair(0x10cc3,"OLD HUNGARIAN SMALL LETTER AMB"));
        data.insert(std::make_pair(0x10cc4,"OLD HUNGARIAN SMALL LETTER EC"));
        data.insert(std::make_pair(0x10cc5,"OLD HUNGARIAN SMALL LETTER ENC"));
        data.insert(std::make_pair(0x10cc6,"OLD HUNGARIAN SMALL LETTER ECS"));
        data.insert(std::make_pair(0x10cc7,"OLD HUNGARIAN SMALL LETTER ED"));
        data.insert(std::make_pair(0x10cc8,"OLD HUNGARIAN SMALL LETTER AND"));
        data.insert(std::make_pair(0x10cc9,"OLD HUNGARIAN SMALL LETTER E"));
        data.insert(std::make_pair(0x10cca,"OLD HUNGARIAN SMALL LETTER CLOSE E"));
        data.insert(std::make_pair(0x10ccb,"OLD HUNGARIAN SMALL LETTER EE"));
        data.insert(std::make_pair(0x10ccc,"OLD HUNGARIAN SMALL LETTER EF"));
        data.insert(std::make_pair(0x10ccd,"OLD HUNGARIAN SMALL LETTER EG"));
        data.insert(std::make_pair(0x10cce,"OLD HUNGARIAN SMALL LETTER EGY"));
        data.insert(std::make_pair(0x10ccf,"OLD HUNGARIAN SMALL LETTER EH"));
        data.insert(std::make_pair(0x10cd0,"OLD HUNGARIAN SMALL LETTER I"));
        data.insert(std::make_pair(0x10cd1,"OLD HUNGARIAN SMALL LETTER II"));
        data.insert(std::make_pair(0x10cd2,"OLD HUNGARIAN SMALL LETTER EJ"));
        data.insert(std::make_pair(0x10cd3,"OLD HUNGARIAN SMALL LETTER EK"));
        data.insert(std::make_pair(0x10cd4,"OLD HUNGARIAN SMALL LETTER AK"));
        data.insert(std::make_pair(0x10cd5,"OLD HUNGARIAN SMALL LETTER UNK"));
        data.insert(std::make_pair(0x10cd6,"OLD HUNGARIAN SMALL LETTER EL"));
        data.insert(std::make_pair(0x10cd7,"OLD HUNGARIAN SMALL LETTER ELY"));
        data.insert(std::make_pair(0x10cd8,"OLD HUNGARIAN SMALL LETTER EM"));
        data.insert(std::make_pair(0x10cd9,"OLD HUNGARIAN SMALL LETTER EN"));
        data.insert(std::make_pair(0x10cda,"OLD HUNGARIAN SMALL LETTER ENY"));
        data.insert(std::make_pair(0x10cdb,"OLD HUNGARIAN SMALL LETTER O"));
        data.insert(std::make_pair(0x10cdc,"OLD HUNGARIAN SMALL LETTER OO"));
        data.insert(std::make_pair(0x10cdd,"OLD HUNGARIAN SMALL LETTER NIKOLSBURG OE"));
        data.insert(std::make_pair(0x10cde,"OLD HUNGARIAN SMALL LETTER RUDIMENTA OE"));
        data.insert(std::make_pair(0x10cdf,"OLD HUNGARIAN SMALL LETTER OEE"));
        data.insert(std::make_pair(0x10ce0,"OLD HUNGARIAN SMALL LETTER EP"));
        data.insert(std::make_pair(0x10ce1,"OLD HUNGARIAN SMALL LETTER EMP"));
        data.insert(std::make_pair(0x10ce2,"OLD HUNGARIAN SMALL LETTER ER"));
        data.insert(std::make_pair(0x10ce3,"OLD HUNGARIAN SMALL LETTER SHORT ER"));
        data.insert(std::make_pair(0x10ce4,"OLD HUNGARIAN SMALL LETTER ES"));
        data.insert(std::make_pair(0x10ce5,"OLD HUNGARIAN SMALL LETTER ESZ"));
        data.insert(std::make_pair(0x10ce6,"OLD HUNGARIAN SMALL LETTER ET"));
        data.insert(std::make_pair(0x10ce7,"OLD HUNGARIAN SMALL LETTER ENT"));
        data.insert(std::make_pair(0x10ce8,"OLD HUNGARIAN SMALL LETTER ETY"));
        data.insert(std::make_pair(0x10ce9,"OLD HUNGARIAN SMALL LETTER ECH"));
        data.insert(std::make_pair(0x10cea,"OLD HUNGARIAN SMALL LETTER U"));
        data.insert(std::make_pair(0x10ceb,"OLD HUNGARIAN SMALL LETTER UU"));
        data.insert(std::make_pair(0x10cec,"OLD HUNGARIAN SMALL LETTER NIKOLSBURG UE"));
        data.insert(std::make_pair(0x10ced,"OLD HUNGARIAN SMALL LETTER RUDIMENTA UE"));
        data.insert(std::make_pair(0x10cee,"OLD HUNGARIAN SMALL LETTER EV"));
        data.insert(std::make_pair(0x10cef,"OLD HUNGARIAN SMALL LETTER EZ"));
        data.insert(std::make_pair(0x10cf0,"OLD HUNGARIAN SMALL LETTER EZS"));
        data.insert(std::make_pair(0x10cf1,"OLD HUNGARIAN SMALL LETTER ENT-SHAPED SIGN"));
        data.insert(std::make_pair(0x10cf2,"OLD HUNGARIAN SMALL LETTER US"));
        data.insert(std::make_pair(0x10cfa,"OLD HUNGARIAN NUMBER ONE"));
        data.insert(std::make_pair(0x10cfb,"OLD HUNGARIAN NUMBER FIVE"));
        data.insert(std::make_pair(0x10cfc,"OLD HUNGARIAN NUMBER TEN"));
        data.insert(std::make_pair(0x10cfd,"OLD HUNGARIAN NUMBER FIFTY"));
        data.insert(std::make_pair(0x10cfe,"OLD HUNGARIAN NUMBER ONE HUNDRED"));
        data.insert(std::make_pair(0x10cff,"OLD HUNGARIAN NUMBER ONE THOUSAND"));
        data.insert(std::make_pair(0x10d00,"HANIFI ROHINGYA LETTER A"));
        data.insert(std::make_pair(0x10d01,"HANIFI ROHINGYA LETTER BA"));
        data.insert(std::make_pair(0x10d02,"HANIFI ROHINGYA LETTER PA"));
        data.insert(std::make_pair(0x10d03,"HANIFI ROHINGYA LETTER TA"));
        data.insert(std::make_pair(0x10d04,"HANIFI ROHINGYA LETTER TTA"));
        data.insert(std::make_pair(0x10d05,"HANIFI ROHINGYA LETTER JA"));
        data.insert(std::make_pair(0x10d06,"HANIFI ROHINGYA LETTER CA"));
        data.insert(std::make_pair(0x10d07,"HANIFI ROHINGYA LETTER HA"));
        data.insert(std::make_pair(0x10d08,"HANIFI ROHINGYA LETTER KHA"));
        data.insert(std::make_pair(0x10d09,"HANIFI ROHINGYA LETTER FA"));
        data.insert(std::make_pair(0x10d0a,"HANIFI ROHINGYA LETTER DA"));
        data.insert(std::make_pair(0x10d0b,"HANIFI ROHINGYA LETTER DDA"));
        data.insert(std::make_pair(0x10d0c,"HANIFI ROHINGYA LETTER RA"));
        data.insert(std::make_pair(0x10d0d,"HANIFI ROHINGYA LETTER RRA"));
        data.insert(std::make_pair(0x10d0e,"HANIFI ROHINGYA LETTER ZA"));
        data.insert(std::make_pair(0x10d0f,"HANIFI ROHINGYA LETTER SA"));
        data.insert(std::make_pair(0x10d10,"HANIFI ROHINGYA LETTER SHA"));
        data.insert(std::make_pair(0x10d11,"HANIFI ROHINGYA LETTER KA"));
        data.insert(std::make_pair(0x10d12,"HANIFI ROHINGYA LETTER GA"));
        data.insert(std::make_pair(0x10d13,"HANIFI ROHINGYA LETTER LA"));
        data.insert(std::make_pair(0x10d14,"HANIFI ROHINGYA LETTER MA"));
        data.insert(std::make_pair(0x10d15,"HANIFI ROHINGYA LETTER NA"));
        data.insert(std::make_pair(0x10d16,"HANIFI ROHINGYA LETTER WA"));
        data.insert(std::make_pair(0x10d17,"HANIFI ROHINGYA LETTER KINNA WA"));
        data.insert(std::make_pair(0x10d18,"HANIFI ROHINGYA LETTER YA"));
        data.insert(std::make_pair(0x10d19,"HANIFI ROHINGYA LETTER KINNA YA"));
        data.insert(std::make_pair(0x10d1a,"HANIFI ROHINGYA LETTER NGA"));
        data.insert(std::make_pair(0x10d1b,"HANIFI ROHINGYA LETTER NYA"));
        data.insert(std::make_pair(0x10d1c,"HANIFI ROHINGYA LETTER VA"));
        data.insert(std::make_pair(0x10d1d,"HANIFI ROHINGYA VOWEL A"));
        data.insert(std::make_pair(0x10d1e,"HANIFI ROHINGYA VOWEL I"));
        data.insert(std::make_pair(0x10d1f,"HANIFI ROHINGYA VOWEL U"));
        data.insert(std::make_pair(0x10d20,"HANIFI ROHINGYA VOWEL E"));
        data.insert(std::make_pair(0x10d21,"HANIFI ROHINGYA VOWEL O"));
        data.insert(std::make_pair(0x10d22,"HANIFI ROHINGYA MARK SAKIN"));
        data.insert(std::make_pair(0x10d23,"HANIFI ROHINGYA MARK NA KHONNA"));
        data.insert(std::make_pair(0x10d24,"HANIFI ROHINGYA SIGN HARBAHAY"));
        data.insert(std::make_pair(0x10d25,"HANIFI ROHINGYA SIGN TAHALA"));
        data.insert(std::make_pair(0x10d26,"HANIFI ROHINGYA SIGN TANA"));
        data.insert(std::make_pair(0x10d27,"HANIFI ROHINGYA SIGN TASSI"));
        data.insert(std::make_pair(0x10d30,"HANIFI ROHINGYA DIGIT ZERO"));
        data.insert(std::make_pair(0x10d31,"HANIFI ROHINGYA DIGIT ONE"));
        data.insert(std::make_pair(0x10d32,"HANIFI ROHINGYA DIGIT TWO"));
        data.insert(std::make_pair(0x10d33,"HANIFI ROHINGYA DIGIT THREE"));
        data.insert(std::make_pair(0x10d34,"HANIFI ROHINGYA DIGIT FOUR"));
        data.insert(std::make_pair(0x10d35,"HANIFI ROHINGYA DIGIT FIVE"));
        data.insert(std::make_pair(0x10d36,"HANIFI ROHINGYA DIGIT SIX"));
        data.insert(std::make_pair(0x10d37,"HANIFI ROHINGYA DIGIT SEVEN"));
        data.insert(std::make_pair(0x10d38,"HANIFI ROHINGYA DIGIT EIGHT"));
        data.insert(std::make_pair(0x10d39,"HANIFI ROHINGYA DIGIT NINE"));
        data.insert(std::make_pair(0x10e60,"RUMI DIGIT ONE"));
        data.insert(std::make_pair(0x10e61,"RUMI DIGIT TWO"));
        data.insert(std::make_pair(0x10e62,"RUMI DIGIT THREE"));
        data.insert(std::make_pair(0x10e63,"RUMI DIGIT FOUR"));
        data.insert(std::make_pair(0x10e64,"RUMI DIGIT FIVE"));
        data.insert(std::make_pair(0x10e65,"RUMI DIGIT SIX"));
        data.insert(std::make_pair(0x10e66,"RUMI DIGIT SEVEN"));
        data.insert(std::make_pair(0x10e67,"RUMI DIGIT EIGHT"));
        data.insert(std::make_pair(0x10e68,"RUMI DIGIT NINE"));
        data.insert(std::make_pair(0x10e69,"RUMI NUMBER TEN"));
        data.insert(std::make_pair(0x10e6a,"RUMI NUMBER TWENTY"));
        data.insert(std::make_pair(0x10e6b,"RUMI NUMBER THIRTY"));
        data.insert(std::make_pair(0x10e6c,"RUMI NUMBER FORTY"));
        data.insert(std::make_pair(0x10e6d,"RUMI NUMBER FIFTY"));
        data.insert(std::make_pair(0x10e6e,"RUMI NUMBER SIXTY"));
        data.insert(std::make_pair(0x10e6f,"RUMI NUMBER SEVENTY"));
        data.insert(std::make_pair(0x10e70,"RUMI NUMBER EIGHTY"));
        data.insert(std::make_pair(0x10e71,"RUMI NUMBER NINETY"));
        data.insert(std::make_pair(0x10e72,"RUMI NUMBER ONE HUNDRED"));
        data.insert(std::make_pair(0x10e73,"RUMI NUMBER TWO HUNDRED"));
        data.insert(std::make_pair(0x10e74,"RUMI NUMBER THREE HUNDRED"));
        data.insert(std::make_pair(0x10e75,"RUMI NUMBER FOUR HUNDRED"));
        data.insert(std::make_pair(0x10e76,"RUMI NUMBER FIVE HUNDRED"));
        data.insert(std::make_pair(0x10e77,"RUMI NUMBER SIX HUNDRED"));
        data.insert(std::make_pair(0x10e78,"RUMI NUMBER SEVEN HUNDRED"));
        data.insert(std::make_pair(0x10e79,"RUMI NUMBER EIGHT HUNDRED"));
        data.insert(std::make_pair(0x10e7a,"RUMI NUMBER NINE HUNDRED"));
        data.insert(std::make_pair(0x10e7b,"RUMI FRACTION ONE HALF"));
        data.insert(std::make_pair(0x10e7c,"RUMI FRACTION ONE QUARTER"));
        data.insert(std::make_pair(0x10e7d,"RUMI FRACTION ONE THIRD"));
        data.insert(std::make_pair(0x10e7e,"RUMI FRACTION TWO THIRDS"));
        data.insert(std::make_pair(0x10e80,"YEZIDI LETTER ELIF"));
        data.insert(std::make_pair(0x10e81,"YEZIDI LETTER BE"));
        data.insert(std::make_pair(0x10e82,"YEZIDI LETTER PE"));
        data.insert(std::make_pair(0x10e83,"YEZIDI LETTER PHE"));
        data.insert(std::make_pair(0x10e84,"YEZIDI LETTER THE"));
        data.insert(std::make_pair(0x10e85,"YEZIDI LETTER SE"));
        data.insert(std::make_pair(0x10e86,"YEZIDI LETTER CIM"));
        data.insert(std::make_pair(0x10e87,"YEZIDI LETTER CHIM"));
        data.insert(std::make_pair(0x10e88,"YEZIDI LETTER CHHIM"));
        data.insert(std::make_pair(0x10e89,"YEZIDI LETTER HHA"));
        data.insert(std::make_pair(0x10e8a,"YEZIDI LETTER XA"));
        data.insert(std::make_pair(0x10e8b,"YEZIDI LETTER DAL"));
        data.insert(std::make_pair(0x10e8c,"YEZIDI LETTER ZAL"));
        data.insert(std::make_pair(0x10e8d,"YEZIDI LETTER RA"));
        data.insert(std::make_pair(0x10e8e,"YEZIDI LETTER RHA"));
        data.insert(std::make_pair(0x10e8f,"YEZIDI LETTER ZA"));
        data.insert(std::make_pair(0x10e90,"YEZIDI LETTER JA"));
        data.insert(std::make_pair(0x10e91,"YEZIDI LETTER SIN"));
        data.insert(std::make_pair(0x10e92,"YEZIDI LETTER SHIN"));
        data.insert(std::make_pair(0x10e93,"YEZIDI LETTER SAD"));
        data.insert(std::make_pair(0x10e94,"YEZIDI LETTER DAD"));
        data.insert(std::make_pair(0x10e95,"YEZIDI LETTER TA"));
        data.insert(std::make_pair(0x10e96,"YEZIDI LETTER ZE"));
        data.insert(std::make_pair(0x10e97,"YEZIDI LETTER EYN"));
        data.insert(std::make_pair(0x10e98,"YEZIDI LETTER XHEYN"));
        data.insert(std::make_pair(0x10e99,"YEZIDI LETTER FA"));
        data.insert(std::make_pair(0x10e9a,"YEZIDI LETTER VA"));
        data.insert(std::make_pair(0x10e9b,"YEZIDI LETTER VA ALTERNATE FORM"));
        data.insert(std::make_pair(0x10e9c,"YEZIDI LETTER QAF"));
        data.insert(std::make_pair(0x10e9d,"YEZIDI LETTER KAF"));
        data.insert(std::make_pair(0x10e9e,"YEZIDI LETTER KHAF"));
        data.insert(std::make_pair(0x10e9f,"YEZIDI LETTER GAF"));
        data.insert(std::make_pair(0x10ea0,"YEZIDI LETTER LAM"));
        data.insert(std::make_pair(0x10ea1,"YEZIDI LETTER MIM"));
        data.insert(std::make_pair(0x10ea2,"YEZIDI LETTER NUN"));
        data.insert(std::make_pair(0x10ea3,"YEZIDI LETTER UM"));
        data.insert(std::make_pair(0x10ea4,"YEZIDI LETTER WAW"));
        data.insert(std::make_pair(0x10ea5,"YEZIDI LETTER OW"));
        data.insert(std::make_pair(0x10ea6,"YEZIDI LETTER EW"));
        data.insert(std::make_pair(0x10ea7,"YEZIDI LETTER HAY"));
        data.insert(std::make_pair(0x10ea8,"YEZIDI LETTER YOT"));
        data.insert(std::make_pair(0x10ea9,"YEZIDI LETTER ET"));
        data.insert(std::make_pair(0x10eab,"YEZIDI COMBINING HAMZA MARK"));
        data.insert(std::make_pair(0x10eac,"YEZIDI COMBINING MADDA MARK"));
        data.insert(std::make_pair(0x10ead,"YEZIDI HYPHENATION MARK"));
        data.insert(std::make_pair(0x10eb0,"YEZIDI LETTER LAM WITH DOT ABOVE"));
        data.insert(std::make_pair(0x10eb1,"YEZIDI LETTER YOT WITH CIRCUMFLEX ABOVE"));
        data.insert(std::make_pair(0x10efd,"ARABIC SMALL LOW WORD SAKTA"));
        data.insert(std::make_pair(0x10efe,"ARABIC SMALL LOW WORD QASR"));
        data.insert(std::make_pair(0x10eff,"ARABIC SMALL LOW WORD MADDA"));
        data.insert(std::make_pair(0x10f00,"OLD SOGDIAN LETTER ALEPH"));
        data.insert(std::make_pair(0x10f01,"OLD SOGDIAN LETTER FINAL ALEPH"));
        data.insert(std::make_pair(0x10f02,"OLD SOGDIAN LETTER BETH"));
        data.insert(std::make_pair(0x10f03,"OLD SOGDIAN LETTER FINAL BETH"));
        data.insert(std::make_pair(0x10f04,"OLD SOGDIAN LETTER GIMEL"));
        data.insert(std::make_pair(0x10f05,"OLD SOGDIAN LETTER HE"));
        data.insert(std::make_pair(0x10f06,"OLD SOGDIAN LETTER FINAL HE"));
        data.insert(std::make_pair(0x10f07,"OLD SOGDIAN LETTER WAW"));
        data.insert(std::make_pair(0x10f08,"OLD SOGDIAN LETTER ZAYIN"));
        data.insert(std::make_pair(0x10f09,"OLD SOGDIAN LETTER HETH"));
        data.insert(std::make_pair(0x10f0a,"OLD SOGDIAN LETTER YODH"));
        data.insert(std::make_pair(0x10f0b,"OLD SOGDIAN LETTER KAPH"));
        data.insert(std::make_pair(0x10f0c,"OLD SOGDIAN LETTER LAMEDH"));
        data.insert(std::make_pair(0x10f0d,"OLD SOGDIAN LETTER MEM"));
        data.insert(std::make_pair(0x10f0e,"OLD SOGDIAN LETTER NUN"));
        data.insert(std::make_pair(0x10f0f,"OLD SOGDIAN LETTER FINAL NUN"));
        data.insert(std::make_pair(0x10f10,"OLD SOGDIAN LETTER FINAL NUN WITH VERTICAL TAIL"));
        data.insert(std::make_pair(0x10f11,"OLD SOGDIAN LETTER SAMEKH"));
        data.insert(std::make_pair(0x10f12,"OLD SOGDIAN LETTER AYIN"));
        data.insert(std::make_pair(0x10f13,"OLD SOGDIAN LETTER ALTERNATE AYIN"));
        data.insert(std::make_pair(0x10f14,"OLD SOGDIAN LETTER PE"));
        data.insert(std::make_pair(0x10f15,"OLD SOGDIAN LETTER SADHE"));
        data.insert(std::make_pair(0x10f16,"OLD SOGDIAN LETTER FINAL SADHE"));
        data.insert(std::make_pair(0x10f17,"OLD SOGDIAN LETTER FINAL SADHE WITH VERTICAL TAIL"));
        data.insert(std::make_pair(0x10f18,"OLD SOGDIAN LETTER RESH-AYIN-DALETH"));
        data.insert(std::make_pair(0x10f19,"OLD SOGDIAN LETTER SHIN"));
        data.insert(std::make_pair(0x10f1a,"OLD SOGDIAN LETTER TAW"));
        data.insert(std::make_pair(0x10f1b,"OLD SOGDIAN LETTER FINAL TAW"));
        data.insert(std::make_pair(0x10f1c,"OLD SOGDIAN LETTER FINAL TAW WITH VERTICAL TAIL"));
        data.insert(std::make_pair(0x10f1d,"OLD SOGDIAN NUMBER ONE"));
        data.insert(std::make_pair(0x10f1e,"OLD SOGDIAN NUMBER TWO"));
        data.insert(std::make_pair(0x10f1f,"OLD SOGDIAN NUMBER THREE"));
        data.insert(std::make_pair(0x10f20,"OLD SOGDIAN NUMBER FOUR"));
        data.insert(std::make_pair(0x10f21,"OLD SOGDIAN NUMBER FIVE"));
        data.insert(std::make_pair(0x10f22,"OLD SOGDIAN NUMBER TEN"));
        data.insert(std::make_pair(0x10f23,"OLD SOGDIAN NUMBER TWENTY"));
        data.insert(std::make_pair(0x10f24,"OLD SOGDIAN NUMBER THIRTY"));
        data.insert(std::make_pair(0x10f25,"OLD SOGDIAN NUMBER ONE HUNDRED"));
        data.insert(std::make_pair(0x10f26,"OLD SOGDIAN FRACTION ONE HALF"));
        data.insert(std::make_pair(0x10f27,"OLD SOGDIAN LIGATURE AYIN-DALETH"));
        data.insert(std::make_pair(0x10f30,"SOGDIAN LETTER ALEPH"));
        data.insert(std::make_pair(0x10f31,"SOGDIAN LETTER BETH"));
        data.insert(std::make_pair(0x10f32,"SOGDIAN LETTER GIMEL"));
        data.insert(std::make_pair(0x10f33,"SOGDIAN LETTER HE"));
        data.insert(std::make_pair(0x10f34,"SOGDIAN LETTER WAW"));
        data.insert(std::make_pair(0x10f35,"SOGDIAN LETTER ZAYIN"));
        data.insert(std::make_pair(0x10f36,"SOGDIAN LETTER HETH"));
        data.insert(std::make_pair(0x10f37,"SOGDIAN LETTER YODH"));
        data.insert(std::make_pair(0x10f38,"SOGDIAN LETTER KAPH"));
        data.insert(std::make_pair(0x10f39,"SOGDIAN LETTER LAMEDH"));
        data.insert(std::make_pair(0x10f3a,"SOGDIAN LETTER MEM"));
        data.insert(std::make_pair(0x10f3b,"SOGDIAN LETTER NUN"));
        data.insert(std::make_pair(0x10f3c,"SOGDIAN LETTER SAMEKH"));
        data.insert(std::make_pair(0x10f3d,"SOGDIAN LETTER AYIN"));
        data.insert(std::make_pair(0x10f3e,"SOGDIAN LETTER PE"));
        data.insert(std::make_pair(0x10f3f,"SOGDIAN LETTER SADHE"));
        data.insert(std::make_pair(0x10f40,"SOGDIAN LETTER RESH-AYIN"));
        data.insert(std::make_pair(0x10f41,"SOGDIAN LETTER SHIN"));
        data.insert(std::make_pair(0x10f42,"SOGDIAN LETTER TAW"));
        data.insert(std::make_pair(0x10f43,"SOGDIAN LETTER FETH"));
        data.insert(std::make_pair(0x10f44,"SOGDIAN LETTER LESH"));
        data.insert(std::make_pair(0x10f45,"SOGDIAN INDEPENDENT SHIN"));
        data.insert(std::make_pair(0x10f46,"SOGDIAN COMBINING DOT BELOW"));
        data.insert(std::make_pair(0x10f47,"SOGDIAN COMBINING TWO DOTS BELOW"));
        data.insert(std::make_pair(0x10f48,"SOGDIAN COMBINING DOT ABOVE"));
        data.insert(std::make_pair(0x10f49,"SOGDIAN COMBINING TWO DOTS ABOVE"));
        data.insert(std::make_pair(0x10f4a,"SOGDIAN COMBINING CURVE ABOVE"));
        data.insert(std::make_pair(0x10f4b,"SOGDIAN COMBINING CURVE BELOW"));
        data.insert(std::make_pair(0x10f4c,"SOGDIAN COMBINING HOOK ABOVE"));
        data.insert(std::make_pair(0x10f4d,"SOGDIAN COMBINING HOOK BELOW"));
        data.insert(std::make_pair(0x10f4e,"SOGDIAN COMBINING LONG HOOK BELOW"));
        data.insert(std::make_pair(0x10f4f,"SOGDIAN COMBINING RESH BELOW"));
        data.insert(std::make_pair(0x10f50,"SOGDIAN COMBINING STROKE BELOW"));
        data.insert(std::make_pair(0x10f51,"SOGDIAN NUMBER ONE"));
        data.insert(std::make_pair(0x10f52,"SOGDIAN NUMBER TEN"));
        data.insert(std::make_pair(0x10f53,"SOGDIAN NUMBER TWENTY"));
        data.insert(std::make_pair(0x10f54,"SOGDIAN NUMBER ONE HUNDRED"));
        data.insert(std::make_pair(0x10f55,"SOGDIAN PUNCTUATION TWO VERTICAL BARS"));
        data.insert(std::make_pair(0x10f56,"SOGDIAN PUNCTUATION TWO VERTICAL BARS WITH DOTS"));
        data.insert(std::make_pair(0x10f57,"SOGDIAN PUNCTUATION CIRCLE WITH DOT"));
        data.insert(std::make_pair(0x10f58,"SOGDIAN PUNCTUATION TWO CIRCLES WITH DOTS"));
        data.insert(std::make_pair(0x10f59,"SOGDIAN PUNCTUATION HALF CIRCLE WITH DOT"));
        data.insert(std::make_pair(0x10f70,"OLD UYGHUR LETTER ALEPH"));
        data.insert(std::make_pair(0x10f71,"OLD UYGHUR LETTER BETH"));
        data.insert(std::make_pair(0x10f72,"OLD UYGHUR LETTER GIMEL-HETH"));
        data.insert(std::make_pair(0x10f73,"OLD UYGHUR LETTER WAW"));
        data.insert(std::make_pair(0x10f74,"OLD UYGHUR LETTER ZAYIN"));
        data.insert(std::make_pair(0x10f75,"OLD UYGHUR LETTER FINAL HETH"));
        data.insert(std::make_pair(0x10f76,"OLD UYGHUR LETTER YODH"));
        data.insert(std::make_pair(0x10f77,"OLD UYGHUR LETTER KAPH"));
        data.insert(std::make_pair(0x10f78,"OLD UYGHUR LETTER LAMEDH"));
        data.insert(std::make_pair(0x10f79,"OLD UYGHUR LETTER MEM"));
        data.insert(std::make_pair(0x10f7a,"OLD UYGHUR LETTER NUN"));
        data.insert(std::make_pair(0x10f7b,"OLD UYGHUR LETTER SAMEKH"));
        data.insert(std::make_pair(0x10f7c,"OLD UYGHUR LETTER PE"));
        data.insert(std::make_pair(0x10f7d,"OLD UYGHUR LETTER SADHE"));
        data.insert(std::make_pair(0x10f7e,"OLD UYGHUR LETTER RESH"));
        data.insert(std::make_pair(0x10f7f,"OLD UYGHUR LETTER SHIN"));
        data.insert(std::make_pair(0x10f80,"OLD UYGHUR LETTER TAW"));
        data.insert(std::make_pair(0x10f81,"OLD UYGHUR LETTER LESH"));
        data.insert(std::make_pair(0x10f82,"OLD UYGHUR COMBINING DOT ABOVE"));
        data.insert(std::make_pair(0x10f83,"OLD UYGHUR COMBINING DOT BELOW"));
        data.insert(std::make_pair(0x10f84,"OLD UYGHUR COMBINING TWO DOTS ABOVE"));
        data.insert(std::make_pair(0x10f85,"OLD UYGHUR COMBINING TWO DOTS BELOW"));
        data.insert(std::make_pair(0x10f86,"OLD UYGHUR PUNCTUATION BAR"));
        data.insert(std::make_pair(0x10f87,"OLD UYGHUR PUNCTUATION TWO BARS"));
        data.insert(std::make_pair(0x10f88,"OLD UYGHUR PUNCTUATION TWO DOTS"));
        data.insert(std::make_pair(0x10f89,"OLD UYGHUR PUNCTUATION FOUR DOTS"));
        data.insert(std::make_pair(0x10fb0,"CHORASMIAN LETTER ALEPH"));
        data.insert(std::make_pair(0x10fb1,"CHORASMIAN LETTER SMALL ALEPH"));
        data.insert(std::make_pair(0x10fb2,"CHORASMIAN LETTER BETH"));
        data.insert(std::make_pair(0x10fb3,"CHORASMIAN LETTER GIMEL"));
        data.insert(std::make_pair(0x10fb4,"CHORASMIAN LETTER DALETH"));
        data.insert(std::make_pair(0x10fb5,"CHORASMIAN LETTER HE"));
        data.insert(std::make_pair(0x10fb6,"CHORASMIAN LETTER WAW"));
        data.insert(std::make_pair(0x10fb7,"CHORASMIAN LETTER CURLED WAW"));
        data.insert(std::make_pair(0x10fb8,"CHORASMIAN LETTER ZAYIN"));
        data.insert(std::make_pair(0x10fb9,"CHORASMIAN LETTER HETH"));
        data.insert(std::make_pair(0x10fba,"CHORASMIAN LETTER YODH"));
        data.insert(std::make_pair(0x10fbb,"CHORASMIAN LETTER KAPH"));
        data.insert(std::make_pair(0x10fbc,"CHORASMIAN LETTER LAMEDH"));
        data.insert(std::make_pair(0x10fbd,"CHORASMIAN LETTER MEM"));
        data.insert(std::make_pair(0x10fbe,"CHORASMIAN LETTER NUN"));
        data.insert(std::make_pair(0x10fbf,"CHORASMIAN LETTER SAMEKH"));
        data.insert(std::make_pair(0x10fc0,"CHORASMIAN LETTER AYIN"));
        data.insert(std::make_pair(0x10fc1,"CHORASMIAN LETTER PE"));
        data.insert(std::make_pair(0x10fc2,"CHORASMIAN LETTER RESH"));
        data.insert(std::make_pair(0x10fc3,"CHORASMIAN LETTER SHIN"));
        data.insert(std::make_pair(0x10fc4,"CHORASMIAN LETTER TAW"));
        data.insert(std::make_pair(0x10fc5,"CHORASMIAN NUMBER ONE"));
        data.insert(std::make_pair(0x10fc6,"CHORASMIAN NUMBER TWO"));
        data.insert(std::make_pair(0x10fc7,"CHORASMIAN NUMBER THREE"));
        data.insert(std::make_pair(0x10fc8,"CHORASMIAN NUMBER FOUR"));
        data.insert(std::make_pair(0x10fc9,"CHORASMIAN NUMBER TEN"));
        data.insert(std::make_pair(0x10fca,"CHORASMIAN NUMBER TWENTY"));
        data.insert(std::make_pair(0x10fcb,"CHORASMIAN NUMBER ONE HUNDRED"));
        data.insert(std::make_pair(0x10fe0,"ELYMAIC LETTER ALEPH"));
        data.insert(std::make_pair(0x10fe1,"ELYMAIC LETTER BETH"));
        data.insert(std::make_pair(0x10fe2,"ELYMAIC LETTER GIMEL"));
        data.insert(std::make_pair(0x10fe3,"ELYMAIC LETTER DALETH"));
        data.insert(std::make_pair(0x10fe4,"ELYMAIC LETTER HE"));
        data.insert(std::make_pair(0x10fe5,"ELYMAIC LETTER WAW"));
        data.insert(std::make_pair(0x10fe6,"ELYMAIC LETTER ZAYIN"));
        data.insert(std::make_pair(0x10fe7,"ELYMAIC LETTER HETH"));
        data.insert(std::make_pair(0x10fe8,"ELYMAIC LETTER TETH"));
        data.insert(std::make_pair(0x10fe9,"ELYMAIC LETTER YODH"));
        data.insert(std::make_pair(0x10fea,"ELYMAIC LETTER KAPH"));
        data.insert(std::make_pair(0x10feb,"ELYMAIC LETTER LAMEDH"));
        data.insert(std::make_pair(0x10fec,"ELYMAIC LETTER MEM"));
        data.insert(std::make_pair(0x10fed,"ELYMAIC LETTER NUN"));
        data.insert(std::make_pair(0x10fee,"ELYMAIC LETTER SAMEKH"));
        data.insert(std::make_pair(0x10fef,"ELYMAIC LETTER AYIN"));
        data.insert(std::make_pair(0x10ff0,"ELYMAIC LETTER PE"));
        data.insert(std::make_pair(0x10ff1,"ELYMAIC LETTER SADHE"));
        data.insert(std::make_pair(0x10ff2,"ELYMAIC LETTER QOPH"));
        data.insert(std::make_pair(0x10ff3,"ELYMAIC LETTER RESH"));
        data.insert(std::make_pair(0x10ff4,"ELYMAIC LETTER SHIN"));
        data.insert(std::make_pair(0x10ff5,"ELYMAIC LETTER TAW"));
        data.insert(std::make_pair(0x10ff6,"ELYMAIC LIGATURE ZAYIN-YODH"));
        data.insert(std::make_pair(0x11000,"BRAHMI SIGN CANDRABINDU"));
        data.insert(std::make_pair(0x11001,"BRAHMI SIGN ANUSVARA"));
        data.insert(std::make_pair(0x11002,"BRAHMI SIGN VISARGA"));
        data.insert(std::make_pair(0x11003,"BRAHMI SIGN JIHVAMULIYA"));
        data.insert(std::make_pair(0x11004,"BRAHMI SIGN UPADHMANIYA"));
        data.insert(std::make_pair(0x11005,"BRAHMI LETTER A"));
        data.insert(std::make_pair(0x11006,"BRAHMI LETTER AA"));
        data.insert(std::make_pair(0x11007,"BRAHMI LETTER I"));
        data.insert(std::make_pair(0x11008,"BRAHMI LETTER II"));
        data.insert(std::make_pair(0x11009,"BRAHMI LETTER U"));
        data.insert(std::make_pair(0x1100a,"BRAHMI LETTER UU"));
        data.insert(std::make_pair(0x1100b,"BRAHMI LETTER VOCALIC R"));
        data.insert(std::make_pair(0x1100c,"BRAHMI LETTER VOCALIC RR"));
        data.insert(std::make_pair(0x1100d,"BRAHMI LETTER VOCALIC L"));
        data.insert(std::make_pair(0x1100e,"BRAHMI LETTER VOCALIC LL"));
        data.insert(std::make_pair(0x1100f,"BRAHMI LETTER E"));
        data.insert(std::make_pair(0x11010,"BRAHMI LETTER AI"));
        data.insert(std::make_pair(0x11011,"BRAHMI LETTER O"));
        data.insert(std::make_pair(0x11012,"BRAHMI LETTER AU"));
        data.insert(std::make_pair(0x11013,"BRAHMI LETTER KA"));
        data.insert(std::make_pair(0x11014,"BRAHMI LETTER KHA"));
        data.insert(std::make_pair(0x11015,"BRAHMI LETTER GA"));
        data.insert(std::make_pair(0x11016,"BRAHMI LETTER GHA"));
        data.insert(std::make_pair(0x11017,"BRAHMI LETTER NGA"));
        data.insert(std::make_pair(0x11018,"BRAHMI LETTER CA"));
        data.insert(std::make_pair(0x11019,"BRAHMI LETTER CHA"));
        data.insert(std::make_pair(0x1101a,"BRAHMI LETTER JA"));
        data.insert(std::make_pair(0x1101b,"BRAHMI LETTER JHA"));
        data.insert(std::make_pair(0x1101c,"BRAHMI LETTER NYA"));
        data.insert(std::make_pair(0x1101d,"BRAHMI LETTER TTA"));
        data.insert(std::make_pair(0x1101e,"BRAHMI LETTER TTHA"));
        data.insert(std::make_pair(0x1101f,"BRAHMI LETTER DDA"));
        data.insert(std::make_pair(0x11020,"BRAHMI LETTER DDHA"));
        data.insert(std::make_pair(0x11021,"BRAHMI LETTER NNA"));
        data.insert(std::make_pair(0x11022,"BRAHMI LETTER TA"));
        data.insert(std::make_pair(0x11023,"BRAHMI LETTER THA"));
        data.insert(std::make_pair(0x11024,"BRAHMI LETTER DA"));
        data.insert(std::make_pair(0x11025,"BRAHMI LETTER DHA"));
        data.insert(std::make_pair(0x11026,"BRAHMI LETTER NA"));
        data.insert(std::make_pair(0x11027,"BRAHMI LETTER PA"));
        data.insert(std::make_pair(0x11028,"BRAHMI LETTER PHA"));
        data.insert(std::make_pair(0x11029,"BRAHMI LETTER BA"));
        data.insert(std::make_pair(0x1102a,"BRAHMI LETTER BHA"));
        data.insert(std::make_pair(0x1102b,"BRAHMI LETTER MA"));
        data.insert(std::make_pair(0x1102c,"BRAHMI LETTER YA"));
        data.insert(std::make_pair(0x1102d,"BRAHMI LETTER RA"));
        data.insert(std::make_pair(0x1102e,"BRAHMI LETTER LA"));
        data.insert(std::make_pair(0x1102f,"BRAHMI LETTER VA"));
        data.insert(std::make_pair(0x11030,"BRAHMI LETTER SHA"));
        data.insert(std::make_pair(0x11031,"BRAHMI LETTER SSA"));
        data.insert(std::make_pair(0x11032,"BRAHMI LETTER SA"));
        data.insert(std::make_pair(0x11033,"BRAHMI LETTER HA"));
        data.insert(std::make_pair(0x11034,"BRAHMI LETTER LLA"));
        data.insert(std::make_pair(0x11035,"BRAHMI LETTER OLD TAMIL LLLA"));
        data.insert(std::make_pair(0x11036,"BRAHMI LETTER OLD TAMIL RRA"));
        data.insert(std::make_pair(0x11037,"BRAHMI LETTER OLD TAMIL NNNA"));
        data.insert(std::make_pair(0x11038,"BRAHMI VOWEL SIGN AA"));
        data.insert(std::make_pair(0x11039,"BRAHMI VOWEL SIGN BHATTIPROLU AA"));
        data.insert(std::make_pair(0x1103a,"BRAHMI VOWEL SIGN I"));
        data.insert(std::make_pair(0x1103b,"BRAHMI VOWEL SIGN II"));
        data.insert(std::make_pair(0x1103c,"BRAHMI VOWEL SIGN U"));
        data.insert(std::make_pair(0x1103d,"BRAHMI VOWEL SIGN UU"));
        data.insert(std::make_pair(0x1103e,"BRAHMI VOWEL SIGN VOCALIC R"));
        data.insert(std::make_pair(0x1103f,"BRAHMI VOWEL SIGN VOCALIC RR"));
        data.insert(std::make_pair(0x11040,"BRAHMI VOWEL SIGN VOCALIC L"));
        data.insert(std::make_pair(0x11041,"BRAHMI VOWEL SIGN VOCALIC LL"));
        data.insert(std::make_pair(0x11042,"BRAHMI VOWEL SIGN E"));
        data.insert(std::make_pair(0x11043,"BRAHMI VOWEL SIGN AI"));
        data.insert(std::make_pair(0x11044,"BRAHMI VOWEL SIGN O"));
        data.insert(std::make_pair(0x11045,"BRAHMI VOWEL SIGN AU"));
        data.insert(std::make_pair(0x11046,"BRAHMI VIRAMA"));
        data.insert(std::make_pair(0x11047,"BRAHMI DANDA"));
        data.insert(std::make_pair(0x11048,"BRAHMI DOUBLE DANDA"));
        data.insert(std::make_pair(0x11049,"BRAHMI PUNCTUATION DOT"));
        data.insert(std::make_pair(0x1104a,"BRAHMI PUNCTUATION DOUBLE DOT"));
        data.insert(std::make_pair(0x1104b,"BRAHMI PUNCTUATION LINE"));
        data.insert(std::make_pair(0x1104c,"BRAHMI PUNCTUATION CRESCENT BAR"));
        data.insert(std::make_pair(0x1104d,"BRAHMI PUNCTUATION LOTUS"));
        data.insert(std::make_pair(0x11052,"BRAHMI NUMBER ONE"));
        data.insert(std::make_pair(0x11053,"BRAHMI NUMBER TWO"));
        data.insert(std::make_pair(0x11054,"BRAHMI NUMBER THREE"));
        data.insert(std::make_pair(0x11055,"BRAHMI NUMBER FOUR"));
        data.insert(std::make_pair(0x11056,"BRAHMI NUMBER FIVE"));
        data.insert(std::make_pair(0x11057,"BRAHMI NUMBER SIX"));
        data.insert(std::make_pair(0x11058,"BRAHMI NUMBER SEVEN"));
        data.insert(std::make_pair(0x11059,"BRAHMI NUMBER EIGHT"));
        data.insert(std::make_pair(0x1105a,"BRAHMI NUMBER NINE"));
        data.insert(std::make_pair(0x1105b,"BRAHMI NUMBER TEN"));
        data.insert(std::make_pair(0x1105c,"BRAHMI NUMBER TWENTY"));
        data.insert(std::make_pair(0x1105d,"BRAHMI NUMBER THIRTY"));
        data.insert(std::make_pair(0x1105e,"BRAHMI NUMBER FORTY"));
        data.insert(std::make_pair(0x1105f,"BRAHMI NUMBER FIFTY"));
        data.insert(std::make_pair(0x11060,"BRAHMI NUMBER SIXTY"));
        data.insert(std::make_pair(0x11061,"BRAHMI NUMBER SEVENTY"));
        data.insert(std::make_pair(0x11062,"BRAHMI NUMBER EIGHTY"));
        data.insert(std::make_pair(0x11063,"BRAHMI NUMBER NINETY"));
        data.insert(std::make_pair(0x11064,"BRAHMI NUMBER ONE HUNDRED"));
        data.insert(std::make_pair(0x11065,"BRAHMI NUMBER ONE THOUSAND"));
        data.insert(std::make_pair(0x11066,"BRAHMI DIGIT ZERO"));
        data.insert(std::make_pair(0x11067,"BRAHMI DIGIT ONE"));
        data.insert(std::make_pair(0x11068,"BRAHMI DIGIT TWO"));
        data.insert(std::make_pair(0x11069,"BRAHMI DIGIT THREE"));
        data.insert(std::make_pair(0x1106a,"BRAHMI DIGIT FOUR"));
        data.insert(std::make_pair(0x1106b,"BRAHMI DIGIT FIVE"));
        data.insert(std::make_pair(0x1106c,"BRAHMI DIGIT SIX"));
        data.insert(std::make_pair(0x1106d,"BRAHMI DIGIT SEVEN"));
        data.insert(std::make_pair(0x1106e,"BRAHMI DIGIT EIGHT"));
        data.insert(std::make_pair(0x1106f,"BRAHMI DIGIT NINE"));
        data.insert(std::make_pair(0x11070,"BRAHMI SIGN OLD TAMIL VIRAMA"));
        data.insert(std::make_pair(0x11071,"BRAHMI LETTER OLD TAMIL SHORT E"));
        data.insert(std::make_pair(0x11072,"BRAHMI LETTER OLD TAMIL SHORT O"));
        data.insert(std::make_pair(0x11073,"BRAHMI VOWEL SIGN OLD TAMIL SHORT E"));
        data.insert(std::make_pair(0x11074,"BRAHMI VOWEL SIGN OLD TAMIL SHORT O"));
        data.insert(std::make_pair(0x11075,"BRAHMI LETTER OLD TAMIL LLA"));
        data.insert(std::make_pair(0x1107f,"BRAHMI NUMBER JOINER"));
        data.insert(std::make_pair(0x11080,"KAITHI SIGN CANDRABINDU"));
        data.insert(std::make_pair(0x11081,"KAITHI SIGN ANUSVARA"));
        data.insert(std::make_pair(0x11082,"KAITHI SIGN VISARGA"));
        data.insert(std::make_pair(0x11083,"KAITHI LETTER A"));
        data.insert(std::make_pair(0x11084,"KAITHI LETTER AA"));
        data.insert(std::make_pair(0x11085,"KAITHI LETTER I"));
        data.insert(std::make_pair(0x11086,"KAITHI LETTER II"));
        data.insert(std::make_pair(0x11087,"KAITHI LETTER U"));
        data.insert(std::make_pair(0x11088,"KAITHI LETTER UU"));
        data.insert(std::make_pair(0x11089,"KAITHI LETTER E"));
        data.insert(std::make_pair(0x1108a,"KAITHI LETTER AI"));
        data.insert(std::make_pair(0x1108b,"KAITHI LETTER O"));
        data.insert(std::make_pair(0x1108c,"KAITHI LETTER AU"));
        data.insert(std::make_pair(0x1108d,"KAITHI LETTER KA"));
        data.insert(std::make_pair(0x1108e,"KAITHI LETTER KHA"));
        data.insert(std::make_pair(0x1108f,"KAITHI LETTER GA"));
        data.insert(std::make_pair(0x11090,"KAITHI LETTER GHA"));
        data.insert(std::make_pair(0x11091,"KAITHI LETTER NGA"));
        data.insert(std::make_pair(0x11092,"KAITHI LETTER CA"));
        data.insert(std::make_pair(0x11093,"KAITHI LETTER CHA"));
        data.insert(std::make_pair(0x11094,"KAITHI LETTER JA"));
        data.insert(std::make_pair(0x11095,"KAITHI LETTER JHA"));
        data.insert(std::make_pair(0x11096,"KAITHI LETTER NYA"));
        data.insert(std::make_pair(0x11097,"KAITHI LETTER TTA"));
        data.insert(std::make_pair(0x11098,"KAITHI LETTER TTHA"));
        data.insert(std::make_pair(0x11099,"KAITHI LETTER DDA"));
        data.insert(std::make_pair(0x1109a,"KAITHI LETTER DDDHA"));
        data.insert(std::make_pair(0x1109b,"KAITHI LETTER DDHA"));
        data.insert(std::make_pair(0x1109c,"KAITHI LETTER RHA"));
        data.insert(std::make_pair(0x1109d,"KAITHI LETTER NNA"));
        data.insert(std::make_pair(0x1109e,"KAITHI LETTER TA"));
        data.insert(std::make_pair(0x1109f,"KAITHI LETTER THA"));
        data.insert(std::make_pair(0x110a0,"KAITHI LETTER DA"));
        data.insert(std::make_pair(0x110a1,"KAITHI LETTER DHA"));
        data.insert(std::make_pair(0x110a2,"KAITHI LETTER NA"));
        data.insert(std::make_pair(0x110a3,"KAITHI LETTER PA"));
        data.insert(std::make_pair(0x110a4,"KAITHI LETTER PHA"));
        data.insert(std::make_pair(0x110a5,"KAITHI LETTER BA"));
        data.insert(std::make_pair(0x110a6,"KAITHI LETTER BHA"));
        data.insert(std::make_pair(0x110a7,"KAITHI LETTER MA"));
        data.insert(std::make_pair(0x110a8,"KAITHI LETTER YA"));
        data.insert(std::make_pair(0x110a9,"KAITHI LETTER RA"));
        data.insert(std::make_pair(0x110aa,"KAITHI LETTER LA"));
        data.insert(std::make_pair(0x110ab,"KAITHI LETTER VA"));
        data.insert(std::make_pair(0x110ac,"KAITHI LETTER SHA"));
        data.insert(std::make_pair(0x110ad,"KAITHI LETTER SSA"));
        data.insert(std::make_pair(0x110ae,"KAITHI LETTER SA"));
        data.insert(std::make_pair(0x110af,"KAITHI LETTER HA"));
        data.insert(std::make_pair(0x110b0,"KAITHI VOWEL SIGN AA"));
        data.insert(std::make_pair(0x110b1,"KAITHI VOWEL SIGN I"));
        data.insert(std::make_pair(0x110b2,"KAITHI VOWEL SIGN II"));
        data.insert(std::make_pair(0x110b3,"KAITHI VOWEL SIGN U"));
        data.insert(std::make_pair(0x110b4,"KAITHI VOWEL SIGN UU"));
        data.insert(std::make_pair(0x110b5,"KAITHI VOWEL SIGN E"));
        data.insert(std::make_pair(0x110b6,"KAITHI VOWEL SIGN AI"));
        data.insert(std::make_pair(0x110b7,"KAITHI VOWEL SIGN O"));
        data.insert(std::make_pair(0x110b8,"KAITHI VOWEL SIGN AU"));
        data.insert(std::make_pair(0x110b9,"KAITHI SIGN VIRAMA"));
        data.insert(std::make_pair(0x110ba,"KAITHI SIGN NUKTA"));
        data.insert(std::make_pair(0x110bb,"KAITHI ABBREVIATION SIGN"));
        data.insert(std::make_pair(0x110bc,"KAITHI ENUMERATION SIGN"));
        data.insert(std::make_pair(0x110bd,"KAITHI NUMBER SIGN"));
        data.insert(std::make_pair(0x110be,"KAITHI SECTION MARK"));
        data.insert(std::make_pair(0x110bf,"KAITHI DOUBLE SECTION MARK"));
        data.insert(std::make_pair(0x110c0,"KAITHI DANDA"));
        data.insert(std::make_pair(0x110c1,"KAITHI DOUBLE DANDA"));
        data.insert(std::make_pair(0x110c2,"KAITHI VOWEL SIGN VOCALIC R"));
        data.insert(std::make_pair(0x110cd,"KAITHI NUMBER SIGN ABOVE"));
        data.insert(std::make_pair(0x110d0,"SORA SOMPENG LETTER SAH"));
        data.insert(std::make_pair(0x110d1,"SORA SOMPENG LETTER TAH"));
        data.insert(std::make_pair(0x110d2,"SORA SOMPENG LETTER BAH"));
        data.insert(std::make_pair(0x110d3,"SORA SOMPENG LETTER CAH"));
        data.insert(std::make_pair(0x110d4,"SORA SOMPENG LETTER DAH"));
        data.insert(std::make_pair(0x110d5,"SORA SOMPENG LETTER GAH"));
        data.insert(std::make_pair(0x110d6,"SORA SOMPENG LETTER MAH"));
        data.insert(std::make_pair(0x110d7,"SORA SOMPENG LETTER NGAH"));
        data.insert(std::make_pair(0x110d8,"SORA SOMPENG LETTER LAH"));
        data.insert(std::make_pair(0x110d9,"SORA SOMPENG LETTER NAH"));
        data.insert(std::make_pair(0x110da,"SORA SOMPENG LETTER VAH"));
        data.insert(std::make_pair(0x110db,"SORA SOMPENG LETTER PAH"));
        data.insert(std::make_pair(0x110dc,"SORA SOMPENG LETTER YAH"));
        data.insert(std::make_pair(0x110dd,"SORA SOMPENG LETTER RAH"));
        data.insert(std::make_pair(0x110de,"SORA SOMPENG LETTER HAH"));
        data.insert(std::make_pair(0x110df,"SORA SOMPENG LETTER KAH"));
        data.insert(std::make_pair(0x110e0,"SORA SOMPENG LETTER JAH"));
        data.insert(std::make_pair(0x110e1,"SORA SOMPENG LETTER NYAH"));
        data.insert(std::make_pair(0x110e2,"SORA SOMPENG LETTER AH"));
        data.insert(std::make_pair(0x110e3,"SORA SOMPENG LETTER EEH"));
        data.insert(std::make_pair(0x110e4,"SORA SOMPENG LETTER IH"));
        data.insert(std::make_pair(0x110e5,"SORA SOMPENG LETTER UH"));
        data.insert(std::make_pair(0x110e6,"SORA SOMPENG LETTER OH"));
        data.insert(std::make_pair(0x110e7,"SORA SOMPENG LETTER EH"));
        data.insert(std::make_pair(0x110e8,"SORA SOMPENG LETTER MAE"));
        data.insert(std::make_pair(0x110f0,"SORA SOMPENG DIGIT ZERO"));
        data.insert(std::make_pair(0x110f1,"SORA SOMPENG DIGIT ONE"));
        data.insert(std::make_pair(0x110f2,"SORA SOMPENG DIGIT TWO"));
        data.insert(std::make_pair(0x110f3,"SORA SOMPENG DIGIT THREE"));
        data.insert(std::make_pair(0x110f4,"SORA SOMPENG DIGIT FOUR"));
        data.insert(std::make_pair(0x110f5,"SORA SOMPENG DIGIT FIVE"));
        data.insert(std::make_pair(0x110f6,"SORA SOMPENG DIGIT SIX"));
        data.insert(std::make_pair(0x110f7,"SORA SOMPENG DIGIT SEVEN"));
        data.insert(std::make_pair(0x110f8,"SORA SOMPENG DIGIT EIGHT"));
        data.insert(std::make_pair(0x110f9,"SORA SOMPENG DIGIT NINE"));
        data.insert(std::make_pair(0x11100,"CHAKMA SIGN CANDRABINDU"));
        data.insert(std::make_pair(0x11101,"CHAKMA SIGN ANUSVARA"));
        data.insert(std::make_pair(0x11102,"CHAKMA SIGN VISARGA"));
        data.insert(std::make_pair(0x11103,"CHAKMA LETTER AA"));
        data.insert(std::make_pair(0x11104,"CHAKMA LETTER I"));
        data.insert(std::make_pair(0x11105,"CHAKMA LETTER U"));
        data.insert(std::make_pair(0x11106,"CHAKMA LETTER E"));
        data.insert(std::make_pair(0x11107,"CHAKMA LETTER KAA"));
        data.insert(std::make_pair(0x11108,"CHAKMA LETTER KHAA"));
        data.insert(std::make_pair(0x11109,"CHAKMA LETTER GAA"));
        data.insert(std::make_pair(0x1110a,"CHAKMA LETTER GHAA"));
        data.insert(std::make_pair(0x1110b,"CHAKMA LETTER NGAA"));
        data.insert(std::make_pair(0x1110c,"CHAKMA LETTER CAA"));
        data.insert(std::make_pair(0x1110d,"CHAKMA LETTER CHAA"));
        data.insert(std::make_pair(0x1110e,"CHAKMA LETTER JAA"));
        data.insert(std::make_pair(0x1110f,"CHAKMA LETTER JHAA"));
        data.insert(std::make_pair(0x11110,"CHAKMA LETTER NYAA"));
        data.insert(std::make_pair(0x11111,"CHAKMA LETTER TTAA"));
        data.insert(std::make_pair(0x11112,"CHAKMA LETTER TTHAA"));
        data.insert(std::make_pair(0x11113,"CHAKMA LETTER DDAA"));
        data.insert(std::make_pair(0x11114,"CHAKMA LETTER DDHAA"));
        data.insert(std::make_pair(0x11115,"CHAKMA LETTER NNAA"));
        data.insert(std::make_pair(0x11116,"CHAKMA LETTER TAA"));
        data.insert(std::make_pair(0x11117,"CHAKMA LETTER THAA"));
        data.insert(std::make_pair(0x11118,"CHAKMA LETTER DAA"));
        data.insert(std::make_pair(0x11119,"CHAKMA LETTER DHAA"));
        data.insert(std::make_pair(0x1111a,"CHAKMA LETTER NAA"));
        data.insert(std::make_pair(0x1111b,"CHAKMA LETTER PAA"));
        data.insert(std::make_pair(0x1111c,"CHAKMA LETTER PHAA"));
        data.insert(std::make_pair(0x1111d,"CHAKMA LETTER BAA"));
        data.insert(std::make_pair(0x1111e,"CHAKMA LETTER BHAA"));
        data.insert(std::make_pair(0x1111f,"CHAKMA LETTER MAA"));
        data.insert(std::make_pair(0x11120,"CHAKMA LETTER YYAA"));
        data.insert(std::make_pair(0x11121,"CHAKMA LETTER YAA"));
        data.insert(std::make_pair(0x11122,"CHAKMA LETTER RAA"));
        data.insert(std::make_pair(0x11123,"CHAKMA LETTER LAA"));
        data.insert(std::make_pair(0x11124,"CHAKMA LETTER WAA"));
        data.insert(std::make_pair(0x11125,"CHAKMA LETTER SAA"));
        data.insert(std::make_pair(0x11126,"CHAKMA LETTER HAA"));
        data.insert(std::make_pair(0x11127,"CHAKMA VOWEL SIGN A"));
        data.insert(std::make_pair(0x11128,"CHAKMA VOWEL SIGN I"));
        data.insert(std::make_pair(0x11129,"CHAKMA VOWEL SIGN II"));
        data.insert(std::make_pair(0x1112a,"CHAKMA VOWEL SIGN U"));
        data.insert(std::make_pair(0x1112b,"CHAKMA VOWEL SIGN UU"));
        data.insert(std::make_pair(0x1112c,"CHAKMA VOWEL SIGN E"));
        data.insert(std::make_pair(0x1112d,"CHAKMA VOWEL SIGN AI"));
        data.insert(std::make_pair(0x1112e,"CHAKMA VOWEL SIGN O"));
        data.insert(std::make_pair(0x1112f,"CHAKMA VOWEL SIGN AU"));
        data.insert(std::make_pair(0x11130,"CHAKMA VOWEL SIGN OI"));
        data.insert(std::make_pair(0x11131,"CHAKMA O MARK"));
        data.insert(std::make_pair(0x11132,"CHAKMA AU MARK"));
        data.insert(std::make_pair(0x11133,"CHAKMA VIRAMA"));
        data.insert(std::make_pair(0x11134,"CHAKMA MAAYYAA"));
        data.insert(std::make_pair(0x11136,"CHAKMA DIGIT ZERO"));
        data.insert(std::make_pair(0x11137,"CHAKMA DIGIT ONE"));
        data.insert(std::make_pair(0x11138,"CHAKMA DIGIT TWO"));
        data.insert(std::make_pair(0x11139,"CHAKMA DIGIT THREE"));
        data.insert(std::make_pair(0x1113a,"CHAKMA DIGIT FOUR"));
        data.insert(std::make_pair(0x1113b,"CHAKMA DIGIT FIVE"));
        data.insert(std::make_pair(0x1113c,"CHAKMA DIGIT SIX"));
        data.insert(std::make_pair(0x1113d,"CHAKMA DIGIT SEVEN"));
        data.insert(std::make_pair(0x1113e,"CHAKMA DIGIT EIGHT"));
        data.insert(std::make_pair(0x1113f,"CHAKMA DIGIT NINE"));
        data.insert(std::make_pair(0x11140,"CHAKMA SECTION MARK"));
        data.insert(std::make_pair(0x11141,"CHAKMA DANDA"));
        data.insert(std::make_pair(0x11142,"CHAKMA DOUBLE DANDA"));
        data.insert(std::make_pair(0x11143,"CHAKMA QUESTION MARK"));
        data.insert(std::make_pair(0x11144,"CHAKMA LETTER LHAA"));
        data.insert(std::make_pair(0x11145,"CHAKMA VOWEL SIGN AA"));
        data.insert(std::make_pair(0x11146,"CHAKMA VOWEL SIGN EI"));
        data.insert(std::make_pair(0x11147,"CHAKMA LETTER VAA"));
        data.insert(std::make_pair(0x11150,"MAHAJANI LETTER A"));
        data.insert(std::make_pair(0x11151,"MAHAJANI LETTER I"));
        data.insert(std::make_pair(0x11152,"MAHAJANI LETTER U"));
        data.insert(std::make_pair(0x11153,"MAHAJANI LETTER E"));
        data.insert(std::make_pair(0x11154,"MAHAJANI LETTER O"));
        data.insert(std::make_pair(0x11155,"MAHAJANI LETTER KA"));
        data.insert(std::make_pair(0x11156,"MAHAJANI LETTER KHA"));
        data.insert(std::make_pair(0x11157,"MAHAJANI LETTER GA"));
        data.insert(std::make_pair(0x11158,"MAHAJANI LETTER GHA"));
        data.insert(std::make_pair(0x11159,"MAHAJANI LETTER CA"));
        data.insert(std::make_pair(0x1115a,"MAHAJANI LETTER CHA"));
        data.insert(std::make_pair(0x1115b,"MAHAJANI LETTER JA"));
        data.insert(std::make_pair(0x1115c,"MAHAJANI LETTER JHA"));
        data.insert(std::make_pair(0x1115d,"MAHAJANI LETTER NYA"));
        data.insert(std::make_pair(0x1115e,"MAHAJANI LETTER TTA"));
        data.insert(std::make_pair(0x1115f,"MAHAJANI LETTER TTHA"));
        data.insert(std::make_pair(0x11160,"MAHAJANI LETTER DDA"));
        data.insert(std::make_pair(0x11161,"MAHAJANI LETTER DDHA"));
        data.insert(std::make_pair(0x11162,"MAHAJANI LETTER NNA"));
        data.insert(std::make_pair(0x11163,"MAHAJANI LETTER TA"));
        data.insert(std::make_pair(0x11164,"MAHAJANI LETTER THA"));
        data.insert(std::make_pair(0x11165,"MAHAJANI LETTER DA"));
        data.insert(std::make_pair(0x11166,"MAHAJANI LETTER DHA"));
        data.insert(std::make_pair(0x11167,"MAHAJANI LETTER NA"));
        data.insert(std::make_pair(0x11168,"MAHAJANI LETTER PA"));
        data.insert(std::make_pair(0x11169,"MAHAJANI LETTER PHA"));
        data.insert(std::make_pair(0x1116a,"MAHAJANI LETTER BA"));
        data.insert(std::make_pair(0x1116b,"MAHAJANI LETTER BHA"));
        data.insert(std::make_pair(0x1116c,"MAHAJANI LETTER MA"));
        data.insert(std::make_pair(0x1116d,"MAHAJANI LETTER RA"));
        data.insert(std::make_pair(0x1116e,"MAHAJANI LETTER LA"));
        data.insert(std::make_pair(0x1116f,"MAHAJANI LETTER VA"));
        data.insert(std::make_pair(0x11170,"MAHAJANI LETTER SA"));
        data.insert(std::make_pair(0x11171,"MAHAJANI LETTER HA"));
        data.insert(std::make_pair(0x11172,"MAHAJANI LETTER RRA"));
        data.insert(std::make_pair(0x11173,"MAHAJANI SIGN NUKTA"));
        data.insert(std::make_pair(0x11174,"MAHAJANI ABBREVIATION SIGN"));
        data.insert(std::make_pair(0x11175,"MAHAJANI SECTION MARK"));
        data.insert(std::make_pair(0x11176,"MAHAJANI LIGATURE SHRI"));
        data.insert(std::make_pair(0x11180,"SHARADA SIGN CANDRABINDU"));
        data.insert(std::make_pair(0x11181,"SHARADA SIGN ANUSVARA"));
        data.insert(std::make_pair(0x11182,"SHARADA SIGN VISARGA"));
        data.insert(std::make_pair(0x11183,"SHARADA LETTER A"));
        data.insert(std::make_pair(0x11184,"SHARADA LETTER AA"));
        data.insert(std::make_pair(0x11185,"SHARADA LETTER I"));
        data.insert(std::make_pair(0x11186,"SHARADA LETTER II"));
        data.insert(std::make_pair(0x11187,"SHARADA LETTER U"));
        data.insert(std::make_pair(0x11188,"SHARADA LETTER UU"));
        data.insert(std::make_pair(0x11189,"SHARADA LETTER VOCALIC R"));
        data.insert(std::make_pair(0x1118a,"SHARADA LETTER VOCALIC RR"));
        data.insert(std::make_pair(0x1118b,"SHARADA LETTER VOCALIC L"));
        data.insert(std::make_pair(0x1118c,"SHARADA LETTER VOCALIC LL"));
        data.insert(std::make_pair(0x1118d,"SHARADA LETTER E"));
        data.insert(std::make_pair(0x1118e,"SHARADA LETTER AI"));
        data.insert(std::make_pair(0x1118f,"SHARADA LETTER O"));
        data.insert(std::make_pair(0x11190,"SHARADA LETTER AU"));
        data.insert(std::make_pair(0x11191,"SHARADA LETTER KA"));
        data.insert(std::make_pair(0x11192,"SHARADA LETTER KHA"));
        data.insert(std::make_pair(0x11193,"SHARADA LETTER GA"));
        data.insert(std::make_pair(0x11194,"SHARADA LETTER GHA"));
        data.insert(std::make_pair(0x11195,"SHARADA LETTER NGA"));
        data.insert(std::make_pair(0x11196,"SHARADA LETTER CA"));
        data.insert(std::make_pair(0x11197,"SHARADA LETTER CHA"));
        data.insert(std::make_pair(0x11198,"SHARADA LETTER JA"));
        data.insert(std::make_pair(0x11199,"SHARADA LETTER JHA"));
        data.insert(std::make_pair(0x1119a,"SHARADA LETTER NYA"));
        data.insert(std::make_pair(0x1119b,"SHARADA LETTER TTA"));
        data.insert(std::make_pair(0x1119c,"SHARADA LETTER TTHA"));
        data.insert(std::make_pair(0x1119d,"SHARADA LETTER DDA"));
        data.insert(std::make_pair(0x1119e,"SHARADA LETTER DDHA"));
        data.insert(std::make_pair(0x1119f,"SHARADA LETTER NNA"));
        data.insert(std::make_pair(0x111a0,"SHARADA LETTER TA"));
        data.insert(std::make_pair(0x111a1,"SHARADA LETTER THA"));
        data.insert(std::make_pair(0x111a2,"SHARADA LETTER DA"));
        data.insert(std::make_pair(0x111a3,"SHARADA LETTER DHA"));
        data.insert(std::make_pair(0x111a4,"SHARADA LETTER NA"));
        data.insert(std::make_pair(0x111a5,"SHARADA LETTER PA"));
        data.insert(std::make_pair(0x111a6,"SHARADA LETTER PHA"));
        data.insert(std::make_pair(0x111a7,"SHARADA LETTER BA"));
        data.insert(std::make_pair(0x111a8,"SHARADA LETTER BHA"));
        data.insert(std::make_pair(0x111a9,"SHARADA LETTER MA"));
        data.insert(std::make_pair(0x111aa,"SHARADA LETTER YA"));
        data.insert(std::make_pair(0x111ab,"SHARADA LETTER RA"));
        data.insert(std::make_pair(0x111ac,"SHARADA LETTER LA"));
        data.insert(std::make_pair(0x111ad,"SHARADA LETTER LLA"));
        data.insert(std::make_pair(0x111ae,"SHARADA LETTER VA"));
        data.insert(std::make_pair(0x111af,"SHARADA LETTER SHA"));
        data.insert(std::make_pair(0x111b0,"SHARADA LETTER SSA"));
        data.insert(std::make_pair(0x111b1,"SHARADA LETTER SA"));
        data.insert(std::make_pair(0x111b2,"SHARADA LETTER HA"));
        data.insert(std::make_pair(0x111b3,"SHARADA VOWEL SIGN AA"));
        data.insert(std::make_pair(0x111b4,"SHARADA VOWEL SIGN I"));
        data.insert(std::make_pair(0x111b5,"SHARADA VOWEL SIGN II"));
        data.insert(std::make_pair(0x111b6,"SHARADA VOWEL SIGN U"));
        data.insert(std::make_pair(0x111b7,"SHARADA VOWEL SIGN UU"));
        data.insert(std::make_pair(0x111b8,"SHARADA VOWEL SIGN VOCALIC R"));
        data.insert(std::make_pair(0x111b9,"SHARADA VOWEL SIGN VOCALIC RR"));
        data.insert(std::make_pair(0x111ba,"SHARADA VOWEL SIGN VOCALIC L"));
        data.insert(std::make_pair(0x111bb,"SHARADA VOWEL SIGN VOCALIC LL"));
        data.insert(std::make_pair(0x111bc,"SHARADA VOWEL SIGN E"));
        data.insert(std::make_pair(0x111bd,"SHARADA VOWEL SIGN AI"));
        data.insert(std::make_pair(0x111be,"SHARADA VOWEL SIGN O"));
        data.insert(std::make_pair(0x111bf,"SHARADA VOWEL SIGN AU"));
        data.insert(std::make_pair(0x111c0,"SHARADA SIGN VIRAMA"));
        data.insert(std::make_pair(0x111c1,"SHARADA SIGN AVAGRAHA"));
        data.insert(std::make_pair(0x111c2,"SHARADA SIGN JIHVAMULIYA"));
        data.insert(std::make_pair(0x111c3,"SHARADA SIGN UPADHMANIYA"));
        data.insert(std::make_pair(0x111c4,"SHARADA OM"));
        data.insert(std::make_pair(0x111c5,"SHARADA DANDA"));
        data.insert(std::make_pair(0x111c6,"SHARADA DOUBLE DANDA"));
        data.insert(std::make_pair(0x111c7,"SHARADA ABBREVIATION SIGN"));
        data.insert(std::make_pair(0x111c8,"SHARADA SEPARATOR"));
        data.insert(std::make_pair(0x111c9,"SHARADA SANDHI MARK"));
        data.insert(std::make_pair(0x111ca,"SHARADA SIGN NUKTA"));
        data.insert(std::make_pair(0x111cb,"SHARADA VOWEL MODIFIER MARK"));
        data.insert(std::make_pair(0x111cc,"SHARADA EXTRA SHORT VOWEL MARK"));
        data.insert(std::make_pair(0x111cd,"SHARADA SUTRA MARK"));
        data.insert(std::make_pair(0x111ce,"SHARADA VOWEL SIGN PRISHTHAMATRA E"));
        data.insert(std::make_pair(0x111cf,"SHARADA SIGN INVERTED CANDRABINDU"));
        data.insert(std::make_pair(0x111d0,"SHARADA DIGIT ZERO"));
        data.insert(std::make_pair(0x111d1,"SHARADA DIGIT ONE"));
        data.insert(std::make_pair(0x111d2,"SHARADA DIGIT TWO"));
        data.insert(std::make_pair(0x111d3,"SHARADA DIGIT THREE"));
        data.insert(std::make_pair(0x111d4,"SHARADA DIGIT FOUR"));
        data.insert(std::make_pair(0x111d5,"SHARADA DIGIT FIVE"));
        data.insert(std::make_pair(0x111d6,"SHARADA DIGIT SIX"));
        data.insert(std::make_pair(0x111d7,"SHARADA DIGIT SEVEN"));
        data.insert(std::make_pair(0x111d8,"SHARADA DIGIT EIGHT"));
        data.insert(std::make_pair(0x111d9,"SHARADA DIGIT NINE"));
        data.insert(std::make_pair(0x111da,"SHARADA EKAM"));
        data.insert(std::make_pair(0x111db,"SHARADA SIGN SIDDHAM"));
        data.insert(std::make_pair(0x111dc,"SHARADA HEADSTROKE"));
        data.insert(std::make_pair(0x111dd,"SHARADA CONTINUATION SIGN"));
        data.insert(std::make_pair(0x111de,"SHARADA SECTION MARK-1"));
        data.insert(std::make_pair(0x111df,"SHARADA SECTION MARK-2"));
        data.insert(std::make_pair(0x111e1,"SINHALA ARCHAIC DIGIT ONE"));
        data.insert(std::make_pair(0x111e2,"SINHALA ARCHAIC DIGIT TWO"));
        data.insert(std::make_pair(0x111e3,"SINHALA ARCHAIC DIGIT THREE"));
        data.insert(std::make_pair(0x111e4,"SINHALA ARCHAIC DIGIT FOUR"));
        data.insert(std::make_pair(0x111e5,"SINHALA ARCHAIC DIGIT FIVE"));
        data.insert(std::make_pair(0x111e6,"SINHALA ARCHAIC DIGIT SIX"));
        data.insert(std::make_pair(0x111e7,"SINHALA ARCHAIC DIGIT SEVEN"));
        data.insert(std::make_pair(0x111e8,"SINHALA ARCHAIC DIGIT EIGHT"));
        data.insert(std::make_pair(0x111e9,"SINHALA ARCHAIC DIGIT NINE"));
        data.insert(std::make_pair(0x111ea,"SINHALA ARCHAIC NUMBER TEN"));
        data.insert(std::make_pair(0x111eb,"SINHALA ARCHAIC NUMBER TWENTY"));
        data.insert(std::make_pair(0x111ec,"SINHALA ARCHAIC NUMBER THIRTY"));
        data.insert(std::make_pair(0x111ed,"SINHALA ARCHAIC NUMBER FORTY"));
        data.insert(std::make_pair(0x111ee,"SINHALA ARCHAIC NUMBER FIFTY"));
        data.insert(std::make_pair(0x111ef,"SINHALA ARCHAIC NUMBER SIXTY"));
        data.insert(std::make_pair(0x111f0,"SINHALA ARCHAIC NUMBER SEVENTY"));
        data.insert(std::make_pair(0x111f1,"SINHALA ARCHAIC NUMBER EIGHTY"));
        data.insert(std::make_pair(0x111f2,"SINHALA ARCHAIC NUMBER NINETY"));
        data.insert(std::make_pair(0x111f3,"SINHALA ARCHAIC NUMBER ONE HUNDRED"));
        data.insert(std::make_pair(0x111f4,"SINHALA ARCHAIC NUMBER ONE THOUSAND"));
        data.insert(std::make_pair(0x11200,"KHOJKI LETTER A"));
        data.insert(std::make_pair(0x11201,"KHOJKI LETTER AA"));
        data.insert(std::make_pair(0x11202,"KHOJKI LETTER I"));
        data.insert(std::make_pair(0x11203,"KHOJKI LETTER U"));
        data.insert(std::make_pair(0x11204,"KHOJKI LETTER E"));
        data.insert(std::make_pair(0x11205,"KHOJKI LETTER AI"));
        data.insert(std::make_pair(0x11206,"KHOJKI LETTER O"));
        data.insert(std::make_pair(0x11207,"KHOJKI LETTER AU"));
        data.insert(std::make_pair(0x11208,"KHOJKI LETTER KA"));
        data.insert(std::make_pair(0x11209,"KHOJKI LETTER KHA"));
        data.insert(std::make_pair(0x1120a,"KHOJKI LETTER GA"));
        data.insert(std::make_pair(0x1120b,"KHOJKI LETTER GGA"));
        data.insert(std::make_pair(0x1120c,"KHOJKI LETTER GHA"));
        data.insert(std::make_pair(0x1120d,"KHOJKI LETTER NGA"));
        data.insert(std::make_pair(0x1120e,"KHOJKI LETTER CA"));
        data.insert(std::make_pair(0x1120f,"KHOJKI LETTER CHA"));
        data.insert(std::make_pair(0x11210,"KHOJKI LETTER JA"));
        data.insert(std::make_pair(0x11211,"KHOJKI LETTER JJA"));
        data.insert(std::make_pair(0x11213,"KHOJKI LETTER NYA"));
        data.insert(std::make_pair(0x11214,"KHOJKI LETTER TTA"));
        data.insert(std::make_pair(0x11215,"KHOJKI LETTER TTHA"));
        data.insert(std::make_pair(0x11216,"KHOJKI LETTER DDA"));
        data.insert(std::make_pair(0x11217,"KHOJKI LETTER DDHA"));
        data.insert(std::make_pair(0x11218,"KHOJKI LETTER NNA"));
        data.insert(std::make_pair(0x11219,"KHOJKI LETTER TA"));
        data.insert(std::make_pair(0x1121a,"KHOJKI LETTER THA"));
        data.insert(std::make_pair(0x1121b,"KHOJKI LETTER DA"));
        data.insert(std::make_pair(0x1121c,"KHOJKI LETTER DDDA"));
        data.insert(std::make_pair(0x1121d,"KHOJKI LETTER DHA"));
        data.insert(std::make_pair(0x1121e,"KHOJKI LETTER NA"));
        data.insert(std::make_pair(0x1121f,"KHOJKI LETTER PA"));
        data.insert(std::make_pair(0x11220,"KHOJKI LETTER PHA"));
        data.insert(std::make_pair(0x11221,"KHOJKI LETTER BA"));
        data.insert(std::make_pair(0x11222,"KHOJKI LETTER BBA"));
        data.insert(std::make_pair(0x11223,"KHOJKI LETTER BHA"));
        data.insert(std::make_pair(0x11224,"KHOJKI LETTER MA"));
        data.insert(std::make_pair(0x11225,"KHOJKI LETTER YA"));
        data.insert(std::make_pair(0x11226,"KHOJKI LETTER RA"));
        data.insert(std::make_pair(0x11227,"KHOJKI LETTER LA"));
        data.insert(std::make_pair(0x11228,"KHOJKI LETTER VA"));
        data.insert(std::make_pair(0x11229,"KHOJKI LETTER SA"));
        data.insert(std::make_pair(0x1122a,"KHOJKI LETTER HA"));
        data.insert(std::make_pair(0x1122b,"KHOJKI LETTER LLA"));
        data.insert(std::make_pair(0x1122c,"KHOJKI VOWEL SIGN AA"));
        data.insert(std::make_pair(0x1122d,"KHOJKI VOWEL SIGN I"));
        data.insert(std::make_pair(0x1122e,"KHOJKI VOWEL SIGN II"));
        data.insert(std::make_pair(0x1122f,"KHOJKI VOWEL SIGN U"));
        data.insert(std::make_pair(0x11230,"KHOJKI VOWEL SIGN E"));
        data.insert(std::make_pair(0x11231,"KHOJKI VOWEL SIGN AI"));
        data.insert(std::make_pair(0x11232,"KHOJKI VOWEL SIGN O"));
        data.insert(std::make_pair(0x11233,"KHOJKI VOWEL SIGN AU"));
        data.insert(std::make_pair(0x11234,"KHOJKI SIGN ANUSVARA"));
        data.insert(std::make_pair(0x11235,"KHOJKI SIGN VIRAMA"));
        data.insert(std::make_pair(0x11236,"KHOJKI SIGN NUKTA"));
        data.insert(std::make_pair(0x11237,"KHOJKI SIGN SHADDA"));
        data.insert(std::make_pair(0x11238,"KHOJKI DANDA"));
        data.insert(std::make_pair(0x11239,"KHOJKI DOUBLE DANDA"));
        data.insert(std::make_pair(0x1123a,"KHOJKI WORD SEPARATOR"));
        data.insert(std::make_pair(0x1123b,"KHOJKI SECTION MARK"));
        data.insert(std::make_pair(0x1123c,"KHOJKI DOUBLE SECTION MARK"));
        data.insert(std::make_pair(0x1123d,"KHOJKI ABBREVIATION SIGN"));
        data.insert(std::make_pair(0x1123e,"KHOJKI SIGN SUKUN"));
        data.insert(std::make_pair(0x1123f,"KHOJKI LETTER QA"));
        data.insert(std::make_pair(0x11240,"KHOJKI LETTER SHORT I"));
        data.insert(std::make_pair(0x11241,"KHOJKI VOWEL SIGN VOCALIC R"));
        data.insert(std::make_pair(0x11280,"MULTANI LETTER A"));
        data.insert(std::make_pair(0x11281,"MULTANI LETTER I"));
        data.insert(std::make_pair(0x11282,"MULTANI LETTER U"));
        data.insert(std::make_pair(0x11283,"MULTANI LETTER E"));
        data.insert(std::make_pair(0x11284,"MULTANI LETTER KA"));
        data.insert(std::make_pair(0x11285,"MULTANI LETTER KHA"));
        data.insert(std::make_pair(0x11286,"MULTANI LETTER GA"));
        data.insert(std::make_pair(0x11288,"MULTANI LETTER GHA"));
        data.insert(std::make_pair(0x1128a,"MULTANI LETTER CA"));
        data.insert(std::make_pair(0x1128b,"MULTANI LETTER CHA"));
        data.insert(std::make_pair(0x1128c,"MULTANI LETTER JA"));
        data.insert(std::make_pair(0x1128d,"MULTANI LETTER JJA"));
        data.insert(std::make_pair(0x1128f,"MULTANI LETTER NYA"));
        data.insert(std::make_pair(0x11290,"MULTANI LETTER TTA"));
        data.insert(std::make_pair(0x11291,"MULTANI LETTER TTHA"));
        data.insert(std::make_pair(0x11292,"MULTANI LETTER DDA"));
        data.insert(std::make_pair(0x11293,"MULTANI LETTER DDDA"));
        data.insert(std::make_pair(0x11294,"MULTANI LETTER DDHA"));
        data.insert(std::make_pair(0x11295,"MULTANI LETTER NNA"));
        data.insert(std::make_pair(0x11296,"MULTANI LETTER TA"));
        data.insert(std::make_pair(0x11297,"MULTANI LETTER THA"));
        data.insert(std::make_pair(0x11298,"MULTANI LETTER DA"));
        data.insert(std::make_pair(0x11299,"MULTANI LETTER DHA"));
        data.insert(std::make_pair(0x1129a,"MULTANI LETTER NA"));
        data.insert(std::make_pair(0x1129b,"MULTANI LETTER PA"));
        data.insert(std::make_pair(0x1129c,"MULTANI LETTER PHA"));
        data.insert(std::make_pair(0x1129d,"MULTANI LETTER BA"));
        data.insert(std::make_pair(0x1129f,"MULTANI LETTER BHA"));
        data.insert(std::make_pair(0x112a0,"MULTANI LETTER MA"));
        data.insert(std::make_pair(0x112a1,"MULTANI LETTER YA"));
        data.insert(std::make_pair(0x112a2,"MULTANI LETTER RA"));
        data.insert(std::make_pair(0x112a3,"MULTANI LETTER LA"));
        data.insert(std::make_pair(0x112a4,"MULTANI LETTER VA"));
        data.insert(std::make_pair(0x112a5,"MULTANI LETTER SA"));
        data.insert(std::make_pair(0x112a6,"MULTANI LETTER HA"));
        data.insert(std::make_pair(0x112a7,"MULTANI LETTER RRA"));
        data.insert(std::make_pair(0x112a8,"MULTANI LETTER RHA"));
        data.insert(std::make_pair(0x112a9,"MULTANI SECTION MARK"));
        data.insert(std::make_pair(0x112b0,"KHUDAWADI LETTER A"));
        data.insert(std::make_pair(0x112b1,"KHUDAWADI LETTER AA"));
        data.insert(std::make_pair(0x112b2,"KHUDAWADI LETTER I"));
        data.insert(std::make_pair(0x112b3,"KHUDAWADI LETTER II"));
        data.insert(std::make_pair(0x112b4,"KHUDAWADI LETTER U"));
        data.insert(std::make_pair(0x112b5,"KHUDAWADI LETTER UU"));
        data.insert(std::make_pair(0x112b6,"KHUDAWADI LETTER E"));
        data.insert(std::make_pair(0x112b7,"KHUDAWADI LETTER AI"));
        data.insert(std::make_pair(0x112b8,"KHUDAWADI LETTER O"));
        data.insert(std::make_pair(0x112b9,"KHUDAWADI LETTER AU"));
        data.insert(std::make_pair(0x112ba,"KHUDAWADI LETTER KA"));
        data.insert(std::make_pair(0x112bb,"KHUDAWADI LETTER KHA"));
        data.insert(std::make_pair(0x112bc,"KHUDAWADI LETTER GA"));
        data.insert(std::make_pair(0x112bd,"KHUDAWADI LETTER GGA"));
        data.insert(std::make_pair(0x112be,"KHUDAWADI LETTER GHA"));
        data.insert(std::make_pair(0x112bf,"KHUDAWADI LETTER NGA"));
        data.insert(std::make_pair(0x112c0,"KHUDAWADI LETTER CA"));
        data.insert(std::make_pair(0x112c1,"KHUDAWADI LETTER CHA"));
        data.insert(std::make_pair(0x112c2,"KHUDAWADI LETTER JA"));
        data.insert(std::make_pair(0x112c3,"KHUDAWADI LETTER JJA"));
        data.insert(std::make_pair(0x112c4,"KHUDAWADI LETTER JHA"));
        data.insert(std::make_pair(0x112c5,"KHUDAWADI LETTER NYA"));
        data.insert(std::make_pair(0x112c6,"KHUDAWADI LETTER TTA"));
        data.insert(std::make_pair(0x112c7,"KHUDAWADI LETTER TTHA"));
        data.insert(std::make_pair(0x112c8,"KHUDAWADI LETTER DDA"));
        data.insert(std::make_pair(0x112c9,"KHUDAWADI LETTER DDDA"));
        data.insert(std::make_pair(0x112ca,"KHUDAWADI LETTER RRA"));
        data.insert(std::make_pair(0x112cb,"KHUDAWADI LETTER DDHA"));
        data.insert(std::make_pair(0x112cc,"KHUDAWADI LETTER NNA"));
        data.insert(std::make_pair(0x112cd,"KHUDAWADI LETTER TA"));
        data.insert(std::make_pair(0x112ce,"KHUDAWADI LETTER THA"));
        data.insert(std::make_pair(0x112cf,"KHUDAWADI LETTER DA"));
        data.insert(std::make_pair(0x112d0,"KHUDAWADI LETTER DHA"));
        data.insert(std::make_pair(0x112d1,"KHUDAWADI LETTER NA"));
        data.insert(std::make_pair(0x112d2,"KHUDAWADI LETTER PA"));
        data.insert(std::make_pair(0x112d3,"KHUDAWADI LETTER PHA"));
        data.insert(std::make_pair(0x112d4,"KHUDAWADI LETTER BA"));
        data.insert(std::make_pair(0x112d5,"KHUDAWADI LETTER BBA"));
        data.insert(std::make_pair(0x112d6,"KHUDAWADI LETTER BHA"));
        data.insert(std::make_pair(0x112d7,"KHUDAWADI LETTER MA"));
        data.insert(std::make_pair(0x112d8,"KHUDAWADI LETTER YA"));
        data.insert(std::make_pair(0x112d9,"KHUDAWADI LETTER RA"));
        data.insert(std::make_pair(0x112da,"KHUDAWADI LETTER LA"));
        data.insert(std::make_pair(0x112db,"KHUDAWADI LETTER VA"));
        data.insert(std::make_pair(0x112dc,"KHUDAWADI LETTER SHA"));
        data.insert(std::make_pair(0x112dd,"KHUDAWADI LETTER SA"));
        data.insert(std::make_pair(0x112de,"KHUDAWADI LETTER HA"));
        data.insert(std::make_pair(0x112df,"KHUDAWADI SIGN ANUSVARA"));
        data.insert(std::make_pair(0x112e0,"KHUDAWADI VOWEL SIGN AA"));
        data.insert(std::make_pair(0x112e1,"KHUDAWADI VOWEL SIGN I"));
        data.insert(std::make_pair(0x112e2,"KHUDAWADI VOWEL SIGN II"));
        data.insert(std::make_pair(0x112e3,"KHUDAWADI VOWEL SIGN U"));
        data.insert(std::make_pair(0x112e4,"KHUDAWADI VOWEL SIGN UU"));
        data.insert(std::make_pair(0x112e5,"KHUDAWADI VOWEL SIGN E"));
        data.insert(std::make_pair(0x112e6,"KHUDAWADI VOWEL SIGN AI"));
        data.insert(std::make_pair(0x112e7,"KHUDAWADI VOWEL SIGN O"));
        data.insert(std::make_pair(0x112e8,"KHUDAWADI VOWEL SIGN AU"));
        data.insert(std::make_pair(0x112e9,"KHUDAWADI SIGN NUKTA"));
        data.insert(std::make_pair(0x112ea,"KHUDAWADI SIGN VIRAMA"));
        data.insert(std::make_pair(0x112f0,"KHUDAWADI DIGIT ZERO"));
        data.insert(std::make_pair(0x112f1,"KHUDAWADI DIGIT ONE"));
        data.insert(std::make_pair(0x112f2,"KHUDAWADI DIGIT TWO"));
        data.insert(std::make_pair(0x112f3,"KHUDAWADI DIGIT THREE"));
        data.insert(std::make_pair(0x112f4,"KHUDAWADI DIGIT FOUR"));
        data.insert(std::make_pair(0x112f5,"KHUDAWADI DIGIT FIVE"));
        data.insert(std::make_pair(0x112f6,"KHUDAWADI DIGIT SIX"));
        data.insert(std::make_pair(0x112f7,"KHUDAWADI DIGIT SEVEN"));
        data.insert(std::make_pair(0x112f8,"KHUDAWADI DIGIT EIGHT"));
        data.insert(std::make_pair(0x112f9,"KHUDAWADI DIGIT NINE"));
        data.insert(std::make_pair(0x11300,"GRANTHA SIGN COMBINING ANUSVARA ABOVE"));
        data.insert(std::make_pair(0x11301,"GRANTHA SIGN CANDRABINDU"));
        data.insert(std::make_pair(0x11302,"GRANTHA SIGN ANUSVARA"));
        data.insert(std::make_pair(0x11303,"GRANTHA SIGN VISARGA"));
        data.insert(std::make_pair(0x11305,"GRANTHA LETTER A"));
        data.insert(std::make_pair(0x11306,"GRANTHA LETTER AA"));
        data.insert(std::make_pair(0x11307,"GRANTHA LETTER I"));
        data.insert(std::make_pair(0x11308,"GRANTHA LETTER II"));
        data.insert(std::make_pair(0x11309,"GRANTHA LETTER U"));
        data.insert(std::make_pair(0x1130a,"GRANTHA LETTER UU"));
        data.insert(std::make_pair(0x1130b,"GRANTHA LETTER VOCALIC R"));
        data.insert(std::make_pair(0x1130c,"GRANTHA LETTER VOCALIC L"));
        data.insert(std::make_pair(0x1130f,"GRANTHA LETTER EE"));
        data.insert(std::make_pair(0x11310,"GRANTHA LETTER AI"));
        data.insert(std::make_pair(0x11313,"GRANTHA LETTER OO"));
        data.insert(std::make_pair(0x11314,"GRANTHA LETTER AU"));
        data.insert(std::make_pair(0x11315,"GRANTHA LETTER KA"));
        data.insert(std::make_pair(0x11316,"GRANTHA LETTER KHA"));
        data.insert(std::make_pair(0x11317,"GRANTHA LETTER GA"));
        data.insert(std::make_pair(0x11318,"GRANTHA LETTER GHA"));
        data.insert(std::make_pair(0x11319,"GRANTHA LETTER NGA"));
        data.insert(std::make_pair(0x1131a,"GRANTHA LETTER CA"));
        data.insert(std::make_pair(0x1131b,"GRANTHA LETTER CHA"));
        data.insert(std::make_pair(0x1131c,"GRANTHA LETTER JA"));
        data.insert(std::make_pair(0x1131d,"GRANTHA LETTER JHA"));
        data.insert(std::make_pair(0x1131e,"GRANTHA LETTER NYA"));
        data.insert(std::make_pair(0x1131f,"GRANTHA LETTER TTA"));
        data.insert(std::make_pair(0x11320,"GRANTHA LETTER TTHA"));
        data.insert(std::make_pair(0x11321,"GRANTHA LETTER DDA"));
        data.insert(std::make_pair(0x11322,"GRANTHA LETTER DDHA"));
        data.insert(std::make_pair(0x11323,"GRANTHA LETTER NNA"));
        data.insert(std::make_pair(0x11324,"GRANTHA LETTER TA"));
        data.insert(std::make_pair(0x11325,"GRANTHA LETTER THA"));
        data.insert(std::make_pair(0x11326,"GRANTHA LETTER DA"));
        data.insert(std::make_pair(0x11327,"GRANTHA LETTER DHA"));
        data.insert(std::make_pair(0x11328,"GRANTHA LETTER NA"));
        data.insert(std::make_pair(0x1132a,"GRANTHA LETTER PA"));
        data.insert(std::make_pair(0x1132b,"GRANTHA LETTER PHA"));
        data.insert(std::make_pair(0x1132c,"GRANTHA LETTER BA"));
        data.insert(std::make_pair(0x1132d,"GRANTHA LETTER BHA"));
        data.insert(std::make_pair(0x1132e,"GRANTHA LETTER MA"));
        data.insert(std::make_pair(0x1132f,"GRANTHA LETTER YA"));
        data.insert(std::make_pair(0x11330,"GRANTHA LETTER RA"));
        data.insert(std::make_pair(0x11332,"GRANTHA LETTER LA"));
        data.insert(std::make_pair(0x11333,"GRANTHA LETTER LLA"));
        data.insert(std::make_pair(0x11335,"GRANTHA LETTER VA"));
        data.insert(std::make_pair(0x11336,"GRANTHA LETTER SHA"));
        data.insert(std::make_pair(0x11337,"GRANTHA LETTER SSA"));
        data.insert(std::make_pair(0x11338,"GRANTHA LETTER SA"));
        data.insert(std::make_pair(0x11339,"GRANTHA LETTER HA"));
        data.insert(std::make_pair(0x1133b,"COMBINING BINDU BELOW"));
        data.insert(std::make_pair(0x1133c,"GRANTHA SIGN NUKTA"));
        data.insert(std::make_pair(0x1133d,"GRANTHA SIGN AVAGRAHA"));
        data.insert(std::make_pair(0x1133e,"GRANTHA VOWEL SIGN AA"));
        data.insert(std::make_pair(0x1133f,"GRANTHA VOWEL SIGN I"));
        data.insert(std::make_pair(0x11340,"GRANTHA VOWEL SIGN II"));
        data.insert(std::make_pair(0x11341,"GRANTHA VOWEL SIGN U"));
        data.insert(std::make_pair(0x11342,"GRANTHA VOWEL SIGN UU"));
        data.insert(std::make_pair(0x11343,"GRANTHA VOWEL SIGN VOCALIC R"));
        data.insert(std::make_pair(0x11344,"GRANTHA VOWEL SIGN VOCALIC RR"));
        data.insert(std::make_pair(0x11347,"GRANTHA VOWEL SIGN EE"));
        data.insert(std::make_pair(0x11348,"GRANTHA VOWEL SIGN AI"));
        data.insert(std::make_pair(0x1134b,"GRANTHA VOWEL SIGN OO"));
        data.insert(std::make_pair(0x1134c,"GRANTHA VOWEL SIGN AU"));
        data.insert(std::make_pair(0x1134d,"GRANTHA SIGN VIRAMA"));
        data.insert(std::make_pair(0x11350,"GRANTHA OM"));
        data.insert(std::make_pair(0x11357,"GRANTHA AU LENGTH MARK"));
        data.insert(std::make_pair(0x1135d,"GRANTHA SIGN PLUTA"));
        data.insert(std::make_pair(0x1135e,"GRANTHA LETTER VEDIC ANUSVARA"));
        data.insert(std::make_pair(0x1135f,"GRANTHA LETTER VEDIC DOUBLE ANUSVARA"));
        data.insert(std::make_pair(0x11360,"GRANTHA LETTER VOCALIC RR"));
        data.insert(std::make_pair(0x11361,"GRANTHA LETTER VOCALIC LL"));
        data.insert(std::make_pair(0x11362,"GRANTHA VOWEL SIGN VOCALIC L"));
        data.insert(std::make_pair(0x11363,"GRANTHA VOWEL SIGN VOCALIC LL"));
        data.insert(std::make_pair(0x11366,"COMBINING GRANTHA DIGIT ZERO"));
        data.insert(std::make_pair(0x11367,"COMBINING GRANTHA DIGIT ONE"));
        data.insert(std::make_pair(0x11368,"COMBINING GRANTHA DIGIT TWO"));
        data.insert(std::make_pair(0x11369,"COMBINING GRANTHA DIGIT THREE"));
        data.insert(std::make_pair(0x1136a,"COMBINING GRANTHA DIGIT FOUR"));
        data.insert(std::make_pair(0x1136b,"COMBINING GRANTHA DIGIT FIVE"));
        data.insert(std::make_pair(0x1136c,"COMBINING GRANTHA DIGIT SIX"));
        data.insert(std::make_pair(0x11370,"COMBINING GRANTHA LETTER A"));
        data.insert(std::make_pair(0x11371,"COMBINING GRANTHA LETTER KA"));
        data.insert(std::make_pair(0x11372,"COMBINING GRANTHA LETTER NA"));
        data.insert(std::make_pair(0x11373,"COMBINING GRANTHA LETTER VI"));
        data.insert(std::make_pair(0x11374,"COMBINING GRANTHA LETTER PA"));
        data.insert(std::make_pair(0x11400,"NEWA LETTER A"));
        data.insert(std::make_pair(0x11401,"NEWA LETTER AA"));
        data.insert(std::make_pair(0x11402,"NEWA LETTER I"));
        data.insert(std::make_pair(0x11403,"NEWA LETTER II"));
        data.insert(std::make_pair(0x11404,"NEWA LETTER U"));
        data.insert(std::make_pair(0x11405,"NEWA LETTER UU"));
        data.insert(std::make_pair(0x11406,"NEWA LETTER VOCALIC R"));
        data.insert(std::make_pair(0x11407,"NEWA LETTER VOCALIC RR"));
        data.insert(std::make_pair(0x11408,"NEWA LETTER VOCALIC L"));
        data.insert(std::make_pair(0x11409,"NEWA LETTER VOCALIC LL"));
        data.insert(std::make_pair(0x1140a,"NEWA LETTER E"));
        data.insert(std::make_pair(0x1140b,"NEWA LETTER AI"));
        data.insert(std::make_pair(0x1140c,"NEWA LETTER O"));
        data.insert(std::make_pair(0x1140d,"NEWA LETTER AU"));
        data.insert(std::make_pair(0x1140e,"NEWA LETTER KA"));
        data.insert(std::make_pair(0x1140f,"NEWA LETTER KHA"));
        data.insert(std::make_pair(0x11410,"NEWA LETTER GA"));
        data.insert(std::make_pair(0x11411,"NEWA LETTER GHA"));
        data.insert(std::make_pair(0x11412,"NEWA LETTER NGA"));
        data.insert(std::make_pair(0x11413,"NEWA LETTER NGHA"));
        data.insert(std::make_pair(0x11414,"NEWA LETTER CA"));
        data.insert(std::make_pair(0x11415,"NEWA LETTER CHA"));
        data.insert(std::make_pair(0x11416,"NEWA LETTER JA"));
        data.insert(std::make_pair(0x11417,"NEWA LETTER JHA"));
        data.insert(std::make_pair(0x11418,"NEWA LETTER NYA"));
        data.insert(std::make_pair(0x11419,"NEWA LETTER NYHA"));
        data.insert(std::make_pair(0x1141a,"NEWA LETTER TTA"));
        data.insert(std::make_pair(0x1141b,"NEWA LETTER TTHA"));
        data.insert(std::make_pair(0x1141c,"NEWA LETTER DDA"));
        data.insert(std::make_pair(0x1141d,"NEWA LETTER DDHA"));
        data.insert(std::make_pair(0x1141e,"NEWA LETTER NNA"));
        data.insert(std::make_pair(0x1141f,"NEWA LETTER TA"));
        data.insert(std::make_pair(0x11420,"NEWA LETTER THA"));
        data.insert(std::make_pair(0x11421,"NEWA LETTER DA"));
        data.insert(std::make_pair(0x11422,"NEWA LETTER DHA"));
        data.insert(std::make_pair(0x11423,"NEWA LETTER NA"));
        data.insert(std::make_pair(0x11424,"NEWA LETTER NHA"));
        data.insert(std::make_pair(0x11425,"NEWA LETTER PA"));
        data.insert(std::make_pair(0x11426,"NEWA LETTER PHA"));
        data.insert(std::make_pair(0x11427,"NEWA LETTER BA"));
        data.insert(std::make_pair(0x11428,"NEWA LETTER BHA"));
        data.insert(std::make_pair(0x11429,"NEWA LETTER MA"));
        data.insert(std::make_pair(0x1142a,"NEWA LETTER MHA"));
        data.insert(std::make_pair(0x1142b,"NEWA LETTER YA"));
        data.insert(std::make_pair(0x1142c,"NEWA LETTER RA"));
        data.insert(std::make_pair(0x1142d,"NEWA LETTER RHA"));
        data.insert(std::make_pair(0x1142e,"NEWA LETTER LA"));
        data.insert(std::make_pair(0x1142f,"NEWA LETTER LHA"));
        data.insert(std::make_pair(0x11430,"NEWA LETTER WA"));
        data.insert(std::make_pair(0x11431,"NEWA LETTER SHA"));
        data.insert(std::make_pair(0x11432,"NEWA LETTER SSA"));
        data.insert(std::make_pair(0x11433,"NEWA LETTER SA"));
        data.insert(std::make_pair(0x11434,"NEWA LETTER HA"));
        data.insert(std::make_pair(0x11435,"NEWA VOWEL SIGN AA"));
        data.insert(std::make_pair(0x11436,"NEWA VOWEL SIGN I"));
        data.insert(std::make_pair(0x11437,"NEWA VOWEL SIGN II"));
        data.insert(std::make_pair(0x11438,"NEWA VOWEL SIGN U"));
        data.insert(std::make_pair(0x11439,"NEWA VOWEL SIGN UU"));
        data.insert(std::make_pair(0x1143a,"NEWA VOWEL SIGN VOCALIC R"));
        data.insert(std::make_pair(0x1143b,"NEWA VOWEL SIGN VOCALIC RR"));
        data.insert(std::make_pair(0x1143c,"NEWA VOWEL SIGN VOCALIC L"));
        data.insert(std::make_pair(0x1143d,"NEWA VOWEL SIGN VOCALIC LL"));
        data.insert(std::make_pair(0x1143e,"NEWA VOWEL SIGN E"));
        data.insert(std::make_pair(0x1143f,"NEWA VOWEL SIGN AI"));
        data.insert(std::make_pair(0x11440,"NEWA VOWEL SIGN O"));
        data.insert(std::make_pair(0x11441,"NEWA VOWEL SIGN AU"));
        data.insert(std::make_pair(0x11442,"NEWA SIGN VIRAMA"));
        data.insert(std::make_pair(0x11443,"NEWA SIGN CANDRABINDU"));
        data.insert(std::make_pair(0x11444,"NEWA SIGN ANUSVARA"));
        data.insert(std::make_pair(0x11445,"NEWA SIGN VISARGA"));
        data.insert(std::make_pair(0x11446,"NEWA SIGN NUKTA"));
        data.insert(std::make_pair(0x11447,"NEWA SIGN AVAGRAHA"));
        data.insert(std::make_pair(0x11448,"NEWA SIGN FINAL ANUSVARA"));
        data.insert(std::make_pair(0x11449,"NEWA OM"));
        data.insert(std::make_pair(0x1144a,"NEWA SIDDHI"));
        data.insert(std::make_pair(0x1144b,"NEWA DANDA"));
        data.insert(std::make_pair(0x1144c,"NEWA DOUBLE DANDA"));
        data.insert(std::make_pair(0x1144d,"NEWA COMMA"));
        data.insert(std::make_pair(0x1144e,"NEWA GAP FILLER"));
        data.insert(std::make_pair(0x1144f,"NEWA ABBREVIATION SIGN"));
        data.insert(std::make_pair(0x11450,"NEWA DIGIT ZERO"));
        data.insert(std::make_pair(0x11451,"NEWA DIGIT ONE"));
        data.insert(std::make_pair(0x11452,"NEWA DIGIT TWO"));
        data.insert(std::make_pair(0x11453,"NEWA DIGIT THREE"));
        data.insert(std::make_pair(0x11454,"NEWA DIGIT FOUR"));
        data.insert(std::make_pair(0x11455,"NEWA DIGIT FIVE"));
        data.insert(std::make_pair(0x11456,"NEWA DIGIT SIX"));
        data.insert(std::make_pair(0x11457,"NEWA DIGIT SEVEN"));
        data.insert(std::make_pair(0x11458,"NEWA DIGIT EIGHT"));
        data.insert(std::make_pair(0x11459,"NEWA DIGIT NINE"));
        data.insert(std::make_pair(0x1145a,"NEWA DOUBLE COMMA"));
        data.insert(std::make_pair(0x1145b,"NEWA PLACEHOLDER MARK"));
        data.insert(std::make_pair(0x1145d,"NEWA INSERTION SIGN"));
        data.insert(std::make_pair(0x1145e,"NEWA SANDHI MARK"));
        data.insert(std::make_pair(0x1145f,"NEWA LETTER VEDIC ANUSVARA"));
        data.insert(std::make_pair(0x11460,"NEWA SIGN JIHVAMULIYA"));
        data.insert(std::make_pair(0x11461,"NEWA SIGN UPADHMANIYA"));
        data.insert(std::make_pair(0x11480,"TIRHUTA ANJI"));
        data.insert(std::make_pair(0x11481,"TIRHUTA LETTER A"));
        data.insert(std::make_pair(0x11482,"TIRHUTA LETTER AA"));
        data.insert(std::make_pair(0x11483,"TIRHUTA LETTER I"));
        data.insert(std::make_pair(0x11484,"TIRHUTA LETTER II"));
        data.insert(std::make_pair(0x11485,"TIRHUTA LETTER U"));
        data.insert(std::make_pair(0x11486,"TIRHUTA LETTER UU"));
        data.insert(std::make_pair(0x11487,"TIRHUTA LETTER VOCALIC R"));
        data.insert(std::make_pair(0x11488,"TIRHUTA LETTER VOCALIC RR"));
        data.insert(std::make_pair(0x11489,"TIRHUTA LETTER VOCALIC L"));
        data.insert(std::make_pair(0x1148a,"TIRHUTA LETTER VOCALIC LL"));
        data.insert(std::make_pair(0x1148b,"TIRHUTA LETTER E"));
        data.insert(std::make_pair(0x1148c,"TIRHUTA LETTER AI"));
        data.insert(std::make_pair(0x1148d,"TIRHUTA LETTER O"));
        data.insert(std::make_pair(0x1148e,"TIRHUTA LETTER AU"));
        data.insert(std::make_pair(0x1148f,"TIRHUTA LETTER KA"));
        data.insert(std::make_pair(0x11490,"TIRHUTA LETTER KHA"));
        data.insert(std::make_pair(0x11491,"TIRHUTA LETTER GA"));
        data.insert(std::make_pair(0x11492,"TIRHUTA LETTER GHA"));
        data.insert(std::make_pair(0x11493,"TIRHUTA LETTER NGA"));
        data.insert(std::make_pair(0x11494,"TIRHUTA LETTER CA"));
        data.insert(std::make_pair(0x11495,"TIRHUTA LETTER CHA"));
        data.insert(std::make_pair(0x11496,"TIRHUTA LETTER JA"));
        data.insert(std::make_pair(0x11497,"TIRHUTA LETTER JHA"));
        data.insert(std::make_pair(0x11498,"TIRHUTA LETTER NYA"));
        data.insert(std::make_pair(0x11499,"TIRHUTA LETTER TTA"));
        data.insert(std::make_pair(0x1149a,"TIRHUTA LETTER TTHA"));
        data.insert(std::make_pair(0x1149b,"TIRHUTA LETTER DDA"));
        data.insert(std::make_pair(0x1149c,"TIRHUTA LETTER DDHA"));
        data.insert(std::make_pair(0x1149d,"TIRHUTA LETTER NNA"));
        data.insert(std::make_pair(0x1149e,"TIRHUTA LETTER TA"));
        data.insert(std::make_pair(0x1149f,"TIRHUTA LETTER THA"));
        data.insert(std::make_pair(0x114a0,"TIRHUTA LETTER DA"));
        data.insert(std::make_pair(0x114a1,"TIRHUTA LETTER DHA"));
        data.insert(std::make_pair(0x114a2,"TIRHUTA LETTER NA"));
        data.insert(std::make_pair(0x114a3,"TIRHUTA LETTER PA"));
        data.insert(std::make_pair(0x114a4,"TIRHUTA LETTER PHA"));
        data.insert(std::make_pair(0x114a5,"TIRHUTA LETTER BA"));
        data.insert(std::make_pair(0x114a6,"TIRHUTA LETTER BHA"));
        data.insert(std::make_pair(0x114a7,"TIRHUTA LETTER MA"));
        data.insert(std::make_pair(0x114a8,"TIRHUTA LETTER YA"));
        data.insert(std::make_pair(0x114a9,"TIRHUTA LETTER RA"));
        data.insert(std::make_pair(0x114aa,"TIRHUTA LETTER LA"));
        data.insert(std::make_pair(0x114ab,"TIRHUTA LETTER VA"));
        data.insert(std::make_pair(0x114ac,"TIRHUTA LETTER SHA"));
        data.insert(std::make_pair(0x114ad,"TIRHUTA LETTER SSA"));
        data.insert(std::make_pair(0x114ae,"TIRHUTA LETTER SA"));
        data.insert(std::make_pair(0x114af,"TIRHUTA LETTER HA"));
        data.insert(std::make_pair(0x114b0,"TIRHUTA VOWEL SIGN AA"));
        data.insert(std::make_pair(0x114b1,"TIRHUTA VOWEL SIGN I"));
        data.insert(std::make_pair(0x114b2,"TIRHUTA VOWEL SIGN II"));
        data.insert(std::make_pair(0x114b3,"TIRHUTA VOWEL SIGN U"));
        data.insert(std::make_pair(0x114b4,"TIRHUTA VOWEL SIGN UU"));
        data.insert(std::make_pair(0x114b5,"TIRHUTA VOWEL SIGN VOCALIC R"));
        data.insert(std::make_pair(0x114b6,"TIRHUTA VOWEL SIGN VOCALIC RR"));
        data.insert(std::make_pair(0x114b7,"TIRHUTA VOWEL SIGN VOCALIC L"));
        data.insert(std::make_pair(0x114b8,"TIRHUTA VOWEL SIGN VOCALIC LL"));
        data.insert(std::make_pair(0x114b9,"TIRHUTA VOWEL SIGN E"));
        data.insert(std::make_pair(0x114ba,"TIRHUTA VOWEL SIGN SHORT E"));
        data.insert(std::make_pair(0x114bb,"TIRHUTA VOWEL SIGN AI"));
        data.insert(std::make_pair(0x114bc,"TIRHUTA VOWEL SIGN O"));
        data.insert(std::make_pair(0x114bd,"TIRHUTA VOWEL SIGN SHORT O"));
        data.insert(std::make_pair(0x114be,"TIRHUTA VOWEL SIGN AU"));
        data.insert(std::make_pair(0x114bf,"TIRHUTA SIGN CANDRABINDU"));
        data.insert(std::make_pair(0x114c0,"TIRHUTA SIGN ANUSVARA"));
        data.insert(std::make_pair(0x114c1,"TIRHUTA SIGN VISARGA"));
        data.insert(std::make_pair(0x114c2,"TIRHUTA SIGN VIRAMA"));
        data.insert(std::make_pair(0x114c3,"TIRHUTA SIGN NUKTA"));
        data.insert(std::make_pair(0x114c4,"TIRHUTA SIGN AVAGRAHA"));
        data.insert(std::make_pair(0x114c5,"TIRHUTA GVANG"));
        data.insert(std::make_pair(0x114c6,"TIRHUTA ABBREVIATION SIGN"));
        data.insert(std::make_pair(0x114c7,"TIRHUTA OM"));
        data.insert(std::make_pair(0x114d0,"TIRHUTA DIGIT ZERO"));
        data.insert(std::make_pair(0x114d1,"TIRHUTA DIGIT ONE"));
        data.insert(std::make_pair(0x114d2,"TIRHUTA DIGIT TWO"));
        data.insert(std::make_pair(0x114d3,"TIRHUTA DIGIT THREE"));
        data.insert(std::make_pair(0x114d4,"TIRHUTA DIGIT FOUR"));
        data.insert(std::make_pair(0x114d5,"TIRHUTA DIGIT FIVE"));
        data.insert(std::make_pair(0x114d6,"TIRHUTA DIGIT SIX"));
        data.insert(std::make_pair(0x114d7,"TIRHUTA DIGIT SEVEN"));
        data.insert(std::make_pair(0x114d8,"TIRHUTA DIGIT EIGHT"));
        data.insert(std::make_pair(0x114d9,"TIRHUTA DIGIT NINE"));
        data.insert(std::make_pair(0x11580,"SIDDHAM LETTER A"));
        data.insert(std::make_pair(0x11581,"SIDDHAM LETTER AA"));
        data.insert(std::make_pair(0x11582,"SIDDHAM LETTER I"));
        data.insert(std::make_pair(0x11583,"SIDDHAM LETTER II"));
        data.insert(std::make_pair(0x11584,"SIDDHAM LETTER U"));
        data.insert(std::make_pair(0x11585,"SIDDHAM LETTER UU"));
        data.insert(std::make_pair(0x11586,"SIDDHAM LETTER VOCALIC R"));
        data.insert(std::make_pair(0x11587,"SIDDHAM LETTER VOCALIC RR"));
        data.insert(std::make_pair(0x11588,"SIDDHAM LETTER VOCALIC L"));
        data.insert(std::make_pair(0x11589,"SIDDHAM LETTER VOCALIC LL"));
        data.insert(std::make_pair(0x1158a,"SIDDHAM LETTER E"));
        data.insert(std::make_pair(0x1158b,"SIDDHAM LETTER AI"));
        data.insert(std::make_pair(0x1158c,"SIDDHAM LETTER O"));
        data.insert(std::make_pair(0x1158d,"SIDDHAM LETTER AU"));
        data.insert(std::make_pair(0x1158e,"SIDDHAM LETTER KA"));
        data.insert(std::make_pair(0x1158f,"SIDDHAM LETTER KHA"));
        data.insert(std::make_pair(0x11590,"SIDDHAM LETTER GA"));
        data.insert(std::make_pair(0x11591,"SIDDHAM LETTER GHA"));
        data.insert(std::make_pair(0x11592,"SIDDHAM LETTER NGA"));
        data.insert(std::make_pair(0x11593,"SIDDHAM LETTER CA"));
        data.insert(std::make_pair(0x11594,"SIDDHAM LETTER CHA"));
        data.insert(std::make_pair(0x11595,"SIDDHAM LETTER JA"));
        data.insert(std::make_pair(0x11596,"SIDDHAM LETTER JHA"));
        data.insert(std::make_pair(0x11597,"SIDDHAM LETTER NYA"));
        data.insert(std::make_pair(0x11598,"SIDDHAM LETTER TTA"));
        data.insert(std::make_pair(0x11599,"SIDDHAM LETTER TTHA"));
        data.insert(std::make_pair(0x1159a,"SIDDHAM LETTER DDA"));
        data.insert(std::make_pair(0x1159b,"SIDDHAM LETTER DDHA"));
        data.insert(std::make_pair(0x1159c,"SIDDHAM LETTER NNA"));
        data.insert(std::make_pair(0x1159d,"SIDDHAM LETTER TA"));
        data.insert(std::make_pair(0x1159e,"SIDDHAM LETTER THA"));
        data.insert(std::make_pair(0x1159f,"SIDDHAM LETTER DA"));
        data.insert(std::make_pair(0x115a0,"SIDDHAM LETTER DHA"));
        data.insert(std::make_pair(0x115a1,"SIDDHAM LETTER NA"));
        data.insert(std::make_pair(0x115a2,"SIDDHAM LETTER PA"));
        data.insert(std::make_pair(0x115a3,"SIDDHAM LETTER PHA"));
        data.insert(std::make_pair(0x115a4,"SIDDHAM LETTER BA"));
        data.insert(std::make_pair(0x115a5,"SIDDHAM LETTER BHA"));
        data.insert(std::make_pair(0x115a6,"SIDDHAM LETTER MA"));
        data.insert(std::make_pair(0x115a7,"SIDDHAM LETTER YA"));
        data.insert(std::make_pair(0x115a8,"SIDDHAM LETTER RA"));
        data.insert(std::make_pair(0x115a9,"SIDDHAM LETTER LA"));
        data.insert(std::make_pair(0x115aa,"SIDDHAM LETTER VA"));
        data.insert(std::make_pair(0x115ab,"SIDDHAM LETTER SHA"));
        data.insert(std::make_pair(0x115ac,"SIDDHAM LETTER SSA"));
        data.insert(std::make_pair(0x115ad,"SIDDHAM LETTER SA"));
        data.insert(std::make_pair(0x115ae,"SIDDHAM LETTER HA"));
        data.insert(std::make_pair(0x115af,"SIDDHAM VOWEL SIGN AA"));
        data.insert(std::make_pair(0x115b0,"SIDDHAM VOWEL SIGN I"));
        data.insert(std::make_pair(0x115b1,"SIDDHAM VOWEL SIGN II"));
        data.insert(std::make_pair(0x115b2,"SIDDHAM VOWEL SIGN U"));
        data.insert(std::make_pair(0x115b3,"SIDDHAM VOWEL SIGN UU"));
        data.insert(std::make_pair(0x115b4,"SIDDHAM VOWEL SIGN VOCALIC R"));
        data.insert(std::make_pair(0x115b5,"SIDDHAM VOWEL SIGN VOCALIC RR"));
        data.insert(std::make_pair(0x115b8,"SIDDHAM VOWEL SIGN E"));
        data.insert(std::make_pair(0x115b9,"SIDDHAM VOWEL SIGN AI"));
        data.insert(std::make_pair(0x115ba,"SIDDHAM VOWEL SIGN O"));
        data.insert(std::make_pair(0x115bb,"SIDDHAM VOWEL SIGN AU"));
        data.insert(std::make_pair(0x115bc,"SIDDHAM SIGN CANDRABINDU"));
        data.insert(std::make_pair(0x115bd,"SIDDHAM SIGN ANUSVARA"));
        data.insert(std::make_pair(0x115be,"SIDDHAM SIGN VISARGA"));
        data.insert(std::make_pair(0x115bf,"SIDDHAM SIGN VIRAMA"));
        data.insert(std::make_pair(0x115c0,"SIDDHAM SIGN NUKTA"));
        data.insert(std::make_pair(0x115c1,"SIDDHAM SIGN SIDDHAM"));
        data.insert(std::make_pair(0x115c2,"SIDDHAM DANDA"));
        data.insert(std::make_pair(0x115c3,"SIDDHAM DOUBLE DANDA"));
        data.insert(std::make_pair(0x115c4,"SIDDHAM SEPARATOR DOT"));
        data.insert(std::make_pair(0x115c5,"SIDDHAM SEPARATOR BAR"));
        data.insert(std::make_pair(0x115c6,"SIDDHAM REPETITION MARK-1"));
        data.insert(std::make_pair(0x115c7,"SIDDHAM REPETITION MARK-2"));
        data.insert(std::make_pair(0x115c8,"SIDDHAM REPETITION MARK-3"));
        data.insert(std::make_pair(0x115c9,"SIDDHAM END OF TEXT MARK"));
        data.insert(std::make_pair(0x115ca,"SIDDHAM SECTION MARK WITH TRIDENT AND U-SHAPED ORNAMENTS"));
        data.insert(std::make_pair(0x115cb,"SIDDHAM SECTION MARK WITH TRIDENT AND DOTTED CRESCENTS"));
        data.insert(std::make_pair(0x115cc,"SIDDHAM SECTION MARK WITH RAYS AND DOTTED CRESCENTS"));
        data.insert(std::make_pair(0x115cd,"SIDDHAM SECTION MARK WITH RAYS AND DOTTED DOUBLE CRESCENTS"));
        data.insert(std::make_pair(0x115ce,"SIDDHAM SECTION MARK WITH RAYS AND DOTTED TRIPLE CRESCENTS"));
        data.insert(std::make_pair(0x115cf,"SIDDHAM SECTION MARK DOUBLE RING"));
        data.insert(std::make_pair(0x115d0,"SIDDHAM SECTION MARK DOUBLE RING WITH RAYS"));
        data.insert(std::make_pair(0x115d1,"SIDDHAM SECTION MARK WITH DOUBLE CRESCENTS"));
        data.insert(std::make_pair(0x115d2,"SIDDHAM SECTION MARK WITH TRIPLE CRESCENTS"));
        data.insert(std::make_pair(0x115d3,"SIDDHAM SECTION MARK WITH QUADRUPLE CRESCENTS"));
        data.insert(std::make_pair(0x115d4,"SIDDHAM SECTION MARK WITH SEPTUPLE CRESCENTS"));
        data.insert(std::make_pair(0x115d5,"SIDDHAM SECTION MARK WITH CIRCLES AND RAYS"));
        data.insert(std::make_pair(0x115d6,"SIDDHAM SECTION MARK WITH CIRCLES AND TWO ENCLOSURES"));
        data.insert(std::make_pair(0x115d7,"SIDDHAM SECTION MARK WITH CIRCLES AND FOUR ENCLOSURES"));
        data.insert(std::make_pair(0x115d8,"SIDDHAM LETTER THREE-CIRCLE ALTERNATE I"));
        data.insert(std::make_pair(0x115d9,"SIDDHAM LETTER TWO-CIRCLE ALTERNATE I"));
        data.insert(std::make_pair(0x115da,"SIDDHAM LETTER TWO-CIRCLE ALTERNATE II"));
        data.insert(std::make_pair(0x115db,"SIDDHAM LETTER ALTERNATE U"));
        data.insert(std::make_pair(0x115dc,"SIDDHAM VOWEL SIGN ALTERNATE U"));
        data.insert(std::make_pair(0x115dd,"SIDDHAM VOWEL SIGN ALTERNATE UU"));
        data.insert(std::make_pair(0x11600,"MODI LETTER A"));
        data.insert(std::make_pair(0x11601,"MODI LETTER AA"));
        data.insert(std::make_pair(0x11602,"MODI LETTER I"));
        data.insert(std::make_pair(0x11603,"MODI LETTER II"));
        data.insert(std::make_pair(0x11604,"MODI LETTER U"));
        data.insert(std::make_pair(0x11605,"MODI LETTER UU"));
        data.insert(std::make_pair(0x11606,"MODI LETTER VOCALIC R"));
        data.insert(std::make_pair(0x11607,"MODI LETTER VOCALIC RR"));
        data.insert(std::make_pair(0x11608,"MODI LETTER VOCALIC L"));
        data.insert(std::make_pair(0x11609,"MODI LETTER VOCALIC LL"));
        data.insert(std::make_pair(0x1160a,"MODI LETTER E"));
        data.insert(std::make_pair(0x1160b,"MODI LETTER AI"));
        data.insert(std::make_pair(0x1160c,"MODI LETTER O"));
        data.insert(std::make_pair(0x1160d,"MODI LETTER AU"));
        data.insert(std::make_pair(0x1160e,"MODI LETTER KA"));
        data.insert(std::make_pair(0x1160f,"MODI LETTER KHA"));
        data.insert(std::make_pair(0x11610,"MODI LETTER GA"));
        data.insert(std::make_pair(0x11611,"MODI LETTER GHA"));
        data.insert(std::make_pair(0x11612,"MODI LETTER NGA"));
        data.insert(std::make_pair(0x11613,"MODI LETTER CA"));
        data.insert(std::make_pair(0x11614,"MODI LETTER CHA"));
        data.insert(std::make_pair(0x11615,"MODI LETTER JA"));
        data.insert(std::make_pair(0x11616,"MODI LETTER JHA"));
        data.insert(std::make_pair(0x11617,"MODI LETTER NYA"));
        data.insert(std::make_pair(0x11618,"MODI LETTER TTA"));
        data.insert(std::make_pair(0x11619,"MODI LETTER TTHA"));
        data.insert(std::make_pair(0x1161a,"MODI LETTER DDA"));
        data.insert(std::make_pair(0x1161b,"MODI LETTER DDHA"));
        data.insert(std::make_pair(0x1161c,"MODI LETTER NNA"));
        data.insert(std::make_pair(0x1161d,"MODI LETTER TA"));
        data.insert(std::make_pair(0x1161e,"MODI LETTER THA"));
        data.insert(std::make_pair(0x1161f,"MODI LETTER DA"));
        data.insert(std::make_pair(0x11620,"MODI LETTER DHA"));
        data.insert(std::make_pair(0x11621,"MODI LETTER NA"));
        data.insert(std::make_pair(0x11622,"MODI LETTER PA"));
        data.insert(std::make_pair(0x11623,"MODI LETTER PHA"));
        data.insert(std::make_pair(0x11624,"MODI LETTER BA"));
        data.insert(std::make_pair(0x11625,"MODI LETTER BHA"));
        data.insert(std::make_pair(0x11626,"MODI LETTER MA"));
        data.insert(std::make_pair(0x11627,"MODI LETTER YA"));
        data.insert(std::make_pair(0x11628,"MODI LETTER RA"));
        data.insert(std::make_pair(0x11629,"MODI LETTER LA"));
        data.insert(std::make_pair(0x1162a,"MODI LETTER VA"));
        data.insert(std::make_pair(0x1162b,"MODI LETTER SHA"));
        data.insert(std::make_pair(0x1162c,"MODI LETTER SSA"));
        data.insert(std::make_pair(0x1162d,"MODI LETTER SA"));
        data.insert(std::make_pair(0x1162e,"MODI LETTER HA"));
        data.insert(std::make_pair(0x1162f,"MODI LETTER LLA"));
        data.insert(std::make_pair(0x11630,"MODI VOWEL SIGN AA"));
        data.insert(std::make_pair(0x11631,"MODI VOWEL SIGN I"));
        data.insert(std::make_pair(0x11632,"MODI VOWEL SIGN II"));
        data.insert(std::make_pair(0x11633,"MODI VOWEL SIGN U"));
        data.insert(std::make_pair(0x11634,"MODI VOWEL SIGN UU"));
        data.insert(std::make_pair(0x11635,"MODI VOWEL SIGN VOCALIC R"));
        data.insert(std::make_pair(0x11636,"MODI VOWEL SIGN VOCALIC RR"));
        data.insert(std::make_pair(0x11637,"MODI VOWEL SIGN VOCALIC L"));
        data.insert(std::make_pair(0x11638,"MODI VOWEL SIGN VOCALIC LL"));
        data.insert(std::make_pair(0x11639,"MODI VOWEL SIGN E"));
        data.insert(std::make_pair(0x1163a,"MODI VOWEL SIGN AI"));
        data.insert(std::make_pair(0x1163b,"MODI VOWEL SIGN O"));
        data.insert(std::make_pair(0x1163c,"MODI VOWEL SIGN AU"));
        data.insert(std::make_pair(0x1163d,"MODI SIGN ANUSVARA"));
        data.insert(std::make_pair(0x1163e,"MODI SIGN VISARGA"));
        data.insert(std::make_pair(0x1163f,"MODI SIGN VIRAMA"));
        data.insert(std::make_pair(0x11640,"MODI SIGN ARDHACANDRA"));
        data.insert(std::make_pair(0x11641,"MODI DANDA"));
        data.insert(std::make_pair(0x11642,"MODI DOUBLE DANDA"));
        data.insert(std::make_pair(0x11643,"MODI ABBREVIATION SIGN"));
        data.insert(std::make_pair(0x11644,"MODI SIGN HUVA"));
        data.insert(std::make_pair(0x11650,"MODI DIGIT ZERO"));
        data.insert(std::make_pair(0x11651,"MODI DIGIT ONE"));
        data.insert(std::make_pair(0x11652,"MODI DIGIT TWO"));
        data.insert(std::make_pair(0x11653,"MODI DIGIT THREE"));
        data.insert(std::make_pair(0x11654,"MODI DIGIT FOUR"));
        data.insert(std::make_pair(0x11655,"MODI DIGIT FIVE"));
        data.insert(std::make_pair(0x11656,"MODI DIGIT SIX"));
        data.insert(std::make_pair(0x11657,"MODI DIGIT SEVEN"));
        data.insert(std::make_pair(0x11658,"MODI DIGIT EIGHT"));
        data.insert(std::make_pair(0x11659,"MODI DIGIT NINE"));
        data.insert(std::make_pair(0x11660,"MONGOLIAN BIRGA WITH ORNAMENT"));
        data.insert(std::make_pair(0x11661,"MONGOLIAN ROTATED BIRGA"));
        data.insert(std::make_pair(0x11662,"MONGOLIAN DOUBLE BIRGA WITH ORNAMENT"));
        data.insert(std::make_pair(0x11663,"MONGOLIAN TRIPLE BIRGA WITH ORNAMENT"));
        data.insert(std::make_pair(0x11664,"MONGOLIAN BIRGA WITH DOUBLE ORNAMENT"));
        data.insert(std::make_pair(0x11665,"MONGOLIAN ROTATED BIRGA WITH ORNAMENT"));
        data.insert(std::make_pair(0x11666,"MONGOLIAN ROTATED BIRGA WITH DOUBLE ORNAMENT"));
        data.insert(std::make_pair(0x11667,"MONGOLIAN INVERTED BIRGA"));
        data.insert(std::make_pair(0x11668,"MONGOLIAN INVERTED BIRGA WITH DOUBLE ORNAMENT"));
        data.insert(std::make_pair(0x11669,"MONGOLIAN SWIRL BIRGA"));
        data.insert(std::make_pair(0x1166a,"MONGOLIAN SWIRL BIRGA WITH ORNAMENT"));
        data.insert(std::make_pair(0x1166b,"MONGOLIAN SWIRL BIRGA WITH DOUBLE ORNAMENT"));
        data.insert(std::make_pair(0x1166c,"MONGOLIAN TURNED SWIRL BIRGA WITH DOUBLE ORNAMENT"));
        data.insert(std::make_pair(0x11680,"TAKRI LETTER A"));
        data.insert(std::make_pair(0x11681,"TAKRI LETTER AA"));
        data.insert(std::make_pair(0x11682,"TAKRI LETTER I"));
        data.insert(std::make_pair(0x11683,"TAKRI LETTER II"));
        data.insert(std::make_pair(0x11684,"TAKRI LETTER U"));
        data.insert(std::make_pair(0x11685,"TAKRI LETTER UU"));
        data.insert(std::make_pair(0x11686,"TAKRI LETTER E"));
        data.insert(std::make_pair(0x11687,"TAKRI LETTER AI"));
        data.insert(std::make_pair(0x11688,"TAKRI LETTER O"));
        data.insert(std::make_pair(0x11689,"TAKRI LETTER AU"));
        data.insert(std::make_pair(0x1168a,"TAKRI LETTER KA"));
        data.insert(std::make_pair(0x1168b,"TAKRI LETTER KHA"));
        data.insert(std::make_pair(0x1168c,"TAKRI LETTER GA"));
        data.insert(std::make_pair(0x1168d,"TAKRI LETTER GHA"));
        data.insert(std::make_pair(0x1168e,"TAKRI LETTER NGA"));
        data.insert(std::make_pair(0x1168f,"TAKRI LETTER CA"));
        data.insert(std::make_pair(0x11690,"TAKRI LETTER CHA"));
        data.insert(std::make_pair(0x11691,"TAKRI LETTER JA"));
        data.insert(std::make_pair(0x11692,"TAKRI LETTER JHA"));
        data.insert(std::make_pair(0x11693,"TAKRI LETTER NYA"));
        data.insert(std::make_pair(0x11694,"TAKRI LETTER TTA"));
        data.insert(std::make_pair(0x11695,"TAKRI LETTER TTHA"));
        data.insert(std::make_pair(0x11696,"TAKRI LETTER DDA"));
        data.insert(std::make_pair(0x11697,"TAKRI LETTER DDHA"));
        data.insert(std::make_pair(0x11698,"TAKRI LETTER NNA"));
        data.insert(std::make_pair(0x11699,"TAKRI LETTER TA"));
        data.insert(std::make_pair(0x1169a,"TAKRI LETTER THA"));
        data.insert(std::make_pair(0x1169b,"TAKRI LETTER DA"));
        data.insert(std::make_pair(0x1169c,"TAKRI LETTER DHA"));
        data.insert(std::make_pair(0x1169d,"TAKRI LETTER NA"));
        data.insert(std::make_pair(0x1169e,"TAKRI LETTER PA"));
        data.insert(std::make_pair(0x1169f,"TAKRI LETTER PHA"));
        data.insert(std::make_pair(0x116a0,"TAKRI LETTER BA"));
        data.insert(std::make_pair(0x116a1,"TAKRI LETTER BHA"));
        data.insert(std::make_pair(0x116a2,"TAKRI LETTER MA"));
        data.insert(std::make_pair(0x116a3,"TAKRI LETTER YA"));
        data.insert(std::make_pair(0x116a4,"TAKRI LETTER RA"));
        data.insert(std::make_pair(0x116a5,"TAKRI LETTER LA"));
        data.insert(std::make_pair(0x116a6,"TAKRI LETTER VA"));
        data.insert(std::make_pair(0x116a7,"TAKRI LETTER SHA"));
        data.insert(std::make_pair(0x116a8,"TAKRI LETTER SA"));
        data.insert(std::make_pair(0x116a9,"TAKRI LETTER HA"));
        data.insert(std::make_pair(0x116aa,"TAKRI LETTER RRA"));
        data.insert(std::make_pair(0x116ab,"TAKRI SIGN ANUSVARA"));
        data.insert(std::make_pair(0x116ac,"TAKRI SIGN VISARGA"));
        data.insert(std::make_pair(0x116ad,"TAKRI VOWEL SIGN AA"));
        data.insert(std::make_pair(0x116ae,"TAKRI VOWEL SIGN I"));
        data.insert(std::make_pair(0x116af,"TAKRI VOWEL SIGN II"));
        data.insert(std::make_pair(0x116b0,"TAKRI VOWEL SIGN U"));
        data.insert(std::make_pair(0x116b1,"TAKRI VOWEL SIGN UU"));
        data.insert(std::make_pair(0x116b2,"TAKRI VOWEL SIGN E"));
        data.insert(std::make_pair(0x116b3,"TAKRI VOWEL SIGN AI"));
        data.insert(std::make_pair(0x116b4,"TAKRI VOWEL SIGN O"));
        data.insert(std::make_pair(0x116b5,"TAKRI VOWEL SIGN AU"));
        data.insert(std::make_pair(0x116b6,"TAKRI SIGN VIRAMA"));
        data.insert(std::make_pair(0x116b7,"TAKRI SIGN NUKTA"));
        data.insert(std::make_pair(0x116b8,"TAKRI LETTER ARCHAIC KHA"));
        data.insert(std::make_pair(0x116b9,"TAKRI ABBREVIATION SIGN"));
        data.insert(std::make_pair(0x116c0,"TAKRI DIGIT ZERO"));
        data.insert(std::make_pair(0x116c1,"TAKRI DIGIT ONE"));
        data.insert(std::make_pair(0x116c2,"TAKRI DIGIT TWO"));
        data.insert(std::make_pair(0x116c3,"TAKRI DIGIT THREE"));
        data.insert(std::make_pair(0x116c4,"TAKRI DIGIT FOUR"));
        data.insert(std::make_pair(0x116c5,"TAKRI DIGIT FIVE"));
        data.insert(std::make_pair(0x116c6,"TAKRI DIGIT SIX"));
        data.insert(std::make_pair(0x116c7,"TAKRI DIGIT SEVEN"));
        data.insert(std::make_pair(0x116c8,"TAKRI DIGIT EIGHT"));
        data.insert(std::make_pair(0x116c9,"TAKRI DIGIT NINE"));
        data.insert(std::make_pair(0x11700,"AHOM LETTER KA"));
        data.insert(std::make_pair(0x11701,"AHOM LETTER KHA"));
        data.insert(std::make_pair(0x11702,"AHOM LETTER NGA"));
        data.insert(std::make_pair(0x11703,"AHOM LETTER NA"));
        data.insert(std::make_pair(0x11704,"AHOM LETTER TA"));
        data.insert(std::make_pair(0x11705,"AHOM LETTER ALTERNATE TA"));
        data.insert(std::make_pair(0x11706,"AHOM LETTER PA"));
        data.insert(std::make_pair(0x11707,"AHOM LETTER PHA"));
        data.insert(std::make_pair(0x11708,"AHOM LETTER BA"));
        data.insert(std::make_pair(0x11709,"AHOM LETTER MA"));
        data.insert(std::make_pair(0x1170a,"AHOM LETTER JA"));
        data.insert(std::make_pair(0x1170b,"AHOM LETTER CHA"));
        data.insert(std::make_pair(0x1170c,"AHOM LETTER THA"));
        data.insert(std::make_pair(0x1170d,"AHOM LETTER RA"));
        data.insert(std::make_pair(0x1170e,"AHOM LETTER LA"));
        data.insert(std::make_pair(0x1170f,"AHOM LETTER SA"));
        data.insert(std::make_pair(0x11710,"AHOM LETTER NYA"));
        data.insert(std::make_pair(0x11711,"AHOM LETTER HA"));
        data.insert(std::make_pair(0x11712,"AHOM LETTER A"));
        data.insert(std::make_pair(0x11713,"AHOM LETTER DA"));
        data.insert(std::make_pair(0x11714,"AHOM LETTER DHA"));
        data.insert(std::make_pair(0x11715,"AHOM LETTER GA"));
        data.insert(std::make_pair(0x11716,"AHOM LETTER ALTERNATE GA"));
        data.insert(std::make_pair(0x11717,"AHOM LETTER GHA"));
        data.insert(std::make_pair(0x11718,"AHOM LETTER BHA"));
        data.insert(std::make_pair(0x11719,"AHOM LETTER JHA"));
        data.insert(std::make_pair(0x1171a,"AHOM LETTER ALTERNATE BA"));
        data.insert(std::make_pair(0x1171d,"AHOM CONSONANT SIGN MEDIAL LA"));
        data.insert(std::make_pair(0x1171e,"AHOM CONSONANT SIGN MEDIAL RA"));
        data.insert(std::make_pair(0x1171f,"AHOM CONSONANT SIGN MEDIAL LIGATING RA"));
        data.insert(std::make_pair(0x11720,"AHOM VOWEL SIGN A"));
        data.insert(std::make_pair(0x11721,"AHOM VOWEL SIGN AA"));
        data.insert(std::make_pair(0x11722,"AHOM VOWEL SIGN I"));
        data.insert(std::make_pair(0x11723,"AHOM VOWEL SIGN II"));
        data.insert(std::make_pair(0x11724,"AHOM VOWEL SIGN U"));
        data.insert(std::make_pair(0x11725,"AHOM VOWEL SIGN UU"));
        data.insert(std::make_pair(0x11726,"AHOM VOWEL SIGN E"));
        data.insert(std::make_pair(0x11727,"AHOM VOWEL SIGN AW"));
        data.insert(std::make_pair(0x11728,"AHOM VOWEL SIGN O"));
        data.insert(std::make_pair(0x11729,"AHOM VOWEL SIGN AI"));
        data.insert(std::make_pair(0x1172a,"AHOM VOWEL SIGN AM"));
        data.insert(std::make_pair(0x1172b,"AHOM SIGN KILLER"));
        data.insert(std::make_pair(0x11730,"AHOM DIGIT ZERO"));
        data.insert(std::make_pair(0x11731,"AHOM DIGIT ONE"));
        data.insert(std::make_pair(0x11732,"AHOM DIGIT TWO"));
        data.insert(std::make_pair(0x11733,"AHOM DIGIT THREE"));
        data.insert(std::make_pair(0x11734,"AHOM DIGIT FOUR"));
        data.insert(std::make_pair(0x11735,"AHOM DIGIT FIVE"));
        data.insert(std::make_pair(0x11736,"AHOM DIGIT SIX"));
        data.insert(std::make_pair(0x11737,"AHOM DIGIT SEVEN"));
        data.insert(std::make_pair(0x11738,"AHOM DIGIT EIGHT"));
        data.insert(std::make_pair(0x11739,"AHOM DIGIT NINE"));
        data.insert(std::make_pair(0x1173a,"AHOM NUMBER TEN"));
        data.insert(std::make_pair(0x1173b,"AHOM NUMBER TWENTY"));
        data.insert(std::make_pair(0x1173c,"AHOM SIGN SMALL SECTION"));
        data.insert(std::make_pair(0x1173d,"AHOM SIGN SECTION"));
        data.insert(std::make_pair(0x1173e,"AHOM SIGN RULAI"));
        data.insert(std::make_pair(0x1173f,"AHOM SYMBOL VI"));
        data.insert(std::make_pair(0x11740,"AHOM LETTER CA"));
        data.insert(std::make_pair(0x11741,"AHOM LETTER TTA"));
        data.insert(std::make_pair(0x11742,"AHOM LETTER TTHA"));
        data.insert(std::make_pair(0x11743,"AHOM LETTER DDA"));
        data.insert(std::make_pair(0x11744,"AHOM LETTER DDHA"));
        data.insert(std::make_pair(0x11745,"AHOM LETTER NNA"));
        data.insert(std::make_pair(0x11746,"AHOM LETTER LLA"));
        data.insert(std::make_pair(0x11800,"DOGRA LETTER A"));
        data.insert(std::make_pair(0x11801,"DOGRA LETTER AA"));
        data.insert(std::make_pair(0x11802,"DOGRA LETTER I"));
        data.insert(std::make_pair(0x11803,"DOGRA LETTER II"));
        data.insert(std::make_pair(0x11804,"DOGRA LETTER U"));
        data.insert(std::make_pair(0x11805,"DOGRA LETTER UU"));
        data.insert(std::make_pair(0x11806,"DOGRA LETTER E"));
        data.insert(std::make_pair(0x11807,"DOGRA LETTER AI"));
        data.insert(std::make_pair(0x11808,"DOGRA LETTER O"));
        data.insert(std::make_pair(0x11809,"DOGRA LETTER AU"));
        data.insert(std::make_pair(0x1180a,"DOGRA LETTER KA"));
        data.insert(std::make_pair(0x1180b,"DOGRA LETTER KHA"));
        data.insert(std::make_pair(0x1180c,"DOGRA LETTER GA"));
        data.insert(std::make_pair(0x1180d,"DOGRA LETTER GHA"));
        data.insert(std::make_pair(0x1180e,"DOGRA LETTER NGA"));
        data.insert(std::make_pair(0x1180f,"DOGRA LETTER CA"));
        data.insert(std::make_pair(0x11810,"DOGRA LETTER CHA"));
        data.insert(std::make_pair(0x11811,"DOGRA LETTER JA"));
        data.insert(std::make_pair(0x11812,"DOGRA LETTER JHA"));
        data.insert(std::make_pair(0x11813,"DOGRA LETTER NYA"));
        data.insert(std::make_pair(0x11814,"DOGRA LETTER TTA"));
        data.insert(std::make_pair(0x11815,"DOGRA LETTER TTHA"));
        data.insert(std::make_pair(0x11816,"DOGRA LETTER DDA"));
        data.insert(std::make_pair(0x11817,"DOGRA LETTER DDHA"));
        data.insert(std::make_pair(0x11818,"DOGRA LETTER NNA"));
        data.insert(std::make_pair(0x11819,"DOGRA LETTER TA"));
        data.insert(std::make_pair(0x1181a,"DOGRA LETTER THA"));
        data.insert(std::make_pair(0x1181b,"DOGRA LETTER DA"));
        data.insert(std::make_pair(0x1181c,"DOGRA LETTER DHA"));
        data.insert(std::make_pair(0x1181d,"DOGRA LETTER NA"));
        data.insert(std::make_pair(0x1181e,"DOGRA LETTER PA"));
        data.insert(std::make_pair(0x1181f,"DOGRA LETTER PHA"));
        data.insert(std::make_pair(0x11820,"DOGRA LETTER BA"));
        data.insert(std::make_pair(0x11821,"DOGRA LETTER BHA"));
        data.insert(std::make_pair(0x11822,"DOGRA LETTER MA"));
        data.insert(std::make_pair(0x11823,"DOGRA LETTER YA"));
        data.insert(std::make_pair(0x11824,"DOGRA LETTER RA"));
        data.insert(std::make_pair(0x11825,"DOGRA LETTER LA"));
        data.insert(std::make_pair(0x11826,"DOGRA LETTER VA"));
        data.insert(std::make_pair(0x11827,"DOGRA LETTER SHA"));
        data.insert(std::make_pair(0x11828,"DOGRA LETTER SSA"));
        data.insert(std::make_pair(0x11829,"DOGRA LETTER SA"));
        data.insert(std::make_pair(0x1182a,"DOGRA LETTER HA"));
        data.insert(std::make_pair(0x1182b,"DOGRA LETTER RRA"));
        data.insert(std::make_pair(0x1182c,"DOGRA VOWEL SIGN AA"));
        data.insert(std::make_pair(0x1182d,"DOGRA VOWEL SIGN I"));
        data.insert(std::make_pair(0x1182e,"DOGRA VOWEL SIGN II"));
        data.insert(std::make_pair(0x1182f,"DOGRA VOWEL SIGN U"));
        data.insert(std::make_pair(0x11830,"DOGRA VOWEL SIGN UU"));
        data.insert(std::make_pair(0x11831,"DOGRA VOWEL SIGN VOCALIC R"));
        data.insert(std::make_pair(0x11832,"DOGRA VOWEL SIGN VOCALIC RR"));
        data.insert(std::make_pair(0x11833,"DOGRA VOWEL SIGN E"));
        data.insert(std::make_pair(0x11834,"DOGRA VOWEL SIGN AI"));
        data.insert(std::make_pair(0x11835,"DOGRA VOWEL SIGN O"));
        data.insert(std::make_pair(0x11836,"DOGRA VOWEL SIGN AU"));
        data.insert(std::make_pair(0x11837,"DOGRA SIGN ANUSVARA"));
        data.insert(std::make_pair(0x11838,"DOGRA SIGN VISARGA"));
        data.insert(std::make_pair(0x11839,"DOGRA SIGN VIRAMA"));
        data.insert(std::make_pair(0x1183a,"DOGRA SIGN NUKTA"));
        data.insert(std::make_pair(0x1183b,"DOGRA ABBREVIATION SIGN"));
        data.insert(std::make_pair(0x118a0,"WARANG CITI CAPITAL LETTER NGAA"));
        data.insert(std::make_pair(0x118a1,"WARANG CITI CAPITAL LETTER A"));
        data.insert(std::make_pair(0x118a2,"WARANG CITI CAPITAL LETTER WI"));
        data.insert(std::make_pair(0x118a3,"WARANG CITI CAPITAL LETTER YU"));
        data.insert(std::make_pair(0x118a4,"WARANG CITI CAPITAL LETTER YA"));
        data.insert(std::make_pair(0x118a5,"WARANG CITI CAPITAL LETTER YO"));
        data.insert(std::make_pair(0x118a6,"WARANG CITI CAPITAL LETTER II"));
        data.insert(std::make_pair(0x118a7,"WARANG CITI CAPITAL LETTER UU"));
        data.insert(std::make_pair(0x118a8,"WARANG CITI CAPITAL LETTER E"));
        data.insert(std::make_pair(0x118a9,"WARANG CITI CAPITAL LETTER O"));
        data.insert(std::make_pair(0x118aa,"WARANG CITI CAPITAL LETTER ANG"));
        data.insert(std::make_pair(0x118ab,"WARANG CITI CAPITAL LETTER GA"));
        data.insert(std::make_pair(0x118ac,"WARANG CITI CAPITAL LETTER KO"));
        data.insert(std::make_pair(0x118ad,"WARANG CITI CAPITAL LETTER ENY"));
        data.insert(std::make_pair(0x118ae,"WARANG CITI CAPITAL LETTER YUJ"));
        data.insert(std::make_pair(0x118af,"WARANG CITI CAPITAL LETTER UC"));
        data.insert(std::make_pair(0x118b0,"WARANG CITI CAPITAL LETTER ENN"));
        data.insert(std::make_pair(0x118b1,"WARANG CITI CAPITAL LETTER ODD"));
        data.insert(std::make_pair(0x118b2,"WARANG CITI CAPITAL LETTER TTE"));
        data.insert(std::make_pair(0x118b3,"WARANG CITI CAPITAL LETTER NUNG"));
        data.insert(std::make_pair(0x118b4,"WARANG CITI CAPITAL LETTER DA"));
        data.insert(std::make_pair(0x118b5,"WARANG CITI CAPITAL LETTER AT"));
        data.insert(std::make_pair(0x118b6,"WARANG CITI CAPITAL LETTER AM"));
        data.insert(std::make_pair(0x118b7,"WARANG CITI CAPITAL LETTER BU"));
        data.insert(std::make_pair(0x118b8,"WARANG CITI CAPITAL LETTER PU"));
        data.insert(std::make_pair(0x118b9,"WARANG CITI CAPITAL LETTER HIYO"));
        data.insert(std::make_pair(0x118ba,"WARANG CITI CAPITAL LETTER HOLO"));
        data.insert(std::make_pair(0x118bb,"WARANG CITI CAPITAL LETTER HORR"));
        data.insert(std::make_pair(0x118bc,"WARANG CITI CAPITAL LETTER HAR"));
        data.insert(std::make_pair(0x118bd,"WARANG CITI CAPITAL LETTER SSUU"));
        data.insert(std::make_pair(0x118be,"WARANG CITI CAPITAL LETTER SII"));
        data.insert(std::make_pair(0x118bf,"WARANG CITI CAPITAL LETTER VIYO"));
        data.insert(std::make_pair(0x118c0,"WARANG CITI SMALL LETTER NGAA"));
        data.insert(std::make_pair(0x118c1,"WARANG CITI SMALL LETTER A"));
        data.insert(std::make_pair(0x118c2,"WARANG CITI SMALL LETTER WI"));
        data.insert(std::make_pair(0x118c3,"WARANG CITI SMALL LETTER YU"));
        data.insert(std::make_pair(0x118c4,"WARANG CITI SMALL LETTER YA"));
        data.insert(std::make_pair(0x118c5,"WARANG CITI SMALL LETTER YO"));
        data.insert(std::make_pair(0x118c6,"WARANG CITI SMALL LETTER II"));
        data.insert(std::make_pair(0x118c7,"WARANG CITI SMALL LETTER UU"));
        data.insert(std::make_pair(0x118c8,"WARANG CITI SMALL LETTER E"));
        data.insert(std::make_pair(0x118c9,"WARANG CITI SMALL LETTER O"));
        data.insert(std::make_pair(0x118ca,"WARANG CITI SMALL LETTER ANG"));
        data.insert(std::make_pair(0x118cb,"WARANG CITI SMALL LETTER GA"));
        data.insert(std::make_pair(0x118cc,"WARANG CITI SMALL LETTER KO"));
        data.insert(std::make_pair(0x118cd,"WARANG CITI SMALL LETTER ENY"));
        data.insert(std::make_pair(0x118ce,"WARANG CITI SMALL LETTER YUJ"));
        data.insert(std::make_pair(0x118cf,"WARANG CITI SMALL LETTER UC"));
        data.insert(std::make_pair(0x118d0,"WARANG CITI SMALL LETTER ENN"));
        data.insert(std::make_pair(0x118d1,"WARANG CITI SMALL LETTER ODD"));
        data.insert(std::make_pair(0x118d2,"WARANG CITI SMALL LETTER TTE"));
        data.insert(std::make_pair(0x118d3,"WARANG CITI SMALL LETTER NUNG"));
        data.insert(std::make_pair(0x118d4,"WARANG CITI SMALL LETTER DA"));
        data.insert(std::make_pair(0x118d5,"WARANG CITI SMALL LETTER AT"));
        data.insert(std::make_pair(0x118d6,"WARANG CITI SMALL LETTER AM"));
        data.insert(std::make_pair(0x118d7,"WARANG CITI SMALL LETTER BU"));
        data.insert(std::make_pair(0x118d8,"WARANG CITI SMALL LETTER PU"));
        data.insert(std::make_pair(0x118d9,"WARANG CITI SMALL LETTER HIYO"));
        data.insert(std::make_pair(0x118da,"WARANG CITI SMALL LETTER HOLO"));
        data.insert(std::make_pair(0x118db,"WARANG CITI SMALL LETTER HORR"));
        data.insert(std::make_pair(0x118dc,"WARANG CITI SMALL LETTER HAR"));
        data.insert(std::make_pair(0x118dd,"WARANG CITI SMALL LETTER SSUU"));
        data.insert(std::make_pair(0x118de,"WARANG CITI SMALL LETTER SII"));
        data.insert(std::make_pair(0x118df,"WARANG CITI SMALL LETTER VIYO"));
        data.insert(std::make_pair(0x118e0,"WARANG CITI DIGIT ZERO"));
        data.insert(std::make_pair(0x118e1,"WARANG CITI DIGIT ONE"));
        data.insert(std::make_pair(0x118e2,"WARANG CITI DIGIT TWO"));
        data.insert(std::make_pair(0x118e3,"WARANG CITI DIGIT THREE"));
        data.insert(std::make_pair(0x118e4,"WARANG CITI DIGIT FOUR"));
        data.insert(std::make_pair(0x118e5,"WARANG CITI DIGIT FIVE"));
        data.insert(std::make_pair(0x118e6,"WARANG CITI DIGIT SIX"));
        data.insert(std::make_pair(0x118e7,"WARANG CITI DIGIT SEVEN"));
        data.insert(std::make_pair(0x118e8,"WARANG CITI DIGIT EIGHT"));
        data.insert(std::make_pair(0x118e9,"WARANG CITI DIGIT NINE"));
        data.insert(std::make_pair(0x118ea,"WARANG CITI NUMBER TEN"));
        data.insert(std::make_pair(0x118eb,"WARANG CITI NUMBER TWENTY"));
        data.insert(std::make_pair(0x118ec,"WARANG CITI NUMBER THIRTY"));
        data.insert(std::make_pair(0x118ed,"WARANG CITI NUMBER FORTY"));
        data.insert(std::make_pair(0x118ee,"WARANG CITI NUMBER FIFTY"));
        data.insert(std::make_pair(0x118ef,"WARANG CITI NUMBER SIXTY"));
        data.insert(std::make_pair(0x118f0,"WARANG CITI NUMBER SEVENTY"));
        data.insert(std::make_pair(0x118f1,"WARANG CITI NUMBER EIGHTY"));
        data.insert(std::make_pair(0x118f2,"WARANG CITI NUMBER NINETY"));
        data.insert(std::make_pair(0x118ff,"WARANG CITI OM"));
        data.insert(std::make_pair(0x11900,"DIVES AKURU LETTER A"));
        data.insert(std::make_pair(0x11901,"DIVES AKURU LETTER AA"));
        data.insert(std::make_pair(0x11902,"DIVES AKURU LETTER I"));
        data.insert(std::make_pair(0x11903,"DIVES AKURU LETTER II"));
        data.insert(std::make_pair(0x11904,"DIVES AKURU LETTER U"));
        data.insert(std::make_pair(0x11905,"DIVES AKURU LETTER UU"));
        data.insert(std::make_pair(0x11906,"DIVES AKURU LETTER E"));
        data.insert(std::make_pair(0x11909,"DIVES AKURU LETTER O"));
        data.insert(std::make_pair(0x1190c,"DIVES AKURU LETTER KA"));
        data.insert(std::make_pair(0x1190d,"DIVES AKURU LETTER KHA"));
        data.insert(std::make_pair(0x1190e,"DIVES AKURU LETTER GA"));
        data.insert(std::make_pair(0x1190f,"DIVES AKURU LETTER GHA"));
        data.insert(std::make_pair(0x11910,"DIVES AKURU LETTER NGA"));
        data.insert(std::make_pair(0x11911,"DIVES AKURU LETTER CA"));
        data.insert(std::make_pair(0x11912,"DIVES AKURU LETTER CHA"));
        data.insert(std::make_pair(0x11913,"DIVES AKURU LETTER JA"));
        data.insert(std::make_pair(0x11915,"DIVES AKURU LETTER NYA"));
        data.insert(std::make_pair(0x11916,"DIVES AKURU LETTER TTA"));
        data.insert(std::make_pair(0x11918,"DIVES AKURU LETTER DDA"));
        data.insert(std::make_pair(0x11919,"DIVES AKURU LETTER DDHA"));
        data.insert(std::make_pair(0x1191a,"DIVES AKURU LETTER NNA"));
        data.insert(std::make_pair(0x1191b,"DIVES AKURU LETTER TA"));
        data.insert(std::make_pair(0x1191c,"DIVES AKURU LETTER THA"));
        data.insert(std::make_pair(0x1191d,"DIVES AKURU LETTER DA"));
        data.insert(std::make_pair(0x1191e,"DIVES AKURU LETTER DHA"));
        data.insert(std::make_pair(0x1191f,"DIVES AKURU LETTER NA"));
        data.insert(std::make_pair(0x11920,"DIVES AKURU LETTER PA"));
        data.insert(std::make_pair(0x11921,"DIVES AKURU LETTER PHA"));
        data.insert(std::make_pair(0x11922,"DIVES AKURU LETTER BA"));
        data.insert(std::make_pair(0x11923,"DIVES AKURU LETTER BHA"));
        data.insert(std::make_pair(0x11924,"DIVES AKURU LETTER MA"));
        data.insert(std::make_pair(0x11925,"DIVES AKURU LETTER YA"));
        data.insert(std::make_pair(0x11926,"DIVES AKURU LETTER YYA"));
        data.insert(std::make_pair(0x11927,"DIVES AKURU LETTER RA"));
        data.insert(std::make_pair(0x11928,"DIVES AKURU LETTER LA"));
        data.insert(std::make_pair(0x11929,"DIVES AKURU LETTER VA"));
        data.insert(std::make_pair(0x1192a,"DIVES AKURU LETTER SHA"));
        data.insert(std::make_pair(0x1192b,"DIVES AKURU LETTER SSA"));
        data.insert(std::make_pair(0x1192c,"DIVES AKURU LETTER SA"));
        data.insert(std::make_pair(0x1192d,"DIVES AKURU LETTER HA"));
        data.insert(std::make_pair(0x1192e,"DIVES AKURU LETTER LLA"));
        data.insert(std::make_pair(0x1192f,"DIVES AKURU LETTER ZA"));
        data.insert(std::make_pair(0x11930,"DIVES AKURU VOWEL SIGN AA"));
        data.insert(std::make_pair(0x11931,"DIVES AKURU VOWEL SIGN I"));
        data.insert(std::make_pair(0x11932,"DIVES AKURU VOWEL SIGN II"));
        data.insert(std::make_pair(0x11933,"DIVES AKURU VOWEL SIGN U"));
        data.insert(std::make_pair(0x11934,"DIVES AKURU VOWEL SIGN UU"));
        data.insert(std::make_pair(0x11935,"DIVES AKURU VOWEL SIGN E"));
        data.insert(std::make_pair(0x11937,"DIVES AKURU VOWEL SIGN AI"));
        data.insert(std::make_pair(0x11938,"DIVES AKURU VOWEL SIGN O"));
        data.insert(std::make_pair(0x1193b,"DIVES AKURU SIGN ANUSVARA"));
        data.insert(std::make_pair(0x1193c,"DIVES AKURU SIGN CANDRABINDU"));
        data.insert(std::make_pair(0x1193d,"DIVES AKURU SIGN HALANTA"));
        data.insert(std::make_pair(0x1193e,"DIVES AKURU VIRAMA"));
        data.insert(std::make_pair(0x1193f,"DIVES AKURU PREFIXED NASAL SIGN"));
        data.insert(std::make_pair(0x11940,"DIVES AKURU MEDIAL YA"));
        data.insert(std::make_pair(0x11941,"DIVES AKURU INITIAL RA"));
        data.insert(std::make_pair(0x11942,"DIVES AKURU MEDIAL RA"));
        data.insert(std::make_pair(0x11943,"DIVES AKURU SIGN NUKTA"));
        data.insert(std::make_pair(0x11944,"DIVES AKURU DOUBLE DANDA"));
        data.insert(std::make_pair(0x11945,"DIVES AKURU GAP FILLER"));
        data.insert(std::make_pair(0x11946,"DIVES AKURU END OF TEXT MARK"));
        data.insert(std::make_pair(0x11950,"DIVES AKURU DIGIT ZERO"));
        data.insert(std::make_pair(0x11951,"DIVES AKURU DIGIT ONE"));
        data.insert(std::make_pair(0x11952,"DIVES AKURU DIGIT TWO"));
        data.insert(std::make_pair(0x11953,"DIVES AKURU DIGIT THREE"));
        data.insert(std::make_pair(0x11954,"DIVES AKURU DIGIT FOUR"));
        data.insert(std::make_pair(0x11955,"DIVES AKURU DIGIT FIVE"));
        data.insert(std::make_pair(0x11956,"DIVES AKURU DIGIT SIX"));
        data.insert(std::make_pair(0x11957,"DIVES AKURU DIGIT SEVEN"));
        data.insert(std::make_pair(0x11958,"DIVES AKURU DIGIT EIGHT"));
        data.insert(std::make_pair(0x11959,"DIVES AKURU DIGIT NINE"));
        data.insert(std::make_pair(0x119a0,"NANDINAGARI LETTER A"));
        data.insert(std::make_pair(0x119a1,"NANDINAGARI LETTER AA"));
        data.insert(std::make_pair(0x119a2,"NANDINAGARI LETTER I"));
        data.insert(std::make_pair(0x119a3,"NANDINAGARI LETTER II"));
        data.insert(std::make_pair(0x119a4,"NANDINAGARI LETTER U"));
        data.insert(std::make_pair(0x119a5,"NANDINAGARI LETTER UU"));
        data.insert(std::make_pair(0x119a6,"NANDINAGARI LETTER VOCALIC R"));
        data.insert(std::make_pair(0x119a7,"NANDINAGARI LETTER VOCALIC RR"));
        data.insert(std::make_pair(0x119aa,"NANDINAGARI LETTER E"));
        data.insert(std::make_pair(0x119ab,"NANDINAGARI LETTER AI"));
        data.insert(std::make_pair(0x119ac,"NANDINAGARI LETTER O"));
        data.insert(std::make_pair(0x119ad,"NANDINAGARI LETTER AU"));
        data.insert(std::make_pair(0x119ae,"NANDINAGARI LETTER KA"));
        data.insert(std::make_pair(0x119af,"NANDINAGARI LETTER KHA"));
        data.insert(std::make_pair(0x119b0,"NANDINAGARI LETTER GA"));
        data.insert(std::make_pair(0x119b1,"NANDINAGARI LETTER GHA"));
        data.insert(std::make_pair(0x119b2,"NANDINAGARI LETTER NGA"));
        data.insert(std::make_pair(0x119b3,"NANDINAGARI LETTER CA"));
        data.insert(std::make_pair(0x119b4,"NANDINAGARI LETTER CHA"));
        data.insert(std::make_pair(0x119b5,"NANDINAGARI LETTER JA"));
        data.insert(std::make_pair(0x119b6,"NANDINAGARI LETTER JHA"));
        data.insert(std::make_pair(0x119b7,"NANDINAGARI LETTER NYA"));
        data.insert(std::make_pair(0x119b8,"NANDINAGARI LETTER TTA"));
        data.insert(std::make_pair(0x119b9,"NANDINAGARI LETTER TTHA"));
        data.insert(std::make_pair(0x119ba,"NANDINAGARI LETTER DDA"));
        data.insert(std::make_pair(0x119bb,"NANDINAGARI LETTER DDHA"));
        data.insert(std::make_pair(0x119bc,"NANDINAGARI LETTER NNA"));
        data.insert(std::make_pair(0x119bd,"NANDINAGARI LETTER TA"));
        data.insert(std::make_pair(0x119be,"NANDINAGARI LETTER THA"));
        data.insert(std::make_pair(0x119bf,"NANDINAGARI LETTER DA"));
        data.insert(std::make_pair(0x119c0,"NANDINAGARI LETTER DHA"));
        data.insert(std::make_pair(0x119c1,"NANDINAGARI LETTER NA"));
        data.insert(std::make_pair(0x119c2,"NANDINAGARI LETTER PA"));
        data.insert(std::make_pair(0x119c3,"NANDINAGARI LETTER PHA"));
        data.insert(std::make_pair(0x119c4,"NANDINAGARI LETTER BA"));
        data.insert(std::make_pair(0x119c5,"NANDINAGARI LETTER BHA"));
        data.insert(std::make_pair(0x119c6,"NANDINAGARI LETTER MA"));
        data.insert(std::make_pair(0x119c7,"NANDINAGARI LETTER YA"));
        data.insert(std::make_pair(0x119c8,"NANDINAGARI LETTER RA"));
        data.insert(std::make_pair(0x119c9,"NANDINAGARI LETTER LA"));
        data.insert(std::make_pair(0x119ca,"NANDINAGARI LETTER VA"));
        data.insert(std::make_pair(0x119cb,"NANDINAGARI LETTER SHA"));
        data.insert(std::make_pair(0x119cc,"NANDINAGARI LETTER SSA"));
        data.insert(std::make_pair(0x119cd,"NANDINAGARI LETTER SA"));
        data.insert(std::make_pair(0x119ce,"NANDINAGARI LETTER HA"));
        data.insert(std::make_pair(0x119cf,"NANDINAGARI LETTER LLA"));
        data.insert(std::make_pair(0x119d0,"NANDINAGARI LETTER RRA"));
        data.insert(std::make_pair(0x119d1,"NANDINAGARI VOWEL SIGN AA"));
        data.insert(std::make_pair(0x119d2,"NANDINAGARI VOWEL SIGN I"));
        data.insert(std::make_pair(0x119d3,"NANDINAGARI VOWEL SIGN II"));
        data.insert(std::make_pair(0x119d4,"NANDINAGARI VOWEL SIGN U"));
        data.insert(std::make_pair(0x119d5,"NANDINAGARI VOWEL SIGN UU"));
        data.insert(std::make_pair(0x119d6,"NANDINAGARI VOWEL SIGN VOCALIC R"));
        data.insert(std::make_pair(0x119d7,"NANDINAGARI VOWEL SIGN VOCALIC RR"));
        data.insert(std::make_pair(0x119da,"NANDINAGARI VOWEL SIGN E"));
        data.insert(std::make_pair(0x119db,"NANDINAGARI VOWEL SIGN AI"));
        data.insert(std::make_pair(0x119dc,"NANDINAGARI VOWEL SIGN O"));
        data.insert(std::make_pair(0x119dd,"NANDINAGARI VOWEL SIGN AU"));
        data.insert(std::make_pair(0x119de,"NANDINAGARI SIGN ANUSVARA"));
        data.insert(std::make_pair(0x119df,"NANDINAGARI SIGN VISARGA"));
        data.insert(std::make_pair(0x119e0,"NANDINAGARI SIGN VIRAMA"));
        data.insert(std::make_pair(0x119e1,"NANDINAGARI SIGN AVAGRAHA"));
        data.insert(std::make_pair(0x119e2,"NANDINAGARI SIGN SIDDHAM"));
        data.insert(std::make_pair(0x119e3,"NANDINAGARI HEADSTROKE"));
        data.insert(std::make_pair(0x119e4,"NANDINAGARI VOWEL SIGN PRISHTHAMATRA E"));
        data.insert(std::make_pair(0x11a00,"ZANABAZAR SQUARE LETTER A"));
        data.insert(std::make_pair(0x11a01,"ZANABAZAR SQUARE VOWEL SIGN I"));
        data.insert(std::make_pair(0x11a02,"ZANABAZAR SQUARE VOWEL SIGN UE"));
        data.insert(std::make_pair(0x11a03,"ZANABAZAR SQUARE VOWEL SIGN U"));
        data.insert(std::make_pair(0x11a04,"ZANABAZAR SQUARE VOWEL SIGN E"));
        data.insert(std::make_pair(0x11a05,"ZANABAZAR SQUARE VOWEL SIGN OE"));
        data.insert(std::make_pair(0x11a06,"ZANABAZAR SQUARE VOWEL SIGN O"));
        data.insert(std::make_pair(0x11a07,"ZANABAZAR SQUARE VOWEL SIGN AI"));
        data.insert(std::make_pair(0x11a08,"ZANABAZAR SQUARE VOWEL SIGN AU"));
        data.insert(std::make_pair(0x11a09,"ZANABAZAR SQUARE VOWEL SIGN REVERSED I"));
        data.insert(std::make_pair(0x11a0a,"ZANABAZAR SQUARE VOWEL LENGTH MARK"));
        data.insert(std::make_pair(0x11a0b,"ZANABAZAR SQUARE LETTER KA"));
        data.insert(std::make_pair(0x11a0c,"ZANABAZAR SQUARE LETTER KHA"));
        data.insert(std::make_pair(0x11a0d,"ZANABAZAR SQUARE LETTER GA"));
        data.insert(std::make_pair(0x11a0e,"ZANABAZAR SQUARE LETTER GHA"));
        data.insert(std::make_pair(0x11a0f,"ZANABAZAR SQUARE LETTER NGA"));
        data.insert(std::make_pair(0x11a10,"ZANABAZAR SQUARE LETTER CA"));
        data.insert(std::make_pair(0x11a11,"ZANABAZAR SQUARE LETTER CHA"));
        data.insert(std::make_pair(0x11a12,"ZANABAZAR SQUARE LETTER JA"));
        data.insert(std::make_pair(0x11a13,"ZANABAZAR SQUARE LETTER NYA"));
        data.insert(std::make_pair(0x11a14,"ZANABAZAR SQUARE LETTER TTA"));
        data.insert(std::make_pair(0x11a15,"ZANABAZAR SQUARE LETTER TTHA"));
        data.insert(std::make_pair(0x11a16,"ZANABAZAR SQUARE LETTER DDA"));
        data.insert(std::make_pair(0x11a17,"ZANABAZAR SQUARE LETTER DDHA"));
        data.insert(std::make_pair(0x11a18,"ZANABAZAR SQUARE LETTER NNA"));
        data.insert(std::make_pair(0x11a19,"ZANABAZAR SQUARE LETTER TA"));
        data.insert(std::make_pair(0x11a1a,"ZANABAZAR SQUARE LETTER THA"));
        data.insert(std::make_pair(0x11a1b,"ZANABAZAR SQUARE LETTER DA"));
        data.insert(std::make_pair(0x11a1c,"ZANABAZAR SQUARE LETTER DHA"));
        data.insert(std::make_pair(0x11a1d,"ZANABAZAR SQUARE LETTER NA"));
        data.insert(std::make_pair(0x11a1e,"ZANABAZAR SQUARE LETTER PA"));
        data.insert(std::make_pair(0x11a1f,"ZANABAZAR SQUARE LETTER PHA"));
        data.insert(std::make_pair(0x11a20,"ZANABAZAR SQUARE LETTER BA"));
        data.insert(std::make_pair(0x11a21,"ZANABAZAR SQUARE LETTER BHA"));
        data.insert(std::make_pair(0x11a22,"ZANABAZAR SQUARE LETTER MA"));
        data.insert(std::make_pair(0x11a23,"ZANABAZAR SQUARE LETTER TSA"));
        data.insert(std::make_pair(0x11a24,"ZANABAZAR SQUARE LETTER TSHA"));
        data.insert(std::make_pair(0x11a25,"ZANABAZAR SQUARE LETTER DZA"));
        data.insert(std::make_pair(0x11a26,"ZANABAZAR SQUARE LETTER DZHA"));
        data.insert(std::make_pair(0x11a27,"ZANABAZAR SQUARE LETTER ZHA"));
        data.insert(std::make_pair(0x11a28,"ZANABAZAR SQUARE LETTER ZA"));
        data.insert(std::make_pair(0x11a29,"ZANABAZAR SQUARE LETTER -A"));
        data.insert(std::make_pair(0x11a2a,"ZANABAZAR SQUARE LETTER YA"));
        data.insert(std::make_pair(0x11a2b,"ZANABAZAR SQUARE LETTER RA"));
        data.insert(std::make_pair(0x11a2c,"ZANABAZAR SQUARE LETTER LA"));
        data.insert(std::make_pair(0x11a2d,"ZANABAZAR SQUARE LETTER VA"));
        data.insert(std::make_pair(0x11a2e,"ZANABAZAR SQUARE LETTER SHA"));
        data.insert(std::make_pair(0x11a2f,"ZANABAZAR SQUARE LETTER SSA"));
        data.insert(std::make_pair(0x11a30,"ZANABAZAR SQUARE LETTER SA"));
        data.insert(std::make_pair(0x11a31,"ZANABAZAR SQUARE LETTER HA"));
        data.insert(std::make_pair(0x11a32,"ZANABAZAR SQUARE LETTER KSSA"));
        data.insert(std::make_pair(0x11a33,"ZANABAZAR SQUARE FINAL CONSONANT MARK"));
        data.insert(std::make_pair(0x11a34,"ZANABAZAR SQUARE SIGN VIRAMA"));
        data.insert(std::make_pair(0x11a35,"ZANABAZAR SQUARE SIGN CANDRABINDU"));
        data.insert(std::make_pair(0x11a36,"ZANABAZAR SQUARE SIGN CANDRABINDU WITH ORNAMENT"));
        data.insert(std::make_pair(0x11a37,"ZANABAZAR SQUARE SIGN CANDRA WITH ORNAMENT"));
        data.insert(std::make_pair(0x11a38,"ZANABAZAR SQUARE SIGN ANUSVARA"));
        data.insert(std::make_pair(0x11a39,"ZANABAZAR SQUARE SIGN VISARGA"));
        data.insert(std::make_pair(0x11a3a,"ZANABAZAR SQUARE CLUSTER-INITIAL LETTER RA"));
        data.insert(std::make_pair(0x11a3b,"ZANABAZAR SQUARE CLUSTER-FINAL LETTER YA"));
        data.insert(std::make_pair(0x11a3c,"ZANABAZAR SQUARE CLUSTER-FINAL LETTER RA"));
        data.insert(std::make_pair(0x11a3d,"ZANABAZAR SQUARE CLUSTER-FINAL LETTER LA"));
        data.insert(std::make_pair(0x11a3e,"ZANABAZAR SQUARE CLUSTER-FINAL LETTER VA"));
        data.insert(std::make_pair(0x11a3f,"ZANABAZAR SQUARE INITIAL HEAD MARK"));
        data.insert(std::make_pair(0x11a40,"ZANABAZAR SQUARE CLOSING HEAD MARK"));
        data.insert(std::make_pair(0x11a41,"ZANABAZAR SQUARE MARK TSHEG"));
        data.insert(std::make_pair(0x11a42,"ZANABAZAR SQUARE MARK SHAD"));
        data.insert(std::make_pair(0x11a43,"ZANABAZAR SQUARE MARK DOUBLE SHAD"));
        data.insert(std::make_pair(0x11a44,"ZANABAZAR SQUARE MARK LONG TSHEG"));
        data.insert(std::make_pair(0x11a45,"ZANABAZAR SQUARE INITIAL DOUBLE-LINED HEAD MARK"));
        data.insert(std::make_pair(0x11a46,"ZANABAZAR SQUARE CLOSING DOUBLE-LINED HEAD MARK"));
        data.insert(std::make_pair(0x11a47,"ZANABAZAR SQUARE SUBJOINER"));
        data.insert(std::make_pair(0x11a50,"SOYOMBO LETTER A"));
        data.insert(std::make_pair(0x11a51,"SOYOMBO VOWEL SIGN I"));
        data.insert(std::make_pair(0x11a52,"SOYOMBO VOWEL SIGN UE"));
        data.insert(std::make_pair(0x11a53,"SOYOMBO VOWEL SIGN U"));
        data.insert(std::make_pair(0x11a54,"SOYOMBO VOWEL SIGN E"));
        data.insert(std::make_pair(0x11a55,"SOYOMBO VOWEL SIGN O"));
        data.insert(std::make_pair(0x11a56,"SOYOMBO VOWEL SIGN OE"));
        data.insert(std::make_pair(0x11a57,"SOYOMBO VOWEL SIGN AI"));
        data.insert(std::make_pair(0x11a58,"SOYOMBO VOWEL SIGN AU"));
        data.insert(std::make_pair(0x11a59,"SOYOMBO VOWEL SIGN VOCALIC R"));
        data.insert(std::make_pair(0x11a5a,"SOYOMBO VOWEL SIGN VOCALIC L"));
        data.insert(std::make_pair(0x11a5b,"SOYOMBO VOWEL LENGTH MARK"));
        data.insert(std::make_pair(0x11a5c,"SOYOMBO LETTER KA"));
        data.insert(std::make_pair(0x11a5d,"SOYOMBO LETTER KHA"));
        data.insert(std::make_pair(0x11a5e,"SOYOMBO LETTER GA"));
        data.insert(std::make_pair(0x11a5f,"SOYOMBO LETTER GHA"));
        data.insert(std::make_pair(0x11a60,"SOYOMBO LETTER NGA"));
        data.insert(std::make_pair(0x11a61,"SOYOMBO LETTER CA"));
        data.insert(std::make_pair(0x11a62,"SOYOMBO LETTER CHA"));
        data.insert(std::make_pair(0x11a63,"SOYOMBO LETTER JA"));
        data.insert(std::make_pair(0x11a64,"SOYOMBO LETTER JHA"));
        data.insert(std::make_pair(0x11a65,"SOYOMBO LETTER NYA"));
        data.insert(std::make_pair(0x11a66,"SOYOMBO LETTER TTA"));
        data.insert(std::make_pair(0x11a67,"SOYOMBO LETTER TTHA"));
        data.insert(std::make_pair(0x11a68,"SOYOMBO LETTER DDA"));
        data.insert(std::make_pair(0x11a69,"SOYOMBO LETTER DDHA"));
        data.insert(std::make_pair(0x11a6a,"SOYOMBO LETTER NNA"));
        data.insert(std::make_pair(0x11a6b,"SOYOMBO LETTER TA"));
        data.insert(std::make_pair(0x11a6c,"SOYOMBO LETTER THA"));
        data.insert(std::make_pair(0x11a6d,"SOYOMBO LETTER DA"));
        data.insert(std::make_pair(0x11a6e,"SOYOMBO LETTER DHA"));
        data.insert(std::make_pair(0x11a6f,"SOYOMBO LETTER NA"));
        data.insert(std::make_pair(0x11a70,"SOYOMBO LETTER PA"));
        data.insert(std::make_pair(0x11a71,"SOYOMBO LETTER PHA"));
        data.insert(std::make_pair(0x11a72,"SOYOMBO LETTER BA"));
        data.insert(std::make_pair(0x11a73,"SOYOMBO LETTER BHA"));
        data.insert(std::make_pair(0x11a74,"SOYOMBO LETTER MA"));
        data.insert(std::make_pair(0x11a75,"SOYOMBO LETTER TSA"));
        data.insert(std::make_pair(0x11a76,"SOYOMBO LETTER TSHA"));
        data.insert(std::make_pair(0x11a77,"SOYOMBO LETTER DZA"));
        data.insert(std::make_pair(0x11a78,"SOYOMBO LETTER ZHA"));
        data.insert(std::make_pair(0x11a79,"SOYOMBO LETTER ZA"));
        data.insert(std::make_pair(0x11a7a,"SOYOMBO LETTER -A"));
        data.insert(std::make_pair(0x11a7b,"SOYOMBO LETTER YA"));
        data.insert(std::make_pair(0x11a7c,"SOYOMBO LETTER RA"));
        data.insert(std::make_pair(0x11a7d,"SOYOMBO LETTER LA"));
        data.insert(std::make_pair(0x11a7e,"SOYOMBO LETTER VA"));
        data.insert(std::make_pair(0x11a7f,"SOYOMBO LETTER SHA"));
        data.insert(std::make_pair(0x11a80,"SOYOMBO LETTER SSA"));
        data.insert(std::make_pair(0x11a81,"SOYOMBO LETTER SA"));
        data.insert(std::make_pair(0x11a82,"SOYOMBO LETTER HA"));
        data.insert(std::make_pair(0x11a83,"SOYOMBO LETTER KSSA"));
        data.insert(std::make_pair(0x11a84,"SOYOMBO SIGN JIHVAMULIYA"));
        data.insert(std::make_pair(0x11a85,"SOYOMBO SIGN UPADHMANIYA"));
        data.insert(std::make_pair(0x11a86,"SOYOMBO CLUSTER-INITIAL LETTER RA"));
        data.insert(std::make_pair(0x11a87,"SOYOMBO CLUSTER-INITIAL LETTER LA"));
        data.insert(std::make_pair(0x11a88,"SOYOMBO CLUSTER-INITIAL LETTER SHA"));
        data.insert(std::make_pair(0x11a89,"SOYOMBO CLUSTER-INITIAL LETTER SA"));
        data.insert(std::make_pair(0x11a8a,"SOYOMBO FINAL CONSONANT SIGN G"));
        data.insert(std::make_pair(0x11a8b,"SOYOMBO FINAL CONSONANT SIGN K"));
        data.insert(std::make_pair(0x11a8c,"SOYOMBO FINAL CONSONANT SIGN NG"));
        data.insert(std::make_pair(0x11a8d,"SOYOMBO FINAL CONSONANT SIGN D"));
        data.insert(std::make_pair(0x11a8e,"SOYOMBO FINAL CONSONANT SIGN N"));
        data.insert(std::make_pair(0x11a8f,"SOYOMBO FINAL CONSONANT SIGN B"));
        data.insert(std::make_pair(0x11a90,"SOYOMBO FINAL CONSONANT SIGN M"));
        data.insert(std::make_pair(0x11a91,"SOYOMBO FINAL CONSONANT SIGN R"));
        data.insert(std::make_pair(0x11a92,"SOYOMBO FINAL CONSONANT SIGN L"));
        data.insert(std::make_pair(0x11a93,"SOYOMBO FINAL CONSONANT SIGN SH"));
        data.insert(std::make_pair(0x11a94,"SOYOMBO FINAL CONSONANT SIGN S"));
        data.insert(std::make_pair(0x11a95,"SOYOMBO FINAL CONSONANT SIGN -A"));
        data.insert(std::make_pair(0x11a96,"SOYOMBO SIGN ANUSVARA"));
        data.insert(std::make_pair(0x11a97,"SOYOMBO SIGN VISARGA"));
        data.insert(std::make_pair(0x11a98,"SOYOMBO GEMINATION MARK"));
        data.insert(std::make_pair(0x11a99,"SOYOMBO SUBJOINER"));
        data.insert(std::make_pair(0x11a9a,"SOYOMBO MARK TSHEG"));
        data.insert(std::make_pair(0x11a9b,"SOYOMBO MARK SHAD"));
        data.insert(std::make_pair(0x11a9c,"SOYOMBO MARK DOUBLE SHAD"));
        data.insert(std::make_pair(0x11a9d,"SOYOMBO MARK PLUTA"));
        data.insert(std::make_pair(0x11a9e,"SOYOMBO HEAD MARK WITH MOON AND SUN AND TRIPLE FLAME"));
        data.insert(std::make_pair(0x11a9f,"SOYOMBO HEAD MARK WITH MOON AND SUN AND FLAME"));
        data.insert(std::make_pair(0x11aa0,"SOYOMBO HEAD MARK WITH MOON AND SUN"));
        data.insert(std::make_pair(0x11aa1,"SOYOMBO TERMINAL MARK-1"));
        data.insert(std::make_pair(0x11aa2,"SOYOMBO TERMINAL MARK-2"));
        data.insert(std::make_pair(0x11ab0,"CANADIAN SYLLABICS NATTILIK HI"));
        data.insert(std::make_pair(0x11ab1,"CANADIAN SYLLABICS NATTILIK HII"));
        data.insert(std::make_pair(0x11ab2,"CANADIAN SYLLABICS NATTILIK HO"));
        data.insert(std::make_pair(0x11ab3,"CANADIAN SYLLABICS NATTILIK HOO"));
        data.insert(std::make_pair(0x11ab4,"CANADIAN SYLLABICS NATTILIK HA"));
        data.insert(std::make_pair(0x11ab5,"CANADIAN SYLLABICS NATTILIK HAA"));
        data.insert(std::make_pair(0x11ab6,"CANADIAN SYLLABICS NATTILIK SHRI"));
        data.insert(std::make_pair(0x11ab7,"CANADIAN SYLLABICS NATTILIK SHRII"));
        data.insert(std::make_pair(0x11ab8,"CANADIAN SYLLABICS NATTILIK SHRO"));
        data.insert(std::make_pair(0x11ab9,"CANADIAN SYLLABICS NATTILIK SHROO"));
        data.insert(std::make_pair(0x11aba,"CANADIAN SYLLABICS NATTILIK SHRA"));
        data.insert(std::make_pair(0x11abb,"CANADIAN SYLLABICS NATTILIK SHRAA"));
        data.insert(std::make_pair(0x11abc,"CANADIAN SYLLABICS SPE"));
        data.insert(std::make_pair(0x11abd,"CANADIAN SYLLABICS SPI"));
        data.insert(std::make_pair(0x11abe,"CANADIAN SYLLABICS SPO"));
        data.insert(std::make_pair(0x11abf,"CANADIAN SYLLABICS SPA"));
        data.insert(std::make_pair(0x11ac0,"PAU CIN HAU LETTER PA"));
        data.insert(std::make_pair(0x11ac1,"PAU CIN HAU LETTER KA"));
        data.insert(std::make_pair(0x11ac2,"PAU CIN HAU LETTER LA"));
        data.insert(std::make_pair(0x11ac3,"PAU CIN HAU LETTER MA"));
        data.insert(std::make_pair(0x11ac4,"PAU CIN HAU LETTER DA"));
        data.insert(std::make_pair(0x11ac5,"PAU CIN HAU LETTER ZA"));
        data.insert(std::make_pair(0x11ac6,"PAU CIN HAU LETTER VA"));
        data.insert(std::make_pair(0x11ac7,"PAU CIN HAU LETTER NGA"));
        data.insert(std::make_pair(0x11ac8,"PAU CIN HAU LETTER HA"));
        data.insert(std::make_pair(0x11ac9,"PAU CIN HAU LETTER GA"));
        data.insert(std::make_pair(0x11aca,"PAU CIN HAU LETTER KHA"));
        data.insert(std::make_pair(0x11acb,"PAU CIN HAU LETTER SA"));
        data.insert(std::make_pair(0x11acc,"PAU CIN HAU LETTER BA"));
        data.insert(std::make_pair(0x11acd,"PAU CIN HAU LETTER CA"));
        data.insert(std::make_pair(0x11ace,"PAU CIN HAU LETTER TA"));
        data.insert(std::make_pair(0x11acf,"PAU CIN HAU LETTER THA"));
        data.insert(std::make_pair(0x11ad0,"PAU CIN HAU LETTER NA"));
        data.insert(std::make_pair(0x11ad1,"PAU CIN HAU LETTER PHA"));
        data.insert(std::make_pair(0x11ad2,"PAU CIN HAU LETTER RA"));
        data.insert(std::make_pair(0x11ad3,"PAU CIN HAU LETTER FA"));
        data.insert(std::make_pair(0x11ad4,"PAU CIN HAU LETTER CHA"));
        data.insert(std::make_pair(0x11ad5,"PAU CIN HAU LETTER A"));
        data.insert(std::make_pair(0x11ad6,"PAU CIN HAU LETTER E"));
        data.insert(std::make_pair(0x11ad7,"PAU CIN HAU LETTER I"));
        data.insert(std::make_pair(0x11ad8,"PAU CIN HAU LETTER O"));
        data.insert(std::make_pair(0x11ad9,"PAU CIN HAU LETTER U"));
        data.insert(std::make_pair(0x11ada,"PAU CIN HAU LETTER UA"));
        data.insert(std::make_pair(0x11adb,"PAU CIN HAU LETTER IA"));
        data.insert(std::make_pair(0x11adc,"PAU CIN HAU LETTER FINAL P"));
        data.insert(std::make_pair(0x11add,"PAU CIN HAU LETTER FINAL K"));
        data.insert(std::make_pair(0x11ade,"PAU CIN HAU LETTER FINAL T"));
        data.insert(std::make_pair(0x11adf,"PAU CIN HAU LETTER FINAL M"));
        data.insert(std::make_pair(0x11ae0,"PAU CIN HAU LETTER FINAL N"));
        data.insert(std::make_pair(0x11ae1,"PAU CIN HAU LETTER FINAL L"));
        data.insert(std::make_pair(0x11ae2,"PAU CIN HAU LETTER FINAL W"));
        data.insert(std::make_pair(0x11ae3,"PAU CIN HAU LETTER FINAL NG"));
        data.insert(std::make_pair(0x11ae4,"PAU CIN HAU LETTER FINAL Y"));
        data.insert(std::make_pair(0x11ae5,"PAU CIN HAU RISING TONE LONG"));
        data.insert(std::make_pair(0x11ae6,"PAU CIN HAU RISING TONE"));
        data.insert(std::make_pair(0x11ae7,"PAU CIN HAU SANDHI GLOTTAL STOP"));
        data.insert(std::make_pair(0x11ae8,"PAU CIN HAU RISING TONE LONG FINAL"));
        data.insert(std::make_pair(0x11ae9,"PAU CIN HAU RISING TONE FINAL"));
        data.insert(std::make_pair(0x11aea,"PAU CIN HAU SANDHI GLOTTAL STOP FINAL"));
        data.insert(std::make_pair(0x11aeb,"PAU CIN HAU SANDHI TONE LONG"));
        data.insert(std::make_pair(0x11aec,"PAU CIN HAU SANDHI TONE"));
        data.insert(std::make_pair(0x11aed,"PAU CIN HAU SANDHI TONE LONG FINAL"));
        data.insert(std::make_pair(0x11aee,"PAU CIN HAU SANDHI TONE FINAL"));
        data.insert(std::make_pair(0x11aef,"PAU CIN HAU MID-LEVEL TONE"));
        data.insert(std::make_pair(0x11af0,"PAU CIN HAU GLOTTAL STOP VARIANT"));
        data.insert(std::make_pair(0x11af1,"PAU CIN HAU MID-LEVEL TONE LONG FINAL"));
        data.insert(std::make_pair(0x11af2,"PAU CIN HAU MID-LEVEL TONE FINAL"));
        data.insert(std::make_pair(0x11af3,"PAU CIN HAU LOW-FALLING TONE LONG"));
        data.insert(std::make_pair(0x11af4,"PAU CIN HAU LOW-FALLING TONE"));
        data.insert(std::make_pair(0x11af5,"PAU CIN HAU GLOTTAL STOP"));
        data.insert(std::make_pair(0x11af6,"PAU CIN HAU LOW-FALLING TONE LONG FINAL"));
        data.insert(std::make_pair(0x11af7,"PAU CIN HAU LOW-FALLING TONE FINAL"));
        data.insert(std::make_pair(0x11af8,"PAU CIN HAU GLOTTAL STOP FINAL"));
        data.insert(std::make_pair(0x11b00,"DEVANAGARI HEAD MARK"));
        data.insert(std::make_pair(0x11b01,"DEVANAGARI HEAD MARK WITH HEADSTROKE"));
        data.insert(std::make_pair(0x11b02,"DEVANAGARI SIGN BHALE"));
        data.insert(std::make_pair(0x11b03,"DEVANAGARI SIGN BHALE WITH HOOK"));
        data.insert(std::make_pair(0x11b04,"DEVANAGARI SIGN EXTENDED BHALE"));
        data.insert(std::make_pair(0x11b05,"DEVANAGARI SIGN EXTENDED BHALE WITH HOOK"));
        data.insert(std::make_pair(0x11b06,"DEVANAGARI SIGN WESTERN FIVE-LIKE BHALE"));
        data.insert(std::make_pair(0x11b07,"DEVANAGARI SIGN WESTERN NINE-LIKE BHALE"));
        data.insert(std::make_pair(0x11b08,"DEVANAGARI SIGN REVERSED NINE-LIKE BHALE"));
        data.insert(std::make_pair(0x11b09,"DEVANAGARI SIGN MINDU"));
        data.insert(std::make_pair(0x11c00,"BHAIKSUKI LETTER A"));
        data.insert(std::make_pair(0x11c01,"BHAIKSUKI LETTER AA"));
        data.insert(std::make_pair(0x11c02,"BHAIKSUKI LETTER I"));
        data.insert(std::make_pair(0x11c03,"BHAIKSUKI LETTER II"));
        data.insert(std::make_pair(0x11c04,"BHAIKSUKI LETTER U"));
        data.insert(std::make_pair(0x11c05,"BHAIKSUKI LETTER UU"));
        data.insert(std::make_pair(0x11c06,"BHAIKSUKI LETTER VOCALIC R"));
        data.insert(std::make_pair(0x11c07,"BHAIKSUKI LETTER VOCALIC RR"));
        data.insert(std::make_pair(0x11c08,"BHAIKSUKI LETTER VOCALIC L"));
        data.insert(std::make_pair(0x11c0a,"BHAIKSUKI LETTER E"));
        data.insert(std::make_pair(0x11c0b,"BHAIKSUKI LETTER AI"));
        data.insert(std::make_pair(0x11c0c,"BHAIKSUKI LETTER O"));
        data.insert(std::make_pair(0x11c0d,"BHAIKSUKI LETTER AU"));
        data.insert(std::make_pair(0x11c0e,"BHAIKSUKI LETTER KA"));
        data.insert(std::make_pair(0x11c0f,"BHAIKSUKI LETTER KHA"));
        data.insert(std::make_pair(0x11c10,"BHAIKSUKI LETTER GA"));
        data.insert(std::make_pair(0x11c11,"BHAIKSUKI LETTER GHA"));
        data.insert(std::make_pair(0x11c12,"BHAIKSUKI LETTER NGA"));
        data.insert(std::make_pair(0x11c13,"BHAIKSUKI LETTER CA"));
        data.insert(std::make_pair(0x11c14,"BHAIKSUKI LETTER CHA"));
        data.insert(std::make_pair(0x11c15,"BHAIKSUKI LETTER JA"));
        data.insert(std::make_pair(0x11c16,"BHAIKSUKI LETTER JHA"));
        data.insert(std::make_pair(0x11c17,"BHAIKSUKI LETTER NYA"));
        data.insert(std::make_pair(0x11c18,"BHAIKSUKI LETTER TTA"));
        data.insert(std::make_pair(0x11c19,"BHAIKSUKI LETTER TTHA"));
        data.insert(std::make_pair(0x11c1a,"BHAIKSUKI LETTER DDA"));
        data.insert(std::make_pair(0x11c1b,"BHAIKSUKI LETTER DDHA"));
        data.insert(std::make_pair(0x11c1c,"BHAIKSUKI LETTER NNA"));
        data.insert(std::make_pair(0x11c1d,"BHAIKSUKI LETTER TA"));
        data.insert(std::make_pair(0x11c1e,"BHAIKSUKI LETTER THA"));
        data.insert(std::make_pair(0x11c1f,"BHAIKSUKI LETTER DA"));
        data.insert(std::make_pair(0x11c20,"BHAIKSUKI LETTER DHA"));
        data.insert(std::make_pair(0x11c21,"BHAIKSUKI LETTER NA"));
        data.insert(std::make_pair(0x11c22,"BHAIKSUKI LETTER PA"));
        data.insert(std::make_pair(0x11c23,"BHAIKSUKI LETTER PHA"));
        data.insert(std::make_pair(0x11c24,"BHAIKSUKI LETTER BA"));
        data.insert(std::make_pair(0x11c25,"BHAIKSUKI LETTER BHA"));
        data.insert(std::make_pair(0x11c26,"BHAIKSUKI LETTER MA"));
        data.insert(std::make_pair(0x11c27,"BHAIKSUKI LETTER YA"));
        data.insert(std::make_pair(0x11c28,"BHAIKSUKI LETTER RA"));
        data.insert(std::make_pair(0x11c29,"BHAIKSUKI LETTER LA"));
        data.insert(std::make_pair(0x11c2a,"BHAIKSUKI LETTER VA"));
        data.insert(std::make_pair(0x11c2b,"BHAIKSUKI LETTER SHA"));
        data.insert(std::make_pair(0x11c2c,"BHAIKSUKI LETTER SSA"));
        data.insert(std::make_pair(0x11c2d,"BHAIKSUKI LETTER SA"));
        data.insert(std::make_pair(0x11c2e,"BHAIKSUKI LETTER HA"));
        data.insert(std::make_pair(0x11c2f,"BHAIKSUKI VOWEL SIGN AA"));
        data.insert(std::make_pair(0x11c30,"BHAIKSUKI VOWEL SIGN I"));
        data.insert(std::make_pair(0x11c31,"BHAIKSUKI VOWEL SIGN II"));
        data.insert(std::make_pair(0x11c32,"BHAIKSUKI VOWEL SIGN U"));
        data.insert(std::make_pair(0x11c33,"BHAIKSUKI VOWEL SIGN UU"));
        data.insert(std::make_pair(0x11c34,"BHAIKSUKI VOWEL SIGN VOCALIC R"));
        data.insert(std::make_pair(0x11c35,"BHAIKSUKI VOWEL SIGN VOCALIC RR"));
        data.insert(std::make_pair(0x11c36,"BHAIKSUKI VOWEL SIGN VOCALIC L"));
        data.insert(std::make_pair(0x11c38,"BHAIKSUKI VOWEL SIGN E"));
        data.insert(std::make_pair(0x11c39,"BHAIKSUKI VOWEL SIGN AI"));
        data.insert(std::make_pair(0x11c3a,"BHAIKSUKI VOWEL SIGN O"));
        data.insert(std::make_pair(0x11c3b,"BHAIKSUKI VOWEL SIGN AU"));
        data.insert(std::make_pair(0x11c3c,"BHAIKSUKI SIGN CANDRABINDU"));
        data.insert(std::make_pair(0x11c3d,"BHAIKSUKI SIGN ANUSVARA"));
        data.insert(std::make_pair(0x11c3e,"BHAIKSUKI SIGN VISARGA"));
        data.insert(std::make_pair(0x11c3f,"BHAIKSUKI SIGN VIRAMA"));
        data.insert(std::make_pair(0x11c40,"BHAIKSUKI SIGN AVAGRAHA"));
        data.insert(std::make_pair(0x11c41,"BHAIKSUKI DANDA"));
        data.insert(std::make_pair(0x11c42,"BHAIKSUKI DOUBLE DANDA"));
        data.insert(std::make_pair(0x11c43,"BHAIKSUKI WORD SEPARATOR"));
        data.insert(std::make_pair(0x11c44,"BHAIKSUKI GAP FILLER-1"));
        data.insert(std::make_pair(0x11c45,"BHAIKSUKI GAP FILLER-2"));
        data.insert(std::make_pair(0x11c50,"BHAIKSUKI DIGIT ZERO"));
        data.insert(std::make_pair(0x11c51,"BHAIKSUKI DIGIT ONE"));
        data.insert(std::make_pair(0x11c52,"BHAIKSUKI DIGIT TWO"));
        data.insert(std::make_pair(0x11c53,"BHAIKSUKI DIGIT THREE"));
        data.insert(std::make_pair(0x11c54,"BHAIKSUKI DIGIT FOUR"));
        data.insert(std::make_pair(0x11c55,"BHAIKSUKI DIGIT FIVE"));
        data.insert(std::make_pair(0x11c56,"BHAIKSUKI DIGIT SIX"));
        data.insert(std::make_pair(0x11c57,"BHAIKSUKI DIGIT SEVEN"));
        data.insert(std::make_pair(0x11c58,"BHAIKSUKI DIGIT EIGHT"));
        data.insert(std::make_pair(0x11c59,"BHAIKSUKI DIGIT NINE"));
        data.insert(std::make_pair(0x11c5a,"BHAIKSUKI NUMBER ONE"));
        data.insert(std::make_pair(0x11c5b,"BHAIKSUKI NUMBER TWO"));
        data.insert(std::make_pair(0x11c5c,"BHAIKSUKI NUMBER THREE"));
        data.insert(std::make_pair(0x11c5d,"BHAIKSUKI NUMBER FOUR"));
        data.insert(std::make_pair(0x11c5e,"BHAIKSUKI NUMBER FIVE"));
        data.insert(std::make_pair(0x11c5f,"BHAIKSUKI NUMBER SIX"));
        data.insert(std::make_pair(0x11c60,"BHAIKSUKI NUMBER SEVEN"));
        data.insert(std::make_pair(0x11c61,"BHAIKSUKI NUMBER EIGHT"));
        data.insert(std::make_pair(0x11c62,"BHAIKSUKI NUMBER NINE"));
        data.insert(std::make_pair(0x11c63,"BHAIKSUKI NUMBER TEN"));
        data.insert(std::make_pair(0x11c64,"BHAIKSUKI NUMBER TWENTY"));
        data.insert(std::make_pair(0x11c65,"BHAIKSUKI NUMBER THIRTY"));
        data.insert(std::make_pair(0x11c66,"BHAIKSUKI NUMBER FORTY"));
        data.insert(std::make_pair(0x11c67,"BHAIKSUKI NUMBER FIFTY"));
        data.insert(std::make_pair(0x11c68,"BHAIKSUKI NUMBER SIXTY"));
        data.insert(std::make_pair(0x11c69,"BHAIKSUKI NUMBER SEVENTY"));
        data.insert(std::make_pair(0x11c6a,"BHAIKSUKI NUMBER EIGHTY"));
        data.insert(std::make_pair(0x11c6b,"BHAIKSUKI NUMBER NINETY"));
        data.insert(std::make_pair(0x11c6c,"BHAIKSUKI HUNDREDS UNIT MARK"));
        data.insert(std::make_pair(0x11c70,"MARCHEN HEAD MARK"));
        data.insert(std::make_pair(0x11c71,"MARCHEN MARK SHAD"));
        data.insert(std::make_pair(0x11c72,"MARCHEN LETTER KA"));
        data.insert(std::make_pair(0x11c73,"MARCHEN LETTER KHA"));
        data.insert(std::make_pair(0x11c74,"MARCHEN LETTER GA"));
        data.insert(std::make_pair(0x11c75,"MARCHEN LETTER NGA"));
        data.insert(std::make_pair(0x11c76,"MARCHEN LETTER CA"));
        data.insert(std::make_pair(0x11c77,"MARCHEN LETTER CHA"));
        data.insert(std::make_pair(0x11c78,"MARCHEN LETTER JA"));
        data.insert(std::make_pair(0x11c79,"MARCHEN LETTER NYA"));
        data.insert(std::make_pair(0x11c7a,"MARCHEN LETTER TA"));
        data.insert(std::make_pair(0x11c7b,"MARCHEN LETTER THA"));
        data.insert(std::make_pair(0x11c7c,"MARCHEN LETTER DA"));
        data.insert(std::make_pair(0x11c7d,"MARCHEN LETTER NA"));
        data.insert(std::make_pair(0x11c7e,"MARCHEN LETTER PA"));
        data.insert(std::make_pair(0x11c7f,"MARCHEN LETTER PHA"));
        data.insert(std::make_pair(0x11c80,"MARCHEN LETTER BA"));
        data.insert(std::make_pair(0x11c81,"MARCHEN LETTER MA"));
        data.insert(std::make_pair(0x11c82,"MARCHEN LETTER TSA"));
        data.insert(std::make_pair(0x11c83,"MARCHEN LETTER TSHA"));
        data.insert(std::make_pair(0x11c84,"MARCHEN LETTER DZA"));
        data.insert(std::make_pair(0x11c85,"MARCHEN LETTER WA"));
        data.insert(std::make_pair(0x11c86,"MARCHEN LETTER ZHA"));
        data.insert(std::make_pair(0x11c87,"MARCHEN LETTER ZA"));
        data.insert(std::make_pair(0x11c88,"MARCHEN LETTER -A"));
        data.insert(std::make_pair(0x11c89,"MARCHEN LETTER YA"));
        data.insert(std::make_pair(0x11c8a,"MARCHEN LETTER RA"));
        data.insert(std::make_pair(0x11c8b,"MARCHEN LETTER LA"));
        data.insert(std::make_pair(0x11c8c,"MARCHEN LETTER SHA"));
        data.insert(std::make_pair(0x11c8d,"MARCHEN LETTER SA"));
        data.insert(std::make_pair(0x11c8e,"MARCHEN LETTER HA"));
        data.insert(std::make_pair(0x11c8f,"MARCHEN LETTER A"));
        data.insert(std::make_pair(0x11c92,"MARCHEN SUBJOINED LETTER KA"));
        data.insert(std::make_pair(0x11c93,"MARCHEN SUBJOINED LETTER KHA"));
        data.insert(std::make_pair(0x11c94,"MARCHEN SUBJOINED LETTER GA"));
        data.insert(std::make_pair(0x11c95,"MARCHEN SUBJOINED LETTER NGA"));
        data.insert(std::make_pair(0x11c96,"MARCHEN SUBJOINED LETTER CA"));
        data.insert(std::make_pair(0x11c97,"MARCHEN SUBJOINED LETTER CHA"));
        data.insert(std::make_pair(0x11c98,"MARCHEN SUBJOINED LETTER JA"));
        data.insert(std::make_pair(0x11c99,"MARCHEN SUBJOINED LETTER NYA"));
        data.insert(std::make_pair(0x11c9a,"MARCHEN SUBJOINED LETTER TA"));
        data.insert(std::make_pair(0x11c9b,"MARCHEN SUBJOINED LETTER THA"));
        data.insert(std::make_pair(0x11c9c,"MARCHEN SUBJOINED LETTER DA"));
        data.insert(std::make_pair(0x11c9d,"MARCHEN SUBJOINED LETTER NA"));
        data.insert(std::make_pair(0x11c9e,"MARCHEN SUBJOINED LETTER PA"));
        data.insert(std::make_pair(0x11c9f,"MARCHEN SUBJOINED LETTER PHA"));
        data.insert(std::make_pair(0x11ca0,"MARCHEN SUBJOINED LETTER BA"));
        data.insert(std::make_pair(0x11ca1,"MARCHEN SUBJOINED LETTER MA"));
        data.insert(std::make_pair(0x11ca2,"MARCHEN SUBJOINED LETTER TSA"));
        data.insert(std::make_pair(0x11ca3,"MARCHEN SUBJOINED LETTER TSHA"));
        data.insert(std::make_pair(0x11ca4,"MARCHEN SUBJOINED LETTER DZA"));
        data.insert(std::make_pair(0x11ca5,"MARCHEN SUBJOINED LETTER WA"));
        data.insert(std::make_pair(0x11ca6,"MARCHEN SUBJOINED LETTER ZHA"));
        data.insert(std::make_pair(0x11ca7,"MARCHEN SUBJOINED LETTER ZA"));
        data.insert(std::make_pair(0x11ca9,"MARCHEN SUBJOINED LETTER YA"));
        data.insert(std::make_pair(0x11caa,"MARCHEN SUBJOINED LETTER RA"));
        data.insert(std::make_pair(0x11cab,"MARCHEN SUBJOINED LETTER LA"));
        data.insert(std::make_pair(0x11cac,"MARCHEN SUBJOINED LETTER SHA"));
        data.insert(std::make_pair(0x11cad,"MARCHEN SUBJOINED LETTER SA"));
        data.insert(std::make_pair(0x11cae,"MARCHEN SUBJOINED LETTER HA"));
        data.insert(std::make_pair(0x11caf,"MARCHEN SUBJOINED LETTER A"));
        data.insert(std::make_pair(0x11cb0,"MARCHEN VOWEL SIGN AA"));
        data.insert(std::make_pair(0x11cb1,"MARCHEN VOWEL SIGN I"));
        data.insert(std::make_pair(0x11cb2,"MARCHEN VOWEL SIGN U"));
        data.insert(std::make_pair(0x11cb3,"MARCHEN VOWEL SIGN E"));
        data.insert(std::make_pair(0x11cb4,"MARCHEN VOWEL SIGN O"));
        data.insert(std::make_pair(0x11cb5,"MARCHEN SIGN ANUSVARA"));
        data.insert(std::make_pair(0x11cb6,"MARCHEN SIGN CANDRABINDU"));
        data.insert(std::make_pair(0x11d00,"MASARAM GONDI LETTER A"));
        data.insert(std::make_pair(0x11d01,"MASARAM GONDI LETTER AA"));
        data.insert(std::make_pair(0x11d02,"MASARAM GONDI LETTER I"));
        data.insert(std::make_pair(0x11d03,"MASARAM GONDI LETTER II"));
        data.insert(std::make_pair(0x11d04,"MASARAM GONDI LETTER U"));
        data.insert(std::make_pair(0x11d05,"MASARAM GONDI LETTER UU"));
        data.insert(std::make_pair(0x11d06,"MASARAM GONDI LETTER E"));
        data.insert(std::make_pair(0x11d08,"MASARAM GONDI LETTER AI"));
        data.insert(std::make_pair(0x11d09,"MASARAM GONDI LETTER O"));
        data.insert(std::make_pair(0x11d0b,"MASARAM GONDI LETTER AU"));
        data.insert(std::make_pair(0x11d0c,"MASARAM GONDI LETTER KA"));
        data.insert(std::make_pair(0x11d0d,"MASARAM GONDI LETTER KHA"));
        data.insert(std::make_pair(0x11d0e,"MASARAM GONDI LETTER GA"));
        data.insert(std::make_pair(0x11d0f,"MASARAM GONDI LETTER GHA"));
        data.insert(std::make_pair(0x11d10,"MASARAM GONDI LETTER NGA"));
        data.insert(std::make_pair(0x11d11,"MASARAM GONDI LETTER CA"));
        data.insert(std::make_pair(0x11d12,"MASARAM GONDI LETTER CHA"));
        data.insert(std::make_pair(0x11d13,"MASARAM GONDI LETTER JA"));
        data.insert(std::make_pair(0x11d14,"MASARAM GONDI LETTER JHA"));
        data.insert(std::make_pair(0x11d15,"MASARAM GONDI LETTER NYA"));
        data.insert(std::make_pair(0x11d16,"MASARAM GONDI LETTER TTA"));
        data.insert(std::make_pair(0x11d17,"MASARAM GONDI LETTER TTHA"));
        data.insert(std::make_pair(0x11d18,"MASARAM GONDI LETTER DDA"));
        data.insert(std::make_pair(0x11d19,"MASARAM GONDI LETTER DDHA"));
        data.insert(std::make_pair(0x11d1a,"MASARAM GONDI LETTER NNA"));
        data.insert(std::make_pair(0x11d1b,"MASARAM GONDI LETTER TA"));
        data.insert(std::make_pair(0x11d1c,"MASARAM GONDI LETTER THA"));
        data.insert(std::make_pair(0x11d1d,"MASARAM GONDI LETTER DA"));
        data.insert(std::make_pair(0x11d1e,"MASARAM GONDI LETTER DHA"));
        data.insert(std::make_pair(0x11d1f,"MASARAM GONDI LETTER NA"));
        data.insert(std::make_pair(0x11d20,"MASARAM GONDI LETTER PA"));
        data.insert(std::make_pair(0x11d21,"MASARAM GONDI LETTER PHA"));
        data.insert(std::make_pair(0x11d22,"MASARAM GONDI LETTER BA"));
        data.insert(std::make_pair(0x11d23,"MASARAM GONDI LETTER BHA"));
        data.insert(std::make_pair(0x11d24,"MASARAM GONDI LETTER MA"));
        data.insert(std::make_pair(0x11d25,"MASARAM GONDI LETTER YA"));
        data.insert(std::make_pair(0x11d26,"MASARAM GONDI LETTER RA"));
        data.insert(std::make_pair(0x11d27,"MASARAM GONDI LETTER LA"));
        data.insert(std::make_pair(0x11d28,"MASARAM GONDI LETTER VA"));
        data.insert(std::make_pair(0x11d29,"MASARAM GONDI LETTER SHA"));
        data.insert(std::make_pair(0x11d2a,"MASARAM GONDI LETTER SSA"));
        data.insert(std::make_pair(0x11d2b,"MASARAM GONDI LETTER SA"));
        data.insert(std::make_pair(0x11d2c,"MASARAM GONDI LETTER HA"));
        data.insert(std::make_pair(0x11d2d,"MASARAM GONDI LETTER LLA"));
        data.insert(std::make_pair(0x11d2e,"MASARAM GONDI LETTER KSSA"));
        data.insert(std::make_pair(0x11d2f,"MASARAM GONDI LETTER JNYA"));
        data.insert(std::make_pair(0x11d30,"MASARAM GONDI LETTER TRA"));
        data.insert(std::make_pair(0x11d31,"MASARAM GONDI VOWEL SIGN AA"));
        data.insert(std::make_pair(0x11d32,"MASARAM GONDI VOWEL SIGN I"));
        data.insert(std::make_pair(0x11d33,"MASARAM GONDI VOWEL SIGN II"));
        data.insert(std::make_pair(0x11d34,"MASARAM GONDI VOWEL SIGN U"));
        data.insert(std::make_pair(0x11d35,"MASARAM GONDI VOWEL SIGN UU"));
        data.insert(std::make_pair(0x11d36,"MASARAM GONDI VOWEL SIGN VOCALIC R"));
        data.insert(std::make_pair(0x11d3a,"MASARAM GONDI VOWEL SIGN E"));
        data.insert(std::make_pair(0x11d3c,"MASARAM GONDI VOWEL SIGN AI"));
        data.insert(std::make_pair(0x11d3d,"MASARAM GONDI VOWEL SIGN O"));
        data.insert(std::make_pair(0x11d3f,"MASARAM GONDI VOWEL SIGN AU"));
        data.insert(std::make_pair(0x11d40,"MASARAM GONDI SIGN ANUSVARA"));
        data.insert(std::make_pair(0x11d41,"MASARAM GONDI SIGN VISARGA"));
        data.insert(std::make_pair(0x11d42,"MASARAM GONDI SIGN NUKTA"));
        data.insert(std::make_pair(0x11d43,"MASARAM GONDI SIGN CANDRA"));
        data.insert(std::make_pair(0x11d44,"MASARAM GONDI SIGN HALANTA"));
        data.insert(std::make_pair(0x11d45,"MASARAM GONDI VIRAMA"));
        data.insert(std::make_pair(0x11d46,"MASARAM GONDI REPHA"));
        data.insert(std::make_pair(0x11d47,"MASARAM GONDI RA-KARA"));
        data.insert(std::make_pair(0x11d50,"MASARAM GONDI DIGIT ZERO"));
        data.insert(std::make_pair(0x11d51,"MASARAM GONDI DIGIT ONE"));
        data.insert(std::make_pair(0x11d52,"MASARAM GONDI DIGIT TWO"));
        data.insert(std::make_pair(0x11d53,"MASARAM GONDI DIGIT THREE"));
        data.insert(std::make_pair(0x11d54,"MASARAM GONDI DIGIT FOUR"));
        data.insert(std::make_pair(0x11d55,"MASARAM GONDI DIGIT FIVE"));
        data.insert(std::make_pair(0x11d56,"MASARAM GONDI DIGIT SIX"));
        data.insert(std::make_pair(0x11d57,"MASARAM GONDI DIGIT SEVEN"));
        data.insert(std::make_pair(0x11d58,"MASARAM GONDI DIGIT EIGHT"));
        data.insert(std::make_pair(0x11d59,"MASARAM GONDI DIGIT NINE"));
        data.insert(std::make_pair(0x11d60,"GUNJALA GONDI LETTER A"));
        data.insert(std::make_pair(0x11d61,"GUNJALA GONDI LETTER AA"));
        data.insert(std::make_pair(0x11d62,"GUNJALA GONDI LETTER I"));
        data.insert(std::make_pair(0x11d63,"GUNJALA GONDI LETTER II"));
        data.insert(std::make_pair(0x11d64,"GUNJALA GONDI LETTER U"));
        data.insert(std::make_pair(0x11d65,"GUNJALA GONDI LETTER UU"));
        data.insert(std::make_pair(0x11d67,"GUNJALA GONDI LETTER EE"));
        data.insert(std::make_pair(0x11d68,"GUNJALA GONDI LETTER AI"));
        data.insert(std::make_pair(0x11d6a,"GUNJALA GONDI LETTER OO"));
        data.insert(std::make_pair(0x11d6b,"GUNJALA GONDI LETTER AU"));
        data.insert(std::make_pair(0x11d6c,"GUNJALA GONDI LETTER YA"));
        data.insert(std::make_pair(0x11d6d,"GUNJALA GONDI LETTER VA"));
        data.insert(std::make_pair(0x11d6e,"GUNJALA GONDI LETTER BA"));
        data.insert(std::make_pair(0x11d6f,"GUNJALA GONDI LETTER BHA"));
        data.insert(std::make_pair(0x11d70,"GUNJALA GONDI LETTER MA"));
        data.insert(std::make_pair(0x11d71,"GUNJALA GONDI LETTER KA"));
        data.insert(std::make_pair(0x11d72,"GUNJALA GONDI LETTER KHA"));
        data.insert(std::make_pair(0x11d73,"GUNJALA GONDI LETTER TA"));
        data.insert(std::make_pair(0x11d74,"GUNJALA GONDI LETTER THA"));
        data.insert(std::make_pair(0x11d75,"GUNJALA GONDI LETTER LA"));
        data.insert(std::make_pair(0x11d76,"GUNJALA GONDI LETTER GA"));
        data.insert(std::make_pair(0x11d77,"GUNJALA GONDI LETTER GHA"));
        data.insert(std::make_pair(0x11d78,"GUNJALA GONDI LETTER DA"));
        data.insert(std::make_pair(0x11d79,"GUNJALA GONDI LETTER DHA"));
        data.insert(std::make_pair(0x11d7a,"GUNJALA GONDI LETTER NA"));
        data.insert(std::make_pair(0x11d7b,"GUNJALA GONDI LETTER CA"));
        data.insert(std::make_pair(0x11d7c,"GUNJALA GONDI LETTER CHA"));
        data.insert(std::make_pair(0x11d7d,"GUNJALA GONDI LETTER TTA"));
        data.insert(std::make_pair(0x11d7e,"GUNJALA GONDI LETTER TTHA"));
        data.insert(std::make_pair(0x11d7f,"GUNJALA GONDI LETTER LLA"));
        data.insert(std::make_pair(0x11d80,"GUNJALA GONDI LETTER JA"));
        data.insert(std::make_pair(0x11d81,"GUNJALA GONDI LETTER JHA"));
        data.insert(std::make_pair(0x11d82,"GUNJALA GONDI LETTER DDA"));
        data.insert(std::make_pair(0x11d83,"GUNJALA GONDI LETTER DDHA"));
        data.insert(std::make_pair(0x11d84,"GUNJALA GONDI LETTER NGA"));
        data.insert(std::make_pair(0x11d85,"GUNJALA GONDI LETTER PA"));
        data.insert(std::make_pair(0x11d86,"GUNJALA GONDI LETTER PHA"));
        data.insert(std::make_pair(0x11d87,"GUNJALA GONDI LETTER HA"));
        data.insert(std::make_pair(0x11d88,"GUNJALA GONDI LETTER RA"));
        data.insert(std::make_pair(0x11d89,"GUNJALA GONDI LETTER SA"));
        data.insert(std::make_pair(0x11d8a,"GUNJALA GONDI VOWEL SIGN AA"));
        data.insert(std::make_pair(0x11d8b,"GUNJALA GONDI VOWEL SIGN I"));
        data.insert(std::make_pair(0x11d8c,"GUNJALA GONDI VOWEL SIGN II"));
        data.insert(std::make_pair(0x11d8d,"GUNJALA GONDI VOWEL SIGN U"));
        data.insert(std::make_pair(0x11d8e,"GUNJALA GONDI VOWEL SIGN UU"));
        data.insert(std::make_pair(0x11d90,"GUNJALA GONDI VOWEL SIGN EE"));
        data.insert(std::make_pair(0x11d91,"GUNJALA GONDI VOWEL SIGN AI"));
        data.insert(std::make_pair(0x11d93,"GUNJALA GONDI VOWEL SIGN OO"));
        data.insert(std::make_pair(0x11d94,"GUNJALA GONDI VOWEL SIGN AU"));
        data.insert(std::make_pair(0x11d95,"GUNJALA GONDI SIGN ANUSVARA"));
        data.insert(std::make_pair(0x11d96,"GUNJALA GONDI SIGN VISARGA"));
        data.insert(std::make_pair(0x11d97,"GUNJALA GONDI VIRAMA"));
        data.insert(std::make_pair(0x11d98,"GUNJALA GONDI OM"));
        data.insert(std::make_pair(0x11da0,"GUNJALA GONDI DIGIT ZERO"));
        data.insert(std::make_pair(0x11da1,"GUNJALA GONDI DIGIT ONE"));
        data.insert(std::make_pair(0x11da2,"GUNJALA GONDI DIGIT TWO"));
        data.insert(std::make_pair(0x11da3,"GUNJALA GONDI DIGIT THREE"));
        data.insert(std::make_pair(0x11da4,"GUNJALA GONDI DIGIT FOUR"));
        data.insert(std::make_pair(0x11da5,"GUNJALA GONDI DIGIT FIVE"));
        data.insert(std::make_pair(0x11da6,"GUNJALA GONDI DIGIT SIX"));
        data.insert(std::make_pair(0x11da7,"GUNJALA GONDI DIGIT SEVEN"));
        data.insert(std::make_pair(0x11da8,"GUNJALA GONDI DIGIT EIGHT"));
        data.insert(std::make_pair(0x11da9,"GUNJALA GONDI DIGIT NINE"));
        data.insert(std::make_pair(0x11ee0,"MAKASAR LETTER KA"));
        data.insert(std::make_pair(0x11ee1,"MAKASAR LETTER GA"));
        data.insert(std::make_pair(0x11ee2,"MAKASAR LETTER NGA"));
        data.insert(std::make_pair(0x11ee3,"MAKASAR LETTER PA"));
        data.insert(std::make_pair(0x11ee4,"MAKASAR LETTER BA"));
        data.insert(std::make_pair(0x11ee5,"MAKASAR LETTER MA"));
        data.insert(std::make_pair(0x11ee6,"MAKASAR LETTER TA"));
        data.insert(std::make_pair(0x11ee7,"MAKASAR LETTER DA"));
        data.insert(std::make_pair(0x11ee8,"MAKASAR LETTER NA"));
        data.insert(std::make_pair(0x11ee9,"MAKASAR LETTER CA"));
        data.insert(std::make_pair(0x11eea,"MAKASAR LETTER JA"));
        data.insert(std::make_pair(0x11eeb,"MAKASAR LETTER NYA"));
        data.insert(std::make_pair(0x11eec,"MAKASAR LETTER YA"));
        data.insert(std::make_pair(0x11eed,"MAKASAR LETTER RA"));
        data.insert(std::make_pair(0x11eee,"MAKASAR LETTER LA"));
        data.insert(std::make_pair(0x11eef,"MAKASAR LETTER VA"));
        data.insert(std::make_pair(0x11ef0,"MAKASAR LETTER SA"));
        data.insert(std::make_pair(0x11ef1,"MAKASAR LETTER A"));
        data.insert(std::make_pair(0x11ef2,"MAKASAR ANGKA"));
        data.insert(std::make_pair(0x11ef3,"MAKASAR VOWEL SIGN I"));
        data.insert(std::make_pair(0x11ef4,"MAKASAR VOWEL SIGN U"));
        data.insert(std::make_pair(0x11ef5,"MAKASAR VOWEL SIGN E"));
        data.insert(std::make_pair(0x11ef6,"MAKASAR VOWEL SIGN O"));
        data.insert(std::make_pair(0x11ef7,"MAKASAR PASSIMBANG"));
        data.insert(std::make_pair(0x11ef8,"MAKASAR END OF SECTION"));
        data.insert(std::make_pair(0x11f00,"KAWI SIGN CANDRABINDU"));
        data.insert(std::make_pair(0x11f01,"KAWI SIGN ANUSVARA"));
        data.insert(std::make_pair(0x11f02,"KAWI SIGN REPHA"));
        data.insert(std::make_pair(0x11f03,"KAWI SIGN VISARGA"));
        data.insert(std::make_pair(0x11f04,"KAWI LETTER A"));
        data.insert(std::make_pair(0x11f05,"KAWI LETTER AA"));
        data.insert(std::make_pair(0x11f06,"KAWI LETTER I"));
        data.insert(std::make_pair(0x11f07,"KAWI LETTER II"));
        data.insert(std::make_pair(0x11f08,"KAWI LETTER U"));
        data.insert(std::make_pair(0x11f09,"KAWI LETTER UU"));
        data.insert(std::make_pair(0x11f0a,"KAWI LETTER VOCALIC R"));
        data.insert(std::make_pair(0x11f0b,"KAWI LETTER VOCALIC RR"));
        data.insert(std::make_pair(0x11f0c,"KAWI LETTER VOCALIC L"));
        data.insert(std::make_pair(0x11f0d,"KAWI LETTER VOCALIC LL"));
        data.insert(std::make_pair(0x11f0e,"KAWI LETTER E"));
        data.insert(std::make_pair(0x11f0f,"KAWI LETTER AI"));
        data.insert(std::make_pair(0x11f10,"KAWI LETTER O"));
        data.insert(std::make_pair(0x11f12,"KAWI LETTER KA"));
        data.insert(std::make_pair(0x11f13,"KAWI LETTER KHA"));
        data.insert(std::make_pair(0x11f14,"KAWI LETTER GA"));
        data.insert(std::make_pair(0x11f15,"KAWI LETTER GHA"));
        data.insert(std::make_pair(0x11f16,"KAWI LETTER NGA"));
        data.insert(std::make_pair(0x11f17,"KAWI LETTER CA"));
        data.insert(std::make_pair(0x11f18,"KAWI LETTER CHA"));
        data.insert(std::make_pair(0x11f19,"KAWI LETTER JA"));
        data.insert(std::make_pair(0x11f1a,"KAWI LETTER JHA"));
        data.insert(std::make_pair(0x11f1b,"KAWI LETTER NYA"));
        data.insert(std::make_pair(0x11f1c,"KAWI LETTER TTA"));
        data.insert(std::make_pair(0x11f1d,"KAWI LETTER TTHA"));
        data.insert(std::make_pair(0x11f1e,"KAWI LETTER DDA"));
        data.insert(std::make_pair(0x11f1f,"KAWI LETTER DDHA"));
        data.insert(std::make_pair(0x11f20,"KAWI LETTER NNA"));
        data.insert(std::make_pair(0x11f21,"KAWI LETTER TA"));
        data.insert(std::make_pair(0x11f22,"KAWI LETTER THA"));
        data.insert(std::make_pair(0x11f23,"KAWI LETTER DA"));
        data.insert(std::make_pair(0x11f24,"KAWI LETTER DHA"));
        data.insert(std::make_pair(0x11f25,"KAWI LETTER NA"));
        data.insert(std::make_pair(0x11f26,"KAWI LETTER PA"));
        data.insert(std::make_pair(0x11f27,"KAWI LETTER PHA"));
        data.insert(std::make_pair(0x11f28,"KAWI LETTER BA"));
        data.insert(std::make_pair(0x11f29,"KAWI LETTER BHA"));
        data.insert(std::make_pair(0x11f2a,"KAWI LETTER MA"));
        data.insert(std::make_pair(0x11f2b,"KAWI LETTER YA"));
        data.insert(std::make_pair(0x11f2c,"KAWI LETTER RA"));
        data.insert(std::make_pair(0x11f2d,"KAWI LETTER LA"));
        data.insert(std::make_pair(0x11f2e,"KAWI LETTER WA"));
        data.insert(std::make_pair(0x11f2f,"KAWI LETTER SHA"));
        data.insert(std::make_pair(0x11f30,"KAWI LETTER SSA"));
        data.insert(std::make_pair(0x11f31,"KAWI LETTER SA"));
        data.insert(std::make_pair(0x11f32,"KAWI LETTER HA"));
        data.insert(std::make_pair(0x11f33,"KAWI LETTER JNYA"));
        data.insert(std::make_pair(0x11f34,"KAWI VOWEL SIGN AA"));
        data.insert(std::make_pair(0x11f35,"KAWI VOWEL SIGN ALTERNATE AA"));
        data.insert(std::make_pair(0x11f36,"KAWI VOWEL SIGN I"));
        data.insert(std::make_pair(0x11f37,"KAWI VOWEL SIGN II"));
        data.insert(std::make_pair(0x11f38,"KAWI VOWEL SIGN U"));
        data.insert(std::make_pair(0x11f39,"KAWI VOWEL SIGN UU"));
        data.insert(std::make_pair(0x11f3a,"KAWI VOWEL SIGN VOCALIC R"));
        data.insert(std::make_pair(0x11f3e,"KAWI VOWEL SIGN E"));
        data.insert(std::make_pair(0x11f3f,"KAWI VOWEL SIGN AI"));
        data.insert(std::make_pair(0x11f40,"KAWI VOWEL SIGN EU"));
        data.insert(std::make_pair(0x11f41,"KAWI SIGN KILLER"));
        data.insert(std::make_pair(0x11f42,"KAWI CONJOINER"));
        data.insert(std::make_pair(0x11f43,"KAWI DANDA"));
        data.insert(std::make_pair(0x11f44,"KAWI DOUBLE DANDA"));
        data.insert(std::make_pair(0x11f45,"KAWI PUNCTUATION SECTION MARKER"));
        data.insert(std::make_pair(0x11f46,"KAWI PUNCTUATION ALTERNATE SECTION MARKER"));
        data.insert(std::make_pair(0x11f47,"KAWI PUNCTUATION FLOWER"));
        data.insert(std::make_pair(0x11f48,"KAWI PUNCTUATION SPACE FILLER"));
        data.insert(std::make_pair(0x11f49,"KAWI PUNCTUATION DOT"));
        data.insert(std::make_pair(0x11f4a,"KAWI PUNCTUATION DOUBLE DOT"));
        data.insert(std::make_pair(0x11f4b,"KAWI PUNCTUATION TRIPLE DOT"));
        data.insert(std::make_pair(0x11f4c,"KAWI PUNCTUATION CIRCLE"));
        data.insert(std::make_pair(0x11f4d,"KAWI PUNCTUATION FILLED CIRCLE"));
        data.insert(std::make_pair(0x11f4e,"KAWI PUNCTUATION SPIRAL"));
        data.insert(std::make_pair(0x11f4f,"KAWI PUNCTUATION CLOSING SPIRAL"));
        data.insert(std::make_pair(0x11f50,"KAWI DIGIT ZERO"));
        data.insert(std::make_pair(0x11f51,"KAWI DIGIT ONE"));
        data.insert(std::make_pair(0x11f52,"KAWI DIGIT TWO"));
        data.insert(std::make_pair(0x11f53,"KAWI DIGIT THREE"));
        data.insert(std::make_pair(0x11f54,"KAWI DIGIT FOUR"));
        data.insert(std::make_pair(0x11f55,"KAWI DIGIT FIVE"));
        data.insert(std::make_pair(0x11f56,"KAWI DIGIT SIX"));
        data.insert(std::make_pair(0x11f57,"KAWI DIGIT SEVEN"));
        data.insert(std::make_pair(0x11f58,"KAWI DIGIT EIGHT"));
        data.insert(std::make_pair(0x11f59,"KAWI DIGIT NINE"));
        data.insert(std::make_pair(0x11fb0,"LISU LETTER YHA"));
        data.insert(std::make_pair(0x11fc0,"TAMIL FRACTION ONE THREE-HUNDRED-AND-TWENTIETH"));
        data.insert(std::make_pair(0x11fc1,"TAMIL FRACTION ONE ONE-HUNDRED-AND-SIXTIETH"));
        data.insert(std::make_pair(0x11fc2,"TAMIL FRACTION ONE EIGHTIETH"));
        data.insert(std::make_pair(0x11fc3,"TAMIL FRACTION ONE SIXTY-FOURTH"));
        data.insert(std::make_pair(0x11fc4,"TAMIL FRACTION ONE FORTIETH"));
        data.insert(std::make_pair(0x11fc5,"TAMIL FRACTION ONE THIRTY-SECOND"));
        data.insert(std::make_pair(0x11fc6,"TAMIL FRACTION THREE EIGHTIETHS"));
        data.insert(std::make_pair(0x11fc7,"TAMIL FRACTION THREE SIXTY-FOURTHS"));
        data.insert(std::make_pair(0x11fc8,"TAMIL FRACTION ONE TWENTIETH"));
        data.insert(std::make_pair(0x11fc9,"TAMIL FRACTION ONE SIXTEENTH-1"));
        data.insert(std::make_pair(0x11fca,"TAMIL FRACTION ONE SIXTEENTH-2"));
        data.insert(std::make_pair(0x11fcb,"TAMIL FRACTION ONE TENTH"));
        data.insert(std::make_pair(0x11fcc,"TAMIL FRACTION ONE EIGHTH"));
        data.insert(std::make_pair(0x11fcd,"TAMIL FRACTION THREE TWENTIETHS"));
        data.insert(std::make_pair(0x11fce,"TAMIL FRACTION THREE SIXTEENTHS"));
        data.insert(std::make_pair(0x11fcf,"TAMIL FRACTION ONE FIFTH"));
        data.insert(std::make_pair(0x11fd0,"TAMIL FRACTION ONE QUARTER"));
        data.insert(std::make_pair(0x11fd1,"TAMIL FRACTION ONE HALF-1"));
        data.insert(std::make_pair(0x11fd2,"TAMIL FRACTION ONE HALF-2"));
        data.insert(std::make_pair(0x11fd3,"TAMIL FRACTION THREE QUARTERS"));
        data.insert(std::make_pair(0x11fd4,"TAMIL FRACTION DOWNSCALING FACTOR KIIZH"));
        data.insert(std::make_pair(0x11fd5,"TAMIL SIGN NEL"));
        data.insert(std::make_pair(0x11fd6,"TAMIL SIGN CEVITU"));
        data.insert(std::make_pair(0x11fd7,"TAMIL SIGN AAZHAAKKU"));
        data.insert(std::make_pair(0x11fd8,"TAMIL SIGN UZHAKKU"));
        data.insert(std::make_pair(0x11fd9,"TAMIL SIGN MUUVUZHAKKU"));
        data.insert(std::make_pair(0x11fda,"TAMIL SIGN KURUNI"));
        data.insert(std::make_pair(0x11fdb,"TAMIL SIGN PATHAKKU"));
        data.insert(std::make_pair(0x11fdc,"TAMIL SIGN MUKKURUNI"));
        data.insert(std::make_pair(0x11fdd,"TAMIL SIGN KAACU"));
        data.insert(std::make_pair(0x11fde,"TAMIL SIGN PANAM"));
        data.insert(std::make_pair(0x11fdf,"TAMIL SIGN PON"));
        data.insert(std::make_pair(0x11fe0,"TAMIL SIGN VARAAKAN"));
        data.insert(std::make_pair(0x11fe1,"TAMIL SIGN PAARAM"));
        data.insert(std::make_pair(0x11fe2,"TAMIL SIGN KUZHI"));
        data.insert(std::make_pair(0x11fe3,"TAMIL SIGN VELI"));
        data.insert(std::make_pair(0x11fe4,"TAMIL WET CULTIVATION SIGN"));
        data.insert(std::make_pair(0x11fe5,"TAMIL DRY CULTIVATION SIGN"));
        data.insert(std::make_pair(0x11fe6,"TAMIL LAND SIGN"));
        data.insert(std::make_pair(0x11fe7,"TAMIL SALT PAN SIGN"));
        data.insert(std::make_pair(0x11fe8,"TAMIL TRADITIONAL CREDIT SIGN"));
        data.insert(std::make_pair(0x11fe9,"TAMIL TRADITIONAL NUMBER SIGN"));
        data.insert(std::make_pair(0x11fea,"TAMIL CURRENT SIGN"));
        data.insert(std::make_pair(0x11feb,"TAMIL AND ODD SIGN"));
        data.insert(std::make_pair(0x11fec,"TAMIL SPENT SIGN"));
        data.insert(std::make_pair(0x11fed,"TAMIL TOTAL SIGN"));
        data.insert(std::make_pair(0x11fee,"TAMIL IN POSSESSION SIGN"));
        data.insert(std::make_pair(0x11fef,"TAMIL STARTING FROM SIGN"));
        data.insert(std::make_pair(0x11ff0,"TAMIL SIGN MUTHALIYA"));
        data.insert(std::make_pair(0x11ff1,"TAMIL SIGN VAKAIYARAA"));
        data.insert(std::make_pair(0x11fff,"TAMIL PUNCTUATION END OF TEXT"));
        data.insert(std::make_pair(0x12000,"CUNEIFORM SIGN A"));
        data.insert(std::make_pair(0x12001,"CUNEIFORM SIGN A TIMES A"));
        data.insert(std::make_pair(0x12002,"CUNEIFORM SIGN A TIMES BAD"));
        data.insert(std::make_pair(0x12003,"CUNEIFORM SIGN A TIMES GAN2 TENU"));
        data.insert(std::make_pair(0x12004,"CUNEIFORM SIGN A TIMES HA"));
        data.insert(std::make_pair(0x12005,"CUNEIFORM SIGN A TIMES IGI"));
        data.insert(std::make_pair(0x12006,"CUNEIFORM SIGN A TIMES LAGAR GUNU"));
        data.insert(std::make_pair(0x12007,"CUNEIFORM SIGN A TIMES MUSH"));
        data.insert(std::make_pair(0x12008,"CUNEIFORM SIGN A TIMES SAG"));
        data.insert(std::make_pair(0x12009,"CUNEIFORM SIGN A2"));
        data.insert(std::make_pair(0x1200a,"CUNEIFORM SIGN AB"));
        data.insert(std::make_pair(0x1200b,"CUNEIFORM SIGN AB TIMES ASH2"));
        data.insert(std::make_pair(0x1200c,"CUNEIFORM SIGN AB TIMES DUN3 GUNU"));
        data.insert(std::make_pair(0x1200d,"CUNEIFORM SIGN AB TIMES GAL"));
        data.insert(std::make_pair(0x1200e,"CUNEIFORM SIGN AB TIMES GAN2 TENU"));
        data.insert(std::make_pair(0x1200f,"CUNEIFORM SIGN AB TIMES HA"));
        data.insert(std::make_pair(0x12010,"CUNEIFORM SIGN AB TIMES IGI GUNU"));
        data.insert(std::make_pair(0x12011,"CUNEIFORM SIGN AB TIMES IMIN"));
        data.insert(std::make_pair(0x12012,"CUNEIFORM SIGN AB TIMES LAGAB"));
        data.insert(std::make_pair(0x12013,"CUNEIFORM SIGN AB TIMES SHESH"));
        data.insert(std::make_pair(0x12014,"CUNEIFORM SIGN AB TIMES U PLUS U PLUS U"));
        data.insert(std::make_pair(0x12015,"CUNEIFORM SIGN AB GUNU"));
        data.insert(std::make_pair(0x12016,"CUNEIFORM SIGN AB2"));
        data.insert(std::make_pair(0x12017,"CUNEIFORM SIGN AB2 TIMES BALAG"));
        data.insert(std::make_pair(0x12018,"CUNEIFORM SIGN AB2 TIMES GAN2 TENU"));
        data.insert(std::make_pair(0x12019,"CUNEIFORM SIGN AB2 TIMES ME PLUS EN"));
        data.insert(std::make_pair(0x1201a,"CUNEIFORM SIGN AB2 TIMES SHA3"));
        data.insert(std::make_pair(0x1201b,"CUNEIFORM SIGN AB2 TIMES TAK4"));
        data.insert(std::make_pair(0x1201c,"CUNEIFORM SIGN AD"));
        data.insert(std::make_pair(0x1201d,"CUNEIFORM SIGN AK"));
        data.insert(std::make_pair(0x1201e,"CUNEIFORM SIGN AK TIMES ERIN2"));
        data.insert(std::make_pair(0x1201f,"CUNEIFORM SIGN AK TIMES SHITA PLUS GISH"));
        data.insert(std::make_pair(0x12020,"CUNEIFORM SIGN AL"));
        data.insert(std::make_pair(0x12021,"CUNEIFORM SIGN AL TIMES AL"));
        data.insert(std::make_pair(0x12022,"CUNEIFORM SIGN AL TIMES DIM2"));
        data.insert(std::make_pair(0x12023,"CUNEIFORM SIGN AL TIMES GISH"));
        data.insert(std::make_pair(0x12024,"CUNEIFORM SIGN AL TIMES HA"));
        data.insert(std::make_pair(0x12025,"CUNEIFORM SIGN AL TIMES KAD3"));
        data.insert(std::make_pair(0x12026,"CUNEIFORM SIGN AL TIMES KI"));
        data.insert(std::make_pair(0x12027,"CUNEIFORM SIGN AL TIMES SHE"));
        data.insert(std::make_pair(0x12028,"CUNEIFORM SIGN AL TIMES USH"));
        data.insert(std::make_pair(0x12029,"CUNEIFORM SIGN ALAN"));
        data.insert(std::make_pair(0x1202a,"CUNEIFORM SIGN ALEPH"));
        data.insert(std::make_pair(0x1202b,"CUNEIFORM SIGN AMAR"));
        data.insert(std::make_pair(0x1202c,"CUNEIFORM SIGN AMAR TIMES SHE"));
        data.insert(std::make_pair(0x1202d,"CUNEIFORM SIGN AN"));
        data.insert(std::make_pair(0x1202e,"CUNEIFORM SIGN AN OVER AN"));
        data.insert(std::make_pair(0x1202f,"CUNEIFORM SIGN AN THREE TIMES"));
        data.insert(std::make_pair(0x12030,"CUNEIFORM SIGN AN PLUS NAGA OPPOSING AN PLUS NAGA"));
        data.insert(std::make_pair(0x12031,"CUNEIFORM SIGN AN PLUS NAGA SQUARED"));
        data.insert(std::make_pair(0x12032,"CUNEIFORM SIGN ANSHE"));
        data.insert(std::make_pair(0x12033,"CUNEIFORM SIGN APIN"));
        data.insert(std::make_pair(0x12034,"CUNEIFORM SIGN ARAD"));
        data.insert(std::make_pair(0x12035,"CUNEIFORM SIGN ARAD TIMES KUR"));
        data.insert(std::make_pair(0x12036,"CUNEIFORM SIGN ARKAB"));
        data.insert(std::make_pair(0x12037,"CUNEIFORM SIGN ASAL2"));
        data.insert(std::make_pair(0x12038,"CUNEIFORM SIGN ASH"));
        data.insert(std::make_pair(0x12039,"CUNEIFORM SIGN ASH ZIDA TENU"));
        data.insert(std::make_pair(0x1203a,"CUNEIFORM SIGN ASH KABA TENU"));
        data.insert(std::make_pair(0x1203b,"CUNEIFORM SIGN ASH OVER ASH TUG2 OVER TUG2 TUG2 OVER TUG2 PAP"));
        data.insert(std::make_pair(0x1203c,"CUNEIFORM SIGN ASH OVER ASH OVER ASH"));
        data.insert(std::make_pair(0x1203d,"CUNEIFORM SIGN ASH OVER ASH OVER ASH CROSSING ASH OVER ASH OVER ASH"));
        data.insert(std::make_pair(0x1203e,"CUNEIFORM SIGN ASH2"));
        data.insert(std::make_pair(0x1203f,"CUNEIFORM SIGN ASHGAB"));
        data.insert(std::make_pair(0x12040,"CUNEIFORM SIGN BA"));
        data.insert(std::make_pair(0x12041,"CUNEIFORM SIGN BAD"));
        data.insert(std::make_pair(0x12042,"CUNEIFORM SIGN BAG3"));
        data.insert(std::make_pair(0x12043,"CUNEIFORM SIGN BAHAR2"));
        data.insert(std::make_pair(0x12044,"CUNEIFORM SIGN BAL"));
        data.insert(std::make_pair(0x12045,"CUNEIFORM SIGN BAL OVER BAL"));
        data.insert(std::make_pair(0x12046,"CUNEIFORM SIGN BALAG"));
        data.insert(std::make_pair(0x12047,"CUNEIFORM SIGN BAR"));
        data.insert(std::make_pair(0x12048,"CUNEIFORM SIGN BARA2"));
        data.insert(std::make_pair(0x12049,"CUNEIFORM SIGN BI"));
        data.insert(std::make_pair(0x1204a,"CUNEIFORM SIGN BI TIMES A"));
        data.insert(std::make_pair(0x1204b,"CUNEIFORM SIGN BI TIMES GAR"));
        data.insert(std::make_pair(0x1204c,"CUNEIFORM SIGN BI TIMES IGI GUNU"));
        data.insert(std::make_pair(0x1204d,"CUNEIFORM SIGN BU"));
        data.insert(std::make_pair(0x1204e,"CUNEIFORM SIGN BU OVER BU AB"));
        data.insert(std::make_pair(0x1204f,"CUNEIFORM SIGN BU OVER BU UN"));
        data.insert(std::make_pair(0x12050,"CUNEIFORM SIGN BU CROSSING BU"));
        data.insert(std::make_pair(0x12051,"CUNEIFORM SIGN BULUG"));
        data.insert(std::make_pair(0x12052,"CUNEIFORM SIGN BULUG OVER BULUG"));
        data.insert(std::make_pair(0x12053,"CUNEIFORM SIGN BUR"));
        data.insert(std::make_pair(0x12054,"CUNEIFORM SIGN BUR2"));
        data.insert(std::make_pair(0x12055,"CUNEIFORM SIGN DA"));
        data.insert(std::make_pair(0x12056,"CUNEIFORM SIGN DAG"));
        data.insert(std::make_pair(0x12057,"CUNEIFORM SIGN DAG KISIM5 TIMES A PLUS MASH"));
        data.insert(std::make_pair(0x12058,"CUNEIFORM SIGN DAG KISIM5 TIMES AMAR"));
        data.insert(std::make_pair(0x12059,"CUNEIFORM SIGN DAG KISIM5 TIMES BALAG"));
        data.insert(std::make_pair(0x1205a,"CUNEIFORM SIGN DAG KISIM5 TIMES BI"));
        data.insert(std::make_pair(0x1205b,"CUNEIFORM SIGN DAG KISIM5 TIMES GA"));
        data.insert(std::make_pair(0x1205c,"CUNEIFORM SIGN DAG KISIM5 TIMES GA PLUS MASH"));
        data.insert(std::make_pair(0x1205d,"CUNEIFORM SIGN DAG KISIM5 TIMES GI"));
        data.insert(std::make_pair(0x1205e,"CUNEIFORM SIGN DAG KISIM5 TIMES GIR2"));
        data.insert(std::make_pair(0x1205f,"CUNEIFORM SIGN DAG KISIM5 TIMES GUD"));
        data.insert(std::make_pair(0x12060,"CUNEIFORM SIGN DAG KISIM5 TIMES HA"));
        data.insert(std::make_pair(0x12061,"CUNEIFORM SIGN DAG KISIM5 TIMES IR"));
        data.insert(std::make_pair(0x12062,"CUNEIFORM SIGN DAG KISIM5 TIMES IR PLUS LU"));
        data.insert(std::make_pair(0x12063,"CUNEIFORM SIGN DAG KISIM5 TIMES KAK"));
        data.insert(std::make_pair(0x12064,"CUNEIFORM SIGN DAG KISIM5 TIMES LA"));
        data.insert(std::make_pair(0x12065,"CUNEIFORM SIGN DAG KISIM5 TIMES LU"));
        data.insert(std::make_pair(0x12066,"CUNEIFORM SIGN DAG KISIM5 TIMES LU PLUS MASH2"));
        data.insert(std::make_pair(0x12067,"CUNEIFORM SIGN DAG KISIM5 TIMES LUM"));
        data.insert(std::make_pair(0x12068,"CUNEIFORM SIGN DAG KISIM5 TIMES NE"));
        data.insert(std::make_pair(0x12069,"CUNEIFORM SIGN DAG KISIM5 TIMES PAP PLUS PAP"));
        data.insert(std::make_pair(0x1206a,"CUNEIFORM SIGN DAG KISIM5 TIMES SI"));
        data.insert(std::make_pair(0x1206b,"CUNEIFORM SIGN DAG KISIM5 TIMES TAK4"));
        data.insert(std::make_pair(0x1206c,"CUNEIFORM SIGN DAG KISIM5 TIMES U2 PLUS GIR2"));
        data.insert(std::make_pair(0x1206d,"CUNEIFORM SIGN DAG KISIM5 TIMES USH"));
        data.insert(std::make_pair(0x1206e,"CUNEIFORM SIGN DAM"));
        data.insert(std::make_pair(0x1206f,"CUNEIFORM SIGN DAR"));
        data.insert(std::make_pair(0x12070,"CUNEIFORM SIGN DARA3"));
        data.insert(std::make_pair(0x12071,"CUNEIFORM SIGN DARA4"));
        data.insert(std::make_pair(0x12072,"CUNEIFORM SIGN DI"));
        data.insert(std::make_pair(0x12073,"CUNEIFORM SIGN DIB"));
        data.insert(std::make_pair(0x12074,"CUNEIFORM SIGN DIM"));
        data.insert(std::make_pair(0x12075,"CUNEIFORM SIGN DIM TIMES SHE"));
        data.insert(std::make_pair(0x12076,"CUNEIFORM SIGN DIM2"));
        data.insert(std::make_pair(0x12077,"CUNEIFORM SIGN DIN"));
        data.insert(std::make_pair(0x12078,"CUNEIFORM SIGN DIN KASKAL U GUNU DISH"));
        data.insert(std::make_pair(0x12079,"CUNEIFORM SIGN DISH"));
        data.insert(std::make_pair(0x1207a,"CUNEIFORM SIGN DU"));
        data.insert(std::make_pair(0x1207b,"CUNEIFORM SIGN DU OVER DU"));
        data.insert(std::make_pair(0x1207c,"CUNEIFORM SIGN DU GUNU"));
        data.insert(std::make_pair(0x1207d,"CUNEIFORM SIGN DU SHESHIG"));
        data.insert(std::make_pair(0x1207e,"CUNEIFORM SIGN DUB"));
        data.insert(std::make_pair(0x1207f,"CUNEIFORM SIGN DUB TIMES ESH2"));
        data.insert(std::make_pair(0x12080,"CUNEIFORM SIGN DUB2"));
        data.insert(std::make_pair(0x12081,"CUNEIFORM SIGN DUG"));
        data.insert(std::make_pair(0x12082,"CUNEIFORM SIGN DUGUD"));
        data.insert(std::make_pair(0x12083,"CUNEIFORM SIGN DUH"));
        data.insert(std::make_pair(0x12084,"CUNEIFORM SIGN DUN"));
        data.insert(std::make_pair(0x12085,"CUNEIFORM SIGN DUN3"));
        data.insert(std::make_pair(0x12086,"CUNEIFORM SIGN DUN3 GUNU"));
        data.insert(std::make_pair(0x12087,"CUNEIFORM SIGN DUN3 GUNU GUNU"));
        data.insert(std::make_pair(0x12088,"CUNEIFORM SIGN DUN4"));
        data.insert(std::make_pair(0x12089,"CUNEIFORM SIGN DUR2"));
        data.insert(std::make_pair(0x1208a,"CUNEIFORM SIGN E"));
        data.insert(std::make_pair(0x1208b,"CUNEIFORM SIGN E TIMES PAP"));
        data.insert(std::make_pair(0x1208c,"CUNEIFORM SIGN E OVER E NUN OVER NUN"));
        data.insert(std::make_pair(0x1208d,"CUNEIFORM SIGN E2"));
        data.insert(std::make_pair(0x1208e,"CUNEIFORM SIGN E2 TIMES A PLUS HA PLUS DA"));
        data.insert(std::make_pair(0x1208f,"CUNEIFORM SIGN E2 TIMES GAR"));
        data.insert(std::make_pair(0x12090,"CUNEIFORM SIGN E2 TIMES MI"));
        data.insert(std::make_pair(0x12091,"CUNEIFORM SIGN E2 TIMES SAL"));
        data.insert(std::make_pair(0x12092,"CUNEIFORM SIGN E2 TIMES SHE"));
        data.insert(std::make_pair(0x12093,"CUNEIFORM SIGN E2 TIMES U"));
        data.insert(std::make_pair(0x12094,"CUNEIFORM SIGN EDIN"));
        data.insert(std::make_pair(0x12095,"CUNEIFORM SIGN EGIR"));
        data.insert(std::make_pair(0x12096,"CUNEIFORM SIGN EL"));
        data.insert(std::make_pair(0x12097,"CUNEIFORM SIGN EN"));
        data.insert(std::make_pair(0x12098,"CUNEIFORM SIGN EN TIMES GAN2"));
        data.insert(std::make_pair(0x12099,"CUNEIFORM SIGN EN TIMES GAN2 TENU"));
        data.insert(std::make_pair(0x1209a,"CUNEIFORM SIGN EN TIMES ME"));
        data.insert(std::make_pair(0x1209b,"CUNEIFORM SIGN EN CROSSING EN"));
        data.insert(std::make_pair(0x1209c,"CUNEIFORM SIGN EN OPPOSING EN"));
        data.insert(std::make_pair(0x1209d,"CUNEIFORM SIGN EN SQUARED"));
        data.insert(std::make_pair(0x1209e,"CUNEIFORM SIGN EREN"));
        data.insert(std::make_pair(0x1209f,"CUNEIFORM SIGN ERIN2"));
        data.insert(std::make_pair(0x120a0,"CUNEIFORM SIGN ESH2"));
        data.insert(std::make_pair(0x120a1,"CUNEIFORM SIGN EZEN"));
        data.insert(std::make_pair(0x120a2,"CUNEIFORM SIGN EZEN TIMES A"));
        data.insert(std::make_pair(0x120a3,"CUNEIFORM SIGN EZEN TIMES A PLUS LAL"));
        data.insert(std::make_pair(0x120a4,"CUNEIFORM SIGN EZEN TIMES A PLUS LAL TIMES LAL"));
        data.insert(std::make_pair(0x120a5,"CUNEIFORM SIGN EZEN TIMES AN"));
        data.insert(std::make_pair(0x120a6,"CUNEIFORM SIGN EZEN TIMES BAD"));
        data.insert(std::make_pair(0x120a7,"CUNEIFORM SIGN EZEN TIMES DUN3 GUNU"));
        data.insert(std::make_pair(0x120a8,"CUNEIFORM SIGN EZEN TIMES DUN3 GUNU GUNU"));
        data.insert(std::make_pair(0x120a9,"CUNEIFORM SIGN EZEN TIMES HA"));
        data.insert(std::make_pair(0x120aa,"CUNEIFORM SIGN EZEN TIMES HA GUNU"));
        data.insert(std::make_pair(0x120ab,"CUNEIFORM SIGN EZEN TIMES IGI GUNU"));
        data.insert(std::make_pair(0x120ac,"CUNEIFORM SIGN EZEN TIMES KASKAL"));
        data.insert(std::make_pair(0x120ad,"CUNEIFORM SIGN EZEN TIMES KASKAL SQUARED"));
        data.insert(std::make_pair(0x120ae,"CUNEIFORM SIGN EZEN TIMES KU3"));
        data.insert(std::make_pair(0x120af,"CUNEIFORM SIGN EZEN TIMES LA"));
        data.insert(std::make_pair(0x120b0,"CUNEIFORM SIGN EZEN TIMES LAL TIMES LAL"));
        data.insert(std::make_pair(0x120b1,"CUNEIFORM SIGN EZEN TIMES LI"));
        data.insert(std::make_pair(0x120b2,"CUNEIFORM SIGN EZEN TIMES LU"));
        data.insert(std::make_pair(0x120b3,"CUNEIFORM SIGN EZEN TIMES U2"));
        data.insert(std::make_pair(0x120b4,"CUNEIFORM SIGN EZEN TIMES UD"));
        data.insert(std::make_pair(0x120b5,"CUNEIFORM SIGN GA"));
        data.insert(std::make_pair(0x120b6,"CUNEIFORM SIGN GA GUNU"));
        data.insert(std::make_pair(0x120b7,"CUNEIFORM SIGN GA2"));
        data.insert(std::make_pair(0x120b8,"CUNEIFORM SIGN GA2 TIMES A PLUS DA PLUS HA"));
        data.insert(std::make_pair(0x120b9,"CUNEIFORM SIGN GA2 TIMES A PLUS HA"));
        data.insert(std::make_pair(0x120ba,"CUNEIFORM SIGN GA2 TIMES A PLUS IGI"));
        data.insert(std::make_pair(0x120bb,"CUNEIFORM SIGN GA2 TIMES AB2 TENU PLUS TAB"));
        data.insert(std::make_pair(0x120bc,"CUNEIFORM SIGN GA2 TIMES AN"));
        data.insert(std::make_pair(0x120bd,"CUNEIFORM SIGN GA2 TIMES ASH"));
        data.insert(std::make_pair(0x120be,"CUNEIFORM SIGN GA2 TIMES ASH2 PLUS GAL"));
        data.insert(std::make_pair(0x120bf,"CUNEIFORM SIGN GA2 TIMES BAD"));
        data.insert(std::make_pair(0x120c0,"CUNEIFORM SIGN GA2 TIMES BAR PLUS RA"));
        data.insert(std::make_pair(0x120c1,"CUNEIFORM SIGN GA2 TIMES BUR"));
        data.insert(std::make_pair(0x120c2,"CUNEIFORM SIGN GA2 TIMES BUR PLUS RA"));
        data.insert(std::make_pair(0x120c3,"CUNEIFORM SIGN GA2 TIMES DA"));
        data.insert(std::make_pair(0x120c4,"CUNEIFORM SIGN GA2 TIMES DI"));
        data.insert(std::make_pair(0x120c5,"CUNEIFORM SIGN GA2 TIMES DIM TIMES SHE"));
        data.insert(std::make_pair(0x120c6,"CUNEIFORM SIGN GA2 TIMES DUB"));
        data.insert(std::make_pair(0x120c7,"CUNEIFORM SIGN GA2 TIMES EL"));
        data.insert(std::make_pair(0x120c8,"CUNEIFORM SIGN GA2 TIMES EL PLUS LA"));
        data.insert(std::make_pair(0x120c9,"CUNEIFORM SIGN GA2 TIMES EN"));
        data.insert(std::make_pair(0x120ca,"CUNEIFORM SIGN GA2 TIMES EN TIMES GAN2 TENU"));
        data.insert(std::make_pair(0x120cb,"CUNEIFORM SIGN GA2 TIMES GAN2 TENU"));
        data.insert(std::make_pair(0x120cc,"CUNEIFORM SIGN GA2 TIMES GAR"));
        data.insert(std::make_pair(0x120cd,"CUNEIFORM SIGN GA2 TIMES GI"));
        data.insert(std::make_pair(0x120ce,"CUNEIFORM SIGN GA2 TIMES GI4"));
        data.insert(std::make_pair(0x120cf,"CUNEIFORM SIGN GA2 TIMES GI4 PLUS A"));
        data.insert(std::make_pair(0x120d0,"CUNEIFORM SIGN GA2 TIMES GIR2 PLUS SU"));
        data.insert(std::make_pair(0x120d1,"CUNEIFORM SIGN GA2 TIMES HA PLUS LU PLUS ESH2"));
        data.insert(std::make_pair(0x120d2,"CUNEIFORM SIGN GA2 TIMES HAL"));
        data.insert(std::make_pair(0x120d3,"CUNEIFORM SIGN GA2 TIMES HAL PLUS LA"));
        data.insert(std::make_pair(0x120d4,"CUNEIFORM SIGN GA2 TIMES HI PLUS LI"));
        data.insert(std::make_pair(0x120d5,"CUNEIFORM SIGN GA2 TIMES HUB2"));
        data.insert(std::make_pair(0x120d6,"CUNEIFORM SIGN GA2 TIMES IGI GUNU"));
        data.insert(std::make_pair(0x120d7,"CUNEIFORM SIGN GA2 TIMES ISH PLUS HU PLUS ASH"));
        data.insert(std::make_pair(0x120d8,"CUNEIFORM SIGN GA2 TIMES KAK"));
        data.insert(std::make_pair(0x120d9,"CUNEIFORM SIGN GA2 TIMES KASKAL"));
        data.insert(std::make_pair(0x120da,"CUNEIFORM SIGN GA2 TIMES KID"));
        data.insert(std::make_pair(0x120db,"CUNEIFORM SIGN GA2 TIMES KID PLUS LAL"));
        data.insert(std::make_pair(0x120dc,"CUNEIFORM SIGN GA2 TIMES KU3 PLUS AN"));
        data.insert(std::make_pair(0x120dd,"CUNEIFORM SIGN GA2 TIMES LA"));
        data.insert(std::make_pair(0x120de,"CUNEIFORM SIGN GA2 TIMES ME PLUS EN"));
        data.insert(std::make_pair(0x120df,"CUNEIFORM SIGN GA2 TIMES MI"));
        data.insert(std::make_pair(0x120e0,"CUNEIFORM SIGN GA2 TIMES NUN"));
        data.insert(std::make_pair(0x120e1,"CUNEIFORM SIGN GA2 TIMES NUN OVER NUN"));
        data.insert(std::make_pair(0x120e2,"CUNEIFORM SIGN GA2 TIMES PA"));
        data.insert(std::make_pair(0x120e3,"CUNEIFORM SIGN GA2 TIMES SAL"));
        data.insert(std::make_pair(0x120e4,"CUNEIFORM SIGN GA2 TIMES SAR"));
        data.insert(std::make_pair(0x120e5,"CUNEIFORM SIGN GA2 TIMES SHE"));
        data.insert(std::make_pair(0x120e6,"CUNEIFORM SIGN GA2 TIMES SHE PLUS TUR"));
        data.insert(std::make_pair(0x120e7,"CUNEIFORM SIGN GA2 TIMES SHID"));
        data.insert(std::make_pair(0x120e8,"CUNEIFORM SIGN GA2 TIMES SUM"));
        data.insert(std::make_pair(0x120e9,"CUNEIFORM SIGN GA2 TIMES TAK4"));
        data.insert(std::make_pair(0x120ea,"CUNEIFORM SIGN GA2 TIMES U"));
        data.insert(std::make_pair(0x120eb,"CUNEIFORM SIGN GA2 TIMES UD"));
        data.insert(std::make_pair(0x120ec,"CUNEIFORM SIGN GA2 TIMES UD PLUS DU"));
        data.insert(std::make_pair(0x120ed,"CUNEIFORM SIGN GA2 OVER GA2"));
        data.insert(std::make_pair(0x120ee,"CUNEIFORM SIGN GABA"));
        data.insert(std::make_pair(0x120ef,"CUNEIFORM SIGN GABA CROSSING GABA"));
        data.insert(std::make_pair(0x120f0,"CUNEIFORM SIGN GAD"));
        data.insert(std::make_pair(0x120f1,"CUNEIFORM SIGN GAD OVER GAD GAR OVER GAR"));
        data.insert(std::make_pair(0x120f2,"CUNEIFORM SIGN GAL"));
        data.insert(std::make_pair(0x120f3,"CUNEIFORM SIGN GAL GAD OVER GAD GAR OVER GAR"));
        data.insert(std::make_pair(0x120f4,"CUNEIFORM SIGN GALAM"));
        data.insert(std::make_pair(0x120f5,"CUNEIFORM SIGN GAM"));
        data.insert(std::make_pair(0x120f6,"CUNEIFORM SIGN GAN"));
        data.insert(std::make_pair(0x120f7,"CUNEIFORM SIGN GAN2"));
        data.insert(std::make_pair(0x120f8,"CUNEIFORM SIGN GAN2 TENU"));
        data.insert(std::make_pair(0x120f9,"CUNEIFORM SIGN GAN2 OVER GAN2"));
        data.insert(std::make_pair(0x120fa,"CUNEIFORM SIGN GAN2 CROSSING GAN2"));
        data.insert(std::make_pair(0x120fb,"CUNEIFORM SIGN GAR"));
        data.insert(std::make_pair(0x120fc,"CUNEIFORM SIGN GAR3"));
        data.insert(std::make_pair(0x120fd,"CUNEIFORM SIGN GASHAN"));
        data.insert(std::make_pair(0x120fe,"CUNEIFORM SIGN GESHTIN"));
        data.insert(std::make_pair(0x120ff,"CUNEIFORM SIGN GESHTIN TIMES KUR"));
        data.insert(std::make_pair(0x12100,"CUNEIFORM SIGN GI"));
        data.insert(std::make_pair(0x12101,"CUNEIFORM SIGN GI TIMES E"));
        data.insert(std::make_pair(0x12102,"CUNEIFORM SIGN GI TIMES U"));
        data.insert(std::make_pair(0x12103,"CUNEIFORM SIGN GI CROSSING GI"));
        data.insert(std::make_pair(0x12104,"CUNEIFORM SIGN GI4"));
        data.insert(std::make_pair(0x12105,"CUNEIFORM SIGN GI4 OVER GI4"));
        data.insert(std::make_pair(0x12106,"CUNEIFORM SIGN GI4 CROSSING GI4"));
        data.insert(std::make_pair(0x12107,"CUNEIFORM SIGN GIDIM"));
        data.insert(std::make_pair(0x12108,"CUNEIFORM SIGN GIR2"));
        data.insert(std::make_pair(0x12109,"CUNEIFORM SIGN GIR2 GUNU"));
        data.insert(std::make_pair(0x1210a,"CUNEIFORM SIGN GIR3"));
        data.insert(std::make_pair(0x1210b,"CUNEIFORM SIGN GIR3 TIMES A PLUS IGI"));
        data.insert(std::make_pair(0x1210c,"CUNEIFORM SIGN GIR3 TIMES GAN2 TENU"));
        data.insert(std::make_pair(0x1210d,"CUNEIFORM SIGN GIR3 TIMES IGI"));
        data.insert(std::make_pair(0x1210e,"CUNEIFORM SIGN GIR3 TIMES LU PLUS IGI"));
        data.insert(std::make_pair(0x1210f,"CUNEIFORM SIGN GIR3 TIMES PA"));
        data.insert(std::make_pair(0x12110,"CUNEIFORM SIGN GISAL"));
        data.insert(std::make_pair(0x12111,"CUNEIFORM SIGN GISH"));
        data.insert(std::make_pair(0x12112,"CUNEIFORM SIGN GISH CROSSING GISH"));
        data.insert(std::make_pair(0x12113,"CUNEIFORM SIGN GISH TIMES BAD"));
        data.insert(std::make_pair(0x12114,"CUNEIFORM SIGN GISH TIMES TAK4"));
        data.insert(std::make_pair(0x12115,"CUNEIFORM SIGN GISH TENU"));
        data.insert(std::make_pair(0x12116,"CUNEIFORM SIGN GU"));
        data.insert(std::make_pair(0x12117,"CUNEIFORM SIGN GU CROSSING GU"));
        data.insert(std::make_pair(0x12118,"CUNEIFORM SIGN GU2"));
        data.insert(std::make_pair(0x12119,"CUNEIFORM SIGN GU2 TIMES KAK"));
        data.insert(std::make_pair(0x1211a,"CUNEIFORM SIGN GU2 TIMES KAK TIMES IGI GUNU"));
        data.insert(std::make_pair(0x1211b,"CUNEIFORM SIGN GU2 TIMES NUN"));
        data.insert(std::make_pair(0x1211c,"CUNEIFORM SIGN GU2 TIMES SAL PLUS TUG2"));
        data.insert(std::make_pair(0x1211d,"CUNEIFORM SIGN GU2 GUNU"));
        data.insert(std::make_pair(0x1211e,"CUNEIFORM SIGN GUD"));
        data.insert(std::make_pair(0x1211f,"CUNEIFORM SIGN GUD TIMES A PLUS KUR"));
        data.insert(std::make_pair(0x12120,"CUNEIFORM SIGN GUD TIMES KUR"));
        data.insert(std::make_pair(0x12121,"CUNEIFORM SIGN GUD OVER GUD LUGAL"));
        data.insert(std::make_pair(0x12122,"CUNEIFORM SIGN GUL"));
        data.insert(std::make_pair(0x12123,"CUNEIFORM SIGN GUM"));
        data.insert(std::make_pair(0x12124,"CUNEIFORM SIGN GUM TIMES SHE"));
        data.insert(std::make_pair(0x12125,"CUNEIFORM SIGN GUR"));
        data.insert(std::make_pair(0x12126,"CUNEIFORM SIGN GUR7"));
        data.insert(std::make_pair(0x12127,"CUNEIFORM SIGN GURUN"));
        data.insert(std::make_pair(0x12128,"CUNEIFORM SIGN GURUSH"));
        data.insert(std::make_pair(0x12129,"CUNEIFORM SIGN HA"));
        data.insert(std::make_pair(0x1212a,"CUNEIFORM SIGN HA TENU"));
        data.insert(std::make_pair(0x1212b,"CUNEIFORM SIGN HA GUNU"));
        data.insert(std::make_pair(0x1212c,"CUNEIFORM SIGN HAL"));
        data.insert(std::make_pair(0x1212d,"CUNEIFORM SIGN HI"));
        data.insert(std::make_pair(0x1212e,"CUNEIFORM SIGN HI TIMES ASH"));
        data.insert(std::make_pair(0x1212f,"CUNEIFORM SIGN HI TIMES ASH2"));
        data.insert(std::make_pair(0x12130,"CUNEIFORM SIGN HI TIMES BAD"));
        data.insert(std::make_pair(0x12131,"CUNEIFORM SIGN HI TIMES DISH"));
        data.insert(std::make_pair(0x12132,"CUNEIFORM SIGN HI TIMES GAD"));
        data.insert(std::make_pair(0x12133,"CUNEIFORM SIGN HI TIMES KIN"));
        data.insert(std::make_pair(0x12134,"CUNEIFORM SIGN HI TIMES NUN"));
        data.insert(std::make_pair(0x12135,"CUNEIFORM SIGN HI TIMES SHE"));
        data.insert(std::make_pair(0x12136,"CUNEIFORM SIGN HI TIMES U"));
        data.insert(std::make_pair(0x12137,"CUNEIFORM SIGN HU"));
        data.insert(std::make_pair(0x12138,"CUNEIFORM SIGN HUB2"));
        data.insert(std::make_pair(0x12139,"CUNEIFORM SIGN HUB2 TIMES AN"));
        data.insert(std::make_pair(0x1213a,"CUNEIFORM SIGN HUB2 TIMES HAL"));
        data.insert(std::make_pair(0x1213b,"CUNEIFORM SIGN HUB2 TIMES KASKAL"));
        data.insert(std::make_pair(0x1213c,"CUNEIFORM SIGN HUB2 TIMES LISH"));
        data.insert(std::make_pair(0x1213d,"CUNEIFORM SIGN HUB2 TIMES UD"));
        data.insert(std::make_pair(0x1213e,"CUNEIFORM SIGN HUL2"));
        data.insert(std::make_pair(0x1213f,"CUNEIFORM SIGN I"));
        data.insert(std::make_pair(0x12140,"CUNEIFORM SIGN I A"));
        data.insert(std::make_pair(0x12141,"CUNEIFORM SIGN IB"));
        data.insert(std::make_pair(0x12142,"CUNEIFORM SIGN IDIM"));
        data.insert(std::make_pair(0x12143,"CUNEIFORM SIGN IDIM OVER IDIM BUR"));
        data.insert(std::make_pair(0x12144,"CUNEIFORM SIGN IDIM OVER IDIM SQUARED"));
        data.insert(std::make_pair(0x12145,"CUNEIFORM SIGN IG"));
        data.insert(std::make_pair(0x12146,"CUNEIFORM SIGN IGI"));
        data.insert(std::make_pair(0x12147,"CUNEIFORM SIGN IGI DIB"));
        data.insert(std::make_pair(0x12148,"CUNEIFORM SIGN IGI RI"));
        data.insert(std::make_pair(0x12149,"CUNEIFORM SIGN IGI OVER IGI SHIR OVER SHIR UD OVER UD"));
        data.insert(std::make_pair(0x1214a,"CUNEIFORM SIGN IGI GUNU"));
        data.insert(std::make_pair(0x1214b,"CUNEIFORM SIGN IL"));
        data.insert(std::make_pair(0x1214c,"CUNEIFORM SIGN IL TIMES GAN2 TENU"));
        data.insert(std::make_pair(0x1214d,"CUNEIFORM SIGN IL2"));
        data.insert(std::make_pair(0x1214e,"CUNEIFORM SIGN IM"));
        data.insert(std::make_pair(0x1214f,"CUNEIFORM SIGN IM TIMES TAK4"));
        data.insert(std::make_pair(0x12150,"CUNEIFORM SIGN IM CROSSING IM"));
        data.insert(std::make_pair(0x12151,"CUNEIFORM SIGN IM OPPOSING IM"));
        data.insert(std::make_pair(0x12152,"CUNEIFORM SIGN IM SQUARED"));
        data.insert(std::make_pair(0x12153,"CUNEIFORM SIGN IMIN"));
        data.insert(std::make_pair(0x12154,"CUNEIFORM SIGN IN"));
        data.insert(std::make_pair(0x12155,"CUNEIFORM SIGN IR"));
        data.insert(std::make_pair(0x12156,"CUNEIFORM SIGN ISH"));
        data.insert(std::make_pair(0x12157,"CUNEIFORM SIGN KA"));
        data.insert(std::make_pair(0x12158,"CUNEIFORM SIGN KA TIMES A"));
        data.insert(std::make_pair(0x12159,"CUNEIFORM SIGN KA TIMES AD"));
        data.insert(std::make_pair(0x1215a,"CUNEIFORM SIGN KA TIMES AD PLUS KU3"));
        data.insert(std::make_pair(0x1215b,"CUNEIFORM SIGN KA TIMES ASH2"));
        data.insert(std::make_pair(0x1215c,"CUNEIFORM SIGN KA TIMES BAD"));
        data.insert(std::make_pair(0x1215d,"CUNEIFORM SIGN KA TIMES BALAG"));
        data.insert(std::make_pair(0x1215e,"CUNEIFORM SIGN KA TIMES BAR"));
        data.insert(std::make_pair(0x1215f,"CUNEIFORM SIGN KA TIMES BI"));
        data.insert(std::make_pair(0x12160,"CUNEIFORM SIGN KA TIMES ERIN2"));
        data.insert(std::make_pair(0x12161,"CUNEIFORM SIGN KA TIMES ESH2"));
        data.insert(std::make_pair(0x12162,"CUNEIFORM SIGN KA TIMES GA"));
        data.insert(std::make_pair(0x12163,"CUNEIFORM SIGN KA TIMES GAL"));
        data.insert(std::make_pair(0x12164,"CUNEIFORM SIGN KA TIMES GAN2 TENU"));
        data.insert(std::make_pair(0x12165,"CUNEIFORM SIGN KA TIMES GAR"));
        data.insert(std::make_pair(0x12166,"CUNEIFORM SIGN KA TIMES GAR PLUS SHA3 PLUS A"));
        data.insert(std::make_pair(0x12167,"CUNEIFORM SIGN KA TIMES GI"));
        data.insert(std::make_pair(0x12168,"CUNEIFORM SIGN KA TIMES GIR2"));
        data.insert(std::make_pair(0x12169,"CUNEIFORM SIGN KA TIMES GISH PLUS SAR"));
        data.insert(std::make_pair(0x1216a,"CUNEIFORM SIGN KA TIMES GISH CROSSING GISH"));
        data.insert(std::make_pair(0x1216b,"CUNEIFORM SIGN KA TIMES GU"));
        data.insert(std::make_pair(0x1216c,"CUNEIFORM SIGN KA TIMES GUR7"));
        data.insert(std::make_pair(0x1216d,"CUNEIFORM SIGN KA TIMES IGI"));
        data.insert(std::make_pair(0x1216e,"CUNEIFORM SIGN KA TIMES IM"));
        data.insert(std::make_pair(0x1216f,"CUNEIFORM SIGN KA TIMES KAK"));
        data.insert(std::make_pair(0x12170,"CUNEIFORM SIGN KA TIMES KI"));
        data.insert(std::make_pair(0x12171,"CUNEIFORM SIGN KA TIMES KID"));
        data.insert(std::make_pair(0x12172,"CUNEIFORM SIGN KA TIMES LI"));
        data.insert(std::make_pair(0x12173,"CUNEIFORM SIGN KA TIMES LU"));
        data.insert(std::make_pair(0x12174,"CUNEIFORM SIGN KA TIMES ME"));
        data.insert(std::make_pair(0x12175,"CUNEIFORM SIGN KA TIMES ME PLUS DU"));
        data.insert(std::make_pair(0x12176,"CUNEIFORM SIGN KA TIMES ME PLUS GI"));
        data.insert(std::make_pair(0x12177,"CUNEIFORM SIGN KA TIMES ME PLUS TE"));
        data.insert(std::make_pair(0x12178,"CUNEIFORM SIGN KA TIMES MI"));
        data.insert(std::make_pair(0x12179,"CUNEIFORM SIGN KA TIMES MI PLUS NUNUZ"));
        data.insert(std::make_pair(0x1217a,"CUNEIFORM SIGN KA TIMES NE"));
        data.insert(std::make_pair(0x1217b,"CUNEIFORM SIGN KA TIMES NUN"));
        data.insert(std::make_pair(0x1217c,"CUNEIFORM SIGN KA TIMES PI"));
        data.insert(std::make_pair(0x1217d,"CUNEIFORM SIGN KA TIMES RU"));
        data.insert(std::make_pair(0x1217e,"CUNEIFORM SIGN KA TIMES SA"));
        data.insert(std::make_pair(0x1217f,"CUNEIFORM SIGN KA TIMES SAR"));
        data.insert(std::make_pair(0x12180,"CUNEIFORM SIGN KA TIMES SHA"));
        data.insert(std::make_pair(0x12181,"CUNEIFORM SIGN KA TIMES SHE"));
        data.insert(std::make_pair(0x12182,"CUNEIFORM SIGN KA TIMES SHID"));
        data.insert(std::make_pair(0x12183,"CUNEIFORM SIGN KA TIMES SHU"));
        data.insert(std::make_pair(0x12184,"CUNEIFORM SIGN KA TIMES SIG"));
        data.insert(std::make_pair(0x12185,"CUNEIFORM SIGN KA TIMES SUHUR"));
        data.insert(std::make_pair(0x12186,"CUNEIFORM SIGN KA TIMES TAR"));
        data.insert(std::make_pair(0x12187,"CUNEIFORM SIGN KA TIMES U"));
        data.insert(std::make_pair(0x12188,"CUNEIFORM SIGN KA TIMES U2"));
        data.insert(std::make_pair(0x12189,"CUNEIFORM SIGN KA TIMES UD"));
        data.insert(std::make_pair(0x1218a,"CUNEIFORM SIGN KA TIMES UMUM TIMES PA"));
        data.insert(std::make_pair(0x1218b,"CUNEIFORM SIGN KA TIMES USH"));
        data.insert(std::make_pair(0x1218c,"CUNEIFORM SIGN KA TIMES ZI"));
        data.insert(std::make_pair(0x1218d,"CUNEIFORM SIGN KA2"));
        data.insert(std::make_pair(0x1218e,"CUNEIFORM SIGN KA2 CROSSING KA2"));
        data.insert(std::make_pair(0x1218f,"CUNEIFORM SIGN KAB"));
        data.insert(std::make_pair(0x12190,"CUNEIFORM SIGN KAD2"));
        data.insert(std::make_pair(0x12191,"CUNEIFORM SIGN KAD3"));
        data.insert(std::make_pair(0x12192,"CUNEIFORM SIGN KAD4"));
        data.insert(std::make_pair(0x12193,"CUNEIFORM SIGN KAD5"));
        data.insert(std::make_pair(0x12194,"CUNEIFORM SIGN KAD5 OVER KAD5"));
        data.insert(std::make_pair(0x12195,"CUNEIFORM SIGN KAK"));
        data.insert(std::make_pair(0x12196,"CUNEIFORM SIGN KAK TIMES IGI GUNU"));
        data.insert(std::make_pair(0x12197,"CUNEIFORM SIGN KAL"));
        data.insert(std::make_pair(0x12198,"CUNEIFORM SIGN KAL TIMES BAD"));
        data.insert(std::make_pair(0x12199,"CUNEIFORM SIGN KAL CROSSING KAL"));
        data.insert(std::make_pair(0x1219a,"CUNEIFORM SIGN KAM2"));
        data.insert(std::make_pair(0x1219b,"CUNEIFORM SIGN KAM4"));
        data.insert(std::make_pair(0x1219c,"CUNEIFORM SIGN KASKAL"));
        data.insert(std::make_pair(0x1219d,"CUNEIFORM SIGN KASKAL LAGAB TIMES U OVER LAGAB TIMES U"));
        data.insert(std::make_pair(0x1219e,"CUNEIFORM SIGN KASKAL OVER KASKAL LAGAB TIMES U OVER LAGAB TIMES U"));
        data.insert(std::make_pair(0x1219f,"CUNEIFORM SIGN KESH2"));
        data.insert(std::make_pair(0x121a0,"CUNEIFORM SIGN KI"));
        data.insert(std::make_pair(0x121a1,"CUNEIFORM SIGN KI TIMES BAD"));
        data.insert(std::make_pair(0x121a2,"CUNEIFORM SIGN KI TIMES U"));
        data.insert(std::make_pair(0x121a3,"CUNEIFORM SIGN KI TIMES UD"));
        data.insert(std::make_pair(0x121a4,"CUNEIFORM SIGN KID"));
        data.insert(std::make_pair(0x121a5,"CUNEIFORM SIGN KIN"));
        data.insert(std::make_pair(0x121a6,"CUNEIFORM SIGN KISAL"));
        data.insert(std::make_pair(0x121a7,"CUNEIFORM SIGN KISH"));
        data.insert(std::make_pair(0x121a8,"CUNEIFORM SIGN KISIM5"));
        data.insert(std::make_pair(0x121a9,"CUNEIFORM SIGN KISIM5 OVER KISIM5"));
        data.insert(std::make_pair(0x121aa,"CUNEIFORM SIGN KU"));
        data.insert(std::make_pair(0x121ab,"CUNEIFORM SIGN KU OVER HI TIMES ASH2 KU OVER HI TIMES ASH2"));
        data.insert(std::make_pair(0x121ac,"CUNEIFORM SIGN KU3"));
        data.insert(std::make_pair(0x121ad,"CUNEIFORM SIGN KU4"));
        data.insert(std::make_pair(0x121ae,"CUNEIFORM SIGN KU4 VARIANT FORM"));
        data.insert(std::make_pair(0x121af,"CUNEIFORM SIGN KU7"));
        data.insert(std::make_pair(0x121b0,"CUNEIFORM SIGN KUL"));
        data.insert(std::make_pair(0x121b1,"CUNEIFORM SIGN KUL GUNU"));
        data.insert(std::make_pair(0x121b2,"CUNEIFORM SIGN KUN"));
        data.insert(std::make_pair(0x121b3,"CUNEIFORM SIGN KUR"));
        data.insert(std::make_pair(0x121b4,"CUNEIFORM SIGN KUR OPPOSING KUR"));
        data.insert(std::make_pair(0x121b5,"CUNEIFORM SIGN KUSHU2"));
        data.insert(std::make_pair(0x121b6,"CUNEIFORM SIGN KWU318"));
        data.insert(std::make_pair(0x121b7,"CUNEIFORM SIGN LA"));
        data.insert(std::make_pair(0x121b8,"CUNEIFORM SIGN LAGAB"));
        data.insert(std::make_pair(0x121b9,"CUNEIFORM SIGN LAGAB TIMES A"));
        data.insert(std::make_pair(0x121ba,"CUNEIFORM SIGN LAGAB TIMES A PLUS DA PLUS HA"));
        data.insert(std::make_pair(0x121bb,"CUNEIFORM SIGN LAGAB TIMES A PLUS GAR"));
        data.insert(std::make_pair(0x121bc,"CUNEIFORM SIGN LAGAB TIMES A PLUS LAL"));
        data.insert(std::make_pair(0x121bd,"CUNEIFORM SIGN LAGAB TIMES AL"));
        data.insert(std::make_pair(0x121be,"CUNEIFORM SIGN LAGAB TIMES AN"));
        data.insert(std::make_pair(0x121bf,"CUNEIFORM SIGN LAGAB TIMES ASH ZIDA TENU"));
        data.insert(std::make_pair(0x121c0,"CUNEIFORM SIGN LAGAB TIMES BAD"));
        data.insert(std::make_pair(0x121c1,"CUNEIFORM SIGN LAGAB TIMES BI"));
        data.insert(std::make_pair(0x121c2,"CUNEIFORM SIGN LAGAB TIMES DAR"));
        data.insert(std::make_pair(0x121c3,"CUNEIFORM SIGN LAGAB TIMES EN"));
        data.insert(std::make_pair(0x121c4,"CUNEIFORM SIGN LAGAB TIMES GA"));
        data.insert(std::make_pair(0x121c5,"CUNEIFORM SIGN LAGAB TIMES GAR"));
        data.insert(std::make_pair(0x121c6,"CUNEIFORM SIGN LAGAB TIMES GUD"));
        data.insert(std::make_pair(0x121c7,"CUNEIFORM SIGN LAGAB TIMES GUD PLUS GUD"));
        data.insert(std::make_pair(0x121c8,"CUNEIFORM SIGN LAGAB TIMES HA"));
        data.insert(std::make_pair(0x121c9,"CUNEIFORM SIGN LAGAB TIMES HAL"));
        data.insert(std::make_pair(0x121ca,"CUNEIFORM SIGN LAGAB TIMES HI TIMES NUN"));
        data.insert(std::make_pair(0x121cb,"CUNEIFORM SIGN LAGAB TIMES IGI GUNU"));
        data.insert(std::make_pair(0x121cc,"CUNEIFORM SIGN LAGAB TIMES IM"));
        data.insert(std::make_pair(0x121cd,"CUNEIFORM SIGN LAGAB TIMES IM PLUS HA"));
        data.insert(std::make_pair(0x121ce,"CUNEIFORM SIGN LAGAB TIMES IM PLUS LU"));
        data.insert(std::make_pair(0x121cf,"CUNEIFORM SIGN LAGAB TIMES KI"));
        data.insert(std::make_pair(0x121d0,"CUNEIFORM SIGN LAGAB TIMES KIN"));
        data.insert(std::make_pair(0x121d1,"CUNEIFORM SIGN LAGAB TIMES KU3"));
        data.insert(std::make_pair(0x121d2,"CUNEIFORM SIGN LAGAB TIMES KUL"));
        data.insert(std::make_pair(0x121d3,"CUNEIFORM SIGN LAGAB TIMES KUL PLUS HI PLUS A"));
        data.insert(std::make_pair(0x121d4,"CUNEIFORM SIGN LAGAB TIMES LAGAB"));
        data.insert(std::make_pair(0x121d5,"CUNEIFORM SIGN LAGAB TIMES LISH"));
        data.insert(std::make_pair(0x121d6,"CUNEIFORM SIGN LAGAB TIMES LU"));
        data.insert(std::make_pair(0x121d7,"CUNEIFORM SIGN LAGAB TIMES LUL"));
        data.insert(std::make_pair(0x121d8,"CUNEIFORM SIGN LAGAB TIMES ME"));
        data.insert(std::make_pair(0x121d9,"CUNEIFORM SIGN LAGAB TIMES ME PLUS EN"));
        data.insert(std::make_pair(0x121da,"CUNEIFORM SIGN LAGAB TIMES MUSH"));
        data.insert(std::make_pair(0x121db,"CUNEIFORM SIGN LAGAB TIMES NE"));
        data.insert(std::make_pair(0x121dc,"CUNEIFORM SIGN LAGAB TIMES SHE PLUS SUM"));
        data.insert(std::make_pair(0x121dd,"CUNEIFORM SIGN LAGAB TIMES SHITA PLUS GISH PLUS ERIN2"));
        data.insert(std::make_pair(0x121de,"CUNEIFORM SIGN LAGAB TIMES SHITA PLUS GISH TENU"));
        data.insert(std::make_pair(0x121df,"CUNEIFORM SIGN LAGAB TIMES SHU2"));
        data.insert(std::make_pair(0x121e0,"CUNEIFORM SIGN LAGAB TIMES SHU2 PLUS SHU2"));
        data.insert(std::make_pair(0x121e1,"CUNEIFORM SIGN LAGAB TIMES SUM"));
        data.insert(std::make_pair(0x121e2,"CUNEIFORM SIGN LAGAB TIMES TAG"));
        data.insert(std::make_pair(0x121e3,"CUNEIFORM SIGN LAGAB TIMES TAK4"));
        data.insert(std::make_pair(0x121e4,"CUNEIFORM SIGN LAGAB TIMES TE PLUS A PLUS SU PLUS NA"));
        data.insert(std::make_pair(0x121e5,"CUNEIFORM SIGN LAGAB TIMES U"));
        data.insert(std::make_pair(0x121e6,"CUNEIFORM SIGN LAGAB TIMES U PLUS A"));
        data.insert(std::make_pair(0x121e7,"CUNEIFORM SIGN LAGAB TIMES U PLUS U PLUS U"));
        data.insert(std::make_pair(0x121e8,"CUNEIFORM SIGN LAGAB TIMES U2 PLUS ASH"));
        data.insert(std::make_pair(0x121e9,"CUNEIFORM SIGN LAGAB TIMES UD"));
        data.insert(std::make_pair(0x121ea,"CUNEIFORM SIGN LAGAB TIMES USH"));
        data.insert(std::make_pair(0x121eb,"CUNEIFORM SIGN LAGAB SQUARED"));
        data.insert(std::make_pair(0x121ec,"CUNEIFORM SIGN LAGAR"));
        data.insert(std::make_pair(0x121ed,"CUNEIFORM SIGN LAGAR TIMES SHE"));
        data.insert(std::make_pair(0x121ee,"CUNEIFORM SIGN LAGAR TIMES SHE PLUS SUM"));
        data.insert(std::make_pair(0x121ef,"CUNEIFORM SIGN LAGAR GUNU"));
        data.insert(std::make_pair(0x121f0,"CUNEIFORM SIGN LAGAR GUNU OVER LAGAR GUNU SHE"));
        data.insert(std::make_pair(0x121f1,"CUNEIFORM SIGN LAHSHU"));
        data.insert(std::make_pair(0x121f2,"CUNEIFORM SIGN LAL"));
        data.insert(std::make_pair(0x121f3,"CUNEIFORM SIGN LAL TIMES LAL"));
        data.insert(std::make_pair(0x121f4,"CUNEIFORM SIGN LAM"));
        data.insert(std::make_pair(0x121f5,"CUNEIFORM SIGN LAM TIMES KUR"));
        data.insert(std::make_pair(0x121f6,"CUNEIFORM SIGN LAM TIMES KUR PLUS RU"));
        data.insert(std::make_pair(0x121f7,"CUNEIFORM SIGN LI"));
        data.insert(std::make_pair(0x121f8,"CUNEIFORM SIGN LIL"));
        data.insert(std::make_pair(0x121f9,"CUNEIFORM SIGN LIMMU2"));
        data.insert(std::make_pair(0x121fa,"CUNEIFORM SIGN LISH"));
        data.insert(std::make_pair(0x121fb,"CUNEIFORM SIGN LU"));
        data.insert(std::make_pair(0x121fc,"CUNEIFORM SIGN LU TIMES BAD"));
        data.insert(std::make_pair(0x121fd,"CUNEIFORM SIGN LU2"));
        data.insert(std::make_pair(0x121fe,"CUNEIFORM SIGN LU2 TIMES AL"));
        data.insert(std::make_pair(0x121ff,"CUNEIFORM SIGN LU2 TIMES BAD"));
        data.insert(std::make_pair(0x12200,"CUNEIFORM SIGN LU2 TIMES ESH2"));
        data.insert(std::make_pair(0x12201,"CUNEIFORM SIGN LU2 TIMES ESH2 TENU"));
        data.insert(std::make_pair(0x12202,"CUNEIFORM SIGN LU2 TIMES GAN2 TENU"));
        data.insert(std::make_pair(0x12203,"CUNEIFORM SIGN LU2 TIMES HI TIMES BAD"));
        data.insert(std::make_pair(0x12204,"CUNEIFORM SIGN LU2 TIMES IM"));
        data.insert(std::make_pair(0x12205,"CUNEIFORM SIGN LU2 TIMES KAD2"));
        data.insert(std::make_pair(0x12206,"CUNEIFORM SIGN LU2 TIMES KAD3"));
        data.insert(std::make_pair(0x12207,"CUNEIFORM SIGN LU2 TIMES KAD3 PLUS ASH"));
        data.insert(std::make_pair(0x12208,"CUNEIFORM SIGN LU2 TIMES KI"));
        data.insert(std::make_pair(0x12209,"CUNEIFORM SIGN LU2 TIMES LA PLUS ASH"));
        data.insert(std::make_pair(0x1220a,"CUNEIFORM SIGN LU2 TIMES LAGAB"));
        data.insert(std::make_pair(0x1220b,"CUNEIFORM SIGN LU2 TIMES ME PLUS EN"));
        data.insert(std::make_pair(0x1220c,"CUNEIFORM SIGN LU2 TIMES NE"));
        data.insert(std::make_pair(0x1220d,"CUNEIFORM SIGN LU2 TIMES NU"));
        data.insert(std::make_pair(0x1220e,"CUNEIFORM SIGN LU2 TIMES SI PLUS ASH"));
        data.insert(std::make_pair(0x1220f,"CUNEIFORM SIGN LU2 TIMES SIK2 PLUS BU"));
        data.insert(std::make_pair(0x12210,"CUNEIFORM SIGN LU2 TIMES TUG2"));
        data.insert(std::make_pair(0x12211,"CUNEIFORM SIGN LU2 TENU"));
        data.insert(std::make_pair(0x12212,"CUNEIFORM SIGN LU2 CROSSING LU2"));
        data.insert(std::make_pair(0x12213,"CUNEIFORM SIGN LU2 OPPOSING LU2"));
        data.insert(std::make_pair(0x12214,"CUNEIFORM SIGN LU2 SQUARED"));
        data.insert(std::make_pair(0x12215,"CUNEIFORM SIGN LU2 SHESHIG"));
        data.insert(std::make_pair(0x12216,"CUNEIFORM SIGN LU3"));
        data.insert(std::make_pair(0x12217,"CUNEIFORM SIGN LUGAL"));
        data.insert(std::make_pair(0x12218,"CUNEIFORM SIGN LUGAL OVER LUGAL"));
        data.insert(std::make_pair(0x12219,"CUNEIFORM SIGN LUGAL OPPOSING LUGAL"));
        data.insert(std::make_pair(0x1221a,"CUNEIFORM SIGN LUGAL SHESHIG"));
        data.insert(std::make_pair(0x1221b,"CUNEIFORM SIGN LUH"));
        data.insert(std::make_pair(0x1221c,"CUNEIFORM SIGN LUL"));
        data.insert(std::make_pair(0x1221d,"CUNEIFORM SIGN LUM"));
        data.insert(std::make_pair(0x1221e,"CUNEIFORM SIGN LUM OVER LUM"));
        data.insert(std::make_pair(0x1221f,"CUNEIFORM SIGN LUM OVER LUM GAR OVER GAR"));
        data.insert(std::make_pair(0x12220,"CUNEIFORM SIGN MA"));
        data.insert(std::make_pair(0x12221,"CUNEIFORM SIGN MA TIMES TAK4"));
        data.insert(std::make_pair(0x12222,"CUNEIFORM SIGN MA GUNU"));
        data.insert(std::make_pair(0x12223,"CUNEIFORM SIGN MA2"));
        data.insert(std::make_pair(0x12224,"CUNEIFORM SIGN MAH"));
        data.insert(std::make_pair(0x12225,"CUNEIFORM SIGN MAR"));
        data.insert(std::make_pair(0x12226,"CUNEIFORM SIGN MASH"));
        data.insert(std::make_pair(0x12227,"CUNEIFORM SIGN MASH2"));
        data.insert(std::make_pair(0x12228,"CUNEIFORM SIGN ME"));
        data.insert(std::make_pair(0x12229,"CUNEIFORM SIGN MES"));
        data.insert(std::make_pair(0x1222a,"CUNEIFORM SIGN MI"));
        data.insert(std::make_pair(0x1222b,"CUNEIFORM SIGN MIN"));
        data.insert(std::make_pair(0x1222c,"CUNEIFORM SIGN MU"));
        data.insert(std::make_pair(0x1222d,"CUNEIFORM SIGN MU OVER MU"));
        data.insert(std::make_pair(0x1222e,"CUNEIFORM SIGN MUG"));
        data.insert(std::make_pair(0x1222f,"CUNEIFORM SIGN MUG GUNU"));
        data.insert(std::make_pair(0x12230,"CUNEIFORM SIGN MUNSUB"));
        data.insert(std::make_pair(0x12231,"CUNEIFORM SIGN MURGU2"));
        data.insert(std::make_pair(0x12232,"CUNEIFORM SIGN MUSH"));
        data.insert(std::make_pair(0x12233,"CUNEIFORM SIGN MUSH TIMES A"));
        data.insert(std::make_pair(0x12234,"CUNEIFORM SIGN MUSH TIMES KUR"));
        data.insert(std::make_pair(0x12235,"CUNEIFORM SIGN MUSH TIMES ZA"));
        data.insert(std::make_pair(0x12236,"CUNEIFORM SIGN MUSH OVER MUSH"));
        data.insert(std::make_pair(0x12237,"CUNEIFORM SIGN MUSH OVER MUSH TIMES A PLUS NA"));
        data.insert(std::make_pair(0x12238,"CUNEIFORM SIGN MUSH CROSSING MUSH"));
        data.insert(std::make_pair(0x12239,"CUNEIFORM SIGN MUSH3"));
        data.insert(std::make_pair(0x1223a,"CUNEIFORM SIGN MUSH3 TIMES A"));
        data.insert(std::make_pair(0x1223b,"CUNEIFORM SIGN MUSH3 TIMES A PLUS DI"));
        data.insert(std::make_pair(0x1223c,"CUNEIFORM SIGN MUSH3 TIMES DI"));
        data.insert(std::make_pair(0x1223d,"CUNEIFORM SIGN MUSH3 GUNU"));
        data.insert(std::make_pair(0x1223e,"CUNEIFORM SIGN NA"));
        data.insert(std::make_pair(0x1223f,"CUNEIFORM SIGN NA2"));
        data.insert(std::make_pair(0x12240,"CUNEIFORM SIGN NAGA"));
        data.insert(std::make_pair(0x12241,"CUNEIFORM SIGN NAGA INVERTED"));
        data.insert(std::make_pair(0x12242,"CUNEIFORM SIGN NAGA TIMES SHU TENU"));
        data.insert(std::make_pair(0x12243,"CUNEIFORM SIGN NAGA OPPOSING NAGA"));
        data.insert(std::make_pair(0x12244,"CUNEIFORM SIGN NAGAR"));
        data.insert(std::make_pair(0x12245,"CUNEIFORM SIGN NAM NUTILLU"));
        data.insert(std::make_pair(0x12246,"CUNEIFORM SIGN NAM"));
        data.insert(std::make_pair(0x12247,"CUNEIFORM SIGN NAM2"));
        data.insert(std::make_pair(0x12248,"CUNEIFORM SIGN NE"));
        data.insert(std::make_pair(0x12249,"CUNEIFORM SIGN NE TIMES A"));
        data.insert(std::make_pair(0x1224a,"CUNEIFORM SIGN NE TIMES UD"));
        data.insert(std::make_pair(0x1224b,"CUNEIFORM SIGN NE SHESHIG"));
        data.insert(std::make_pair(0x1224c,"CUNEIFORM SIGN NI"));
        data.insert(std::make_pair(0x1224d,"CUNEIFORM SIGN NI TIMES E"));
        data.insert(std::make_pair(0x1224e,"CUNEIFORM SIGN NI2"));
        data.insert(std::make_pair(0x1224f,"CUNEIFORM SIGN NIM"));
        data.insert(std::make_pair(0x12250,"CUNEIFORM SIGN NIM TIMES GAN2 TENU"));
        data.insert(std::make_pair(0x12251,"CUNEIFORM SIGN NIM TIMES GAR PLUS GAN2 TENU"));
        data.insert(std::make_pair(0x12252,"CUNEIFORM SIGN NINDA2"));
        data.insert(std::make_pair(0x12253,"CUNEIFORM SIGN NINDA2 TIMES AN"));
        data.insert(std::make_pair(0x12254,"CUNEIFORM SIGN NINDA2 TIMES ASH"));
        data.insert(std::make_pair(0x12255,"CUNEIFORM SIGN NINDA2 TIMES ASH PLUS ASH"));
        data.insert(std::make_pair(0x12256,"CUNEIFORM SIGN NINDA2 TIMES GUD"));
        data.insert(std::make_pair(0x12257,"CUNEIFORM SIGN NINDA2 TIMES ME PLUS GAN2 TENU"));
        data.insert(std::make_pair(0x12258,"CUNEIFORM SIGN NINDA2 TIMES NE"));
        data.insert(std::make_pair(0x12259,"CUNEIFORM SIGN NINDA2 TIMES NUN"));
        data.insert(std::make_pair(0x1225a,"CUNEIFORM SIGN NINDA2 TIMES SHE"));
        data.insert(std::make_pair(0x1225b,"CUNEIFORM SIGN NINDA2 TIMES SHE PLUS A AN"));
        data.insert(std::make_pair(0x1225c,"CUNEIFORM SIGN NINDA2 TIMES SHE PLUS ASH"));
        data.insert(std::make_pair(0x1225d,"CUNEIFORM SIGN NINDA2 TIMES SHE PLUS ASH PLUS ASH"));
        data.insert(std::make_pair(0x1225e,"CUNEIFORM SIGN NINDA2 TIMES U2 PLUS ASH"));
        data.insert(std::make_pair(0x1225f,"CUNEIFORM SIGN NINDA2 TIMES USH"));
        data.insert(std::make_pair(0x12260,"CUNEIFORM SIGN NISAG"));
        data.insert(std::make_pair(0x12261,"CUNEIFORM SIGN NU"));
        data.insert(std::make_pair(0x12262,"CUNEIFORM SIGN NU11"));
        data.insert(std::make_pair(0x12263,"CUNEIFORM SIGN NUN"));
        data.insert(std::make_pair(0x12264,"CUNEIFORM SIGN NUN LAGAR TIMES GAR"));
        data.insert(std::make_pair(0x12265,"CUNEIFORM SIGN NUN LAGAR TIMES MASH"));
        data.insert(std::make_pair(0x12266,"CUNEIFORM SIGN NUN LAGAR TIMES SAL"));
        data.insert(std::make_pair(0x12267,"CUNEIFORM SIGN NUN LAGAR TIMES SAL OVER NUN LAGAR TIMES SAL"));
        data.insert(std::make_pair(0x12268,"CUNEIFORM SIGN NUN LAGAR TIMES USH"));
        data.insert(std::make_pair(0x12269,"CUNEIFORM SIGN NUN TENU"));
        data.insert(std::make_pair(0x1226a,"CUNEIFORM SIGN NUN OVER NUN"));
        data.insert(std::make_pair(0x1226b,"CUNEIFORM SIGN NUN CROSSING NUN"));
        data.insert(std::make_pair(0x1226c,"CUNEIFORM SIGN NUN CROSSING NUN LAGAR OVER LAGAR"));
        data.insert(std::make_pair(0x1226d,"CUNEIFORM SIGN NUNUZ"));
        data.insert(std::make_pair(0x1226e,"CUNEIFORM SIGN NUNUZ AB2 TIMES ASHGAB"));
        data.insert(std::make_pair(0x1226f,"CUNEIFORM SIGN NUNUZ AB2 TIMES BI"));
        data.insert(std::make_pair(0x12270,"CUNEIFORM SIGN NUNUZ AB2 TIMES DUG"));
        data.insert(std::make_pair(0x12271,"CUNEIFORM SIGN NUNUZ AB2 TIMES GUD"));
        data.insert(std::make_pair(0x12272,"CUNEIFORM SIGN NUNUZ AB2 TIMES IGI GUNU"));
        data.insert(std::make_pair(0x12273,"CUNEIFORM SIGN NUNUZ AB2 TIMES KAD3"));
        data.insert(std::make_pair(0x12274,"CUNEIFORM SIGN NUNUZ AB2 TIMES LA"));
        data.insert(std::make_pair(0x12275,"CUNEIFORM SIGN NUNUZ AB2 TIMES NE"));
        data.insert(std::make_pair(0x12276,"CUNEIFORM SIGN NUNUZ AB2 TIMES SILA3"));
        data.insert(std::make_pair(0x12277,"CUNEIFORM SIGN NUNUZ AB2 TIMES U2"));
        data.insert(std::make_pair(0x12278,"CUNEIFORM SIGN NUNUZ KISIM5 TIMES BI"));
        data.insert(std::make_pair(0x12279,"CUNEIFORM SIGN NUNUZ KISIM5 TIMES BI U"));
        data.insert(std::make_pair(0x1227a,"CUNEIFORM SIGN PA"));
        data.insert(std::make_pair(0x1227b,"CUNEIFORM SIGN PAD"));
        data.insert(std::make_pair(0x1227c,"CUNEIFORM SIGN PAN"));
        data.insert(std::make_pair(0x1227d,"CUNEIFORM SIGN PAP"));
        data.insert(std::make_pair(0x1227e,"CUNEIFORM SIGN PESH2"));
        data.insert(std::make_pair(0x1227f,"CUNEIFORM SIGN PI"));
        data.insert(std::make_pair(0x12280,"CUNEIFORM SIGN PI TIMES A"));
        data.insert(std::make_pair(0x12281,"CUNEIFORM SIGN PI TIMES AB"));
        data.insert(std::make_pair(0x12282,"CUNEIFORM SIGN PI TIMES BI"));
        data.insert(std::make_pair(0x12283,"CUNEIFORM SIGN PI TIMES BU"));
        data.insert(std::make_pair(0x12284,"CUNEIFORM SIGN PI TIMES E"));
        data.insert(std::make_pair(0x12285,"CUNEIFORM SIGN PI TIMES I"));
        data.insert(std::make_pair(0x12286,"CUNEIFORM SIGN PI TIMES IB"));
        data.insert(std::make_pair(0x12287,"CUNEIFORM SIGN PI TIMES U"));
        data.insert(std::make_pair(0x12288,"CUNEIFORM SIGN PI TIMES U2"));
        data.insert(std::make_pair(0x12289,"CUNEIFORM SIGN PI CROSSING PI"));
        data.insert(std::make_pair(0x1228a,"CUNEIFORM SIGN PIRIG"));
        data.insert(std::make_pair(0x1228b,"CUNEIFORM SIGN PIRIG TIMES KAL"));
        data.insert(std::make_pair(0x1228c,"CUNEIFORM SIGN PIRIG TIMES UD"));
        data.insert(std::make_pair(0x1228d,"CUNEIFORM SIGN PIRIG TIMES ZA"));
        data.insert(std::make_pair(0x1228e,"CUNEIFORM SIGN PIRIG OPPOSING PIRIG"));
        data.insert(std::make_pair(0x1228f,"CUNEIFORM SIGN RA"));
        data.insert(std::make_pair(0x12290,"CUNEIFORM SIGN RAB"));
        data.insert(std::make_pair(0x12291,"CUNEIFORM SIGN RI"));
        data.insert(std::make_pair(0x12292,"CUNEIFORM SIGN RU"));
        data.insert(std::make_pair(0x12293,"CUNEIFORM SIGN SA"));
        data.insert(std::make_pair(0x12294,"CUNEIFORM SIGN SAG NUTILLU"));
        data.insert(std::make_pair(0x12295,"CUNEIFORM SIGN SAG"));
        data.insert(std::make_pair(0x12296,"CUNEIFORM SIGN SAG TIMES A"));
        data.insert(std::make_pair(0x12297,"CUNEIFORM SIGN SAG TIMES DU"));
        data.insert(std::make_pair(0x12298,"CUNEIFORM SIGN SAG TIMES DUB"));
        data.insert(std::make_pair(0x12299,"CUNEIFORM SIGN SAG TIMES HA"));
        data.insert(std::make_pair(0x1229a,"CUNEIFORM SIGN SAG TIMES KAK"));
        data.insert(std::make_pair(0x1229b,"CUNEIFORM SIGN SAG TIMES KUR"));
        data.insert(std::make_pair(0x1229c,"CUNEIFORM SIGN SAG TIMES LUM"));
        data.insert(std::make_pair(0x1229d,"CUNEIFORM SIGN SAG TIMES MI"));
        data.insert(std::make_pair(0x1229e,"CUNEIFORM SIGN SAG TIMES NUN"));
        data.insert(std::make_pair(0x1229f,"CUNEIFORM SIGN SAG TIMES SAL"));
        data.insert(std::make_pair(0x122a0,"CUNEIFORM SIGN SAG TIMES SHID"));
        data.insert(std::make_pair(0x122a1,"CUNEIFORM SIGN SAG TIMES TAB"));
        data.insert(std::make_pair(0x122a2,"CUNEIFORM SIGN SAG TIMES U2"));
        data.insert(std::make_pair(0x122a3,"CUNEIFORM SIGN SAG TIMES UB"));
        data.insert(std::make_pair(0x122a4,"CUNEIFORM SIGN SAG TIMES UM"));
        data.insert(std::make_pair(0x122a5,"CUNEIFORM SIGN SAG TIMES UR"));
        data.insert(std::make_pair(0x122a6,"CUNEIFORM SIGN SAG TIMES USH"));
        data.insert(std::make_pair(0x122a7,"CUNEIFORM SIGN SAG OVER SAG"));
        data.insert(std::make_pair(0x122a8,"CUNEIFORM SIGN SAG GUNU"));
        data.insert(std::make_pair(0x122a9,"CUNEIFORM SIGN SAL"));
        data.insert(std::make_pair(0x122aa,"CUNEIFORM SIGN SAL LAGAB TIMES ASH2"));
        data.insert(std::make_pair(0x122ab,"CUNEIFORM SIGN SANGA2"));
        data.insert(std::make_pair(0x122ac,"CUNEIFORM SIGN SAR"));
        data.insert(std::make_pair(0x122ad,"CUNEIFORM SIGN SHA"));
        data.insert(std::make_pair(0x122ae,"CUNEIFORM SIGN SHA3"));
        data.insert(std::make_pair(0x122af,"CUNEIFORM SIGN SHA3 TIMES A"));
        data.insert(std::make_pair(0x122b0,"CUNEIFORM SIGN SHA3 TIMES BAD"));
        data.insert(std::make_pair(0x122b1,"CUNEIFORM SIGN SHA3 TIMES GISH"));
        data.insert(std::make_pair(0x122b2,"CUNEIFORM SIGN SHA3 TIMES NE"));
        data.insert(std::make_pair(0x122b3,"CUNEIFORM SIGN SHA3 TIMES SHU2"));
        data.insert(std::make_pair(0x122b4,"CUNEIFORM SIGN SHA3 TIMES TUR"));
        data.insert(std::make_pair(0x122b5,"CUNEIFORM SIGN SHA3 TIMES U"));
        data.insert(std::make_pair(0x122b6,"CUNEIFORM SIGN SHA3 TIMES U PLUS A"));
        data.insert(std::make_pair(0x122b7,"CUNEIFORM SIGN SHA6"));
        data.insert(std::make_pair(0x122b8,"CUNEIFORM SIGN SHAB6"));
        data.insert(std::make_pair(0x122b9,"CUNEIFORM SIGN SHAR2"));
        data.insert(std::make_pair(0x122ba,"CUNEIFORM SIGN SHE"));
        data.insert(std::make_pair(0x122bb,"CUNEIFORM SIGN SHE HU"));
        data.insert(std::make_pair(0x122bc,"CUNEIFORM SIGN SHE OVER SHE GAD OVER GAD GAR OVER GAR"));
        data.insert(std::make_pair(0x122bd,"CUNEIFORM SIGN SHE OVER SHE TAB OVER TAB GAR OVER GAR"));
        data.insert(std::make_pair(0x122be,"CUNEIFORM SIGN SHEG9"));
        data.insert(std::make_pair(0x122bf,"CUNEIFORM SIGN SHEN"));
        data.insert(std::make_pair(0x122c0,"CUNEIFORM SIGN SHESH"));
        data.insert(std::make_pair(0x122c1,"CUNEIFORM SIGN SHESH2"));
        data.insert(std::make_pair(0x122c2,"CUNEIFORM SIGN SHESHLAM"));
        data.insert(std::make_pair(0x122c3,"CUNEIFORM SIGN SHID"));
        data.insert(std::make_pair(0x122c4,"CUNEIFORM SIGN SHID TIMES A"));
        data.insert(std::make_pair(0x122c5,"CUNEIFORM SIGN SHID TIMES IM"));
        data.insert(std::make_pair(0x122c6,"CUNEIFORM SIGN SHIM"));
        data.insert(std::make_pair(0x122c7,"CUNEIFORM SIGN SHIM TIMES A"));
        data.insert(std::make_pair(0x122c8,"CUNEIFORM SIGN SHIM TIMES BAL"));
        data.insert(std::make_pair(0x122c9,"CUNEIFORM SIGN SHIM TIMES BULUG"));
        data.insert(std::make_pair(0x122ca,"CUNEIFORM SIGN SHIM TIMES DIN"));
        data.insert(std::make_pair(0x122cb,"CUNEIFORM SIGN SHIM TIMES GAR"));
        data.insert(std::make_pair(0x122cc,"CUNEIFORM SIGN SHIM TIMES IGI"));
        data.insert(std::make_pair(0x122cd,"CUNEIFORM SIGN SHIM TIMES IGI GUNU"));
        data.insert(std::make_pair(0x122ce,"CUNEIFORM SIGN SHIM TIMES KUSHU2"));
        data.insert(std::make_pair(0x122cf,"CUNEIFORM SIGN SHIM TIMES LUL"));
        data.insert(std::make_pair(0x122d0,"CUNEIFORM SIGN SHIM TIMES MUG"));
        data.insert(std::make_pair(0x122d1,"CUNEIFORM SIGN SHIM TIMES SAL"));
        data.insert(std::make_pair(0x122d2,"CUNEIFORM SIGN SHINIG"));
        data.insert(std::make_pair(0x122d3,"CUNEIFORM SIGN SHIR"));
        data.insert(std::make_pair(0x122d4,"CUNEIFORM SIGN SHIR TENU"));
        data.insert(std::make_pair(0x122d5,"CUNEIFORM SIGN SHIR OVER SHIR BUR OVER BUR"));
        data.insert(std::make_pair(0x122d6,"CUNEIFORM SIGN SHITA"));
        data.insert(std::make_pair(0x122d7,"CUNEIFORM SIGN SHU"));
        data.insert(std::make_pair(0x122d8,"CUNEIFORM SIGN SHU OVER INVERTED SHU"));
        data.insert(std::make_pair(0x122d9,"CUNEIFORM SIGN SHU2"));
        data.insert(std::make_pair(0x122da,"CUNEIFORM SIGN SHUBUR"));
        data.insert(std::make_pair(0x122db,"CUNEIFORM SIGN SI"));
        data.insert(std::make_pair(0x122dc,"CUNEIFORM SIGN SI GUNU"));
        data.insert(std::make_pair(0x122dd,"CUNEIFORM SIGN SIG"));
        data.insert(std::make_pair(0x122de,"CUNEIFORM SIGN SIG4"));
        data.insert(std::make_pair(0x122df,"CUNEIFORM SIGN SIG4 OVER SIG4 SHU2"));
        data.insert(std::make_pair(0x122e0,"CUNEIFORM SIGN SIK2"));
        data.insert(std::make_pair(0x122e1,"CUNEIFORM SIGN SILA3"));
        data.insert(std::make_pair(0x122e2,"CUNEIFORM SIGN SU"));
        data.insert(std::make_pair(0x122e3,"CUNEIFORM SIGN SU OVER SU"));
        data.insert(std::make_pair(0x122e4,"CUNEIFORM SIGN SUD"));
        data.insert(std::make_pair(0x122e5,"CUNEIFORM SIGN SUD2"));
        data.insert(std::make_pair(0x122e6,"CUNEIFORM SIGN SUHUR"));
        data.insert(std::make_pair(0x122e7,"CUNEIFORM SIGN SUM"));
        data.insert(std::make_pair(0x122e8,"CUNEIFORM SIGN SUMASH"));
        data.insert(std::make_pair(0x122e9,"CUNEIFORM SIGN SUR"));
        data.insert(std::make_pair(0x122ea,"CUNEIFORM SIGN SUR9"));
        data.insert(std::make_pair(0x122eb,"CUNEIFORM SIGN TA"));
        data.insert(std::make_pair(0x122ec,"CUNEIFORM SIGN TA ASTERISK"));
        data.insert(std::make_pair(0x122ed,"CUNEIFORM SIGN TA TIMES HI"));
        data.insert(std::make_pair(0x122ee,"CUNEIFORM SIGN TA TIMES MI"));
        data.insert(std::make_pair(0x122ef,"CUNEIFORM SIGN TA GUNU"));
        data.insert(std::make_pair(0x122f0,"CUNEIFORM SIGN TAB"));
        data.insert(std::make_pair(0x122f1,"CUNEIFORM SIGN TAB OVER TAB NI OVER NI DISH OVER DISH"));
        data.insert(std::make_pair(0x122f2,"CUNEIFORM SIGN TAB SQUARED"));
        data.insert(std::make_pair(0x122f3,"CUNEIFORM SIGN TAG"));
        data.insert(std::make_pair(0x122f4,"CUNEIFORM SIGN TAG TIMES BI"));
        data.insert(std::make_pair(0x122f5,"CUNEIFORM SIGN TAG TIMES GUD"));
        data.insert(std::make_pair(0x122f6,"CUNEIFORM SIGN TAG TIMES SHE"));
        data.insert(std::make_pair(0x122f7,"CUNEIFORM SIGN TAG TIMES SHU"));
        data.insert(std::make_pair(0x122f8,"CUNEIFORM SIGN TAG TIMES TUG2"));
        data.insert(std::make_pair(0x122f9,"CUNEIFORM SIGN TAG TIMES UD"));
        data.insert(std::make_pair(0x122fa,"CUNEIFORM SIGN TAK4"));
        data.insert(std::make_pair(0x122fb,"CUNEIFORM SIGN TAR"));
        data.insert(std::make_pair(0x122fc,"CUNEIFORM SIGN TE"));
        data.insert(std::make_pair(0x122fd,"CUNEIFORM SIGN TE GUNU"));
        data.insert(std::make_pair(0x122fe,"CUNEIFORM SIGN TI"));
        data.insert(std::make_pair(0x122ff,"CUNEIFORM SIGN TI TENU"));
        data.insert(std::make_pair(0x12300,"CUNEIFORM SIGN TIL"));
        data.insert(std::make_pair(0x12301,"CUNEIFORM SIGN TIR"));
        data.insert(std::make_pair(0x12302,"CUNEIFORM SIGN TIR TIMES TAK4"));
        data.insert(std::make_pair(0x12303,"CUNEIFORM SIGN TIR OVER TIR"));
        data.insert(std::make_pair(0x12304,"CUNEIFORM SIGN TIR OVER TIR GAD OVER GAD GAR OVER GAR"));
        data.insert(std::make_pair(0x12305,"CUNEIFORM SIGN TU"));
        data.insert(std::make_pair(0x12306,"CUNEIFORM SIGN TUG2"));
        data.insert(std::make_pair(0x12307,"CUNEIFORM SIGN TUK"));
        data.insert(std::make_pair(0x12308,"CUNEIFORM SIGN TUM"));
        data.insert(std::make_pair(0x12309,"CUNEIFORM SIGN TUR"));
        data.insert(std::make_pair(0x1230a,"CUNEIFORM SIGN TUR OVER TUR ZA OVER ZA"));
        data.insert(std::make_pair(0x1230b,"CUNEIFORM SIGN U"));
        data.insert(std::make_pair(0x1230c,"CUNEIFORM SIGN U GUD"));
        data.insert(std::make_pair(0x1230d,"CUNEIFORM SIGN U U U"));
        data.insert(std::make_pair(0x1230e,"CUNEIFORM SIGN U OVER U PA OVER PA GAR OVER GAR"));
        data.insert(std::make_pair(0x1230f,"CUNEIFORM SIGN U OVER U SUR OVER SUR"));
        data.insert(std::make_pair(0x12310,"CUNEIFORM SIGN U OVER U U REVERSED OVER U REVERSED"));
        data.insert(std::make_pair(0x12311,"CUNEIFORM SIGN U2"));
        data.insert(std::make_pair(0x12312,"CUNEIFORM SIGN UB"));
        data.insert(std::make_pair(0x12313,"CUNEIFORM SIGN UD"));
        data.insert(std::make_pair(0x12314,"CUNEIFORM SIGN UD KUSHU2"));
        data.insert(std::make_pair(0x12315,"CUNEIFORM SIGN UD TIMES BAD"));
        data.insert(std::make_pair(0x12316,"CUNEIFORM SIGN UD TIMES MI"));
        data.insert(std::make_pair(0x12317,"CUNEIFORM SIGN UD TIMES U PLUS U PLUS U"));
        data.insert(std::make_pair(0x12318,"CUNEIFORM SIGN UD TIMES U PLUS U PLUS U GUNU"));
        data.insert(std::make_pair(0x12319,"CUNEIFORM SIGN UD GUNU"));
        data.insert(std::make_pair(0x1231a,"CUNEIFORM SIGN UD SHESHIG"));
        data.insert(std::make_pair(0x1231b,"CUNEIFORM SIGN UD SHESHIG TIMES BAD"));
        data.insert(std::make_pair(0x1231c,"CUNEIFORM SIGN UDUG"));
        data.insert(std::make_pair(0x1231d,"CUNEIFORM SIGN UM"));
        data.insert(std::make_pair(0x1231e,"CUNEIFORM SIGN UM TIMES LAGAB"));
        data.insert(std::make_pair(0x1231f,"CUNEIFORM SIGN UM TIMES ME PLUS DA"));
        data.insert(std::make_pair(0x12320,"CUNEIFORM SIGN UM TIMES SHA3"));
        data.insert(std::make_pair(0x12321,"CUNEIFORM SIGN UM TIMES U"));
        data.insert(std::make_pair(0x12322,"CUNEIFORM SIGN UMBIN"));
        data.insert(std::make_pair(0x12323,"CUNEIFORM SIGN UMUM"));
        data.insert(std::make_pair(0x12324,"CUNEIFORM SIGN UMUM TIMES KASKAL"));
        data.insert(std::make_pair(0x12325,"CUNEIFORM SIGN UMUM TIMES PA"));
        data.insert(std::make_pair(0x12326,"CUNEIFORM SIGN UN"));
        data.insert(std::make_pair(0x12327,"CUNEIFORM SIGN UN GUNU"));
        data.insert(std::make_pair(0x12328,"CUNEIFORM SIGN UR"));
        data.insert(std::make_pair(0x12329,"CUNEIFORM SIGN UR CROSSING UR"));
        data.insert(std::make_pair(0x1232a,"CUNEIFORM SIGN UR SHESHIG"));
        data.insert(std::make_pair(0x1232b,"CUNEIFORM SIGN UR2"));
        data.insert(std::make_pair(0x1232c,"CUNEIFORM SIGN UR2 TIMES A PLUS HA"));
        data.insert(std::make_pair(0x1232d,"CUNEIFORM SIGN UR2 TIMES A PLUS NA"));
        data.insert(std::make_pair(0x1232e,"CUNEIFORM SIGN UR2 TIMES AL"));
        data.insert(std::make_pair(0x1232f,"CUNEIFORM SIGN UR2 TIMES HA"));
        data.insert(std::make_pair(0x12330,"CUNEIFORM SIGN UR2 TIMES NUN"));
        data.insert(std::make_pair(0x12331,"CUNEIFORM SIGN UR2 TIMES U2"));
        data.insert(std::make_pair(0x12332,"CUNEIFORM SIGN UR2 TIMES U2 PLUS ASH"));
        data.insert(std::make_pair(0x12333,"CUNEIFORM SIGN UR2 TIMES U2 PLUS BI"));
        data.insert(std::make_pair(0x12334,"CUNEIFORM SIGN UR4"));
        data.insert(std::make_pair(0x12335,"CUNEIFORM SIGN URI"));
        data.insert(std::make_pair(0x12336,"CUNEIFORM SIGN URI3"));
        data.insert(std::make_pair(0x12337,"CUNEIFORM SIGN URU"));
        data.insert(std::make_pair(0x12338,"CUNEIFORM SIGN URU TIMES A"));
        data.insert(std::make_pair(0x12339,"CUNEIFORM SIGN URU TIMES ASHGAB"));
        data.insert(std::make_pair(0x1233a,"CUNEIFORM SIGN URU TIMES BAR"));
        data.insert(std::make_pair(0x1233b,"CUNEIFORM SIGN URU TIMES DUN"));
        data.insert(std::make_pair(0x1233c,"CUNEIFORM SIGN URU TIMES GA"));
        data.insert(std::make_pair(0x1233d,"CUNEIFORM SIGN URU TIMES GAL"));
        data.insert(std::make_pair(0x1233e,"CUNEIFORM SIGN URU TIMES GAN2 TENU"));
        data.insert(std::make_pair(0x1233f,"CUNEIFORM SIGN URU TIMES GAR"));
        data.insert(std::make_pair(0x12340,"CUNEIFORM SIGN URU TIMES GU"));
        data.insert(std::make_pair(0x12341,"CUNEIFORM SIGN URU TIMES HA"));
        data.insert(std::make_pair(0x12342,"CUNEIFORM SIGN URU TIMES IGI"));
        data.insert(std::make_pair(0x12343,"CUNEIFORM SIGN URU TIMES IM"));
        data.insert(std::make_pair(0x12344,"CUNEIFORM SIGN URU TIMES ISH"));
        data.insert(std::make_pair(0x12345,"CUNEIFORM SIGN URU TIMES KI"));
        data.insert(std::make_pair(0x12346,"CUNEIFORM SIGN URU TIMES LUM"));
        data.insert(std::make_pair(0x12347,"CUNEIFORM SIGN URU TIMES MIN"));
        data.insert(std::make_pair(0x12348,"CUNEIFORM SIGN URU TIMES PA"));
        data.insert(std::make_pair(0x12349,"CUNEIFORM SIGN URU TIMES SHE"));
        data.insert(std::make_pair(0x1234a,"CUNEIFORM SIGN URU TIMES SIG4"));
        data.insert(std::make_pair(0x1234b,"CUNEIFORM SIGN URU TIMES TU"));
        data.insert(std::make_pair(0x1234c,"CUNEIFORM SIGN URU TIMES U PLUS GUD"));
        data.insert(std::make_pair(0x1234d,"CUNEIFORM SIGN URU TIMES UD"));
        data.insert(std::make_pair(0x1234e,"CUNEIFORM SIGN URU TIMES URUDA"));
        data.insert(std::make_pair(0x1234f,"CUNEIFORM SIGN URUDA"));
        data.insert(std::make_pair(0x12350,"CUNEIFORM SIGN URUDA TIMES U"));
        data.insert(std::make_pair(0x12351,"CUNEIFORM SIGN USH"));
        data.insert(std::make_pair(0x12352,"CUNEIFORM SIGN USH TIMES A"));
        data.insert(std::make_pair(0x12353,"CUNEIFORM SIGN USH TIMES KU"));
        data.insert(std::make_pair(0x12354,"CUNEIFORM SIGN USH TIMES KUR"));
        data.insert(std::make_pair(0x12355,"CUNEIFORM SIGN USH TIMES TAK4"));
        data.insert(std::make_pair(0x12356,"CUNEIFORM SIGN USHX"));
        data.insert(std::make_pair(0x12357,"CUNEIFORM SIGN USH2"));
        data.insert(std::make_pair(0x12358,"CUNEIFORM SIGN USHUMX"));
        data.insert(std::make_pair(0x12359,"CUNEIFORM SIGN UTUKI"));
        data.insert(std::make_pair(0x1235a,"CUNEIFORM SIGN UZ3"));
        data.insert(std::make_pair(0x1235b,"CUNEIFORM SIGN UZ3 TIMES KASKAL"));
        data.insert(std::make_pair(0x1235c,"CUNEIFORM SIGN UZU"));
        data.insert(std::make_pair(0x1235d,"CUNEIFORM SIGN ZA"));
        data.insert(std::make_pair(0x1235e,"CUNEIFORM SIGN ZA TENU"));
        data.insert(std::make_pair(0x1235f,"CUNEIFORM SIGN ZA SQUARED TIMES KUR"));
        data.insert(std::make_pair(0x12360,"CUNEIFORM SIGN ZAG"));
        data.insert(std::make_pair(0x12361,"CUNEIFORM SIGN ZAMX"));
        data.insert(std::make_pair(0x12362,"CUNEIFORM SIGN ZE2"));
        data.insert(std::make_pair(0x12363,"CUNEIFORM SIGN ZI"));
        data.insert(std::make_pair(0x12364,"CUNEIFORM SIGN ZI OVER ZI"));
        data.insert(std::make_pair(0x12365,"CUNEIFORM SIGN ZI3"));
        data.insert(std::make_pair(0x12366,"CUNEIFORM SIGN ZIB"));
        data.insert(std::make_pair(0x12367,"CUNEIFORM SIGN ZIB KABA TENU"));
        data.insert(std::make_pair(0x12368,"CUNEIFORM SIGN ZIG"));
        data.insert(std::make_pair(0x12369,"CUNEIFORM SIGN ZIZ2"));
        data.insert(std::make_pair(0x1236a,"CUNEIFORM SIGN ZU"));
        data.insert(std::make_pair(0x1236b,"CUNEIFORM SIGN ZU5"));
        data.insert(std::make_pair(0x1236c,"CUNEIFORM SIGN ZU5 TIMES A"));
        data.insert(std::make_pair(0x1236d,"CUNEIFORM SIGN ZUBUR"));
        data.insert(std::make_pair(0x1236e,"CUNEIFORM SIGN ZUM"));
        data.insert(std::make_pair(0x1236f,"CUNEIFORM SIGN KAP ELAMITE"));
        data.insert(std::make_pair(0x12370,"CUNEIFORM SIGN AB TIMES NUN"));
        data.insert(std::make_pair(0x12371,"CUNEIFORM SIGN AB2 TIMES A"));
        data.insert(std::make_pair(0x12372,"CUNEIFORM SIGN AMAR TIMES KUG"));
        data.insert(std::make_pair(0x12373,"CUNEIFORM SIGN DAG KISIM5 TIMES U2 PLUS MASH"));
        data.insert(std::make_pair(0x12374,"CUNEIFORM SIGN DAG3"));
        data.insert(std::make_pair(0x12375,"CUNEIFORM SIGN DISH PLUS SHU"));
        data.insert(std::make_pair(0x12376,"CUNEIFORM SIGN DUB TIMES SHE"));
        data.insert(std::make_pair(0x12377,"CUNEIFORM SIGN EZEN TIMES GUD"));
        data.insert(std::make_pair(0x12378,"CUNEIFORM SIGN EZEN TIMES SHE"));
        data.insert(std::make_pair(0x12379,"CUNEIFORM SIGN GA2 TIMES AN PLUS KAK PLUS A"));
        data.insert(std::make_pair(0x1237a,"CUNEIFORM SIGN GA2 TIMES ASH2"));
        data.insert(std::make_pair(0x1237b,"CUNEIFORM SIGN GE22"));
        data.insert(std::make_pair(0x1237c,"CUNEIFORM SIGN GIG"));
        data.insert(std::make_pair(0x1237d,"CUNEIFORM SIGN HUSH"));
        data.insert(std::make_pair(0x1237e,"CUNEIFORM SIGN KA TIMES ANSHE"));
        data.insert(std::make_pair(0x1237f,"CUNEIFORM SIGN KA TIMES ASH3"));
        data.insert(std::make_pair(0x12380,"CUNEIFORM SIGN KA TIMES GISH"));
        data.insert(std::make_pair(0x12381,"CUNEIFORM SIGN KA TIMES GUD"));
        data.insert(std::make_pair(0x12382,"CUNEIFORM SIGN KA TIMES HI TIMES ASH2"));
        data.insert(std::make_pair(0x12383,"CUNEIFORM SIGN KA TIMES LUM"));
        data.insert(std::make_pair(0x12384,"CUNEIFORM SIGN KA TIMES PA"));
        data.insert(std::make_pair(0x12385,"CUNEIFORM SIGN KA TIMES SHUL"));
        data.insert(std::make_pair(0x12386,"CUNEIFORM SIGN KA TIMES TU"));
        data.insert(std::make_pair(0x12387,"CUNEIFORM SIGN KA TIMES UR2"));
        data.insert(std::make_pair(0x12388,"CUNEIFORM SIGN LAGAB TIMES GI"));
        data.insert(std::make_pair(0x12389,"CUNEIFORM SIGN LU2 SHESHIG TIMES BAD"));
        data.insert(std::make_pair(0x1238a,"CUNEIFORM SIGN LU2 TIMES ESH2 PLUS LAL"));
        data.insert(std::make_pair(0x1238b,"CUNEIFORM SIGN LU2 TIMES SHU"));
        data.insert(std::make_pair(0x1238c,"CUNEIFORM SIGN MESH"));
        data.insert(std::make_pair(0x1238d,"CUNEIFORM SIGN MUSH3 TIMES ZA"));
        data.insert(std::make_pair(0x1238e,"CUNEIFORM SIGN NA4"));
        data.insert(std::make_pair(0x1238f,"CUNEIFORM SIGN NIN"));
        data.insert(std::make_pair(0x12390,"CUNEIFORM SIGN NIN9"));
        data.insert(std::make_pair(0x12391,"CUNEIFORM SIGN NINDA2 TIMES BAL"));
        data.insert(std::make_pair(0x12392,"CUNEIFORM SIGN NINDA2 TIMES GI"));
        data.insert(std::make_pair(0x12393,"CUNEIFORM SIGN NU11 ROTATED NINETY DEGREES"));
        data.insert(std::make_pair(0x12394,"CUNEIFORM SIGN PESH2 ASTERISK"));
        data.insert(std::make_pair(0x12395,"CUNEIFORM SIGN PIR2"));
        data.insert(std::make_pair(0x12396,"CUNEIFORM SIGN SAG TIMES IGI GUNU"));
        data.insert(std::make_pair(0x12397,"CUNEIFORM SIGN TI2"));
        data.insert(std::make_pair(0x12398,"CUNEIFORM SIGN UM TIMES ME"));
        data.insert(std::make_pair(0x12399,"CUNEIFORM SIGN U U"));
        data.insert(std::make_pair(0x12400,"CUNEIFORM NUMERIC SIGN TWO ASH"));
        data.insert(std::make_pair(0x12401,"CUNEIFORM NUMERIC SIGN THREE ASH"));
        data.insert(std::make_pair(0x12402,"CUNEIFORM NUMERIC SIGN FOUR ASH"));
        data.insert(std::make_pair(0x12403,"CUNEIFORM NUMERIC SIGN FIVE ASH"));
        data.insert(std::make_pair(0x12404,"CUNEIFORM NUMERIC SIGN SIX ASH"));
        data.insert(std::make_pair(0x12405,"CUNEIFORM NUMERIC SIGN SEVEN ASH"));
        data.insert(std::make_pair(0x12406,"CUNEIFORM NUMERIC SIGN EIGHT ASH"));
        data.insert(std::make_pair(0x12407,"CUNEIFORM NUMERIC SIGN NINE ASH"));
        data.insert(std::make_pair(0x12408,"CUNEIFORM NUMERIC SIGN THREE DISH"));
        data.insert(std::make_pair(0x12409,"CUNEIFORM NUMERIC SIGN FOUR DISH"));
        data.insert(std::make_pair(0x1240a,"CUNEIFORM NUMERIC SIGN FIVE DISH"));
        data.insert(std::make_pair(0x1240b,"CUNEIFORM NUMERIC SIGN SIX DISH"));
        data.insert(std::make_pair(0x1240c,"CUNEIFORM NUMERIC SIGN SEVEN DISH"));
        data.insert(std::make_pair(0x1240d,"CUNEIFORM NUMERIC SIGN EIGHT DISH"));
        data.insert(std::make_pair(0x1240e,"CUNEIFORM NUMERIC SIGN NINE DISH"));
        data.insert(std::make_pair(0x1240f,"CUNEIFORM NUMERIC SIGN FOUR U"));
        data.insert(std::make_pair(0x12410,"CUNEIFORM NUMERIC SIGN FIVE U"));
        data.insert(std::make_pair(0x12411,"CUNEIFORM NUMERIC SIGN SIX U"));
        data.insert(std::make_pair(0x12412,"CUNEIFORM NUMERIC SIGN SEVEN U"));
        data.insert(std::make_pair(0x12413,"CUNEIFORM NUMERIC SIGN EIGHT U"));
        data.insert(std::make_pair(0x12414,"CUNEIFORM NUMERIC SIGN NINE U"));
        data.insert(std::make_pair(0x12415,"CUNEIFORM NUMERIC SIGN ONE GESH2"));
        data.insert(std::make_pair(0x12416,"CUNEIFORM NUMERIC SIGN TWO GESH2"));
        data.insert(std::make_pair(0x12417,"CUNEIFORM NUMERIC SIGN THREE GESH2"));
        data.insert(std::make_pair(0x12418,"CUNEIFORM NUMERIC SIGN FOUR GESH2"));
        data.insert(std::make_pair(0x12419,"CUNEIFORM NUMERIC SIGN FIVE GESH2"));
        data.insert(std::make_pair(0x1241a,"CUNEIFORM NUMERIC SIGN SIX GESH2"));
        data.insert(std::make_pair(0x1241b,"CUNEIFORM NUMERIC SIGN SEVEN GESH2"));
        data.insert(std::make_pair(0x1241c,"CUNEIFORM NUMERIC SIGN EIGHT GESH2"));
        data.insert(std::make_pair(0x1241d,"CUNEIFORM NUMERIC SIGN NINE GESH2"));
        data.insert(std::make_pair(0x1241e,"CUNEIFORM NUMERIC SIGN ONE GESHU"));
        data.insert(std::make_pair(0x1241f,"CUNEIFORM NUMERIC SIGN TWO GESHU"));
        data.insert(std::make_pair(0x12420,"CUNEIFORM NUMERIC SIGN THREE GESHU"));
        data.insert(std::make_pair(0x12421,"CUNEIFORM NUMERIC SIGN FOUR GESHU"));
        data.insert(std::make_pair(0x12422,"CUNEIFORM NUMERIC SIGN FIVE GESHU"));
        data.insert(std::make_pair(0x12423,"CUNEIFORM NUMERIC SIGN TWO SHAR2"));
        data.insert(std::make_pair(0x12424,"CUNEIFORM NUMERIC SIGN THREE SHAR2"));
        data.insert(std::make_pair(0x12425,"CUNEIFORM NUMERIC SIGN THREE SHAR2 VARIANT FORM"));
        data.insert(std::make_pair(0x12426,"CUNEIFORM NUMERIC SIGN FOUR SHAR2"));
        data.insert(std::make_pair(0x12427,"CUNEIFORM NUMERIC SIGN FIVE SHAR2"));
        data.insert(std::make_pair(0x12428,"CUNEIFORM NUMERIC SIGN SIX SHAR2"));
        data.insert(std::make_pair(0x12429,"CUNEIFORM NUMERIC SIGN SEVEN SHAR2"));
        data.insert(std::make_pair(0x1242a,"CUNEIFORM NUMERIC SIGN EIGHT SHAR2"));
        data.insert(std::make_pair(0x1242b,"CUNEIFORM NUMERIC SIGN NINE SHAR2"));
        data.insert(std::make_pair(0x1242c,"CUNEIFORM NUMERIC SIGN ONE SHARU"));
        data.insert(std::make_pair(0x1242d,"CUNEIFORM NUMERIC SIGN TWO SHARU"));
        data.insert(std::make_pair(0x1242e,"CUNEIFORM NUMERIC SIGN THREE SHARU"));
        data.insert(std::make_pair(0x1242f,"CUNEIFORM NUMERIC SIGN THREE SHARU VARIANT FORM"));
        data.insert(std::make_pair(0x12430,"CUNEIFORM NUMERIC SIGN FOUR SHARU"));
        data.insert(std::make_pair(0x12431,"CUNEIFORM NUMERIC SIGN FIVE SHARU"));
        data.insert(std::make_pair(0x12432,"CUNEIFORM NUMERIC SIGN SHAR2 TIMES GAL PLUS DISH"));
        data.insert(std::make_pair(0x12433,"CUNEIFORM NUMERIC SIGN SHAR2 TIMES GAL PLUS MIN"));
        data.insert(std::make_pair(0x12434,"CUNEIFORM NUMERIC SIGN ONE BURU"));
        data.insert(std::make_pair(0x12435,"CUNEIFORM NUMERIC SIGN TWO BURU"));
        data.insert(std::make_pair(0x12436,"CUNEIFORM NUMERIC SIGN THREE BURU"));
        data.insert(std::make_pair(0x12437,"CUNEIFORM NUMERIC SIGN THREE BURU VARIANT FORM"));
        data.insert(std::make_pair(0x12438,"CUNEIFORM NUMERIC SIGN FOUR BURU"));
        data.insert(std::make_pair(0x12439,"CUNEIFORM NUMERIC SIGN FIVE BURU"));
        data.insert(std::make_pair(0x1243a,"CUNEIFORM NUMERIC SIGN THREE VARIANT FORM ESH16"));
        data.insert(std::make_pair(0x1243b,"CUNEIFORM NUMERIC SIGN THREE VARIANT FORM ESH21"));
        data.insert(std::make_pair(0x1243c,"CUNEIFORM NUMERIC SIGN FOUR VARIANT FORM LIMMU"));
        data.insert(std::make_pair(0x1243d,"CUNEIFORM NUMERIC SIGN FOUR VARIANT FORM LIMMU4"));
        data.insert(std::make_pair(0x1243e,"CUNEIFORM NUMERIC SIGN FOUR VARIANT FORM LIMMU A"));
        data.insert(std::make_pair(0x1243f,"CUNEIFORM NUMERIC SIGN FOUR VARIANT FORM LIMMU B"));
        data.insert(std::make_pair(0x12440,"CUNEIFORM NUMERIC SIGN SIX VARIANT FORM ASH9"));
        data.insert(std::make_pair(0x12441,"CUNEIFORM NUMERIC SIGN SEVEN VARIANT FORM IMIN3"));
        data.insert(std::make_pair(0x12442,"CUNEIFORM NUMERIC SIGN SEVEN VARIANT FORM IMIN A"));
        data.insert(std::make_pair(0x12443,"CUNEIFORM NUMERIC SIGN SEVEN VARIANT FORM IMIN B"));
        data.insert(std::make_pair(0x12444,"CUNEIFORM NUMERIC SIGN EIGHT VARIANT FORM USSU"));
        data.insert(std::make_pair(0x12445,"CUNEIFORM NUMERIC SIGN EIGHT VARIANT FORM USSU3"));
        data.insert(std::make_pair(0x12446,"CUNEIFORM NUMERIC SIGN NINE VARIANT FORM ILIMMU"));
        data.insert(std::make_pair(0x12447,"CUNEIFORM NUMERIC SIGN NINE VARIANT FORM ILIMMU3"));
        data.insert(std::make_pair(0x12448,"CUNEIFORM NUMERIC SIGN NINE VARIANT FORM ILIMMU4"));
        data.insert(std::make_pair(0x12449,"CUNEIFORM NUMERIC SIGN NINE VARIANT FORM ILIMMU A"));
        data.insert(std::make_pair(0x1244a,"CUNEIFORM NUMERIC SIGN TWO ASH TENU"));
        data.insert(std::make_pair(0x1244b,"CUNEIFORM NUMERIC SIGN THREE ASH TENU"));
        data.insert(std::make_pair(0x1244c,"CUNEIFORM NUMERIC SIGN FOUR ASH TENU"));
        data.insert(std::make_pair(0x1244d,"CUNEIFORM NUMERIC SIGN FIVE ASH TENU"));
        data.insert(std::make_pair(0x1244e,"CUNEIFORM NUMERIC SIGN SIX ASH TENU"));
        data.insert(std::make_pair(0x1244f,"CUNEIFORM NUMERIC SIGN ONE BAN2"));
        data.insert(std::make_pair(0x12450,"CUNEIFORM NUMERIC SIGN TWO BAN2"));
        data.insert(std::make_pair(0x12451,"CUNEIFORM NUMERIC SIGN THREE BAN2"));
        data.insert(std::make_pair(0x12452,"CUNEIFORM NUMERIC SIGN FOUR BAN2"));
        data.insert(std::make_pair(0x12453,"CUNEIFORM NUMERIC SIGN FOUR BAN2 VARIANT FORM"));
        data.insert(std::make_pair(0x12454,"CUNEIFORM NUMERIC SIGN FIVE BAN2"));
        data.insert(std::make_pair(0x12455,"CUNEIFORM NUMERIC SIGN FIVE BAN2 VARIANT FORM"));
        data.insert(std::make_pair(0x12456,"CUNEIFORM NUMERIC SIGN NIGIDAMIN"));
        data.insert(std::make_pair(0x12457,"CUNEIFORM NUMERIC SIGN NIGIDAESH"));
        data.insert(std::make_pair(0x12458,"CUNEIFORM NUMERIC SIGN ONE ESHE3"));
        data.insert(std::make_pair(0x12459,"CUNEIFORM NUMERIC SIGN TWO ESHE3"));
        data.insert(std::make_pair(0x1245a,"CUNEIFORM NUMERIC SIGN ONE THIRD DISH"));
        data.insert(std::make_pair(0x1245b,"CUNEIFORM NUMERIC SIGN TWO THIRDS DISH"));
        data.insert(std::make_pair(0x1245c,"CUNEIFORM NUMERIC SIGN FIVE SIXTHS DISH"));
        data.insert(std::make_pair(0x1245d,"CUNEIFORM NUMERIC SIGN ONE THIRD VARIANT FORM A"));
        data.insert(std::make_pair(0x1245e,"CUNEIFORM NUMERIC SIGN TWO THIRDS VARIANT FORM A"));
        data.insert(std::make_pair(0x1245f,"CUNEIFORM NUMERIC SIGN ONE EIGHTH ASH"));
        data.insert(std::make_pair(0x12460,"CUNEIFORM NUMERIC SIGN ONE QUARTER ASH"));
        data.insert(std::make_pair(0x12461,"CUNEIFORM NUMERIC SIGN OLD ASSYRIAN ONE SIXTH"));
        data.insert(std::make_pair(0x12462,"CUNEIFORM NUMERIC SIGN OLD ASSYRIAN ONE QUARTER"));
        data.insert(std::make_pair(0x12463,"CUNEIFORM NUMERIC SIGN ONE QUARTER GUR"));
        data.insert(std::make_pair(0x12464,"CUNEIFORM NUMERIC SIGN ONE HALF GUR"));
        data.insert(std::make_pair(0x12465,"CUNEIFORM NUMERIC SIGN ELAMITE ONE THIRD"));
        data.insert(std::make_pair(0x12466,"CUNEIFORM NUMERIC SIGN ELAMITE TWO THIRDS"));
        data.insert(std::make_pair(0x12467,"CUNEIFORM NUMERIC SIGN ELAMITE FORTY"));
        data.insert(std::make_pair(0x12468,"CUNEIFORM NUMERIC SIGN ELAMITE FIFTY"));
        data.insert(std::make_pair(0x12469,"CUNEIFORM NUMERIC SIGN FOUR U VARIANT FORM"));
        data.insert(std::make_pair(0x1246a,"CUNEIFORM NUMERIC SIGN FIVE U VARIANT FORM"));
        data.insert(std::make_pair(0x1246b,"CUNEIFORM NUMERIC SIGN SIX U VARIANT FORM"));
        data.insert(std::make_pair(0x1246c,"CUNEIFORM NUMERIC SIGN SEVEN U VARIANT FORM"));
        data.insert(std::make_pair(0x1246d,"CUNEIFORM NUMERIC SIGN EIGHT U VARIANT FORM"));
        data.insert(std::make_pair(0x1246e,"CUNEIFORM NUMERIC SIGN NINE U VARIANT FORM"));
        data.insert(std::make_pair(0x12470,"CUNEIFORM PUNCTUATION SIGN OLD ASSYRIAN WORD DIVIDER"));
        data.insert(std::make_pair(0x12471,"CUNEIFORM PUNCTUATION SIGN VERTICAL COLON"));
        data.insert(std::make_pair(0x12472,"CUNEIFORM PUNCTUATION SIGN DIAGONAL COLON"));
        data.insert(std::make_pair(0x12473,"CUNEIFORM PUNCTUATION SIGN DIAGONAL TRICOLON"));
        data.insert(std::make_pair(0x12474,"CUNEIFORM PUNCTUATION SIGN DIAGONAL QUADCOLON"));
        data.insert(std::make_pair(0x12480,"CUNEIFORM SIGN AB TIMES NUN TENU"));
        data.insert(std::make_pair(0x12481,"CUNEIFORM SIGN AB TIMES SHU2"));
        data.insert(std::make_pair(0x12482,"CUNEIFORM SIGN AD TIMES ESH2"));
        data.insert(std::make_pair(0x12483,"CUNEIFORM SIGN BAD TIMES DISH TENU"));
        data.insert(std::make_pair(0x12484,"CUNEIFORM SIGN BAHAR2 TIMES AB2"));
        data.insert(std::make_pair(0x12485,"CUNEIFORM SIGN BAHAR2 TIMES NI"));
        data.insert(std::make_pair(0x12486,"CUNEIFORM SIGN BAHAR2 TIMES ZA"));
        data.insert(std::make_pair(0x12487,"CUNEIFORM SIGN BU OVER BU TIMES NA2"));
        data.insert(std::make_pair(0x12488,"CUNEIFORM SIGN DA TIMES TAK4"));
        data.insert(std::make_pair(0x12489,"CUNEIFORM SIGN DAG TIMES KUR"));
        data.insert(std::make_pair(0x1248a,"CUNEIFORM SIGN DIM TIMES IGI"));
        data.insert(std::make_pair(0x1248b,"CUNEIFORM SIGN DIM TIMES U U U"));
        data.insert(std::make_pair(0x1248c,"CUNEIFORM SIGN DIM2 TIMES UD"));
        data.insert(std::make_pair(0x1248d,"CUNEIFORM SIGN DUG TIMES ANSHE"));
        data.insert(std::make_pair(0x1248e,"CUNEIFORM SIGN DUG TIMES ASH"));
        data.insert(std::make_pair(0x1248f,"CUNEIFORM SIGN DUG TIMES ASH AT LEFT"));
        data.insert(std::make_pair(0x12490,"CUNEIFORM SIGN DUG TIMES DIN"));
        data.insert(std::make_pair(0x12491,"CUNEIFORM SIGN DUG TIMES DUN"));
        data.insert(std::make_pair(0x12492,"CUNEIFORM SIGN DUG TIMES ERIN2"));
        data.insert(std::make_pair(0x12493,"CUNEIFORM SIGN DUG TIMES GA"));
        data.insert(std::make_pair(0x12494,"CUNEIFORM SIGN DUG TIMES GI"));
        data.insert(std::make_pair(0x12495,"CUNEIFORM SIGN DUG TIMES GIR2 GUNU"));
        data.insert(std::make_pair(0x12496,"CUNEIFORM SIGN DUG TIMES GISH"));
        data.insert(std::make_pair(0x12497,"CUNEIFORM SIGN DUG TIMES HA"));
        data.insert(std::make_pair(0x12498,"CUNEIFORM SIGN DUG TIMES HI"));
        data.insert(std::make_pair(0x12499,"CUNEIFORM SIGN DUG TIMES IGI GUNU"));
        data.insert(std::make_pair(0x1249a,"CUNEIFORM SIGN DUG TIMES KASKAL"));
        data.insert(std::make_pair(0x1249b,"CUNEIFORM SIGN DUG TIMES KUR"));
        data.insert(std::make_pair(0x1249c,"CUNEIFORM SIGN DUG TIMES KUSHU2"));
        data.insert(std::make_pair(0x1249d,"CUNEIFORM SIGN DUG TIMES KUSHU2 PLUS KASKAL"));
        data.insert(std::make_pair(0x1249e,"CUNEIFORM SIGN DUG TIMES LAK-020"));
        data.insert(std::make_pair(0x1249f,"CUNEIFORM SIGN DUG TIMES LAM"));
        data.insert(std::make_pair(0x124a0,"CUNEIFORM SIGN DUG TIMES LAM TIMES KUR"));
        data.insert(std::make_pair(0x124a1,"CUNEIFORM SIGN DUG TIMES LUH PLUS GISH"));
        data.insert(std::make_pair(0x124a2,"CUNEIFORM SIGN DUG TIMES MASH"));
        data.insert(std::make_pair(0x124a3,"CUNEIFORM SIGN DUG TIMES MES"));
        data.insert(std::make_pair(0x124a4,"CUNEIFORM SIGN DUG TIMES MI"));
        data.insert(std::make_pair(0x124a5,"CUNEIFORM SIGN DUG TIMES NI"));
        data.insert(std::make_pair(0x124a6,"CUNEIFORM SIGN DUG TIMES PI"));
        data.insert(std::make_pair(0x124a7,"CUNEIFORM SIGN DUG TIMES SHE"));
        data.insert(std::make_pair(0x124a8,"CUNEIFORM SIGN DUG TIMES SI GUNU"));
        data.insert(std::make_pair(0x124a9,"CUNEIFORM SIGN E2 TIMES KUR"));
        data.insert(std::make_pair(0x124aa,"CUNEIFORM SIGN E2 TIMES PAP"));
        data.insert(std::make_pair(0x124ab,"CUNEIFORM SIGN ERIN2 X"));
        data.insert(std::make_pair(0x124ac,"CUNEIFORM SIGN ESH2 CROSSING ESH2"));
        data.insert(std::make_pair(0x124ad,"CUNEIFORM SIGN EZEN SHESHIG TIMES ASH"));
        data.insert(std::make_pair(0x124ae,"CUNEIFORM SIGN EZEN SHESHIG TIMES HI"));
        data.insert(std::make_pair(0x124af,"CUNEIFORM SIGN EZEN SHESHIG TIMES IGI GUNU"));
        data.insert(std::make_pair(0x124b0,"CUNEIFORM SIGN EZEN SHESHIG TIMES LA"));
        data.insert(std::make_pair(0x124b1,"CUNEIFORM SIGN EZEN SHESHIG TIMES LAL"));
        data.insert(std::make_pair(0x124b2,"CUNEIFORM SIGN EZEN SHESHIG TIMES ME"));
        data.insert(std::make_pair(0x124b3,"CUNEIFORM SIGN EZEN SHESHIG TIMES MES"));
        data.insert(std::make_pair(0x124b4,"CUNEIFORM SIGN EZEN SHESHIG TIMES SU"));
        data.insert(std::make_pair(0x124b5,"CUNEIFORM SIGN EZEN TIMES SU"));
        data.insert(std::make_pair(0x124b6,"CUNEIFORM SIGN GA2 TIMES BAHAR2"));
        data.insert(std::make_pair(0x124b7,"CUNEIFORM SIGN GA2 TIMES DIM GUNU"));
        data.insert(std::make_pair(0x124b8,"CUNEIFORM SIGN GA2 TIMES DUG TIMES IGI GUNU"));
        data.insert(std::make_pair(0x124b9,"CUNEIFORM SIGN GA2 TIMES DUG TIMES KASKAL"));
        data.insert(std::make_pair(0x124ba,"CUNEIFORM SIGN GA2 TIMES EREN"));
        data.insert(std::make_pair(0x124bb,"CUNEIFORM SIGN GA2 TIMES GA"));
        data.insert(std::make_pair(0x124bc,"CUNEIFORM SIGN GA2 TIMES GAR PLUS DI"));
        data.insert(std::make_pair(0x124bd,"CUNEIFORM SIGN GA2 TIMES GAR PLUS NE"));
        data.insert(std::make_pair(0x124be,"CUNEIFORM SIGN GA2 TIMES HA PLUS A"));
        data.insert(std::make_pair(0x124bf,"CUNEIFORM SIGN GA2 TIMES KUSHU2 PLUS KASKAL"));
        data.insert(std::make_pair(0x124c0,"CUNEIFORM SIGN GA2 TIMES LAM"));
        data.insert(std::make_pair(0x124c1,"CUNEIFORM SIGN GA2 TIMES LAM TIMES KUR"));
        data.insert(std::make_pair(0x124c2,"CUNEIFORM SIGN GA2 TIMES LUH"));
        data.insert(std::make_pair(0x124c3,"CUNEIFORM SIGN GA2 TIMES MUSH"));
        data.insert(std::make_pair(0x124c4,"CUNEIFORM SIGN GA2 TIMES NE"));
        data.insert(std::make_pair(0x124c5,"CUNEIFORM SIGN GA2 TIMES NE PLUS E2"));
        data.insert(std::make_pair(0x124c6,"CUNEIFORM SIGN GA2 TIMES NE PLUS GI"));
        data.insert(std::make_pair(0x124c7,"CUNEIFORM SIGN GA2 TIMES SHIM"));
        data.insert(std::make_pair(0x124c8,"CUNEIFORM SIGN GA2 TIMES ZIZ2"));
        data.insert(std::make_pair(0x124c9,"CUNEIFORM SIGN GABA ROTATED NINETY DEGREES"));
        data.insert(std::make_pair(0x124ca,"CUNEIFORM SIGN GESHTIN TIMES U"));
        data.insert(std::make_pair(0x124cb,"CUNEIFORM SIGN GISH TIMES GISH CROSSING GISH"));
        data.insert(std::make_pair(0x124cc,"CUNEIFORM SIGN GU2 TIMES IGI GUNU"));
        data.insert(std::make_pair(0x124cd,"CUNEIFORM SIGN GUD PLUS GISH TIMES TAK4"));
        data.insert(std::make_pair(0x124ce,"CUNEIFORM SIGN HA TENU GUNU"));
        data.insert(std::make_pair(0x124cf,"CUNEIFORM SIGN HI TIMES ASH OVER HI TIMES ASH"));
        data.insert(std::make_pair(0x124d0,"CUNEIFORM SIGN KA TIMES BU"));
        data.insert(std::make_pair(0x124d1,"CUNEIFORM SIGN KA TIMES KA"));
        data.insert(std::make_pair(0x124d2,"CUNEIFORM SIGN KA TIMES U U U"));
        data.insert(std::make_pair(0x124d3,"CUNEIFORM SIGN KA TIMES UR"));
        data.insert(std::make_pair(0x124d4,"CUNEIFORM SIGN LAGAB TIMES ZU OVER ZU"));
        data.insert(std::make_pair(0x124d5,"CUNEIFORM SIGN LAK-003"));
        data.insert(std::make_pair(0x124d6,"CUNEIFORM SIGN LAK-021"));
        data.insert(std::make_pair(0x124d7,"CUNEIFORM SIGN LAK-025"));
        data.insert(std::make_pair(0x124d8,"CUNEIFORM SIGN LAK-030"));
        data.insert(std::make_pair(0x124d9,"CUNEIFORM SIGN LAK-050"));
        data.insert(std::make_pair(0x124da,"CUNEIFORM SIGN LAK-051"));
        data.insert(std::make_pair(0x124db,"CUNEIFORM SIGN LAK-062"));
        data.insert(std::make_pair(0x124dc,"CUNEIFORM SIGN LAK-079 OVER LAK-079 GUNU"));
        data.insert(std::make_pair(0x124dd,"CUNEIFORM SIGN LAK-080"));
        data.insert(std::make_pair(0x124de,"CUNEIFORM SIGN LAK-081 OVER LAK-081"));
        data.insert(std::make_pair(0x124df,"CUNEIFORM SIGN LAK-092"));
        data.insert(std::make_pair(0x124e0,"CUNEIFORM SIGN LAK-130"));
        data.insert(std::make_pair(0x124e1,"CUNEIFORM SIGN LAK-142"));
        data.insert(std::make_pair(0x124e2,"CUNEIFORM SIGN LAK-210"));
        data.insert(std::make_pair(0x124e3,"CUNEIFORM SIGN LAK-219"));
        data.insert(std::make_pair(0x124e4,"CUNEIFORM SIGN LAK-220"));
        data.insert(std::make_pair(0x124e5,"CUNEIFORM SIGN LAK-225"));
        data.insert(std::make_pair(0x124e6,"CUNEIFORM SIGN LAK-228"));
        data.insert(std::make_pair(0x124e7,"CUNEIFORM SIGN LAK-238"));
        data.insert(std::make_pair(0x124e8,"CUNEIFORM SIGN LAK-265"));
        data.insert(std::make_pair(0x124e9,"CUNEIFORM SIGN LAK-266"));
        data.insert(std::make_pair(0x124ea,"CUNEIFORM SIGN LAK-343"));
        data.insert(std::make_pair(0x124eb,"CUNEIFORM SIGN LAK-347"));
        data.insert(std::make_pair(0x124ec,"CUNEIFORM SIGN LAK-348"));
        data.insert(std::make_pair(0x124ed,"CUNEIFORM SIGN LAK-383"));
        data.insert(std::make_pair(0x124ee,"CUNEIFORM SIGN LAK-384"));
        data.insert(std::make_pair(0x124ef,"CUNEIFORM SIGN LAK-390"));
        data.insert(std::make_pair(0x124f0,"CUNEIFORM SIGN LAK-441"));
        data.insert(std::make_pair(0x124f1,"CUNEIFORM SIGN LAK-449"));
        data.insert(std::make_pair(0x124f2,"CUNEIFORM SIGN LAK-449 TIMES GU"));
        data.insert(std::make_pair(0x124f3,"CUNEIFORM SIGN LAK-449 TIMES IGI"));
        data.insert(std::make_pair(0x124f4,"CUNEIFORM SIGN LAK-449 TIMES PAP PLUS LU3"));
        data.insert(std::make_pair(0x124f5,"CUNEIFORM SIGN LAK-449 TIMES PAP PLUS PAP PLUS LU3"));
        data.insert(std::make_pair(0x124f6,"CUNEIFORM SIGN LAK-449 TIMES U2 PLUS BA"));
        data.insert(std::make_pair(0x124f7,"CUNEIFORM SIGN LAK-450"));
        data.insert(std::make_pair(0x124f8,"CUNEIFORM SIGN LAK-457"));
        data.insert(std::make_pair(0x124f9,"CUNEIFORM SIGN LAK-470"));
        data.insert(std::make_pair(0x124fa,"CUNEIFORM SIGN LAK-483"));
        data.insert(std::make_pair(0x124fb,"CUNEIFORM SIGN LAK-490"));
        data.insert(std::make_pair(0x124fc,"CUNEIFORM SIGN LAK-492"));
        data.insert(std::make_pair(0x124fd,"CUNEIFORM SIGN LAK-493"));
        data.insert(std::make_pair(0x124fe,"CUNEIFORM SIGN LAK-495"));
        data.insert(std::make_pair(0x124ff,"CUNEIFORM SIGN LAK-550"));
        data.insert(std::make_pair(0x12500,"CUNEIFORM SIGN LAK-608"));
        data.insert(std::make_pair(0x12501,"CUNEIFORM SIGN LAK-617"));
        data.insert(std::make_pair(0x12502,"CUNEIFORM SIGN LAK-617 TIMES ASH"));
        data.insert(std::make_pair(0x12503,"CUNEIFORM SIGN LAK-617 TIMES BAD"));
        data.insert(std::make_pair(0x12504,"CUNEIFORM SIGN LAK-617 TIMES DUN3 GUNU GUNU"));
        data.insert(std::make_pair(0x12505,"CUNEIFORM SIGN LAK-617 TIMES KU3"));
        data.insert(std::make_pair(0x12506,"CUNEIFORM SIGN LAK-617 TIMES LA"));
        data.insert(std::make_pair(0x12507,"CUNEIFORM SIGN LAK-617 TIMES TAR"));
        data.insert(std::make_pair(0x12508,"CUNEIFORM SIGN LAK-617 TIMES TE"));
        data.insert(std::make_pair(0x12509,"CUNEIFORM SIGN LAK-617 TIMES U2"));
        data.insert(std::make_pair(0x1250a,"CUNEIFORM SIGN LAK-617 TIMES UD"));
        data.insert(std::make_pair(0x1250b,"CUNEIFORM SIGN LAK-617 TIMES URUDA"));
        data.insert(std::make_pair(0x1250c,"CUNEIFORM SIGN LAK-636"));
        data.insert(std::make_pair(0x1250d,"CUNEIFORM SIGN LAK-648"));
        data.insert(std::make_pair(0x1250e,"CUNEIFORM SIGN LAK-648 TIMES DUB"));
        data.insert(std::make_pair(0x1250f,"CUNEIFORM SIGN LAK-648 TIMES GA"));
        data.insert(std::make_pair(0x12510,"CUNEIFORM SIGN LAK-648 TIMES IGI"));
        data.insert(std::make_pair(0x12511,"CUNEIFORM SIGN LAK-648 TIMES IGI GUNU"));
        data.insert(std::make_pair(0x12512,"CUNEIFORM SIGN LAK-648 TIMES NI"));
        data.insert(std::make_pair(0x12513,"CUNEIFORM SIGN LAK-648 TIMES PAP PLUS PAP PLUS LU3"));
        data.insert(std::make_pair(0x12514,"CUNEIFORM SIGN LAK-648 TIMES SHESH PLUS KI"));
        data.insert(std::make_pair(0x12515,"CUNEIFORM SIGN LAK-648 TIMES UD"));
        data.insert(std::make_pair(0x12516,"CUNEIFORM SIGN LAK-648 TIMES URUDA"));
        data.insert(std::make_pair(0x12517,"CUNEIFORM SIGN LAK-724"));
        data.insert(std::make_pair(0x12518,"CUNEIFORM SIGN LAK-749"));
        data.insert(std::make_pair(0x12519,"CUNEIFORM SIGN LU2 GUNU TIMES ASH"));
        data.insert(std::make_pair(0x1251a,"CUNEIFORM SIGN LU2 TIMES DISH"));
        data.insert(std::make_pair(0x1251b,"CUNEIFORM SIGN LU2 TIMES HAL"));
        data.insert(std::make_pair(0x1251c,"CUNEIFORM SIGN LU2 TIMES PAP"));
        data.insert(std::make_pair(0x1251d,"CUNEIFORM SIGN LU2 TIMES PAP PLUS PAP PLUS LU3"));
        data.insert(std::make_pair(0x1251e,"CUNEIFORM SIGN LU2 TIMES TAK4"));
        data.insert(std::make_pair(0x1251f,"CUNEIFORM SIGN MI PLUS ZA7"));
        data.insert(std::make_pair(0x12520,"CUNEIFORM SIGN MUSH OVER MUSH TIMES GA"));
        data.insert(std::make_pair(0x12521,"CUNEIFORM SIGN MUSH OVER MUSH TIMES KAK"));
        data.insert(std::make_pair(0x12522,"CUNEIFORM SIGN NINDA2 TIMES DIM GUNU"));
        data.insert(std::make_pair(0x12523,"CUNEIFORM SIGN NINDA2 TIMES GISH"));
        data.insert(std::make_pair(0x12524,"CUNEIFORM SIGN NINDA2 TIMES GUL"));
        data.insert(std::make_pair(0x12525,"CUNEIFORM SIGN NINDA2 TIMES HI"));
        data.insert(std::make_pair(0x12526,"CUNEIFORM SIGN NINDA2 TIMES KESH2"));
        data.insert(std::make_pair(0x12527,"CUNEIFORM SIGN NINDA2 TIMES LAK-050"));
        data.insert(std::make_pair(0x12528,"CUNEIFORM SIGN NINDA2 TIMES MASH"));
        data.insert(std::make_pair(0x12529,"CUNEIFORM SIGN NINDA2 TIMES PAP PLUS PAP"));
        data.insert(std::make_pair(0x1252a,"CUNEIFORM SIGN NINDA2 TIMES U"));
        data.insert(std::make_pair(0x1252b,"CUNEIFORM SIGN NINDA2 TIMES U PLUS U"));
        data.insert(std::make_pair(0x1252c,"CUNEIFORM SIGN NINDA2 TIMES URUDA"));
        data.insert(std::make_pair(0x1252d,"CUNEIFORM SIGN SAG GUNU TIMES HA"));
        data.insert(std::make_pair(0x1252e,"CUNEIFORM SIGN SAG TIMES EN"));
        data.insert(std::make_pair(0x1252f,"CUNEIFORM SIGN SAG TIMES SHE AT LEFT"));
        data.insert(std::make_pair(0x12530,"CUNEIFORM SIGN SAG TIMES TAK4"));
        data.insert(std::make_pair(0x12531,"CUNEIFORM SIGN SHA6 TENU"));
        data.insert(std::make_pair(0x12532,"CUNEIFORM SIGN SHE OVER SHE"));
        data.insert(std::make_pair(0x12533,"CUNEIFORM SIGN SHE PLUS HUB2"));
        data.insert(std::make_pair(0x12534,"CUNEIFORM SIGN SHE PLUS NAM2"));
        data.insert(std::make_pair(0x12535,"CUNEIFORM SIGN SHE PLUS SAR"));
        data.insert(std::make_pair(0x12536,"CUNEIFORM SIGN SHU2 PLUS DUG TIMES NI"));
        data.insert(std::make_pair(0x12537,"CUNEIFORM SIGN SHU2 PLUS E2 TIMES AN"));
        data.insert(std::make_pair(0x12538,"CUNEIFORM SIGN SI TIMES TAK4"));
        data.insert(std::make_pair(0x12539,"CUNEIFORM SIGN TAK4 PLUS SAG"));
        data.insert(std::make_pair(0x1253a,"CUNEIFORM SIGN TUM TIMES GAN2 TENU"));
        data.insert(std::make_pair(0x1253b,"CUNEIFORM SIGN TUM TIMES THREE DISH"));
        data.insert(std::make_pair(0x1253c,"CUNEIFORM SIGN UR2 INVERTED"));
        data.insert(std::make_pair(0x1253d,"CUNEIFORM SIGN UR2 TIMES UD"));
        data.insert(std::make_pair(0x1253e,"CUNEIFORM SIGN URU TIMES DARA3"));
        data.insert(std::make_pair(0x1253f,"CUNEIFORM SIGN URU TIMES LAK-668"));
        data.insert(std::make_pair(0x12540,"CUNEIFORM SIGN URU TIMES LU3"));
        data.insert(std::make_pair(0x12541,"CUNEIFORM SIGN ZA7"));
        data.insert(std::make_pair(0x12542,"CUNEIFORM SIGN ZU OVER ZU PLUS SAR"));
        data.insert(std::make_pair(0x12543,"CUNEIFORM SIGN ZU5 TIMES THREE DISH TENU"));
        data.insert(std::make_pair(0x12f90,"CYPRO-MINOAN SIGN CM001"));
        data.insert(std::make_pair(0x12f91,"CYPRO-MINOAN SIGN CM002"));
        data.insert(std::make_pair(0x12f92,"CYPRO-MINOAN SIGN CM004"));
        data.insert(std::make_pair(0x12f93,"CYPRO-MINOAN SIGN CM005"));
        data.insert(std::make_pair(0x12f94,"CYPRO-MINOAN SIGN CM006"));
        data.insert(std::make_pair(0x12f95,"CYPRO-MINOAN SIGN CM007"));
        data.insert(std::make_pair(0x12f96,"CYPRO-MINOAN SIGN CM008"));
        data.insert(std::make_pair(0x12f97,"CYPRO-MINOAN SIGN CM009"));
        data.insert(std::make_pair(0x12f98,"CYPRO-MINOAN SIGN CM010"));
        data.insert(std::make_pair(0x12f99,"CYPRO-MINOAN SIGN CM011"));
        data.insert(std::make_pair(0x12f9a,"CYPRO-MINOAN SIGN CM012"));
        data.insert(std::make_pair(0x12f9b,"CYPRO-MINOAN SIGN CM012B"));
        data.insert(std::make_pair(0x12f9c,"CYPRO-MINOAN SIGN CM013"));
        data.insert(std::make_pair(0x12f9d,"CYPRO-MINOAN SIGN CM015"));
        data.insert(std::make_pair(0x12f9e,"CYPRO-MINOAN SIGN CM017"));
        data.insert(std::make_pair(0x12f9f,"CYPRO-MINOAN SIGN CM019"));
        data.insert(std::make_pair(0x12fa0,"CYPRO-MINOAN SIGN CM021"));
        data.insert(std::make_pair(0x12fa1,"CYPRO-MINOAN SIGN CM023"));
        data.insert(std::make_pair(0x12fa2,"CYPRO-MINOAN SIGN CM024"));
        data.insert(std::make_pair(0x12fa3,"CYPRO-MINOAN SIGN CM025"));
        data.insert(std::make_pair(0x12fa4,"CYPRO-MINOAN SIGN CM026"));
        data.insert(std::make_pair(0x12fa5,"CYPRO-MINOAN SIGN CM027"));
        data.insert(std::make_pair(0x12fa6,"CYPRO-MINOAN SIGN CM028"));
        data.insert(std::make_pair(0x12fa7,"CYPRO-MINOAN SIGN CM029"));
        data.insert(std::make_pair(0x12fa8,"CYPRO-MINOAN SIGN CM030"));
        data.insert(std::make_pair(0x12fa9,"CYPRO-MINOAN SIGN CM033"));
        data.insert(std::make_pair(0x12faa,"CYPRO-MINOAN SIGN CM034"));
        data.insert(std::make_pair(0x12fab,"CYPRO-MINOAN SIGN CM035"));
        data.insert(std::make_pair(0x12fac,"CYPRO-MINOAN SIGN CM036"));
        data.insert(std::make_pair(0x12fad,"CYPRO-MINOAN SIGN CM037"));
        data.insert(std::make_pair(0x12fae,"CYPRO-MINOAN SIGN CM038"));
        data.insert(std::make_pair(0x12faf,"CYPRO-MINOAN SIGN CM039"));
        data.insert(std::make_pair(0x12fb0,"CYPRO-MINOAN SIGN CM040"));
        data.insert(std::make_pair(0x12fb1,"CYPRO-MINOAN SIGN CM041"));
        data.insert(std::make_pair(0x12fb2,"CYPRO-MINOAN SIGN CM044"));
        data.insert(std::make_pair(0x12fb3,"CYPRO-MINOAN SIGN CM046"));
        data.insert(std::make_pair(0x12fb4,"CYPRO-MINOAN SIGN CM047"));
        data.insert(std::make_pair(0x12fb5,"CYPRO-MINOAN SIGN CM049"));
        data.insert(std::make_pair(0x12fb6,"CYPRO-MINOAN SIGN CM050"));
        data.insert(std::make_pair(0x12fb7,"CYPRO-MINOAN SIGN CM051"));
        data.insert(std::make_pair(0x12fb8,"CYPRO-MINOAN SIGN CM052"));
        data.insert(std::make_pair(0x12fb9,"CYPRO-MINOAN SIGN CM053"));
        data.insert(std::make_pair(0x12fba,"CYPRO-MINOAN SIGN CM054"));
        data.insert(std::make_pair(0x12fbb,"CYPRO-MINOAN SIGN CM055"));
        data.insert(std::make_pair(0x12fbc,"CYPRO-MINOAN SIGN CM056"));
        data.insert(std::make_pair(0x12fbd,"CYPRO-MINOAN SIGN CM058"));
        data.insert(std::make_pair(0x12fbe,"CYPRO-MINOAN SIGN CM059"));
        data.insert(std::make_pair(0x12fbf,"CYPRO-MINOAN SIGN CM060"));
        data.insert(std::make_pair(0x12fc0,"CYPRO-MINOAN SIGN CM061"));
        data.insert(std::make_pair(0x12fc1,"CYPRO-MINOAN SIGN CM062"));
        data.insert(std::make_pair(0x12fc2,"CYPRO-MINOAN SIGN CM063"));
        data.insert(std::make_pair(0x12fc3,"CYPRO-MINOAN SIGN CM064"));
        data.insert(std::make_pair(0x12fc4,"CYPRO-MINOAN SIGN CM066"));
        data.insert(std::make_pair(0x12fc5,"CYPRO-MINOAN SIGN CM067"));
        data.insert(std::make_pair(0x12fc6,"CYPRO-MINOAN SIGN CM068"));
        data.insert(std::make_pair(0x12fc7,"CYPRO-MINOAN SIGN CM069"));
        data.insert(std::make_pair(0x12fc8,"CYPRO-MINOAN SIGN CM070"));
        data.insert(std::make_pair(0x12fc9,"CYPRO-MINOAN SIGN CM071"));
        data.insert(std::make_pair(0x12fca,"CYPRO-MINOAN SIGN CM072"));
        data.insert(std::make_pair(0x12fcb,"CYPRO-MINOAN SIGN CM073"));
        data.insert(std::make_pair(0x12fcc,"CYPRO-MINOAN SIGN CM074"));
        data.insert(std::make_pair(0x12fcd,"CYPRO-MINOAN SIGN CM075"));
        data.insert(std::make_pair(0x12fce,"CYPRO-MINOAN SIGN CM075B"));
        data.insert(std::make_pair(0x12fcf,"CYPRO-MINOAN SIGN CM076"));
        data.insert(std::make_pair(0x12fd0,"CYPRO-MINOAN SIGN CM078"));
        data.insert(std::make_pair(0x12fd1,"CYPRO-MINOAN SIGN CM079"));
        data.insert(std::make_pair(0x12fd2,"CYPRO-MINOAN SIGN CM080"));
        data.insert(std::make_pair(0x12fd3,"CYPRO-MINOAN SIGN CM081"));
        data.insert(std::make_pair(0x12fd4,"CYPRO-MINOAN SIGN CM082"));
        data.insert(std::make_pair(0x12fd5,"CYPRO-MINOAN SIGN CM083"));
        data.insert(std::make_pair(0x12fd6,"CYPRO-MINOAN SIGN CM084"));
        data.insert(std::make_pair(0x12fd7,"CYPRO-MINOAN SIGN CM085"));
        data.insert(std::make_pair(0x12fd8,"CYPRO-MINOAN SIGN CM086"));
        data.insert(std::make_pair(0x12fd9,"CYPRO-MINOAN SIGN CM087"));
        data.insert(std::make_pair(0x12fda,"CYPRO-MINOAN SIGN CM088"));
        data.insert(std::make_pair(0x12fdb,"CYPRO-MINOAN SIGN CM089"));
        data.insert(std::make_pair(0x12fdc,"CYPRO-MINOAN SIGN CM090"));
        data.insert(std::make_pair(0x12fdd,"CYPRO-MINOAN SIGN CM091"));
        data.insert(std::make_pair(0x12fde,"CYPRO-MINOAN SIGN CM092"));
        data.insert(std::make_pair(0x12fdf,"CYPRO-MINOAN SIGN CM094"));
        data.insert(std::make_pair(0x12fe0,"CYPRO-MINOAN SIGN CM095"));
        data.insert(std::make_pair(0x12fe1,"CYPRO-MINOAN SIGN CM096"));
        data.insert(std::make_pair(0x12fe2,"CYPRO-MINOAN SIGN CM097"));
        data.insert(std::make_pair(0x12fe3,"CYPRO-MINOAN SIGN CM098"));
        data.insert(std::make_pair(0x12fe4,"CYPRO-MINOAN SIGN CM099"));
        data.insert(std::make_pair(0x12fe5,"CYPRO-MINOAN SIGN CM100"));
        data.insert(std::make_pair(0x12fe6,"CYPRO-MINOAN SIGN CM101"));
        data.insert(std::make_pair(0x12fe7,"CYPRO-MINOAN SIGN CM102"));
        data.insert(std::make_pair(0x12fe8,"CYPRO-MINOAN SIGN CM103"));
        data.insert(std::make_pair(0x12fe9,"CYPRO-MINOAN SIGN CM104"));
        data.insert(std::make_pair(0x12fea,"CYPRO-MINOAN SIGN CM105"));
        data.insert(std::make_pair(0x12feb,"CYPRO-MINOAN SIGN CM107"));
        data.insert(std::make_pair(0x12fec,"CYPRO-MINOAN SIGN CM108"));
        data.insert(std::make_pair(0x12fed,"CYPRO-MINOAN SIGN CM109"));
        data.insert(std::make_pair(0x12fee,"CYPRO-MINOAN SIGN CM110"));
        data.insert(std::make_pair(0x12fef,"CYPRO-MINOAN SIGN CM112"));
        data.insert(std::make_pair(0x12ff0,"CYPRO-MINOAN SIGN CM114"));
        data.insert(std::make_pair(0x12ff1,"CYPRO-MINOAN SIGN CM301"));
        data.insert(std::make_pair(0x12ff2,"CYPRO-MINOAN SIGN CM302"));
        data.insert(std::make_pair(0x13000,"EGYPTIAN HIEROGLYPH A001"));
        data.insert(std::make_pair(0x13001,"EGYPTIAN HIEROGLYPH A002"));
        data.insert(std::make_pair(0x13002,"EGYPTIAN HIEROGLYPH A003"));
        data.insert(std::make_pair(0x13003,"EGYPTIAN HIEROGLYPH A004"));
        data.insert(std::make_pair(0x13004,"EGYPTIAN HIEROGLYPH A005"));
        data.insert(std::make_pair(0x13005,"EGYPTIAN HIEROGLYPH A005A"));
        data.insert(std::make_pair(0x13006,"EGYPTIAN HIEROGLYPH A006"));
        data.insert(std::make_pair(0x13007,"EGYPTIAN HIEROGLYPH A006A"));
        data.insert(std::make_pair(0x13008,"EGYPTIAN HIEROGLYPH A006B"));
        data.insert(std::make_pair(0x13009,"EGYPTIAN HIEROGLYPH A007"));
        data.insert(std::make_pair(0x1300a,"EGYPTIAN HIEROGLYPH A008"));
        data.insert(std::make_pair(0x1300b,"EGYPTIAN HIEROGLYPH A009"));
        data.insert(std::make_pair(0x1300c,"EGYPTIAN HIEROGLYPH A010"));
        data.insert(std::make_pair(0x1300d,"EGYPTIAN HIEROGLYPH A011"));
        data.insert(std::make_pair(0x1300e,"EGYPTIAN HIEROGLYPH A012"));
        data.insert(std::make_pair(0x1300f,"EGYPTIAN HIEROGLYPH A013"));
        data.insert(std::make_pair(0x13010,"EGYPTIAN HIEROGLYPH A014"));
        data.insert(std::make_pair(0x13011,"EGYPTIAN HIEROGLYPH A014A"));
        data.insert(std::make_pair(0x13012,"EGYPTIAN HIEROGLYPH A015"));
        data.insert(std::make_pair(0x13013,"EGYPTIAN HIEROGLYPH A016"));
        data.insert(std::make_pair(0x13014,"EGYPTIAN HIEROGLYPH A017"));
        data.insert(std::make_pair(0x13015,"EGYPTIAN HIEROGLYPH A017A"));
        data.insert(std::make_pair(0x13016,"EGYPTIAN HIEROGLYPH A018"));
        data.insert(std::make_pair(0x13017,"EGYPTIAN HIEROGLYPH A019"));
        data.insert(std::make_pair(0x13018,"EGYPTIAN HIEROGLYPH A020"));
        data.insert(std::make_pair(0x13019,"EGYPTIAN HIEROGLYPH A021"));
        data.insert(std::make_pair(0x1301a,"EGYPTIAN HIEROGLYPH A022"));
        data.insert(std::make_pair(0x1301b,"EGYPTIAN HIEROGLYPH A023"));
        data.insert(std::make_pair(0x1301c,"EGYPTIAN HIEROGLYPH A024"));
        data.insert(std::make_pair(0x1301d,"EGYPTIAN HIEROGLYPH A025"));
        data.insert(std::make_pair(0x1301e,"EGYPTIAN HIEROGLYPH A026"));
        data.insert(std::make_pair(0x1301f,"EGYPTIAN HIEROGLYPH A027"));
        data.insert(std::make_pair(0x13020,"EGYPTIAN HIEROGLYPH A028"));
        data.insert(std::make_pair(0x13021,"EGYPTIAN HIEROGLYPH A029"));
        data.insert(std::make_pair(0x13022,"EGYPTIAN HIEROGLYPH A030"));
        data.insert(std::make_pair(0x13023,"EGYPTIAN HIEROGLYPH A031"));
        data.insert(std::make_pair(0x13024,"EGYPTIAN HIEROGLYPH A032"));
        data.insert(std::make_pair(0x13025,"EGYPTIAN HIEROGLYPH A032A"));
        data.insert(std::make_pair(0x13026,"EGYPTIAN HIEROGLYPH A033"));
        data.insert(std::make_pair(0x13027,"EGYPTIAN HIEROGLYPH A034"));
        data.insert(std::make_pair(0x13028,"EGYPTIAN HIEROGLYPH A035"));
        data.insert(std::make_pair(0x13029,"EGYPTIAN HIEROGLYPH A036"));
        data.insert(std::make_pair(0x1302a,"EGYPTIAN HIEROGLYPH A037"));
        data.insert(std::make_pair(0x1302b,"EGYPTIAN HIEROGLYPH A038"));
        data.insert(std::make_pair(0x1302c,"EGYPTIAN HIEROGLYPH A039"));
        data.insert(std::make_pair(0x1302d,"EGYPTIAN HIEROGLYPH A040"));
        data.insert(std::make_pair(0x1302e,"EGYPTIAN HIEROGLYPH A040A"));
        data.insert(std::make_pair(0x1302f,"EGYPTIAN HIEROGLYPH A041"));
        data.insert(std::make_pair(0x13030,"EGYPTIAN HIEROGLYPH A042"));
        data.insert(std::make_pair(0x13031,"EGYPTIAN HIEROGLYPH A042A"));
        data.insert(std::make_pair(0x13032,"EGYPTIAN HIEROGLYPH A043"));
        data.insert(std::make_pair(0x13033,"EGYPTIAN HIEROGLYPH A043A"));
        data.insert(std::make_pair(0x13034,"EGYPTIAN HIEROGLYPH A044"));
        data.insert(std::make_pair(0x13035,"EGYPTIAN HIEROGLYPH A045"));
        data.insert(std::make_pair(0x13036,"EGYPTIAN HIEROGLYPH A045A"));
        data.insert(std::make_pair(0x13037,"EGYPTIAN HIEROGLYPH A046"));
        data.insert(std::make_pair(0x13038,"EGYPTIAN HIEROGLYPH A047"));
        data.insert(std::make_pair(0x13039,"EGYPTIAN HIEROGLYPH A048"));
        data.insert(std::make_pair(0x1303a,"EGYPTIAN HIEROGLYPH A049"));
        data.insert(std::make_pair(0x1303b,"EGYPTIAN HIEROGLYPH A050"));
        data.insert(std::make_pair(0x1303c,"EGYPTIAN HIEROGLYPH A051"));
        data.insert(std::make_pair(0x1303d,"EGYPTIAN HIEROGLYPH A052"));
        data.insert(std::make_pair(0x1303e,"EGYPTIAN HIEROGLYPH A053"));
        data.insert(std::make_pair(0x1303f,"EGYPTIAN HIEROGLYPH A054"));
        data.insert(std::make_pair(0x13040,"EGYPTIAN HIEROGLYPH A055"));
        data.insert(std::make_pair(0x13041,"EGYPTIAN HIEROGLYPH A056"));
        data.insert(std::make_pair(0x13042,"EGYPTIAN HIEROGLYPH A057"));
        data.insert(std::make_pair(0x13043,"EGYPTIAN HIEROGLYPH A058"));
        data.insert(std::make_pair(0x13044,"EGYPTIAN HIEROGLYPH A059"));
        data.insert(std::make_pair(0x13045,"EGYPTIAN HIEROGLYPH A060"));
        data.insert(std::make_pair(0x13046,"EGYPTIAN HIEROGLYPH A061"));
        data.insert(std::make_pair(0x13047,"EGYPTIAN HIEROGLYPH A062"));
        data.insert(std::make_pair(0x13048,"EGYPTIAN HIEROGLYPH A063"));
        data.insert(std::make_pair(0x13049,"EGYPTIAN HIEROGLYPH A064"));
        data.insert(std::make_pair(0x1304a,"EGYPTIAN HIEROGLYPH A065"));
        data.insert(std::make_pair(0x1304b,"EGYPTIAN HIEROGLYPH A066"));
        data.insert(std::make_pair(0x1304c,"EGYPTIAN HIEROGLYPH A067"));
        data.insert(std::make_pair(0x1304d,"EGYPTIAN HIEROGLYPH A068"));
        data.insert(std::make_pair(0x1304e,"EGYPTIAN HIEROGLYPH A069"));
        data.insert(std::make_pair(0x1304f,"EGYPTIAN HIEROGLYPH A070"));
        data.insert(std::make_pair(0x13050,"EGYPTIAN HIEROGLYPH B001"));
        data.insert(std::make_pair(0x13051,"EGYPTIAN HIEROGLYPH B002"));
        data.insert(std::make_pair(0x13052,"EGYPTIAN HIEROGLYPH B003"));
        data.insert(std::make_pair(0x13053,"EGYPTIAN HIEROGLYPH B004"));
        data.insert(std::make_pair(0x13054,"EGYPTIAN HIEROGLYPH B005"));
        data.insert(std::make_pair(0x13055,"EGYPTIAN HIEROGLYPH B005A"));
        data.insert(std::make_pair(0x13056,"EGYPTIAN HIEROGLYPH B006"));
        data.insert(std::make_pair(0x13057,"EGYPTIAN HIEROGLYPH B007"));
        data.insert(std::make_pair(0x13058,"EGYPTIAN HIEROGLYPH B008"));
        data.insert(std::make_pair(0x13059,"EGYPTIAN HIEROGLYPH B009"));
        data.insert(std::make_pair(0x1305a,"EGYPTIAN HIEROGLYPH C001"));
        data.insert(std::make_pair(0x1305b,"EGYPTIAN HIEROGLYPH C002"));
        data.insert(std::make_pair(0x1305c,"EGYPTIAN HIEROGLYPH C002A"));
        data.insert(std::make_pair(0x1305d,"EGYPTIAN HIEROGLYPH C002B"));
        data.insert(std::make_pair(0x1305e,"EGYPTIAN HIEROGLYPH C002C"));
        data.insert(std::make_pair(0x1305f,"EGYPTIAN HIEROGLYPH C003"));
        data.insert(std::make_pair(0x13060,"EGYPTIAN HIEROGLYPH C004"));
        data.insert(std::make_pair(0x13061,"EGYPTIAN HIEROGLYPH C005"));
        data.insert(std::make_pair(0x13062,"EGYPTIAN HIEROGLYPH C006"));
        data.insert(std::make_pair(0x13063,"EGYPTIAN HIEROGLYPH C007"));
        data.insert(std::make_pair(0x13064,"EGYPTIAN HIEROGLYPH C008"));
        data.insert(std::make_pair(0x13065,"EGYPTIAN HIEROGLYPH C009"));
        data.insert(std::make_pair(0x13066,"EGYPTIAN HIEROGLYPH C010"));
        data.insert(std::make_pair(0x13067,"EGYPTIAN HIEROGLYPH C010A"));
        data.insert(std::make_pair(0x13068,"EGYPTIAN HIEROGLYPH C011"));
        data.insert(std::make_pair(0x13069,"EGYPTIAN HIEROGLYPH C012"));
        data.insert(std::make_pair(0x1306a,"EGYPTIAN HIEROGLYPH C013"));
        data.insert(std::make_pair(0x1306b,"EGYPTIAN HIEROGLYPH C014"));
        data.insert(std::make_pair(0x1306c,"EGYPTIAN HIEROGLYPH C015"));
        data.insert(std::make_pair(0x1306d,"EGYPTIAN HIEROGLYPH C016"));
        data.insert(std::make_pair(0x1306e,"EGYPTIAN HIEROGLYPH C017"));
        data.insert(std::make_pair(0x1306f,"EGYPTIAN HIEROGLYPH C018"));
        data.insert(std::make_pair(0x13070,"EGYPTIAN HIEROGLYPH C019"));
        data.insert(std::make_pair(0x13071,"EGYPTIAN HIEROGLYPH C020"));
        data.insert(std::make_pair(0x13072,"EGYPTIAN HIEROGLYPH C021"));
        data.insert(std::make_pair(0x13073,"EGYPTIAN HIEROGLYPH C022"));
        data.insert(std::make_pair(0x13074,"EGYPTIAN HIEROGLYPH C023"));
        data.insert(std::make_pair(0x13075,"EGYPTIAN HIEROGLYPH C024"));
        data.insert(std::make_pair(0x13076,"EGYPTIAN HIEROGLYPH D001"));
        data.insert(std::make_pair(0x13077,"EGYPTIAN HIEROGLYPH D002"));
        data.insert(std::make_pair(0x13078,"EGYPTIAN HIEROGLYPH D003"));
        data.insert(std::make_pair(0x13079,"EGYPTIAN HIEROGLYPH D004"));
        data.insert(std::make_pair(0x1307a,"EGYPTIAN HIEROGLYPH D005"));
        data.insert(std::make_pair(0x1307b,"EGYPTIAN HIEROGLYPH D006"));
        data.insert(std::make_pair(0x1307c,"EGYPTIAN HIEROGLYPH D007"));
        data.insert(std::make_pair(0x1307d,"EGYPTIAN HIEROGLYPH D008"));
        data.insert(std::make_pair(0x1307e,"EGYPTIAN HIEROGLYPH D008A"));
        data.insert(std::make_pair(0x1307f,"EGYPTIAN HIEROGLYPH D009"));
        data.insert(std::make_pair(0x13080,"EGYPTIAN HIEROGLYPH D010"));
        data.insert(std::make_pair(0x13081,"EGYPTIAN HIEROGLYPH D011"));
        data.insert(std::make_pair(0x13082,"EGYPTIAN HIEROGLYPH D012"));
        data.insert(std::make_pair(0x13083,"EGYPTIAN HIEROGLYPH D013"));
        data.insert(std::make_pair(0x13084,"EGYPTIAN HIEROGLYPH D014"));
        data.insert(std::make_pair(0x13085,"EGYPTIAN HIEROGLYPH D015"));
        data.insert(std::make_pair(0x13086,"EGYPTIAN HIEROGLYPH D016"));
        data.insert(std::make_pair(0x13087,"EGYPTIAN HIEROGLYPH D017"));
        data.insert(std::make_pair(0x13088,"EGYPTIAN HIEROGLYPH D018"));
        data.insert(std::make_pair(0x13089,"EGYPTIAN HIEROGLYPH D019"));
        data.insert(std::make_pair(0x1308a,"EGYPTIAN HIEROGLYPH D020"));
        data.insert(std::make_pair(0x1308b,"EGYPTIAN HIEROGLYPH D021"));
        data.insert(std::make_pair(0x1308c,"EGYPTIAN HIEROGLYPH D022"));
        data.insert(std::make_pair(0x1308d,"EGYPTIAN HIEROGLYPH D023"));
        data.insert(std::make_pair(0x1308e,"EGYPTIAN HIEROGLYPH D024"));
        data.insert(std::make_pair(0x1308f,"EGYPTIAN HIEROGLYPH D025"));
        data.insert(std::make_pair(0x13090,"EGYPTIAN HIEROGLYPH D026"));
        data.insert(std::make_pair(0x13091,"EGYPTIAN HIEROGLYPH D027"));
        data.insert(std::make_pair(0x13092,"EGYPTIAN HIEROGLYPH D027A"));
        data.insert(std::make_pair(0x13093,"EGYPTIAN HIEROGLYPH D028"));
        data.insert(std::make_pair(0x13094,"EGYPTIAN HIEROGLYPH D029"));
        data.insert(std::make_pair(0x13095,"EGYPTIAN HIEROGLYPH D030"));
        data.insert(std::make_pair(0x13096,"EGYPTIAN HIEROGLYPH D031"));
        data.insert(std::make_pair(0x13097,"EGYPTIAN HIEROGLYPH D031A"));
        data.insert(std::make_pair(0x13098,"EGYPTIAN HIEROGLYPH D032"));
        data.insert(std::make_pair(0x13099,"EGYPTIAN HIEROGLYPH D033"));
        data.insert(std::make_pair(0x1309a,"EGYPTIAN HIEROGLYPH D034"));
        data.insert(std::make_pair(0x1309b,"EGYPTIAN HIEROGLYPH D034A"));
        data.insert(std::make_pair(0x1309c,"EGYPTIAN HIEROGLYPH D035"));
        data.insert(std::make_pair(0x1309d,"EGYPTIAN HIEROGLYPH D036"));
        data.insert(std::make_pair(0x1309e,"EGYPTIAN HIEROGLYPH D037"));
        data.insert(std::make_pair(0x1309f,"EGYPTIAN HIEROGLYPH D038"));
        data.insert(std::make_pair(0x130a0,"EGYPTIAN HIEROGLYPH D039"));
        data.insert(std::make_pair(0x130a1,"EGYPTIAN HIEROGLYPH D040"));
        data.insert(std::make_pair(0x130a2,"EGYPTIAN HIEROGLYPH D041"));
        data.insert(std::make_pair(0x130a3,"EGYPTIAN HIEROGLYPH D042"));
        data.insert(std::make_pair(0x130a4,"EGYPTIAN HIEROGLYPH D043"));
        data.insert(std::make_pair(0x130a5,"EGYPTIAN HIEROGLYPH D044"));
        data.insert(std::make_pair(0x130a6,"EGYPTIAN HIEROGLYPH D045"));
        data.insert(std::make_pair(0x130a7,"EGYPTIAN HIEROGLYPH D046"));
        data.insert(std::make_pair(0x130a8,"EGYPTIAN HIEROGLYPH D046A"));
        data.insert(std::make_pair(0x130a9,"EGYPTIAN HIEROGLYPH D047"));
        data.insert(std::make_pair(0x130aa,"EGYPTIAN HIEROGLYPH D048"));
        data.insert(std::make_pair(0x130ab,"EGYPTIAN HIEROGLYPH D048A"));
        data.insert(std::make_pair(0x130ac,"EGYPTIAN HIEROGLYPH D049"));
        data.insert(std::make_pair(0x130ad,"EGYPTIAN HIEROGLYPH D050"));
        data.insert(std::make_pair(0x130ae,"EGYPTIAN HIEROGLYPH D050A"));
        data.insert(std::make_pair(0x130af,"EGYPTIAN HIEROGLYPH D050B"));
        data.insert(std::make_pair(0x130b0,"EGYPTIAN HIEROGLYPH D050C"));
        data.insert(std::make_pair(0x130b1,"EGYPTIAN HIEROGLYPH D050D"));
        data.insert(std::make_pair(0x130b2,"EGYPTIAN HIEROGLYPH D050E"));
        data.insert(std::make_pair(0x130b3,"EGYPTIAN HIEROGLYPH D050F"));
        data.insert(std::make_pair(0x130b4,"EGYPTIAN HIEROGLYPH D050G"));
        data.insert(std::make_pair(0x130b5,"EGYPTIAN HIEROGLYPH D050H"));
        data.insert(std::make_pair(0x130b6,"EGYPTIAN HIEROGLYPH D050I"));
        data.insert(std::make_pair(0x130b7,"EGYPTIAN HIEROGLYPH D051"));
        data.insert(std::make_pair(0x130b8,"EGYPTIAN HIEROGLYPH D052"));
        data.insert(std::make_pair(0x130b9,"EGYPTIAN HIEROGLYPH D052A"));
        data.insert(std::make_pair(0x130ba,"EGYPTIAN HIEROGLYPH D053"));
        data.insert(std::make_pair(0x130bb,"EGYPTIAN HIEROGLYPH D054"));
        data.insert(std::make_pair(0x130bc,"EGYPTIAN HIEROGLYPH D054A"));
        data.insert(std::make_pair(0x130bd,"EGYPTIAN HIEROGLYPH D055"));
        data.insert(std::make_pair(0x130be,"EGYPTIAN HIEROGLYPH D056"));
        data.insert(std::make_pair(0x130bf,"EGYPTIAN HIEROGLYPH D057"));
        data.insert(std::make_pair(0x130c0,"EGYPTIAN HIEROGLYPH D058"));
        data.insert(std::make_pair(0x130c1,"EGYPTIAN HIEROGLYPH D059"));
        data.insert(std::make_pair(0x130c2,"EGYPTIAN HIEROGLYPH D060"));
        data.insert(std::make_pair(0x130c3,"EGYPTIAN HIEROGLYPH D061"));
        data.insert(std::make_pair(0x130c4,"EGYPTIAN HIEROGLYPH D062"));
        data.insert(std::make_pair(0x130c5,"EGYPTIAN HIEROGLYPH D063"));
        data.insert(std::make_pair(0x130c6,"EGYPTIAN HIEROGLYPH D064"));
        data.insert(std::make_pair(0x130c7,"EGYPTIAN HIEROGLYPH D065"));
        data.insert(std::make_pair(0x130c8,"EGYPTIAN HIEROGLYPH D066"));
        data.insert(std::make_pair(0x130c9,"EGYPTIAN HIEROGLYPH D067"));
        data.insert(std::make_pair(0x130ca,"EGYPTIAN HIEROGLYPH D067A"));
        data.insert(std::make_pair(0x130cb,"EGYPTIAN HIEROGLYPH D067B"));
        data.insert(std::make_pair(0x130cc,"EGYPTIAN HIEROGLYPH D067C"));
        data.insert(std::make_pair(0x130cd,"EGYPTIAN HIEROGLYPH D067D"));
        data.insert(std::make_pair(0x130ce,"EGYPTIAN HIEROGLYPH D067E"));
        data.insert(std::make_pair(0x130cf,"EGYPTIAN HIEROGLYPH D067F"));
        data.insert(std::make_pair(0x130d0,"EGYPTIAN HIEROGLYPH D067G"));
        data.insert(std::make_pair(0x130d1,"EGYPTIAN HIEROGLYPH D067H"));
        data.insert(std::make_pair(0x130d2,"EGYPTIAN HIEROGLYPH E001"));
        data.insert(std::make_pair(0x130d3,"EGYPTIAN HIEROGLYPH E002"));
        data.insert(std::make_pair(0x130d4,"EGYPTIAN HIEROGLYPH E003"));
        data.insert(std::make_pair(0x130d5,"EGYPTIAN HIEROGLYPH E004"));
        data.insert(std::make_pair(0x130d6,"EGYPTIAN HIEROGLYPH E005"));
        data.insert(std::make_pair(0x130d7,"EGYPTIAN HIEROGLYPH E006"));
        data.insert(std::make_pair(0x130d8,"EGYPTIAN HIEROGLYPH E007"));
        data.insert(std::make_pair(0x130d9,"EGYPTIAN HIEROGLYPH E008"));
        data.insert(std::make_pair(0x130da,"EGYPTIAN HIEROGLYPH E008A"));
        data.insert(std::make_pair(0x130db,"EGYPTIAN HIEROGLYPH E009"));
        data.insert(std::make_pair(0x130dc,"EGYPTIAN HIEROGLYPH E009A"));
        data.insert(std::make_pair(0x130dd,"EGYPTIAN HIEROGLYPH E010"));
        data.insert(std::make_pair(0x130de,"EGYPTIAN HIEROGLYPH E011"));
        data.insert(std::make_pair(0x130df,"EGYPTIAN HIEROGLYPH E012"));
        data.insert(std::make_pair(0x130e0,"EGYPTIAN HIEROGLYPH E013"));
        data.insert(std::make_pair(0x130e1,"EGYPTIAN HIEROGLYPH E014"));
        data.insert(std::make_pair(0x130e2,"EGYPTIAN HIEROGLYPH E015"));
        data.insert(std::make_pair(0x130e3,"EGYPTIAN HIEROGLYPH E016"));
        data.insert(std::make_pair(0x130e4,"EGYPTIAN HIEROGLYPH E016A"));
        data.insert(std::make_pair(0x130e5,"EGYPTIAN HIEROGLYPH E017"));
        data.insert(std::make_pair(0x130e6,"EGYPTIAN HIEROGLYPH E017A"));
        data.insert(std::make_pair(0x130e7,"EGYPTIAN HIEROGLYPH E018"));
        data.insert(std::make_pair(0x130e8,"EGYPTIAN HIEROGLYPH E019"));
        data.insert(std::make_pair(0x130e9,"EGYPTIAN HIEROGLYPH E020"));
        data.insert(std::make_pair(0x130ea,"EGYPTIAN HIEROGLYPH E020A"));
        data.insert(std::make_pair(0x130eb,"EGYPTIAN HIEROGLYPH E021"));
        data.insert(std::make_pair(0x130ec,"EGYPTIAN HIEROGLYPH E022"));
        data.insert(std::make_pair(0x130ed,"EGYPTIAN HIEROGLYPH E023"));
        data.insert(std::make_pair(0x130ee,"EGYPTIAN HIEROGLYPH E024"));
        data.insert(std::make_pair(0x130ef,"EGYPTIAN HIEROGLYPH E025"));
        data.insert(std::make_pair(0x130f0,"EGYPTIAN HIEROGLYPH E026"));
        data.insert(std::make_pair(0x130f1,"EGYPTIAN HIEROGLYPH E027"));
        data.insert(std::make_pair(0x130f2,"EGYPTIAN HIEROGLYPH E028"));
        data.insert(std::make_pair(0x130f3,"EGYPTIAN HIEROGLYPH E028A"));
        data.insert(std::make_pair(0x130f4,"EGYPTIAN HIEROGLYPH E029"));
        data.insert(std::make_pair(0x130f5,"EGYPTIAN HIEROGLYPH E030"));
        data.insert(std::make_pair(0x130f6,"EGYPTIAN HIEROGLYPH E031"));
        data.insert(std::make_pair(0x130f7,"EGYPTIAN HIEROGLYPH E032"));
        data.insert(std::make_pair(0x130f8,"EGYPTIAN HIEROGLYPH E033"));
        data.insert(std::make_pair(0x130f9,"EGYPTIAN HIEROGLYPH E034"));
        data.insert(std::make_pair(0x130fa,"EGYPTIAN HIEROGLYPH E034A"));
        data.insert(std::make_pair(0x130fb,"EGYPTIAN HIEROGLYPH E036"));
        data.insert(std::make_pair(0x130fc,"EGYPTIAN HIEROGLYPH E037"));
        data.insert(std::make_pair(0x130fd,"EGYPTIAN HIEROGLYPH E038"));
        data.insert(std::make_pair(0x130fe,"EGYPTIAN HIEROGLYPH F001"));
        data.insert(std::make_pair(0x130ff,"EGYPTIAN HIEROGLYPH F001A"));
        data.insert(std::make_pair(0x13100,"EGYPTIAN HIEROGLYPH F002"));
        data.insert(std::make_pair(0x13101,"EGYPTIAN HIEROGLYPH F003"));
        data.insert(std::make_pair(0x13102,"EGYPTIAN HIEROGLYPH F004"));
        data.insert(std::make_pair(0x13103,"EGYPTIAN HIEROGLYPH F005"));
        data.insert(std::make_pair(0x13104,"EGYPTIAN HIEROGLYPH F006"));
        data.insert(std::make_pair(0x13105,"EGYPTIAN HIEROGLYPH F007"));
        data.insert(std::make_pair(0x13106,"EGYPTIAN HIEROGLYPH F008"));
        data.insert(std::make_pair(0x13107,"EGYPTIAN HIEROGLYPH F009"));
        data.insert(std::make_pair(0x13108,"EGYPTIAN HIEROGLYPH F010"));
        data.insert(std::make_pair(0x13109,"EGYPTIAN HIEROGLYPH F011"));
        data.insert(std::make_pair(0x1310a,"EGYPTIAN HIEROGLYPH F012"));
        data.insert(std::make_pair(0x1310b,"EGYPTIAN HIEROGLYPH F013"));
        data.insert(std::make_pair(0x1310c,"EGYPTIAN HIEROGLYPH F013A"));
        data.insert(std::make_pair(0x1310d,"EGYPTIAN HIEROGLYPH F014"));
        data.insert(std::make_pair(0x1310e,"EGYPTIAN HIEROGLYPH F015"));
        data.insert(std::make_pair(0x1310f,"EGYPTIAN HIEROGLYPH F016"));
        data.insert(std::make_pair(0x13110,"EGYPTIAN HIEROGLYPH F017"));
        data.insert(std::make_pair(0x13111,"EGYPTIAN HIEROGLYPH F018"));
        data.insert(std::make_pair(0x13112,"EGYPTIAN HIEROGLYPH F019"));
        data.insert(std::make_pair(0x13113,"EGYPTIAN HIEROGLYPH F020"));
        data.insert(std::make_pair(0x13114,"EGYPTIAN HIEROGLYPH F021"));
        data.insert(std::make_pair(0x13115,"EGYPTIAN HIEROGLYPH F021A"));
        data.insert(std::make_pair(0x13116,"EGYPTIAN HIEROGLYPH F022"));
        data.insert(std::make_pair(0x13117,"EGYPTIAN HIEROGLYPH F023"));
        data.insert(std::make_pair(0x13118,"EGYPTIAN HIEROGLYPH F024"));
        data.insert(std::make_pair(0x13119,"EGYPTIAN HIEROGLYPH F025"));
        data.insert(std::make_pair(0x1311a,"EGYPTIAN HIEROGLYPH F026"));
        data.insert(std::make_pair(0x1311b,"EGYPTIAN HIEROGLYPH F027"));
        data.insert(std::make_pair(0x1311c,"EGYPTIAN HIEROGLYPH F028"));
        data.insert(std::make_pair(0x1311d,"EGYPTIAN HIEROGLYPH F029"));
        data.insert(std::make_pair(0x1311e,"EGYPTIAN HIEROGLYPH F030"));
        data.insert(std::make_pair(0x1311f,"EGYPTIAN HIEROGLYPH F031"));
        data.insert(std::make_pair(0x13120,"EGYPTIAN HIEROGLYPH F031A"));
        data.insert(std::make_pair(0x13121,"EGYPTIAN HIEROGLYPH F032"));
        data.insert(std::make_pair(0x13122,"EGYPTIAN HIEROGLYPH F033"));
        data.insert(std::make_pair(0x13123,"EGYPTIAN HIEROGLYPH F034"));
        data.insert(std::make_pair(0x13124,"EGYPTIAN HIEROGLYPH F035"));
        data.insert(std::make_pair(0x13125,"EGYPTIAN HIEROGLYPH F036"));
        data.insert(std::make_pair(0x13126,"EGYPTIAN HIEROGLYPH F037"));
        data.insert(std::make_pair(0x13127,"EGYPTIAN HIEROGLYPH F037A"));
        data.insert(std::make_pair(0x13128,"EGYPTIAN HIEROGLYPH F038"));
        data.insert(std::make_pair(0x13129,"EGYPTIAN HIEROGLYPH F038A"));
        data.insert(std::make_pair(0x1312a,"EGYPTIAN HIEROGLYPH F039"));
        data.insert(std::make_pair(0x1312b,"EGYPTIAN HIEROGLYPH F040"));
        data.insert(std::make_pair(0x1312c,"EGYPTIAN HIEROGLYPH F041"));
        data.insert(std::make_pair(0x1312d,"EGYPTIAN HIEROGLYPH F042"));
        data.insert(std::make_pair(0x1312e,"EGYPTIAN HIEROGLYPH F043"));
        data.insert(std::make_pair(0x1312f,"EGYPTIAN HIEROGLYPH F044"));
        data.insert(std::make_pair(0x13130,"EGYPTIAN HIEROGLYPH F045"));
        data.insert(std::make_pair(0x13131,"EGYPTIAN HIEROGLYPH F045A"));
        data.insert(std::make_pair(0x13132,"EGYPTIAN HIEROGLYPH F046"));
        data.insert(std::make_pair(0x13133,"EGYPTIAN HIEROGLYPH F046A"));
        data.insert(std::make_pair(0x13134,"EGYPTIAN HIEROGLYPH F047"));
        data.insert(std::make_pair(0x13135,"EGYPTIAN HIEROGLYPH F047A"));
        data.insert(std::make_pair(0x13136,"EGYPTIAN HIEROGLYPH F048"));
        data.insert(std::make_pair(0x13137,"EGYPTIAN HIEROGLYPH F049"));
        data.insert(std::make_pair(0x13138,"EGYPTIAN HIEROGLYPH F050"));
        data.insert(std::make_pair(0x13139,"EGYPTIAN HIEROGLYPH F051"));
        data.insert(std::make_pair(0x1313a,"EGYPTIAN HIEROGLYPH F051A"));
        data.insert(std::make_pair(0x1313b,"EGYPTIAN HIEROGLYPH F051B"));
        data.insert(std::make_pair(0x1313c,"EGYPTIAN HIEROGLYPH F051C"));
        data.insert(std::make_pair(0x1313d,"EGYPTIAN HIEROGLYPH F052"));
        data.insert(std::make_pair(0x1313e,"EGYPTIAN HIEROGLYPH F053"));
        data.insert(std::make_pair(0x1313f,"EGYPTIAN HIEROGLYPH G001"));
        data.insert(std::make_pair(0x13140,"EGYPTIAN HIEROGLYPH G002"));
        data.insert(std::make_pair(0x13141,"EGYPTIAN HIEROGLYPH G003"));
        data.insert(std::make_pair(0x13142,"EGYPTIAN HIEROGLYPH G004"));
        data.insert(std::make_pair(0x13143,"EGYPTIAN HIEROGLYPH G005"));
        data.insert(std::make_pair(0x13144,"EGYPTIAN HIEROGLYPH G006"));
        data.insert(std::make_pair(0x13145,"EGYPTIAN HIEROGLYPH G006A"));
        data.insert(std::make_pair(0x13146,"EGYPTIAN HIEROGLYPH G007"));
        data.insert(std::make_pair(0x13147,"EGYPTIAN HIEROGLYPH G007A"));
        data.insert(std::make_pair(0x13148,"EGYPTIAN HIEROGLYPH G007B"));
        data.insert(std::make_pair(0x13149,"EGYPTIAN HIEROGLYPH G008"));
        data.insert(std::make_pair(0x1314a,"EGYPTIAN HIEROGLYPH G009"));
        data.insert(std::make_pair(0x1314b,"EGYPTIAN HIEROGLYPH G010"));
        data.insert(std::make_pair(0x1314c,"EGYPTIAN HIEROGLYPH G011"));
        data.insert(std::make_pair(0x1314d,"EGYPTIAN HIEROGLYPH G011A"));
        data.insert(std::make_pair(0x1314e,"EGYPTIAN HIEROGLYPH G012"));
        data.insert(std::make_pair(0x1314f,"EGYPTIAN HIEROGLYPH G013"));
        data.insert(std::make_pair(0x13150,"EGYPTIAN HIEROGLYPH G014"));
        data.insert(std::make_pair(0x13151,"EGYPTIAN HIEROGLYPH G015"));
        data.insert(std::make_pair(0x13152,"EGYPTIAN HIEROGLYPH G016"));
        data.insert(std::make_pair(0x13153,"EGYPTIAN HIEROGLYPH G017"));
        data.insert(std::make_pair(0x13154,"EGYPTIAN HIEROGLYPH G018"));
        data.insert(std::make_pair(0x13155,"EGYPTIAN HIEROGLYPH G019"));
        data.insert(std::make_pair(0x13156,"EGYPTIAN HIEROGLYPH G020"));
        data.insert(std::make_pair(0x13157,"EGYPTIAN HIEROGLYPH G020A"));
        data.insert(std::make_pair(0x13158,"EGYPTIAN HIEROGLYPH G021"));
        data.insert(std::make_pair(0x13159,"EGYPTIAN HIEROGLYPH G022"));
        data.insert(std::make_pair(0x1315a,"EGYPTIAN HIEROGLYPH G023"));
        data.insert(std::make_pair(0x1315b,"EGYPTIAN HIEROGLYPH G024"));
        data.insert(std::make_pair(0x1315c,"EGYPTIAN HIEROGLYPH G025"));
        data.insert(std::make_pair(0x1315d,"EGYPTIAN HIEROGLYPH G026"));
        data.insert(std::make_pair(0x1315e,"EGYPTIAN HIEROGLYPH G026A"));
        data.insert(std::make_pair(0x1315f,"EGYPTIAN HIEROGLYPH G027"));
        data.insert(std::make_pair(0x13160,"EGYPTIAN HIEROGLYPH G028"));
        data.insert(std::make_pair(0x13161,"EGYPTIAN HIEROGLYPH G029"));
        data.insert(std::make_pair(0x13162,"EGYPTIAN HIEROGLYPH G030"));
        data.insert(std::make_pair(0x13163,"EGYPTIAN HIEROGLYPH G031"));
        data.insert(std::make_pair(0x13164,"EGYPTIAN HIEROGLYPH G032"));
        data.insert(std::make_pair(0x13165,"EGYPTIAN HIEROGLYPH G033"));
        data.insert(std::make_pair(0x13166,"EGYPTIAN HIEROGLYPH G034"));
        data.insert(std::make_pair(0x13167,"EGYPTIAN HIEROGLYPH G035"));
        data.insert(std::make_pair(0x13168,"EGYPTIAN HIEROGLYPH G036"));
        data.insert(std::make_pair(0x13169,"EGYPTIAN HIEROGLYPH G036A"));
        data.insert(std::make_pair(0x1316a,"EGYPTIAN HIEROGLYPH G037"));
        data.insert(std::make_pair(0x1316b,"EGYPTIAN HIEROGLYPH G037A"));
        data.insert(std::make_pair(0x1316c,"EGYPTIAN HIEROGLYPH G038"));
        data.insert(std::make_pair(0x1316d,"EGYPTIAN HIEROGLYPH G039"));
        data.insert(std::make_pair(0x1316e,"EGYPTIAN HIEROGLYPH G040"));
        data.insert(std::make_pair(0x1316f,"EGYPTIAN HIEROGLYPH G041"));
        data.insert(std::make_pair(0x13170,"EGYPTIAN HIEROGLYPH G042"));
        data.insert(std::make_pair(0x13171,"EGYPTIAN HIEROGLYPH G043"));
        data.insert(std::make_pair(0x13172,"EGYPTIAN HIEROGLYPH G043A"));
        data.insert(std::make_pair(0x13173,"EGYPTIAN HIEROGLYPH G044"));
        data.insert(std::make_pair(0x13174,"EGYPTIAN HIEROGLYPH G045"));
        data.insert(std::make_pair(0x13175,"EGYPTIAN HIEROGLYPH G045A"));
        data.insert(std::make_pair(0x13176,"EGYPTIAN HIEROGLYPH G046"));
        data.insert(std::make_pair(0x13177,"EGYPTIAN HIEROGLYPH G047"));
        data.insert(std::make_pair(0x13178,"EGYPTIAN HIEROGLYPH G048"));
        data.insert(std::make_pair(0x13179,"EGYPTIAN HIEROGLYPH G049"));
        data.insert(std::make_pair(0x1317a,"EGYPTIAN HIEROGLYPH G050"));
        data.insert(std::make_pair(0x1317b,"EGYPTIAN HIEROGLYPH G051"));
        data.insert(std::make_pair(0x1317c,"EGYPTIAN HIEROGLYPH G052"));
        data.insert(std::make_pair(0x1317d,"EGYPTIAN HIEROGLYPH G053"));
        data.insert(std::make_pair(0x1317e,"EGYPTIAN HIEROGLYPH G054"));
        data.insert(std::make_pair(0x1317f,"EGYPTIAN HIEROGLYPH H001"));
        data.insert(std::make_pair(0x13180,"EGYPTIAN HIEROGLYPH H002"));
        data.insert(std::make_pair(0x13181,"EGYPTIAN HIEROGLYPH H003"));
        data.insert(std::make_pair(0x13182,"EGYPTIAN HIEROGLYPH H004"));
        data.insert(std::make_pair(0x13183,"EGYPTIAN HIEROGLYPH H005"));
        data.insert(std::make_pair(0x13184,"EGYPTIAN HIEROGLYPH H006"));
        data.insert(std::make_pair(0x13185,"EGYPTIAN HIEROGLYPH H006A"));
        data.insert(std::make_pair(0x13186,"EGYPTIAN HIEROGLYPH H007"));
        data.insert(std::make_pair(0x13187,"EGYPTIAN HIEROGLYPH H008"));
        data.insert(std::make_pair(0x13188,"EGYPTIAN HIEROGLYPH I001"));
        data.insert(std::make_pair(0x13189,"EGYPTIAN HIEROGLYPH I002"));
        data.insert(std::make_pair(0x1318a,"EGYPTIAN HIEROGLYPH I003"));
        data.insert(std::make_pair(0x1318b,"EGYPTIAN HIEROGLYPH I004"));
        data.insert(std::make_pair(0x1318c,"EGYPTIAN HIEROGLYPH I005"));
        data.insert(std::make_pair(0x1318d,"EGYPTIAN HIEROGLYPH I005A"));
        data.insert(std::make_pair(0x1318e,"EGYPTIAN HIEROGLYPH I006"));
        data.insert(std::make_pair(0x1318f,"EGYPTIAN HIEROGLYPH I007"));
        data.insert(std::make_pair(0x13190,"EGYPTIAN HIEROGLYPH I008"));
        data.insert(std::make_pair(0x13191,"EGYPTIAN HIEROGLYPH I009"));
        data.insert(std::make_pair(0x13192,"EGYPTIAN HIEROGLYPH I009A"));
        data.insert(std::make_pair(0x13193,"EGYPTIAN HIEROGLYPH I010"));
        data.insert(std::make_pair(0x13194,"EGYPTIAN HIEROGLYPH I010A"));
        data.insert(std::make_pair(0x13195,"EGYPTIAN HIEROGLYPH I011"));
        data.insert(std::make_pair(0x13196,"EGYPTIAN HIEROGLYPH I011A"));
        data.insert(std::make_pair(0x13197,"EGYPTIAN HIEROGLYPH I012"));
        data.insert(std::make_pair(0x13198,"EGYPTIAN HIEROGLYPH I013"));
        data.insert(std::make_pair(0x13199,"EGYPTIAN HIEROGLYPH I014"));
        data.insert(std::make_pair(0x1319a,"EGYPTIAN HIEROGLYPH I015"));
        data.insert(std::make_pair(0x1319b,"EGYPTIAN HIEROGLYPH K001"));
        data.insert(std::make_pair(0x1319c,"EGYPTIAN HIEROGLYPH K002"));
        data.insert(std::make_pair(0x1319d,"EGYPTIAN HIEROGLYPH K003"));
        data.insert(std::make_pair(0x1319e,"EGYPTIAN HIEROGLYPH K004"));
        data.insert(std::make_pair(0x1319f,"EGYPTIAN HIEROGLYPH K005"));
        data.insert(std::make_pair(0x131a0,"EGYPTIAN HIEROGLYPH K006"));
        data.insert(std::make_pair(0x131a1,"EGYPTIAN HIEROGLYPH K007"));
        data.insert(std::make_pair(0x131a2,"EGYPTIAN HIEROGLYPH K008"));
        data.insert(std::make_pair(0x131a3,"EGYPTIAN HIEROGLYPH L001"));
        data.insert(std::make_pair(0x131a4,"EGYPTIAN HIEROGLYPH L002"));
        data.insert(std::make_pair(0x131a5,"EGYPTIAN HIEROGLYPH L002A"));
        data.insert(std::make_pair(0x131a6,"EGYPTIAN HIEROGLYPH L003"));
        data.insert(std::make_pair(0x131a7,"EGYPTIAN HIEROGLYPH L004"));
        data.insert(std::make_pair(0x131a8,"EGYPTIAN HIEROGLYPH L005"));
        data.insert(std::make_pair(0x131a9,"EGYPTIAN HIEROGLYPH L006"));
        data.insert(std::make_pair(0x131aa,"EGYPTIAN HIEROGLYPH L006A"));
        data.insert(std::make_pair(0x131ab,"EGYPTIAN HIEROGLYPH L007"));
        data.insert(std::make_pair(0x131ac,"EGYPTIAN HIEROGLYPH L008"));
        data.insert(std::make_pair(0x131ad,"EGYPTIAN HIEROGLYPH M001"));
        data.insert(std::make_pair(0x131ae,"EGYPTIAN HIEROGLYPH M001A"));
        data.insert(std::make_pair(0x131af,"EGYPTIAN HIEROGLYPH M001B"));
        data.insert(std::make_pair(0x131b0,"EGYPTIAN HIEROGLYPH M002"));
        data.insert(std::make_pair(0x131b1,"EGYPTIAN HIEROGLYPH M003"));
        data.insert(std::make_pair(0x131b2,"EGYPTIAN HIEROGLYPH M003A"));
        data.insert(std::make_pair(0x131b3,"EGYPTIAN HIEROGLYPH M004"));
        data.insert(std::make_pair(0x131b4,"EGYPTIAN HIEROGLYPH M005"));
        data.insert(std::make_pair(0x131b5,"EGYPTIAN HIEROGLYPH M006"));
        data.insert(std::make_pair(0x131b6,"EGYPTIAN HIEROGLYPH M007"));
        data.insert(std::make_pair(0x131b7,"EGYPTIAN HIEROGLYPH M008"));
        data.insert(std::make_pair(0x131b8,"EGYPTIAN HIEROGLYPH M009"));
        data.insert(std::make_pair(0x131b9,"EGYPTIAN HIEROGLYPH M010"));
        data.insert(std::make_pair(0x131ba,"EGYPTIAN HIEROGLYPH M010A"));
        data.insert(std::make_pair(0x131bb,"EGYPTIAN HIEROGLYPH M011"));
        data.insert(std::make_pair(0x131bc,"EGYPTIAN HIEROGLYPH M012"));
        data.insert(std::make_pair(0x131bd,"EGYPTIAN HIEROGLYPH M012A"));
        data.insert(std::make_pair(0x131be,"EGYPTIAN HIEROGLYPH M012B"));
        data.insert(std::make_pair(0x131bf,"EGYPTIAN HIEROGLYPH M012C"));
        data.insert(std::make_pair(0x131c0,"EGYPTIAN HIEROGLYPH M012D"));
        data.insert(std::make_pair(0x131c1,"EGYPTIAN HIEROGLYPH M012E"));
        data.insert(std::make_pair(0x131c2,"EGYPTIAN HIEROGLYPH M012F"));
        data.insert(std::make_pair(0x131c3,"EGYPTIAN HIEROGLYPH M012G"));
        data.insert(std::make_pair(0x131c4,"EGYPTIAN HIEROGLYPH M012H"));
        data.insert(std::make_pair(0x131c5,"EGYPTIAN HIEROGLYPH M013"));
        data.insert(std::make_pair(0x131c6,"EGYPTIAN HIEROGLYPH M014"));
        data.insert(std::make_pair(0x131c7,"EGYPTIAN HIEROGLYPH M015"));
        data.insert(std::make_pair(0x131c8,"EGYPTIAN HIEROGLYPH M015A"));
        data.insert(std::make_pair(0x131c9,"EGYPTIAN HIEROGLYPH M016"));
        data.insert(std::make_pair(0x131ca,"EGYPTIAN HIEROGLYPH M016A"));
        data.insert(std::make_pair(0x131cb,"EGYPTIAN HIEROGLYPH M017"));
        data.insert(std::make_pair(0x131cc,"EGYPTIAN HIEROGLYPH M017A"));
        data.insert(std::make_pair(0x131cd,"EGYPTIAN HIEROGLYPH M018"));
        data.insert(std::make_pair(0x131ce,"EGYPTIAN HIEROGLYPH M019"));
        data.insert(std::make_pair(0x131cf,"EGYPTIAN HIEROGLYPH M020"));
        data.insert(std::make_pair(0x131d0,"EGYPTIAN HIEROGLYPH M021"));
        data.insert(std::make_pair(0x131d1,"EGYPTIAN HIEROGLYPH M022"));
        data.insert(std::make_pair(0x131d2,"EGYPTIAN HIEROGLYPH M022A"));
        data.insert(std::make_pair(0x131d3,"EGYPTIAN HIEROGLYPH M023"));
        data.insert(std::make_pair(0x131d4,"EGYPTIAN HIEROGLYPH M024"));
        data.insert(std::make_pair(0x131d5,"EGYPTIAN HIEROGLYPH M024A"));
        data.insert(std::make_pair(0x131d6,"EGYPTIAN HIEROGLYPH M025"));
        data.insert(std::make_pair(0x131d7,"EGYPTIAN HIEROGLYPH M026"));
        data.insert(std::make_pair(0x131d8,"EGYPTIAN HIEROGLYPH M027"));
        data.insert(std::make_pair(0x131d9,"EGYPTIAN HIEROGLYPH M028"));
        data.insert(std::make_pair(0x131da,"EGYPTIAN HIEROGLYPH M028A"));
        data.insert(std::make_pair(0x131db,"EGYPTIAN HIEROGLYPH M029"));
        data.insert(std::make_pair(0x131dc,"EGYPTIAN HIEROGLYPH M030"));
        data.insert(std::make_pair(0x131dd,"EGYPTIAN HIEROGLYPH M031"));
        data.insert(std::make_pair(0x131de,"EGYPTIAN HIEROGLYPH M031A"));
        data.insert(std::make_pair(0x131df,"EGYPTIAN HIEROGLYPH M032"));
        data.insert(std::make_pair(0x131e0,"EGYPTIAN HIEROGLYPH M033"));
        data.insert(std::make_pair(0x131e1,"EGYPTIAN HIEROGLYPH M033A"));
        data.insert(std::make_pair(0x131e2,"EGYPTIAN HIEROGLYPH M033B"));
        data.insert(std::make_pair(0x131e3,"EGYPTIAN HIEROGLYPH M034"));
        data.insert(std::make_pair(0x131e4,"EGYPTIAN HIEROGLYPH M035"));
        data.insert(std::make_pair(0x131e5,"EGYPTIAN HIEROGLYPH M036"));
        data.insert(std::make_pair(0x131e6,"EGYPTIAN HIEROGLYPH M037"));
        data.insert(std::make_pair(0x131e7,"EGYPTIAN HIEROGLYPH M038"));
        data.insert(std::make_pair(0x131e8,"EGYPTIAN HIEROGLYPH M039"));
        data.insert(std::make_pair(0x131e9,"EGYPTIAN HIEROGLYPH M040"));
        data.insert(std::make_pair(0x131ea,"EGYPTIAN HIEROGLYPH M040A"));
        data.insert(std::make_pair(0x131eb,"EGYPTIAN HIEROGLYPH M041"));
        data.insert(std::make_pair(0x131ec,"EGYPTIAN HIEROGLYPH M042"));
        data.insert(std::make_pair(0x131ed,"EGYPTIAN HIEROGLYPH M043"));
        data.insert(std::make_pair(0x131ee,"EGYPTIAN HIEROGLYPH M044"));
        data.insert(std::make_pair(0x131ef,"EGYPTIAN HIEROGLYPH N001"));
        data.insert(std::make_pair(0x131f0,"EGYPTIAN HIEROGLYPH N002"));
        data.insert(std::make_pair(0x131f1,"EGYPTIAN HIEROGLYPH N003"));
        data.insert(std::make_pair(0x131f2,"EGYPTIAN HIEROGLYPH N004"));
        data.insert(std::make_pair(0x131f3,"EGYPTIAN HIEROGLYPH N005"));
        data.insert(std::make_pair(0x131f4,"EGYPTIAN HIEROGLYPH N006"));
        data.insert(std::make_pair(0x131f5,"EGYPTIAN HIEROGLYPH N007"));
        data.insert(std::make_pair(0x131f6,"EGYPTIAN HIEROGLYPH N008"));
        data.insert(std::make_pair(0x131f7,"EGYPTIAN HIEROGLYPH N009"));
        data.insert(std::make_pair(0x131f8,"EGYPTIAN HIEROGLYPH N010"));
        data.insert(std::make_pair(0x131f9,"EGYPTIAN HIEROGLYPH N011"));
        data.insert(std::make_pair(0x131fa,"EGYPTIAN HIEROGLYPH N012"));
        data.insert(std::make_pair(0x131fb,"EGYPTIAN HIEROGLYPH N013"));
        data.insert(std::make_pair(0x131fc,"EGYPTIAN HIEROGLYPH N014"));
        data.insert(std::make_pair(0x131fd,"EGYPTIAN HIEROGLYPH N015"));
        data.insert(std::make_pair(0x131fe,"EGYPTIAN HIEROGLYPH N016"));
        data.insert(std::make_pair(0x131ff,"EGYPTIAN HIEROGLYPH N017"));
        data.insert(std::make_pair(0x13200,"EGYPTIAN HIEROGLYPH N018"));
        data.insert(std::make_pair(0x13201,"EGYPTIAN HIEROGLYPH N018A"));
        data.insert(std::make_pair(0x13202,"EGYPTIAN HIEROGLYPH N018B"));
        data.insert(std::make_pair(0x13203,"EGYPTIAN HIEROGLYPH N019"));
        data.insert(std::make_pair(0x13204,"EGYPTIAN HIEROGLYPH N020"));
        data.insert(std::make_pair(0x13205,"EGYPTIAN HIEROGLYPH N021"));
        data.insert(std::make_pair(0x13206,"EGYPTIAN HIEROGLYPH N022"));
        data.insert(std::make_pair(0x13207,"EGYPTIAN HIEROGLYPH N023"));
        data.insert(std::make_pair(0x13208,"EGYPTIAN HIEROGLYPH N024"));
        data.insert(std::make_pair(0x13209,"EGYPTIAN HIEROGLYPH N025"));
        data.insert(std::make_pair(0x1320a,"EGYPTIAN HIEROGLYPH N025A"));
        data.insert(std::make_pair(0x1320b,"EGYPTIAN HIEROGLYPH N026"));
        data.insert(std::make_pair(0x1320c,"EGYPTIAN HIEROGLYPH N027"));
        data.insert(std::make_pair(0x1320d,"EGYPTIAN HIEROGLYPH N028"));
        data.insert(std::make_pair(0x1320e,"EGYPTIAN HIEROGLYPH N029"));
        data.insert(std::make_pair(0x1320f,"EGYPTIAN HIEROGLYPH N030"));
        data.insert(std::make_pair(0x13210,"EGYPTIAN HIEROGLYPH N031"));
        data.insert(std::make_pair(0x13211,"EGYPTIAN HIEROGLYPH N032"));
        data.insert(std::make_pair(0x13212,"EGYPTIAN HIEROGLYPH N033"));
        data.insert(std::make_pair(0x13213,"EGYPTIAN HIEROGLYPH N033A"));
        data.insert(std::make_pair(0x13214,"EGYPTIAN HIEROGLYPH N034"));
        data.insert(std::make_pair(0x13215,"EGYPTIAN HIEROGLYPH N034A"));
        data.insert(std::make_pair(0x13216,"EGYPTIAN HIEROGLYPH N035"));
        data.insert(std::make_pair(0x13217,"EGYPTIAN HIEROGLYPH N035A"));
        data.insert(std::make_pair(0x13218,"EGYPTIAN HIEROGLYPH N036"));
        data.insert(std::make_pair(0x13219,"EGYPTIAN HIEROGLYPH N037"));
        data.insert(std::make_pair(0x1321a,"EGYPTIAN HIEROGLYPH N037A"));
        data.insert(std::make_pair(0x1321b,"EGYPTIAN HIEROGLYPH N038"));
        data.insert(std::make_pair(0x1321c,"EGYPTIAN HIEROGLYPH N039"));
        data.insert(std::make_pair(0x1321d,"EGYPTIAN HIEROGLYPH N040"));
        data.insert(std::make_pair(0x1321e,"EGYPTIAN HIEROGLYPH N041"));
        data.insert(std::make_pair(0x1321f,"EGYPTIAN HIEROGLYPH N042"));
        data.insert(std::make_pair(0x13220,"EGYPTIAN HIEROGLYPH NL001"));
        data.insert(std::make_pair(0x13221,"EGYPTIAN HIEROGLYPH NL002"));
        data.insert(std::make_pair(0x13222,"EGYPTIAN HIEROGLYPH NL003"));
        data.insert(std::make_pair(0x13223,"EGYPTIAN HIEROGLYPH NL004"));
        data.insert(std::make_pair(0x13224,"EGYPTIAN HIEROGLYPH NL005"));
        data.insert(std::make_pair(0x13225,"EGYPTIAN HIEROGLYPH NL005A"));
        data.insert(std::make_pair(0x13226,"EGYPTIAN HIEROGLYPH NL006"));
        data.insert(std::make_pair(0x13227,"EGYPTIAN HIEROGLYPH NL007"));
        data.insert(std::make_pair(0x13228,"EGYPTIAN HIEROGLYPH NL008"));
        data.insert(std::make_pair(0x13229,"EGYPTIAN HIEROGLYPH NL009"));
        data.insert(std::make_pair(0x1322a,"EGYPTIAN HIEROGLYPH NL010"));
        data.insert(std::make_pair(0x1322b,"EGYPTIAN HIEROGLYPH NL011"));
        data.insert(std::make_pair(0x1322c,"EGYPTIAN HIEROGLYPH NL012"));
        data.insert(std::make_pair(0x1322d,"EGYPTIAN HIEROGLYPH NL013"));
        data.insert(std::make_pair(0x1322e,"EGYPTIAN HIEROGLYPH NL014"));
        data.insert(std::make_pair(0x1322f,"EGYPTIAN HIEROGLYPH NL015"));
        data.insert(std::make_pair(0x13230,"EGYPTIAN HIEROGLYPH NL016"));
        data.insert(std::make_pair(0x13231,"EGYPTIAN HIEROGLYPH NL017"));
        data.insert(std::make_pair(0x13232,"EGYPTIAN HIEROGLYPH NL017A"));
        data.insert(std::make_pair(0x13233,"EGYPTIAN HIEROGLYPH NL018"));
        data.insert(std::make_pair(0x13234,"EGYPTIAN HIEROGLYPH NL019"));
        data.insert(std::make_pair(0x13235,"EGYPTIAN HIEROGLYPH NL020"));
        data.insert(std::make_pair(0x13236,"EGYPTIAN HIEROGLYPH NU001"));
        data.insert(std::make_pair(0x13237,"EGYPTIAN HIEROGLYPH NU002"));
        data.insert(std::make_pair(0x13238,"EGYPTIAN HIEROGLYPH NU003"));
        data.insert(std::make_pair(0x13239,"EGYPTIAN HIEROGLYPH NU004"));
        data.insert(std::make_pair(0x1323a,"EGYPTIAN HIEROGLYPH NU005"));
        data.insert(std::make_pair(0x1323b,"EGYPTIAN HIEROGLYPH NU006"));
        data.insert(std::make_pair(0x1323c,"EGYPTIAN HIEROGLYPH NU007"));
        data.insert(std::make_pair(0x1323d,"EGYPTIAN HIEROGLYPH NU008"));
        data.insert(std::make_pair(0x1323e,"EGYPTIAN HIEROGLYPH NU009"));
        data.insert(std::make_pair(0x1323f,"EGYPTIAN HIEROGLYPH NU010"));
        data.insert(std::make_pair(0x13240,"EGYPTIAN HIEROGLYPH NU010A"));
        data.insert(std::make_pair(0x13241,"EGYPTIAN HIEROGLYPH NU011"));
        data.insert(std::make_pair(0x13242,"EGYPTIAN HIEROGLYPH NU011A"));
        data.insert(std::make_pair(0x13243,"EGYPTIAN HIEROGLYPH NU012"));
        data.insert(std::make_pair(0x13244,"EGYPTIAN HIEROGLYPH NU013"));
        data.insert(std::make_pair(0x13245,"EGYPTIAN HIEROGLYPH NU014"));
        data.insert(std::make_pair(0x13246,"EGYPTIAN HIEROGLYPH NU015"));
        data.insert(std::make_pair(0x13247,"EGYPTIAN HIEROGLYPH NU016"));
        data.insert(std::make_pair(0x13248,"EGYPTIAN HIEROGLYPH NU017"));
        data.insert(std::make_pair(0x13249,"EGYPTIAN HIEROGLYPH NU018"));
        data.insert(std::make_pair(0x1324a,"EGYPTIAN HIEROGLYPH NU018A"));
        data.insert(std::make_pair(0x1324b,"EGYPTIAN HIEROGLYPH NU019"));
        data.insert(std::make_pair(0x1324c,"EGYPTIAN HIEROGLYPH NU020"));
        data.insert(std::make_pair(0x1324d,"EGYPTIAN HIEROGLYPH NU021"));
        data.insert(std::make_pair(0x1324e,"EGYPTIAN HIEROGLYPH NU022"));
        data.insert(std::make_pair(0x1324f,"EGYPTIAN HIEROGLYPH NU022A"));
        data.insert(std::make_pair(0x13250,"EGYPTIAN HIEROGLYPH O001"));
        data.insert(std::make_pair(0x13251,"EGYPTIAN HIEROGLYPH O001A"));
        data.insert(std::make_pair(0x13252,"EGYPTIAN HIEROGLYPH O002"));
        data.insert(std::make_pair(0x13253,"EGYPTIAN HIEROGLYPH O003"));
        data.insert(std::make_pair(0x13254,"EGYPTIAN HIEROGLYPH O004"));
        data.insert(std::make_pair(0x13255,"EGYPTIAN HIEROGLYPH O005"));
        data.insert(std::make_pair(0x13256,"EGYPTIAN HIEROGLYPH O005A"));
        data.insert(std::make_pair(0x13257,"EGYPTIAN HIEROGLYPH O006"));
        data.insert(std::make_pair(0x13258,"EGYPTIAN HIEROGLYPH O006A"));
        data.insert(std::make_pair(0x13259,"EGYPTIAN HIEROGLYPH O006B"));
        data.insert(std::make_pair(0x1325a,"EGYPTIAN HIEROGLYPH O006C"));
        data.insert(std::make_pair(0x1325b,"EGYPTIAN HIEROGLYPH O006D"));
        data.insert(std::make_pair(0x1325c,"EGYPTIAN HIEROGLYPH O006E"));
        data.insert(std::make_pair(0x1325d,"EGYPTIAN HIEROGLYPH O006F"));
        data.insert(std::make_pair(0x1325e,"EGYPTIAN HIEROGLYPH O007"));
        data.insert(std::make_pair(0x1325f,"EGYPTIAN HIEROGLYPH O008"));
        data.insert(std::make_pair(0x13260,"EGYPTIAN HIEROGLYPH O009"));
        data.insert(std::make_pair(0x13261,"EGYPTIAN HIEROGLYPH O010"));
        data.insert(std::make_pair(0x13262,"EGYPTIAN HIEROGLYPH O010A"));
        data.insert(std::make_pair(0x13263,"EGYPTIAN HIEROGLYPH O010B"));
        data.insert(std::make_pair(0x13264,"EGYPTIAN HIEROGLYPH O010C"));
        data.insert(std::make_pair(0x13265,"EGYPTIAN HIEROGLYPH O011"));
        data.insert(std::make_pair(0x13266,"EGYPTIAN HIEROGLYPH O012"));
        data.insert(std::make_pair(0x13267,"EGYPTIAN HIEROGLYPH O013"));
        data.insert(std::make_pair(0x13268,"EGYPTIAN HIEROGLYPH O014"));
        data.insert(std::make_pair(0x13269,"EGYPTIAN HIEROGLYPH O015"));
        data.insert(std::make_pair(0x1326a,"EGYPTIAN HIEROGLYPH O016"));
        data.insert(std::make_pair(0x1326b,"EGYPTIAN HIEROGLYPH O017"));
        data.insert(std::make_pair(0x1326c,"EGYPTIAN HIEROGLYPH O018"));
        data.insert(std::make_pair(0x1326d,"EGYPTIAN HIEROGLYPH O019"));
        data.insert(std::make_pair(0x1326e,"EGYPTIAN HIEROGLYPH O019A"));
        data.insert(std::make_pair(0x1326f,"EGYPTIAN HIEROGLYPH O020"));
        data.insert(std::make_pair(0x13270,"EGYPTIAN HIEROGLYPH O020A"));
        data.insert(std::make_pair(0x13271,"EGYPTIAN HIEROGLYPH O021"));
        data.insert(std::make_pair(0x13272,"EGYPTIAN HIEROGLYPH O022"));
        data.insert(std::make_pair(0x13273,"EGYPTIAN HIEROGLYPH O023"));
        data.insert(std::make_pair(0x13274,"EGYPTIAN HIEROGLYPH O024"));
        data.insert(std::make_pair(0x13275,"EGYPTIAN HIEROGLYPH O024A"));
        data.insert(std::make_pair(0x13276,"EGYPTIAN HIEROGLYPH O025"));
        data.insert(std::make_pair(0x13277,"EGYPTIAN HIEROGLYPH O025A"));
        data.insert(std::make_pair(0x13278,"EGYPTIAN HIEROGLYPH O026"));
        data.insert(std::make_pair(0x13279,"EGYPTIAN HIEROGLYPH O027"));
        data.insert(std::make_pair(0x1327a,"EGYPTIAN HIEROGLYPH O028"));
        data.insert(std::make_pair(0x1327b,"EGYPTIAN HIEROGLYPH O029"));
        data.insert(std::make_pair(0x1327c,"EGYPTIAN HIEROGLYPH O029A"));
        data.insert(std::make_pair(0x1327d,"EGYPTIAN HIEROGLYPH O030"));
        data.insert(std::make_pair(0x1327e,"EGYPTIAN HIEROGLYPH O030A"));
        data.insert(std::make_pair(0x1327f,"EGYPTIAN HIEROGLYPH O031"));
        data.insert(std::make_pair(0x13280,"EGYPTIAN HIEROGLYPH O032"));
        data.insert(std::make_pair(0x13281,"EGYPTIAN HIEROGLYPH O033"));
        data.insert(std::make_pair(0x13282,"EGYPTIAN HIEROGLYPH O033A"));
        data.insert(std::make_pair(0x13283,"EGYPTIAN HIEROGLYPH O034"));
        data.insert(std::make_pair(0x13284,"EGYPTIAN HIEROGLYPH O035"));
        data.insert(std::make_pair(0x13285,"EGYPTIAN HIEROGLYPH O036"));
        data.insert(std::make_pair(0x13286,"EGYPTIAN HIEROGLYPH O036A"));
        data.insert(std::make_pair(0x13287,"EGYPTIAN HIEROGLYPH O036B"));
        data.insert(std::make_pair(0x13288,"EGYPTIAN HIEROGLYPH O036C"));
        data.insert(std::make_pair(0x13289,"EGYPTIAN HIEROGLYPH O036D"));
        data.insert(std::make_pair(0x1328a,"EGYPTIAN HIEROGLYPH O037"));
        data.insert(std::make_pair(0x1328b,"EGYPTIAN HIEROGLYPH O038"));
        data.insert(std::make_pair(0x1328c,"EGYPTIAN HIEROGLYPH O039"));
        data.insert(std::make_pair(0x1328d,"EGYPTIAN HIEROGLYPH O040"));
        data.insert(std::make_pair(0x1328e,"EGYPTIAN HIEROGLYPH O041"));
        data.insert(std::make_pair(0x1328f,"EGYPTIAN HIEROGLYPH O042"));
        data.insert(std::make_pair(0x13290,"EGYPTIAN HIEROGLYPH O043"));
        data.insert(std::make_pair(0x13291,"EGYPTIAN HIEROGLYPH O044"));
        data.insert(std::make_pair(0x13292,"EGYPTIAN HIEROGLYPH O045"));
        data.insert(std::make_pair(0x13293,"EGYPTIAN HIEROGLYPH O046"));
        data.insert(std::make_pair(0x13294,"EGYPTIAN HIEROGLYPH O047"));
        data.insert(std::make_pair(0x13295,"EGYPTIAN HIEROGLYPH O048"));
        data.insert(std::make_pair(0x13296,"EGYPTIAN HIEROGLYPH O049"));
        data.insert(std::make_pair(0x13297,"EGYPTIAN HIEROGLYPH O050"));
        data.insert(std::make_pair(0x13298,"EGYPTIAN HIEROGLYPH O050A"));
        data.insert(std::make_pair(0x13299,"EGYPTIAN HIEROGLYPH O050B"));
        data.insert(std::make_pair(0x1329a,"EGYPTIAN HIEROGLYPH O051"));
        data.insert(std::make_pair(0x1329b,"EGYPTIAN HIEROGLYPH P001"));
        data.insert(std::make_pair(0x1329c,"EGYPTIAN HIEROGLYPH P001A"));
        data.insert(std::make_pair(0x1329d,"EGYPTIAN HIEROGLYPH P002"));
        data.insert(std::make_pair(0x1329e,"EGYPTIAN HIEROGLYPH P003"));
        data.insert(std::make_pair(0x1329f,"EGYPTIAN HIEROGLYPH P003A"));
        data.insert(std::make_pair(0x132a0,"EGYPTIAN HIEROGLYPH P004"));
        data.insert(std::make_pair(0x132a1,"EGYPTIAN HIEROGLYPH P005"));
        data.insert(std::make_pair(0x132a2,"EGYPTIAN HIEROGLYPH P006"));
        data.insert(std::make_pair(0x132a3,"EGYPTIAN HIEROGLYPH P007"));
        data.insert(std::make_pair(0x132a4,"EGYPTIAN HIEROGLYPH P008"));
        data.insert(std::make_pair(0x132a5,"EGYPTIAN HIEROGLYPH P009"));
        data.insert(std::make_pair(0x132a6,"EGYPTIAN HIEROGLYPH P010"));
        data.insert(std::make_pair(0x132a7,"EGYPTIAN HIEROGLYPH P011"));
        data.insert(std::make_pair(0x132a8,"EGYPTIAN HIEROGLYPH Q001"));
        data.insert(std::make_pair(0x132a9,"EGYPTIAN HIEROGLYPH Q002"));
        data.insert(std::make_pair(0x132aa,"EGYPTIAN HIEROGLYPH Q003"));
        data.insert(std::make_pair(0x132ab,"EGYPTIAN HIEROGLYPH Q004"));
        data.insert(std::make_pair(0x132ac,"EGYPTIAN HIEROGLYPH Q005"));
        data.insert(std::make_pair(0x132ad,"EGYPTIAN HIEROGLYPH Q006"));
        data.insert(std::make_pair(0x132ae,"EGYPTIAN HIEROGLYPH Q007"));
        data.insert(std::make_pair(0x132af,"EGYPTIAN HIEROGLYPH R001"));
        data.insert(std::make_pair(0x132b0,"EGYPTIAN HIEROGLYPH R002"));
        data.insert(std::make_pair(0x132b1,"EGYPTIAN HIEROGLYPH R002A"));
        data.insert(std::make_pair(0x132b2,"EGYPTIAN HIEROGLYPH R003"));
        data.insert(std::make_pair(0x132b3,"EGYPTIAN HIEROGLYPH R003A"));
        data.insert(std::make_pair(0x132b4,"EGYPTIAN HIEROGLYPH R003B"));
        data.insert(std::make_pair(0x132b5,"EGYPTIAN HIEROGLYPH R004"));
        data.insert(std::make_pair(0x132b6,"EGYPTIAN HIEROGLYPH R005"));
        data.insert(std::make_pair(0x132b7,"EGYPTIAN HIEROGLYPH R006"));
        data.insert(std::make_pair(0x132b8,"EGYPTIAN HIEROGLYPH R007"));
        data.insert(std::make_pair(0x132b9,"EGYPTIAN HIEROGLYPH R008"));
        data.insert(std::make_pair(0x132ba,"EGYPTIAN HIEROGLYPH R009"));
        data.insert(std::make_pair(0x132bb,"EGYPTIAN HIEROGLYPH R010"));
        data.insert(std::make_pair(0x132bc,"EGYPTIAN HIEROGLYPH R010A"));
        data.insert(std::make_pair(0x132bd,"EGYPTIAN HIEROGLYPH R011"));
        data.insert(std::make_pair(0x132be,"EGYPTIAN HIEROGLYPH R012"));
        data.insert(std::make_pair(0x132bf,"EGYPTIAN HIEROGLYPH R013"));
        data.insert(std::make_pair(0x132c0,"EGYPTIAN HIEROGLYPH R014"));
        data.insert(std::make_pair(0x132c1,"EGYPTIAN HIEROGLYPH R015"));
        data.insert(std::make_pair(0x132c2,"EGYPTIAN HIEROGLYPH R016"));
        data.insert(std::make_pair(0x132c3,"EGYPTIAN HIEROGLYPH R016A"));
        data.insert(std::make_pair(0x132c4,"EGYPTIAN HIEROGLYPH R017"));
        data.insert(std::make_pair(0x132c5,"EGYPTIAN HIEROGLYPH R018"));
        data.insert(std::make_pair(0x132c6,"EGYPTIAN HIEROGLYPH R019"));
        data.insert(std::make_pair(0x132c7,"EGYPTIAN HIEROGLYPH R020"));
        data.insert(std::make_pair(0x132c8,"EGYPTIAN HIEROGLYPH R021"));
        data.insert(std::make_pair(0x132c9,"EGYPTIAN HIEROGLYPH R022"));
        data.insert(std::make_pair(0x132ca,"EGYPTIAN HIEROGLYPH R023"));
        data.insert(std::make_pair(0x132cb,"EGYPTIAN HIEROGLYPH R024"));
        data.insert(std::make_pair(0x132cc,"EGYPTIAN HIEROGLYPH R025"));
        data.insert(std::make_pair(0x132cd,"EGYPTIAN HIEROGLYPH R026"));
        data.insert(std::make_pair(0x132ce,"EGYPTIAN HIEROGLYPH R027"));
        data.insert(std::make_pair(0x132cf,"EGYPTIAN HIEROGLYPH R028"));
        data.insert(std::make_pair(0x132d0,"EGYPTIAN HIEROGLYPH R029"));
        data.insert(std::make_pair(0x132d1,"EGYPTIAN HIEROGLYPH S001"));
        data.insert(std::make_pair(0x132d2,"EGYPTIAN HIEROGLYPH S002"));
        data.insert(std::make_pair(0x132d3,"EGYPTIAN HIEROGLYPH S002A"));
        data.insert(std::make_pair(0x132d4,"EGYPTIAN HIEROGLYPH S003"));
        data.insert(std::make_pair(0x132d5,"EGYPTIAN HIEROGLYPH S004"));
        data.insert(std::make_pair(0x132d6,"EGYPTIAN HIEROGLYPH S005"));
        data.insert(std::make_pair(0x132d7,"EGYPTIAN HIEROGLYPH S006"));
        data.insert(std::make_pair(0x132d8,"EGYPTIAN HIEROGLYPH S006A"));
        data.insert(std::make_pair(0x132d9,"EGYPTIAN HIEROGLYPH S007"));
        data.insert(std::make_pair(0x132da,"EGYPTIAN HIEROGLYPH S008"));
        data.insert(std::make_pair(0x132db,"EGYPTIAN HIEROGLYPH S009"));
        data.insert(std::make_pair(0x132dc,"EGYPTIAN HIEROGLYPH S010"));
        data.insert(std::make_pair(0x132dd,"EGYPTIAN HIEROGLYPH S011"));
        data.insert(std::make_pair(0x132de,"EGYPTIAN HIEROGLYPH S012"));
        data.insert(std::make_pair(0x132df,"EGYPTIAN HIEROGLYPH S013"));
        data.insert(std::make_pair(0x132e0,"EGYPTIAN HIEROGLYPH S014"));
        data.insert(std::make_pair(0x132e1,"EGYPTIAN HIEROGLYPH S014A"));
        data.insert(std::make_pair(0x132e2,"EGYPTIAN HIEROGLYPH S014B"));
        data.insert(std::make_pair(0x132e3,"EGYPTIAN HIEROGLYPH S015"));
        data.insert(std::make_pair(0x132e4,"EGYPTIAN HIEROGLYPH S016"));
        data.insert(std::make_pair(0x132e5,"EGYPTIAN HIEROGLYPH S017"));
        data.insert(std::make_pair(0x132e6,"EGYPTIAN HIEROGLYPH S017A"));
        data.insert(std::make_pair(0x132e7,"EGYPTIAN HIEROGLYPH S018"));
        data.insert(std::make_pair(0x132e8,"EGYPTIAN HIEROGLYPH S019"));
        data.insert(std::make_pair(0x132e9,"EGYPTIAN HIEROGLYPH S020"));
        data.insert(std::make_pair(0x132ea,"EGYPTIAN HIEROGLYPH S021"));
        data.insert(std::make_pair(0x132eb,"EGYPTIAN HIEROGLYPH S022"));
        data.insert(std::make_pair(0x132ec,"EGYPTIAN HIEROGLYPH S023"));
        data.insert(std::make_pair(0x132ed,"EGYPTIAN HIEROGLYPH S024"));
        data.insert(std::make_pair(0x132ee,"EGYPTIAN HIEROGLYPH S025"));
        data.insert(std::make_pair(0x132ef,"EGYPTIAN HIEROGLYPH S026"));
        data.insert(std::make_pair(0x132f0,"EGYPTIAN HIEROGLYPH S026A"));
        data.insert(std::make_pair(0x132f1,"EGYPTIAN HIEROGLYPH S026B"));
        data.insert(std::make_pair(0x132f2,"EGYPTIAN HIEROGLYPH S027"));
        data.insert(std::make_pair(0x132f3,"EGYPTIAN HIEROGLYPH S028"));
        data.insert(std::make_pair(0x132f4,"EGYPTIAN HIEROGLYPH S029"));
        data.insert(std::make_pair(0x132f5,"EGYPTIAN HIEROGLYPH S030"));
        data.insert(std::make_pair(0x132f6,"EGYPTIAN HIEROGLYPH S031"));
        data.insert(std::make_pair(0x132f7,"EGYPTIAN HIEROGLYPH S032"));
        data.insert(std::make_pair(0x132f8,"EGYPTIAN HIEROGLYPH S033"));
        data.insert(std::make_pair(0x132f9,"EGYPTIAN HIEROGLYPH S034"));
        data.insert(std::make_pair(0x132fa,"EGYPTIAN HIEROGLYPH S035"));
        data.insert(std::make_pair(0x132fb,"EGYPTIAN HIEROGLYPH S035A"));
        data.insert(std::make_pair(0x132fc,"EGYPTIAN HIEROGLYPH S036"));
        data.insert(std::make_pair(0x132fd,"EGYPTIAN HIEROGLYPH S037"));
        data.insert(std::make_pair(0x132fe,"EGYPTIAN HIEROGLYPH S038"));
        data.insert(std::make_pair(0x132ff,"EGYPTIAN HIEROGLYPH S039"));
        data.insert(std::make_pair(0x13300,"EGYPTIAN HIEROGLYPH S040"));
        data.insert(std::make_pair(0x13301,"EGYPTIAN HIEROGLYPH S041"));
        data.insert(std::make_pair(0x13302,"EGYPTIAN HIEROGLYPH S042"));
        data.insert(std::make_pair(0x13303,"EGYPTIAN HIEROGLYPH S043"));
        data.insert(std::make_pair(0x13304,"EGYPTIAN HIEROGLYPH S044"));
        data.insert(std::make_pair(0x13305,"EGYPTIAN HIEROGLYPH S045"));
        data.insert(std::make_pair(0x13306,"EGYPTIAN HIEROGLYPH S046"));
        data.insert(std::make_pair(0x13307,"EGYPTIAN HIEROGLYPH T001"));
        data.insert(std::make_pair(0x13308,"EGYPTIAN HIEROGLYPH T002"));
        data.insert(std::make_pair(0x13309,"EGYPTIAN HIEROGLYPH T003"));
        data.insert(std::make_pair(0x1330a,"EGYPTIAN HIEROGLYPH T003A"));
        data.insert(std::make_pair(0x1330b,"EGYPTIAN HIEROGLYPH T004"));
        data.insert(std::make_pair(0x1330c,"EGYPTIAN HIEROGLYPH T005"));
        data.insert(std::make_pair(0x1330d,"EGYPTIAN HIEROGLYPH T006"));
        data.insert(std::make_pair(0x1330e,"EGYPTIAN HIEROGLYPH T007"));
        data.insert(std::make_pair(0x1330f,"EGYPTIAN HIEROGLYPH T007A"));
        data.insert(std::make_pair(0x13310,"EGYPTIAN HIEROGLYPH T008"));
        data.insert(std::make_pair(0x13311,"EGYPTIAN HIEROGLYPH T008A"));
        data.insert(std::make_pair(0x13312,"EGYPTIAN HIEROGLYPH T009"));
        data.insert(std::make_pair(0x13313,"EGYPTIAN HIEROGLYPH T009A"));
        data.insert(std::make_pair(0x13314,"EGYPTIAN HIEROGLYPH T010"));
        data.insert(std::make_pair(0x13315,"EGYPTIAN HIEROGLYPH T011"));
        data.insert(std::make_pair(0x13316,"EGYPTIAN HIEROGLYPH T011A"));
        data.insert(std::make_pair(0x13317,"EGYPTIAN HIEROGLYPH T012"));
        data.insert(std::make_pair(0x13318,"EGYPTIAN HIEROGLYPH T013"));
        data.insert(std::make_pair(0x13319,"EGYPTIAN HIEROGLYPH T014"));
        data.insert(std::make_pair(0x1331a,"EGYPTIAN HIEROGLYPH T015"));
        data.insert(std::make_pair(0x1331b,"EGYPTIAN HIEROGLYPH T016"));
        data.insert(std::make_pair(0x1331c,"EGYPTIAN HIEROGLYPH T016A"));
        data.insert(std::make_pair(0x1331d,"EGYPTIAN HIEROGLYPH T017"));
        data.insert(std::make_pair(0x1331e,"EGYPTIAN HIEROGLYPH T018"));
        data.insert(std::make_pair(0x1331f,"EGYPTIAN HIEROGLYPH T019"));
        data.insert(std::make_pair(0x13320,"EGYPTIAN HIEROGLYPH T020"));
        data.insert(std::make_pair(0x13321,"EGYPTIAN HIEROGLYPH T021"));
        data.insert(std::make_pair(0x13322,"EGYPTIAN HIEROGLYPH T022"));
        data.insert(std::make_pair(0x13323,"EGYPTIAN HIEROGLYPH T023"));
        data.insert(std::make_pair(0x13324,"EGYPTIAN HIEROGLYPH T024"));
        data.insert(std::make_pair(0x13325,"EGYPTIAN HIEROGLYPH T025"));
        data.insert(std::make_pair(0x13326,"EGYPTIAN HIEROGLYPH T026"));
        data.insert(std::make_pair(0x13327,"EGYPTIAN HIEROGLYPH T027"));
        data.insert(std::make_pair(0x13328,"EGYPTIAN HIEROGLYPH T028"));
        data.insert(std::make_pair(0x13329,"EGYPTIAN HIEROGLYPH T029"));
        data.insert(std::make_pair(0x1332a,"EGYPTIAN HIEROGLYPH T030"));
        data.insert(std::make_pair(0x1332b,"EGYPTIAN HIEROGLYPH T031"));
        data.insert(std::make_pair(0x1332c,"EGYPTIAN HIEROGLYPH T032"));
        data.insert(std::make_pair(0x1332d,"EGYPTIAN HIEROGLYPH T032A"));
        data.insert(std::make_pair(0x1332e,"EGYPTIAN HIEROGLYPH T033"));
        data.insert(std::make_pair(0x1332f,"EGYPTIAN HIEROGLYPH T033A"));
        data.insert(std::make_pair(0x13330,"EGYPTIAN HIEROGLYPH T034"));
        data.insert(std::make_pair(0x13331,"EGYPTIAN HIEROGLYPH T035"));
        data.insert(std::make_pair(0x13332,"EGYPTIAN HIEROGLYPH T036"));
        data.insert(std::make_pair(0x13333,"EGYPTIAN HIEROGLYPH U001"));
        data.insert(std::make_pair(0x13334,"EGYPTIAN HIEROGLYPH U002"));
        data.insert(std::make_pair(0x13335,"EGYPTIAN HIEROGLYPH U003"));
        data.insert(std::make_pair(0x13336,"EGYPTIAN HIEROGLYPH U004"));
        data.insert(std::make_pair(0x13337,"EGYPTIAN HIEROGLYPH U005"));
        data.insert(std::make_pair(0x13338,"EGYPTIAN HIEROGLYPH U006"));
        data.insert(std::make_pair(0x13339,"EGYPTIAN HIEROGLYPH U006A"));
        data.insert(std::make_pair(0x1333a,"EGYPTIAN HIEROGLYPH U006B"));
        data.insert(std::make_pair(0x1333b,"EGYPTIAN HIEROGLYPH U007"));
        data.insert(std::make_pair(0x1333c,"EGYPTIAN HIEROGLYPH U008"));
        data.insert(std::make_pair(0x1333d,"EGYPTIAN HIEROGLYPH U009"));
        data.insert(std::make_pair(0x1333e,"EGYPTIAN HIEROGLYPH U010"));
        data.insert(std::make_pair(0x1333f,"EGYPTIAN HIEROGLYPH U011"));
        data.insert(std::make_pair(0x13340,"EGYPTIAN HIEROGLYPH U012"));
        data.insert(std::make_pair(0x13341,"EGYPTIAN HIEROGLYPH U013"));
        data.insert(std::make_pair(0x13342,"EGYPTIAN HIEROGLYPH U014"));
        data.insert(std::make_pair(0x13343,"EGYPTIAN HIEROGLYPH U015"));
        data.insert(std::make_pair(0x13344,"EGYPTIAN HIEROGLYPH U016"));
        data.insert(std::make_pair(0x13345,"EGYPTIAN HIEROGLYPH U017"));
        data.insert(std::make_pair(0x13346,"EGYPTIAN HIEROGLYPH U018"));
        data.insert(std::make_pair(0x13347,"EGYPTIAN HIEROGLYPH U019"));
        data.insert(std::make_pair(0x13348,"EGYPTIAN HIEROGLYPH U020"));
        data.insert(std::make_pair(0x13349,"EGYPTIAN HIEROGLYPH U021"));
        data.insert(std::make_pair(0x1334a,"EGYPTIAN HIEROGLYPH U022"));
        data.insert(std::make_pair(0x1334b,"EGYPTIAN HIEROGLYPH U023"));
        data.insert(std::make_pair(0x1334c,"EGYPTIAN HIEROGLYPH U023A"));
        data.insert(std::make_pair(0x1334d,"EGYPTIAN HIEROGLYPH U024"));
        data.insert(std::make_pair(0x1334e,"EGYPTIAN HIEROGLYPH U025"));
        data.insert(std::make_pair(0x1334f,"EGYPTIAN HIEROGLYPH U026"));
        data.insert(std::make_pair(0x13350,"EGYPTIAN HIEROGLYPH U027"));
        data.insert(std::make_pair(0x13351,"EGYPTIAN HIEROGLYPH U028"));
        data.insert(std::make_pair(0x13352,"EGYPTIAN HIEROGLYPH U029"));
        data.insert(std::make_pair(0x13353,"EGYPTIAN HIEROGLYPH U029A"));
        data.insert(std::make_pair(0x13354,"EGYPTIAN HIEROGLYPH U030"));
        data.insert(std::make_pair(0x13355,"EGYPTIAN HIEROGLYPH U031"));
        data.insert(std::make_pair(0x13356,"EGYPTIAN HIEROGLYPH U032"));
        data.insert(std::make_pair(0x13357,"EGYPTIAN HIEROGLYPH U032A"));
        data.insert(std::make_pair(0x13358,"EGYPTIAN HIEROGLYPH U033"));
        data.insert(std::make_pair(0x13359,"EGYPTIAN HIEROGLYPH U034"));
        data.insert(std::make_pair(0x1335a,"EGYPTIAN HIEROGLYPH U035"));
        data.insert(std::make_pair(0x1335b,"EGYPTIAN HIEROGLYPH U036"));
        data.insert(std::make_pair(0x1335c,"EGYPTIAN HIEROGLYPH U037"));
        data.insert(std::make_pair(0x1335d,"EGYPTIAN HIEROGLYPH U038"));
        data.insert(std::make_pair(0x1335e,"EGYPTIAN HIEROGLYPH U039"));
        data.insert(std::make_pair(0x1335f,"EGYPTIAN HIEROGLYPH U040"));
        data.insert(std::make_pair(0x13360,"EGYPTIAN HIEROGLYPH U041"));
        data.insert(std::make_pair(0x13361,"EGYPTIAN HIEROGLYPH U042"));
        data.insert(std::make_pair(0x13362,"EGYPTIAN HIEROGLYPH V001"));
        data.insert(std::make_pair(0x13363,"EGYPTIAN HIEROGLYPH V001A"));
        data.insert(std::make_pair(0x13364,"EGYPTIAN HIEROGLYPH V001B"));
        data.insert(std::make_pair(0x13365,"EGYPTIAN HIEROGLYPH V001C"));
        data.insert(std::make_pair(0x13366,"EGYPTIAN HIEROGLYPH V001D"));
        data.insert(std::make_pair(0x13367,"EGYPTIAN HIEROGLYPH V001E"));
        data.insert(std::make_pair(0x13368,"EGYPTIAN HIEROGLYPH V001F"));
        data.insert(std::make_pair(0x13369,"EGYPTIAN HIEROGLYPH V001G"));
        data.insert(std::make_pair(0x1336a,"EGYPTIAN HIEROGLYPH V001H"));
        data.insert(std::make_pair(0x1336b,"EGYPTIAN HIEROGLYPH V001I"));
        data.insert(std::make_pair(0x1336c,"EGYPTIAN HIEROGLYPH V002"));
        data.insert(std::make_pair(0x1336d,"EGYPTIAN HIEROGLYPH V002A"));
        data.insert(std::make_pair(0x1336e,"EGYPTIAN HIEROGLYPH V003"));
        data.insert(std::make_pair(0x1336f,"EGYPTIAN HIEROGLYPH V004"));
        data.insert(std::make_pair(0x13370,"EGYPTIAN HIEROGLYPH V005"));
        data.insert(std::make_pair(0x13371,"EGYPTIAN HIEROGLYPH V006"));
        data.insert(std::make_pair(0x13372,"EGYPTIAN HIEROGLYPH V007"));
        data.insert(std::make_pair(0x13373,"EGYPTIAN HIEROGLYPH V007A"));
        data.insert(std::make_pair(0x13374,"EGYPTIAN HIEROGLYPH V007B"));
        data.insert(std::make_pair(0x13375,"EGYPTIAN HIEROGLYPH V008"));
        data.insert(std::make_pair(0x13376,"EGYPTIAN HIEROGLYPH V009"));
        data.insert(std::make_pair(0x13377,"EGYPTIAN HIEROGLYPH V010"));
        data.insert(std::make_pair(0x13378,"EGYPTIAN HIEROGLYPH V011"));
        data.insert(std::make_pair(0x13379,"EGYPTIAN HIEROGLYPH V011A"));
        data.insert(std::make_pair(0x1337a,"EGYPTIAN HIEROGLYPH V011B"));
        data.insert(std::make_pair(0x1337b,"EGYPTIAN HIEROGLYPH V011C"));
        data.insert(std::make_pair(0x1337c,"EGYPTIAN HIEROGLYPH V012"));
        data.insert(std::make_pair(0x1337d,"EGYPTIAN HIEROGLYPH V012A"));
        data.insert(std::make_pair(0x1337e,"EGYPTIAN HIEROGLYPH V012B"));
        data.insert(std::make_pair(0x1337f,"EGYPTIAN HIEROGLYPH V013"));
        data.insert(std::make_pair(0x13380,"EGYPTIAN HIEROGLYPH V014"));
        data.insert(std::make_pair(0x13381,"EGYPTIAN HIEROGLYPH V015"));
        data.insert(std::make_pair(0x13382,"EGYPTIAN HIEROGLYPH V016"));
        data.insert(std::make_pair(0x13383,"EGYPTIAN HIEROGLYPH V017"));
        data.insert(std::make_pair(0x13384,"EGYPTIAN HIEROGLYPH V018"));
        data.insert(std::make_pair(0x13385,"EGYPTIAN HIEROGLYPH V019"));
        data.insert(std::make_pair(0x13386,"EGYPTIAN HIEROGLYPH V020"));
        data.insert(std::make_pair(0x13387,"EGYPTIAN HIEROGLYPH V020A"));
        data.insert(std::make_pair(0x13388,"EGYPTIAN HIEROGLYPH V020B"));
        data.insert(std::make_pair(0x13389,"EGYPTIAN HIEROGLYPH V020C"));
        data.insert(std::make_pair(0x1338a,"EGYPTIAN HIEROGLYPH V020D"));
        data.insert(std::make_pair(0x1338b,"EGYPTIAN HIEROGLYPH V020E"));
        data.insert(std::make_pair(0x1338c,"EGYPTIAN HIEROGLYPH V020F"));
        data.insert(std::make_pair(0x1338d,"EGYPTIAN HIEROGLYPH V020G"));
        data.insert(std::make_pair(0x1338e,"EGYPTIAN HIEROGLYPH V020H"));
        data.insert(std::make_pair(0x1338f,"EGYPTIAN HIEROGLYPH V020I"));
        data.insert(std::make_pair(0x13390,"EGYPTIAN HIEROGLYPH V020J"));
        data.insert(std::make_pair(0x13391,"EGYPTIAN HIEROGLYPH V020K"));
        data.insert(std::make_pair(0x13392,"EGYPTIAN HIEROGLYPH V020L"));
        data.insert(std::make_pair(0x13393,"EGYPTIAN HIEROGLYPH V021"));
        data.insert(std::make_pair(0x13394,"EGYPTIAN HIEROGLYPH V022"));
        data.insert(std::make_pair(0x13395,"EGYPTIAN HIEROGLYPH V023"));
        data.insert(std::make_pair(0x13396,"EGYPTIAN HIEROGLYPH V023A"));
        data.insert(std::make_pair(0x13397,"EGYPTIAN HIEROGLYPH V024"));
        data.insert(std::make_pair(0x13398,"EGYPTIAN HIEROGLYPH V025"));
        data.insert(std::make_pair(0x13399,"EGYPTIAN HIEROGLYPH V026"));
        data.insert(std::make_pair(0x1339a,"EGYPTIAN HIEROGLYPH V027"));
        data.insert(std::make_pair(0x1339b,"EGYPTIAN HIEROGLYPH V028"));
        data.insert(std::make_pair(0x1339c,"EGYPTIAN HIEROGLYPH V028A"));
        data.insert(std::make_pair(0x1339d,"EGYPTIAN HIEROGLYPH V029"));
        data.insert(std::make_pair(0x1339e,"EGYPTIAN HIEROGLYPH V029A"));
        data.insert(std::make_pair(0x1339f,"EGYPTIAN HIEROGLYPH V030"));
        data.insert(std::make_pair(0x133a0,"EGYPTIAN HIEROGLYPH V030A"));
        data.insert(std::make_pair(0x133a1,"EGYPTIAN HIEROGLYPH V031"));
        data.insert(std::make_pair(0x133a2,"EGYPTIAN HIEROGLYPH V031A"));
        data.insert(std::make_pair(0x133a3,"EGYPTIAN HIEROGLYPH V032"));
        data.insert(std::make_pair(0x133a4,"EGYPTIAN HIEROGLYPH V033"));
        data.insert(std::make_pair(0x133a5,"EGYPTIAN HIEROGLYPH V033A"));
        data.insert(std::make_pair(0x133a6,"EGYPTIAN HIEROGLYPH V034"));
        data.insert(std::make_pair(0x133a7,"EGYPTIAN HIEROGLYPH V035"));
        data.insert(std::make_pair(0x133a8,"EGYPTIAN HIEROGLYPH V036"));
        data.insert(std::make_pair(0x133a9,"EGYPTIAN HIEROGLYPH V037"));
        data.insert(std::make_pair(0x133aa,"EGYPTIAN HIEROGLYPH V037A"));
        data.insert(std::make_pair(0x133ab,"EGYPTIAN HIEROGLYPH V038"));
        data.insert(std::make_pair(0x133ac,"EGYPTIAN HIEROGLYPH V039"));
        data.insert(std::make_pair(0x133ad,"EGYPTIAN HIEROGLYPH V040"));
        data.insert(std::make_pair(0x133ae,"EGYPTIAN HIEROGLYPH V040A"));
        data.insert(std::make_pair(0x133af,"EGYPTIAN HIEROGLYPH W001"));
        data.insert(std::make_pair(0x133b0,"EGYPTIAN HIEROGLYPH W002"));
        data.insert(std::make_pair(0x133b1,"EGYPTIAN HIEROGLYPH W003"));
        data.insert(std::make_pair(0x133b2,"EGYPTIAN HIEROGLYPH W003A"));
        data.insert(std::make_pair(0x133b3,"EGYPTIAN HIEROGLYPH W004"));
        data.insert(std::make_pair(0x133b4,"EGYPTIAN HIEROGLYPH W005"));
        data.insert(std::make_pair(0x133b5,"EGYPTIAN HIEROGLYPH W006"));
        data.insert(std::make_pair(0x133b6,"EGYPTIAN HIEROGLYPH W007"));
        data.insert(std::make_pair(0x133b7,"EGYPTIAN HIEROGLYPH W008"));
        data.insert(std::make_pair(0x133b8,"EGYPTIAN HIEROGLYPH W009"));
        data.insert(std::make_pair(0x133b9,"EGYPTIAN HIEROGLYPH W009A"));
        data.insert(std::make_pair(0x133ba,"EGYPTIAN HIEROGLYPH W010"));
        data.insert(std::make_pair(0x133bb,"EGYPTIAN HIEROGLYPH W010A"));
        data.insert(std::make_pair(0x133bc,"EGYPTIAN HIEROGLYPH W011"));
        data.insert(std::make_pair(0x133bd,"EGYPTIAN HIEROGLYPH W012"));
        data.insert(std::make_pair(0x133be,"EGYPTIAN HIEROGLYPH W013"));
        data.insert(std::make_pair(0x133bf,"EGYPTIAN HIEROGLYPH W014"));
        data.insert(std::make_pair(0x133c0,"EGYPTIAN HIEROGLYPH W014A"));
        data.insert(std::make_pair(0x133c1,"EGYPTIAN HIEROGLYPH W015"));
        data.insert(std::make_pair(0x133c2,"EGYPTIAN HIEROGLYPH W016"));
        data.insert(std::make_pair(0x133c3,"EGYPTIAN HIEROGLYPH W017"));
        data.insert(std::make_pair(0x133c4,"EGYPTIAN HIEROGLYPH W017A"));
        data.insert(std::make_pair(0x133c5,"EGYPTIAN HIEROGLYPH W018"));
        data.insert(std::make_pair(0x133c6,"EGYPTIAN HIEROGLYPH W018A"));
        data.insert(std::make_pair(0x133c7,"EGYPTIAN HIEROGLYPH W019"));
        data.insert(std::make_pair(0x133c8,"EGYPTIAN HIEROGLYPH W020"));
        data.insert(std::make_pair(0x133c9,"EGYPTIAN HIEROGLYPH W021"));
        data.insert(std::make_pair(0x133ca,"EGYPTIAN HIEROGLYPH W022"));
        data.insert(std::make_pair(0x133cb,"EGYPTIAN HIEROGLYPH W023"));
        data.insert(std::make_pair(0x133cc,"EGYPTIAN HIEROGLYPH W024"));
        data.insert(std::make_pair(0x133cd,"EGYPTIAN HIEROGLYPH W024A"));
        data.insert(std::make_pair(0x133ce,"EGYPTIAN HIEROGLYPH W025"));
        data.insert(std::make_pair(0x133cf,"EGYPTIAN HIEROGLYPH X001"));
        data.insert(std::make_pair(0x133d0,"EGYPTIAN HIEROGLYPH X002"));
        data.insert(std::make_pair(0x133d1,"EGYPTIAN HIEROGLYPH X003"));
        data.insert(std::make_pair(0x133d2,"EGYPTIAN HIEROGLYPH X004"));
        data.insert(std::make_pair(0x133d3,"EGYPTIAN HIEROGLYPH X004A"));
        data.insert(std::make_pair(0x133d4,"EGYPTIAN HIEROGLYPH X004B"));
        data.insert(std::make_pair(0x133d5,"EGYPTIAN HIEROGLYPH X005"));
        data.insert(std::make_pair(0x133d6,"EGYPTIAN HIEROGLYPH X006"));
        data.insert(std::make_pair(0x133d7,"EGYPTIAN HIEROGLYPH X006A"));
        data.insert(std::make_pair(0x133d8,"EGYPTIAN HIEROGLYPH X007"));
        data.insert(std::make_pair(0x133d9,"EGYPTIAN HIEROGLYPH X008"));
        data.insert(std::make_pair(0x133da,"EGYPTIAN HIEROGLYPH X008A"));
        data.insert(std::make_pair(0x133db,"EGYPTIAN HIEROGLYPH Y001"));
        data.insert(std::make_pair(0x133dc,"EGYPTIAN HIEROGLYPH Y001A"));
        data.insert(std::make_pair(0x133dd,"EGYPTIAN HIEROGLYPH Y002"));
        data.insert(std::make_pair(0x133de,"EGYPTIAN HIEROGLYPH Y003"));
        data.insert(std::make_pair(0x133df,"EGYPTIAN HIEROGLYPH Y004"));
        data.insert(std::make_pair(0x133e0,"EGYPTIAN HIEROGLYPH Y005"));
        data.insert(std::make_pair(0x133e1,"EGYPTIAN HIEROGLYPH Y006"));
        data.insert(std::make_pair(0x133e2,"EGYPTIAN HIEROGLYPH Y007"));
        data.insert(std::make_pair(0x133e3,"EGYPTIAN HIEROGLYPH Y008"));
        data.insert(std::make_pair(0x133e4,"EGYPTIAN HIEROGLYPH Z001"));
        data.insert(std::make_pair(0x133e5,"EGYPTIAN HIEROGLYPH Z002"));
        data.insert(std::make_pair(0x133e6,"EGYPTIAN HIEROGLYPH Z002A"));
        data.insert(std::make_pair(0x133e7,"EGYPTIAN HIEROGLYPH Z002B"));
        data.insert(std::make_pair(0x133e8,"EGYPTIAN HIEROGLYPH Z002C"));
        data.insert(std::make_pair(0x133e9,"EGYPTIAN HIEROGLYPH Z002D"));
        data.insert(std::make_pair(0x133ea,"EGYPTIAN HIEROGLYPH Z003"));
        data.insert(std::make_pair(0x133eb,"EGYPTIAN HIEROGLYPH Z003A"));
        data.insert(std::make_pair(0x133ec,"EGYPTIAN HIEROGLYPH Z003B"));
        data.insert(std::make_pair(0x133ed,"EGYPTIAN HIEROGLYPH Z004"));
        data.insert(std::make_pair(0x133ee,"EGYPTIAN HIEROGLYPH Z004A"));
        data.insert(std::make_pair(0x133ef,"EGYPTIAN HIEROGLYPH Z005"));
        data.insert(std::make_pair(0x133f0,"EGYPTIAN HIEROGLYPH Z005A"));
        data.insert(std::make_pair(0x133f1,"EGYPTIAN HIEROGLYPH Z006"));
        data.insert(std::make_pair(0x133f2,"EGYPTIAN HIEROGLYPH Z007"));
        data.insert(std::make_pair(0x133f3,"EGYPTIAN HIEROGLYPH Z008"));
        data.insert(std::make_pair(0x133f4,"EGYPTIAN HIEROGLYPH Z009"));
        data.insert(std::make_pair(0x133f5,"EGYPTIAN HIEROGLYPH Z010"));
        data.insert(std::make_pair(0x133f6,"EGYPTIAN HIEROGLYPH Z011"));
        data.insert(std::make_pair(0x133f7,"EGYPTIAN HIEROGLYPH Z012"));
        data.insert(std::make_pair(0x133f8,"EGYPTIAN HIEROGLYPH Z013"));
        data.insert(std::make_pair(0x133f9,"EGYPTIAN HIEROGLYPH Z014"));
        data.insert(std::make_pair(0x133fa,"EGYPTIAN HIEROGLYPH Z015"));
        data.insert(std::make_pair(0x133fb,"EGYPTIAN HIEROGLYPH Z015A"));
        data.insert(std::make_pair(0x133fc,"EGYPTIAN HIEROGLYPH Z015B"));
        data.insert(std::make_pair(0x133fd,"EGYPTIAN HIEROGLYPH Z015C"));
        data.insert(std::make_pair(0x133fe,"EGYPTIAN HIEROGLYPH Z015D"));
        data.insert(std::make_pair(0x133ff,"EGYPTIAN HIEROGLYPH Z015E"));
        data.insert(std::make_pair(0x13400,"EGYPTIAN HIEROGLYPH Z015F"));
        data.insert(std::make_pair(0x13401,"EGYPTIAN HIEROGLYPH Z015G"));
        data.insert(std::make_pair(0x13402,"EGYPTIAN HIEROGLYPH Z015H"));
        data.insert(std::make_pair(0x13403,"EGYPTIAN HIEROGLYPH Z015I"));
        data.insert(std::make_pair(0x13404,"EGYPTIAN HIEROGLYPH Z016"));
        data.insert(std::make_pair(0x13405,"EGYPTIAN HIEROGLYPH Z016A"));
        data.insert(std::make_pair(0x13406,"EGYPTIAN HIEROGLYPH Z016B"));
        data.insert(std::make_pair(0x13407,"EGYPTIAN HIEROGLYPH Z016C"));
        data.insert(std::make_pair(0x13408,"EGYPTIAN HIEROGLYPH Z016D"));
        data.insert(std::make_pair(0x13409,"EGYPTIAN HIEROGLYPH Z016E"));
        data.insert(std::make_pair(0x1340a,"EGYPTIAN HIEROGLYPH Z016F"));
        data.insert(std::make_pair(0x1340b,"EGYPTIAN HIEROGLYPH Z016G"));
        data.insert(std::make_pair(0x1340c,"EGYPTIAN HIEROGLYPH Z016H"));
        data.insert(std::make_pair(0x1340d,"EGYPTIAN HIEROGLYPH AA001"));
        data.insert(std::make_pair(0x1340e,"EGYPTIAN HIEROGLYPH AA002"));
        data.insert(std::make_pair(0x1340f,"EGYPTIAN HIEROGLYPH AA003"));
        data.insert(std::make_pair(0x13410,"EGYPTIAN HIEROGLYPH AA004"));
        data.insert(std::make_pair(0x13411,"EGYPTIAN HIEROGLYPH AA005"));
        data.insert(std::make_pair(0x13412,"EGYPTIAN HIEROGLYPH AA006"));
        data.insert(std::make_pair(0x13413,"EGYPTIAN HIEROGLYPH AA007"));
        data.insert(std::make_pair(0x13414,"EGYPTIAN HIEROGLYPH AA007A"));
        data.insert(std::make_pair(0x13415,"EGYPTIAN HIEROGLYPH AA007B"));
        data.insert(std::make_pair(0x13416,"EGYPTIAN HIEROGLYPH AA008"));
        data.insert(std::make_pair(0x13417,"EGYPTIAN HIEROGLYPH AA009"));
        data.insert(std::make_pair(0x13418,"EGYPTIAN HIEROGLYPH AA010"));
        data.insert(std::make_pair(0x13419,"EGYPTIAN HIEROGLYPH AA011"));
        data.insert(std::make_pair(0x1341a,"EGYPTIAN HIEROGLYPH AA012"));
        data.insert(std::make_pair(0x1341b,"EGYPTIAN HIEROGLYPH AA013"));
        data.insert(std::make_pair(0x1341c,"EGYPTIAN HIEROGLYPH AA014"));
        data.insert(std::make_pair(0x1341d,"EGYPTIAN HIEROGLYPH AA015"));
        data.insert(std::make_pair(0x1341e,"EGYPTIAN HIEROGLYPH AA016"));
        data.insert(std::make_pair(0x1341f,"EGYPTIAN HIEROGLYPH AA017"));
        data.insert(std::make_pair(0x13420,"EGYPTIAN HIEROGLYPH AA018"));
        data.insert(std::make_pair(0x13421,"EGYPTIAN HIEROGLYPH AA019"));
        data.insert(std::make_pair(0x13422,"EGYPTIAN HIEROGLYPH AA020"));
        data.insert(std::make_pair(0x13423,"EGYPTIAN HIEROGLYPH AA021"));
        data.insert(std::make_pair(0x13424,"EGYPTIAN HIEROGLYPH AA022"));
        data.insert(std::make_pair(0x13425,"EGYPTIAN HIEROGLYPH AA023"));
        data.insert(std::make_pair(0x13426,"EGYPTIAN HIEROGLYPH AA024"));
        data.insert(std::make_pair(0x13427,"EGYPTIAN HIEROGLYPH AA025"));
        data.insert(std::make_pair(0x13428,"EGYPTIAN HIEROGLYPH AA026"));
        data.insert(std::make_pair(0x13429,"EGYPTIAN HIEROGLYPH AA027"));
        data.insert(std::make_pair(0x1342a,"EGYPTIAN HIEROGLYPH AA028"));
        data.insert(std::make_pair(0x1342b,"EGYPTIAN HIEROGLYPH AA029"));
        data.insert(std::make_pair(0x1342c,"EGYPTIAN HIEROGLYPH AA030"));
        data.insert(std::make_pair(0x1342d,"EGYPTIAN HIEROGLYPH AA031"));
        data.insert(std::make_pair(0x1342e,"EGYPTIAN HIEROGLYPH AA032"));
        data.insert(std::make_pair(0x1342f,"EGYPTIAN HIEROGLYPH V011D"));
        data.insert(std::make_pair(0x13430,"EGYPTIAN HIEROGLYPH VERTICAL JOINER"));
        data.insert(std::make_pair(0x13431,"EGYPTIAN HIEROGLYPH HORIZONTAL JOINER"));
        data.insert(std::make_pair(0x13432,"EGYPTIAN HIEROGLYPH INSERT AT TOP START"));
        data.insert(std::make_pair(0x13433,"EGYPTIAN HIEROGLYPH INSERT AT BOTTOM START"));
        data.insert(std::make_pair(0x13434,"EGYPTIAN HIEROGLYPH INSERT AT TOP END"));
        data.insert(std::make_pair(0x13435,"EGYPTIAN HIEROGLYPH INSERT AT BOTTOM END"));
        data.insert(std::make_pair(0x13436,"EGYPTIAN HIEROGLYPH OVERLAY MIDDLE"));
        data.insert(std::make_pair(0x13437,"EGYPTIAN HIEROGLYPH BEGIN SEGMENT"));
        data.insert(std::make_pair(0x13438,"EGYPTIAN HIEROGLYPH END SEGMENT"));
        data.insert(std::make_pair(0x13439,"EGYPTIAN HIEROGLYPH INSERT AT MIDDLE"));
        data.insert(std::make_pair(0x1343a,"EGYPTIAN HIEROGLYPH INSERT AT TOP"));
        data.insert(std::make_pair(0x1343b,"EGYPTIAN HIEROGLYPH INSERT AT BOTTOM"));
        data.insert(std::make_pair(0x1343c,"EGYPTIAN HIEROGLYPH BEGIN ENCLOSURE"));
        data.insert(std::make_pair(0x1343d,"EGYPTIAN HIEROGLYPH END ENCLOSURE"));
        data.insert(std::make_pair(0x1343e,"EGYPTIAN HIEROGLYPH BEGIN WALLED ENCLOSURE"));
        data.insert(std::make_pair(0x1343f,"EGYPTIAN HIEROGLYPH END WALLED ENCLOSURE"));
        data.insert(std::make_pair(0x13440,"EGYPTIAN HIEROGLYPH MIRROR HORIZONTALLY"));
        data.insert(std::make_pair(0x13441,"EGYPTIAN HIEROGLYPH FULL BLANK"));
        data.insert(std::make_pair(0x13442,"EGYPTIAN HIEROGLYPH HALF BLANK"));
        data.insert(std::make_pair(0x13443,"EGYPTIAN HIEROGLYPH LOST SIGN"));
        data.insert(std::make_pair(0x13444,"EGYPTIAN HIEROGLYPH HALF LOST SIGN"));
        data.insert(std::make_pair(0x13445,"EGYPTIAN HIEROGLYPH TALL LOST SIGN"));
        data.insert(std::make_pair(0x13446,"EGYPTIAN HIEROGLYPH WIDE LOST SIGN"));
        data.insert(std::make_pair(0x13447,"EGYPTIAN HIEROGLYPH MODIFIER DAMAGED AT TOP START"));
        data.insert(std::make_pair(0x13448,"EGYPTIAN HIEROGLYPH MODIFIER DAMAGED AT BOTTOM START"));
        data.insert(std::make_pair(0x13449,"EGYPTIAN HIEROGLYPH MODIFIER DAMAGED AT START"));
        data.insert(std::make_pair(0x1344a,"EGYPTIAN HIEROGLYPH MODIFIER DAMAGED AT TOP END"));
        data.insert(std::make_pair(0x1344b,"EGYPTIAN HIEROGLYPH MODIFIER DAMAGED AT TOP"));
        data.insert(std::make_pair(0x1344c,"EGYPTIAN HIEROGLYPH MODIFIER DAMAGED AT BOTTOM START AND TOP END"));
        data.insert(std::make_pair(0x1344d,"EGYPTIAN HIEROGLYPH MODIFIER DAMAGED AT START AND TOP"));
        data.insert(std::make_pair(0x1344e,"EGYPTIAN HIEROGLYPH MODIFIER DAMAGED AT BOTTOM END"));
        data.insert(std::make_pair(0x1344f,"EGYPTIAN HIEROGLYPH MODIFIER DAMAGED AT TOP START AND BOTTOM END"));
        data.insert(std::make_pair(0x13450,"EGYPTIAN HIEROGLYPH MODIFIER DAMAGED AT BOTTOM"));
        data.insert(std::make_pair(0x13451,"EGYPTIAN HIEROGLYPH MODIFIER DAMAGED AT START AND BOTTOM"));
        data.insert(std::make_pair(0x13452,"EGYPTIAN HIEROGLYPH MODIFIER DAMAGED AT END"));
        data.insert(std::make_pair(0x13453,"EGYPTIAN HIEROGLYPH MODIFIER DAMAGED AT TOP AND END"));
        data.insert(std::make_pair(0x13454,"EGYPTIAN HIEROGLYPH MODIFIER DAMAGED AT BOTTOM AND END"));
        data.insert(std::make_pair(0x13455,"EGYPTIAN HIEROGLYPH MODIFIER DAMAGED"));
        data.insert(std::make_pair(0x14400,"ANATOLIAN HIEROGLYPH A001"));
        data.insert(std::make_pair(0x14401,"ANATOLIAN HIEROGLYPH A002"));
        data.insert(std::make_pair(0x14402,"ANATOLIAN HIEROGLYPH A003"));
        data.insert(std::make_pair(0x14403,"ANATOLIAN HIEROGLYPH A004"));
        data.insert(std::make_pair(0x14404,"ANATOLIAN HIEROGLYPH A005"));
        data.insert(std::make_pair(0x14405,"ANATOLIAN HIEROGLYPH A006"));
        data.insert(std::make_pair(0x14406,"ANATOLIAN HIEROGLYPH A007"));
        data.insert(std::make_pair(0x14407,"ANATOLIAN HIEROGLYPH A008"));
        data.insert(std::make_pair(0x14408,"ANATOLIAN HIEROGLYPH A009"));
        data.insert(std::make_pair(0x14409,"ANATOLIAN HIEROGLYPH A010"));
        data.insert(std::make_pair(0x1440a,"ANATOLIAN HIEROGLYPH A010A"));
        data.insert(std::make_pair(0x1440b,"ANATOLIAN HIEROGLYPH A011"));
        data.insert(std::make_pair(0x1440c,"ANATOLIAN HIEROGLYPH A012"));
        data.insert(std::make_pair(0x1440d,"ANATOLIAN HIEROGLYPH A013"));
        data.insert(std::make_pair(0x1440e,"ANATOLIAN HIEROGLYPH A014"));
        data.insert(std::make_pair(0x1440f,"ANATOLIAN HIEROGLYPH A015"));
        data.insert(std::make_pair(0x14410,"ANATOLIAN HIEROGLYPH A016"));
        data.insert(std::make_pair(0x14411,"ANATOLIAN HIEROGLYPH A017"));
        data.insert(std::make_pair(0x14412,"ANATOLIAN HIEROGLYPH A018"));
        data.insert(std::make_pair(0x14413,"ANATOLIAN HIEROGLYPH A019"));
        data.insert(std::make_pair(0x14414,"ANATOLIAN HIEROGLYPH A020"));
        data.insert(std::make_pair(0x14415,"ANATOLIAN HIEROGLYPH A021"));
        data.insert(std::make_pair(0x14416,"ANATOLIAN HIEROGLYPH A022"));
        data.insert(std::make_pair(0x14417,"ANATOLIAN HIEROGLYPH A023"));
        data.insert(std::make_pair(0x14418,"ANATOLIAN HIEROGLYPH A024"));
        data.insert(std::make_pair(0x14419,"ANATOLIAN HIEROGLYPH A025"));
        data.insert(std::make_pair(0x1441a,"ANATOLIAN HIEROGLYPH A026"));
        data.insert(std::make_pair(0x1441b,"ANATOLIAN HIEROGLYPH A026A"));
        data.insert(std::make_pair(0x1441c,"ANATOLIAN HIEROGLYPH A027"));
        data.insert(std::make_pair(0x1441d,"ANATOLIAN HIEROGLYPH A028"));
        data.insert(std::make_pair(0x1441e,"ANATOLIAN HIEROGLYPH A029"));
        data.insert(std::make_pair(0x1441f,"ANATOLIAN HIEROGLYPH A030"));
        data.insert(std::make_pair(0x14420,"ANATOLIAN HIEROGLYPH A031"));
        data.insert(std::make_pair(0x14421,"ANATOLIAN HIEROGLYPH A032"));
        data.insert(std::make_pair(0x14422,"ANATOLIAN HIEROGLYPH A033"));
        data.insert(std::make_pair(0x14423,"ANATOLIAN HIEROGLYPH A034"));
        data.insert(std::make_pair(0x14424,"ANATOLIAN HIEROGLYPH A035"));
        data.insert(std::make_pair(0x14425,"ANATOLIAN HIEROGLYPH A036"));
        data.insert(std::make_pair(0x14426,"ANATOLIAN HIEROGLYPH A037"));
        data.insert(std::make_pair(0x14427,"ANATOLIAN HIEROGLYPH A038"));
        data.insert(std::make_pair(0x14428,"ANATOLIAN HIEROGLYPH A039"));
        data.insert(std::make_pair(0x14429,"ANATOLIAN HIEROGLYPH A039A"));
        data.insert(std::make_pair(0x1442a,"ANATOLIAN HIEROGLYPH A040"));
        data.insert(std::make_pair(0x1442b,"ANATOLIAN HIEROGLYPH A041"));
        data.insert(std::make_pair(0x1442c,"ANATOLIAN HIEROGLYPH A041A"));
        data.insert(std::make_pair(0x1442d,"ANATOLIAN HIEROGLYPH A042"));
        data.insert(std::make_pair(0x1442e,"ANATOLIAN HIEROGLYPH A043"));
        data.insert(std::make_pair(0x1442f,"ANATOLIAN HIEROGLYPH A044"));
        data.insert(std::make_pair(0x14430,"ANATOLIAN HIEROGLYPH A045"));
        data.insert(std::make_pair(0x14431,"ANATOLIAN HIEROGLYPH A045A"));
        data.insert(std::make_pair(0x14432,"ANATOLIAN HIEROGLYPH A046"));
        data.insert(std::make_pair(0x14433,"ANATOLIAN HIEROGLYPH A046A"));
        data.insert(std::make_pair(0x14434,"ANATOLIAN HIEROGLYPH A046B"));
        data.insert(std::make_pair(0x14435,"ANATOLIAN HIEROGLYPH A047"));
        data.insert(std::make_pair(0x14436,"ANATOLIAN HIEROGLYPH A048"));
        data.insert(std::make_pair(0x14437,"ANATOLIAN HIEROGLYPH A049"));
        data.insert(std::make_pair(0x14438,"ANATOLIAN HIEROGLYPH A050"));
        data.insert(std::make_pair(0x14439,"ANATOLIAN HIEROGLYPH A051"));
        data.insert(std::make_pair(0x1443a,"ANATOLIAN HIEROGLYPH A052"));
        data.insert(std::make_pair(0x1443b,"ANATOLIAN HIEROGLYPH A053"));
        data.insert(std::make_pair(0x1443c,"ANATOLIAN HIEROGLYPH A054"));
        data.insert(std::make_pair(0x1443d,"ANATOLIAN HIEROGLYPH A055"));
        data.insert(std::make_pair(0x1443e,"ANATOLIAN HIEROGLYPH A056"));
        data.insert(std::make_pair(0x1443f,"ANATOLIAN HIEROGLYPH A057"));
        data.insert(std::make_pair(0x14440,"ANATOLIAN HIEROGLYPH A058"));
        data.insert(std::make_pair(0x14441,"ANATOLIAN HIEROGLYPH A059"));
        data.insert(std::make_pair(0x14442,"ANATOLIAN HIEROGLYPH A060"));
        data.insert(std::make_pair(0x14443,"ANATOLIAN HIEROGLYPH A061"));
        data.insert(std::make_pair(0x14444,"ANATOLIAN HIEROGLYPH A062"));
        data.insert(std::make_pair(0x14445,"ANATOLIAN HIEROGLYPH A063"));
        data.insert(std::make_pair(0x14446,"ANATOLIAN HIEROGLYPH A064"));
        data.insert(std::make_pair(0x14447,"ANATOLIAN HIEROGLYPH A065"));
        data.insert(std::make_pair(0x14448,"ANATOLIAN HIEROGLYPH A066"));
        data.insert(std::make_pair(0x14449,"ANATOLIAN HIEROGLYPH A066A"));
        data.insert(std::make_pair(0x1444a,"ANATOLIAN HIEROGLYPH A066B"));
        data.insert(std::make_pair(0x1444b,"ANATOLIAN HIEROGLYPH A066C"));
        data.insert(std::make_pair(0x1444c,"ANATOLIAN HIEROGLYPH A067"));
        data.insert(std::make_pair(0x1444d,"ANATOLIAN HIEROGLYPH A068"));
        data.insert(std::make_pair(0x1444e,"ANATOLIAN HIEROGLYPH A069"));
        data.insert(std::make_pair(0x1444f,"ANATOLIAN HIEROGLYPH A070"));
        data.insert(std::make_pair(0x14450,"ANATOLIAN HIEROGLYPH A071"));
        data.insert(std::make_pair(0x14451,"ANATOLIAN HIEROGLYPH A072"));
        data.insert(std::make_pair(0x14452,"ANATOLIAN HIEROGLYPH A073"));
        data.insert(std::make_pair(0x14453,"ANATOLIAN HIEROGLYPH A074"));
        data.insert(std::make_pair(0x14454,"ANATOLIAN HIEROGLYPH A075"));
        data.insert(std::make_pair(0x14455,"ANATOLIAN HIEROGLYPH A076"));
        data.insert(std::make_pair(0x14456,"ANATOLIAN HIEROGLYPH A077"));
        data.insert(std::make_pair(0x14457,"ANATOLIAN HIEROGLYPH A078"));
        data.insert(std::make_pair(0x14458,"ANATOLIAN HIEROGLYPH A079"));
        data.insert(std::make_pair(0x14459,"ANATOLIAN HIEROGLYPH A080"));
        data.insert(std::make_pair(0x1445a,"ANATOLIAN HIEROGLYPH A081"));
        data.insert(std::make_pair(0x1445b,"ANATOLIAN HIEROGLYPH A082"));
        data.insert(std::make_pair(0x1445c,"ANATOLIAN HIEROGLYPH A083"));
        data.insert(std::make_pair(0x1445d,"ANATOLIAN HIEROGLYPH A084"));
        data.insert(std::make_pair(0x1445e,"ANATOLIAN HIEROGLYPH A085"));
        data.insert(std::make_pair(0x1445f,"ANATOLIAN HIEROGLYPH A086"));
        data.insert(std::make_pair(0x14460,"ANATOLIAN HIEROGLYPH A087"));
        data.insert(std::make_pair(0x14461,"ANATOLIAN HIEROGLYPH A088"));
        data.insert(std::make_pair(0x14462,"ANATOLIAN HIEROGLYPH A089"));
        data.insert(std::make_pair(0x14463,"ANATOLIAN HIEROGLYPH A090"));
        data.insert(std::make_pair(0x14464,"ANATOLIAN HIEROGLYPH A091"));
        data.insert(std::make_pair(0x14465,"ANATOLIAN HIEROGLYPH A092"));
        data.insert(std::make_pair(0x14466,"ANATOLIAN HIEROGLYPH A093"));
        data.insert(std::make_pair(0x14467,"ANATOLIAN HIEROGLYPH A094"));
        data.insert(std::make_pair(0x14468,"ANATOLIAN HIEROGLYPH A095"));
        data.insert(std::make_pair(0x14469,"ANATOLIAN HIEROGLYPH A096"));
        data.insert(std::make_pair(0x1446a,"ANATOLIAN HIEROGLYPH A097"));
        data.insert(std::make_pair(0x1446b,"ANATOLIAN HIEROGLYPH A097A"));
        data.insert(std::make_pair(0x1446c,"ANATOLIAN HIEROGLYPH A098"));
        data.insert(std::make_pair(0x1446d,"ANATOLIAN HIEROGLYPH A098A"));
        data.insert(std::make_pair(0x1446e,"ANATOLIAN HIEROGLYPH A099"));
        data.insert(std::make_pair(0x1446f,"ANATOLIAN HIEROGLYPH A100"));
        data.insert(std::make_pair(0x14470,"ANATOLIAN HIEROGLYPH A100A"));
        data.insert(std::make_pair(0x14471,"ANATOLIAN HIEROGLYPH A101"));
        data.insert(std::make_pair(0x14472,"ANATOLIAN HIEROGLYPH A101A"));
        data.insert(std::make_pair(0x14473,"ANATOLIAN HIEROGLYPH A102"));
        data.insert(std::make_pair(0x14474,"ANATOLIAN HIEROGLYPH A102A"));
        data.insert(std::make_pair(0x14475,"ANATOLIAN HIEROGLYPH A103"));
        data.insert(std::make_pair(0x14476,"ANATOLIAN HIEROGLYPH A104"));
        data.insert(std::make_pair(0x14477,"ANATOLIAN HIEROGLYPH A104A"));
        data.insert(std::make_pair(0x14478,"ANATOLIAN HIEROGLYPH A104B"));
        data.insert(std::make_pair(0x14479,"ANATOLIAN HIEROGLYPH A104C"));
        data.insert(std::make_pair(0x1447a,"ANATOLIAN HIEROGLYPH A105"));
        data.insert(std::make_pair(0x1447b,"ANATOLIAN HIEROGLYPH A105A"));
        data.insert(std::make_pair(0x1447c,"ANATOLIAN HIEROGLYPH A105B"));
        data.insert(std::make_pair(0x1447d,"ANATOLIAN HIEROGLYPH A106"));
        data.insert(std::make_pair(0x1447e,"ANATOLIAN HIEROGLYPH A107"));
        data.insert(std::make_pair(0x1447f,"ANATOLIAN HIEROGLYPH A107A"));
        data.insert(std::make_pair(0x14480,"ANATOLIAN HIEROGLYPH A107B"));
        data.insert(std::make_pair(0x14481,"ANATOLIAN HIEROGLYPH A107C"));
        data.insert(std::make_pair(0x14482,"ANATOLIAN HIEROGLYPH A108"));
        data.insert(std::make_pair(0x14483,"ANATOLIAN HIEROGLYPH A109"));
        data.insert(std::make_pair(0x14484,"ANATOLIAN HIEROGLYPH A110"));
        data.insert(std::make_pair(0x14485,"ANATOLIAN HIEROGLYPH A110A"));
        data.insert(std::make_pair(0x14486,"ANATOLIAN HIEROGLYPH A110B"));
        data.insert(std::make_pair(0x14487,"ANATOLIAN HIEROGLYPH A111"));
        data.insert(std::make_pair(0x14488,"ANATOLIAN HIEROGLYPH A112"));
        data.insert(std::make_pair(0x14489,"ANATOLIAN HIEROGLYPH A113"));
        data.insert(std::make_pair(0x1448a,"ANATOLIAN HIEROGLYPH A114"));
        data.insert(std::make_pair(0x1448b,"ANATOLIAN HIEROGLYPH A115"));
        data.insert(std::make_pair(0x1448c,"ANATOLIAN HIEROGLYPH A115A"));
        data.insert(std::make_pair(0x1448d,"ANATOLIAN HIEROGLYPH A116"));
        data.insert(std::make_pair(0x1448e,"ANATOLIAN HIEROGLYPH A117"));
        data.insert(std::make_pair(0x1448f,"ANATOLIAN HIEROGLYPH A118"));
        data.insert(std::make_pair(0x14490,"ANATOLIAN HIEROGLYPH A119"));
        data.insert(std::make_pair(0x14491,"ANATOLIAN HIEROGLYPH A120"));
        data.insert(std::make_pair(0x14492,"ANATOLIAN HIEROGLYPH A121"));
        data.insert(std::make_pair(0x14493,"ANATOLIAN HIEROGLYPH A122"));
        data.insert(std::make_pair(0x14494,"ANATOLIAN HIEROGLYPH A123"));
        data.insert(std::make_pair(0x14495,"ANATOLIAN HIEROGLYPH A124"));
        data.insert(std::make_pair(0x14496,"ANATOLIAN HIEROGLYPH A125"));
        data.insert(std::make_pair(0x14497,"ANATOLIAN HIEROGLYPH A125A"));
        data.insert(std::make_pair(0x14498,"ANATOLIAN HIEROGLYPH A126"));
        data.insert(std::make_pair(0x14499,"ANATOLIAN HIEROGLYPH A127"));
        data.insert(std::make_pair(0x1449a,"ANATOLIAN HIEROGLYPH A128"));
        data.insert(std::make_pair(0x1449b,"ANATOLIAN HIEROGLYPH A129"));
        data.insert(std::make_pair(0x1449c,"ANATOLIAN HIEROGLYPH A130"));
        data.insert(std::make_pair(0x1449d,"ANATOLIAN HIEROGLYPH A131"));
        data.insert(std::make_pair(0x1449e,"ANATOLIAN HIEROGLYPH A132"));
        data.insert(std::make_pair(0x1449f,"ANATOLIAN HIEROGLYPH A133"));
        data.insert(std::make_pair(0x144a0,"ANATOLIAN HIEROGLYPH A134"));
        data.insert(std::make_pair(0x144a1,"ANATOLIAN HIEROGLYPH A135"));
        data.insert(std::make_pair(0x144a2,"ANATOLIAN HIEROGLYPH A135A"));
        data.insert(std::make_pair(0x144a3,"ANATOLIAN HIEROGLYPH A136"));
        data.insert(std::make_pair(0x144a4,"ANATOLIAN HIEROGLYPH A137"));
        data.insert(std::make_pair(0x144a5,"ANATOLIAN HIEROGLYPH A138"));
        data.insert(std::make_pair(0x144a6,"ANATOLIAN HIEROGLYPH A139"));
        data.insert(std::make_pair(0x144a7,"ANATOLIAN HIEROGLYPH A140"));
        data.insert(std::make_pair(0x144a8,"ANATOLIAN HIEROGLYPH A141"));
        data.insert(std::make_pair(0x144a9,"ANATOLIAN HIEROGLYPH A142"));
        data.insert(std::make_pair(0x144aa,"ANATOLIAN HIEROGLYPH A143"));
        data.insert(std::make_pair(0x144ab,"ANATOLIAN HIEROGLYPH A144"));
        data.insert(std::make_pair(0x144ac,"ANATOLIAN HIEROGLYPH A145"));
        data.insert(std::make_pair(0x144ad,"ANATOLIAN HIEROGLYPH A146"));
        data.insert(std::make_pair(0x144ae,"ANATOLIAN HIEROGLYPH A147"));
        data.insert(std::make_pair(0x144af,"ANATOLIAN HIEROGLYPH A148"));
        data.insert(std::make_pair(0x144b0,"ANATOLIAN HIEROGLYPH A149"));
        data.insert(std::make_pair(0x144b1,"ANATOLIAN HIEROGLYPH A150"));
        data.insert(std::make_pair(0x144b2,"ANATOLIAN HIEROGLYPH A151"));
        data.insert(std::make_pair(0x144b3,"ANATOLIAN HIEROGLYPH A152"));
        data.insert(std::make_pair(0x144b4,"ANATOLIAN HIEROGLYPH A153"));
        data.insert(std::make_pair(0x144b5,"ANATOLIAN HIEROGLYPH A154"));
        data.insert(std::make_pair(0x144b6,"ANATOLIAN HIEROGLYPH A155"));
        data.insert(std::make_pair(0x144b7,"ANATOLIAN HIEROGLYPH A156"));
        data.insert(std::make_pair(0x144b8,"ANATOLIAN HIEROGLYPH A157"));
        data.insert(std::make_pair(0x144b9,"ANATOLIAN HIEROGLYPH A158"));
        data.insert(std::make_pair(0x144ba,"ANATOLIAN HIEROGLYPH A159"));
        data.insert(std::make_pair(0x144bb,"ANATOLIAN HIEROGLYPH A160"));
        data.insert(std::make_pair(0x144bc,"ANATOLIAN HIEROGLYPH A161"));
        data.insert(std::make_pair(0x144bd,"ANATOLIAN HIEROGLYPH A162"));
        data.insert(std::make_pair(0x144be,"ANATOLIAN HIEROGLYPH A163"));
        data.insert(std::make_pair(0x144bf,"ANATOLIAN HIEROGLYPH A164"));
        data.insert(std::make_pair(0x144c0,"ANATOLIAN HIEROGLYPH A165"));
        data.insert(std::make_pair(0x144c1,"ANATOLIAN HIEROGLYPH A166"));
        data.insert(std::make_pair(0x144c2,"ANATOLIAN HIEROGLYPH A167"));
        data.insert(std::make_pair(0x144c3,"ANATOLIAN HIEROGLYPH A168"));
        data.insert(std::make_pair(0x144c4,"ANATOLIAN HIEROGLYPH A169"));
        data.insert(std::make_pair(0x144c5,"ANATOLIAN HIEROGLYPH A170"));
        data.insert(std::make_pair(0x144c6,"ANATOLIAN HIEROGLYPH A171"));
        data.insert(std::make_pair(0x144c7,"ANATOLIAN HIEROGLYPH A172"));
        data.insert(std::make_pair(0x144c8,"ANATOLIAN HIEROGLYPH A173"));
        data.insert(std::make_pair(0x144c9,"ANATOLIAN HIEROGLYPH A174"));
        data.insert(std::make_pair(0x144ca,"ANATOLIAN HIEROGLYPH A175"));
        data.insert(std::make_pair(0x144cb,"ANATOLIAN HIEROGLYPH A176"));
        data.insert(std::make_pair(0x144cc,"ANATOLIAN HIEROGLYPH A177"));
        data.insert(std::make_pair(0x144cd,"ANATOLIAN HIEROGLYPH A178"));
        data.insert(std::make_pair(0x144ce,"ANATOLIAN HIEROGLYPH A179"));
        data.insert(std::make_pair(0x144cf,"ANATOLIAN HIEROGLYPH A180"));
        data.insert(std::make_pair(0x144d0,"ANATOLIAN HIEROGLYPH A181"));
        data.insert(std::make_pair(0x144d1,"ANATOLIAN HIEROGLYPH A182"));
        data.insert(std::make_pair(0x144d2,"ANATOLIAN HIEROGLYPH A183"));
        data.insert(std::make_pair(0x144d3,"ANATOLIAN HIEROGLYPH A184"));
        data.insert(std::make_pair(0x144d4,"ANATOLIAN HIEROGLYPH A185"));
        data.insert(std::make_pair(0x144d5,"ANATOLIAN HIEROGLYPH A186"));
        data.insert(std::make_pair(0x144d6,"ANATOLIAN HIEROGLYPH A187"));
        data.insert(std::make_pair(0x144d7,"ANATOLIAN HIEROGLYPH A188"));
        data.insert(std::make_pair(0x144d8,"ANATOLIAN HIEROGLYPH A189"));
        data.insert(std::make_pair(0x144d9,"ANATOLIAN HIEROGLYPH A190"));
        data.insert(std::make_pair(0x144da,"ANATOLIAN HIEROGLYPH A191"));
        data.insert(std::make_pair(0x144db,"ANATOLIAN HIEROGLYPH A192"));
        data.insert(std::make_pair(0x144dc,"ANATOLIAN HIEROGLYPH A193"));
        data.insert(std::make_pair(0x144dd,"ANATOLIAN HIEROGLYPH A194"));
        data.insert(std::make_pair(0x144de,"ANATOLIAN HIEROGLYPH A195"));
        data.insert(std::make_pair(0x144df,"ANATOLIAN HIEROGLYPH A196"));
        data.insert(std::make_pair(0x144e0,"ANATOLIAN HIEROGLYPH A197"));
        data.insert(std::make_pair(0x144e1,"ANATOLIAN HIEROGLYPH A198"));
        data.insert(std::make_pair(0x144e2,"ANATOLIAN HIEROGLYPH A199"));
        data.insert(std::make_pair(0x144e3,"ANATOLIAN HIEROGLYPH A200"));
        data.insert(std::make_pair(0x144e4,"ANATOLIAN HIEROGLYPH A201"));
        data.insert(std::make_pair(0x144e5,"ANATOLIAN HIEROGLYPH A202"));
        data.insert(std::make_pair(0x144e6,"ANATOLIAN HIEROGLYPH A202A"));
        data.insert(std::make_pair(0x144e7,"ANATOLIAN HIEROGLYPH A202B"));
        data.insert(std::make_pair(0x144e8,"ANATOLIAN HIEROGLYPH A203"));
        data.insert(std::make_pair(0x144e9,"ANATOLIAN HIEROGLYPH A204"));
        data.insert(std::make_pair(0x144ea,"ANATOLIAN HIEROGLYPH A205"));
        data.insert(std::make_pair(0x144eb,"ANATOLIAN HIEROGLYPH A206"));
        data.insert(std::make_pair(0x144ec,"ANATOLIAN HIEROGLYPH A207"));
        data.insert(std::make_pair(0x144ed,"ANATOLIAN HIEROGLYPH A207A"));
        data.insert(std::make_pair(0x144ee,"ANATOLIAN HIEROGLYPH A208"));
        data.insert(std::make_pair(0x144ef,"ANATOLIAN HIEROGLYPH A209"));
        data.insert(std::make_pair(0x144f0,"ANATOLIAN HIEROGLYPH A209A"));
        data.insert(std::make_pair(0x144f1,"ANATOLIAN HIEROGLYPH A210"));
        data.insert(std::make_pair(0x144f2,"ANATOLIAN HIEROGLYPH A211"));
        data.insert(std::make_pair(0x144f3,"ANATOLIAN HIEROGLYPH A212"));
        data.insert(std::make_pair(0x144f4,"ANATOLIAN HIEROGLYPH A213"));
        data.insert(std::make_pair(0x144f5,"ANATOLIAN HIEROGLYPH A214"));
        data.insert(std::make_pair(0x144f6,"ANATOLIAN HIEROGLYPH A215"));
        data.insert(std::make_pair(0x144f7,"ANATOLIAN HIEROGLYPH A215A"));
        data.insert(std::make_pair(0x144f8,"ANATOLIAN HIEROGLYPH A216"));
        data.insert(std::make_pair(0x144f9,"ANATOLIAN HIEROGLYPH A216A"));
        data.insert(std::make_pair(0x144fa,"ANATOLIAN HIEROGLYPH A217"));
        data.insert(std::make_pair(0x144fb,"ANATOLIAN HIEROGLYPH A218"));
        data.insert(std::make_pair(0x144fc,"ANATOLIAN HIEROGLYPH A219"));
        data.insert(std::make_pair(0x144fd,"ANATOLIAN HIEROGLYPH A220"));
        data.insert(std::make_pair(0x144fe,"ANATOLIAN HIEROGLYPH A221"));
        data.insert(std::make_pair(0x144ff,"ANATOLIAN HIEROGLYPH A222"));
        data.insert(std::make_pair(0x14500,"ANATOLIAN HIEROGLYPH A223"));
        data.insert(std::make_pair(0x14501,"ANATOLIAN HIEROGLYPH A224"));
        data.insert(std::make_pair(0x14502,"ANATOLIAN HIEROGLYPH A225"));
        data.insert(std::make_pair(0x14503,"ANATOLIAN HIEROGLYPH A226"));
        data.insert(std::make_pair(0x14504,"ANATOLIAN HIEROGLYPH A227"));
        data.insert(std::make_pair(0x14505,"ANATOLIAN HIEROGLYPH A227A"));
        data.insert(std::make_pair(0x14506,"ANATOLIAN HIEROGLYPH A228"));
        data.insert(std::make_pair(0x14507,"ANATOLIAN HIEROGLYPH A229"));
        data.insert(std::make_pair(0x14508,"ANATOLIAN HIEROGLYPH A230"));
        data.insert(std::make_pair(0x14509,"ANATOLIAN HIEROGLYPH A231"));
        data.insert(std::make_pair(0x1450a,"ANATOLIAN HIEROGLYPH A232"));
        data.insert(std::make_pair(0x1450b,"ANATOLIAN HIEROGLYPH A233"));
        data.insert(std::make_pair(0x1450c,"ANATOLIAN HIEROGLYPH A234"));
        data.insert(std::make_pair(0x1450d,"ANATOLIAN HIEROGLYPH A235"));
        data.insert(std::make_pair(0x1450e,"ANATOLIAN HIEROGLYPH A236"));
        data.insert(std::make_pair(0x1450f,"ANATOLIAN HIEROGLYPH A237"));
        data.insert(std::make_pair(0x14510,"ANATOLIAN HIEROGLYPH A238"));
        data.insert(std::make_pair(0x14511,"ANATOLIAN HIEROGLYPH A239"));
        data.insert(std::make_pair(0x14512,"ANATOLIAN HIEROGLYPH A240"));
        data.insert(std::make_pair(0x14513,"ANATOLIAN HIEROGLYPH A241"));
        data.insert(std::make_pair(0x14514,"ANATOLIAN HIEROGLYPH A242"));
        data.insert(std::make_pair(0x14515,"ANATOLIAN HIEROGLYPH A243"));
        data.insert(std::make_pair(0x14516,"ANATOLIAN HIEROGLYPH A244"));
        data.insert(std::make_pair(0x14517,"ANATOLIAN HIEROGLYPH A245"));
        data.insert(std::make_pair(0x14518,"ANATOLIAN HIEROGLYPH A246"));
        data.insert(std::make_pair(0x14519,"ANATOLIAN HIEROGLYPH A247"));
        data.insert(std::make_pair(0x1451a,"ANATOLIAN HIEROGLYPH A248"));
        data.insert(std::make_pair(0x1451b,"ANATOLIAN HIEROGLYPH A249"));
        data.insert(std::make_pair(0x1451c,"ANATOLIAN HIEROGLYPH A250"));
        data.insert(std::make_pair(0x1451d,"ANATOLIAN HIEROGLYPH A251"));
        data.insert(std::make_pair(0x1451e,"ANATOLIAN HIEROGLYPH A252"));
        data.insert(std::make_pair(0x1451f,"ANATOLIAN HIEROGLYPH A253"));
        data.insert(std::make_pair(0x14520,"ANATOLIAN HIEROGLYPH A254"));
        data.insert(std::make_pair(0x14521,"ANATOLIAN HIEROGLYPH A255"));
        data.insert(std::make_pair(0x14522,"ANATOLIAN HIEROGLYPH A256"));
        data.insert(std::make_pair(0x14523,"ANATOLIAN HIEROGLYPH A257"));
        data.insert(std::make_pair(0x14524,"ANATOLIAN HIEROGLYPH A258"));
        data.insert(std::make_pair(0x14525,"ANATOLIAN HIEROGLYPH A259"));
        data.insert(std::make_pair(0x14526,"ANATOLIAN HIEROGLYPH A260"));
        data.insert(std::make_pair(0x14527,"ANATOLIAN HIEROGLYPH A261"));
        data.insert(std::make_pair(0x14528,"ANATOLIAN HIEROGLYPH A262"));
        data.insert(std::make_pair(0x14529,"ANATOLIAN HIEROGLYPH A263"));
        data.insert(std::make_pair(0x1452a,"ANATOLIAN HIEROGLYPH A264"));
        data.insert(std::make_pair(0x1452b,"ANATOLIAN HIEROGLYPH A265"));
        data.insert(std::make_pair(0x1452c,"ANATOLIAN HIEROGLYPH A266"));
        data.insert(std::make_pair(0x1452d,"ANATOLIAN HIEROGLYPH A267"));
        data.insert(std::make_pair(0x1452e,"ANATOLIAN HIEROGLYPH A267A"));
        data.insert(std::make_pair(0x1452f,"ANATOLIAN HIEROGLYPH A268"));
        data.insert(std::make_pair(0x14530,"ANATOLIAN HIEROGLYPH A269"));
        data.insert(std::make_pair(0x14531,"ANATOLIAN HIEROGLYPH A270"));
        data.insert(std::make_pair(0x14532,"ANATOLIAN HIEROGLYPH A271"));
        data.insert(std::make_pair(0x14533,"ANATOLIAN HIEROGLYPH A272"));
        data.insert(std::make_pair(0x14534,"ANATOLIAN HIEROGLYPH A273"));
        data.insert(std::make_pair(0x14535,"ANATOLIAN HIEROGLYPH A274"));
        data.insert(std::make_pair(0x14536,"ANATOLIAN HIEROGLYPH A275"));
        data.insert(std::make_pair(0x14537,"ANATOLIAN HIEROGLYPH A276"));
        data.insert(std::make_pair(0x14538,"ANATOLIAN HIEROGLYPH A277"));
        data.insert(std::make_pair(0x14539,"ANATOLIAN HIEROGLYPH A278"));
        data.insert(std::make_pair(0x1453a,"ANATOLIAN HIEROGLYPH A279"));
        data.insert(std::make_pair(0x1453b,"ANATOLIAN HIEROGLYPH A280"));
        data.insert(std::make_pair(0x1453c,"ANATOLIAN HIEROGLYPH A281"));
        data.insert(std::make_pair(0x1453d,"ANATOLIAN HIEROGLYPH A282"));
        data.insert(std::make_pair(0x1453e,"ANATOLIAN HIEROGLYPH A283"));
        data.insert(std::make_pair(0x1453f,"ANATOLIAN HIEROGLYPH A284"));
        data.insert(std::make_pair(0x14540,"ANATOLIAN HIEROGLYPH A285"));
        data.insert(std::make_pair(0x14541,"ANATOLIAN HIEROGLYPH A286"));
        data.insert(std::make_pair(0x14542,"ANATOLIAN HIEROGLYPH A287"));
        data.insert(std::make_pair(0x14543,"ANATOLIAN HIEROGLYPH A288"));
        data.insert(std::make_pair(0x14544,"ANATOLIAN HIEROGLYPH A289"));
        data.insert(std::make_pair(0x14545,"ANATOLIAN HIEROGLYPH A289A"));
        data.insert(std::make_pair(0x14546,"ANATOLIAN HIEROGLYPH A290"));
        data.insert(std::make_pair(0x14547,"ANATOLIAN HIEROGLYPH A291"));
        data.insert(std::make_pair(0x14548,"ANATOLIAN HIEROGLYPH A292"));
        data.insert(std::make_pair(0x14549,"ANATOLIAN HIEROGLYPH A293"));
        data.insert(std::make_pair(0x1454a,"ANATOLIAN HIEROGLYPH A294"));
        data.insert(std::make_pair(0x1454b,"ANATOLIAN HIEROGLYPH A294A"));
        data.insert(std::make_pair(0x1454c,"ANATOLIAN HIEROGLYPH A295"));
        data.insert(std::make_pair(0x1454d,"ANATOLIAN HIEROGLYPH A296"));
        data.insert(std::make_pair(0x1454e,"ANATOLIAN HIEROGLYPH A297"));
        data.insert(std::make_pair(0x1454f,"ANATOLIAN HIEROGLYPH A298"));
        data.insert(std::make_pair(0x14550,"ANATOLIAN HIEROGLYPH A299"));
        data.insert(std::make_pair(0x14551,"ANATOLIAN HIEROGLYPH A299A"));
        data.insert(std::make_pair(0x14552,"ANATOLIAN HIEROGLYPH A300"));
        data.insert(std::make_pair(0x14553,"ANATOLIAN HIEROGLYPH A301"));
        data.insert(std::make_pair(0x14554,"ANATOLIAN HIEROGLYPH A302"));
        data.insert(std::make_pair(0x14555,"ANATOLIAN HIEROGLYPH A303"));
        data.insert(std::make_pair(0x14556,"ANATOLIAN HIEROGLYPH A304"));
        data.insert(std::make_pair(0x14557,"ANATOLIAN HIEROGLYPH A305"));
        data.insert(std::make_pair(0x14558,"ANATOLIAN HIEROGLYPH A306"));
        data.insert(std::make_pair(0x14559,"ANATOLIAN HIEROGLYPH A307"));
        data.insert(std::make_pair(0x1455a,"ANATOLIAN HIEROGLYPH A308"));
        data.insert(std::make_pair(0x1455b,"ANATOLIAN HIEROGLYPH A309"));
        data.insert(std::make_pair(0x1455c,"ANATOLIAN HIEROGLYPH A309A"));
        data.insert(std::make_pair(0x1455d,"ANATOLIAN HIEROGLYPH A310"));
        data.insert(std::make_pair(0x1455e,"ANATOLIAN HIEROGLYPH A311"));
        data.insert(std::make_pair(0x1455f,"ANATOLIAN HIEROGLYPH A312"));
        data.insert(std::make_pair(0x14560,"ANATOLIAN HIEROGLYPH A313"));
        data.insert(std::make_pair(0x14561,"ANATOLIAN HIEROGLYPH A314"));
        data.insert(std::make_pair(0x14562,"ANATOLIAN HIEROGLYPH A315"));
        data.insert(std::make_pair(0x14563,"ANATOLIAN HIEROGLYPH A316"));
        data.insert(std::make_pair(0x14564,"ANATOLIAN HIEROGLYPH A317"));
        data.insert(std::make_pair(0x14565,"ANATOLIAN HIEROGLYPH A318"));
        data.insert(std::make_pair(0x14566,"ANATOLIAN HIEROGLYPH A319"));
        data.insert(std::make_pair(0x14567,"ANATOLIAN HIEROGLYPH A320"));
        data.insert(std::make_pair(0x14568,"ANATOLIAN HIEROGLYPH A321"));
        data.insert(std::make_pair(0x14569,"ANATOLIAN HIEROGLYPH A322"));
        data.insert(std::make_pair(0x1456a,"ANATOLIAN HIEROGLYPH A323"));
        data.insert(std::make_pair(0x1456b,"ANATOLIAN HIEROGLYPH A324"));
        data.insert(std::make_pair(0x1456c,"ANATOLIAN HIEROGLYPH A325"));
        data.insert(std::make_pair(0x1456d,"ANATOLIAN HIEROGLYPH A326"));
        data.insert(std::make_pair(0x1456e,"ANATOLIAN HIEROGLYPH A327"));
        data.insert(std::make_pair(0x1456f,"ANATOLIAN HIEROGLYPH A328"));
        data.insert(std::make_pair(0x14570,"ANATOLIAN HIEROGLYPH A329"));
        data.insert(std::make_pair(0x14571,"ANATOLIAN HIEROGLYPH A329A"));
        data.insert(std::make_pair(0x14572,"ANATOLIAN HIEROGLYPH A330"));
        data.insert(std::make_pair(0x14573,"ANATOLIAN HIEROGLYPH A331"));
        data.insert(std::make_pair(0x14574,"ANATOLIAN HIEROGLYPH A332A"));
        data.insert(std::make_pair(0x14575,"ANATOLIAN HIEROGLYPH A332B"));
        data.insert(std::make_pair(0x14576,"ANATOLIAN HIEROGLYPH A332C"));
        data.insert(std::make_pair(0x14577,"ANATOLIAN HIEROGLYPH A333"));
        data.insert(std::make_pair(0x14578,"ANATOLIAN HIEROGLYPH A334"));
        data.insert(std::make_pair(0x14579,"ANATOLIAN HIEROGLYPH A335"));
        data.insert(std::make_pair(0x1457a,"ANATOLIAN HIEROGLYPH A336"));
        data.insert(std::make_pair(0x1457b,"ANATOLIAN HIEROGLYPH A336A"));
        data.insert(std::make_pair(0x1457c,"ANATOLIAN HIEROGLYPH A336B"));
        data.insert(std::make_pair(0x1457d,"ANATOLIAN HIEROGLYPH A336C"));
        data.insert(std::make_pair(0x1457e,"ANATOLIAN HIEROGLYPH A337"));
        data.insert(std::make_pair(0x1457f,"ANATOLIAN HIEROGLYPH A338"));
        data.insert(std::make_pair(0x14580,"ANATOLIAN HIEROGLYPH A339"));
        data.insert(std::make_pair(0x14581,"ANATOLIAN HIEROGLYPH A340"));
        data.insert(std::make_pair(0x14582,"ANATOLIAN HIEROGLYPH A341"));
        data.insert(std::make_pair(0x14583,"ANATOLIAN HIEROGLYPH A342"));
        data.insert(std::make_pair(0x14584,"ANATOLIAN HIEROGLYPH A343"));
        data.insert(std::make_pair(0x14585,"ANATOLIAN HIEROGLYPH A344"));
        data.insert(std::make_pair(0x14586,"ANATOLIAN HIEROGLYPH A345"));
        data.insert(std::make_pair(0x14587,"ANATOLIAN HIEROGLYPH A346"));
        data.insert(std::make_pair(0x14588,"ANATOLIAN HIEROGLYPH A347"));
        data.insert(std::make_pair(0x14589,"ANATOLIAN HIEROGLYPH A348"));
        data.insert(std::make_pair(0x1458a,"ANATOLIAN HIEROGLYPH A349"));
        data.insert(std::make_pair(0x1458b,"ANATOLIAN HIEROGLYPH A350"));
        data.insert(std::make_pair(0x1458c,"ANATOLIAN HIEROGLYPH A351"));
        data.insert(std::make_pair(0x1458d,"ANATOLIAN HIEROGLYPH A352"));
        data.insert(std::make_pair(0x1458e,"ANATOLIAN HIEROGLYPH A353"));
        data.insert(std::make_pair(0x1458f,"ANATOLIAN HIEROGLYPH A354"));
        data.insert(std::make_pair(0x14590,"ANATOLIAN HIEROGLYPH A355"));
        data.insert(std::make_pair(0x14591,"ANATOLIAN HIEROGLYPH A356"));
        data.insert(std::make_pair(0x14592,"ANATOLIAN HIEROGLYPH A357"));
        data.insert(std::make_pair(0x14593,"ANATOLIAN HIEROGLYPH A358"));
        data.insert(std::make_pair(0x14594,"ANATOLIAN HIEROGLYPH A359"));
        data.insert(std::make_pair(0x14595,"ANATOLIAN HIEROGLYPH A359A"));
        data.insert(std::make_pair(0x14596,"ANATOLIAN HIEROGLYPH A360"));
        data.insert(std::make_pair(0x14597,"ANATOLIAN HIEROGLYPH A361"));
        data.insert(std::make_pair(0x14598,"ANATOLIAN HIEROGLYPH A362"));
        data.insert(std::make_pair(0x14599,"ANATOLIAN HIEROGLYPH A363"));
        data.insert(std::make_pair(0x1459a,"ANATOLIAN HIEROGLYPH A364"));
        data.insert(std::make_pair(0x1459b,"ANATOLIAN HIEROGLYPH A364A"));
        data.insert(std::make_pair(0x1459c,"ANATOLIAN HIEROGLYPH A365"));
        data.insert(std::make_pair(0x1459d,"ANATOLIAN HIEROGLYPH A366"));
        data.insert(std::make_pair(0x1459e,"ANATOLIAN HIEROGLYPH A367"));
        data.insert(std::make_pair(0x1459f,"ANATOLIAN HIEROGLYPH A368"));
        data.insert(std::make_pair(0x145a0,"ANATOLIAN HIEROGLYPH A368A"));
        data.insert(std::make_pair(0x145a1,"ANATOLIAN HIEROGLYPH A369"));
        data.insert(std::make_pair(0x145a2,"ANATOLIAN HIEROGLYPH A370"));
        data.insert(std::make_pair(0x145a3,"ANATOLIAN HIEROGLYPH A371"));
        data.insert(std::make_pair(0x145a4,"ANATOLIAN HIEROGLYPH A371A"));
        data.insert(std::make_pair(0x145a5,"ANATOLIAN HIEROGLYPH A372"));
        data.insert(std::make_pair(0x145a6,"ANATOLIAN HIEROGLYPH A373"));
        data.insert(std::make_pair(0x145a7,"ANATOLIAN HIEROGLYPH A374"));
        data.insert(std::make_pair(0x145a8,"ANATOLIAN HIEROGLYPH A375"));
        data.insert(std::make_pair(0x145a9,"ANATOLIAN HIEROGLYPH A376"));
        data.insert(std::make_pair(0x145aa,"ANATOLIAN HIEROGLYPH A377"));
        data.insert(std::make_pair(0x145ab,"ANATOLIAN HIEROGLYPH A378"));
        data.insert(std::make_pair(0x145ac,"ANATOLIAN HIEROGLYPH A379"));
        data.insert(std::make_pair(0x145ad,"ANATOLIAN HIEROGLYPH A380"));
        data.insert(std::make_pair(0x145ae,"ANATOLIAN HIEROGLYPH A381"));
        data.insert(std::make_pair(0x145af,"ANATOLIAN HIEROGLYPH A381A"));
        data.insert(std::make_pair(0x145b0,"ANATOLIAN HIEROGLYPH A382"));
        data.insert(std::make_pair(0x145b1,"ANATOLIAN HIEROGLYPH A383 RA OR RI"));
        data.insert(std::make_pair(0x145b2,"ANATOLIAN HIEROGLYPH A383A"));
        data.insert(std::make_pair(0x145b3,"ANATOLIAN HIEROGLYPH A384"));
        data.insert(std::make_pair(0x145b4,"ANATOLIAN HIEROGLYPH A385"));
        data.insert(std::make_pair(0x145b5,"ANATOLIAN HIEROGLYPH A386"));
        data.insert(std::make_pair(0x145b6,"ANATOLIAN HIEROGLYPH A386A"));
        data.insert(std::make_pair(0x145b7,"ANATOLIAN HIEROGLYPH A387"));
        data.insert(std::make_pair(0x145b8,"ANATOLIAN HIEROGLYPH A388"));
        data.insert(std::make_pair(0x145b9,"ANATOLIAN HIEROGLYPH A389"));
        data.insert(std::make_pair(0x145ba,"ANATOLIAN HIEROGLYPH A390"));
        data.insert(std::make_pair(0x145bb,"ANATOLIAN HIEROGLYPH A391"));
        data.insert(std::make_pair(0x145bc,"ANATOLIAN HIEROGLYPH A392"));
        data.insert(std::make_pair(0x145bd,"ANATOLIAN HIEROGLYPH A393 EIGHT"));
        data.insert(std::make_pair(0x145be,"ANATOLIAN HIEROGLYPH A394"));
        data.insert(std::make_pair(0x145bf,"ANATOLIAN HIEROGLYPH A395"));
        data.insert(std::make_pair(0x145c0,"ANATOLIAN HIEROGLYPH A396"));
        data.insert(std::make_pair(0x145c1,"ANATOLIAN HIEROGLYPH A397"));
        data.insert(std::make_pair(0x145c2,"ANATOLIAN HIEROGLYPH A398"));
        data.insert(std::make_pair(0x145c3,"ANATOLIAN HIEROGLYPH A399"));
        data.insert(std::make_pair(0x145c4,"ANATOLIAN HIEROGLYPH A400"));
        data.insert(std::make_pair(0x145c5,"ANATOLIAN HIEROGLYPH A401"));
        data.insert(std::make_pair(0x145c6,"ANATOLIAN HIEROGLYPH A402"));
        data.insert(std::make_pair(0x145c7,"ANATOLIAN HIEROGLYPH A403"));
        data.insert(std::make_pair(0x145c8,"ANATOLIAN HIEROGLYPH A404"));
        data.insert(std::make_pair(0x145c9,"ANATOLIAN HIEROGLYPH A405"));
        data.insert(std::make_pair(0x145ca,"ANATOLIAN HIEROGLYPH A406"));
        data.insert(std::make_pair(0x145cb,"ANATOLIAN HIEROGLYPH A407"));
        data.insert(std::make_pair(0x145cc,"ANATOLIAN HIEROGLYPH A408"));
        data.insert(std::make_pair(0x145cd,"ANATOLIAN HIEROGLYPH A409"));
        data.insert(std::make_pair(0x145ce,"ANATOLIAN HIEROGLYPH A410 BEGIN LOGOGRAM MARK"));
        data.insert(std::make_pair(0x145cf,"ANATOLIAN HIEROGLYPH A410A END LOGOGRAM MARK"));
        data.insert(std::make_pair(0x145d0,"ANATOLIAN HIEROGLYPH A411"));
        data.insert(std::make_pair(0x145d1,"ANATOLIAN HIEROGLYPH A412"));
        data.insert(std::make_pair(0x145d2,"ANATOLIAN HIEROGLYPH A413"));
        data.insert(std::make_pair(0x145d3,"ANATOLIAN HIEROGLYPH A414"));
        data.insert(std::make_pair(0x145d4,"ANATOLIAN HIEROGLYPH A415"));
        data.insert(std::make_pair(0x145d5,"ANATOLIAN HIEROGLYPH A416"));
        data.insert(std::make_pair(0x145d6,"ANATOLIAN HIEROGLYPH A417"));
        data.insert(std::make_pair(0x145d7,"ANATOLIAN HIEROGLYPH A418"));
        data.insert(std::make_pair(0x145d8,"ANATOLIAN HIEROGLYPH A419"));
        data.insert(std::make_pair(0x145d9,"ANATOLIAN HIEROGLYPH A420"));
        data.insert(std::make_pair(0x145da,"ANATOLIAN HIEROGLYPH A421"));
        data.insert(std::make_pair(0x145db,"ANATOLIAN HIEROGLYPH A422"));
        data.insert(std::make_pair(0x145dc,"ANATOLIAN HIEROGLYPH A423"));
        data.insert(std::make_pair(0x145dd,"ANATOLIAN HIEROGLYPH A424"));
        data.insert(std::make_pair(0x145de,"ANATOLIAN HIEROGLYPH A425"));
        data.insert(std::make_pair(0x145df,"ANATOLIAN HIEROGLYPH A426"));
        data.insert(std::make_pair(0x145e0,"ANATOLIAN HIEROGLYPH A427"));
        data.insert(std::make_pair(0x145e1,"ANATOLIAN HIEROGLYPH A428"));
        data.insert(std::make_pair(0x145e2,"ANATOLIAN HIEROGLYPH A429"));
        data.insert(std::make_pair(0x145e3,"ANATOLIAN HIEROGLYPH A430"));
        data.insert(std::make_pair(0x145e4,"ANATOLIAN HIEROGLYPH A431"));
        data.insert(std::make_pair(0x145e5,"ANATOLIAN HIEROGLYPH A432"));
        data.insert(std::make_pair(0x145e6,"ANATOLIAN HIEROGLYPH A433"));
        data.insert(std::make_pair(0x145e7,"ANATOLIAN HIEROGLYPH A434"));
        data.insert(std::make_pair(0x145e8,"ANATOLIAN HIEROGLYPH A435"));
        data.insert(std::make_pair(0x145e9,"ANATOLIAN HIEROGLYPH A436"));
        data.insert(std::make_pair(0x145ea,"ANATOLIAN HIEROGLYPH A437"));
        data.insert(std::make_pair(0x145eb,"ANATOLIAN HIEROGLYPH A438"));
        data.insert(std::make_pair(0x145ec,"ANATOLIAN HIEROGLYPH A439"));
        data.insert(std::make_pair(0x145ed,"ANATOLIAN HIEROGLYPH A440"));
        data.insert(std::make_pair(0x145ee,"ANATOLIAN HIEROGLYPH A441"));
        data.insert(std::make_pair(0x145ef,"ANATOLIAN HIEROGLYPH A442"));
        data.insert(std::make_pair(0x145f0,"ANATOLIAN HIEROGLYPH A443"));
        data.insert(std::make_pair(0x145f1,"ANATOLIAN HIEROGLYPH A444"));
        data.insert(std::make_pair(0x145f2,"ANATOLIAN HIEROGLYPH A445"));
        data.insert(std::make_pair(0x145f3,"ANATOLIAN HIEROGLYPH A446"));
        data.insert(std::make_pair(0x145f4,"ANATOLIAN HIEROGLYPH A447"));
        data.insert(std::make_pair(0x145f5,"ANATOLIAN HIEROGLYPH A448"));
        data.insert(std::make_pair(0x145f6,"ANATOLIAN HIEROGLYPH A449"));
        data.insert(std::make_pair(0x145f7,"ANATOLIAN HIEROGLYPH A450"));
        data.insert(std::make_pair(0x145f8,"ANATOLIAN HIEROGLYPH A450A"));
        data.insert(std::make_pair(0x145f9,"ANATOLIAN HIEROGLYPH A451"));
        data.insert(std::make_pair(0x145fa,"ANATOLIAN HIEROGLYPH A452"));
        data.insert(std::make_pair(0x145fb,"ANATOLIAN HIEROGLYPH A453"));
        data.insert(std::make_pair(0x145fc,"ANATOLIAN HIEROGLYPH A454"));
        data.insert(std::make_pair(0x145fd,"ANATOLIAN HIEROGLYPH A455"));
        data.insert(std::make_pair(0x145fe,"ANATOLIAN HIEROGLYPH A456"));
        data.insert(std::make_pair(0x145ff,"ANATOLIAN HIEROGLYPH A457"));
        data.insert(std::make_pair(0x14600,"ANATOLIAN HIEROGLYPH A457A"));
        data.insert(std::make_pair(0x14601,"ANATOLIAN HIEROGLYPH A458"));
        data.insert(std::make_pair(0x14602,"ANATOLIAN HIEROGLYPH A459"));
        data.insert(std::make_pair(0x14603,"ANATOLIAN HIEROGLYPH A460"));
        data.insert(std::make_pair(0x14604,"ANATOLIAN HIEROGLYPH A461"));
        data.insert(std::make_pair(0x14605,"ANATOLIAN HIEROGLYPH A462"));
        data.insert(std::make_pair(0x14606,"ANATOLIAN HIEROGLYPH A463"));
        data.insert(std::make_pair(0x14607,"ANATOLIAN HIEROGLYPH A464"));
        data.insert(std::make_pair(0x14608,"ANATOLIAN HIEROGLYPH A465"));
        data.insert(std::make_pair(0x14609,"ANATOLIAN HIEROGLYPH A466"));
        data.insert(std::make_pair(0x1460a,"ANATOLIAN HIEROGLYPH A467"));
        data.insert(std::make_pair(0x1460b,"ANATOLIAN HIEROGLYPH A468"));
        data.insert(std::make_pair(0x1460c,"ANATOLIAN HIEROGLYPH A469"));
        data.insert(std::make_pair(0x1460d,"ANATOLIAN HIEROGLYPH A470"));
        data.insert(std::make_pair(0x1460e,"ANATOLIAN HIEROGLYPH A471"));
        data.insert(std::make_pair(0x1460f,"ANATOLIAN HIEROGLYPH A472"));
        data.insert(std::make_pair(0x14610,"ANATOLIAN HIEROGLYPH A473"));
        data.insert(std::make_pair(0x14611,"ANATOLIAN HIEROGLYPH A474"));
        data.insert(std::make_pair(0x14612,"ANATOLIAN HIEROGLYPH A475"));
        data.insert(std::make_pair(0x14613,"ANATOLIAN HIEROGLYPH A476"));
        data.insert(std::make_pair(0x14614,"ANATOLIAN HIEROGLYPH A477"));
        data.insert(std::make_pair(0x14615,"ANATOLIAN HIEROGLYPH A478"));
        data.insert(std::make_pair(0x14616,"ANATOLIAN HIEROGLYPH A479"));
        data.insert(std::make_pair(0x14617,"ANATOLIAN HIEROGLYPH A480"));
        data.insert(std::make_pair(0x14618,"ANATOLIAN HIEROGLYPH A481"));
        data.insert(std::make_pair(0x14619,"ANATOLIAN HIEROGLYPH A482"));
        data.insert(std::make_pair(0x1461a,"ANATOLIAN HIEROGLYPH A483"));
        data.insert(std::make_pair(0x1461b,"ANATOLIAN HIEROGLYPH A484"));
        data.insert(std::make_pair(0x1461c,"ANATOLIAN HIEROGLYPH A485"));
        data.insert(std::make_pair(0x1461d,"ANATOLIAN HIEROGLYPH A486"));
        data.insert(std::make_pair(0x1461e,"ANATOLIAN HIEROGLYPH A487"));
        data.insert(std::make_pair(0x1461f,"ANATOLIAN HIEROGLYPH A488"));
        data.insert(std::make_pair(0x14620,"ANATOLIAN HIEROGLYPH A489"));
        data.insert(std::make_pair(0x14621,"ANATOLIAN HIEROGLYPH A490"));
        data.insert(std::make_pair(0x14622,"ANATOLIAN HIEROGLYPH A491"));
        data.insert(std::make_pair(0x14623,"ANATOLIAN HIEROGLYPH A492"));
        data.insert(std::make_pair(0x14624,"ANATOLIAN HIEROGLYPH A493"));
        data.insert(std::make_pair(0x14625,"ANATOLIAN HIEROGLYPH A494"));
        data.insert(std::make_pair(0x14626,"ANATOLIAN HIEROGLYPH A495"));
        data.insert(std::make_pair(0x14627,"ANATOLIAN HIEROGLYPH A496"));
        data.insert(std::make_pair(0x14628,"ANATOLIAN HIEROGLYPH A497"));
        data.insert(std::make_pair(0x14629,"ANATOLIAN HIEROGLYPH A501"));
        data.insert(std::make_pair(0x1462a,"ANATOLIAN HIEROGLYPH A502"));
        data.insert(std::make_pair(0x1462b,"ANATOLIAN HIEROGLYPH A503"));
        data.insert(std::make_pair(0x1462c,"ANATOLIAN HIEROGLYPH A504"));
        data.insert(std::make_pair(0x1462d,"ANATOLIAN HIEROGLYPH A505"));
        data.insert(std::make_pair(0x1462e,"ANATOLIAN HIEROGLYPH A506"));
        data.insert(std::make_pair(0x1462f,"ANATOLIAN HIEROGLYPH A507"));
        data.insert(std::make_pair(0x14630,"ANATOLIAN HIEROGLYPH A508"));
        data.insert(std::make_pair(0x14631,"ANATOLIAN HIEROGLYPH A509"));
        data.insert(std::make_pair(0x14632,"ANATOLIAN HIEROGLYPH A510"));
        data.insert(std::make_pair(0x14633,"ANATOLIAN HIEROGLYPH A511"));
        data.insert(std::make_pair(0x14634,"ANATOLIAN HIEROGLYPH A512"));
        data.insert(std::make_pair(0x14635,"ANATOLIAN HIEROGLYPH A513"));
        data.insert(std::make_pair(0x14636,"ANATOLIAN HIEROGLYPH A514"));
        data.insert(std::make_pair(0x14637,"ANATOLIAN HIEROGLYPH A515"));
        data.insert(std::make_pair(0x14638,"ANATOLIAN HIEROGLYPH A516"));
        data.insert(std::make_pair(0x14639,"ANATOLIAN HIEROGLYPH A517"));
        data.insert(std::make_pair(0x1463a,"ANATOLIAN HIEROGLYPH A518"));
        data.insert(std::make_pair(0x1463b,"ANATOLIAN HIEROGLYPH A519"));
        data.insert(std::make_pair(0x1463c,"ANATOLIAN HIEROGLYPH A520"));
        data.insert(std::make_pair(0x1463d,"ANATOLIAN HIEROGLYPH A521"));
        data.insert(std::make_pair(0x1463e,"ANATOLIAN HIEROGLYPH A522"));
        data.insert(std::make_pair(0x1463f,"ANATOLIAN HIEROGLYPH A523"));
        data.insert(std::make_pair(0x14640,"ANATOLIAN HIEROGLYPH A524"));
        data.insert(std::make_pair(0x14641,"ANATOLIAN HIEROGLYPH A525"));
        data.insert(std::make_pair(0x14642,"ANATOLIAN HIEROGLYPH A526"));
        data.insert(std::make_pair(0x14643,"ANATOLIAN HIEROGLYPH A527"));
        data.insert(std::make_pair(0x14644,"ANATOLIAN HIEROGLYPH A528"));
        data.insert(std::make_pair(0x14645,"ANATOLIAN HIEROGLYPH A529"));
        data.insert(std::make_pair(0x14646,"ANATOLIAN HIEROGLYPH A530"));
        data.insert(std::make_pair(0x16800,"BAMUM LETTER PHASE-A NGKUE MFON"));
        data.insert(std::make_pair(0x16801,"BAMUM LETTER PHASE-A GBIEE FON"));
        data.insert(std::make_pair(0x16802,"BAMUM LETTER PHASE-A PON MFON PIPAEMGBIEE"));
        data.insert(std::make_pair(0x16803,"BAMUM LETTER PHASE-A PON MFON PIPAEMBA"));
        data.insert(std::make_pair(0x16804,"BAMUM LETTER PHASE-A NAA MFON"));
        data.insert(std::make_pair(0x16805,"BAMUM LETTER PHASE-A SHUENSHUET"));
        data.insert(std::make_pair(0x16806,"BAMUM LETTER PHASE-A TITA MFON"));
        data.insert(std::make_pair(0x16807,"BAMUM LETTER PHASE-A NZA MFON"));
        data.insert(std::make_pair(0x16808,"BAMUM LETTER PHASE-A SHINDA PA NJI"));
        data.insert(std::make_pair(0x16809,"BAMUM LETTER PHASE-A PON PA NJI PIPAEMGBIEE"));
        data.insert(std::make_pair(0x1680a,"BAMUM LETTER PHASE-A PON PA NJI PIPAEMBA"));
        data.insert(std::make_pair(0x1680b,"BAMUM LETTER PHASE-A MAEMBGBIEE"));
        data.insert(std::make_pair(0x1680c,"BAMUM LETTER PHASE-A TU MAEMBA"));
        data.insert(std::make_pair(0x1680d,"BAMUM LETTER PHASE-A NGANGU"));
        data.insert(std::make_pair(0x1680e,"BAMUM LETTER PHASE-A MAEMVEUX"));
        data.insert(std::make_pair(0x1680f,"BAMUM LETTER PHASE-A MANSUAE"));
        data.insert(std::make_pair(0x16810,"BAMUM LETTER PHASE-A MVEUAENGAM"));
        data.insert(std::make_pair(0x16811,"BAMUM LETTER PHASE-A SEUNYAM"));
        data.insert(std::make_pair(0x16812,"BAMUM LETTER PHASE-A NTOQPEN"));
        data.insert(std::make_pair(0x16813,"BAMUM LETTER PHASE-A KEUKEUTNDA"));
        data.insert(std::make_pair(0x16814,"BAMUM LETTER PHASE-A NKINDI"));
        data.insert(std::make_pair(0x16815,"BAMUM LETTER PHASE-A SUU"));
        data.insert(std::make_pair(0x16816,"BAMUM LETTER PHASE-A NGKUENZEUM"));
        data.insert(std::make_pair(0x16817,"BAMUM LETTER PHASE-A LAPAQ"));
        data.insert(std::make_pair(0x16818,"BAMUM LETTER PHASE-A LET KUT"));
        data.insert(std::make_pair(0x16819,"BAMUM LETTER PHASE-A NTAP MFAA"));
        data.insert(std::make_pair(0x1681a,"BAMUM LETTER PHASE-A MAEKEUP"));
        data.insert(std::make_pair(0x1681b,"BAMUM LETTER PHASE-A PASHAE"));
        data.insert(std::make_pair(0x1681c,"BAMUM LETTER PHASE-A GHEUAERAE"));
        data.insert(std::make_pair(0x1681d,"BAMUM LETTER PHASE-A PAMSHAE"));
        data.insert(std::make_pair(0x1681e,"BAMUM LETTER PHASE-A MON NGGEUAET"));
        data.insert(std::make_pair(0x1681f,"BAMUM LETTER PHASE-A NZUN MEUT"));
        data.insert(std::make_pair(0x16820,"BAMUM LETTER PHASE-A U YUQ NAE"));
        data.insert(std::make_pair(0x16821,"BAMUM LETTER PHASE-A GHEUAEGHEUAE"));
        data.insert(std::make_pair(0x16822,"BAMUM LETTER PHASE-A NTAP NTAA"));
        data.insert(std::make_pair(0x16823,"BAMUM LETTER PHASE-A SISA"));
        data.insert(std::make_pair(0x16824,"BAMUM LETTER PHASE-A MGBASA"));
        data.insert(std::make_pair(0x16825,"BAMUM LETTER PHASE-A MEUNJOMNDEUQ"));
        data.insert(std::make_pair(0x16826,"BAMUM LETTER PHASE-A MOOMPUQ"));
        data.insert(std::make_pair(0x16827,"BAMUM LETTER PHASE-A KAFA"));
        data.insert(std::make_pair(0x16828,"BAMUM LETTER PHASE-A PA LEERAEWA"));
        data.insert(std::make_pair(0x16829,"BAMUM LETTER PHASE-A NDA LEERAEWA"));
        data.insert(std::make_pair(0x1682a,"BAMUM LETTER PHASE-A PET"));
        data.insert(std::make_pair(0x1682b,"BAMUM LETTER PHASE-A MAEMKPEN"));
        data.insert(std::make_pair(0x1682c,"BAMUM LETTER PHASE-A NIKA"));
        data.insert(std::make_pair(0x1682d,"BAMUM LETTER PHASE-A PUP"));
        data.insert(std::make_pair(0x1682e,"BAMUM LETTER PHASE-A TUAEP"));
        data.insert(std::make_pair(0x1682f,"BAMUM LETTER PHASE-A LUAEP"));
        data.insert(std::make_pair(0x16830,"BAMUM LETTER PHASE-A SONJAM"));
        data.insert(std::make_pair(0x16831,"BAMUM LETTER PHASE-A TEUTEUWEN"));
        data.insert(std::make_pair(0x16832,"BAMUM LETTER PHASE-A MAENYI"));
        data.insert(std::make_pair(0x16833,"BAMUM LETTER PHASE-A KET"));
        data.insert(std::make_pair(0x16834,"BAMUM LETTER PHASE-A NDAANGGEUAET"));
        data.insert(std::make_pair(0x16835,"BAMUM LETTER PHASE-A KUOQ"));
        data.insert(std::make_pair(0x16836,"BAMUM LETTER PHASE-A MOOMEUT"));
        data.insert(std::make_pair(0x16837,"BAMUM LETTER PHASE-A SHUM"));
        data.insert(std::make_pair(0x16838,"BAMUM LETTER PHASE-A LOMMAE"));
        data.insert(std::make_pair(0x16839,"BAMUM LETTER PHASE-A FIRI"));
        data.insert(std::make_pair(0x1683a,"BAMUM LETTER PHASE-A ROM"));
        data.insert(std::make_pair(0x1683b,"BAMUM LETTER PHASE-A KPOQ"));
        data.insert(std::make_pair(0x1683c,"BAMUM LETTER PHASE-A SOQ"));
        data.insert(std::make_pair(0x1683d,"BAMUM LETTER PHASE-A MAP PIEET"));
        data.insert(std::make_pair(0x1683e,"BAMUM LETTER PHASE-A SHIRAE"));
        data.insert(std::make_pair(0x1683f,"BAMUM LETTER PHASE-A NTAP"));
        data.insert(std::make_pair(0x16840,"BAMUM LETTER PHASE-A SHOQ NSHUT YUM"));
        data.insert(std::make_pair(0x16841,"BAMUM LETTER PHASE-A NYIT MONGKEUAEQ"));
        data.insert(std::make_pair(0x16842,"BAMUM LETTER PHASE-A PAARAE"));
        data.insert(std::make_pair(0x16843,"BAMUM LETTER PHASE-A NKAARAE"));
        data.insert(std::make_pair(0x16844,"BAMUM LETTER PHASE-A UNKNOWN"));
        data.insert(std::make_pair(0x16845,"BAMUM LETTER PHASE-A NGGEN"));
        data.insert(std::make_pair(0x16846,"BAMUM LETTER PHASE-A MAESI"));
        data.insert(std::make_pair(0x16847,"BAMUM LETTER PHASE-A NJAM"));
        data.insert(std::make_pair(0x16848,"BAMUM LETTER PHASE-A MBANYI"));
        data.insert(std::make_pair(0x16849,"BAMUM LETTER PHASE-A NYET"));
        data.insert(std::make_pair(0x1684a,"BAMUM LETTER PHASE-A TEUAEN"));
        data.insert(std::make_pair(0x1684b,"BAMUM LETTER PHASE-A SOT"));
        data.insert(std::make_pair(0x1684c,"BAMUM LETTER PHASE-A PAAM"));
        data.insert(std::make_pair(0x1684d,"BAMUM LETTER PHASE-A NSHIEE"));
        data.insert(std::make_pair(0x1684e,"BAMUM LETTER PHASE-A MAEM"));
        data.insert(std::make_pair(0x1684f,"BAMUM LETTER PHASE-A NYI"));
        data.insert(std::make_pair(0x16850,"BAMUM LETTER PHASE-A KAQ"));
        data.insert(std::make_pair(0x16851,"BAMUM LETTER PHASE-A NSHA"));
        data.insert(std::make_pair(0x16852,"BAMUM LETTER PHASE-A VEE"));
        data.insert(std::make_pair(0x16853,"BAMUM LETTER PHASE-A LU"));
        data.insert(std::make_pair(0x16854,"BAMUM LETTER PHASE-A NEN"));
        data.insert(std::make_pair(0x16855,"BAMUM LETTER PHASE-A NAQ"));
        data.insert(std::make_pair(0x16856,"BAMUM LETTER PHASE-A MBAQ"));
        data.insert(std::make_pair(0x16857,"BAMUM LETTER PHASE-B NSHUET"));
        data.insert(std::make_pair(0x16858,"BAMUM LETTER PHASE-B TU MAEMGBIEE"));
        data.insert(std::make_pair(0x16859,"BAMUM LETTER PHASE-B SIEE"));
        data.insert(std::make_pair(0x1685a,"BAMUM LETTER PHASE-B SET TU"));
        data.insert(std::make_pair(0x1685b,"BAMUM LETTER PHASE-B LOM NTEUM"));
        data.insert(std::make_pair(0x1685c,"BAMUM LETTER PHASE-B MBA MAELEE"));
        data.insert(std::make_pair(0x1685d,"BAMUM LETTER PHASE-B KIEEM"));
        data.insert(std::make_pair(0x1685e,"BAMUM LETTER PHASE-B YEURAE"));
        data.insert(std::make_pair(0x1685f,"BAMUM LETTER PHASE-B MBAARAE"));
        data.insert(std::make_pair(0x16860,"BAMUM LETTER PHASE-B KAM"));
        data.insert(std::make_pair(0x16861,"BAMUM LETTER PHASE-B PEESHI"));
        data.insert(std::make_pair(0x16862,"BAMUM LETTER PHASE-B YAFU LEERAEWA"));
        data.insert(std::make_pair(0x16863,"BAMUM LETTER PHASE-B LAM NSHUT NYAM"));
        data.insert(std::make_pair(0x16864,"BAMUM LETTER PHASE-B NTIEE SHEUOQ"));
        data.insert(std::make_pair(0x16865,"BAMUM LETTER PHASE-B NDU NJAA"));
        data.insert(std::make_pair(0x16866,"BAMUM LETTER PHASE-B GHEUGHEUAEM"));
        data.insert(std::make_pair(0x16867,"BAMUM LETTER PHASE-B PIT"));
        data.insert(std::make_pair(0x16868,"BAMUM LETTER PHASE-B TU NSIEE"));
        data.insert(std::make_pair(0x16869,"BAMUM LETTER PHASE-B SHET NJAQ"));
        data.insert(std::make_pair(0x1686a,"BAMUM LETTER PHASE-B SHEUAEQTU"));
        data.insert(std::make_pair(0x1686b,"BAMUM LETTER PHASE-B MFON TEUAEQ"));
        data.insert(std::make_pair(0x1686c,"BAMUM LETTER PHASE-B MBIT MBAAKET"));
        data.insert(std::make_pair(0x1686d,"BAMUM LETTER PHASE-B NYI NTEUM"));
        data.insert(std::make_pair(0x1686e,"BAMUM LETTER PHASE-B KEUPUQ"));
        data.insert(std::make_pair(0x1686f,"BAMUM LETTER PHASE-B GHEUGHEN"));
        data.insert(std::make_pair(0x16870,"BAMUM LETTER PHASE-B KEUYEUX"));
        data.insert(std::make_pair(0x16871,"BAMUM LETTER PHASE-B LAANAE"));
        data.insert(std::make_pair(0x16872,"BAMUM LETTER PHASE-B PARUM"));
        data.insert(std::make_pair(0x16873,"BAMUM LETTER PHASE-B VEUM"));
        data.insert(std::make_pair(0x16874,"BAMUM LETTER PHASE-B NGKINDI MVOP"));
        data.insert(std::make_pair(0x16875,"BAMUM LETTER PHASE-B NGGEU MBU"));
        data.insert(std::make_pair(0x16876,"BAMUM LETTER PHASE-B WUAET"));
        data.insert(std::make_pair(0x16877,"BAMUM LETTER PHASE-B SAKEUAE"));
        data.insert(std::make_pair(0x16878,"BAMUM LETTER PHASE-B TAAM"));
        data.insert(std::make_pair(0x16879,"BAMUM LETTER PHASE-B MEUQ"));
        data.insert(std::make_pair(0x1687a,"BAMUM LETTER PHASE-B NGGUOQ"));
        data.insert(std::make_pair(0x1687b,"BAMUM LETTER PHASE-B NGGUOQ LARGE"));
        data.insert(std::make_pair(0x1687c,"BAMUM LETTER PHASE-B MFIYAQ"));
        data.insert(std::make_pair(0x1687d,"BAMUM LETTER PHASE-B SUE"));
        data.insert(std::make_pair(0x1687e,"BAMUM LETTER PHASE-B MBEURI"));
        data.insert(std::make_pair(0x1687f,"BAMUM LETTER PHASE-B MONTIEEN"));
        data.insert(std::make_pair(0x16880,"BAMUM LETTER PHASE-B NYAEMAE"));
        data.insert(std::make_pair(0x16881,"BAMUM LETTER PHASE-B PUNGAAM"));
        data.insert(std::make_pair(0x16882,"BAMUM LETTER PHASE-B MEUT NGGEET"));
        data.insert(std::make_pair(0x16883,"BAMUM LETTER PHASE-B FEUX"));
        data.insert(std::make_pair(0x16884,"BAMUM LETTER PHASE-B MBUOQ"));
        data.insert(std::make_pair(0x16885,"BAMUM LETTER PHASE-B FEE"));
        data.insert(std::make_pair(0x16886,"BAMUM LETTER PHASE-B KEUAEM"));
        data.insert(std::make_pair(0x16887,"BAMUM LETTER PHASE-B MA NJEUAENA"));
        data.insert(std::make_pair(0x16888,"BAMUM LETTER PHASE-B MA NJUQA"));
        data.insert(std::make_pair(0x16889,"BAMUM LETTER PHASE-B LET"));
        data.insert(std::make_pair(0x1688a,"BAMUM LETTER PHASE-B NGGAAM"));
        data.insert(std::make_pair(0x1688b,"BAMUM LETTER PHASE-B NSEN"));
        data.insert(std::make_pair(0x1688c,"BAMUM LETTER PHASE-B MA"));
        data.insert(std::make_pair(0x1688d,"BAMUM LETTER PHASE-B KIQ"));
        data.insert(std::make_pair(0x1688e,"BAMUM LETTER PHASE-B NGOM"));
        data.insert(std::make_pair(0x1688f,"BAMUM LETTER PHASE-C NGKUE MAEMBA"));
        data.insert(std::make_pair(0x16890,"BAMUM LETTER PHASE-C NZA"));
        data.insert(std::make_pair(0x16891,"BAMUM LETTER PHASE-C YUM"));
        data.insert(std::make_pair(0x16892,"BAMUM LETTER PHASE-C WANGKUOQ"));
        data.insert(std::make_pair(0x16893,"BAMUM LETTER PHASE-C NGGEN"));
        data.insert(std::make_pair(0x16894,"BAMUM LETTER PHASE-C NDEUAEREE"));
        data.insert(std::make_pair(0x16895,"BAMUM LETTER PHASE-C NGKAQ"));
        data.insert(std::make_pair(0x16896,"BAMUM LETTER PHASE-C GHARAE"));
        data.insert(std::make_pair(0x16897,"BAMUM LETTER PHASE-C MBEEKEET"));
        data.insert(std::make_pair(0x16898,"BAMUM LETTER PHASE-C GBAYI"));
        data.insert(std::make_pair(0x16899,"BAMUM LETTER PHASE-C NYIR MKPARAQ MEUN"));
        data.insert(std::make_pair(0x1689a,"BAMUM LETTER PHASE-C NTU MBIT"));
        data.insert(std::make_pair(0x1689b,"BAMUM LETTER PHASE-C MBEUM"));
        data.insert(std::make_pair(0x1689c,"BAMUM LETTER PHASE-C PIRIEEN"));
        data.insert(std::make_pair(0x1689d,"BAMUM LETTER PHASE-C NDOMBU"));
        data.insert(std::make_pair(0x1689e,"BAMUM LETTER PHASE-C MBAA CABBAGE-TREE"));
        data.insert(std::make_pair(0x1689f,"BAMUM LETTER PHASE-C KEUSHEUAEP"));
        data.insert(std::make_pair(0x168a0,"BAMUM LETTER PHASE-C GHAP"));
        data.insert(std::make_pair(0x168a1,"BAMUM LETTER PHASE-C KEUKAQ"));
        data.insert(std::make_pair(0x168a2,"BAMUM LETTER PHASE-C YU MUOMAE"));
        data.insert(std::make_pair(0x168a3,"BAMUM LETTER PHASE-C NZEUM"));
        data.insert(std::make_pair(0x168a4,"BAMUM LETTER PHASE-C MBUE"));
        data.insert(std::make_pair(0x168a5,"BAMUM LETTER PHASE-C NSEUAEN"));
        data.insert(std::make_pair(0x168a6,"BAMUM LETTER PHASE-C MBIT"));
        data.insert(std::make_pair(0x168a7,"BAMUM LETTER PHASE-C YEUQ"));
        data.insert(std::make_pair(0x168a8,"BAMUM LETTER PHASE-C KPARAQ"));
        data.insert(std::make_pair(0x168a9,"BAMUM LETTER PHASE-C KAA"));
        data.insert(std::make_pair(0x168aa,"BAMUM LETTER PHASE-C SEUX"));
        data.insert(std::make_pair(0x168ab,"BAMUM LETTER PHASE-C NDIDA"));
        data.insert(std::make_pair(0x168ac,"BAMUM LETTER PHASE-C TAASHAE"));
        data.insert(std::make_pair(0x168ad,"BAMUM LETTER PHASE-C NJUEQ"));
        data.insert(std::make_pair(0x168ae,"BAMUM LETTER PHASE-C TITA YUE"));
        data.insert(std::make_pair(0x168af,"BAMUM LETTER PHASE-C SUAET"));
        data.insert(std::make_pair(0x168b0,"BAMUM LETTER PHASE-C NGGUAEN NYAM"));
        data.insert(std::make_pair(0x168b1,"BAMUM LETTER PHASE-C VEUX"));
        data.insert(std::make_pair(0x168b2,"BAMUM LETTER PHASE-C NANSANAQ"));
        data.insert(std::make_pair(0x168b3,"BAMUM LETTER PHASE-C MA KEUAERI"));
        data.insert(std::make_pair(0x168b4,"BAMUM LETTER PHASE-C NTAA"));
        data.insert(std::make_pair(0x168b5,"BAMUM LETTER PHASE-C NGGUON"));
        data.insert(std::make_pair(0x168b6,"BAMUM LETTER PHASE-C LAP"));
        data.insert(std::make_pair(0x168b7,"BAMUM LETTER PHASE-C MBIRIEEN"));
        data.insert(std::make_pair(0x168b8,"BAMUM LETTER PHASE-C MGBASAQ"));
        data.insert(std::make_pair(0x168b9,"BAMUM LETTER PHASE-C NTEUNGBA"));
        data.insert(std::make_pair(0x168ba,"BAMUM LETTER PHASE-C TEUTEUX"));
        data.insert(std::make_pair(0x168bb,"BAMUM LETTER PHASE-C NGGUM"));
        data.insert(std::make_pair(0x168bc,"BAMUM LETTER PHASE-C FUE"));
        data.insert(std::make_pair(0x168bd,"BAMUM LETTER PHASE-C NDEUT"));
        data.insert(std::make_pair(0x168be,"BAMUM LETTER PHASE-C NSA"));
        data.insert(std::make_pair(0x168bf,"BAMUM LETTER PHASE-C NSHAQ"));
        data.insert(std::make_pair(0x168c0,"BAMUM LETTER PHASE-C BUNG"));
        data.insert(std::make_pair(0x168c1,"BAMUM LETTER PHASE-C VEUAEPEN"));
        data.insert(std::make_pair(0x168c2,"BAMUM LETTER PHASE-C MBERAE"));
        data.insert(std::make_pair(0x168c3,"BAMUM LETTER PHASE-C RU"));
        data.insert(std::make_pair(0x168c4,"BAMUM LETTER PHASE-C NJAEM"));
        data.insert(std::make_pair(0x168c5,"BAMUM LETTER PHASE-C LAM"));
        data.insert(std::make_pair(0x168c6,"BAMUM LETTER PHASE-C TITUAEP"));
        data.insert(std::make_pair(0x168c7,"BAMUM LETTER PHASE-C NSUOT NGOM"));
        data.insert(std::make_pair(0x168c8,"BAMUM LETTER PHASE-C NJEEEE"));
        data.insert(std::make_pair(0x168c9,"BAMUM LETTER PHASE-C KET"));
        data.insert(std::make_pair(0x168ca,"BAMUM LETTER PHASE-C NGGU"));
        data.insert(std::make_pair(0x168cb,"BAMUM LETTER PHASE-C MAESI"));
        data.insert(std::make_pair(0x168cc,"BAMUM LETTER PHASE-C MBUAEM"));
        data.insert(std::make_pair(0x168cd,"BAMUM LETTER PHASE-C LU"));
        data.insert(std::make_pair(0x168ce,"BAMUM LETTER PHASE-C KUT"));
        data.insert(std::make_pair(0x168cf,"BAMUM LETTER PHASE-C NJAM"));
        data.insert(std::make_pair(0x168d0,"BAMUM LETTER PHASE-C NGOM"));
        data.insert(std::make_pair(0x168d1,"BAMUM LETTER PHASE-C WUP"));
        data.insert(std::make_pair(0x168d2,"BAMUM LETTER PHASE-C NGGUEET"));
        data.insert(std::make_pair(0x168d3,"BAMUM LETTER PHASE-C NSOM"));
        data.insert(std::make_pair(0x168d4,"BAMUM LETTER PHASE-C NTEN"));
        data.insert(std::make_pair(0x168d5,"BAMUM LETTER PHASE-C KUOP NKAARAE"));
        data.insert(std::make_pair(0x168d6,"BAMUM LETTER PHASE-C NSUN"));
        data.insert(std::make_pair(0x168d7,"BAMUM LETTER PHASE-C NDAM"));
        data.insert(std::make_pair(0x168d8,"BAMUM LETTER PHASE-C MA NSIEE"));
        data.insert(std::make_pair(0x168d9,"BAMUM LETTER PHASE-C YAA"));
        data.insert(std::make_pair(0x168da,"BAMUM LETTER PHASE-C NDAP"));
        data.insert(std::make_pair(0x168db,"BAMUM LETTER PHASE-C SHUEQ"));
        data.insert(std::make_pair(0x168dc,"BAMUM LETTER PHASE-C SETFON"));
        data.insert(std::make_pair(0x168dd,"BAMUM LETTER PHASE-C MBI"));
        data.insert(std::make_pair(0x168de,"BAMUM LETTER PHASE-C MAEMBA"));
        data.insert(std::make_pair(0x168df,"BAMUM LETTER PHASE-C MBANYI"));
        data.insert(std::make_pair(0x168e0,"BAMUM LETTER PHASE-C KEUSEUX"));
        data.insert(std::make_pair(0x168e1,"BAMUM LETTER PHASE-C MBEUX"));
        data.insert(std::make_pair(0x168e2,"BAMUM LETTER PHASE-C KEUM"));
        data.insert(std::make_pair(0x168e3,"BAMUM LETTER PHASE-C MBAA PICKET"));
        data.insert(std::make_pair(0x168e4,"BAMUM LETTER PHASE-C YUWOQ"));
        data.insert(std::make_pair(0x168e5,"BAMUM LETTER PHASE-C NJEUX"));
        data.insert(std::make_pair(0x168e6,"BAMUM LETTER PHASE-C MIEE"));
        data.insert(std::make_pair(0x168e7,"BAMUM LETTER PHASE-C MUAE"));
        data.insert(std::make_pair(0x168e8,"BAMUM LETTER PHASE-C SHIQ"));
        data.insert(std::make_pair(0x168e9,"BAMUM LETTER PHASE-C KEN LAW"));
        data.insert(std::make_pair(0x168ea,"BAMUM LETTER PHASE-C KEN FATIGUE"));
        data.insert(std::make_pair(0x168eb,"BAMUM LETTER PHASE-C NGAQ"));
        data.insert(std::make_pair(0x168ec,"BAMUM LETTER PHASE-C NAQ"));
        data.insert(std::make_pair(0x168ed,"BAMUM LETTER PHASE-C LIQ"));
        data.insert(std::make_pair(0x168ee,"BAMUM LETTER PHASE-C PIN"));
        data.insert(std::make_pair(0x168ef,"BAMUM LETTER PHASE-C PEN"));
        data.insert(std::make_pair(0x168f0,"BAMUM LETTER PHASE-C TET"));
        data.insert(std::make_pair(0x168f1,"BAMUM LETTER PHASE-D MBUO"));
        data.insert(std::make_pair(0x168f2,"BAMUM LETTER PHASE-D WAP"));
        data.insert(std::make_pair(0x168f3,"BAMUM LETTER PHASE-D NJI"));
        data.insert(std::make_pair(0x168f4,"BAMUM LETTER PHASE-D MFON"));
        data.insert(std::make_pair(0x168f5,"BAMUM LETTER PHASE-D NJIEE"));
        data.insert(std::make_pair(0x168f6,"BAMUM LETTER PHASE-D LIEE"));
        data.insert(std::make_pair(0x168f7,"BAMUM LETTER PHASE-D NJEUT"));
        data.insert(std::make_pair(0x168f8,"BAMUM LETTER PHASE-D NSHEE"));
        data.insert(std::make_pair(0x168f9,"BAMUM LETTER PHASE-D NGGAAMAE"));
        data.insert(std::make_pair(0x168fa,"BAMUM LETTER PHASE-D NYAM"));
        data.insert(std::make_pair(0x168fb,"BAMUM LETTER PHASE-D WUAEN"));
        data.insert(std::make_pair(0x168fc,"BAMUM LETTER PHASE-D NGKUN"));
        data.insert(std::make_pair(0x168fd,"BAMUM LETTER PHASE-D SHEE"));
        data.insert(std::make_pair(0x168fe,"BAMUM LETTER PHASE-D NGKAP"));
        data.insert(std::make_pair(0x168ff,"BAMUM LETTER PHASE-D KEUAETMEUN"));
        data.insert(std::make_pair(0x16900,"BAMUM LETTER PHASE-D TEUT"));
        data.insert(std::make_pair(0x16901,"BAMUM LETTER PHASE-D SHEUAE"));
        data.insert(std::make_pair(0x16902,"BAMUM LETTER PHASE-D NJAP"));
        data.insert(std::make_pair(0x16903,"BAMUM LETTER PHASE-D SUE"));
        data.insert(std::make_pair(0x16904,"BAMUM LETTER PHASE-D KET"));
        data.insert(std::make_pair(0x16905,"BAMUM LETTER PHASE-D YAEMMAE"));
        data.insert(std::make_pair(0x16906,"BAMUM LETTER PHASE-D KUOM"));
        data.insert(std::make_pair(0x16907,"BAMUM LETTER PHASE-D SAP"));
        data.insert(std::make_pair(0x16908,"BAMUM LETTER PHASE-D MFEUT"));
        data.insert(std::make_pair(0x16909,"BAMUM LETTER PHASE-D NDEUX"));
        data.insert(std::make_pair(0x1690a,"BAMUM LETTER PHASE-D MALEERI"));
        data.insert(std::make_pair(0x1690b,"BAMUM LETTER PHASE-D MEUT"));
        data.insert(std::make_pair(0x1690c,"BAMUM LETTER PHASE-D SEUAEQ"));
        data.insert(std::make_pair(0x1690d,"BAMUM LETTER PHASE-D YEN"));
        data.insert(std::make_pair(0x1690e,"BAMUM LETTER PHASE-D NJEUAEM"));
        data.insert(std::make_pair(0x1690f,"BAMUM LETTER PHASE-D KEUOT MBUAE"));
        data.insert(std::make_pair(0x16910,"BAMUM LETTER PHASE-D NGKEURI"));
        data.insert(std::make_pair(0x16911,"BAMUM LETTER PHASE-D TU"));
        data.insert(std::make_pair(0x16912,"BAMUM LETTER PHASE-D GHAA"));
        data.insert(std::make_pair(0x16913,"BAMUM LETTER PHASE-D NGKYEE"));
        data.insert(std::make_pair(0x16914,"BAMUM LETTER PHASE-D FEUFEUAET"));
        data.insert(std::make_pair(0x16915,"BAMUM LETTER PHASE-D NDEE"));
        data.insert(std::make_pair(0x16916,"BAMUM LETTER PHASE-D MGBOFUM"));
        data.insert(std::make_pair(0x16917,"BAMUM LETTER PHASE-D LEUAEP"));
        data.insert(std::make_pair(0x16918,"BAMUM LETTER PHASE-D NDON"));
        data.insert(std::make_pair(0x16919,"BAMUM LETTER PHASE-D MONI"));
        data.insert(std::make_pair(0x1691a,"BAMUM LETTER PHASE-D MGBEUN"));
        data.insert(std::make_pair(0x1691b,"BAMUM LETTER PHASE-D PUUT"));
        data.insert(std::make_pair(0x1691c,"BAMUM LETTER PHASE-D MGBIEE"));
        data.insert(std::make_pair(0x1691d,"BAMUM LETTER PHASE-D MFO"));
        data.insert(std::make_pair(0x1691e,"BAMUM LETTER PHASE-D LUM"));
        data.insert(std::make_pair(0x1691f,"BAMUM LETTER PHASE-D NSIEEP"));
        data.insert(std::make_pair(0x16920,"BAMUM LETTER PHASE-D MBAA"));
        data.insert(std::make_pair(0x16921,"BAMUM LETTER PHASE-D KWAET"));
        data.insert(std::make_pair(0x16922,"BAMUM LETTER PHASE-D NYET"));
        data.insert(std::make_pair(0x16923,"BAMUM LETTER PHASE-D TEUAEN"));
        data.insert(std::make_pair(0x16924,"BAMUM LETTER PHASE-D SOT"));
        data.insert(std::make_pair(0x16925,"BAMUM LETTER PHASE-D YUWOQ"));
        data.insert(std::make_pair(0x16926,"BAMUM LETTER PHASE-D KEUM"));
        data.insert(std::make_pair(0x16927,"BAMUM LETTER PHASE-D RAEM"));
        data.insert(std::make_pair(0x16928,"BAMUM LETTER PHASE-D TEEEE"));
        data.insert(std::make_pair(0x16929,"BAMUM LETTER PHASE-D NGKEUAEQ"));
        data.insert(std::make_pair(0x1692a,"BAMUM LETTER PHASE-D MFEUAE"));
        data.insert(std::make_pair(0x1692b,"BAMUM LETTER PHASE-D NSIEET"));
        data.insert(std::make_pair(0x1692c,"BAMUM LETTER PHASE-D KEUP"));
        data.insert(std::make_pair(0x1692d,"BAMUM LETTER PHASE-D PIP"));
        data.insert(std::make_pair(0x1692e,"BAMUM LETTER PHASE-D PEUTAE"));
        data.insert(std::make_pair(0x1692f,"BAMUM LETTER PHASE-D NYUE"));
        data.insert(std::make_pair(0x16930,"BAMUM LETTER PHASE-D LET"));
        data.insert(std::make_pair(0x16931,"BAMUM LETTER PHASE-D NGGAAM"));
        data.insert(std::make_pair(0x16932,"BAMUM LETTER PHASE-D MFIEE"));
        data.insert(std::make_pair(0x16933,"BAMUM LETTER PHASE-D NGGWAEN"));
        data.insert(std::make_pair(0x16934,"BAMUM LETTER PHASE-D YUOM"));
        data.insert(std::make_pair(0x16935,"BAMUM LETTER PHASE-D PAP"));
        data.insert(std::make_pair(0x16936,"BAMUM LETTER PHASE-D YUOP"));
        data.insert(std::make_pair(0x16937,"BAMUM LETTER PHASE-D NDAM"));
        data.insert(std::make_pair(0x16938,"BAMUM LETTER PHASE-D NTEUM"));
        data.insert(std::make_pair(0x16939,"BAMUM LETTER PHASE-D SUAE"));
        data.insert(std::make_pair(0x1693a,"BAMUM LETTER PHASE-D KUN"));
        data.insert(std::make_pair(0x1693b,"BAMUM LETTER PHASE-D NGGEUX"));
        data.insert(std::make_pair(0x1693c,"BAMUM LETTER PHASE-D NGKIEE"));
        data.insert(std::make_pair(0x1693d,"BAMUM LETTER PHASE-D TUOT"));
        data.insert(std::make_pair(0x1693e,"BAMUM LETTER PHASE-D MEUN"));
        data.insert(std::make_pair(0x1693f,"BAMUM LETTER PHASE-D KUQ"));
        data.insert(std::make_pair(0x16940,"BAMUM LETTER PHASE-D NSUM"));
        data.insert(std::make_pair(0x16941,"BAMUM LETTER PHASE-D TEUN"));
        data.insert(std::make_pair(0x16942,"BAMUM LETTER PHASE-D MAENJET"));
        data.insert(std::make_pair(0x16943,"BAMUM LETTER PHASE-D NGGAP"));
        data.insert(std::make_pair(0x16944,"BAMUM LETTER PHASE-D LEUM"));
        data.insert(std::make_pair(0x16945,"BAMUM LETTER PHASE-D NGGUOM"));
        data.insert(std::make_pair(0x16946,"BAMUM LETTER PHASE-D NSHUT"));
        data.insert(std::make_pair(0x16947,"BAMUM LETTER PHASE-D NJUEQ"));
        data.insert(std::make_pair(0x16948,"BAMUM LETTER PHASE-D GHEUAE"));
        data.insert(std::make_pair(0x16949,"BAMUM LETTER PHASE-D KU"));
        data.insert(std::make_pair(0x1694a,"BAMUM LETTER PHASE-D REN OLD"));
        data.insert(std::make_pair(0x1694b,"BAMUM LETTER PHASE-D TAE"));
        data.insert(std::make_pair(0x1694c,"BAMUM LETTER PHASE-D TOQ"));
        data.insert(std::make_pair(0x1694d,"BAMUM LETTER PHASE-D NYI"));
        data.insert(std::make_pair(0x1694e,"BAMUM LETTER PHASE-D RII"));
        data.insert(std::make_pair(0x1694f,"BAMUM LETTER PHASE-D LEEEE"));
        data.insert(std::make_pair(0x16950,"BAMUM LETTER PHASE-D MEEEE"));
        data.insert(std::make_pair(0x16951,"BAMUM LETTER PHASE-D M"));
        data.insert(std::make_pair(0x16952,"BAMUM LETTER PHASE-D SUU"));
        data.insert(std::make_pair(0x16953,"BAMUM LETTER PHASE-D MU"));
        data.insert(std::make_pair(0x16954,"BAMUM LETTER PHASE-D SHII"));
        data.insert(std::make_pair(0x16955,"BAMUM LETTER PHASE-D SHEUX"));
        data.insert(std::make_pair(0x16956,"BAMUM LETTER PHASE-D KYEE"));
        data.insert(std::make_pair(0x16957,"BAMUM LETTER PHASE-D NU"));
        data.insert(std::make_pair(0x16958,"BAMUM LETTER PHASE-D SHU"));
        data.insert(std::make_pair(0x16959,"BAMUM LETTER PHASE-D NTEE"));
        data.insert(std::make_pair(0x1695a,"BAMUM LETTER PHASE-D PEE"));
        data.insert(std::make_pair(0x1695b,"BAMUM LETTER PHASE-D NI"));
        data.insert(std::make_pair(0x1695c,"BAMUM LETTER PHASE-D SHOQ"));
        data.insert(std::make_pair(0x1695d,"BAMUM LETTER PHASE-D PUQ"));
        data.insert(std::make_pair(0x1695e,"BAMUM LETTER PHASE-D MVOP"));
        data.insert(std::make_pair(0x1695f,"BAMUM LETTER PHASE-D LOQ"));
        data.insert(std::make_pair(0x16960,"BAMUM LETTER PHASE-D REN MUCH"));
        data.insert(std::make_pair(0x16961,"BAMUM LETTER PHASE-D TI"));
        data.insert(std::make_pair(0x16962,"BAMUM LETTER PHASE-D NTUU"));
        data.insert(std::make_pair(0x16963,"BAMUM LETTER PHASE-D MBAA SEVEN"));
        data.insert(std::make_pair(0x16964,"BAMUM LETTER PHASE-D SAQ"));
        data.insert(std::make_pair(0x16965,"BAMUM LETTER PHASE-D FAA"));
        data.insert(std::make_pair(0x16966,"BAMUM LETTER PHASE-E NDAP"));
        data.insert(std::make_pair(0x16967,"BAMUM LETTER PHASE-E TOON"));
        data.insert(std::make_pair(0x16968,"BAMUM LETTER PHASE-E MBEUM"));
        data.insert(std::make_pair(0x16969,"BAMUM LETTER PHASE-E LAP"));
        data.insert(std::make_pair(0x1696a,"BAMUM LETTER PHASE-E VOM"));
        data.insert(std::make_pair(0x1696b,"BAMUM LETTER PHASE-E LOON"));
        data.insert(std::make_pair(0x1696c,"BAMUM LETTER PHASE-E PAA"));
        data.insert(std::make_pair(0x1696d,"BAMUM LETTER PHASE-E SOM"));
        data.insert(std::make_pair(0x1696e,"BAMUM LETTER PHASE-E RAQ"));
        data.insert(std::make_pair(0x1696f,"BAMUM LETTER PHASE-E NSHUOP"));
        data.insert(std::make_pair(0x16970,"BAMUM LETTER PHASE-E NDUN"));
        data.insert(std::make_pair(0x16971,"BAMUM LETTER PHASE-E PUAE"));
        data.insert(std::make_pair(0x16972,"BAMUM LETTER PHASE-E TAM"));
        data.insert(std::make_pair(0x16973,"BAMUM LETTER PHASE-E NGKA"));
        data.insert(std::make_pair(0x16974,"BAMUM LETTER PHASE-E KPEUX"));
        data.insert(std::make_pair(0x16975,"BAMUM LETTER PHASE-E WUO"));
        data.insert(std::make_pair(0x16976,"BAMUM LETTER PHASE-E SEE"));
        data.insert(std::make_pair(0x16977,"BAMUM LETTER PHASE-E NGGEUAET"));
        data.insert(std::make_pair(0x16978,"BAMUM LETTER PHASE-E PAAM"));
        data.insert(std::make_pair(0x16979,"BAMUM LETTER PHASE-E TOO"));
        data.insert(std::make_pair(0x1697a,"BAMUM LETTER PHASE-E KUOP"));
        data.insert(std::make_pair(0x1697b,"BAMUM LETTER PHASE-E LOM"));
        data.insert(std::make_pair(0x1697c,"BAMUM LETTER PHASE-E NSHIEE"));
        data.insert(std::make_pair(0x1697d,"BAMUM LETTER PHASE-E NGOP"));
        data.insert(std::make_pair(0x1697e,"BAMUM LETTER PHASE-E MAEM"));
        data.insert(std::make_pair(0x1697f,"BAMUM LETTER PHASE-E NGKEUX"));
        data.insert(std::make_pair(0x16980,"BAMUM LETTER PHASE-E NGOQ"));
        data.insert(std::make_pair(0x16981,"BAMUM LETTER PHASE-E NSHUE"));
        data.insert(std::make_pair(0x16982,"BAMUM LETTER PHASE-E RIMGBA"));
        data.insert(std::make_pair(0x16983,"BAMUM LETTER PHASE-E NJEUX"));
        data.insert(std::make_pair(0x16984,"BAMUM LETTER PHASE-E PEEM"));
        data.insert(std::make_pair(0x16985,"BAMUM LETTER PHASE-E SAA"));
        data.insert(std::make_pair(0x16986,"BAMUM LETTER PHASE-E NGGURAE"));
        data.insert(std::make_pair(0x16987,"BAMUM LETTER PHASE-E MGBA"));
        data.insert(std::make_pair(0x16988,"BAMUM LETTER PHASE-E GHEUX"));
        data.insert(std::make_pair(0x16989,"BAMUM LETTER PHASE-E NGKEUAEM"));
        data.insert(std::make_pair(0x1698a,"BAMUM LETTER PHASE-E NJAEMLI"));
        data.insert(std::make_pair(0x1698b,"BAMUM LETTER PHASE-E MAP"));
        data.insert(std::make_pair(0x1698c,"BAMUM LETTER PHASE-E LOOT"));
        data.insert(std::make_pair(0x1698d,"BAMUM LETTER PHASE-E NGGEEEE"));
        data.insert(std::make_pair(0x1698e,"BAMUM LETTER PHASE-E NDIQ"));
        data.insert(std::make_pair(0x1698f,"BAMUM LETTER PHASE-E TAEN NTEUM"));
        data.insert(std::make_pair(0x16990,"BAMUM LETTER PHASE-E SET"));
        data.insert(std::make_pair(0x16991,"BAMUM LETTER PHASE-E PUM"));
        data.insert(std::make_pair(0x16992,"BAMUM LETTER PHASE-E NDAA SOFTNESS"));
        data.insert(std::make_pair(0x16993,"BAMUM LETTER PHASE-E NGGUAESHAE NYAM"));
        data.insert(std::make_pair(0x16994,"BAMUM LETTER PHASE-E YIEE"));
        data.insert(std::make_pair(0x16995,"BAMUM LETTER PHASE-E GHEUN"));
        data.insert(std::make_pair(0x16996,"BAMUM LETTER PHASE-E TUAE"));
        data.insert(std::make_pair(0x16997,"BAMUM LETTER PHASE-E YEUAE"));
        data.insert(std::make_pair(0x16998,"BAMUM LETTER PHASE-E PO"));
        data.insert(std::make_pair(0x16999,"BAMUM LETTER PHASE-E TUMAE"));
        data.insert(std::make_pair(0x1699a,"BAMUM LETTER PHASE-E KEUAE"));
        data.insert(std::make_pair(0x1699b,"BAMUM LETTER PHASE-E SUAEN"));
        data.insert(std::make_pair(0x1699c,"BAMUM LETTER PHASE-E TEUAEQ"));
        data.insert(std::make_pair(0x1699d,"BAMUM LETTER PHASE-E VEUAE"));
        data.insert(std::make_pair(0x1699e,"BAMUM LETTER PHASE-E WEUX"));
        data.insert(std::make_pair(0x1699f,"BAMUM LETTER PHASE-E LAAM"));
        data.insert(std::make_pair(0x169a0,"BAMUM LETTER PHASE-E PU"));
        data.insert(std::make_pair(0x169a1,"BAMUM LETTER PHASE-E TAAQ"));
        data.insert(std::make_pair(0x169a2,"BAMUM LETTER PHASE-E GHAAMAE"));
        data.insert(std::make_pair(0x169a3,"BAMUM LETTER PHASE-E NGEUREUT"));
        data.insert(std::make_pair(0x169a4,"BAMUM LETTER PHASE-E SHEUAEQ"));
        data.insert(std::make_pair(0x169a5,"BAMUM LETTER PHASE-E MGBEN"));
        data.insert(std::make_pair(0x169a6,"BAMUM LETTER PHASE-E MBEE"));
        data.insert(std::make_pair(0x169a7,"BAMUM LETTER PHASE-E NZAQ"));
        data.insert(std::make_pair(0x169a8,"BAMUM LETTER PHASE-E NKOM"));
        data.insert(std::make_pair(0x169a9,"BAMUM LETTER PHASE-E GBET"));
        data.insert(std::make_pair(0x169aa,"BAMUM LETTER PHASE-E TUM"));
        data.insert(std::make_pair(0x169ab,"BAMUM LETTER PHASE-E KUET"));
        data.insert(std::make_pair(0x169ac,"BAMUM LETTER PHASE-E YAP"));
        data.insert(std::make_pair(0x169ad,"BAMUM LETTER PHASE-E NYI CLEAVER"));
        data.insert(std::make_pair(0x169ae,"BAMUM LETTER PHASE-E YIT"));
        data.insert(std::make_pair(0x169af,"BAMUM LETTER PHASE-E MFEUQ"));
        data.insert(std::make_pair(0x169b0,"BAMUM LETTER PHASE-E NDIAQ"));
        data.insert(std::make_pair(0x169b1,"BAMUM LETTER PHASE-E PIEEQ"));
        data.insert(std::make_pair(0x169b2,"BAMUM LETTER PHASE-E YUEQ"));
        data.insert(std::make_pair(0x169b3,"BAMUM LETTER PHASE-E LEUAEM"));
        data.insert(std::make_pair(0x169b4,"BAMUM LETTER PHASE-E FUE"));
        data.insert(std::make_pair(0x169b5,"BAMUM LETTER PHASE-E GBEUX"));
        data.insert(std::make_pair(0x169b6,"BAMUM LETTER PHASE-E NGKUP"));
        data.insert(std::make_pair(0x169b7,"BAMUM LETTER PHASE-E KET"));
        data.insert(std::make_pair(0x169b8,"BAMUM LETTER PHASE-E MAE"));
        data.insert(std::make_pair(0x169b9,"BAMUM LETTER PHASE-E NGKAAMI"));
        data.insert(std::make_pair(0x169ba,"BAMUM LETTER PHASE-E GHET"));
        data.insert(std::make_pair(0x169bb,"BAMUM LETTER PHASE-E FA"));
        data.insert(std::make_pair(0x169bc,"BAMUM LETTER PHASE-E NTUM"));
        data.insert(std::make_pair(0x169bd,"BAMUM LETTER PHASE-E PEUT"));
        data.insert(std::make_pair(0x169be,"BAMUM LETTER PHASE-E YEUM"));
        data.insert(std::make_pair(0x169bf,"BAMUM LETTER PHASE-E NGGEUAE"));
        data.insert(std::make_pair(0x169c0,"BAMUM LETTER PHASE-E NYI BETWEEN"));
        data.insert(std::make_pair(0x169c1,"BAMUM LETTER PHASE-E NZUQ"));
        data.insert(std::make_pair(0x169c2,"BAMUM LETTER PHASE-E POON"));
        data.insert(std::make_pair(0x169c3,"BAMUM LETTER PHASE-E MIEE"));
        data.insert(std::make_pair(0x169c4,"BAMUM LETTER PHASE-E FUET"));
        data.insert(std::make_pair(0x169c5,"BAMUM LETTER PHASE-E NAE"));
        data.insert(std::make_pair(0x169c6,"BAMUM LETTER PHASE-E MUAE"));
        data.insert(std::make_pair(0x169c7,"BAMUM LETTER PHASE-E GHEUAE"));
        data.insert(std::make_pair(0x169c8,"BAMUM LETTER PHASE-E FU I"));
        data.insert(std::make_pair(0x169c9,"BAMUM LETTER PHASE-E MVI"));
        data.insert(std::make_pair(0x169ca,"BAMUM LETTER PHASE-E PUAQ"));
        data.insert(std::make_pair(0x169cb,"BAMUM LETTER PHASE-E NGKUM"));
        data.insert(std::make_pair(0x169cc,"BAMUM LETTER PHASE-E KUT"));
        data.insert(std::make_pair(0x169cd,"BAMUM LETTER PHASE-E PIET"));
        data.insert(std::make_pair(0x169ce,"BAMUM LETTER PHASE-E NTAP"));
        data.insert(std::make_pair(0x169cf,"BAMUM LETTER PHASE-E YEUAET"));
        data.insert(std::make_pair(0x169d0,"BAMUM LETTER PHASE-E NGGUP"));
        data.insert(std::make_pair(0x169d1,"BAMUM LETTER PHASE-E PA PEOPLE"));
        data.insert(std::make_pair(0x169d2,"BAMUM LETTER PHASE-E FU CALL"));
        data.insert(std::make_pair(0x169d3,"BAMUM LETTER PHASE-E FOM"));
        data.insert(std::make_pair(0x169d4,"BAMUM LETTER PHASE-E NJEE"));
        data.insert(std::make_pair(0x169d5,"BAMUM LETTER PHASE-E A"));
        data.insert(std::make_pair(0x169d6,"BAMUM LETTER PHASE-E TOQ"));
        data.insert(std::make_pair(0x169d7,"BAMUM LETTER PHASE-E O"));
        data.insert(std::make_pair(0x169d8,"BAMUM LETTER PHASE-E I"));
        data.insert(std::make_pair(0x169d9,"BAMUM LETTER PHASE-E LAQ"));
        data.insert(std::make_pair(0x169da,"BAMUM LETTER PHASE-E PA PLURAL"));
        data.insert(std::make_pair(0x169db,"BAMUM LETTER PHASE-E TAA"));
        data.insert(std::make_pair(0x169dc,"BAMUM LETTER PHASE-E TAQ"));
        data.insert(std::make_pair(0x169dd,"BAMUM LETTER PHASE-E NDAA MY HOUSE"));
        data.insert(std::make_pair(0x169de,"BAMUM LETTER PHASE-E SHIQ"));
        data.insert(std::make_pair(0x169df,"BAMUM LETTER PHASE-E YEUX"));
        data.insert(std::make_pair(0x169e0,"BAMUM LETTER PHASE-E NGUAE"));
        data.insert(std::make_pair(0x169e1,"BAMUM LETTER PHASE-E YUAEN"));
        data.insert(std::make_pair(0x169e2,"BAMUM LETTER PHASE-E YOQ SWIMMING"));
        data.insert(std::make_pair(0x169e3,"BAMUM LETTER PHASE-E YOQ COVER"));
        data.insert(std::make_pair(0x169e4,"BAMUM LETTER PHASE-E YUQ"));
        data.insert(std::make_pair(0x169e5,"BAMUM LETTER PHASE-E YUN"));
        data.insert(std::make_pair(0x169e6,"BAMUM LETTER PHASE-E KEUX"));
        data.insert(std::make_pair(0x169e7,"BAMUM LETTER PHASE-E PEUX"));
        data.insert(std::make_pair(0x169e8,"BAMUM LETTER PHASE-E NJEE EPOCH"));
        data.insert(std::make_pair(0x169e9,"BAMUM LETTER PHASE-E PUE"));
        data.insert(std::make_pair(0x169ea,"BAMUM LETTER PHASE-E WUE"));
        data.insert(std::make_pair(0x169eb,"BAMUM LETTER PHASE-E FEE"));
        data.insert(std::make_pair(0x169ec,"BAMUM LETTER PHASE-E VEE"));
        data.insert(std::make_pair(0x169ed,"BAMUM LETTER PHASE-E LU"));
        data.insert(std::make_pair(0x169ee,"BAMUM LETTER PHASE-E MI"));
        data.insert(std::make_pair(0x169ef,"BAMUM LETTER PHASE-E REUX"));
        data.insert(std::make_pair(0x169f0,"BAMUM LETTER PHASE-E RAE"));
        data.insert(std::make_pair(0x169f1,"BAMUM LETTER PHASE-E NGUAET"));
        data.insert(std::make_pair(0x169f2,"BAMUM LETTER PHASE-E NGA"));
        data.insert(std::make_pair(0x169f3,"BAMUM LETTER PHASE-E SHO"));
        data.insert(std::make_pair(0x169f4,"BAMUM LETTER PHASE-E SHOQ"));
        data.insert(std::make_pair(0x169f5,"BAMUM LETTER PHASE-E FU REMEDY"));
        data.insert(std::make_pair(0x169f6,"BAMUM LETTER PHASE-E NA"));
        data.insert(std::make_pair(0x169f7,"BAMUM LETTER PHASE-E PI"));
        data.insert(std::make_pair(0x169f8,"BAMUM LETTER PHASE-E LOQ"));
        data.insert(std::make_pair(0x169f9,"BAMUM LETTER PHASE-E KO"));
        data.insert(std::make_pair(0x169fa,"BAMUM LETTER PHASE-E MEN"));
        data.insert(std::make_pair(0x169fb,"BAMUM LETTER PHASE-E MA"));
        data.insert(std::make_pair(0x169fc,"BAMUM LETTER PHASE-E MAQ"));
        data.insert(std::make_pair(0x169fd,"BAMUM LETTER PHASE-E TEU"));
        data.insert(std::make_pair(0x169fe,"BAMUM LETTER PHASE-E KI"));
        data.insert(std::make_pair(0x169ff,"BAMUM LETTER PHASE-E MON"));
        data.insert(std::make_pair(0x16a00,"BAMUM LETTER PHASE-E TEN"));
        data.insert(std::make_pair(0x16a01,"BAMUM LETTER PHASE-E FAQ"));
        data.insert(std::make_pair(0x16a02,"BAMUM LETTER PHASE-E GHOM"));
        data.insert(std::make_pair(0x16a03,"BAMUM LETTER PHASE-F KA"));
        data.insert(std::make_pair(0x16a04,"BAMUM LETTER PHASE-F U"));
        data.insert(std::make_pair(0x16a05,"BAMUM LETTER PHASE-F KU"));
        data.insert(std::make_pair(0x16a06,"BAMUM LETTER PHASE-F EE"));
        data.insert(std::make_pair(0x16a07,"BAMUM LETTER PHASE-F REE"));
        data.insert(std::make_pair(0x16a08,"BAMUM LETTER PHASE-F TAE"));
        data.insert(std::make_pair(0x16a09,"BAMUM LETTER PHASE-F NYI"));
        data.insert(std::make_pair(0x16a0a,"BAMUM LETTER PHASE-F LA"));
        data.insert(std::make_pair(0x16a0b,"BAMUM LETTER PHASE-F RII"));
        data.insert(std::make_pair(0x16a0c,"BAMUM LETTER PHASE-F RIEE"));
        data.insert(std::make_pair(0x16a0d,"BAMUM LETTER PHASE-F MEEEE"));
        data.insert(std::make_pair(0x16a0e,"BAMUM LETTER PHASE-F TAA"));
        data.insert(std::make_pair(0x16a0f,"BAMUM LETTER PHASE-F NDAA"));
        data.insert(std::make_pair(0x16a10,"BAMUM LETTER PHASE-F NJAEM"));
        data.insert(std::make_pair(0x16a11,"BAMUM LETTER PHASE-F M"));
        data.insert(std::make_pair(0x16a12,"BAMUM LETTER PHASE-F SUU"));
        data.insert(std::make_pair(0x16a13,"BAMUM LETTER PHASE-F SHII"));
        data.insert(std::make_pair(0x16a14,"BAMUM LETTER PHASE-F SI"));
        data.insert(std::make_pair(0x16a15,"BAMUM LETTER PHASE-F SEUX"));
        data.insert(std::make_pair(0x16a16,"BAMUM LETTER PHASE-F KYEE"));
        data.insert(std::make_pair(0x16a17,"BAMUM LETTER PHASE-F KET"));
        data.insert(std::make_pair(0x16a18,"BAMUM LETTER PHASE-F NUAE"));
        data.insert(std::make_pair(0x16a19,"BAMUM LETTER PHASE-F NU"));
        data.insert(std::make_pair(0x16a1a,"BAMUM LETTER PHASE-F NJUAE"));
        data.insert(std::make_pair(0x16a1b,"BAMUM LETTER PHASE-F YOQ"));
        data.insert(std::make_pair(0x16a1c,"BAMUM LETTER PHASE-F SHU"));
        data.insert(std::make_pair(0x16a1d,"BAMUM LETTER PHASE-F YA"));
        data.insert(std::make_pair(0x16a1e,"BAMUM LETTER PHASE-F NSHA"));
        data.insert(std::make_pair(0x16a1f,"BAMUM LETTER PHASE-F PEUX"));
        data.insert(std::make_pair(0x16a20,"BAMUM LETTER PHASE-F NTEE"));
        data.insert(std::make_pair(0x16a21,"BAMUM LETTER PHASE-F WUE"));
        data.insert(std::make_pair(0x16a22,"BAMUM LETTER PHASE-F PEE"));
        data.insert(std::make_pair(0x16a23,"BAMUM LETTER PHASE-F RU"));
        data.insert(std::make_pair(0x16a24,"BAMUM LETTER PHASE-F NI"));
        data.insert(std::make_pair(0x16a25,"BAMUM LETTER PHASE-F REUX"));
        data.insert(std::make_pair(0x16a26,"BAMUM LETTER PHASE-F KEN"));
        data.insert(std::make_pair(0x16a27,"BAMUM LETTER PHASE-F NGKWAEN"));
        data.insert(std::make_pair(0x16a28,"BAMUM LETTER PHASE-F NGGA"));
        data.insert(std::make_pair(0x16a29,"BAMUM LETTER PHASE-F SHO"));
        data.insert(std::make_pair(0x16a2a,"BAMUM LETTER PHASE-F PUAE"));
        data.insert(std::make_pair(0x16a2b,"BAMUM LETTER PHASE-F FOM"));
        data.insert(std::make_pair(0x16a2c,"BAMUM LETTER PHASE-F WA"));
        data.insert(std::make_pair(0x16a2d,"BAMUM LETTER PHASE-F LI"));
        data.insert(std::make_pair(0x16a2e,"BAMUM LETTER PHASE-F LOQ"));
        data.insert(std::make_pair(0x16a2f,"BAMUM LETTER PHASE-F KO"));
        data.insert(std::make_pair(0x16a30,"BAMUM LETTER PHASE-F MBEN"));
        data.insert(std::make_pair(0x16a31,"BAMUM LETTER PHASE-F REN"));
        data.insert(std::make_pair(0x16a32,"BAMUM LETTER PHASE-F MA"));
        data.insert(std::make_pair(0x16a33,"BAMUM LETTER PHASE-F MO"));
        data.insert(std::make_pair(0x16a34,"BAMUM LETTER PHASE-F MBAA"));
        data.insert(std::make_pair(0x16a35,"BAMUM LETTER PHASE-F TET"));
        data.insert(std::make_pair(0x16a36,"BAMUM LETTER PHASE-F KPA"));
        data.insert(std::make_pair(0x16a37,"BAMUM LETTER PHASE-F SAMBA"));
        data.insert(std::make_pair(0x16a38,"BAMUM LETTER PHASE-F VUEQ"));
        data.insert(std::make_pair(0x16a40,"MRO LETTER TA"));
        data.insert(std::make_pair(0x16a41,"MRO LETTER NGI"));
        data.insert(std::make_pair(0x16a42,"MRO LETTER YO"));
        data.insert(std::make_pair(0x16a43,"MRO LETTER MIM"));
        data.insert(std::make_pair(0x16a44,"MRO LETTER BA"));
        data.insert(std::make_pair(0x16a45,"MRO LETTER DA"));
        data.insert(std::make_pair(0x16a46,"MRO LETTER A"));
        data.insert(std::make_pair(0x16a47,"MRO LETTER PHI"));
        data.insert(std::make_pair(0x16a48,"MRO LETTER KHAI"));
        data.insert(std::make_pair(0x16a49,"MRO LETTER HAO"));
        data.insert(std::make_pair(0x16a4a,"MRO LETTER DAI"));
        data.insert(std::make_pair(0x16a4b,"MRO LETTER CHU"));
        data.insert(std::make_pair(0x16a4c,"MRO LETTER KEAAE"));
        data.insert(std::make_pair(0x16a4d,"MRO LETTER OL"));
        data.insert(std::make_pair(0x16a4e,"MRO LETTER MAEM"));
        data.insert(std::make_pair(0x16a4f,"MRO LETTER NIN"));
        data.insert(std::make_pair(0x16a50,"MRO LETTER PA"));
        data.insert(std::make_pair(0x16a51,"MRO LETTER OO"));
        data.insert(std::make_pair(0x16a52,"MRO LETTER O"));
        data.insert(std::make_pair(0x16a53,"MRO LETTER RO"));
        data.insert(std::make_pair(0x16a54,"MRO LETTER SHI"));
        data.insert(std::make_pair(0x16a55,"MRO LETTER THEA"));
        data.insert(std::make_pair(0x16a56,"MRO LETTER EA"));
        data.insert(std::make_pair(0x16a57,"MRO LETTER WA"));
        data.insert(std::make_pair(0x16a58,"MRO LETTER E"));
        data.insert(std::make_pair(0x16a59,"MRO LETTER KO"));
        data.insert(std::make_pair(0x16a5a,"MRO LETTER LAN"));
        data.insert(std::make_pair(0x16a5b,"MRO LETTER LA"));
        data.insert(std::make_pair(0x16a5c,"MRO LETTER HAI"));
        data.insert(std::make_pair(0x16a5d,"MRO LETTER RI"));
        data.insert(std::make_pair(0x16a5e,"MRO LETTER TEK"));
        data.insert(std::make_pair(0x16a60,"MRO DIGIT ZERO"));
        data.insert(std::make_pair(0x16a61,"MRO DIGIT ONE"));
        data.insert(std::make_pair(0x16a62,"MRO DIGIT TWO"));
        data.insert(std::make_pair(0x16a63,"MRO DIGIT THREE"));
        data.insert(std::make_pair(0x16a64,"MRO DIGIT FOUR"));
        data.insert(std::make_pair(0x16a65,"MRO DIGIT FIVE"));
        data.insert(std::make_pair(0x16a66,"MRO DIGIT SIX"));
        data.insert(std::make_pair(0x16a67,"MRO DIGIT SEVEN"));
        data.insert(std::make_pair(0x16a68,"MRO DIGIT EIGHT"));
        data.insert(std::make_pair(0x16a69,"MRO DIGIT NINE"));
        data.insert(std::make_pair(0x16a6e,"MRO DANDA"));
        data.insert(std::make_pair(0x16a6f,"MRO DOUBLE DANDA"));
        data.insert(std::make_pair(0x16a70,"TANGSA LETTER OZ"));
        data.insert(std::make_pair(0x16a71,"TANGSA LETTER OC"));
        data.insert(std::make_pair(0x16a72,"TANGSA LETTER OQ"));
        data.insert(std::make_pair(0x16a73,"TANGSA LETTER OX"));
        data.insert(std::make_pair(0x16a74,"TANGSA LETTER AZ"));
        data.insert(std::make_pair(0x16a75,"TANGSA LETTER AC"));
        data.insert(std::make_pair(0x16a76,"TANGSA LETTER AQ"));
        data.insert(std::make_pair(0x16a77,"TANGSA LETTER AX"));
        data.insert(std::make_pair(0x16a78,"TANGSA LETTER VZ"));
        data.insert(std::make_pair(0x16a79,"TANGSA LETTER VC"));
        data.insert(std::make_pair(0x16a7a,"TANGSA LETTER VQ"));
        data.insert(std::make_pair(0x16a7b,"TANGSA LETTER VX"));
        data.insert(std::make_pair(0x16a7c,"TANGSA LETTER EZ"));
        data.insert(std::make_pair(0x16a7d,"TANGSA LETTER EC"));
        data.insert(std::make_pair(0x16a7e,"TANGSA LETTER EQ"));
        data.insert(std::make_pair(0x16a7f,"TANGSA LETTER EX"));
        data.insert(std::make_pair(0x16a80,"TANGSA LETTER IZ"));
        data.insert(std::make_pair(0x16a81,"TANGSA LETTER IC"));
        data.insert(std::make_pair(0x16a82,"TANGSA LETTER IQ"));
        data.insert(std::make_pair(0x16a83,"TANGSA LETTER IX"));
        data.insert(std::make_pair(0x16a84,"TANGSA LETTER UZ"));
        data.insert(std::make_pair(0x16a85,"TANGSA LETTER UC"));
        data.insert(std::make_pair(0x16a86,"TANGSA LETTER UQ"));
        data.insert(std::make_pair(0x16a87,"TANGSA LETTER UX"));
        data.insert(std::make_pair(0x16a88,"TANGSA LETTER AWZ"));
        data.insert(std::make_pair(0x16a89,"TANGSA LETTER AWC"));
        data.insert(std::make_pair(0x16a8a,"TANGSA LETTER AWQ"));
        data.insert(std::make_pair(0x16a8b,"TANGSA LETTER AWX"));
        data.insert(std::make_pair(0x16a8c,"TANGSA LETTER UIZ"));
        data.insert(std::make_pair(0x16a8d,"TANGSA LETTER UIC"));
        data.insert(std::make_pair(0x16a8e,"TANGSA LETTER UIQ"));
        data.insert(std::make_pair(0x16a8f,"TANGSA LETTER UIX"));
        data.insert(std::make_pair(0x16a90,"TANGSA LETTER FINAL NG"));
        data.insert(std::make_pair(0x16a91,"TANGSA LETTER LONG UEX"));
        data.insert(std::make_pair(0x16a92,"TANGSA LETTER SHORT UEZ"));
        data.insert(std::make_pair(0x16a93,"TANGSA LETTER SHORT AWX"));
        data.insert(std::make_pair(0x16a94,"TANGSA LETTER UEC"));
        data.insert(std::make_pair(0x16a95,"TANGSA LETTER UEZ"));
        data.insert(std::make_pair(0x16a96,"TANGSA LETTER UEQ"));
        data.insert(std::make_pair(0x16a97,"TANGSA LETTER UEX"));
        data.insert(std::make_pair(0x16a98,"TANGSA LETTER UIUZ"));
        data.insert(std::make_pair(0x16a99,"TANGSA LETTER UIUC"));
        data.insert(std::make_pair(0x16a9a,"TANGSA LETTER UIUQ"));
        data.insert(std::make_pair(0x16a9b,"TANGSA LETTER UIUX"));
        data.insert(std::make_pair(0x16a9c,"TANGSA LETTER MZ"));
        data.insert(std::make_pair(0x16a9d,"TANGSA LETTER MC"));
        data.insert(std::make_pair(0x16a9e,"TANGSA LETTER MQ"));
        data.insert(std::make_pair(0x16a9f,"TANGSA LETTER MX"));
        data.insert(std::make_pair(0x16aa0,"TANGSA LETTER KA"));
        data.insert(std::make_pair(0x16aa1,"TANGSA LETTER KHA"));
        data.insert(std::make_pair(0x16aa2,"TANGSA LETTER GA"));
        data.insert(std::make_pair(0x16aa3,"TANGSA LETTER NGA"));
        data.insert(std::make_pair(0x16aa4,"TANGSA LETTER SA"));
        data.insert(std::make_pair(0x16aa5,"TANGSA LETTER YA"));
        data.insert(std::make_pair(0x16aa6,"TANGSA LETTER WA"));
        data.insert(std::make_pair(0x16aa7,"TANGSA LETTER PA"));
        data.insert(std::make_pair(0x16aa8,"TANGSA LETTER NYA"));
        data.insert(std::make_pair(0x16aa9,"TANGSA LETTER PHA"));
        data.insert(std::make_pair(0x16aaa,"TANGSA LETTER BA"));
        data.insert(std::make_pair(0x16aab,"TANGSA LETTER MA"));
        data.insert(std::make_pair(0x16aac,"TANGSA LETTER NA"));
        data.insert(std::make_pair(0x16aad,"TANGSA LETTER HA"));
        data.insert(std::make_pair(0x16aae,"TANGSA LETTER LA"));
        data.insert(std::make_pair(0x16aaf,"TANGSA LETTER HTA"));
        data.insert(std::make_pair(0x16ab0,"TANGSA LETTER TA"));
        data.insert(std::make_pair(0x16ab1,"TANGSA LETTER DA"));
        data.insert(std::make_pair(0x16ab2,"TANGSA LETTER RA"));
        data.insert(std::make_pair(0x16ab3,"TANGSA LETTER NHA"));
        data.insert(std::make_pair(0x16ab4,"TANGSA LETTER SHA"));
        data.insert(std::make_pair(0x16ab5,"TANGSA LETTER CA"));
        data.insert(std::make_pair(0x16ab6,"TANGSA LETTER TSA"));
        data.insert(std::make_pair(0x16ab7,"TANGSA LETTER GHA"));
        data.insert(std::make_pair(0x16ab8,"TANGSA LETTER HTTA"));
        data.insert(std::make_pair(0x16ab9,"TANGSA LETTER THA"));
        data.insert(std::make_pair(0x16aba,"TANGSA LETTER XA"));
        data.insert(std::make_pair(0x16abb,"TANGSA LETTER FA"));
        data.insert(std::make_pair(0x16abc,"TANGSA LETTER DHA"));
        data.insert(std::make_pair(0x16abd,"TANGSA LETTER CHA"));
        data.insert(std::make_pair(0x16abe,"TANGSA LETTER ZA"));
        data.insert(std::make_pair(0x16ac0,"TANGSA DIGIT ZERO"));
        data.insert(std::make_pair(0x16ac1,"TANGSA DIGIT ONE"));
        data.insert(std::make_pair(0x16ac2,"TANGSA DIGIT TWO"));
        data.insert(std::make_pair(0x16ac3,"TANGSA DIGIT THREE"));
        data.insert(std::make_pair(0x16ac4,"TANGSA DIGIT FOUR"));
        data.insert(std::make_pair(0x16ac5,"TANGSA DIGIT FIVE"));
        data.insert(std::make_pair(0x16ac6,"TANGSA DIGIT SIX"));
        data.insert(std::make_pair(0x16ac7,"TANGSA DIGIT SEVEN"));
        data.insert(std::make_pair(0x16ac8,"TANGSA DIGIT EIGHT"));
        data.insert(std::make_pair(0x16ac9,"TANGSA DIGIT NINE"));
        data.insert(std::make_pair(0x16ad0,"BASSA VAH LETTER ENNI"));
        data.insert(std::make_pair(0x16ad1,"BASSA VAH LETTER KA"));
        data.insert(std::make_pair(0x16ad2,"BASSA VAH LETTER SE"));
        data.insert(std::make_pair(0x16ad3,"BASSA VAH LETTER FA"));
        data.insert(std::make_pair(0x16ad4,"BASSA VAH LETTER MBE"));
        data.insert(std::make_pair(0x16ad5,"BASSA VAH LETTER YIE"));
        data.insert(std::make_pair(0x16ad6,"BASSA VAH LETTER GAH"));
        data.insert(std::make_pair(0x16ad7,"BASSA VAH LETTER DHII"));
        data.insert(std::make_pair(0x16ad8,"BASSA VAH LETTER KPAH"));
        data.insert(std::make_pair(0x16ad9,"BASSA VAH LETTER JO"));
        data.insert(std::make_pair(0x16ada,"BASSA VAH LETTER HWAH"));
        data.insert(std::make_pair(0x16adb,"BASSA VAH LETTER WA"));
        data.insert(std::make_pair(0x16adc,"BASSA VAH LETTER ZO"));
        data.insert(std::make_pair(0x16add,"BASSA VAH LETTER GBU"));
        data.insert(std::make_pair(0x16ade,"BASSA VAH LETTER DO"));
        data.insert(std::make_pair(0x16adf,"BASSA VAH LETTER CE"));
        data.insert(std::make_pair(0x16ae0,"BASSA VAH LETTER UWU"));
        data.insert(std::make_pair(0x16ae1,"BASSA VAH LETTER TO"));
        data.insert(std::make_pair(0x16ae2,"BASSA VAH LETTER BA"));
        data.insert(std::make_pair(0x16ae3,"BASSA VAH LETTER VU"));
        data.insert(std::make_pair(0x16ae4,"BASSA VAH LETTER YEIN"));
        data.insert(std::make_pair(0x16ae5,"BASSA VAH LETTER PA"));
        data.insert(std::make_pair(0x16ae6,"BASSA VAH LETTER WADDA"));
        data.insert(std::make_pair(0x16ae7,"BASSA VAH LETTER A"));
        data.insert(std::make_pair(0x16ae8,"BASSA VAH LETTER O"));
        data.insert(std::make_pair(0x16ae9,"BASSA VAH LETTER OO"));
        data.insert(std::make_pair(0x16aea,"BASSA VAH LETTER U"));
        data.insert(std::make_pair(0x16aeb,"BASSA VAH LETTER EE"));
        data.insert(std::make_pair(0x16aec,"BASSA VAH LETTER E"));
        data.insert(std::make_pair(0x16aed,"BASSA VAH LETTER I"));
        data.insert(std::make_pair(0x16af0,"BASSA VAH COMBINING HIGH TONE"));
        data.insert(std::make_pair(0x16af1,"BASSA VAH COMBINING LOW TONE"));
        data.insert(std::make_pair(0x16af2,"BASSA VAH COMBINING MID TONE"));
        data.insert(std::make_pair(0x16af3,"BASSA VAH COMBINING LOW-MID TONE"));
        data.insert(std::make_pair(0x16af4,"BASSA VAH COMBINING HIGH-LOW TONE"));
        data.insert(std::make_pair(0x16af5,"BASSA VAH FULL STOP"));
        data.insert(std::make_pair(0x16b00,"PAHAWH HMONG VOWEL KEEB"));
        data.insert(std::make_pair(0x16b01,"PAHAWH HMONG VOWEL KEEV"));
        data.insert(std::make_pair(0x16b02,"PAHAWH HMONG VOWEL KIB"));
        data.insert(std::make_pair(0x16b03,"PAHAWH HMONG VOWEL KIV"));
        data.insert(std::make_pair(0x16b04,"PAHAWH HMONG VOWEL KAUB"));
        data.insert(std::make_pair(0x16b05,"PAHAWH HMONG VOWEL KAUV"));
        data.insert(std::make_pair(0x16b06,"PAHAWH HMONG VOWEL KUB"));
        data.insert(std::make_pair(0x16b07,"PAHAWH HMONG VOWEL KUV"));
        data.insert(std::make_pair(0x16b08,"PAHAWH HMONG VOWEL KEB"));
        data.insert(std::make_pair(0x16b09,"PAHAWH HMONG VOWEL KEV"));
        data.insert(std::make_pair(0x16b0a,"PAHAWH HMONG VOWEL KAIB"));
        data.insert(std::make_pair(0x16b0b,"PAHAWH HMONG VOWEL KAIV"));
        data.insert(std::make_pair(0x16b0c,"PAHAWH HMONG VOWEL KOOB"));
        data.insert(std::make_pair(0x16b0d,"PAHAWH HMONG VOWEL KOOV"));
        data.insert(std::make_pair(0x16b0e,"PAHAWH HMONG VOWEL KAWB"));
        data.insert(std::make_pair(0x16b0f,"PAHAWH HMONG VOWEL KAWV"));
        data.insert(std::make_pair(0x16b10,"PAHAWH HMONG VOWEL KUAB"));
        data.insert(std::make_pair(0x16b11,"PAHAWH HMONG VOWEL KUAV"));
        data.insert(std::make_pair(0x16b12,"PAHAWH HMONG VOWEL KOB"));
        data.insert(std::make_pair(0x16b13,"PAHAWH HMONG VOWEL KOV"));
        data.insert(std::make_pair(0x16b14,"PAHAWH HMONG VOWEL KIAB"));
        data.insert(std::make_pair(0x16b15,"PAHAWH HMONG VOWEL KIAV"));
        data.insert(std::make_pair(0x16b16,"PAHAWH HMONG VOWEL KAB"));
        data.insert(std::make_pair(0x16b17,"PAHAWH HMONG VOWEL KAV"));
        data.insert(std::make_pair(0x16b18,"PAHAWH HMONG VOWEL KWB"));
        data.insert(std::make_pair(0x16b19,"PAHAWH HMONG VOWEL KWV"));
        data.insert(std::make_pair(0x16b1a,"PAHAWH HMONG VOWEL KAAB"));
        data.insert(std::make_pair(0x16b1b,"PAHAWH HMONG VOWEL KAAV"));
        data.insert(std::make_pair(0x16b1c,"PAHAWH HMONG CONSONANT VAU"));
        data.insert(std::make_pair(0x16b1d,"PAHAWH HMONG CONSONANT NTSAU"));
        data.insert(std::make_pair(0x16b1e,"PAHAWH HMONG CONSONANT LAU"));
        data.insert(std::make_pair(0x16b1f,"PAHAWH HMONG CONSONANT HAU"));
        data.insert(std::make_pair(0x16b20,"PAHAWH HMONG CONSONANT NLAU"));
        data.insert(std::make_pair(0x16b21,"PAHAWH HMONG CONSONANT RAU"));
        data.insert(std::make_pair(0x16b22,"PAHAWH HMONG CONSONANT NKAU"));
        data.insert(std::make_pair(0x16b23,"PAHAWH HMONG CONSONANT QHAU"));
        data.insert(std::make_pair(0x16b24,"PAHAWH HMONG CONSONANT YAU"));
        data.insert(std::make_pair(0x16b25,"PAHAWH HMONG CONSONANT HLAU"));
        data.insert(std::make_pair(0x16b26,"PAHAWH HMONG CONSONANT MAU"));
        data.insert(std::make_pair(0x16b27,"PAHAWH HMONG CONSONANT CHAU"));
        data.insert(std::make_pair(0x16b28,"PAHAWH HMONG CONSONANT NCHAU"));
        data.insert(std::make_pair(0x16b29,"PAHAWH HMONG CONSONANT HNAU"));
        data.insert(std::make_pair(0x16b2a,"PAHAWH HMONG CONSONANT PLHAU"));
        data.insert(std::make_pair(0x16b2b,"PAHAWH HMONG CONSONANT NTHAU"));
        data.insert(std::make_pair(0x16b2c,"PAHAWH HMONG CONSONANT NAU"));
        data.insert(std::make_pair(0x16b2d,"PAHAWH HMONG CONSONANT AU"));
        data.insert(std::make_pair(0x16b2e,"PAHAWH HMONG CONSONANT XAU"));
        data.insert(std::make_pair(0x16b2f,"PAHAWH HMONG CONSONANT CAU"));
        data.insert(std::make_pair(0x16b30,"PAHAWH HMONG MARK CIM TUB"));
        data.insert(std::make_pair(0x16b31,"PAHAWH HMONG MARK CIM SO"));
        data.insert(std::make_pair(0x16b32,"PAHAWH HMONG MARK CIM KES"));
        data.insert(std::make_pair(0x16b33,"PAHAWH HMONG MARK CIM KHAV"));
        data.insert(std::make_pair(0x16b34,"PAHAWH HMONG MARK CIM SUAM"));
        data.insert(std::make_pair(0x16b35,"PAHAWH HMONG MARK CIM HOM"));
        data.insert(std::make_pair(0x16b36,"PAHAWH HMONG MARK CIM TAUM"));
        data.insert(std::make_pair(0x16b37,"PAHAWH HMONG SIGN VOS THOM"));
        data.insert(std::make_pair(0x16b38,"PAHAWH HMONG SIGN VOS TSHAB CEEB"));
        data.insert(std::make_pair(0x16b39,"PAHAWH HMONG SIGN CIM CHEEM"));
        data.insert(std::make_pair(0x16b3a,"PAHAWH HMONG SIGN VOS THIAB"));
        data.insert(std::make_pair(0x16b3b,"PAHAWH HMONG SIGN VOS FEEM"));
        data.insert(std::make_pair(0x16b3c,"PAHAWH HMONG SIGN XYEEM NTXIV"));
        data.insert(std::make_pair(0x16b3d,"PAHAWH HMONG SIGN XYEEM RHO"));
        data.insert(std::make_pair(0x16b3e,"PAHAWH HMONG SIGN XYEEM TOV"));
        data.insert(std::make_pair(0x16b3f,"PAHAWH HMONG SIGN XYEEM FAIB"));
        data.insert(std::make_pair(0x16b40,"PAHAWH HMONG SIGN VOS SEEV"));
        data.insert(std::make_pair(0x16b41,"PAHAWH HMONG SIGN MEEJ SUAB"));
        data.insert(std::make_pair(0x16b42,"PAHAWH HMONG SIGN VOS NRUA"));
        data.insert(std::make_pair(0x16b43,"PAHAWH HMONG SIGN IB YAM"));
        data.insert(std::make_pair(0x16b44,"PAHAWH HMONG SIGN XAUS"));
        data.insert(std::make_pair(0x16b45,"PAHAWH HMONG SIGN CIM TSOV ROG"));
        data.insert(std::make_pair(0x16b50,"PAHAWH HMONG DIGIT ZERO"));
        data.insert(std::make_pair(0x16b51,"PAHAWH HMONG DIGIT ONE"));
        data.insert(std::make_pair(0x16b52,"PAHAWH HMONG DIGIT TWO"));
        data.insert(std::make_pair(0x16b53,"PAHAWH HMONG DIGIT THREE"));
        data.insert(std::make_pair(0x16b54,"PAHAWH HMONG DIGIT FOUR"));
        data.insert(std::make_pair(0x16b55,"PAHAWH HMONG DIGIT FIVE"));
        data.insert(std::make_pair(0x16b56,"PAHAWH HMONG DIGIT SIX"));
        data.insert(std::make_pair(0x16b57,"PAHAWH HMONG DIGIT SEVEN"));
        data.insert(std::make_pair(0x16b58,"PAHAWH HMONG DIGIT EIGHT"));
        data.insert(std::make_pair(0x16b59,"PAHAWH HMONG DIGIT NINE"));
        data.insert(std::make_pair(0x16b5b,"PAHAWH HMONG NUMBER TENS"));
        data.insert(std::make_pair(0x16b5c,"PAHAWH HMONG NUMBER HUNDREDS"));
        data.insert(std::make_pair(0x16b5d,"PAHAWH HMONG NUMBER TEN THOUSANDS"));
        data.insert(std::make_pair(0x16b5e,"PAHAWH HMONG NUMBER MILLIONS"));
        data.insert(std::make_pair(0x16b5f,"PAHAWH HMONG NUMBER HUNDRED MILLIONS"));
        data.insert(std::make_pair(0x16b60,"PAHAWH HMONG NUMBER TEN BILLIONS"));
        data.insert(std::make_pair(0x16b61,"PAHAWH HMONG NUMBER TRILLIONS"));
        data.insert(std::make_pair(0x16b63,"PAHAWH HMONG SIGN VOS LUB"));
        data.insert(std::make_pair(0x16b64,"PAHAWH HMONG SIGN XYOO"));
        data.insert(std::make_pair(0x16b65,"PAHAWH HMONG SIGN HLI"));
        data.insert(std::make_pair(0x16b66,"PAHAWH HMONG SIGN THIRD-STAGE HLI"));
        data.insert(std::make_pair(0x16b67,"PAHAWH HMONG SIGN ZWJ THAJ"));
        data.insert(std::make_pair(0x16b68,"PAHAWH HMONG SIGN HNUB"));
        data.insert(std::make_pair(0x16b69,"PAHAWH HMONG SIGN NQIG"));
        data.insert(std::make_pair(0x16b6a,"PAHAWH HMONG SIGN XIAB"));
        data.insert(std::make_pair(0x16b6b,"PAHAWH HMONG SIGN NTUJ"));
        data.insert(std::make_pair(0x16b6c,"PAHAWH HMONG SIGN AV"));
        data.insert(std::make_pair(0x16b6d,"PAHAWH HMONG SIGN TXHEEJ CEEV"));
        data.insert(std::make_pair(0x16b6e,"PAHAWH HMONG SIGN MEEJ TSEEB"));
        data.insert(std::make_pair(0x16b6f,"PAHAWH HMONG SIGN TAU"));
        data.insert(std::make_pair(0x16b70,"PAHAWH HMONG SIGN LOS"));
        data.insert(std::make_pair(0x16b71,"PAHAWH HMONG SIGN MUS"));
        data.insert(std::make_pair(0x16b72,"PAHAWH HMONG SIGN CIM HAIS LUS NTOG NTOG"));
        data.insert(std::make_pair(0x16b73,"PAHAWH HMONG SIGN CIM CUAM TSHOOJ"));
        data.insert(std::make_pair(0x16b74,"PAHAWH HMONG SIGN CIM TXWV"));
        data.insert(std::make_pair(0x16b75,"PAHAWH HMONG SIGN CIM TXWV CHWV"));
        data.insert(std::make_pair(0x16b76,"PAHAWH HMONG SIGN CIM PUB DAWB"));
        data.insert(std::make_pair(0x16b77,"PAHAWH HMONG SIGN CIM NRES TOS"));
        data.insert(std::make_pair(0x16b7d,"PAHAWH HMONG CLAN SIGN TSHEEJ"));
        data.insert(std::make_pair(0x16b7e,"PAHAWH HMONG CLAN SIGN YEEG"));
        data.insert(std::make_pair(0x16b7f,"PAHAWH HMONG CLAN SIGN LIS"));
        data.insert(std::make_pair(0x16b80,"PAHAWH HMONG CLAN SIGN LAUJ"));
        data.insert(std::make_pair(0x16b81,"PAHAWH HMONG CLAN SIGN XYOOJ"));
        data.insert(std::make_pair(0x16b82,"PAHAWH HMONG CLAN SIGN KOO"));
        data.insert(std::make_pair(0x16b83,"PAHAWH HMONG CLAN SIGN HAWJ"));
        data.insert(std::make_pair(0x16b84,"PAHAWH HMONG CLAN SIGN MUAS"));
        data.insert(std::make_pair(0x16b85,"PAHAWH HMONG CLAN SIGN THOJ"));
        data.insert(std::make_pair(0x16b86,"PAHAWH HMONG CLAN SIGN TSAB"));
        data.insert(std::make_pair(0x16b87,"PAHAWH HMONG CLAN SIGN PHAB"));
        data.insert(std::make_pair(0x16b88,"PAHAWH HMONG CLAN SIGN KHAB"));
        data.insert(std::make_pair(0x16b89,"PAHAWH HMONG CLAN SIGN HAM"));
        data.insert(std::make_pair(0x16b8a,"PAHAWH HMONG CLAN SIGN VAJ"));
        data.insert(std::make_pair(0x16b8b,"PAHAWH HMONG CLAN SIGN FAJ"));
        data.insert(std::make_pair(0x16b8c,"PAHAWH HMONG CLAN SIGN YAJ"));
        data.insert(std::make_pair(0x16b8d,"PAHAWH HMONG CLAN SIGN TSWB"));
        data.insert(std::make_pair(0x16b8e,"PAHAWH HMONG CLAN SIGN KWM"));
        data.insert(std::make_pair(0x16b8f,"PAHAWH HMONG CLAN SIGN VWJ"));
        data.insert(std::make_pair(0x16e40,"MEDEFAIDRIN CAPITAL LETTER M"));
        data.insert(std::make_pair(0x16e41,"MEDEFAIDRIN CAPITAL LETTER S"));
        data.insert(std::make_pair(0x16e42,"MEDEFAIDRIN CAPITAL LETTER V"));
        data.insert(std::make_pair(0x16e43,"MEDEFAIDRIN CAPITAL LETTER W"));
        data.insert(std::make_pair(0x16e44,"MEDEFAIDRIN CAPITAL LETTER ATIU"));
        data.insert(std::make_pair(0x16e45,"MEDEFAIDRIN CAPITAL LETTER Z"));
        data.insert(std::make_pair(0x16e46,"MEDEFAIDRIN CAPITAL LETTER KP"));
        data.insert(std::make_pair(0x16e47,"MEDEFAIDRIN CAPITAL LETTER P"));
        data.insert(std::make_pair(0x16e48,"MEDEFAIDRIN CAPITAL LETTER T"));
        data.insert(std::make_pair(0x16e49,"MEDEFAIDRIN CAPITAL LETTER G"));
        data.insert(std::make_pair(0x16e4a,"MEDEFAIDRIN CAPITAL LETTER F"));
        data.insert(std::make_pair(0x16e4b,"MEDEFAIDRIN CAPITAL LETTER I"));
        data.insert(std::make_pair(0x16e4c,"MEDEFAIDRIN CAPITAL LETTER K"));
        data.insert(std::make_pair(0x16e4d,"MEDEFAIDRIN CAPITAL LETTER A"));
        data.insert(std::make_pair(0x16e4e,"MEDEFAIDRIN CAPITAL LETTER J"));
        data.insert(std::make_pair(0x16e4f,"MEDEFAIDRIN CAPITAL LETTER E"));
        data.insert(std::make_pair(0x16e50,"MEDEFAIDRIN CAPITAL LETTER B"));
        data.insert(std::make_pair(0x16e51,"MEDEFAIDRIN CAPITAL LETTER C"));
        data.insert(std::make_pair(0x16e52,"MEDEFAIDRIN CAPITAL LETTER U"));
        data.insert(std::make_pair(0x16e53,"MEDEFAIDRIN CAPITAL LETTER YU"));
        data.insert(std::make_pair(0x16e54,"MEDEFAIDRIN CAPITAL LETTER L"));
        data.insert(std::make_pair(0x16e55,"MEDEFAIDRIN CAPITAL LETTER Q"));
        data.insert(std::make_pair(0x16e56,"MEDEFAIDRIN CAPITAL LETTER HP"));
        data.insert(std::make_pair(0x16e57,"MEDEFAIDRIN CAPITAL LETTER NY"));
        data.insert(std::make_pair(0x16e58,"MEDEFAIDRIN CAPITAL LETTER X"));
        data.insert(std::make_pair(0x16e59,"MEDEFAIDRIN CAPITAL LETTER D"));
        data.insert(std::make_pair(0x16e5a,"MEDEFAIDRIN CAPITAL LETTER OE"));
        data.insert(std::make_pair(0x16e5b,"MEDEFAIDRIN CAPITAL LETTER N"));
        data.insert(std::make_pair(0x16e5c,"MEDEFAIDRIN CAPITAL LETTER R"));
        data.insert(std::make_pair(0x16e5d,"MEDEFAIDRIN CAPITAL LETTER O"));
        data.insert(std::make_pair(0x16e5e,"MEDEFAIDRIN CAPITAL LETTER AI"));
        data.insert(std::make_pair(0x16e5f,"MEDEFAIDRIN CAPITAL LETTER Y"));
        data.insert(std::make_pair(0x16e60,"MEDEFAIDRIN SMALL LETTER M"));
        data.insert(std::make_pair(0x16e61,"MEDEFAIDRIN SMALL LETTER S"));
        data.insert(std::make_pair(0x16e62,"MEDEFAIDRIN SMALL LETTER V"));
        data.insert(std::make_pair(0x16e63,"MEDEFAIDRIN SMALL LETTER W"));
        data.insert(std::make_pair(0x16e64,"MEDEFAIDRIN SMALL LETTER ATIU"));
        data.insert(std::make_pair(0x16e65,"MEDEFAIDRIN SMALL LETTER Z"));
        data.insert(std::make_pair(0x16e66,"MEDEFAIDRIN SMALL LETTER KP"));
        data.insert(std::make_pair(0x16e67,"MEDEFAIDRIN SMALL LETTER P"));
        data.insert(std::make_pair(0x16e68,"MEDEFAIDRIN SMALL LETTER T"));
        data.insert(std::make_pair(0x16e69,"MEDEFAIDRIN SMALL LETTER G"));
        data.insert(std::make_pair(0x16e6a,"MEDEFAIDRIN SMALL LETTER F"));
        data.insert(std::make_pair(0x16e6b,"MEDEFAIDRIN SMALL LETTER I"));
        data.insert(std::make_pair(0x16e6c,"MEDEFAIDRIN SMALL LETTER K"));
        data.insert(std::make_pair(0x16e6d,"MEDEFAIDRIN SMALL LETTER A"));
        data.insert(std::make_pair(0x16e6e,"MEDEFAIDRIN SMALL LETTER J"));
        data.insert(std::make_pair(0x16e6f,"MEDEFAIDRIN SMALL LETTER E"));
        data.insert(std::make_pair(0x16e70,"MEDEFAIDRIN SMALL LETTER B"));
        data.insert(std::make_pair(0x16e71,"MEDEFAIDRIN SMALL LETTER C"));
        data.insert(std::make_pair(0x16e72,"MEDEFAIDRIN SMALL LETTER U"));
        data.insert(std::make_pair(0x16e73,"MEDEFAIDRIN SMALL LETTER YU"));
        data.insert(std::make_pair(0x16e74,"MEDEFAIDRIN SMALL LETTER L"));
        data.insert(std::make_pair(0x16e75,"MEDEFAIDRIN SMALL LETTER Q"));
        data.insert(std::make_pair(0x16e76,"MEDEFAIDRIN SMALL LETTER HP"));
        data.insert(std::make_pair(0x16e77,"MEDEFAIDRIN SMALL LETTER NY"));
        data.insert(std::make_pair(0x16e78,"MEDEFAIDRIN SMALL LETTER X"));
        data.insert(std::make_pair(0x16e79,"MEDEFAIDRIN SMALL LETTER D"));
        data.insert(std::make_pair(0x16e7a,"MEDEFAIDRIN SMALL LETTER OE"));
        data.insert(std::make_pair(0x16e7b,"MEDEFAIDRIN SMALL LETTER N"));
        data.insert(std::make_pair(0x16e7c,"MEDEFAIDRIN SMALL LETTER R"));
        data.insert(std::make_pair(0x16e7d,"MEDEFAIDRIN SMALL LETTER O"));
        data.insert(std::make_pair(0x16e7e,"MEDEFAIDRIN SMALL LETTER AI"));
        data.insert(std::make_pair(0x16e7f,"MEDEFAIDRIN SMALL LETTER Y"));
        data.insert(std::make_pair(0x16e80,"MEDEFAIDRIN DIGIT ZERO"));
        data.insert(std::make_pair(0x16e81,"MEDEFAIDRIN DIGIT ONE"));
        data.insert(std::make_pair(0x16e82,"MEDEFAIDRIN DIGIT TWO"));
        data.insert(std::make_pair(0x16e83,"MEDEFAIDRIN DIGIT THREE"));
        data.insert(std::make_pair(0x16e84,"MEDEFAIDRIN DIGIT FOUR"));
        data.insert(std::make_pair(0x16e85,"MEDEFAIDRIN DIGIT FIVE"));
        data.insert(std::make_pair(0x16e86,"MEDEFAIDRIN DIGIT SIX"));
        data.insert(std::make_pair(0x16e87,"MEDEFAIDRIN DIGIT SEVEN"));
        data.insert(std::make_pair(0x16e88,"MEDEFAIDRIN DIGIT EIGHT"));
        data.insert(std::make_pair(0x16e89,"MEDEFAIDRIN DIGIT NINE"));
        data.insert(std::make_pair(0x16e8a,"MEDEFAIDRIN NUMBER TEN"));
        data.insert(std::make_pair(0x16e8b,"MEDEFAIDRIN NUMBER ELEVEN"));
        data.insert(std::make_pair(0x16e8c,"MEDEFAIDRIN NUMBER TWELVE"));
        data.insert(std::make_pair(0x16e8d,"MEDEFAIDRIN NUMBER THIRTEEN"));
        data.insert(std::make_pair(0x16e8e,"MEDEFAIDRIN NUMBER FOURTEEN"));
        data.insert(std::make_pair(0x16e8f,"MEDEFAIDRIN NUMBER FIFTEEN"));
        data.insert(std::make_pair(0x16e90,"MEDEFAIDRIN NUMBER SIXTEEN"));
        data.insert(std::make_pair(0x16e91,"MEDEFAIDRIN NUMBER SEVENTEEN"));
        data.insert(std::make_pair(0x16e92,"MEDEFAIDRIN NUMBER EIGHTEEN"));
        data.insert(std::make_pair(0x16e93,"MEDEFAIDRIN NUMBER NINETEEN"));
        data.insert(std::make_pair(0x16e94,"MEDEFAIDRIN DIGIT ONE ALTERNATE FORM"));
        data.insert(std::make_pair(0x16e95,"MEDEFAIDRIN DIGIT TWO ALTERNATE FORM"));
        data.insert(std::make_pair(0x16e96,"MEDEFAIDRIN DIGIT THREE ALTERNATE FORM"));
        data.insert(std::make_pair(0x16e97,"MEDEFAIDRIN COMMA"));
        data.insert(std::make_pair(0x16e98,"MEDEFAIDRIN FULL STOP"));
        data.insert(std::make_pair(0x16e99,"MEDEFAIDRIN SYMBOL AIVA"));
        data.insert(std::make_pair(0x16e9a,"MEDEFAIDRIN EXCLAMATION OH"));
        data.insert(std::make_pair(0x16f00,"MIAO LETTER PA"));
        data.insert(std::make_pair(0x16f01,"MIAO LETTER BA"));
        data.insert(std::make_pair(0x16f02,"MIAO LETTER YI PA"));
        data.insert(std::make_pair(0x16f03,"MIAO LETTER PLA"));
        data.insert(std::make_pair(0x16f04,"MIAO LETTER MA"));
        data.insert(std::make_pair(0x16f05,"MIAO LETTER MHA"));
        data.insert(std::make_pair(0x16f06,"MIAO LETTER ARCHAIC MA"));
        data.insert(std::make_pair(0x16f07,"MIAO LETTER FA"));
        data.insert(std::make_pair(0x16f08,"MIAO LETTER VA"));
        data.insert(std::make_pair(0x16f09,"MIAO LETTER VFA"));
        data.insert(std::make_pair(0x16f0a,"MIAO LETTER TA"));
        data.insert(std::make_pair(0x16f0b,"MIAO LETTER DA"));
        data.insert(std::make_pair(0x16f0c,"MIAO LETTER YI TTA"));
        data.insert(std::make_pair(0x16f0d,"MIAO LETTER YI TA"));
        data.insert(std::make_pair(0x16f0e,"MIAO LETTER TTA"));
        data.insert(std::make_pair(0x16f0f,"MIAO LETTER DDA"));
        data.insert(std::make_pair(0x16f10,"MIAO LETTER NA"));
        data.insert(std::make_pair(0x16f11,"MIAO LETTER NHA"));
        data.insert(std::make_pair(0x16f12,"MIAO LETTER YI NNA"));
        data.insert(std::make_pair(0x16f13,"MIAO LETTER ARCHAIC NA"));
        data.insert(std::make_pair(0x16f14,"MIAO LETTER NNA"));
        data.insert(std::make_pair(0x16f15,"MIAO LETTER NNHA"));
        data.insert(std::make_pair(0x16f16,"MIAO LETTER LA"));
        data.insert(std::make_pair(0x16f17,"MIAO LETTER LYA"));
        data.insert(std::make_pair(0x16f18,"MIAO LETTER LHA"));
        data.insert(std::make_pair(0x16f19,"MIAO LETTER LHYA"));
        data.insert(std::make_pair(0x16f1a,"MIAO LETTER TLHA"));
        data.insert(std::make_pair(0x16f1b,"MIAO LETTER DLHA"));
        data.insert(std::make_pair(0x16f1c,"MIAO LETTER TLHYA"));
        data.insert(std::make_pair(0x16f1d,"MIAO LETTER DLHYA"));
        data.insert(std::make_pair(0x16f1e,"MIAO LETTER KA"));
        data.insert(std::make_pair(0x16f1f,"MIAO LETTER GA"));
        data.insert(std::make_pair(0x16f20,"MIAO LETTER YI KA"));
        data.insert(std::make_pair(0x16f21,"MIAO LETTER QA"));
        data.insert(std::make_pair(0x16f22,"MIAO LETTER QGA"));
        data.insert(std::make_pair(0x16f23,"MIAO LETTER NGA"));
        data.insert(std::make_pair(0x16f24,"MIAO LETTER NGHA"));
        data.insert(std::make_pair(0x16f25,"MIAO LETTER ARCHAIC NGA"));
        data.insert(std::make_pair(0x16f26,"MIAO LETTER HA"));
        data.insert(std::make_pair(0x16f27,"MIAO LETTER XA"));
        data.insert(std::make_pair(0x16f28,"MIAO LETTER GHA"));
        data.insert(std::make_pair(0x16f29,"MIAO LETTER GHHA"));
        data.insert(std::make_pair(0x16f2a,"MIAO LETTER TSSA"));
        data.insert(std::make_pair(0x16f2b,"MIAO LETTER DZZA"));
        data.insert(std::make_pair(0x16f2c,"MIAO LETTER NYA"));
        data.insert(std::make_pair(0x16f2d,"MIAO LETTER NYHA"));
        data.insert(std::make_pair(0x16f2e,"MIAO LETTER TSHA"));
        data.insert(std::make_pair(0x16f2f,"MIAO LETTER DZHA"));
        data.insert(std::make_pair(0x16f30,"MIAO LETTER YI TSHA"));
        data.insert(std::make_pair(0x16f31,"MIAO LETTER YI DZHA"));
        data.insert(std::make_pair(0x16f32,"MIAO LETTER REFORMED TSHA"));
        data.insert(std::make_pair(0x16f33,"MIAO LETTER SHA"));
        data.insert(std::make_pair(0x16f34,"MIAO LETTER SSA"));
        data.insert(std::make_pair(0x16f35,"MIAO LETTER ZHA"));
        data.insert(std::make_pair(0x16f36,"MIAO LETTER ZSHA"));
        data.insert(std::make_pair(0x16f37,"MIAO LETTER TSA"));
        data.insert(std::make_pair(0x16f38,"MIAO LETTER DZA"));
        data.insert(std::make_pair(0x16f39,"MIAO LETTER YI TSA"));
        data.insert(std::make_pair(0x16f3a,"MIAO LETTER SA"));
        data.insert(std::make_pair(0x16f3b,"MIAO LETTER ZA"));
        data.insert(std::make_pair(0x16f3c,"MIAO LETTER ZSA"));
        data.insert(std::make_pair(0x16f3d,"MIAO LETTER ZZA"));
        data.insert(std::make_pair(0x16f3e,"MIAO LETTER ZZSA"));
        data.insert(std::make_pair(0x16f3f,"MIAO LETTER ARCHAIC ZZA"));
        data.insert(std::make_pair(0x16f40,"MIAO LETTER ZZYA"));
        data.insert(std::make_pair(0x16f41,"MIAO LETTER ZZSYA"));
        data.insert(std::make_pair(0x16f42,"MIAO LETTER WA"));
        data.insert(std::make_pair(0x16f43,"MIAO LETTER AH"));
        data.insert(std::make_pair(0x16f44,"MIAO LETTER HHA"));
        data.insert(std::make_pair(0x16f45,"MIAO LETTER BRI"));
        data.insert(std::make_pair(0x16f46,"MIAO LETTER SYI"));
        data.insert(std::make_pair(0x16f47,"MIAO LETTER DZYI"));
        data.insert(std::make_pair(0x16f48,"MIAO LETTER TE"));
        data.insert(std::make_pair(0x16f49,"MIAO LETTER TSE"));
        data.insert(std::make_pair(0x16f4a,"MIAO LETTER RTE"));
        data.insert(std::make_pair(0x16f4f,"MIAO SIGN CONSONANT MODIFIER BAR"));
        data.insert(std::make_pair(0x16f50,"MIAO LETTER NASALIZATION"));
        data.insert(std::make_pair(0x16f51,"MIAO SIGN ASPIRATION"));
        data.insert(std::make_pair(0x16f52,"MIAO SIGN REFORMED VOICING"));
        data.insert(std::make_pair(0x16f53,"MIAO SIGN REFORMED ASPIRATION"));
        data.insert(std::make_pair(0x16f54,"MIAO VOWEL SIGN A"));
        data.insert(std::make_pair(0x16f55,"MIAO VOWEL SIGN AA"));
        data.insert(std::make_pair(0x16f56,"MIAO VOWEL SIGN AHH"));
        data.insert(std::make_pair(0x16f57,"MIAO VOWEL SIGN AN"));
        data.insert(std::make_pair(0x16f58,"MIAO VOWEL SIGN ANG"));
        data.insert(std::make_pair(0x16f59,"MIAO VOWEL SIGN O"));
        data.insert(std::make_pair(0x16f5a,"MIAO VOWEL SIGN OO"));
        data.insert(std::make_pair(0x16f5b,"MIAO VOWEL SIGN WO"));
        data.insert(std::make_pair(0x16f5c,"MIAO VOWEL SIGN W"));
        data.insert(std::make_pair(0x16f5d,"MIAO VOWEL SIGN E"));
        data.insert(std::make_pair(0x16f5e,"MIAO VOWEL SIGN EN"));
        data.insert(std::make_pair(0x16f5f,"MIAO VOWEL SIGN ENG"));
        data.insert(std::make_pair(0x16f60,"MIAO VOWEL SIGN OEY"));
        data.insert(std::make_pair(0x16f61,"MIAO VOWEL SIGN I"));
        data.insert(std::make_pair(0x16f62,"MIAO VOWEL SIGN IA"));
        data.insert(std::make_pair(0x16f63,"MIAO VOWEL SIGN IAN"));
        data.insert(std::make_pair(0x16f64,"MIAO VOWEL SIGN IANG"));
        data.insert(std::make_pair(0x16f65,"MIAO VOWEL SIGN IO"));
        data.insert(std::make_pair(0x16f66,"MIAO VOWEL SIGN IE"));
        data.insert(std::make_pair(0x16f67,"MIAO VOWEL SIGN II"));
        data.insert(std::make_pair(0x16f68,"MIAO VOWEL SIGN IU"));
        data.insert(std::make_pair(0x16f69,"MIAO VOWEL SIGN ING"));
        data.insert(std::make_pair(0x16f6a,"MIAO VOWEL SIGN U"));
        data.insert(std::make_pair(0x16f6b,"MIAO VOWEL SIGN UA"));
        data.insert(std::make_pair(0x16f6c,"MIAO VOWEL SIGN UAN"));
        data.insert(std::make_pair(0x16f6d,"MIAO VOWEL SIGN UANG"));
        data.insert(std::make_pair(0x16f6e,"MIAO VOWEL SIGN UU"));
        data.insert(std::make_pair(0x16f6f,"MIAO VOWEL SIGN UEI"));
        data.insert(std::make_pair(0x16f70,"MIAO VOWEL SIGN UNG"));
        data.insert(std::make_pair(0x16f71,"MIAO VOWEL SIGN Y"));
        data.insert(std::make_pair(0x16f72,"MIAO VOWEL SIGN YI"));
        data.insert(std::make_pair(0x16f73,"MIAO VOWEL SIGN AE"));
        data.insert(std::make_pair(0x16f74,"MIAO VOWEL SIGN AEE"));
        data.insert(std::make_pair(0x16f75,"MIAO VOWEL SIGN ERR"));
        data.insert(std::make_pair(0x16f76,"MIAO VOWEL SIGN ROUNDED ERR"));
        data.insert(std::make_pair(0x16f77,"MIAO VOWEL SIGN ER"));
        data.insert(std::make_pair(0x16f78,"MIAO VOWEL SIGN ROUNDED ER"));
        data.insert(std::make_pair(0x16f79,"MIAO VOWEL SIGN AI"));
        data.insert(std::make_pair(0x16f7a,"MIAO VOWEL SIGN EI"));
        data.insert(std::make_pair(0x16f7b,"MIAO VOWEL SIGN AU"));
        data.insert(std::make_pair(0x16f7c,"MIAO VOWEL SIGN OU"));
        data.insert(std::make_pair(0x16f7d,"MIAO VOWEL SIGN N"));
        data.insert(std::make_pair(0x16f7e,"MIAO VOWEL SIGN NG"));
        data.insert(std::make_pair(0x16f7f,"MIAO VOWEL SIGN UOG"));
        data.insert(std::make_pair(0x16f80,"MIAO VOWEL SIGN YUI"));
        data.insert(std::make_pair(0x16f81,"MIAO VOWEL SIGN OG"));
        data.insert(std::make_pair(0x16f82,"MIAO VOWEL SIGN OER"));
        data.insert(std::make_pair(0x16f83,"MIAO VOWEL SIGN VW"));
        data.insert(std::make_pair(0x16f84,"MIAO VOWEL SIGN IG"));
        data.insert(std::make_pair(0x16f85,"MIAO VOWEL SIGN EA"));
        data.insert(std::make_pair(0x16f86,"MIAO VOWEL SIGN IONG"));
        data.insert(std::make_pair(0x16f87,"MIAO VOWEL SIGN UI"));
        data.insert(std::make_pair(0x16f8f,"MIAO TONE RIGHT"));
        data.insert(std::make_pair(0x16f90,"MIAO TONE TOP RIGHT"));
        data.insert(std::make_pair(0x16f91,"MIAO TONE ABOVE"));
        data.insert(std::make_pair(0x16f92,"MIAO TONE BELOW"));
        data.insert(std::make_pair(0x16f93,"MIAO LETTER TONE-2"));
        data.insert(std::make_pair(0x16f94,"MIAO LETTER TONE-3"));
        data.insert(std::make_pair(0x16f95,"MIAO LETTER TONE-4"));
        data.insert(std::make_pair(0x16f96,"MIAO LETTER TONE-5"));
        data.insert(std::make_pair(0x16f97,"MIAO LETTER TONE-6"));
        data.insert(std::make_pair(0x16f98,"MIAO LETTER TONE-7"));
        data.insert(std::make_pair(0x16f99,"MIAO LETTER TONE-8"));
        data.insert(std::make_pair(0x16f9a,"MIAO LETTER REFORMED TONE-1"));
        data.insert(std::make_pair(0x16f9b,"MIAO LETTER REFORMED TONE-2"));
        data.insert(std::make_pair(0x16f9c,"MIAO LETTER REFORMED TONE-4"));
        data.insert(std::make_pair(0x16f9d,"MIAO LETTER REFORMED TONE-5"));
        data.insert(std::make_pair(0x16f9e,"MIAO LETTER REFORMED TONE-6"));
        data.insert(std::make_pair(0x16f9f,"MIAO LETTER REFORMED TONE-8"));
        data.insert(std::make_pair(0x16fe0,"TANGUT ITERATION MARK"));
        data.insert(std::make_pair(0x16fe1,"NUSHU ITERATION MARK"));
        data.insert(std::make_pair(0x16fe2,"OLD CHINESE HOOK MARK"));
        data.insert(std::make_pair(0x16fe3,"OLD CHINESE ITERATION MARK"));
        data.insert(std::make_pair(0x16fe4,"KHITAN SMALL SCRIPT FILLER"));
        data.insert(std::make_pair(0x16ff0,"VIETNAMESE ALTERNATE READING MARK CA"));
        data.insert(std::make_pair(0x16ff1,"VIETNAMESE ALTERNATE READING MARK NHAY"));
        data.insert(std::make_pair(0x17000,"<Tangut Ideograph, First>"));
        data.insert(std::make_pair(0x187f7,"<Tangut Ideograph, Last>"));
        data.insert(std::make_pair(0x18800,"TANGUT COMPONENT-001"));
        data.insert(std::make_pair(0x18801,"TANGUT COMPONENT-002"));
        data.insert(std::make_pair(0x18802,"TANGUT COMPONENT-003"));
        data.insert(std::make_pair(0x18803,"TANGUT COMPONENT-004"));
        data.insert(std::make_pair(0x18804,"TANGUT COMPONENT-005"));
        data.insert(std::make_pair(0x18805,"TANGUT COMPONENT-006"));
        data.insert(std::make_pair(0x18806,"TANGUT COMPONENT-007"));
        data.insert(std::make_pair(0x18807,"TANGUT COMPONENT-008"));
        data.insert(std::make_pair(0x18808,"TANGUT COMPONENT-009"));
        data.insert(std::make_pair(0x18809,"TANGUT COMPONENT-010"));
        data.insert(std::make_pair(0x1880a,"TANGUT COMPONENT-011"));
        data.insert(std::make_pair(0x1880b,"TANGUT COMPONENT-012"));
        data.insert(std::make_pair(0x1880c,"TANGUT COMPONENT-013"));
        data.insert(std::make_pair(0x1880d,"TANGUT COMPONENT-014"));
        data.insert(std::make_pair(0x1880e,"TANGUT COMPONENT-015"));
        data.insert(std::make_pair(0x1880f,"TANGUT COMPONENT-016"));
        data.insert(std::make_pair(0x18810,"TANGUT COMPONENT-017"));
        data.insert(std::make_pair(0x18811,"TANGUT COMPONENT-018"));
        data.insert(std::make_pair(0x18812,"TANGUT COMPONENT-019"));
        data.insert(std::make_pair(0x18813,"TANGUT COMPONENT-020"));
        data.insert(std::make_pair(0x18814,"TANGUT COMPONENT-021"));
        data.insert(std::make_pair(0x18815,"TANGUT COMPONENT-022"));
        data.insert(std::make_pair(0x18816,"TANGUT COMPONENT-023"));
        data.insert(std::make_pair(0x18817,"TANGUT COMPONENT-024"));
        data.insert(std::make_pair(0x18818,"TANGUT COMPONENT-025"));
        data.insert(std::make_pair(0x18819,"TANGUT COMPONENT-026"));
        data.insert(std::make_pair(0x1881a,"TANGUT COMPONENT-027"));
        data.insert(std::make_pair(0x1881b,"TANGUT COMPONENT-028"));
        data.insert(std::make_pair(0x1881c,"TANGUT COMPONENT-029"));
        data.insert(std::make_pair(0x1881d,"TANGUT COMPONENT-030"));
        data.insert(std::make_pair(0x1881e,"TANGUT COMPONENT-031"));
        data.insert(std::make_pair(0x1881f,"TANGUT COMPONENT-032"));
        data.insert(std::make_pair(0x18820,"TANGUT COMPONENT-033"));
        data.insert(std::make_pair(0x18821,"TANGUT COMPONENT-034"));
        data.insert(std::make_pair(0x18822,"TANGUT COMPONENT-035"));
        data.insert(std::make_pair(0x18823,"TANGUT COMPONENT-036"));
        data.insert(std::make_pair(0x18824,"TANGUT COMPONENT-037"));
        data.insert(std::make_pair(0x18825,"TANGUT COMPONENT-038"));
        data.insert(std::make_pair(0x18826,"TANGUT COMPONENT-039"));
        data.insert(std::make_pair(0x18827,"TANGUT COMPONENT-040"));
        data.insert(std::make_pair(0x18828,"TANGUT COMPONENT-041"));
        data.insert(std::make_pair(0x18829,"TANGUT COMPONENT-042"));
        data.insert(std::make_pair(0x1882a,"TANGUT COMPONENT-043"));
        data.insert(std::make_pair(0x1882b,"TANGUT COMPONENT-044"));
        data.insert(std::make_pair(0x1882c,"TANGUT COMPONENT-045"));
        data.insert(std::make_pair(0x1882d,"TANGUT COMPONENT-046"));
        data.insert(std::make_pair(0x1882e,"TANGUT COMPONENT-047"));
        data.insert(std::make_pair(0x1882f,"TANGUT COMPONENT-048"));
        data.insert(std::make_pair(0x18830,"TANGUT COMPONENT-049"));
        data.insert(std::make_pair(0x18831,"TANGUT COMPONENT-050"));
        data.insert(std::make_pair(0x18832,"TANGUT COMPONENT-051"));
        data.insert(std::make_pair(0x18833,"TANGUT COMPONENT-052"));
        data.insert(std::make_pair(0x18834,"TANGUT COMPONENT-053"));
        data.insert(std::make_pair(0x18835,"TANGUT COMPONENT-054"));
        data.insert(std::make_pair(0x18836,"TANGUT COMPONENT-055"));
        data.insert(std::make_pair(0x18837,"TANGUT COMPONENT-056"));
        data.insert(std::make_pair(0x18838,"TANGUT COMPONENT-057"));
        data.insert(std::make_pair(0x18839,"TANGUT COMPONENT-058"));
        data.insert(std::make_pair(0x1883a,"TANGUT COMPONENT-059"));
        data.insert(std::make_pair(0x1883b,"TANGUT COMPONENT-060"));
        data.insert(std::make_pair(0x1883c,"TANGUT COMPONENT-061"));
        data.insert(std::make_pair(0x1883d,"TANGUT COMPONENT-062"));
        data.insert(std::make_pair(0x1883e,"TANGUT COMPONENT-063"));
        data.insert(std::make_pair(0x1883f,"TANGUT COMPONENT-064"));
        data.insert(std::make_pair(0x18840,"TANGUT COMPONENT-065"));
        data.insert(std::make_pair(0x18841,"TANGUT COMPONENT-066"));
        data.insert(std::make_pair(0x18842,"TANGUT COMPONENT-067"));
        data.insert(std::make_pair(0x18843,"TANGUT COMPONENT-068"));
        data.insert(std::make_pair(0x18844,"TANGUT COMPONENT-069"));
        data.insert(std::make_pair(0x18845,"TANGUT COMPONENT-070"));
        data.insert(std::make_pair(0x18846,"TANGUT COMPONENT-071"));
        data.insert(std::make_pair(0x18847,"TANGUT COMPONENT-072"));
        data.insert(std::make_pair(0x18848,"TANGUT COMPONENT-073"));
        data.insert(std::make_pair(0x18849,"TANGUT COMPONENT-074"));
        data.insert(std::make_pair(0x1884a,"TANGUT COMPONENT-075"));
        data.insert(std::make_pair(0x1884b,"TANGUT COMPONENT-076"));
        data.insert(std::make_pair(0x1884c,"TANGUT COMPONENT-077"));
        data.insert(std::make_pair(0x1884d,"TANGUT COMPONENT-078"));
        data.insert(std::make_pair(0x1884e,"TANGUT COMPONENT-079"));
        data.insert(std::make_pair(0x1884f,"TANGUT COMPONENT-080"));
        data.insert(std::make_pair(0x18850,"TANGUT COMPONENT-081"));
        data.insert(std::make_pair(0x18851,"TANGUT COMPONENT-082"));
        data.insert(std::make_pair(0x18852,"TANGUT COMPONENT-083"));
        data.insert(std::make_pair(0x18853,"TANGUT COMPONENT-084"));
        data.insert(std::make_pair(0x18854,"TANGUT COMPONENT-085"));
        data.insert(std::make_pair(0x18855,"TANGUT COMPONENT-086"));
        data.insert(std::make_pair(0x18856,"TANGUT COMPONENT-087"));
        data.insert(std::make_pair(0x18857,"TANGUT COMPONENT-088"));
        data.insert(std::make_pair(0x18858,"TANGUT COMPONENT-089"));
        data.insert(std::make_pair(0x18859,"TANGUT COMPONENT-090"));
        data.insert(std::make_pair(0x1885a,"TANGUT COMPONENT-091"));
        data.insert(std::make_pair(0x1885b,"TANGUT COMPONENT-092"));
        data.insert(std::make_pair(0x1885c,"TANGUT COMPONENT-093"));
        data.insert(std::make_pair(0x1885d,"TANGUT COMPONENT-094"));
        data.insert(std::make_pair(0x1885e,"TANGUT COMPONENT-095"));
        data.insert(std::make_pair(0x1885f,"TANGUT COMPONENT-096"));
        data.insert(std::make_pair(0x18860,"TANGUT COMPONENT-097"));
        data.insert(std::make_pair(0x18861,"TANGUT COMPONENT-098"));
        data.insert(std::make_pair(0x18862,"TANGUT COMPONENT-099"));
        data.insert(std::make_pair(0x18863,"TANGUT COMPONENT-100"));
        data.insert(std::make_pair(0x18864,"TANGUT COMPONENT-101"));
        data.insert(std::make_pair(0x18865,"TANGUT COMPONENT-102"));
        data.insert(std::make_pair(0x18866,"TANGUT COMPONENT-103"));
        data.insert(std::make_pair(0x18867,"TANGUT COMPONENT-104"));
        data.insert(std::make_pair(0x18868,"TANGUT COMPONENT-105"));
        data.insert(std::make_pair(0x18869,"TANGUT COMPONENT-106"));
        data.insert(std::make_pair(0x1886a,"TANGUT COMPONENT-107"));
        data.insert(std::make_pair(0x1886b,"TANGUT COMPONENT-108"));
        data.insert(std::make_pair(0x1886c,"TANGUT COMPONENT-109"));
        data.insert(std::make_pair(0x1886d,"TANGUT COMPONENT-110"));
        data.insert(std::make_pair(0x1886e,"TANGUT COMPONENT-111"));
        data.insert(std::make_pair(0x1886f,"TANGUT COMPONENT-112"));
        data.insert(std::make_pair(0x18870,"TANGUT COMPONENT-113"));
        data.insert(std::make_pair(0x18871,"TANGUT COMPONENT-114"));
        data.insert(std::make_pair(0x18872,"TANGUT COMPONENT-115"));
        data.insert(std::make_pair(0x18873,"TANGUT COMPONENT-116"));
        data.insert(std::make_pair(0x18874,"TANGUT COMPONENT-117"));
        data.insert(std::make_pair(0x18875,"TANGUT COMPONENT-118"));
        data.insert(std::make_pair(0x18876,"TANGUT COMPONENT-119"));
        data.insert(std::make_pair(0x18877,"TANGUT COMPONENT-120"));
        data.insert(std::make_pair(0x18878,"TANGUT COMPONENT-121"));
        data.insert(std::make_pair(0x18879,"TANGUT COMPONENT-122"));
        data.insert(std::make_pair(0x1887a,"TANGUT COMPONENT-123"));
        data.insert(std::make_pair(0x1887b,"TANGUT COMPONENT-124"));
        data.insert(std::make_pair(0x1887c,"TANGUT COMPONENT-125"));
        data.insert(std::make_pair(0x1887d,"TANGUT COMPONENT-126"));
        data.insert(std::make_pair(0x1887e,"TANGUT COMPONENT-127"));
        data.insert(std::make_pair(0x1887f,"TANGUT COMPONENT-128"));
        data.insert(std::make_pair(0x18880,"TANGUT COMPONENT-129"));
        data.insert(std::make_pair(0x18881,"TANGUT COMPONENT-130"));
        data.insert(std::make_pair(0x18882,"TANGUT COMPONENT-131"));
        data.insert(std::make_pair(0x18883,"TANGUT COMPONENT-132"));
        data.insert(std::make_pair(0x18884,"TANGUT COMPONENT-133"));
        data.insert(std::make_pair(0x18885,"TANGUT COMPONENT-134"));
        data.insert(std::make_pair(0x18886,"TANGUT COMPONENT-135"));
        data.insert(std::make_pair(0x18887,"TANGUT COMPONENT-136"));
        data.insert(std::make_pair(0x18888,"TANGUT COMPONENT-137"));
        data.insert(std::make_pair(0x18889,"TANGUT COMPONENT-138"));
        data.insert(std::make_pair(0x1888a,"TANGUT COMPONENT-139"));
        data.insert(std::make_pair(0x1888b,"TANGUT COMPONENT-140"));
        data.insert(std::make_pair(0x1888c,"TANGUT COMPONENT-141"));
        data.insert(std::make_pair(0x1888d,"TANGUT COMPONENT-142"));
        data.insert(std::make_pair(0x1888e,"TANGUT COMPONENT-143"));
        data.insert(std::make_pair(0x1888f,"TANGUT COMPONENT-144"));
        data.insert(std::make_pair(0x18890,"TANGUT COMPONENT-145"));
        data.insert(std::make_pair(0x18891,"TANGUT COMPONENT-146"));
        data.insert(std::make_pair(0x18892,"TANGUT COMPONENT-147"));
        data.insert(std::make_pair(0x18893,"TANGUT COMPONENT-148"));
        data.insert(std::make_pair(0x18894,"TANGUT COMPONENT-149"));
        data.insert(std::make_pair(0x18895,"TANGUT COMPONENT-150"));
        data.insert(std::make_pair(0x18896,"TANGUT COMPONENT-151"));
        data.insert(std::make_pair(0x18897,"TANGUT COMPONENT-152"));
        data.insert(std::make_pair(0x18898,"TANGUT COMPONENT-153"));
        data.insert(std::make_pair(0x18899,"TANGUT COMPONENT-154"));
        data.insert(std::make_pair(0x1889a,"TANGUT COMPONENT-155"));
        data.insert(std::make_pair(0x1889b,"TANGUT COMPONENT-156"));
        data.insert(std::make_pair(0x1889c,"TANGUT COMPONENT-157"));
        data.insert(std::make_pair(0x1889d,"TANGUT COMPONENT-158"));
        data.insert(std::make_pair(0x1889e,"TANGUT COMPONENT-159"));
        data.insert(std::make_pair(0x1889f,"TANGUT COMPONENT-160"));
        data.insert(std::make_pair(0x188a0,"TANGUT COMPONENT-161"));
        data.insert(std::make_pair(0x188a1,"TANGUT COMPONENT-162"));
        data.insert(std::make_pair(0x188a2,"TANGUT COMPONENT-163"));
        data.insert(std::make_pair(0x188a3,"TANGUT COMPONENT-164"));
        data.insert(std::make_pair(0x188a4,"TANGUT COMPONENT-165"));
        data.insert(std::make_pair(0x188a5,"TANGUT COMPONENT-166"));
        data.insert(std::make_pair(0x188a6,"TANGUT COMPONENT-167"));
        data.insert(std::make_pair(0x188a7,"TANGUT COMPONENT-168"));
        data.insert(std::make_pair(0x188a8,"TANGUT COMPONENT-169"));
        data.insert(std::make_pair(0x188a9,"TANGUT COMPONENT-170"));
        data.insert(std::make_pair(0x188aa,"TANGUT COMPONENT-171"));
        data.insert(std::make_pair(0x188ab,"TANGUT COMPONENT-172"));
        data.insert(std::make_pair(0x188ac,"TANGUT COMPONENT-173"));
        data.insert(std::make_pair(0x188ad,"TANGUT COMPONENT-174"));
        data.insert(std::make_pair(0x188ae,"TANGUT COMPONENT-175"));
        data.insert(std::make_pair(0x188af,"TANGUT COMPONENT-176"));
        data.insert(std::make_pair(0x188b0,"TANGUT COMPONENT-177"));
        data.insert(std::make_pair(0x188b1,"TANGUT COMPONENT-178"));
        data.insert(std::make_pair(0x188b2,"TANGUT COMPONENT-179"));
        data.insert(std::make_pair(0x188b3,"TANGUT COMPONENT-180"));
        data.insert(std::make_pair(0x188b4,"TANGUT COMPONENT-181"));
        data.insert(std::make_pair(0x188b5,"TANGUT COMPONENT-182"));
        data.insert(std::make_pair(0x188b6,"TANGUT COMPONENT-183"));
        data.insert(std::make_pair(0x188b7,"TANGUT COMPONENT-184"));
        data.insert(std::make_pair(0x188b8,"TANGUT COMPONENT-185"));
        data.insert(std::make_pair(0x188b9,"TANGUT COMPONENT-186"));
        data.insert(std::make_pair(0x188ba,"TANGUT COMPONENT-187"));
        data.insert(std::make_pair(0x188bb,"TANGUT COMPONENT-188"));
        data.insert(std::make_pair(0x188bc,"TANGUT COMPONENT-189"));
        data.insert(std::make_pair(0x188bd,"TANGUT COMPONENT-190"));
        data.insert(std::make_pair(0x188be,"TANGUT COMPONENT-191"));
        data.insert(std::make_pair(0x188bf,"TANGUT COMPONENT-192"));
        data.insert(std::make_pair(0x188c0,"TANGUT COMPONENT-193"));
        data.insert(std::make_pair(0x188c1,"TANGUT COMPONENT-194"));
        data.insert(std::make_pair(0x188c2,"TANGUT COMPONENT-195"));
        data.insert(std::make_pair(0x188c3,"TANGUT COMPONENT-196"));
        data.insert(std::make_pair(0x188c4,"TANGUT COMPONENT-197"));
        data.insert(std::make_pair(0x188c5,"TANGUT COMPONENT-198"));
        data.insert(std::make_pair(0x188c6,"TANGUT COMPONENT-199"));
        data.insert(std::make_pair(0x188c7,"TANGUT COMPONENT-200"));
        data.insert(std::make_pair(0x188c8,"TANGUT COMPONENT-201"));
        data.insert(std::make_pair(0x188c9,"TANGUT COMPONENT-202"));
        data.insert(std::make_pair(0x188ca,"TANGUT COMPONENT-203"));
        data.insert(std::make_pair(0x188cb,"TANGUT COMPONENT-204"));
        data.insert(std::make_pair(0x188cc,"TANGUT COMPONENT-205"));
        data.insert(std::make_pair(0x188cd,"TANGUT COMPONENT-206"));
        data.insert(std::make_pair(0x188ce,"TANGUT COMPONENT-207"));
        data.insert(std::make_pair(0x188cf,"TANGUT COMPONENT-208"));
        data.insert(std::make_pair(0x188d0,"TANGUT COMPONENT-209"));
        data.insert(std::make_pair(0x188d1,"TANGUT COMPONENT-210"));
        data.insert(std::make_pair(0x188d2,"TANGUT COMPONENT-211"));
        data.insert(std::make_pair(0x188d3,"TANGUT COMPONENT-212"));
        data.insert(std::make_pair(0x188d4,"TANGUT COMPONENT-213"));
        data.insert(std::make_pair(0x188d5,"TANGUT COMPONENT-214"));
        data.insert(std::make_pair(0x188d6,"TANGUT COMPONENT-215"));
        data.insert(std::make_pair(0x188d7,"TANGUT COMPONENT-216"));
        data.insert(std::make_pair(0x188d8,"TANGUT COMPONENT-217"));
        data.insert(std::make_pair(0x188d9,"TANGUT COMPONENT-218"));
        data.insert(std::make_pair(0x188da,"TANGUT COMPONENT-219"));
        data.insert(std::make_pair(0x188db,"TANGUT COMPONENT-220"));
        data.insert(std::make_pair(0x188dc,"TANGUT COMPONENT-221"));
        data.insert(std::make_pair(0x188dd,"TANGUT COMPONENT-222"));
        data.insert(std::make_pair(0x188de,"TANGUT COMPONENT-223"));
        data.insert(std::make_pair(0x188df,"TANGUT COMPONENT-224"));
        data.insert(std::make_pair(0x188e0,"TANGUT COMPONENT-225"));
        data.insert(std::make_pair(0x188e1,"TANGUT COMPONENT-226"));
        data.insert(std::make_pair(0x188e2,"TANGUT COMPONENT-227"));
        data.insert(std::make_pair(0x188e3,"TANGUT COMPONENT-228"));
        data.insert(std::make_pair(0x188e4,"TANGUT COMPONENT-229"));
        data.insert(std::make_pair(0x188e5,"TANGUT COMPONENT-230"));
        data.insert(std::make_pair(0x188e6,"TANGUT COMPONENT-231"));
        data.insert(std::make_pair(0x188e7,"TANGUT COMPONENT-232"));
        data.insert(std::make_pair(0x188e8,"TANGUT COMPONENT-233"));
        data.insert(std::make_pair(0x188e9,"TANGUT COMPONENT-234"));
        data.insert(std::make_pair(0x188ea,"TANGUT COMPONENT-235"));
        data.insert(std::make_pair(0x188eb,"TANGUT COMPONENT-236"));
        data.insert(std::make_pair(0x188ec,"TANGUT COMPONENT-237"));
        data.insert(std::make_pair(0x188ed,"TANGUT COMPONENT-238"));
        data.insert(std::make_pair(0x188ee,"TANGUT COMPONENT-239"));
        data.insert(std::make_pair(0x188ef,"TANGUT COMPONENT-240"));
        data.insert(std::make_pair(0x188f0,"TANGUT COMPONENT-241"));
        data.insert(std::make_pair(0x188f1,"TANGUT COMPONENT-242"));
        data.insert(std::make_pair(0x188f2,"TANGUT COMPONENT-243"));
        data.insert(std::make_pair(0x188f3,"TANGUT COMPONENT-244"));
        data.insert(std::make_pair(0x188f4,"TANGUT COMPONENT-245"));
        data.insert(std::make_pair(0x188f5,"TANGUT COMPONENT-246"));
        data.insert(std::make_pair(0x188f6,"TANGUT COMPONENT-247"));
        data.insert(std::make_pair(0x188f7,"TANGUT COMPONENT-248"));
        data.insert(std::make_pair(0x188f8,"TANGUT COMPONENT-249"));
        data.insert(std::make_pair(0x188f9,"TANGUT COMPONENT-250"));
        data.insert(std::make_pair(0x188fa,"TANGUT COMPONENT-251"));
        data.insert(std::make_pair(0x188fb,"TANGUT COMPONENT-252"));
        data.insert(std::make_pair(0x188fc,"TANGUT COMPONENT-253"));
        data.insert(std::make_pair(0x188fd,"TANGUT COMPONENT-254"));
        data.insert(std::make_pair(0x188fe,"TANGUT COMPONENT-255"));
        data.insert(std::make_pair(0x188ff,"TANGUT COMPONENT-256"));
        data.insert(std::make_pair(0x18900,"TANGUT COMPONENT-257"));
        data.insert(std::make_pair(0x18901,"TANGUT COMPONENT-258"));
        data.insert(std::make_pair(0x18902,"TANGUT COMPONENT-259"));
        data.insert(std::make_pair(0x18903,"TANGUT COMPONENT-260"));
        data.insert(std::make_pair(0x18904,"TANGUT COMPONENT-261"));
        data.insert(std::make_pair(0x18905,"TANGUT COMPONENT-262"));
        data.insert(std::make_pair(0x18906,"TANGUT COMPONENT-263"));
        data.insert(std::make_pair(0x18907,"TANGUT COMPONENT-264"));
        data.insert(std::make_pair(0x18908,"TANGUT COMPONENT-265"));
        data.insert(std::make_pair(0x18909,"TANGUT COMPONENT-266"));
        data.insert(std::make_pair(0x1890a,"TANGUT COMPONENT-267"));
        data.insert(std::make_pair(0x1890b,"TANGUT COMPONENT-268"));
        data.insert(std::make_pair(0x1890c,"TANGUT COMPONENT-269"));
        data.insert(std::make_pair(0x1890d,"TANGUT COMPONENT-270"));
        data.insert(std::make_pair(0x1890e,"TANGUT COMPONENT-271"));
        data.insert(std::make_pair(0x1890f,"TANGUT COMPONENT-272"));
        data.insert(std::make_pair(0x18910,"TANGUT COMPONENT-273"));
        data.insert(std::make_pair(0x18911,"TANGUT COMPONENT-274"));
        data.insert(std::make_pair(0x18912,"TANGUT COMPONENT-275"));
        data.insert(std::make_pair(0x18913,"TANGUT COMPONENT-276"));
        data.insert(std::make_pair(0x18914,"TANGUT COMPONENT-277"));
        data.insert(std::make_pair(0x18915,"TANGUT COMPONENT-278"));
        data.insert(std::make_pair(0x18916,"TANGUT COMPONENT-279"));
        data.insert(std::make_pair(0x18917,"TANGUT COMPONENT-280"));
        data.insert(std::make_pair(0x18918,"TANGUT COMPONENT-281"));
        data.insert(std::make_pair(0x18919,"TANGUT COMPONENT-282"));
        data.insert(std::make_pair(0x1891a,"TANGUT COMPONENT-283"));
        data.insert(std::make_pair(0x1891b,"TANGUT COMPONENT-284"));
        data.insert(std::make_pair(0x1891c,"TANGUT COMPONENT-285"));
        data.insert(std::make_pair(0x1891d,"TANGUT COMPONENT-286"));
        data.insert(std::make_pair(0x1891e,"TANGUT COMPONENT-287"));
        data.insert(std::make_pair(0x1891f,"TANGUT COMPONENT-288"));
        data.insert(std::make_pair(0x18920,"TANGUT COMPONENT-289"));
        data.insert(std::make_pair(0x18921,"TANGUT COMPONENT-290"));
        data.insert(std::make_pair(0x18922,"TANGUT COMPONENT-291"));
        data.insert(std::make_pair(0x18923,"TANGUT COMPONENT-292"));
        data.insert(std::make_pair(0x18924,"TANGUT COMPONENT-293"));
        data.insert(std::make_pair(0x18925,"TANGUT COMPONENT-294"));
        data.insert(std::make_pair(0x18926,"TANGUT COMPONENT-295"));
        data.insert(std::make_pair(0x18927,"TANGUT COMPONENT-296"));
        data.insert(std::make_pair(0x18928,"TANGUT COMPONENT-297"));
        data.insert(std::make_pair(0x18929,"TANGUT COMPONENT-298"));
        data.insert(std::make_pair(0x1892a,"TANGUT COMPONENT-299"));
        data.insert(std::make_pair(0x1892b,"TANGUT COMPONENT-300"));
        data.insert(std::make_pair(0x1892c,"TANGUT COMPONENT-301"));
        data.insert(std::make_pair(0x1892d,"TANGUT COMPONENT-302"));
        data.insert(std::make_pair(0x1892e,"TANGUT COMPONENT-303"));
        data.insert(std::make_pair(0x1892f,"TANGUT COMPONENT-304"));
        data.insert(std::make_pair(0x18930,"TANGUT COMPONENT-305"));
        data.insert(std::make_pair(0x18931,"TANGUT COMPONENT-306"));
        data.insert(std::make_pair(0x18932,"TANGUT COMPONENT-307"));
        data.insert(std::make_pair(0x18933,"TANGUT COMPONENT-308"));
        data.insert(std::make_pair(0x18934,"TANGUT COMPONENT-309"));
        data.insert(std::make_pair(0x18935,"TANGUT COMPONENT-310"));
        data.insert(std::make_pair(0x18936,"TANGUT COMPONENT-311"));
        data.insert(std::make_pair(0x18937,"TANGUT COMPONENT-312"));
        data.insert(std::make_pair(0x18938,"TANGUT COMPONENT-313"));
        data.insert(std::make_pair(0x18939,"TANGUT COMPONENT-314"));
        data.insert(std::make_pair(0x1893a,"TANGUT COMPONENT-315"));
        data.insert(std::make_pair(0x1893b,"TANGUT COMPONENT-316"));
        data.insert(std::make_pair(0x1893c,"TANGUT COMPONENT-317"));
        data.insert(std::make_pair(0x1893d,"TANGUT COMPONENT-318"));
        data.insert(std::make_pair(0x1893e,"TANGUT COMPONENT-319"));
        data.insert(std::make_pair(0x1893f,"TANGUT COMPONENT-320"));
        data.insert(std::make_pair(0x18940,"TANGUT COMPONENT-321"));
        data.insert(std::make_pair(0x18941,"TANGUT COMPONENT-322"));
        data.insert(std::make_pair(0x18942,"TANGUT COMPONENT-323"));
        data.insert(std::make_pair(0x18943,"TANGUT COMPONENT-324"));
        data.insert(std::make_pair(0x18944,"TANGUT COMPONENT-325"));
        data.insert(std::make_pair(0x18945,"TANGUT COMPONENT-326"));
        data.insert(std::make_pair(0x18946,"TANGUT COMPONENT-327"));
        data.insert(std::make_pair(0x18947,"TANGUT COMPONENT-328"));
        data.insert(std::make_pair(0x18948,"TANGUT COMPONENT-329"));
        data.insert(std::make_pair(0x18949,"TANGUT COMPONENT-330"));
        data.insert(std::make_pair(0x1894a,"TANGUT COMPONENT-331"));
        data.insert(std::make_pair(0x1894b,"TANGUT COMPONENT-332"));
        data.insert(std::make_pair(0x1894c,"TANGUT COMPONENT-333"));
        data.insert(std::make_pair(0x1894d,"TANGUT COMPONENT-334"));
        data.insert(std::make_pair(0x1894e,"TANGUT COMPONENT-335"));
        data.insert(std::make_pair(0x1894f,"TANGUT COMPONENT-336"));
        data.insert(std::make_pair(0x18950,"TANGUT COMPONENT-337"));
        data.insert(std::make_pair(0x18951,"TANGUT COMPONENT-338"));
        data.insert(std::make_pair(0x18952,"TANGUT COMPONENT-339"));
        data.insert(std::make_pair(0x18953,"TANGUT COMPONENT-340"));
        data.insert(std::make_pair(0x18954,"TANGUT COMPONENT-341"));
        data.insert(std::make_pair(0x18955,"TANGUT COMPONENT-342"));
        data.insert(std::make_pair(0x18956,"TANGUT COMPONENT-343"));
        data.insert(std::make_pair(0x18957,"TANGUT COMPONENT-344"));
        data.insert(std::make_pair(0x18958,"TANGUT COMPONENT-345"));
        data.insert(std::make_pair(0x18959,"TANGUT COMPONENT-346"));
        data.insert(std::make_pair(0x1895a,"TANGUT COMPONENT-347"));
        data.insert(std::make_pair(0x1895b,"TANGUT COMPONENT-348"));
        data.insert(std::make_pair(0x1895c,"TANGUT COMPONENT-349"));
        data.insert(std::make_pair(0x1895d,"TANGUT COMPONENT-350"));
        data.insert(std::make_pair(0x1895e,"TANGUT COMPONENT-351"));
        data.insert(std::make_pair(0x1895f,"TANGUT COMPONENT-352"));
        data.insert(std::make_pair(0x18960,"TANGUT COMPONENT-353"));
        data.insert(std::make_pair(0x18961,"TANGUT COMPONENT-354"));
        data.insert(std::make_pair(0x18962,"TANGUT COMPONENT-355"));
        data.insert(std::make_pair(0x18963,"TANGUT COMPONENT-356"));
        data.insert(std::make_pair(0x18964,"TANGUT COMPONENT-357"));
        data.insert(std::make_pair(0x18965,"TANGUT COMPONENT-358"));
        data.insert(std::make_pair(0x18966,"TANGUT COMPONENT-359"));
        data.insert(std::make_pair(0x18967,"TANGUT COMPONENT-360"));
        data.insert(std::make_pair(0x18968,"TANGUT COMPONENT-361"));
        data.insert(std::make_pair(0x18969,"TANGUT COMPONENT-362"));
        data.insert(std::make_pair(0x1896a,"TANGUT COMPONENT-363"));
        data.insert(std::make_pair(0x1896b,"TANGUT COMPONENT-364"));
        data.insert(std::make_pair(0x1896c,"TANGUT COMPONENT-365"));
        data.insert(std::make_pair(0x1896d,"TANGUT COMPONENT-366"));
        data.insert(std::make_pair(0x1896e,"TANGUT COMPONENT-367"));
        data.insert(std::make_pair(0x1896f,"TANGUT COMPONENT-368"));
        data.insert(std::make_pair(0x18970,"TANGUT COMPONENT-369"));
        data.insert(std::make_pair(0x18971,"TANGUT COMPONENT-370"));
        data.insert(std::make_pair(0x18972,"TANGUT COMPONENT-371"));
        data.insert(std::make_pair(0x18973,"TANGUT COMPONENT-372"));
        data.insert(std::make_pair(0x18974,"TANGUT COMPONENT-373"));
        data.insert(std::make_pair(0x18975,"TANGUT COMPONENT-374"));
        data.insert(std::make_pair(0x18976,"TANGUT COMPONENT-375"));
        data.insert(std::make_pair(0x18977,"TANGUT COMPONENT-376"));
        data.insert(std::make_pair(0x18978,"TANGUT COMPONENT-377"));
        data.insert(std::make_pair(0x18979,"TANGUT COMPONENT-378"));
        data.insert(std::make_pair(0x1897a,"TANGUT COMPONENT-379"));
        data.insert(std::make_pair(0x1897b,"TANGUT COMPONENT-380"));
        data.insert(std::make_pair(0x1897c,"TANGUT COMPONENT-381"));
        data.insert(std::make_pair(0x1897d,"TANGUT COMPONENT-382"));
        data.insert(std::make_pair(0x1897e,"TANGUT COMPONENT-383"));
        data.insert(std::make_pair(0x1897f,"TANGUT COMPONENT-384"));
        data.insert(std::make_pair(0x18980,"TANGUT COMPONENT-385"));
        data.insert(std::make_pair(0x18981,"TANGUT COMPONENT-386"));
        data.insert(std::make_pair(0x18982,"TANGUT COMPONENT-387"));
        data.insert(std::make_pair(0x18983,"TANGUT COMPONENT-388"));
        data.insert(std::make_pair(0x18984,"TANGUT COMPONENT-389"));
        data.insert(std::make_pair(0x18985,"TANGUT COMPONENT-390"));
        data.insert(std::make_pair(0x18986,"TANGUT COMPONENT-391"));
        data.insert(std::make_pair(0x18987,"TANGUT COMPONENT-392"));
        data.insert(std::make_pair(0x18988,"TANGUT COMPONENT-393"));
        data.insert(std::make_pair(0x18989,"TANGUT COMPONENT-394"));
        data.insert(std::make_pair(0x1898a,"TANGUT COMPONENT-395"));
        data.insert(std::make_pair(0x1898b,"TANGUT COMPONENT-396"));
        data.insert(std::make_pair(0x1898c,"TANGUT COMPONENT-397"));
        data.insert(std::make_pair(0x1898d,"TANGUT COMPONENT-398"));
        data.insert(std::make_pair(0x1898e,"TANGUT COMPONENT-399"));
        data.insert(std::make_pair(0x1898f,"TANGUT COMPONENT-400"));
        data.insert(std::make_pair(0x18990,"TANGUT COMPONENT-401"));
        data.insert(std::make_pair(0x18991,"TANGUT COMPONENT-402"));
        data.insert(std::make_pair(0x18992,"TANGUT COMPONENT-403"));
        data.insert(std::make_pair(0x18993,"TANGUT COMPONENT-404"));
        data.insert(std::make_pair(0x18994,"TANGUT COMPONENT-405"));
        data.insert(std::make_pair(0x18995,"TANGUT COMPONENT-406"));
        data.insert(std::make_pair(0x18996,"TANGUT COMPONENT-407"));
        data.insert(std::make_pair(0x18997,"TANGUT COMPONENT-408"));
        data.insert(std::make_pair(0x18998,"TANGUT COMPONENT-409"));
        data.insert(std::make_pair(0x18999,"TANGUT COMPONENT-410"));
        data.insert(std::make_pair(0x1899a,"TANGUT COMPONENT-411"));
        data.insert(std::make_pair(0x1899b,"TANGUT COMPONENT-412"));
        data.insert(std::make_pair(0x1899c,"TANGUT COMPONENT-413"));
        data.insert(std::make_pair(0x1899d,"TANGUT COMPONENT-414"));
        data.insert(std::make_pair(0x1899e,"TANGUT COMPONENT-415"));
        data.insert(std::make_pair(0x1899f,"TANGUT COMPONENT-416"));
        data.insert(std::make_pair(0x189a0,"TANGUT COMPONENT-417"));
        data.insert(std::make_pair(0x189a1,"TANGUT COMPONENT-418"));
        data.insert(std::make_pair(0x189a2,"TANGUT COMPONENT-419"));
        data.insert(std::make_pair(0x189a3,"TANGUT COMPONENT-420"));
        data.insert(std::make_pair(0x189a4,"TANGUT COMPONENT-421"));
        data.insert(std::make_pair(0x189a5,"TANGUT COMPONENT-422"));
        data.insert(std::make_pair(0x189a6,"TANGUT COMPONENT-423"));
        data.insert(std::make_pair(0x189a7,"TANGUT COMPONENT-424"));
        data.insert(std::make_pair(0x189a8,"TANGUT COMPONENT-425"));
        data.insert(std::make_pair(0x189a9,"TANGUT COMPONENT-426"));
        data.insert(std::make_pair(0x189aa,"TANGUT COMPONENT-427"));
        data.insert(std::make_pair(0x189ab,"TANGUT COMPONENT-428"));
        data.insert(std::make_pair(0x189ac,"TANGUT COMPONENT-429"));
        data.insert(std::make_pair(0x189ad,"TANGUT COMPONENT-430"));
        data.insert(std::make_pair(0x189ae,"TANGUT COMPONENT-431"));
        data.insert(std::make_pair(0x189af,"TANGUT COMPONENT-432"));
        data.insert(std::make_pair(0x189b0,"TANGUT COMPONENT-433"));
        data.insert(std::make_pair(0x189b1,"TANGUT COMPONENT-434"));
        data.insert(std::make_pair(0x189b2,"TANGUT COMPONENT-435"));
        data.insert(std::make_pair(0x189b3,"TANGUT COMPONENT-436"));
        data.insert(std::make_pair(0x189b4,"TANGUT COMPONENT-437"));
        data.insert(std::make_pair(0x189b5,"TANGUT COMPONENT-438"));
        data.insert(std::make_pair(0x189b6,"TANGUT COMPONENT-439"));
        data.insert(std::make_pair(0x189b7,"TANGUT COMPONENT-440"));
        data.insert(std::make_pair(0x189b8,"TANGUT COMPONENT-441"));
        data.insert(std::make_pair(0x189b9,"TANGUT COMPONENT-442"));
        data.insert(std::make_pair(0x189ba,"TANGUT COMPONENT-443"));
        data.insert(std::make_pair(0x189bb,"TANGUT COMPONENT-444"));
        data.insert(std::make_pair(0x189bc,"TANGUT COMPONENT-445"));
        data.insert(std::make_pair(0x189bd,"TANGUT COMPONENT-446"));
        data.insert(std::make_pair(0x189be,"TANGUT COMPONENT-447"));
        data.insert(std::make_pair(0x189bf,"TANGUT COMPONENT-448"));
        data.insert(std::make_pair(0x189c0,"TANGUT COMPONENT-449"));
        data.insert(std::make_pair(0x189c1,"TANGUT COMPONENT-450"));
        data.insert(std::make_pair(0x189c2,"TANGUT COMPONENT-451"));
        data.insert(std::make_pair(0x189c3,"TANGUT COMPONENT-452"));
        data.insert(std::make_pair(0x189c4,"TANGUT COMPONENT-453"));
        data.insert(std::make_pair(0x189c5,"TANGUT COMPONENT-454"));
        data.insert(std::make_pair(0x189c6,"TANGUT COMPONENT-455"));
        data.insert(std::make_pair(0x189c7,"TANGUT COMPONENT-456"));
        data.insert(std::make_pair(0x189c8,"TANGUT COMPONENT-457"));
        data.insert(std::make_pair(0x189c9,"TANGUT COMPONENT-458"));
        data.insert(std::make_pair(0x189ca,"TANGUT COMPONENT-459"));
        data.insert(std::make_pair(0x189cb,"TANGUT COMPONENT-460"));
        data.insert(std::make_pair(0x189cc,"TANGUT COMPONENT-461"));
        data.insert(std::make_pair(0x189cd,"TANGUT COMPONENT-462"));
        data.insert(std::make_pair(0x189ce,"TANGUT COMPONENT-463"));
        data.insert(std::make_pair(0x189cf,"TANGUT COMPONENT-464"));
        data.insert(std::make_pair(0x189d0,"TANGUT COMPONENT-465"));
        data.insert(std::make_pair(0x189d1,"TANGUT COMPONENT-466"));
        data.insert(std::make_pair(0x189d2,"TANGUT COMPONENT-467"));
        data.insert(std::make_pair(0x189d3,"TANGUT COMPONENT-468"));
        data.insert(std::make_pair(0x189d4,"TANGUT COMPONENT-469"));
        data.insert(std::make_pair(0x189d5,"TANGUT COMPONENT-470"));
        data.insert(std::make_pair(0x189d6,"TANGUT COMPONENT-471"));
        data.insert(std::make_pair(0x189d7,"TANGUT COMPONENT-472"));
        data.insert(std::make_pair(0x189d8,"TANGUT COMPONENT-473"));
        data.insert(std::make_pair(0x189d9,"TANGUT COMPONENT-474"));
        data.insert(std::make_pair(0x189da,"TANGUT COMPONENT-475"));
        data.insert(std::make_pair(0x189db,"TANGUT COMPONENT-476"));
        data.insert(std::make_pair(0x189dc,"TANGUT COMPONENT-477"));
        data.insert(std::make_pair(0x189dd,"TANGUT COMPONENT-478"));
        data.insert(std::make_pair(0x189de,"TANGUT COMPONENT-479"));
        data.insert(std::make_pair(0x189df,"TANGUT COMPONENT-480"));
        data.insert(std::make_pair(0x189e0,"TANGUT COMPONENT-481"));
        data.insert(std::make_pair(0x189e1,"TANGUT COMPONENT-482"));
        data.insert(std::make_pair(0x189e2,"TANGUT COMPONENT-483"));
        data.insert(std::make_pair(0x189e3,"TANGUT COMPONENT-484"));
        data.insert(std::make_pair(0x189e4,"TANGUT COMPONENT-485"));
        data.insert(std::make_pair(0x189e5,"TANGUT COMPONENT-486"));
        data.insert(std::make_pair(0x189e6,"TANGUT COMPONENT-487"));
        data.insert(std::make_pair(0x189e7,"TANGUT COMPONENT-488"));
        data.insert(std::make_pair(0x189e8,"TANGUT COMPONENT-489"));
        data.insert(std::make_pair(0x189e9,"TANGUT COMPONENT-490"));
        data.insert(std::make_pair(0x189ea,"TANGUT COMPONENT-491"));
        data.insert(std::make_pair(0x189eb,"TANGUT COMPONENT-492"));
        data.insert(std::make_pair(0x189ec,"TANGUT COMPONENT-493"));
        data.insert(std::make_pair(0x189ed,"TANGUT COMPONENT-494"));
        data.insert(std::make_pair(0x189ee,"TANGUT COMPONENT-495"));
        data.insert(std::make_pair(0x189ef,"TANGUT COMPONENT-496"));
        data.insert(std::make_pair(0x189f0,"TANGUT COMPONENT-497"));
        data.insert(std::make_pair(0x189f1,"TANGUT COMPONENT-498"));
        data.insert(std::make_pair(0x189f2,"TANGUT COMPONENT-499"));
        data.insert(std::make_pair(0x189f3,"TANGUT COMPONENT-500"));
        data.insert(std::make_pair(0x189f4,"TANGUT COMPONENT-501"));
        data.insert(std::make_pair(0x189f5,"TANGUT COMPONENT-502"));
        data.insert(std::make_pair(0x189f6,"TANGUT COMPONENT-503"));
        data.insert(std::make_pair(0x189f7,"TANGUT COMPONENT-504"));
        data.insert(std::make_pair(0x189f8,"TANGUT COMPONENT-505"));
        data.insert(std::make_pair(0x189f9,"TANGUT COMPONENT-506"));
        data.insert(std::make_pair(0x189fa,"TANGUT COMPONENT-507"));
        data.insert(std::make_pair(0x189fb,"TANGUT COMPONENT-508"));
        data.insert(std::make_pair(0x189fc,"TANGUT COMPONENT-509"));
        data.insert(std::make_pair(0x189fd,"TANGUT COMPONENT-510"));
        data.insert(std::make_pair(0x189fe,"TANGUT COMPONENT-511"));
        data.insert(std::make_pair(0x189ff,"TANGUT COMPONENT-512"));
        data.insert(std::make_pair(0x18a00,"TANGUT COMPONENT-513"));
        data.insert(std::make_pair(0x18a01,"TANGUT COMPONENT-514"));
        data.insert(std::make_pair(0x18a02,"TANGUT COMPONENT-515"));
        data.insert(std::make_pair(0x18a03,"TANGUT COMPONENT-516"));
        data.insert(std::make_pair(0x18a04,"TANGUT COMPONENT-517"));
        data.insert(std::make_pair(0x18a05,"TANGUT COMPONENT-518"));
        data.insert(std::make_pair(0x18a06,"TANGUT COMPONENT-519"));
        data.insert(std::make_pair(0x18a07,"TANGUT COMPONENT-520"));
        data.insert(std::make_pair(0x18a08,"TANGUT COMPONENT-521"));
        data.insert(std::make_pair(0x18a09,"TANGUT COMPONENT-522"));
        data.insert(std::make_pair(0x18a0a,"TANGUT COMPONENT-523"));
        data.insert(std::make_pair(0x18a0b,"TANGUT COMPONENT-524"));
        data.insert(std::make_pair(0x18a0c,"TANGUT COMPONENT-525"));
        data.insert(std::make_pair(0x18a0d,"TANGUT COMPONENT-526"));
        data.insert(std::make_pair(0x18a0e,"TANGUT COMPONENT-527"));
        data.insert(std::make_pair(0x18a0f,"TANGUT COMPONENT-528"));
        data.insert(std::make_pair(0x18a10,"TANGUT COMPONENT-529"));
        data.insert(std::make_pair(0x18a11,"TANGUT COMPONENT-530"));
        data.insert(std::make_pair(0x18a12,"TANGUT COMPONENT-531"));
        data.insert(std::make_pair(0x18a13,"TANGUT COMPONENT-532"));
        data.insert(std::make_pair(0x18a14,"TANGUT COMPONENT-533"));
        data.insert(std::make_pair(0x18a15,"TANGUT COMPONENT-534"));
        data.insert(std::make_pair(0x18a16,"TANGUT COMPONENT-535"));
        data.insert(std::make_pair(0x18a17,"TANGUT COMPONENT-536"));
        data.insert(std::make_pair(0x18a18,"TANGUT COMPONENT-537"));
        data.insert(std::make_pair(0x18a19,"TANGUT COMPONENT-538"));
        data.insert(std::make_pair(0x18a1a,"TANGUT COMPONENT-539"));
        data.insert(std::make_pair(0x18a1b,"TANGUT COMPONENT-540"));
        data.insert(std::make_pair(0x18a1c,"TANGUT COMPONENT-541"));
        data.insert(std::make_pair(0x18a1d,"TANGUT COMPONENT-542"));
        data.insert(std::make_pair(0x18a1e,"TANGUT COMPONENT-543"));
        data.insert(std::make_pair(0x18a1f,"TANGUT COMPONENT-544"));
        data.insert(std::make_pair(0x18a20,"TANGUT COMPONENT-545"));
        data.insert(std::make_pair(0x18a21,"TANGUT COMPONENT-546"));
        data.insert(std::make_pair(0x18a22,"TANGUT COMPONENT-547"));
        data.insert(std::make_pair(0x18a23,"TANGUT COMPONENT-548"));
        data.insert(std::make_pair(0x18a24,"TANGUT COMPONENT-549"));
        data.insert(std::make_pair(0x18a25,"TANGUT COMPONENT-550"));
        data.insert(std::make_pair(0x18a26,"TANGUT COMPONENT-551"));
        data.insert(std::make_pair(0x18a27,"TANGUT COMPONENT-552"));
        data.insert(std::make_pair(0x18a28,"TANGUT COMPONENT-553"));
        data.insert(std::make_pair(0x18a29,"TANGUT COMPONENT-554"));
        data.insert(std::make_pair(0x18a2a,"TANGUT COMPONENT-555"));
        data.insert(std::make_pair(0x18a2b,"TANGUT COMPONENT-556"));
        data.insert(std::make_pair(0x18a2c,"TANGUT COMPONENT-557"));
        data.insert(std::make_pair(0x18a2d,"TANGUT COMPONENT-558"));
        data.insert(std::make_pair(0x18a2e,"TANGUT COMPONENT-559"));
        data.insert(std::make_pair(0x18a2f,"TANGUT COMPONENT-560"));
        data.insert(std::make_pair(0x18a30,"TANGUT COMPONENT-561"));
        data.insert(std::make_pair(0x18a31,"TANGUT COMPONENT-562"));
        data.insert(std::make_pair(0x18a32,"TANGUT COMPONENT-563"));
        data.insert(std::make_pair(0x18a33,"TANGUT COMPONENT-564"));
        data.insert(std::make_pair(0x18a34,"TANGUT COMPONENT-565"));
        data.insert(std::make_pair(0x18a35,"TANGUT COMPONENT-566"));
        data.insert(std::make_pair(0x18a36,"TANGUT COMPONENT-567"));
        data.insert(std::make_pair(0x18a37,"TANGUT COMPONENT-568"));
        data.insert(std::make_pair(0x18a38,"TANGUT COMPONENT-569"));
        data.insert(std::make_pair(0x18a39,"TANGUT COMPONENT-570"));
        data.insert(std::make_pair(0x18a3a,"TANGUT COMPONENT-571"));
        data.insert(std::make_pair(0x18a3b,"TANGUT COMPONENT-572"));
        data.insert(std::make_pair(0x18a3c,"TANGUT COMPONENT-573"));
        data.insert(std::make_pair(0x18a3d,"TANGUT COMPONENT-574"));
        data.insert(std::make_pair(0x18a3e,"TANGUT COMPONENT-575"));
        data.insert(std::make_pair(0x18a3f,"TANGUT COMPONENT-576"));
        data.insert(std::make_pair(0x18a40,"TANGUT COMPONENT-577"));
        data.insert(std::make_pair(0x18a41,"TANGUT COMPONENT-578"));
        data.insert(std::make_pair(0x18a42,"TANGUT COMPONENT-579"));
        data.insert(std::make_pair(0x18a43,"TANGUT COMPONENT-580"));
        data.insert(std::make_pair(0x18a44,"TANGUT COMPONENT-581"));
        data.insert(std::make_pair(0x18a45,"TANGUT COMPONENT-582"));
        data.insert(std::make_pair(0x18a46,"TANGUT COMPONENT-583"));
        data.insert(std::make_pair(0x18a47,"TANGUT COMPONENT-584"));
        data.insert(std::make_pair(0x18a48,"TANGUT COMPONENT-585"));
        data.insert(std::make_pair(0x18a49,"TANGUT COMPONENT-586"));
        data.insert(std::make_pair(0x18a4a,"TANGUT COMPONENT-587"));
        data.insert(std::make_pair(0x18a4b,"TANGUT COMPONENT-588"));
        data.insert(std::make_pair(0x18a4c,"TANGUT COMPONENT-589"));
        data.insert(std::make_pair(0x18a4d,"TANGUT COMPONENT-590"));
        data.insert(std::make_pair(0x18a4e,"TANGUT COMPONENT-591"));
        data.insert(std::make_pair(0x18a4f,"TANGUT COMPONENT-592"));
        data.insert(std::make_pair(0x18a50,"TANGUT COMPONENT-593"));
        data.insert(std::make_pair(0x18a51,"TANGUT COMPONENT-594"));
        data.insert(std::make_pair(0x18a52,"TANGUT COMPONENT-595"));
        data.insert(std::make_pair(0x18a53,"TANGUT COMPONENT-596"));
        data.insert(std::make_pair(0x18a54,"TANGUT COMPONENT-597"));
        data.insert(std::make_pair(0x18a55,"TANGUT COMPONENT-598"));
        data.insert(std::make_pair(0x18a56,"TANGUT COMPONENT-599"));
        data.insert(std::make_pair(0x18a57,"TANGUT COMPONENT-600"));
        data.insert(std::make_pair(0x18a58,"TANGUT COMPONENT-601"));
        data.insert(std::make_pair(0x18a59,"TANGUT COMPONENT-602"));
        data.insert(std::make_pair(0x18a5a,"TANGUT COMPONENT-603"));
        data.insert(std::make_pair(0x18a5b,"TANGUT COMPONENT-604"));
        data.insert(std::make_pair(0x18a5c,"TANGUT COMPONENT-605"));
        data.insert(std::make_pair(0x18a5d,"TANGUT COMPONENT-606"));
        data.insert(std::make_pair(0x18a5e,"TANGUT COMPONENT-607"));
        data.insert(std::make_pair(0x18a5f,"TANGUT COMPONENT-608"));
        data.insert(std::make_pair(0x18a60,"TANGUT COMPONENT-609"));
        data.insert(std::make_pair(0x18a61,"TANGUT COMPONENT-610"));
        data.insert(std::make_pair(0x18a62,"TANGUT COMPONENT-611"));
        data.insert(std::make_pair(0x18a63,"TANGUT COMPONENT-612"));
        data.insert(std::make_pair(0x18a64,"TANGUT COMPONENT-613"));
        data.insert(std::make_pair(0x18a65,"TANGUT COMPONENT-614"));
        data.insert(std::make_pair(0x18a66,"TANGUT COMPONENT-615"));
        data.insert(std::make_pair(0x18a67,"TANGUT COMPONENT-616"));
        data.insert(std::make_pair(0x18a68,"TANGUT COMPONENT-617"));
        data.insert(std::make_pair(0x18a69,"TANGUT COMPONENT-618"));
        data.insert(std::make_pair(0x18a6a,"TANGUT COMPONENT-619"));
        data.insert(std::make_pair(0x18a6b,"TANGUT COMPONENT-620"));
        data.insert(std::make_pair(0x18a6c,"TANGUT COMPONENT-621"));
        data.insert(std::make_pair(0x18a6d,"TANGUT COMPONENT-622"));
        data.insert(std::make_pair(0x18a6e,"TANGUT COMPONENT-623"));
        data.insert(std::make_pair(0x18a6f,"TANGUT COMPONENT-624"));
        data.insert(std::make_pair(0x18a70,"TANGUT COMPONENT-625"));
        data.insert(std::make_pair(0x18a71,"TANGUT COMPONENT-626"));
        data.insert(std::make_pair(0x18a72,"TANGUT COMPONENT-627"));
        data.insert(std::make_pair(0x18a73,"TANGUT COMPONENT-628"));
        data.insert(std::make_pair(0x18a74,"TANGUT COMPONENT-629"));
        data.insert(std::make_pair(0x18a75,"TANGUT COMPONENT-630"));
        data.insert(std::make_pair(0x18a76,"TANGUT COMPONENT-631"));
        data.insert(std::make_pair(0x18a77,"TANGUT COMPONENT-632"));
        data.insert(std::make_pair(0x18a78,"TANGUT COMPONENT-633"));
        data.insert(std::make_pair(0x18a79,"TANGUT COMPONENT-634"));
        data.insert(std::make_pair(0x18a7a,"TANGUT COMPONENT-635"));
        data.insert(std::make_pair(0x18a7b,"TANGUT COMPONENT-636"));
        data.insert(std::make_pair(0x18a7c,"TANGUT COMPONENT-637"));
        data.insert(std::make_pair(0x18a7d,"TANGUT COMPONENT-638"));
        data.insert(std::make_pair(0x18a7e,"TANGUT COMPONENT-639"));
        data.insert(std::make_pair(0x18a7f,"TANGUT COMPONENT-640"));
        data.insert(std::make_pair(0x18a80,"TANGUT COMPONENT-641"));
        data.insert(std::make_pair(0x18a81,"TANGUT COMPONENT-642"));
        data.insert(std::make_pair(0x18a82,"TANGUT COMPONENT-643"));
        data.insert(std::make_pair(0x18a83,"TANGUT COMPONENT-644"));
        data.insert(std::make_pair(0x18a84,"TANGUT COMPONENT-645"));
        data.insert(std::make_pair(0x18a85,"TANGUT COMPONENT-646"));
        data.insert(std::make_pair(0x18a86,"TANGUT COMPONENT-647"));
        data.insert(std::make_pair(0x18a87,"TANGUT COMPONENT-648"));
        data.insert(std::make_pair(0x18a88,"TANGUT COMPONENT-649"));
        data.insert(std::make_pair(0x18a89,"TANGUT COMPONENT-650"));
        data.insert(std::make_pair(0x18a8a,"TANGUT COMPONENT-651"));
        data.insert(std::make_pair(0x18a8b,"TANGUT COMPONENT-652"));
        data.insert(std::make_pair(0x18a8c,"TANGUT COMPONENT-653"));
        data.insert(std::make_pair(0x18a8d,"TANGUT COMPONENT-654"));
        data.insert(std::make_pair(0x18a8e,"TANGUT COMPONENT-655"));
        data.insert(std::make_pair(0x18a8f,"TANGUT COMPONENT-656"));
        data.insert(std::make_pair(0x18a90,"TANGUT COMPONENT-657"));
        data.insert(std::make_pair(0x18a91,"TANGUT COMPONENT-658"));
        data.insert(std::make_pair(0x18a92,"TANGUT COMPONENT-659"));
        data.insert(std::make_pair(0x18a93,"TANGUT COMPONENT-660"));
        data.insert(std::make_pair(0x18a94,"TANGUT COMPONENT-661"));
        data.insert(std::make_pair(0x18a95,"TANGUT COMPONENT-662"));
        data.insert(std::make_pair(0x18a96,"TANGUT COMPONENT-663"));
        data.insert(std::make_pair(0x18a97,"TANGUT COMPONENT-664"));
        data.insert(std::make_pair(0x18a98,"TANGUT COMPONENT-665"));
        data.insert(std::make_pair(0x18a99,"TANGUT COMPONENT-666"));
        data.insert(std::make_pair(0x18a9a,"TANGUT COMPONENT-667"));
        data.insert(std::make_pair(0x18a9b,"TANGUT COMPONENT-668"));
        data.insert(std::make_pair(0x18a9c,"TANGUT COMPONENT-669"));
        data.insert(std::make_pair(0x18a9d,"TANGUT COMPONENT-670"));
        data.insert(std::make_pair(0x18a9e,"TANGUT COMPONENT-671"));
        data.insert(std::make_pair(0x18a9f,"TANGUT COMPONENT-672"));
        data.insert(std::make_pair(0x18aa0,"TANGUT COMPONENT-673"));
        data.insert(std::make_pair(0x18aa1,"TANGUT COMPONENT-674"));
        data.insert(std::make_pair(0x18aa2,"TANGUT COMPONENT-675"));
        data.insert(std::make_pair(0x18aa3,"TANGUT COMPONENT-676"));
        data.insert(std::make_pair(0x18aa4,"TANGUT COMPONENT-677"));
        data.insert(std::make_pair(0x18aa5,"TANGUT COMPONENT-678"));
        data.insert(std::make_pair(0x18aa6,"TANGUT COMPONENT-679"));
        data.insert(std::make_pair(0x18aa7,"TANGUT COMPONENT-680"));
        data.insert(std::make_pair(0x18aa8,"TANGUT COMPONENT-681"));
        data.insert(std::make_pair(0x18aa9,"TANGUT COMPONENT-682"));
        data.insert(std::make_pair(0x18aaa,"TANGUT COMPONENT-683"));
        data.insert(std::make_pair(0x18aab,"TANGUT COMPONENT-684"));
        data.insert(std::make_pair(0x18aac,"TANGUT COMPONENT-685"));
        data.insert(std::make_pair(0x18aad,"TANGUT COMPONENT-686"));
        data.insert(std::make_pair(0x18aae,"TANGUT COMPONENT-687"));
        data.insert(std::make_pair(0x18aaf,"TANGUT COMPONENT-688"));
        data.insert(std::make_pair(0x18ab0,"TANGUT COMPONENT-689"));
        data.insert(std::make_pair(0x18ab1,"TANGUT COMPONENT-690"));
        data.insert(std::make_pair(0x18ab2,"TANGUT COMPONENT-691"));
        data.insert(std::make_pair(0x18ab3,"TANGUT COMPONENT-692"));
        data.insert(std::make_pair(0x18ab4,"TANGUT COMPONENT-693"));
        data.insert(std::make_pair(0x18ab5,"TANGUT COMPONENT-694"));
        data.insert(std::make_pair(0x18ab6,"TANGUT COMPONENT-695"));
        data.insert(std::make_pair(0x18ab7,"TANGUT COMPONENT-696"));
        data.insert(std::make_pair(0x18ab8,"TANGUT COMPONENT-697"));
        data.insert(std::make_pair(0x18ab9,"TANGUT COMPONENT-698"));
        data.insert(std::make_pair(0x18aba,"TANGUT COMPONENT-699"));
        data.insert(std::make_pair(0x18abb,"TANGUT COMPONENT-700"));
        data.insert(std::make_pair(0x18abc,"TANGUT COMPONENT-701"));
        data.insert(std::make_pair(0x18abd,"TANGUT COMPONENT-702"));
        data.insert(std::make_pair(0x18abe,"TANGUT COMPONENT-703"));
        data.insert(std::make_pair(0x18abf,"TANGUT COMPONENT-704"));
        data.insert(std::make_pair(0x18ac0,"TANGUT COMPONENT-705"));
        data.insert(std::make_pair(0x18ac1,"TANGUT COMPONENT-706"));
        data.insert(std::make_pair(0x18ac2,"TANGUT COMPONENT-707"));
        data.insert(std::make_pair(0x18ac3,"TANGUT COMPONENT-708"));
        data.insert(std::make_pair(0x18ac4,"TANGUT COMPONENT-709"));
        data.insert(std::make_pair(0x18ac5,"TANGUT COMPONENT-710"));
        data.insert(std::make_pair(0x18ac6,"TANGUT COMPONENT-711"));
        data.insert(std::make_pair(0x18ac7,"TANGUT COMPONENT-712"));
        data.insert(std::make_pair(0x18ac8,"TANGUT COMPONENT-713"));
        data.insert(std::make_pair(0x18ac9,"TANGUT COMPONENT-714"));
        data.insert(std::make_pair(0x18aca,"TANGUT COMPONENT-715"));
        data.insert(std::make_pair(0x18acb,"TANGUT COMPONENT-716"));
        data.insert(std::make_pair(0x18acc,"TANGUT COMPONENT-717"));
        data.insert(std::make_pair(0x18acd,"TANGUT COMPONENT-718"));
        data.insert(std::make_pair(0x18ace,"TANGUT COMPONENT-719"));
        data.insert(std::make_pair(0x18acf,"TANGUT COMPONENT-720"));
        data.insert(std::make_pair(0x18ad0,"TANGUT COMPONENT-721"));
        data.insert(std::make_pair(0x18ad1,"TANGUT COMPONENT-722"));
        data.insert(std::make_pair(0x18ad2,"TANGUT COMPONENT-723"));
        data.insert(std::make_pair(0x18ad3,"TANGUT COMPONENT-724"));
        data.insert(std::make_pair(0x18ad4,"TANGUT COMPONENT-725"));
        data.insert(std::make_pair(0x18ad5,"TANGUT COMPONENT-726"));
        data.insert(std::make_pair(0x18ad6,"TANGUT COMPONENT-727"));
        data.insert(std::make_pair(0x18ad7,"TANGUT COMPONENT-728"));
        data.insert(std::make_pair(0x18ad8,"TANGUT COMPONENT-729"));
        data.insert(std::make_pair(0x18ad9,"TANGUT COMPONENT-730"));
        data.insert(std::make_pair(0x18ada,"TANGUT COMPONENT-731"));
        data.insert(std::make_pair(0x18adb,"TANGUT COMPONENT-732"));
        data.insert(std::make_pair(0x18adc,"TANGUT COMPONENT-733"));
        data.insert(std::make_pair(0x18add,"TANGUT COMPONENT-734"));
        data.insert(std::make_pair(0x18ade,"TANGUT COMPONENT-735"));
        data.insert(std::make_pair(0x18adf,"TANGUT COMPONENT-736"));
        data.insert(std::make_pair(0x18ae0,"TANGUT COMPONENT-737"));
        data.insert(std::make_pair(0x18ae1,"TANGUT COMPONENT-738"));
        data.insert(std::make_pair(0x18ae2,"TANGUT COMPONENT-739"));
        data.insert(std::make_pair(0x18ae3,"TANGUT COMPONENT-740"));
        data.insert(std::make_pair(0x18ae4,"TANGUT COMPONENT-741"));
        data.insert(std::make_pair(0x18ae5,"TANGUT COMPONENT-742"));
        data.insert(std::make_pair(0x18ae6,"TANGUT COMPONENT-743"));
        data.insert(std::make_pair(0x18ae7,"TANGUT COMPONENT-744"));
        data.insert(std::make_pair(0x18ae8,"TANGUT COMPONENT-745"));
        data.insert(std::make_pair(0x18ae9,"TANGUT COMPONENT-746"));
        data.insert(std::make_pair(0x18aea,"TANGUT COMPONENT-747"));
        data.insert(std::make_pair(0x18aeb,"TANGUT COMPONENT-748"));
        data.insert(std::make_pair(0x18aec,"TANGUT COMPONENT-749"));
        data.insert(std::make_pair(0x18aed,"TANGUT COMPONENT-750"));
        data.insert(std::make_pair(0x18aee,"TANGUT COMPONENT-751"));
        data.insert(std::make_pair(0x18aef,"TANGUT COMPONENT-752"));
        data.insert(std::make_pair(0x18af0,"TANGUT COMPONENT-753"));
        data.insert(std::make_pair(0x18af1,"TANGUT COMPONENT-754"));
        data.insert(std::make_pair(0x18af2,"TANGUT COMPONENT-755"));
        data.insert(std::make_pair(0x18af3,"TANGUT COMPONENT-756"));
        data.insert(std::make_pair(0x18af4,"TANGUT COMPONENT-757"));
        data.insert(std::make_pair(0x18af5,"TANGUT COMPONENT-758"));
        data.insert(std::make_pair(0x18af6,"TANGUT COMPONENT-759"));
        data.insert(std::make_pair(0x18af7,"TANGUT COMPONENT-760"));
        data.insert(std::make_pair(0x18af8,"TANGUT COMPONENT-761"));
        data.insert(std::make_pair(0x18af9,"TANGUT COMPONENT-762"));
        data.insert(std::make_pair(0x18afa,"TANGUT COMPONENT-763"));
        data.insert(std::make_pair(0x18afb,"TANGUT COMPONENT-764"));
        data.insert(std::make_pair(0x18afc,"TANGUT COMPONENT-765"));
        data.insert(std::make_pair(0x18afd,"TANGUT COMPONENT-766"));
        data.insert(std::make_pair(0x18afe,"TANGUT COMPONENT-767"));
        data.insert(std::make_pair(0x18aff,"TANGUT COMPONENT-768"));
        data.insert(std::make_pair(0x18b00,"KHITAN SMALL SCRIPT CHARACTER-18B00"));
        data.insert(std::make_pair(0x18b01,"KHITAN SMALL SCRIPT CHARACTER-18B01"));
        data.insert(std::make_pair(0x18b02,"KHITAN SMALL SCRIPT CHARACTER-18B02"));
        data.insert(std::make_pair(0x18b03,"KHITAN SMALL SCRIPT CHARACTER-18B03"));
        data.insert(std::make_pair(0x18b04,"KHITAN SMALL SCRIPT CHARACTER-18B04"));
        data.insert(std::make_pair(0x18b05,"KHITAN SMALL SCRIPT CHARACTER-18B05"));
        data.insert(std::make_pair(0x18b06,"KHITAN SMALL SCRIPT CHARACTER-18B06"));
        data.insert(std::make_pair(0x18b07,"KHITAN SMALL SCRIPT CHARACTER-18B07"));
        data.insert(std::make_pair(0x18b08,"KHITAN SMALL SCRIPT CHARACTER-18B08"));
        data.insert(std::make_pair(0x18b09,"KHITAN SMALL SCRIPT CHARACTER-18B09"));
        data.insert(std::make_pair(0x18b0a,"KHITAN SMALL SCRIPT CHARACTER-18B0A"));
        data.insert(std::make_pair(0x18b0b,"KHITAN SMALL SCRIPT CHARACTER-18B0B"));
        data.insert(std::make_pair(0x18b0c,"KHITAN SMALL SCRIPT CHARACTER-18B0C"));
        data.insert(std::make_pair(0x18b0d,"KHITAN SMALL SCRIPT CHARACTER-18B0D"));
        data.insert(std::make_pair(0x18b0e,"KHITAN SMALL SCRIPT CHARACTER-18B0E"));
        data.insert(std::make_pair(0x18b0f,"KHITAN SMALL SCRIPT CHARACTER-18B0F"));
        data.insert(std::make_pair(0x18b10,"KHITAN SMALL SCRIPT CHARACTER-18B10"));
        data.insert(std::make_pair(0x18b11,"KHITAN SMALL SCRIPT CHARACTER-18B11"));
        data.insert(std::make_pair(0x18b12,"KHITAN SMALL SCRIPT CHARACTER-18B12"));
        data.insert(std::make_pair(0x18b13,"KHITAN SMALL SCRIPT CHARACTER-18B13"));
        data.insert(std::make_pair(0x18b14,"KHITAN SMALL SCRIPT CHARACTER-18B14"));
        data.insert(std::make_pair(0x18b15,"KHITAN SMALL SCRIPT CHARACTER-18B15"));
        data.insert(std::make_pair(0x18b16,"KHITAN SMALL SCRIPT CHARACTER-18B16"));
        data.insert(std::make_pair(0x18b17,"KHITAN SMALL SCRIPT CHARACTER-18B17"));
        data.insert(std::make_pair(0x18b18,"KHITAN SMALL SCRIPT CHARACTER-18B18"));
        data.insert(std::make_pair(0x18b19,"KHITAN SMALL SCRIPT CHARACTER-18B19"));
        data.insert(std::make_pair(0x18b1a,"KHITAN SMALL SCRIPT CHARACTER-18B1A"));
        data.insert(std::make_pair(0x18b1b,"KHITAN SMALL SCRIPT CHARACTER-18B1B"));
        data.insert(std::make_pair(0x18b1c,"KHITAN SMALL SCRIPT CHARACTER-18B1C"));
        data.insert(std::make_pair(0x18b1d,"KHITAN SMALL SCRIPT CHARACTER-18B1D"));
        data.insert(std::make_pair(0x18b1e,"KHITAN SMALL SCRIPT CHARACTER-18B1E"));
        data.insert(std::make_pair(0x18b1f,"KHITAN SMALL SCRIPT CHARACTER-18B1F"));
        data.insert(std::make_pair(0x18b20,"KHITAN SMALL SCRIPT CHARACTER-18B20"));
        data.insert(std::make_pair(0x18b21,"KHITAN SMALL SCRIPT CHARACTER-18B21"));
        data.insert(std::make_pair(0x18b22,"KHITAN SMALL SCRIPT CHARACTER-18B22"));
        data.insert(std::make_pair(0x18b23,"KHITAN SMALL SCRIPT CHARACTER-18B23"));
        data.insert(std::make_pair(0x18b24,"KHITAN SMALL SCRIPT CHARACTER-18B24"));
        data.insert(std::make_pair(0x18b25,"KHITAN SMALL SCRIPT CHARACTER-18B25"));
        data.insert(std::make_pair(0x18b26,"KHITAN SMALL SCRIPT CHARACTER-18B26"));
        data.insert(std::make_pair(0x18b27,"KHITAN SMALL SCRIPT CHARACTER-18B27"));
        data.insert(std::make_pair(0x18b28,"KHITAN SMALL SCRIPT CHARACTER-18B28"));
        data.insert(std::make_pair(0x18b29,"KHITAN SMALL SCRIPT CHARACTER-18B29"));
        data.insert(std::make_pair(0x18b2a,"KHITAN SMALL SCRIPT CHARACTER-18B2A"));
        data.insert(std::make_pair(0x18b2b,"KHITAN SMALL SCRIPT CHARACTER-18B2B"));
        data.insert(std::make_pair(0x18b2c,"KHITAN SMALL SCRIPT CHARACTER-18B2C"));
        data.insert(std::make_pair(0x18b2d,"KHITAN SMALL SCRIPT CHARACTER-18B2D"));
        data.insert(std::make_pair(0x18b2e,"KHITAN SMALL SCRIPT CHARACTER-18B2E"));
        data.insert(std::make_pair(0x18b2f,"KHITAN SMALL SCRIPT CHARACTER-18B2F"));
        data.insert(std::make_pair(0x18b30,"KHITAN SMALL SCRIPT CHARACTER-18B30"));
        data.insert(std::make_pair(0x18b31,"KHITAN SMALL SCRIPT CHARACTER-18B31"));
        data.insert(std::make_pair(0x18b32,"KHITAN SMALL SCRIPT CHARACTER-18B32"));
        data.insert(std::make_pair(0x18b33,"KHITAN SMALL SCRIPT CHARACTER-18B33"));
        data.insert(std::make_pair(0x18b34,"KHITAN SMALL SCRIPT CHARACTER-18B34"));
        data.insert(std::make_pair(0x18b35,"KHITAN SMALL SCRIPT CHARACTER-18B35"));
        data.insert(std::make_pair(0x18b36,"KHITAN SMALL SCRIPT CHARACTER-18B36"));
        data.insert(std::make_pair(0x18b37,"KHITAN SMALL SCRIPT CHARACTER-18B37"));
        data.insert(std::make_pair(0x18b38,"KHITAN SMALL SCRIPT CHARACTER-18B38"));
        data.insert(std::make_pair(0x18b39,"KHITAN SMALL SCRIPT CHARACTER-18B39"));
        data.insert(std::make_pair(0x18b3a,"KHITAN SMALL SCRIPT CHARACTER-18B3A"));
        data.insert(std::make_pair(0x18b3b,"KHITAN SMALL SCRIPT CHARACTER-18B3B"));
        data.insert(std::make_pair(0x18b3c,"KHITAN SMALL SCRIPT CHARACTER-18B3C"));
        data.insert(std::make_pair(0x18b3d,"KHITAN SMALL SCRIPT CHARACTER-18B3D"));
        data.insert(std::make_pair(0x18b3e,"KHITAN SMALL SCRIPT CHARACTER-18B3E"));
        data.insert(std::make_pair(0x18b3f,"KHITAN SMALL SCRIPT CHARACTER-18B3F"));
        data.insert(std::make_pair(0x18b40,"KHITAN SMALL SCRIPT CHARACTER-18B40"));
        data.insert(std::make_pair(0x18b41,"KHITAN SMALL SCRIPT CHARACTER-18B41"));
        data.insert(std::make_pair(0x18b42,"KHITAN SMALL SCRIPT CHARACTER-18B42"));
        data.insert(std::make_pair(0x18b43,"KHITAN SMALL SCRIPT CHARACTER-18B43"));
        data.insert(std::make_pair(0x18b44,"KHITAN SMALL SCRIPT CHARACTER-18B44"));
        data.insert(std::make_pair(0x18b45,"KHITAN SMALL SCRIPT CHARACTER-18B45"));
        data.insert(std::make_pair(0x18b46,"KHITAN SMALL SCRIPT CHARACTER-18B46"));
        data.insert(std::make_pair(0x18b47,"KHITAN SMALL SCRIPT CHARACTER-18B47"));
        data.insert(std::make_pair(0x18b48,"KHITAN SMALL SCRIPT CHARACTER-18B48"));
        data.insert(std::make_pair(0x18b49,"KHITAN SMALL SCRIPT CHARACTER-18B49"));
        data.insert(std::make_pair(0x18b4a,"KHITAN SMALL SCRIPT CHARACTER-18B4A"));
        data.insert(std::make_pair(0x18b4b,"KHITAN SMALL SCRIPT CHARACTER-18B4B"));
        data.insert(std::make_pair(0x18b4c,"KHITAN SMALL SCRIPT CHARACTER-18B4C"));
        data.insert(std::make_pair(0x18b4d,"KHITAN SMALL SCRIPT CHARACTER-18B4D"));
        data.insert(std::make_pair(0x18b4e,"KHITAN SMALL SCRIPT CHARACTER-18B4E"));
        data.insert(std::make_pair(0x18b4f,"KHITAN SMALL SCRIPT CHARACTER-18B4F"));
        data.insert(std::make_pair(0x18b50,"KHITAN SMALL SCRIPT CHARACTER-18B50"));
        data.insert(std::make_pair(0x18b51,"KHITAN SMALL SCRIPT CHARACTER-18B51"));
        data.insert(std::make_pair(0x18b52,"KHITAN SMALL SCRIPT CHARACTER-18B52"));
        data.insert(std::make_pair(0x18b53,"KHITAN SMALL SCRIPT CHARACTER-18B53"));
        data.insert(std::make_pair(0x18b54,"KHITAN SMALL SCRIPT CHARACTER-18B54"));
        data.insert(std::make_pair(0x18b55,"KHITAN SMALL SCRIPT CHARACTER-18B55"));
        data.insert(std::make_pair(0x18b56,"KHITAN SMALL SCRIPT CHARACTER-18B56"));
        data.insert(std::make_pair(0x18b57,"KHITAN SMALL SCRIPT CHARACTER-18B57"));
        data.insert(std::make_pair(0x18b58,"KHITAN SMALL SCRIPT CHARACTER-18B58"));
        data.insert(std::make_pair(0x18b59,"KHITAN SMALL SCRIPT CHARACTER-18B59"));
        data.insert(std::make_pair(0x18b5a,"KHITAN SMALL SCRIPT CHARACTER-18B5A"));
        data.insert(std::make_pair(0x18b5b,"KHITAN SMALL SCRIPT CHARACTER-18B5B"));
        data.insert(std::make_pair(0x18b5c,"KHITAN SMALL SCRIPT CHARACTER-18B5C"));
        data.insert(std::make_pair(0x18b5d,"KHITAN SMALL SCRIPT CHARACTER-18B5D"));
        data.insert(std::make_pair(0x18b5e,"KHITAN SMALL SCRIPT CHARACTER-18B5E"));
        data.insert(std::make_pair(0x18b5f,"KHITAN SMALL SCRIPT CHARACTER-18B5F"));
        data.insert(std::make_pair(0x18b60,"KHITAN SMALL SCRIPT CHARACTER-18B60"));
        data.insert(std::make_pair(0x18b61,"KHITAN SMALL SCRIPT CHARACTER-18B61"));
        data.insert(std::make_pair(0x18b62,"KHITAN SMALL SCRIPT CHARACTER-18B62"));
        data.insert(std::make_pair(0x18b63,"KHITAN SMALL SCRIPT CHARACTER-18B63"));
        data.insert(std::make_pair(0x18b64,"KHITAN SMALL SCRIPT CHARACTER-18B64"));
        data.insert(std::make_pair(0x18b65,"KHITAN SMALL SCRIPT CHARACTER-18B65"));
        data.insert(std::make_pair(0x18b66,"KHITAN SMALL SCRIPT CHARACTER-18B66"));
        data.insert(std::make_pair(0x18b67,"KHITAN SMALL SCRIPT CHARACTER-18B67"));
        data.insert(std::make_pair(0x18b68,"KHITAN SMALL SCRIPT CHARACTER-18B68"));
        data.insert(std::make_pair(0x18b69,"KHITAN SMALL SCRIPT CHARACTER-18B69"));
        data.insert(std::make_pair(0x18b6a,"KHITAN SMALL SCRIPT CHARACTER-18B6A"));
        data.insert(std::make_pair(0x18b6b,"KHITAN SMALL SCRIPT CHARACTER-18B6B"));
        data.insert(std::make_pair(0x18b6c,"KHITAN SMALL SCRIPT CHARACTER-18B6C"));
        data.insert(std::make_pair(0x18b6d,"KHITAN SMALL SCRIPT CHARACTER-18B6D"));
        data.insert(std::make_pair(0x18b6e,"KHITAN SMALL SCRIPT CHARACTER-18B6E"));
        data.insert(std::make_pair(0x18b6f,"KHITAN SMALL SCRIPT CHARACTER-18B6F"));
        data.insert(std::make_pair(0x18b70,"KHITAN SMALL SCRIPT CHARACTER-18B70"));
        data.insert(std::make_pair(0x18b71,"KHITAN SMALL SCRIPT CHARACTER-18B71"));
        data.insert(std::make_pair(0x18b72,"KHITAN SMALL SCRIPT CHARACTER-18B72"));
        data.insert(std::make_pair(0x18b73,"KHITAN SMALL SCRIPT CHARACTER-18B73"));
        data.insert(std::make_pair(0x18b74,"KHITAN SMALL SCRIPT CHARACTER-18B74"));
        data.insert(std::make_pair(0x18b75,"KHITAN SMALL SCRIPT CHARACTER-18B75"));
        data.insert(std::make_pair(0x18b76,"KHITAN SMALL SCRIPT CHARACTER-18B76"));
        data.insert(std::make_pair(0x18b77,"KHITAN SMALL SCRIPT CHARACTER-18B77"));
        data.insert(std::make_pair(0x18b78,"KHITAN SMALL SCRIPT CHARACTER-18B78"));
        data.insert(std::make_pair(0x18b79,"KHITAN SMALL SCRIPT CHARACTER-18B79"));
        data.insert(std::make_pair(0x18b7a,"KHITAN SMALL SCRIPT CHARACTER-18B7A"));
        data.insert(std::make_pair(0x18b7b,"KHITAN SMALL SCRIPT CHARACTER-18B7B"));
        data.insert(std::make_pair(0x18b7c,"KHITAN SMALL SCRIPT CHARACTER-18B7C"));
        data.insert(std::make_pair(0x18b7d,"KHITAN SMALL SCRIPT CHARACTER-18B7D"));
        data.insert(std::make_pair(0x18b7e,"KHITAN SMALL SCRIPT CHARACTER-18B7E"));
        data.insert(std::make_pair(0x18b7f,"KHITAN SMALL SCRIPT CHARACTER-18B7F"));
        data.insert(std::make_pair(0x18b80,"KHITAN SMALL SCRIPT CHARACTER-18B80"));
        data.insert(std::make_pair(0x18b81,"KHITAN SMALL SCRIPT CHARACTER-18B81"));
        data.insert(std::make_pair(0x18b82,"KHITAN SMALL SCRIPT CHARACTER-18B82"));
        data.insert(std::make_pair(0x18b83,"KHITAN SMALL SCRIPT CHARACTER-18B83"));
        data.insert(std::make_pair(0x18b84,"KHITAN SMALL SCRIPT CHARACTER-18B84"));
        data.insert(std::make_pair(0x18b85,"KHITAN SMALL SCRIPT CHARACTER-18B85"));
        data.insert(std::make_pair(0x18b86,"KHITAN SMALL SCRIPT CHARACTER-18B86"));
        data.insert(std::make_pair(0x18b87,"KHITAN SMALL SCRIPT CHARACTER-18B87"));
        data.insert(std::make_pair(0x18b88,"KHITAN SMALL SCRIPT CHARACTER-18B88"));
        data.insert(std::make_pair(0x18b89,"KHITAN SMALL SCRIPT CHARACTER-18B89"));
        data.insert(std::make_pair(0x18b8a,"KHITAN SMALL SCRIPT CHARACTER-18B8A"));
        data.insert(std::make_pair(0x18b8b,"KHITAN SMALL SCRIPT CHARACTER-18B8B"));
        data.insert(std::make_pair(0x18b8c,"KHITAN SMALL SCRIPT CHARACTER-18B8C"));
        data.insert(std::make_pair(0x18b8d,"KHITAN SMALL SCRIPT CHARACTER-18B8D"));
        data.insert(std::make_pair(0x18b8e,"KHITAN SMALL SCRIPT CHARACTER-18B8E"));
        data.insert(std::make_pair(0x18b8f,"KHITAN SMALL SCRIPT CHARACTER-18B8F"));
        data.insert(std::make_pair(0x18b90,"KHITAN SMALL SCRIPT CHARACTER-18B90"));
        data.insert(std::make_pair(0x18b91,"KHITAN SMALL SCRIPT CHARACTER-18B91"));
        data.insert(std::make_pair(0x18b92,"KHITAN SMALL SCRIPT CHARACTER-18B92"));
        data.insert(std::make_pair(0x18b93,"KHITAN SMALL SCRIPT CHARACTER-18B93"));
        data.insert(std::make_pair(0x18b94,"KHITAN SMALL SCRIPT CHARACTER-18B94"));
        data.insert(std::make_pair(0x18b95,"KHITAN SMALL SCRIPT CHARACTER-18B95"));
        data.insert(std::make_pair(0x18b96,"KHITAN SMALL SCRIPT CHARACTER-18B96"));
        data.insert(std::make_pair(0x18b97,"KHITAN SMALL SCRIPT CHARACTER-18B97"));
        data.insert(std::make_pair(0x18b98,"KHITAN SMALL SCRIPT CHARACTER-18B98"));
        data.insert(std::make_pair(0x18b99,"KHITAN SMALL SCRIPT CHARACTER-18B99"));
        data.insert(std::make_pair(0x18b9a,"KHITAN SMALL SCRIPT CHARACTER-18B9A"));
        data.insert(std::make_pair(0x18b9b,"KHITAN SMALL SCRIPT CHARACTER-18B9B"));
        data.insert(std::make_pair(0x18b9c,"KHITAN SMALL SCRIPT CHARACTER-18B9C"));
        data.insert(std::make_pair(0x18b9d,"KHITAN SMALL SCRIPT CHARACTER-18B9D"));
        data.insert(std::make_pair(0x18b9e,"KHITAN SMALL SCRIPT CHARACTER-18B9E"));
        data.insert(std::make_pair(0x18b9f,"KHITAN SMALL SCRIPT CHARACTER-18B9F"));
        data.insert(std::make_pair(0x18ba0,"KHITAN SMALL SCRIPT CHARACTER-18BA0"));
        data.insert(std::make_pair(0x18ba1,"KHITAN SMALL SCRIPT CHARACTER-18BA1"));
        data.insert(std::make_pair(0x18ba2,"KHITAN SMALL SCRIPT CHARACTER-18BA2"));
        data.insert(std::make_pair(0x18ba3,"KHITAN SMALL SCRIPT CHARACTER-18BA3"));
        data.insert(std::make_pair(0x18ba4,"KHITAN SMALL SCRIPT CHARACTER-18BA4"));
        data.insert(std::make_pair(0x18ba5,"KHITAN SMALL SCRIPT CHARACTER-18BA5"));
        data.insert(std::make_pair(0x18ba6,"KHITAN SMALL SCRIPT CHARACTER-18BA6"));
        data.insert(std::make_pair(0x18ba7,"KHITAN SMALL SCRIPT CHARACTER-18BA7"));
        data.insert(std::make_pair(0x18ba8,"KHITAN SMALL SCRIPT CHARACTER-18BA8"));
        data.insert(std::make_pair(0x18ba9,"KHITAN SMALL SCRIPT CHARACTER-18BA9"));
        data.insert(std::make_pair(0x18baa,"KHITAN SMALL SCRIPT CHARACTER-18BAA"));
        data.insert(std::make_pair(0x18bab,"KHITAN SMALL SCRIPT CHARACTER-18BAB"));
        data.insert(std::make_pair(0x18bac,"KHITAN SMALL SCRIPT CHARACTER-18BAC"));
        data.insert(std::make_pair(0x18bad,"KHITAN SMALL SCRIPT CHARACTER-18BAD"));
        data.insert(std::make_pair(0x18bae,"KHITAN SMALL SCRIPT CHARACTER-18BAE"));
        data.insert(std::make_pair(0x18baf,"KHITAN SMALL SCRIPT CHARACTER-18BAF"));
        data.insert(std::make_pair(0x18bb0,"KHITAN SMALL SCRIPT CHARACTER-18BB0"));
        data.insert(std::make_pair(0x18bb1,"KHITAN SMALL SCRIPT CHARACTER-18BB1"));
        data.insert(std::make_pair(0x18bb2,"KHITAN SMALL SCRIPT CHARACTER-18BB2"));
        data.insert(std::make_pair(0x18bb3,"KHITAN SMALL SCRIPT CHARACTER-18BB3"));
        data.insert(std::make_pair(0x18bb4,"KHITAN SMALL SCRIPT CHARACTER-18BB4"));
        data.insert(std::make_pair(0x18bb5,"KHITAN SMALL SCRIPT CHARACTER-18BB5"));
        data.insert(std::make_pair(0x18bb6,"KHITAN SMALL SCRIPT CHARACTER-18BB6"));
        data.insert(std::make_pair(0x18bb7,"KHITAN SMALL SCRIPT CHARACTER-18BB7"));
        data.insert(std::make_pair(0x18bb8,"KHITAN SMALL SCRIPT CHARACTER-18BB8"));
        data.insert(std::make_pair(0x18bb9,"KHITAN SMALL SCRIPT CHARACTER-18BB9"));
        data.insert(std::make_pair(0x18bba,"KHITAN SMALL SCRIPT CHARACTER-18BBA"));
        data.insert(std::make_pair(0x18bbb,"KHITAN SMALL SCRIPT CHARACTER-18BBB"));
        data.insert(std::make_pair(0x18bbc,"KHITAN SMALL SCRIPT CHARACTER-18BBC"));
        data.insert(std::make_pair(0x18bbd,"KHITAN SMALL SCRIPT CHARACTER-18BBD"));
        data.insert(std::make_pair(0x18bbe,"KHITAN SMALL SCRIPT CHARACTER-18BBE"));
        data.insert(std::make_pair(0x18bbf,"KHITAN SMALL SCRIPT CHARACTER-18BBF"));
        data.insert(std::make_pair(0x18bc0,"KHITAN SMALL SCRIPT CHARACTER-18BC0"));
        data.insert(std::make_pair(0x18bc1,"KHITAN SMALL SCRIPT CHARACTER-18BC1"));
        data.insert(std::make_pair(0x18bc2,"KHITAN SMALL SCRIPT CHARACTER-18BC2"));
        data.insert(std::make_pair(0x18bc3,"KHITAN SMALL SCRIPT CHARACTER-18BC3"));
        data.insert(std::make_pair(0x18bc4,"KHITAN SMALL SCRIPT CHARACTER-18BC4"));
        data.insert(std::make_pair(0x18bc5,"KHITAN SMALL SCRIPT CHARACTER-18BC5"));
        data.insert(std::make_pair(0x18bc6,"KHITAN SMALL SCRIPT CHARACTER-18BC6"));
        data.insert(std::make_pair(0x18bc7,"KHITAN SMALL SCRIPT CHARACTER-18BC7"));
        data.insert(std::make_pair(0x18bc8,"KHITAN SMALL SCRIPT CHARACTER-18BC8"));
        data.insert(std::make_pair(0x18bc9,"KHITAN SMALL SCRIPT CHARACTER-18BC9"));
        data.insert(std::make_pair(0x18bca,"KHITAN SMALL SCRIPT CHARACTER-18BCA"));
        data.insert(std::make_pair(0x18bcb,"KHITAN SMALL SCRIPT CHARACTER-18BCB"));
        data.insert(std::make_pair(0x18bcc,"KHITAN SMALL SCRIPT CHARACTER-18BCC"));
        data.insert(std::make_pair(0x18bcd,"KHITAN SMALL SCRIPT CHARACTER-18BCD"));
        data.insert(std::make_pair(0x18bce,"KHITAN SMALL SCRIPT CHARACTER-18BCE"));
        data.insert(std::make_pair(0x18bcf,"KHITAN SMALL SCRIPT CHARACTER-18BCF"));
        data.insert(std::make_pair(0x18bd0,"KHITAN SMALL SCRIPT CHARACTER-18BD0"));
        data.insert(std::make_pair(0x18bd1,"KHITAN SMALL SCRIPT CHARACTER-18BD1"));
        data.insert(std::make_pair(0x18bd2,"KHITAN SMALL SCRIPT CHARACTER-18BD2"));
        data.insert(std::make_pair(0x18bd3,"KHITAN SMALL SCRIPT CHARACTER-18BD3"));
        data.insert(std::make_pair(0x18bd4,"KHITAN SMALL SCRIPT CHARACTER-18BD4"));
        data.insert(std::make_pair(0x18bd5,"KHITAN SMALL SCRIPT CHARACTER-18BD5"));
        data.insert(std::make_pair(0x18bd6,"KHITAN SMALL SCRIPT CHARACTER-18BD6"));
        data.insert(std::make_pair(0x18bd7,"KHITAN SMALL SCRIPT CHARACTER-18BD7"));
        data.insert(std::make_pair(0x18bd8,"KHITAN SMALL SCRIPT CHARACTER-18BD8"));
        data.insert(std::make_pair(0x18bd9,"KHITAN SMALL SCRIPT CHARACTER-18BD9"));
        data.insert(std::make_pair(0x18bda,"KHITAN SMALL SCRIPT CHARACTER-18BDA"));
        data.insert(std::make_pair(0x18bdb,"KHITAN SMALL SCRIPT CHARACTER-18BDB"));
        data.insert(std::make_pair(0x18bdc,"KHITAN SMALL SCRIPT CHARACTER-18BDC"));
        data.insert(std::make_pair(0x18bdd,"KHITAN SMALL SCRIPT CHARACTER-18BDD"));
        data.insert(std::make_pair(0x18bde,"KHITAN SMALL SCRIPT CHARACTER-18BDE"));
        data.insert(std::make_pair(0x18bdf,"KHITAN SMALL SCRIPT CHARACTER-18BDF"));
        data.insert(std::make_pair(0x18be0,"KHITAN SMALL SCRIPT CHARACTER-18BE0"));
        data.insert(std::make_pair(0x18be1,"KHITAN SMALL SCRIPT CHARACTER-18BE1"));
        data.insert(std::make_pair(0x18be2,"KHITAN SMALL SCRIPT CHARACTER-18BE2"));
        data.insert(std::make_pair(0x18be3,"KHITAN SMALL SCRIPT CHARACTER-18BE3"));
        data.insert(std::make_pair(0x18be4,"KHITAN SMALL SCRIPT CHARACTER-18BE4"));
        data.insert(std::make_pair(0x18be5,"KHITAN SMALL SCRIPT CHARACTER-18BE5"));
        data.insert(std::make_pair(0x18be6,"KHITAN SMALL SCRIPT CHARACTER-18BE6"));
        data.insert(std::make_pair(0x18be7,"KHITAN SMALL SCRIPT CHARACTER-18BE7"));
        data.insert(std::make_pair(0x18be8,"KHITAN SMALL SCRIPT CHARACTER-18BE8"));
        data.insert(std::make_pair(0x18be9,"KHITAN SMALL SCRIPT CHARACTER-18BE9"));
        data.insert(std::make_pair(0x18bea,"KHITAN SMALL SCRIPT CHARACTER-18BEA"));
        data.insert(std::make_pair(0x18beb,"KHITAN SMALL SCRIPT CHARACTER-18BEB"));
        data.insert(std::make_pair(0x18bec,"KHITAN SMALL SCRIPT CHARACTER-18BEC"));
        data.insert(std::make_pair(0x18bed,"KHITAN SMALL SCRIPT CHARACTER-18BED"));
        data.insert(std::make_pair(0x18bee,"KHITAN SMALL SCRIPT CHARACTER-18BEE"));
        data.insert(std::make_pair(0x18bef,"KHITAN SMALL SCRIPT CHARACTER-18BEF"));
        data.insert(std::make_pair(0x18bf0,"KHITAN SMALL SCRIPT CHARACTER-18BF0"));
        data.insert(std::make_pair(0x18bf1,"KHITAN SMALL SCRIPT CHARACTER-18BF1"));
        data.insert(std::make_pair(0x18bf2,"KHITAN SMALL SCRIPT CHARACTER-18BF2"));
        data.insert(std::make_pair(0x18bf3,"KHITAN SMALL SCRIPT CHARACTER-18BF3"));
        data.insert(std::make_pair(0x18bf4,"KHITAN SMALL SCRIPT CHARACTER-18BF4"));
        data.insert(std::make_pair(0x18bf5,"KHITAN SMALL SCRIPT CHARACTER-18BF5"));
        data.insert(std::make_pair(0x18bf6,"KHITAN SMALL SCRIPT CHARACTER-18BF6"));
        data.insert(std::make_pair(0x18bf7,"KHITAN SMALL SCRIPT CHARACTER-18BF7"));
        data.insert(std::make_pair(0x18bf8,"KHITAN SMALL SCRIPT CHARACTER-18BF8"));
        data.insert(std::make_pair(0x18bf9,"KHITAN SMALL SCRIPT CHARACTER-18BF9"));
        data.insert(std::make_pair(0x18bfa,"KHITAN SMALL SCRIPT CHARACTER-18BFA"));
        data.insert(std::make_pair(0x18bfb,"KHITAN SMALL SCRIPT CHARACTER-18BFB"));
        data.insert(std::make_pair(0x18bfc,"KHITAN SMALL SCRIPT CHARACTER-18BFC"));
        data.insert(std::make_pair(0x18bfd,"KHITAN SMALL SCRIPT CHARACTER-18BFD"));
        data.insert(std::make_pair(0x18bfe,"KHITAN SMALL SCRIPT CHARACTER-18BFE"));
        data.insert(std::make_pair(0x18bff,"KHITAN SMALL SCRIPT CHARACTER-18BFF"));
        data.insert(std::make_pair(0x18c00,"KHITAN SMALL SCRIPT CHARACTER-18C00"));
        data.insert(std::make_pair(0x18c01,"KHITAN SMALL SCRIPT CHARACTER-18C01"));
        data.insert(std::make_pair(0x18c02,"KHITAN SMALL SCRIPT CHARACTER-18C02"));
        data.insert(std::make_pair(0x18c03,"KHITAN SMALL SCRIPT CHARACTER-18C03"));
        data.insert(std::make_pair(0x18c04,"KHITAN SMALL SCRIPT CHARACTER-18C04"));
        data.insert(std::make_pair(0x18c05,"KHITAN SMALL SCRIPT CHARACTER-18C05"));
        data.insert(std::make_pair(0x18c06,"KHITAN SMALL SCRIPT CHARACTER-18C06"));
        data.insert(std::make_pair(0x18c07,"KHITAN SMALL SCRIPT CHARACTER-18C07"));
        data.insert(std::make_pair(0x18c08,"KHITAN SMALL SCRIPT CHARACTER-18C08"));
        data.insert(std::make_pair(0x18c09,"KHITAN SMALL SCRIPT CHARACTER-18C09"));
        data.insert(std::make_pair(0x18c0a,"KHITAN SMALL SCRIPT CHARACTER-18C0A"));
        data.insert(std::make_pair(0x18c0b,"KHITAN SMALL SCRIPT CHARACTER-18C0B"));
        data.insert(std::make_pair(0x18c0c,"KHITAN SMALL SCRIPT CHARACTER-18C0C"));
        data.insert(std::make_pair(0x18c0d,"KHITAN SMALL SCRIPT CHARACTER-18C0D"));
        data.insert(std::make_pair(0x18c0e,"KHITAN SMALL SCRIPT CHARACTER-18C0E"));
        data.insert(std::make_pair(0x18c0f,"KHITAN SMALL SCRIPT CHARACTER-18C0F"));
        data.insert(std::make_pair(0x18c10,"KHITAN SMALL SCRIPT CHARACTER-18C10"));
        data.insert(std::make_pair(0x18c11,"KHITAN SMALL SCRIPT CHARACTER-18C11"));
        data.insert(std::make_pair(0x18c12,"KHITAN SMALL SCRIPT CHARACTER-18C12"));
        data.insert(std::make_pair(0x18c13,"KHITAN SMALL SCRIPT CHARACTER-18C13"));
        data.insert(std::make_pair(0x18c14,"KHITAN SMALL SCRIPT CHARACTER-18C14"));
        data.insert(std::make_pair(0x18c15,"KHITAN SMALL SCRIPT CHARACTER-18C15"));
        data.insert(std::make_pair(0x18c16,"KHITAN SMALL SCRIPT CHARACTER-18C16"));
        data.insert(std::make_pair(0x18c17,"KHITAN SMALL SCRIPT CHARACTER-18C17"));
        data.insert(std::make_pair(0x18c18,"KHITAN SMALL SCRIPT CHARACTER-18C18"));
        data.insert(std::make_pair(0x18c19,"KHITAN SMALL SCRIPT CHARACTER-18C19"));
        data.insert(std::make_pair(0x18c1a,"KHITAN SMALL SCRIPT CHARACTER-18C1A"));
        data.insert(std::make_pair(0x18c1b,"KHITAN SMALL SCRIPT CHARACTER-18C1B"));
        data.insert(std::make_pair(0x18c1c,"KHITAN SMALL SCRIPT CHARACTER-18C1C"));
        data.insert(std::make_pair(0x18c1d,"KHITAN SMALL SCRIPT CHARACTER-18C1D"));
        data.insert(std::make_pair(0x18c1e,"KHITAN SMALL SCRIPT CHARACTER-18C1E"));
        data.insert(std::make_pair(0x18c1f,"KHITAN SMALL SCRIPT CHARACTER-18C1F"));
        data.insert(std::make_pair(0x18c20,"KHITAN SMALL SCRIPT CHARACTER-18C20"));
        data.insert(std::make_pair(0x18c21,"KHITAN SMALL SCRIPT CHARACTER-18C21"));
        data.insert(std::make_pair(0x18c22,"KHITAN SMALL SCRIPT CHARACTER-18C22"));
        data.insert(std::make_pair(0x18c23,"KHITAN SMALL SCRIPT CHARACTER-18C23"));
        data.insert(std::make_pair(0x18c24,"KHITAN SMALL SCRIPT CHARACTER-18C24"));
        data.insert(std::make_pair(0x18c25,"KHITAN SMALL SCRIPT CHARACTER-18C25"));
        data.insert(std::make_pair(0x18c26,"KHITAN SMALL SCRIPT CHARACTER-18C26"));
        data.insert(std::make_pair(0x18c27,"KHITAN SMALL SCRIPT CHARACTER-18C27"));
        data.insert(std::make_pair(0x18c28,"KHITAN SMALL SCRIPT CHARACTER-18C28"));
        data.insert(std::make_pair(0x18c29,"KHITAN SMALL SCRIPT CHARACTER-18C29"));
        data.insert(std::make_pair(0x18c2a,"KHITAN SMALL SCRIPT CHARACTER-18C2A"));
        data.insert(std::make_pair(0x18c2b,"KHITAN SMALL SCRIPT CHARACTER-18C2B"));
        data.insert(std::make_pair(0x18c2c,"KHITAN SMALL SCRIPT CHARACTER-18C2C"));
        data.insert(std::make_pair(0x18c2d,"KHITAN SMALL SCRIPT CHARACTER-18C2D"));
        data.insert(std::make_pair(0x18c2e,"KHITAN SMALL SCRIPT CHARACTER-18C2E"));
        data.insert(std::make_pair(0x18c2f,"KHITAN SMALL SCRIPT CHARACTER-18C2F"));
        data.insert(std::make_pair(0x18c30,"KHITAN SMALL SCRIPT CHARACTER-18C30"));
        data.insert(std::make_pair(0x18c31,"KHITAN SMALL SCRIPT CHARACTER-18C31"));
        data.insert(std::make_pair(0x18c32,"KHITAN SMALL SCRIPT CHARACTER-18C32"));
        data.insert(std::make_pair(0x18c33,"KHITAN SMALL SCRIPT CHARACTER-18C33"));
        data.insert(std::make_pair(0x18c34,"KHITAN SMALL SCRIPT CHARACTER-18C34"));
        data.insert(std::make_pair(0x18c35,"KHITAN SMALL SCRIPT CHARACTER-18C35"));
        data.insert(std::make_pair(0x18c36,"KHITAN SMALL SCRIPT CHARACTER-18C36"));
        data.insert(std::make_pair(0x18c37,"KHITAN SMALL SCRIPT CHARACTER-18C37"));
        data.insert(std::make_pair(0x18c38,"KHITAN SMALL SCRIPT CHARACTER-18C38"));
        data.insert(std::make_pair(0x18c39,"KHITAN SMALL SCRIPT CHARACTER-18C39"));
        data.insert(std::make_pair(0x18c3a,"KHITAN SMALL SCRIPT CHARACTER-18C3A"));
        data.insert(std::make_pair(0x18c3b,"KHITAN SMALL SCRIPT CHARACTER-18C3B"));
        data.insert(std::make_pair(0x18c3c,"KHITAN SMALL SCRIPT CHARACTER-18C3C"));
        data.insert(std::make_pair(0x18c3d,"KHITAN SMALL SCRIPT CHARACTER-18C3D"));
        data.insert(std::make_pair(0x18c3e,"KHITAN SMALL SCRIPT CHARACTER-18C3E"));
        data.insert(std::make_pair(0x18c3f,"KHITAN SMALL SCRIPT CHARACTER-18C3F"));
        data.insert(std::make_pair(0x18c40,"KHITAN SMALL SCRIPT CHARACTER-18C40"));
        data.insert(std::make_pair(0x18c41,"KHITAN SMALL SCRIPT CHARACTER-18C41"));
        data.insert(std::make_pair(0x18c42,"KHITAN SMALL SCRIPT CHARACTER-18C42"));
        data.insert(std::make_pair(0x18c43,"KHITAN SMALL SCRIPT CHARACTER-18C43"));
        data.insert(std::make_pair(0x18c44,"KHITAN SMALL SCRIPT CHARACTER-18C44"));
        data.insert(std::make_pair(0x18c45,"KHITAN SMALL SCRIPT CHARACTER-18C45"));
        data.insert(std::make_pair(0x18c46,"KHITAN SMALL SCRIPT CHARACTER-18C46"));
        data.insert(std::make_pair(0x18c47,"KHITAN SMALL SCRIPT CHARACTER-18C47"));
        data.insert(std::make_pair(0x18c48,"KHITAN SMALL SCRIPT CHARACTER-18C48"));
        data.insert(std::make_pair(0x18c49,"KHITAN SMALL SCRIPT CHARACTER-18C49"));
        data.insert(std::make_pair(0x18c4a,"KHITAN SMALL SCRIPT CHARACTER-18C4A"));
        data.insert(std::make_pair(0x18c4b,"KHITAN SMALL SCRIPT CHARACTER-18C4B"));
        data.insert(std::make_pair(0x18c4c,"KHITAN SMALL SCRIPT CHARACTER-18C4C"));
        data.insert(std::make_pair(0x18c4d,"KHITAN SMALL SCRIPT CHARACTER-18C4D"));
        data.insert(std::make_pair(0x18c4e,"KHITAN SMALL SCRIPT CHARACTER-18C4E"));
        data.insert(std::make_pair(0x18c4f,"KHITAN SMALL SCRIPT CHARACTER-18C4F"));
        data.insert(std::make_pair(0x18c50,"KHITAN SMALL SCRIPT CHARACTER-18C50"));
        data.insert(std::make_pair(0x18c51,"KHITAN SMALL SCRIPT CHARACTER-18C51"));
        data.insert(std::make_pair(0x18c52,"KHITAN SMALL SCRIPT CHARACTER-18C52"));
        data.insert(std::make_pair(0x18c53,"KHITAN SMALL SCRIPT CHARACTER-18C53"));
        data.insert(std::make_pair(0x18c54,"KHITAN SMALL SCRIPT CHARACTER-18C54"));
        data.insert(std::make_pair(0x18c55,"KHITAN SMALL SCRIPT CHARACTER-18C55"));
        data.insert(std::make_pair(0x18c56,"KHITAN SMALL SCRIPT CHARACTER-18C56"));
        data.insert(std::make_pair(0x18c57,"KHITAN SMALL SCRIPT CHARACTER-18C57"));
        data.insert(std::make_pair(0x18c58,"KHITAN SMALL SCRIPT CHARACTER-18C58"));
        data.insert(std::make_pair(0x18c59,"KHITAN SMALL SCRIPT CHARACTER-18C59"));
        data.insert(std::make_pair(0x18c5a,"KHITAN SMALL SCRIPT CHARACTER-18C5A"));
        data.insert(std::make_pair(0x18c5b,"KHITAN SMALL SCRIPT CHARACTER-18C5B"));
        data.insert(std::make_pair(0x18c5c,"KHITAN SMALL SCRIPT CHARACTER-18C5C"));
        data.insert(std::make_pair(0x18c5d,"KHITAN SMALL SCRIPT CHARACTER-18C5D"));
        data.insert(std::make_pair(0x18c5e,"KHITAN SMALL SCRIPT CHARACTER-18C5E"));
        data.insert(std::make_pair(0x18c5f,"KHITAN SMALL SCRIPT CHARACTER-18C5F"));
        data.insert(std::make_pair(0x18c60,"KHITAN SMALL SCRIPT CHARACTER-18C60"));
        data.insert(std::make_pair(0x18c61,"KHITAN SMALL SCRIPT CHARACTER-18C61"));
        data.insert(std::make_pair(0x18c62,"KHITAN SMALL SCRIPT CHARACTER-18C62"));
        data.insert(std::make_pair(0x18c63,"KHITAN SMALL SCRIPT CHARACTER-18C63"));
        data.insert(std::make_pair(0x18c64,"KHITAN SMALL SCRIPT CHARACTER-18C64"));
        data.insert(std::make_pair(0x18c65,"KHITAN SMALL SCRIPT CHARACTER-18C65"));
        data.insert(std::make_pair(0x18c66,"KHITAN SMALL SCRIPT CHARACTER-18C66"));
        data.insert(std::make_pair(0x18c67,"KHITAN SMALL SCRIPT CHARACTER-18C67"));
        data.insert(std::make_pair(0x18c68,"KHITAN SMALL SCRIPT CHARACTER-18C68"));
        data.insert(std::make_pair(0x18c69,"KHITAN SMALL SCRIPT CHARACTER-18C69"));
        data.insert(std::make_pair(0x18c6a,"KHITAN SMALL SCRIPT CHARACTER-18C6A"));
        data.insert(std::make_pair(0x18c6b,"KHITAN SMALL SCRIPT CHARACTER-18C6B"));
        data.insert(std::make_pair(0x18c6c,"KHITAN SMALL SCRIPT CHARACTER-18C6C"));
        data.insert(std::make_pair(0x18c6d,"KHITAN SMALL SCRIPT CHARACTER-18C6D"));
        data.insert(std::make_pair(0x18c6e,"KHITAN SMALL SCRIPT CHARACTER-18C6E"));
        data.insert(std::make_pair(0x18c6f,"KHITAN SMALL SCRIPT CHARACTER-18C6F"));
        data.insert(std::make_pair(0x18c70,"KHITAN SMALL SCRIPT CHARACTER-18C70"));
        data.insert(std::make_pair(0x18c71,"KHITAN SMALL SCRIPT CHARACTER-18C71"));
        data.insert(std::make_pair(0x18c72,"KHITAN SMALL SCRIPT CHARACTER-18C72"));
        data.insert(std::make_pair(0x18c73,"KHITAN SMALL SCRIPT CHARACTER-18C73"));
        data.insert(std::make_pair(0x18c74,"KHITAN SMALL SCRIPT CHARACTER-18C74"));
        data.insert(std::make_pair(0x18c75,"KHITAN SMALL SCRIPT CHARACTER-18C75"));
        data.insert(std::make_pair(0x18c76,"KHITAN SMALL SCRIPT CHARACTER-18C76"));
        data.insert(std::make_pair(0x18c77,"KHITAN SMALL SCRIPT CHARACTER-18C77"));
        data.insert(std::make_pair(0x18c78,"KHITAN SMALL SCRIPT CHARACTER-18C78"));
        data.insert(std::make_pair(0x18c79,"KHITAN SMALL SCRIPT CHARACTER-18C79"));
        data.insert(std::make_pair(0x18c7a,"KHITAN SMALL SCRIPT CHARACTER-18C7A"));
        data.insert(std::make_pair(0x18c7b,"KHITAN SMALL SCRIPT CHARACTER-18C7B"));
        data.insert(std::make_pair(0x18c7c,"KHITAN SMALL SCRIPT CHARACTER-18C7C"));
        data.insert(std::make_pair(0x18c7d,"KHITAN SMALL SCRIPT CHARACTER-18C7D"));
        data.insert(std::make_pair(0x18c7e,"KHITAN SMALL SCRIPT CHARACTER-18C7E"));
        data.insert(std::make_pair(0x18c7f,"KHITAN SMALL SCRIPT CHARACTER-18C7F"));
        data.insert(std::make_pair(0x18c80,"KHITAN SMALL SCRIPT CHARACTER-18C80"));
        data.insert(std::make_pair(0x18c81,"KHITAN SMALL SCRIPT CHARACTER-18C81"));
        data.insert(std::make_pair(0x18c82,"KHITAN SMALL SCRIPT CHARACTER-18C82"));
        data.insert(std::make_pair(0x18c83,"KHITAN SMALL SCRIPT CHARACTER-18C83"));
        data.insert(std::make_pair(0x18c84,"KHITAN SMALL SCRIPT CHARACTER-18C84"));
        data.insert(std::make_pair(0x18c85,"KHITAN SMALL SCRIPT CHARACTER-18C85"));
        data.insert(std::make_pair(0x18c86,"KHITAN SMALL SCRIPT CHARACTER-18C86"));
        data.insert(std::make_pair(0x18c87,"KHITAN SMALL SCRIPT CHARACTER-18C87"));
        data.insert(std::make_pair(0x18c88,"KHITAN SMALL SCRIPT CHARACTER-18C88"));
        data.insert(std::make_pair(0x18c89,"KHITAN SMALL SCRIPT CHARACTER-18C89"));
        data.insert(std::make_pair(0x18c8a,"KHITAN SMALL SCRIPT CHARACTER-18C8A"));
        data.insert(std::make_pair(0x18c8b,"KHITAN SMALL SCRIPT CHARACTER-18C8B"));
        data.insert(std::make_pair(0x18c8c,"KHITAN SMALL SCRIPT CHARACTER-18C8C"));
        data.insert(std::make_pair(0x18c8d,"KHITAN SMALL SCRIPT CHARACTER-18C8D"));
        data.insert(std::make_pair(0x18c8e,"KHITAN SMALL SCRIPT CHARACTER-18C8E"));
        data.insert(std::make_pair(0x18c8f,"KHITAN SMALL SCRIPT CHARACTER-18C8F"));
        data.insert(std::make_pair(0x18c90,"KHITAN SMALL SCRIPT CHARACTER-18C90"));
        data.insert(std::make_pair(0x18c91,"KHITAN SMALL SCRIPT CHARACTER-18C91"));
        data.insert(std::make_pair(0x18c92,"KHITAN SMALL SCRIPT CHARACTER-18C92"));
        data.insert(std::make_pair(0x18c93,"KHITAN SMALL SCRIPT CHARACTER-18C93"));
        data.insert(std::make_pair(0x18c94,"KHITAN SMALL SCRIPT CHARACTER-18C94"));
        data.insert(std::make_pair(0x18c95,"KHITAN SMALL SCRIPT CHARACTER-18C95"));
        data.insert(std::make_pair(0x18c96,"KHITAN SMALL SCRIPT CHARACTER-18C96"));
        data.insert(std::make_pair(0x18c97,"KHITAN SMALL SCRIPT CHARACTER-18C97"));
        data.insert(std::make_pair(0x18c98,"KHITAN SMALL SCRIPT CHARACTER-18C98"));
        data.insert(std::make_pair(0x18c99,"KHITAN SMALL SCRIPT CHARACTER-18C99"));
        data.insert(std::make_pair(0x18c9a,"KHITAN SMALL SCRIPT CHARACTER-18C9A"));
        data.insert(std::make_pair(0x18c9b,"KHITAN SMALL SCRIPT CHARACTER-18C9B"));
        data.insert(std::make_pair(0x18c9c,"KHITAN SMALL SCRIPT CHARACTER-18C9C"));
        data.insert(std::make_pair(0x18c9d,"KHITAN SMALL SCRIPT CHARACTER-18C9D"));
        data.insert(std::make_pair(0x18c9e,"KHITAN SMALL SCRIPT CHARACTER-18C9E"));
        data.insert(std::make_pair(0x18c9f,"KHITAN SMALL SCRIPT CHARACTER-18C9F"));
        data.insert(std::make_pair(0x18ca0,"KHITAN SMALL SCRIPT CHARACTER-18CA0"));
        data.insert(std::make_pair(0x18ca1,"KHITAN SMALL SCRIPT CHARACTER-18CA1"));
        data.insert(std::make_pair(0x18ca2,"KHITAN SMALL SCRIPT CHARACTER-18CA2"));
        data.insert(std::make_pair(0x18ca3,"KHITAN SMALL SCRIPT CHARACTER-18CA3"));
        data.insert(std::make_pair(0x18ca4,"KHITAN SMALL SCRIPT CHARACTER-18CA4"));
        data.insert(std::make_pair(0x18ca5,"KHITAN SMALL SCRIPT CHARACTER-18CA5"));
        data.insert(std::make_pair(0x18ca6,"KHITAN SMALL SCRIPT CHARACTER-18CA6"));
        data.insert(std::make_pair(0x18ca7,"KHITAN SMALL SCRIPT CHARACTER-18CA7"));
        data.insert(std::make_pair(0x18ca8,"KHITAN SMALL SCRIPT CHARACTER-18CA8"));
        data.insert(std::make_pair(0x18ca9,"KHITAN SMALL SCRIPT CHARACTER-18CA9"));
        data.insert(std::make_pair(0x18caa,"KHITAN SMALL SCRIPT CHARACTER-18CAA"));
        data.insert(std::make_pair(0x18cab,"KHITAN SMALL SCRIPT CHARACTER-18CAB"));
        data.insert(std::make_pair(0x18cac,"KHITAN SMALL SCRIPT CHARACTER-18CAC"));
        data.insert(std::make_pair(0x18cad,"KHITAN SMALL SCRIPT CHARACTER-18CAD"));
        data.insert(std::make_pair(0x18cae,"KHITAN SMALL SCRIPT CHARACTER-18CAE"));
        data.insert(std::make_pair(0x18caf,"KHITAN SMALL SCRIPT CHARACTER-18CAF"));
        data.insert(std::make_pair(0x18cb0,"KHITAN SMALL SCRIPT CHARACTER-18CB0"));
        data.insert(std::make_pair(0x18cb1,"KHITAN SMALL SCRIPT CHARACTER-18CB1"));
        data.insert(std::make_pair(0x18cb2,"KHITAN SMALL SCRIPT CHARACTER-18CB2"));
        data.insert(std::make_pair(0x18cb3,"KHITAN SMALL SCRIPT CHARACTER-18CB3"));
        data.insert(std::make_pair(0x18cb4,"KHITAN SMALL SCRIPT CHARACTER-18CB4"));
        data.insert(std::make_pair(0x18cb5,"KHITAN SMALL SCRIPT CHARACTER-18CB5"));
        data.insert(std::make_pair(0x18cb6,"KHITAN SMALL SCRIPT CHARACTER-18CB6"));
        data.insert(std::make_pair(0x18cb7,"KHITAN SMALL SCRIPT CHARACTER-18CB7"));
        data.insert(std::make_pair(0x18cb8,"KHITAN SMALL SCRIPT CHARACTER-18CB8"));
        data.insert(std::make_pair(0x18cb9,"KHITAN SMALL SCRIPT CHARACTER-18CB9"));
        data.insert(std::make_pair(0x18cba,"KHITAN SMALL SCRIPT CHARACTER-18CBA"));
        data.insert(std::make_pair(0x18cbb,"KHITAN SMALL SCRIPT CHARACTER-18CBB"));
        data.insert(std::make_pair(0x18cbc,"KHITAN SMALL SCRIPT CHARACTER-18CBC"));
        data.insert(std::make_pair(0x18cbd,"KHITAN SMALL SCRIPT CHARACTER-18CBD"));
        data.insert(std::make_pair(0x18cbe,"KHITAN SMALL SCRIPT CHARACTER-18CBE"));
        data.insert(std::make_pair(0x18cbf,"KHITAN SMALL SCRIPT CHARACTER-18CBF"));
        data.insert(std::make_pair(0x18cc0,"KHITAN SMALL SCRIPT CHARACTER-18CC0"));
        data.insert(std::make_pair(0x18cc1,"KHITAN SMALL SCRIPT CHARACTER-18CC1"));
        data.insert(std::make_pair(0x18cc2,"KHITAN SMALL SCRIPT CHARACTER-18CC2"));
        data.insert(std::make_pair(0x18cc3,"KHITAN SMALL SCRIPT CHARACTER-18CC3"));
        data.insert(std::make_pair(0x18cc4,"KHITAN SMALL SCRIPT CHARACTER-18CC4"));
        data.insert(std::make_pair(0x18cc5,"KHITAN SMALL SCRIPT CHARACTER-18CC5"));
        data.insert(std::make_pair(0x18cc6,"KHITAN SMALL SCRIPT CHARACTER-18CC6"));
        data.insert(std::make_pair(0x18cc7,"KHITAN SMALL SCRIPT CHARACTER-18CC7"));
        data.insert(std::make_pair(0x18cc8,"KHITAN SMALL SCRIPT CHARACTER-18CC8"));
        data.insert(std::make_pair(0x18cc9,"KHITAN SMALL SCRIPT CHARACTER-18CC9"));
        data.insert(std::make_pair(0x18cca,"KHITAN SMALL SCRIPT CHARACTER-18CCA"));
        data.insert(std::make_pair(0x18ccb,"KHITAN SMALL SCRIPT CHARACTER-18CCB"));
        data.insert(std::make_pair(0x18ccc,"KHITAN SMALL SCRIPT CHARACTER-18CCC"));
        data.insert(std::make_pair(0x18ccd,"KHITAN SMALL SCRIPT CHARACTER-18CCD"));
        data.insert(std::make_pair(0x18cce,"KHITAN SMALL SCRIPT CHARACTER-18CCE"));
        data.insert(std::make_pair(0x18ccf,"KHITAN SMALL SCRIPT CHARACTER-18CCF"));
        data.insert(std::make_pair(0x18cd0,"KHITAN SMALL SCRIPT CHARACTER-18CD0"));
        data.insert(std::make_pair(0x18cd1,"KHITAN SMALL SCRIPT CHARACTER-18CD1"));
        data.insert(std::make_pair(0x18cd2,"KHITAN SMALL SCRIPT CHARACTER-18CD2"));
        data.insert(std::make_pair(0x18cd3,"KHITAN SMALL SCRIPT CHARACTER-18CD3"));
        data.insert(std::make_pair(0x18cd4,"KHITAN SMALL SCRIPT CHARACTER-18CD4"));
        data.insert(std::make_pair(0x18cd5,"KHITAN SMALL SCRIPT CHARACTER-18CD5"));
        data.insert(std::make_pair(0x18d00,"<Tangut Ideograph Supplement, First>"));
        data.insert(std::make_pair(0x18d08,"<Tangut Ideograph Supplement, Last>"));
        data.insert(std::make_pair(0x1aff0,"KATAKANA LETTER MINNAN TONE-2"));
        data.insert(std::make_pair(0x1aff1,"KATAKANA LETTER MINNAN TONE-3"));
        data.insert(std::make_pair(0x1aff2,"KATAKANA LETTER MINNAN TONE-4"));
        data.insert(std::make_pair(0x1aff3,"KATAKANA LETTER MINNAN TONE-5"));
        data.insert(std::make_pair(0x1aff5,"KATAKANA LETTER MINNAN TONE-7"));
        data.insert(std::make_pair(0x1aff6,"KATAKANA LETTER MINNAN TONE-8"));
        data.insert(std::make_pair(0x1aff7,"KATAKANA LETTER MINNAN NASALIZED TONE-1"));
        data.insert(std::make_pair(0x1aff8,"KATAKANA LETTER MINNAN NASALIZED TONE-2"));
        data.insert(std::make_pair(0x1aff9,"KATAKANA LETTER MINNAN NASALIZED TONE-3"));
        data.insert(std::make_pair(0x1affa,"KATAKANA LETTER MINNAN NASALIZED TONE-4"));
        data.insert(std::make_pair(0x1affb,"KATAKANA LETTER MINNAN NASALIZED TONE-5"));
        data.insert(std::make_pair(0x1affd,"KATAKANA LETTER MINNAN NASALIZED TONE-7"));
        data.insert(std::make_pair(0x1affe,"KATAKANA LETTER MINNAN NASALIZED TONE-8"));
        data.insert(std::make_pair(0x1b000,"KATAKANA LETTER ARCHAIC E"));
        data.insert(std::make_pair(0x1b001,"HIRAGANA LETTER ARCHAIC YE"));
        data.insert(std::make_pair(0x1b002,"HENTAIGANA LETTER A-1"));
        data.insert(std::make_pair(0x1b003,"HENTAIGANA LETTER A-2"));
        data.insert(std::make_pair(0x1b004,"HENTAIGANA LETTER A-3"));
        data.insert(std::make_pair(0x1b005,"HENTAIGANA LETTER A-WO"));
        data.insert(std::make_pair(0x1b006,"HENTAIGANA LETTER I-1"));
        data.insert(std::make_pair(0x1b007,"HENTAIGANA LETTER I-2"));
        data.insert(std::make_pair(0x1b008,"HENTAIGANA LETTER I-3"));
        data.insert(std::make_pair(0x1b009,"HENTAIGANA LETTER I-4"));
        data.insert(std::make_pair(0x1b00a,"HENTAIGANA LETTER U-1"));
        data.insert(std::make_pair(0x1b00b,"HENTAIGANA LETTER U-2"));
        data.insert(std::make_pair(0x1b00c,"HENTAIGANA LETTER U-3"));
        data.insert(std::make_pair(0x1b00d,"HENTAIGANA LETTER U-4"));
        data.insert(std::make_pair(0x1b00e,"HENTAIGANA LETTER U-5"));
        data.insert(std::make_pair(0x1b00f,"HENTAIGANA LETTER E-2"));
        data.insert(std::make_pair(0x1b010,"HENTAIGANA LETTER E-3"));
        data.insert(std::make_pair(0x1b011,"HENTAIGANA LETTER E-4"));
        data.insert(std::make_pair(0x1b012,"HENTAIGANA LETTER E-5"));
        data.insert(std::make_pair(0x1b013,"HENTAIGANA LETTER E-6"));
        data.insert(std::make_pair(0x1b014,"HENTAIGANA LETTER O-1"));
        data.insert(std::make_pair(0x1b015,"HENTAIGANA LETTER O-2"));
        data.insert(std::make_pair(0x1b016,"HENTAIGANA LETTER O-3"));
        data.insert(std::make_pair(0x1b017,"HENTAIGANA LETTER KA-1"));
        data.insert(std::make_pair(0x1b018,"HENTAIGANA LETTER KA-2"));
        data.insert(std::make_pair(0x1b019,"HENTAIGANA LETTER KA-3"));
        data.insert(std::make_pair(0x1b01a,"HENTAIGANA LETTER KA-4"));
        data.insert(std::make_pair(0x1b01b,"HENTAIGANA LETTER KA-5"));
        data.insert(std::make_pair(0x1b01c,"HENTAIGANA LETTER KA-6"));
        data.insert(std::make_pair(0x1b01d,"HENTAIGANA LETTER KA-7"));
        data.insert(std::make_pair(0x1b01e,"HENTAIGANA LETTER KA-8"));
        data.insert(std::make_pair(0x1b01f,"HENTAIGANA LETTER KA-9"));
        data.insert(std::make_pair(0x1b020,"HENTAIGANA LETTER KA-10"));
        data.insert(std::make_pair(0x1b021,"HENTAIGANA LETTER KA-11"));
        data.insert(std::make_pair(0x1b022,"HENTAIGANA LETTER KA-KE"));
        data.insert(std::make_pair(0x1b023,"HENTAIGANA LETTER KI-1"));
        data.insert(std::make_pair(0x1b024,"HENTAIGANA LETTER KI-2"));
        data.insert(std::make_pair(0x1b025,"HENTAIGANA LETTER KI-3"));
        data.insert(std::make_pair(0x1b026,"HENTAIGANA LETTER KI-4"));
        data.insert(std::make_pair(0x1b027,"HENTAIGANA LETTER KI-5"));
        data.insert(std::make_pair(0x1b028,"HENTAIGANA LETTER KI-6"));
        data.insert(std::make_pair(0x1b029,"HENTAIGANA LETTER KI-7"));
        data.insert(std::make_pair(0x1b02a,"HENTAIGANA LETTER KI-8"));
        data.insert(std::make_pair(0x1b02b,"HENTAIGANA LETTER KU-1"));
        data.insert(std::make_pair(0x1b02c,"HENTAIGANA LETTER KU-2"));
        data.insert(std::make_pair(0x1b02d,"HENTAIGANA LETTER KU-3"));
        data.insert(std::make_pair(0x1b02e,"HENTAIGANA LETTER KU-4"));
        data.insert(std::make_pair(0x1b02f,"HENTAIGANA LETTER KU-5"));
        data.insert(std::make_pair(0x1b030,"HENTAIGANA LETTER KU-6"));
        data.insert(std::make_pair(0x1b031,"HENTAIGANA LETTER KU-7"));
        data.insert(std::make_pair(0x1b032,"HENTAIGANA LETTER KE-1"));
        data.insert(std::make_pair(0x1b033,"HENTAIGANA LETTER KE-2"));
        data.insert(std::make_pair(0x1b034,"HENTAIGANA LETTER KE-3"));
        data.insert(std::make_pair(0x1b035,"HENTAIGANA LETTER KE-4"));
        data.insert(std::make_pair(0x1b036,"HENTAIGANA LETTER KE-5"));
        data.insert(std::make_pair(0x1b037,"HENTAIGANA LETTER KE-6"));
        data.insert(std::make_pair(0x1b038,"HENTAIGANA LETTER KO-1"));
        data.insert(std::make_pair(0x1b039,"HENTAIGANA LETTER KO-2"));
        data.insert(std::make_pair(0x1b03a,"HENTAIGANA LETTER KO-3"));
        data.insert(std::make_pair(0x1b03b,"HENTAIGANA LETTER KO-KI"));
        data.insert(std::make_pair(0x1b03c,"HENTAIGANA LETTER SA-1"));
        data.insert(std::make_pair(0x1b03d,"HENTAIGANA LETTER SA-2"));
        data.insert(std::make_pair(0x1b03e,"HENTAIGANA LETTER SA-3"));
        data.insert(std::make_pair(0x1b03f,"HENTAIGANA LETTER SA-4"));
        data.insert(std::make_pair(0x1b040,"HENTAIGANA LETTER SA-5"));
        data.insert(std::make_pair(0x1b041,"HENTAIGANA LETTER SA-6"));
        data.insert(std::make_pair(0x1b042,"HENTAIGANA LETTER SA-7"));
        data.insert(std::make_pair(0x1b043,"HENTAIGANA LETTER SA-8"));
        data.insert(std::make_pair(0x1b044,"HENTAIGANA LETTER SI-1"));
        data.insert(std::make_pair(0x1b045,"HENTAIGANA LETTER SI-2"));
        data.insert(std::make_pair(0x1b046,"HENTAIGANA LETTER SI-3"));
        data.insert(std::make_pair(0x1b047,"HENTAIGANA LETTER SI-4"));
        data.insert(std::make_pair(0x1b048,"HENTAIGANA LETTER SI-5"));
        data.insert(std::make_pair(0x1b049,"HENTAIGANA LETTER SI-6"));
        data.insert(std::make_pair(0x1b04a,"HENTAIGANA LETTER SU-1"));
        data.insert(std::make_pair(0x1b04b,"HENTAIGANA LETTER SU-2"));
        data.insert(std::make_pair(0x1b04c,"HENTAIGANA LETTER SU-3"));
        data.insert(std::make_pair(0x1b04d,"HENTAIGANA LETTER SU-4"));
        data.insert(std::make_pair(0x1b04e,"HENTAIGANA LETTER SU-5"));
        data.insert(std::make_pair(0x1b04f,"HENTAIGANA LETTER SU-6"));
        data.insert(std::make_pair(0x1b050,"HENTAIGANA LETTER SU-7"));
        data.insert(std::make_pair(0x1b051,"HENTAIGANA LETTER SU-8"));
        data.insert(std::make_pair(0x1b052,"HENTAIGANA LETTER SE-1"));
        data.insert(std::make_pair(0x1b053,"HENTAIGANA LETTER SE-2"));
        data.insert(std::make_pair(0x1b054,"HENTAIGANA LETTER SE-3"));
        data.insert(std::make_pair(0x1b055,"HENTAIGANA LETTER SE-4"));
        data.insert(std::make_pair(0x1b056,"HENTAIGANA LETTER SE-5"));
        data.insert(std::make_pair(0x1b057,"HENTAIGANA LETTER SO-1"));
        data.insert(std::make_pair(0x1b058,"HENTAIGANA LETTER SO-2"));
        data.insert(std::make_pair(0x1b059,"HENTAIGANA LETTER SO-3"));
        data.insert(std::make_pair(0x1b05a,"HENTAIGANA LETTER SO-4"));
        data.insert(std::make_pair(0x1b05b,"HENTAIGANA LETTER SO-5"));
        data.insert(std::make_pair(0x1b05c,"HENTAIGANA LETTER SO-6"));
        data.insert(std::make_pair(0x1b05d,"HENTAIGANA LETTER SO-7"));
        data.insert(std::make_pair(0x1b05e,"HENTAIGANA LETTER TA-1"));
        data.insert(std::make_pair(0x1b05f,"HENTAIGANA LETTER TA-2"));
        data.insert(std::make_pair(0x1b060,"HENTAIGANA LETTER TA-3"));
        data.insert(std::make_pair(0x1b061,"HENTAIGANA LETTER TA-4"));
        data.insert(std::make_pair(0x1b062,"HENTAIGANA LETTER TI-1"));
        data.insert(std::make_pair(0x1b063,"HENTAIGANA LETTER TI-2"));
        data.insert(std::make_pair(0x1b064,"HENTAIGANA LETTER TI-3"));
        data.insert(std::make_pair(0x1b065,"HENTAIGANA LETTER TI-4"));
        data.insert(std::make_pair(0x1b066,"HENTAIGANA LETTER TI-5"));
        data.insert(std::make_pair(0x1b067,"HENTAIGANA LETTER TI-6"));
        data.insert(std::make_pair(0x1b068,"HENTAIGANA LETTER TI-7"));
        data.insert(std::make_pair(0x1b069,"HENTAIGANA LETTER TU-1"));
        data.insert(std::make_pair(0x1b06a,"HENTAIGANA LETTER TU-2"));
        data.insert(std::make_pair(0x1b06b,"HENTAIGANA LETTER TU-3"));
        data.insert(std::make_pair(0x1b06c,"HENTAIGANA LETTER TU-4"));
        data.insert(std::make_pair(0x1b06d,"HENTAIGANA LETTER TU-TO"));
        data.insert(std::make_pair(0x1b06e,"HENTAIGANA LETTER TE-1"));
        data.insert(std::make_pair(0x1b06f,"HENTAIGANA LETTER TE-2"));
        data.insert(std::make_pair(0x1b070,"HENTAIGANA LETTER TE-3"));
        data.insert(std::make_pair(0x1b071,"HENTAIGANA LETTER TE-4"));
        data.insert(std::make_pair(0x1b072,"HENTAIGANA LETTER TE-5"));
        data.insert(std::make_pair(0x1b073,"HENTAIGANA LETTER TE-6"));
        data.insert(std::make_pair(0x1b074,"HENTAIGANA LETTER TE-7"));
        data.insert(std::make_pair(0x1b075,"HENTAIGANA LETTER TE-8"));
        data.insert(std::make_pair(0x1b076,"HENTAIGANA LETTER TE-9"));
        data.insert(std::make_pair(0x1b077,"HENTAIGANA LETTER TO-1"));
        data.insert(std::make_pair(0x1b078,"HENTAIGANA LETTER TO-2"));
        data.insert(std::make_pair(0x1b079,"HENTAIGANA LETTER TO-3"));
        data.insert(std::make_pair(0x1b07a,"HENTAIGANA LETTER TO-4"));
        data.insert(std::make_pair(0x1b07b,"HENTAIGANA LETTER TO-5"));
        data.insert(std::make_pair(0x1b07c,"HENTAIGANA LETTER TO-6"));
        data.insert(std::make_pair(0x1b07d,"HENTAIGANA LETTER TO-RA"));
        data.insert(std::make_pair(0x1b07e,"HENTAIGANA LETTER NA-1"));
        data.insert(std::make_pair(0x1b07f,"HENTAIGANA LETTER NA-2"));
        data.insert(std::make_pair(0x1b080,"HENTAIGANA LETTER NA-3"));
        data.insert(std::make_pair(0x1b081,"HENTAIGANA LETTER NA-4"));
        data.insert(std::make_pair(0x1b082,"HENTAIGANA LETTER NA-5"));
        data.insert(std::make_pair(0x1b083,"HENTAIGANA LETTER NA-6"));
        data.insert(std::make_pair(0x1b084,"HENTAIGANA LETTER NA-7"));
        data.insert(std::make_pair(0x1b085,"HENTAIGANA LETTER NA-8"));
        data.insert(std::make_pair(0x1b086,"HENTAIGANA LETTER NA-9"));
        data.insert(std::make_pair(0x1b087,"HENTAIGANA LETTER NI-1"));
        data.insert(std::make_pair(0x1b088,"HENTAIGANA LETTER NI-2"));
        data.insert(std::make_pair(0x1b089,"HENTAIGANA LETTER NI-3"));
        data.insert(std::make_pair(0x1b08a,"HENTAIGANA LETTER NI-4"));
        data.insert(std::make_pair(0x1b08b,"HENTAIGANA LETTER NI-5"));
        data.insert(std::make_pair(0x1b08c,"HENTAIGANA LETTER NI-6"));
        data.insert(std::make_pair(0x1b08d,"HENTAIGANA LETTER NI-7"));
        data.insert(std::make_pair(0x1b08e,"HENTAIGANA LETTER NI-TE"));
        data.insert(std::make_pair(0x1b08f,"HENTAIGANA LETTER NU-1"));
        data.insert(std::make_pair(0x1b090,"HENTAIGANA LETTER NU-2"));
        data.insert(std::make_pair(0x1b091,"HENTAIGANA LETTER NU-3"));
        data.insert(std::make_pair(0x1b092,"HENTAIGANA LETTER NE-1"));
        data.insert(std::make_pair(0x1b093,"HENTAIGANA LETTER NE-2"));
        data.insert(std::make_pair(0x1b094,"HENTAIGANA LETTER NE-3"));
        data.insert(std::make_pair(0x1b095,"HENTAIGANA LETTER NE-4"));
        data.insert(std::make_pair(0x1b096,"HENTAIGANA LETTER NE-5"));
        data.insert(std::make_pair(0x1b097,"HENTAIGANA LETTER NE-6"));
        data.insert(std::make_pair(0x1b098,"HENTAIGANA LETTER NE-KO"));
        data.insert(std::make_pair(0x1b099,"HENTAIGANA LETTER NO-1"));
        data.insert(std::make_pair(0x1b09a,"HENTAIGANA LETTER NO-2"));
        data.insert(std::make_pair(0x1b09b,"HENTAIGANA LETTER NO-3"));
        data.insert(std::make_pair(0x1b09c,"HENTAIGANA LETTER NO-4"));
        data.insert(std::make_pair(0x1b09d,"HENTAIGANA LETTER NO-5"));
        data.insert(std::make_pair(0x1b09e,"HENTAIGANA LETTER HA-1"));
        data.insert(std::make_pair(0x1b09f,"HENTAIGANA LETTER HA-2"));
        data.insert(std::make_pair(0x1b0a0,"HENTAIGANA LETTER HA-3"));
        data.insert(std::make_pair(0x1b0a1,"HENTAIGANA LETTER HA-4"));
        data.insert(std::make_pair(0x1b0a2,"HENTAIGANA LETTER HA-5"));
        data.insert(std::make_pair(0x1b0a3,"HENTAIGANA LETTER HA-6"));
        data.insert(std::make_pair(0x1b0a4,"HENTAIGANA LETTER HA-7"));
        data.insert(std::make_pair(0x1b0a5,"HENTAIGANA LETTER HA-8"));
        data.insert(std::make_pair(0x1b0a6,"HENTAIGANA LETTER HA-9"));
        data.insert(std::make_pair(0x1b0a7,"HENTAIGANA LETTER HA-10"));
        data.insert(std::make_pair(0x1b0a8,"HENTAIGANA LETTER HA-11"));
        data.insert(std::make_pair(0x1b0a9,"HENTAIGANA LETTER HI-1"));
        data.insert(std::make_pair(0x1b0aa,"HENTAIGANA LETTER HI-2"));
        data.insert(std::make_pair(0x1b0ab,"HENTAIGANA LETTER HI-3"));
        data.insert(std::make_pair(0x1b0ac,"HENTAIGANA LETTER HI-4"));
        data.insert(std::make_pair(0x1b0ad,"HENTAIGANA LETTER HI-5"));
        data.insert(std::make_pair(0x1b0ae,"HENTAIGANA LETTER HI-6"));
        data.insert(std::make_pair(0x1b0af,"HENTAIGANA LETTER HI-7"));
        data.insert(std::make_pair(0x1b0b0,"HENTAIGANA LETTER HU-1"));
        data.insert(std::make_pair(0x1b0b1,"HENTAIGANA LETTER HU-2"));
        data.insert(std::make_pair(0x1b0b2,"HENTAIGANA LETTER HU-3"));
        data.insert(std::make_pair(0x1b0b3,"HENTAIGANA LETTER HE-1"));
        data.insert(std::make_pair(0x1b0b4,"HENTAIGANA LETTER HE-2"));
        data.insert(std::make_pair(0x1b0b5,"HENTAIGANA LETTER HE-3"));
        data.insert(std::make_pair(0x1b0b6,"HENTAIGANA LETTER HE-4"));
        data.insert(std::make_pair(0x1b0b7,"HENTAIGANA LETTER HE-5"));
        data.insert(std::make_pair(0x1b0b8,"HENTAIGANA LETTER HE-6"));
        data.insert(std::make_pair(0x1b0b9,"HENTAIGANA LETTER HE-7"));
        data.insert(std::make_pair(0x1b0ba,"HENTAIGANA LETTER HO-1"));
        data.insert(std::make_pair(0x1b0bb,"HENTAIGANA LETTER HO-2"));
        data.insert(std::make_pair(0x1b0bc,"HENTAIGANA LETTER HO-3"));
        data.insert(std::make_pair(0x1b0bd,"HENTAIGANA LETTER HO-4"));
        data.insert(std::make_pair(0x1b0be,"HENTAIGANA LETTER HO-5"));
        data.insert(std::make_pair(0x1b0bf,"HENTAIGANA LETTER HO-6"));
        data.insert(std::make_pair(0x1b0c0,"HENTAIGANA LETTER HO-7"));
        data.insert(std::make_pair(0x1b0c1,"HENTAIGANA LETTER HO-8"));
        data.insert(std::make_pair(0x1b0c2,"HENTAIGANA LETTER MA-1"));
        data.insert(std::make_pair(0x1b0c3,"HENTAIGANA LETTER MA-2"));
        data.insert(std::make_pair(0x1b0c4,"HENTAIGANA LETTER MA-3"));
        data.insert(std::make_pair(0x1b0c5,"HENTAIGANA LETTER MA-4"));
        data.insert(std::make_pair(0x1b0c6,"HENTAIGANA LETTER MA-5"));
        data.insert(std::make_pair(0x1b0c7,"HENTAIGANA LETTER MA-6"));
        data.insert(std::make_pair(0x1b0c8,"HENTAIGANA LETTER MA-7"));
        data.insert(std::make_pair(0x1b0c9,"HENTAIGANA LETTER MI-1"));
        data.insert(std::make_pair(0x1b0ca,"HENTAIGANA LETTER MI-2"));
        data.insert(std::make_pair(0x1b0cb,"HENTAIGANA LETTER MI-3"));
        data.insert(std::make_pair(0x1b0cc,"HENTAIGANA LETTER MI-4"));
        data.insert(std::make_pair(0x1b0cd,"HENTAIGANA LETTER MI-5"));
        data.insert(std::make_pair(0x1b0ce,"HENTAIGANA LETTER MI-6"));
        data.insert(std::make_pair(0x1b0cf,"HENTAIGANA LETTER MI-7"));
        data.insert(std::make_pair(0x1b0d0,"HENTAIGANA LETTER MU-1"));
        data.insert(std::make_pair(0x1b0d1,"HENTAIGANA LETTER MU-2"));
        data.insert(std::make_pair(0x1b0d2,"HENTAIGANA LETTER MU-3"));
        data.insert(std::make_pair(0x1b0d3,"HENTAIGANA LETTER MU-4"));
        data.insert(std::make_pair(0x1b0d4,"HENTAIGANA LETTER ME-1"));
        data.insert(std::make_pair(0x1b0d5,"HENTAIGANA LETTER ME-2"));
        data.insert(std::make_pair(0x1b0d6,"HENTAIGANA LETTER ME-MA"));
        data.insert(std::make_pair(0x1b0d7,"HENTAIGANA LETTER MO-1"));
        data.insert(std::make_pair(0x1b0d8,"HENTAIGANA LETTER MO-2"));
        data.insert(std::make_pair(0x1b0d9,"HENTAIGANA LETTER MO-3"));
        data.insert(std::make_pair(0x1b0da,"HENTAIGANA LETTER MO-4"));
        data.insert(std::make_pair(0x1b0db,"HENTAIGANA LETTER MO-5"));
        data.insert(std::make_pair(0x1b0dc,"HENTAIGANA LETTER MO-6"));
        data.insert(std::make_pair(0x1b0dd,"HENTAIGANA LETTER YA-1"));
        data.insert(std::make_pair(0x1b0de,"HENTAIGANA LETTER YA-2"));
        data.insert(std::make_pair(0x1b0df,"HENTAIGANA LETTER YA-3"));
        data.insert(std::make_pair(0x1b0e0,"HENTAIGANA LETTER YA-4"));
        data.insert(std::make_pair(0x1b0e1,"HENTAIGANA LETTER YA-5"));
        data.insert(std::make_pair(0x1b0e2,"HENTAIGANA LETTER YA-YO"));
        data.insert(std::make_pair(0x1b0e3,"HENTAIGANA LETTER YU-1"));
        data.insert(std::make_pair(0x1b0e4,"HENTAIGANA LETTER YU-2"));
        data.insert(std::make_pair(0x1b0e5,"HENTAIGANA LETTER YU-3"));
        data.insert(std::make_pair(0x1b0e6,"HENTAIGANA LETTER YU-4"));
        data.insert(std::make_pair(0x1b0e7,"HENTAIGANA LETTER YO-1"));
        data.insert(std::make_pair(0x1b0e8,"HENTAIGANA LETTER YO-2"));
        data.insert(std::make_pair(0x1b0e9,"HENTAIGANA LETTER YO-3"));
        data.insert(std::make_pair(0x1b0ea,"HENTAIGANA LETTER YO-4"));
        data.insert(std::make_pair(0x1b0eb,"HENTAIGANA LETTER YO-5"));
        data.insert(std::make_pair(0x1b0ec,"HENTAIGANA LETTER YO-6"));
        data.insert(std::make_pair(0x1b0ed,"HENTAIGANA LETTER RA-1"));
        data.insert(std::make_pair(0x1b0ee,"HENTAIGANA LETTER RA-2"));
        data.insert(std::make_pair(0x1b0ef,"HENTAIGANA LETTER RA-3"));
        data.insert(std::make_pair(0x1b0f0,"HENTAIGANA LETTER RA-4"));
        data.insert(std::make_pair(0x1b0f1,"HENTAIGANA LETTER RI-1"));
        data.insert(std::make_pair(0x1b0f2,"HENTAIGANA LETTER RI-2"));
        data.insert(std::make_pair(0x1b0f3,"HENTAIGANA LETTER RI-3"));
        data.insert(std::make_pair(0x1b0f4,"HENTAIGANA LETTER RI-4"));
        data.insert(std::make_pair(0x1b0f5,"HENTAIGANA LETTER RI-5"));
        data.insert(std::make_pair(0x1b0f6,"HENTAIGANA LETTER RI-6"));
        data.insert(std::make_pair(0x1b0f7,"HENTAIGANA LETTER RI-7"));
        data.insert(std::make_pair(0x1b0f8,"HENTAIGANA LETTER RU-1"));
        data.insert(std::make_pair(0x1b0f9,"HENTAIGANA LETTER RU-2"));
        data.insert(std::make_pair(0x1b0fa,"HENTAIGANA LETTER RU-3"));
        data.insert(std::make_pair(0x1b0fb,"HENTAIGANA LETTER RU-4"));
        data.insert(std::make_pair(0x1b0fc,"HENTAIGANA LETTER RU-5"));
        data.insert(std::make_pair(0x1b0fd,"HENTAIGANA LETTER RU-6"));
        data.insert(std::make_pair(0x1b0fe,"HENTAIGANA LETTER RE-1"));
        data.insert(std::make_pair(0x1b0ff,"HENTAIGANA LETTER RE-2"));
        data.insert(std::make_pair(0x1b100,"HENTAIGANA LETTER RE-3"));
        data.insert(std::make_pair(0x1b101,"HENTAIGANA LETTER RE-4"));
        data.insert(std::make_pair(0x1b102,"HENTAIGANA LETTER RO-1"));
        data.insert(std::make_pair(0x1b103,"HENTAIGANA LETTER RO-2"));
        data.insert(std::make_pair(0x1b104,"HENTAIGANA LETTER RO-3"));
        data.insert(std::make_pair(0x1b105,"HENTAIGANA LETTER RO-4"));
        data.insert(std::make_pair(0x1b106,"HENTAIGANA LETTER RO-5"));
        data.insert(std::make_pair(0x1b107,"HENTAIGANA LETTER RO-6"));
        data.insert(std::make_pair(0x1b108,"HENTAIGANA LETTER WA-1"));
        data.insert(std::make_pair(0x1b109,"HENTAIGANA LETTER WA-2"));
        data.insert(std::make_pair(0x1b10a,"HENTAIGANA LETTER WA-3"));
        data.insert(std::make_pair(0x1b10b,"HENTAIGANA LETTER WA-4"));
        data.insert(std::make_pair(0x1b10c,"HENTAIGANA LETTER WA-5"));
        data.insert(std::make_pair(0x1b10d,"HENTAIGANA LETTER WI-1"));
        data.insert(std::make_pair(0x1b10e,"HENTAIGANA LETTER WI-2"));
        data.insert(std::make_pair(0x1b10f,"HENTAIGANA LETTER WI-3"));
        data.insert(std::make_pair(0x1b110,"HENTAIGANA LETTER WI-4"));
        data.insert(std::make_pair(0x1b111,"HENTAIGANA LETTER WI-5"));
        data.insert(std::make_pair(0x1b112,"HENTAIGANA LETTER WE-1"));
        data.insert(std::make_pair(0x1b113,"HENTAIGANA LETTER WE-2"));
        data.insert(std::make_pair(0x1b114,"HENTAIGANA LETTER WE-3"));
        data.insert(std::make_pair(0x1b115,"HENTAIGANA LETTER WE-4"));
        data.insert(std::make_pair(0x1b116,"HENTAIGANA LETTER WO-1"));
        data.insert(std::make_pair(0x1b117,"HENTAIGANA LETTER WO-2"));
        data.insert(std::make_pair(0x1b118,"HENTAIGANA LETTER WO-3"));
        data.insert(std::make_pair(0x1b119,"HENTAIGANA LETTER WO-4"));
        data.insert(std::make_pair(0x1b11a,"HENTAIGANA LETTER WO-5"));
        data.insert(std::make_pair(0x1b11b,"HENTAIGANA LETTER WO-6"));
        data.insert(std::make_pair(0x1b11c,"HENTAIGANA LETTER WO-7"));
        data.insert(std::make_pair(0x1b11d,"HENTAIGANA LETTER N-MU-MO-1"));
        data.insert(std::make_pair(0x1b11e,"HENTAIGANA LETTER N-MU-MO-2"));
        data.insert(std::make_pair(0x1b11f,"HIRAGANA LETTER ARCHAIC WU"));
        data.insert(std::make_pair(0x1b120,"KATAKANA LETTER ARCHAIC YI"));
        data.insert(std::make_pair(0x1b121,"KATAKANA LETTER ARCHAIC YE"));
        data.insert(std::make_pair(0x1b122,"KATAKANA LETTER ARCHAIC WU"));
        data.insert(std::make_pair(0x1b132,"HIRAGANA LETTER SMALL KO"));
        data.insert(std::make_pair(0x1b150,"HIRAGANA LETTER SMALL WI"));
        data.insert(std::make_pair(0x1b151,"HIRAGANA LETTER SMALL WE"));
        data.insert(std::make_pair(0x1b152,"HIRAGANA LETTER SMALL WO"));
        data.insert(std::make_pair(0x1b155,"KATAKANA LETTER SMALL KO"));
        data.insert(std::make_pair(0x1b164,"KATAKANA LETTER SMALL WI"));
        data.insert(std::make_pair(0x1b165,"KATAKANA LETTER SMALL WE"));
        data.insert(std::make_pair(0x1b166,"KATAKANA LETTER SMALL WO"));
        data.insert(std::make_pair(0x1b167,"KATAKANA LETTER SMALL N"));
        data.insert(std::make_pair(0x1b170,"NUSHU CHARACTER-1B170"));
        data.insert(std::make_pair(0x1b171,"NUSHU CHARACTER-1B171"));
        data.insert(std::make_pair(0x1b172,"NUSHU CHARACTER-1B172"));
        data.insert(std::make_pair(0x1b173,"NUSHU CHARACTER-1B173"));
        data.insert(std::make_pair(0x1b174,"NUSHU CHARACTER-1B174"));
        data.insert(std::make_pair(0x1b175,"NUSHU CHARACTER-1B175"));
        data.insert(std::make_pair(0x1b176,"NUSHU CHARACTER-1B176"));
        data.insert(std::make_pair(0x1b177,"NUSHU CHARACTER-1B177"));
        data.insert(std::make_pair(0x1b178,"NUSHU CHARACTER-1B178"));
        data.insert(std::make_pair(0x1b179,"NUSHU CHARACTER-1B179"));
        data.insert(std::make_pair(0x1b17a,"NUSHU CHARACTER-1B17A"));
        data.insert(std::make_pair(0x1b17b,"NUSHU CHARACTER-1B17B"));
        data.insert(std::make_pair(0x1b17c,"NUSHU CHARACTER-1B17C"));
        data.insert(std::make_pair(0x1b17d,"NUSHU CHARACTER-1B17D"));
        data.insert(std::make_pair(0x1b17e,"NUSHU CHARACTER-1B17E"));
        data.insert(std::make_pair(0x1b17f,"NUSHU CHARACTER-1B17F"));
        data.insert(std::make_pair(0x1b180,"NUSHU CHARACTER-1B180"));
        data.insert(std::make_pair(0x1b181,"NUSHU CHARACTER-1B181"));
        data.insert(std::make_pair(0x1b182,"NUSHU CHARACTER-1B182"));
        data.insert(std::make_pair(0x1b183,"NUSHU CHARACTER-1B183"));
        data.insert(std::make_pair(0x1b184,"NUSHU CHARACTER-1B184"));
        data.insert(std::make_pair(0x1b185,"NUSHU CHARACTER-1B185"));
        data.insert(std::make_pair(0x1b186,"NUSHU CHARACTER-1B186"));
        data.insert(std::make_pair(0x1b187,"NUSHU CHARACTER-1B187"));
        data.insert(std::make_pair(0x1b188,"NUSHU CHARACTER-1B188"));
        data.insert(std::make_pair(0x1b189,"NUSHU CHARACTER-1B189"));
        data.insert(std::make_pair(0x1b18a,"NUSHU CHARACTER-1B18A"));
        data.insert(std::make_pair(0x1b18b,"NUSHU CHARACTER-1B18B"));
        data.insert(std::make_pair(0x1b18c,"NUSHU CHARACTER-1B18C"));
        data.insert(std::make_pair(0x1b18d,"NUSHU CHARACTER-1B18D"));
        data.insert(std::make_pair(0x1b18e,"NUSHU CHARACTER-1B18E"));
        data.insert(std::make_pair(0x1b18f,"NUSHU CHARACTER-1B18F"));
        data.insert(std::make_pair(0x1b190,"NUSHU CHARACTER-1B190"));
        data.insert(std::make_pair(0x1b191,"NUSHU CHARACTER-1B191"));
        data.insert(std::make_pair(0x1b192,"NUSHU CHARACTER-1B192"));
        data.insert(std::make_pair(0x1b193,"NUSHU CHARACTER-1B193"));
        data.insert(std::make_pair(0x1b194,"NUSHU CHARACTER-1B194"));
        data.insert(std::make_pair(0x1b195,"NUSHU CHARACTER-1B195"));
        data.insert(std::make_pair(0x1b196,"NUSHU CHARACTER-1B196"));
        data.insert(std::make_pair(0x1b197,"NUSHU CHARACTER-1B197"));
        data.insert(std::make_pair(0x1b198,"NUSHU CHARACTER-1B198"));
        data.insert(std::make_pair(0x1b199,"NUSHU CHARACTER-1B199"));
        data.insert(std::make_pair(0x1b19a,"NUSHU CHARACTER-1B19A"));
        data.insert(std::make_pair(0x1b19b,"NUSHU CHARACTER-1B19B"));
        data.insert(std::make_pair(0x1b19c,"NUSHU CHARACTER-1B19C"));
        data.insert(std::make_pair(0x1b19d,"NUSHU CHARACTER-1B19D"));
        data.insert(std::make_pair(0x1b19e,"NUSHU CHARACTER-1B19E"));
        data.insert(std::make_pair(0x1b19f,"NUSHU CHARACTER-1B19F"));
        data.insert(std::make_pair(0x1b1a0,"NUSHU CHARACTER-1B1A0"));
        data.insert(std::make_pair(0x1b1a1,"NUSHU CHARACTER-1B1A1"));
        data.insert(std::make_pair(0x1b1a2,"NUSHU CHARACTER-1B1A2"));
        data.insert(std::make_pair(0x1b1a3,"NUSHU CHARACTER-1B1A3"));
        data.insert(std::make_pair(0x1b1a4,"NUSHU CHARACTER-1B1A4"));
        data.insert(std::make_pair(0x1b1a5,"NUSHU CHARACTER-1B1A5"));
        data.insert(std::make_pair(0x1b1a6,"NUSHU CHARACTER-1B1A6"));
        data.insert(std::make_pair(0x1b1a7,"NUSHU CHARACTER-1B1A7"));
        data.insert(std::make_pair(0x1b1a8,"NUSHU CHARACTER-1B1A8"));
        data.insert(std::make_pair(0x1b1a9,"NUSHU CHARACTER-1B1A9"));
        data.insert(std::make_pair(0x1b1aa,"NUSHU CHARACTER-1B1AA"));
        data.insert(std::make_pair(0x1b1ab,"NUSHU CHARACTER-1B1AB"));
        data.insert(std::make_pair(0x1b1ac,"NUSHU CHARACTER-1B1AC"));
        data.insert(std::make_pair(0x1b1ad,"NUSHU CHARACTER-1B1AD"));
        data.insert(std::make_pair(0x1b1ae,"NUSHU CHARACTER-1B1AE"));
        data.insert(std::make_pair(0x1b1af,"NUSHU CHARACTER-1B1AF"));
        data.insert(std::make_pair(0x1b1b0,"NUSHU CHARACTER-1B1B0"));
        data.insert(std::make_pair(0x1b1b1,"NUSHU CHARACTER-1B1B1"));
        data.insert(std::make_pair(0x1b1b2,"NUSHU CHARACTER-1B1B2"));
        data.insert(std::make_pair(0x1b1b3,"NUSHU CHARACTER-1B1B3"));
        data.insert(std::make_pair(0x1b1b4,"NUSHU CHARACTER-1B1B4"));
        data.insert(std::make_pair(0x1b1b5,"NUSHU CHARACTER-1B1B5"));
        data.insert(std::make_pair(0x1b1b6,"NUSHU CHARACTER-1B1B6"));
        data.insert(std::make_pair(0x1b1b7,"NUSHU CHARACTER-1B1B7"));
        data.insert(std::make_pair(0x1b1b8,"NUSHU CHARACTER-1B1B8"));
        data.insert(std::make_pair(0x1b1b9,"NUSHU CHARACTER-1B1B9"));
        data.insert(std::make_pair(0x1b1ba,"NUSHU CHARACTER-1B1BA"));
        data.insert(std::make_pair(0x1b1bb,"NUSHU CHARACTER-1B1BB"));
        data.insert(std::make_pair(0x1b1bc,"NUSHU CHARACTER-1B1BC"));
        data.insert(std::make_pair(0x1b1bd,"NUSHU CHARACTER-1B1BD"));
        data.insert(std::make_pair(0x1b1be,"NUSHU CHARACTER-1B1BE"));
        data.insert(std::make_pair(0x1b1bf,"NUSHU CHARACTER-1B1BF"));
        data.insert(std::make_pair(0x1b1c0,"NUSHU CHARACTER-1B1C0"));
        data.insert(std::make_pair(0x1b1c1,"NUSHU CHARACTER-1B1C1"));
        data.insert(std::make_pair(0x1b1c2,"NUSHU CHARACTER-1B1C2"));
        data.insert(std::make_pair(0x1b1c3,"NUSHU CHARACTER-1B1C3"));
        data.insert(std::make_pair(0x1b1c4,"NUSHU CHARACTER-1B1C4"));
        data.insert(std::make_pair(0x1b1c5,"NUSHU CHARACTER-1B1C5"));
        data.insert(std::make_pair(0x1b1c6,"NUSHU CHARACTER-1B1C6"));
        data.insert(std::make_pair(0x1b1c7,"NUSHU CHARACTER-1B1C7"));
        data.insert(std::make_pair(0x1b1c8,"NUSHU CHARACTER-1B1C8"));
        data.insert(std::make_pair(0x1b1c9,"NUSHU CHARACTER-1B1C9"));
        data.insert(std::make_pair(0x1b1ca,"NUSHU CHARACTER-1B1CA"));
        data.insert(std::make_pair(0x1b1cb,"NUSHU CHARACTER-1B1CB"));
        data.insert(std::make_pair(0x1b1cc,"NUSHU CHARACTER-1B1CC"));
        data.insert(std::make_pair(0x1b1cd,"NUSHU CHARACTER-1B1CD"));
        data.insert(std::make_pair(0x1b1ce,"NUSHU CHARACTER-1B1CE"));
        data.insert(std::make_pair(0x1b1cf,"NUSHU CHARACTER-1B1CF"));
        data.insert(std::make_pair(0x1b1d0,"NUSHU CHARACTER-1B1D0"));
        data.insert(std::make_pair(0x1b1d1,"NUSHU CHARACTER-1B1D1"));
        data.insert(std::make_pair(0x1b1d2,"NUSHU CHARACTER-1B1D2"));
        data.insert(std::make_pair(0x1b1d3,"NUSHU CHARACTER-1B1D3"));
        data.insert(std::make_pair(0x1b1d4,"NUSHU CHARACTER-1B1D4"));
        data.insert(std::make_pair(0x1b1d5,"NUSHU CHARACTER-1B1D5"));
        data.insert(std::make_pair(0x1b1d6,"NUSHU CHARACTER-1B1D6"));
        data.insert(std::make_pair(0x1b1d7,"NUSHU CHARACTER-1B1D7"));
        data.insert(std::make_pair(0x1b1d8,"NUSHU CHARACTER-1B1D8"));
        data.insert(std::make_pair(0x1b1d9,"NUSHU CHARACTER-1B1D9"));
        data.insert(std::make_pair(0x1b1da,"NUSHU CHARACTER-1B1DA"));
        data.insert(std::make_pair(0x1b1db,"NUSHU CHARACTER-1B1DB"));
        data.insert(std::make_pair(0x1b1dc,"NUSHU CHARACTER-1B1DC"));
        data.insert(std::make_pair(0x1b1dd,"NUSHU CHARACTER-1B1DD"));
        data.insert(std::make_pair(0x1b1de,"NUSHU CHARACTER-1B1DE"));
        data.insert(std::make_pair(0x1b1df,"NUSHU CHARACTER-1B1DF"));
        data.insert(std::make_pair(0x1b1e0,"NUSHU CHARACTER-1B1E0"));
        data.insert(std::make_pair(0x1b1e1,"NUSHU CHARACTER-1B1E1"));
        data.insert(std::make_pair(0x1b1e2,"NUSHU CHARACTER-1B1E2"));
        data.insert(std::make_pair(0x1b1e3,"NUSHU CHARACTER-1B1E3"));
        data.insert(std::make_pair(0x1b1e4,"NUSHU CHARACTER-1B1E4"));
        data.insert(std::make_pair(0x1b1e5,"NUSHU CHARACTER-1B1E5"));
        data.insert(std::make_pair(0x1b1e6,"NUSHU CHARACTER-1B1E6"));
        data.insert(std::make_pair(0x1b1e7,"NUSHU CHARACTER-1B1E7"));
        data.insert(std::make_pair(0x1b1e8,"NUSHU CHARACTER-1B1E8"));
        data.insert(std::make_pair(0x1b1e9,"NUSHU CHARACTER-1B1E9"));
        data.insert(std::make_pair(0x1b1ea,"NUSHU CHARACTER-1B1EA"));
        data.insert(std::make_pair(0x1b1eb,"NUSHU CHARACTER-1B1EB"));
        data.insert(std::make_pair(0x1b1ec,"NUSHU CHARACTER-1B1EC"));
        data.insert(std::make_pair(0x1b1ed,"NUSHU CHARACTER-1B1ED"));
        data.insert(std::make_pair(0x1b1ee,"NUSHU CHARACTER-1B1EE"));
        data.insert(std::make_pair(0x1b1ef,"NUSHU CHARACTER-1B1EF"));
        data.insert(std::make_pair(0x1b1f0,"NUSHU CHARACTER-1B1F0"));
        data.insert(std::make_pair(0x1b1f1,"NUSHU CHARACTER-1B1F1"));
        data.insert(std::make_pair(0x1b1f2,"NUSHU CHARACTER-1B1F2"));
        data.insert(std::make_pair(0x1b1f3,"NUSHU CHARACTER-1B1F3"));
        data.insert(std::make_pair(0x1b1f4,"NUSHU CHARACTER-1B1F4"));
        data.insert(std::make_pair(0x1b1f5,"NUSHU CHARACTER-1B1F5"));
        data.insert(std::make_pair(0x1b1f6,"NUSHU CHARACTER-1B1F6"));
        data.insert(std::make_pair(0x1b1f7,"NUSHU CHARACTER-1B1F7"));
        data.insert(std::make_pair(0x1b1f8,"NUSHU CHARACTER-1B1F8"));
        data.insert(std::make_pair(0x1b1f9,"NUSHU CHARACTER-1B1F9"));
        data.insert(std::make_pair(0x1b1fa,"NUSHU CHARACTER-1B1FA"));
        data.insert(std::make_pair(0x1b1fb,"NUSHU CHARACTER-1B1FB"));
        data.insert(std::make_pair(0x1b1fc,"NUSHU CHARACTER-1B1FC"));
        data.insert(std::make_pair(0x1b1fd,"NUSHU CHARACTER-1B1FD"));
        data.insert(std::make_pair(0x1b1fe,"NUSHU CHARACTER-1B1FE"));
        data.insert(std::make_pair(0x1b1ff,"NUSHU CHARACTER-1B1FF"));
        data.insert(std::make_pair(0x1b200,"NUSHU CHARACTER-1B200"));
        data.insert(std::make_pair(0x1b201,"NUSHU CHARACTER-1B201"));
        data.insert(std::make_pair(0x1b202,"NUSHU CHARACTER-1B202"));
        data.insert(std::make_pair(0x1b203,"NUSHU CHARACTER-1B203"));
        data.insert(std::make_pair(0x1b204,"NUSHU CHARACTER-1B204"));
        data.insert(std::make_pair(0x1b205,"NUSHU CHARACTER-1B205"));
        data.insert(std::make_pair(0x1b206,"NUSHU CHARACTER-1B206"));
        data.insert(std::make_pair(0x1b207,"NUSHU CHARACTER-1B207"));
        data.insert(std::make_pair(0x1b208,"NUSHU CHARACTER-1B208"));
        data.insert(std::make_pair(0x1b209,"NUSHU CHARACTER-1B209"));
        data.insert(std::make_pair(0x1b20a,"NUSHU CHARACTER-1B20A"));
        data.insert(std::make_pair(0x1b20b,"NUSHU CHARACTER-1B20B"));
        data.insert(std::make_pair(0x1b20c,"NUSHU CHARACTER-1B20C"));
        data.insert(std::make_pair(0x1b20d,"NUSHU CHARACTER-1B20D"));
        data.insert(std::make_pair(0x1b20e,"NUSHU CHARACTER-1B20E"));
        data.insert(std::make_pair(0x1b20f,"NUSHU CHARACTER-1B20F"));
        data.insert(std::make_pair(0x1b210,"NUSHU CHARACTER-1B210"));
        data.insert(std::make_pair(0x1b211,"NUSHU CHARACTER-1B211"));
        data.insert(std::make_pair(0x1b212,"NUSHU CHARACTER-1B212"));
        data.insert(std::make_pair(0x1b213,"NUSHU CHARACTER-1B213"));
        data.insert(std::make_pair(0x1b214,"NUSHU CHARACTER-1B214"));
        data.insert(std::make_pair(0x1b215,"NUSHU CHARACTER-1B215"));
        data.insert(std::make_pair(0x1b216,"NUSHU CHARACTER-1B216"));
        data.insert(std::make_pair(0x1b217,"NUSHU CHARACTER-1B217"));
        data.insert(std::make_pair(0x1b218,"NUSHU CHARACTER-1B218"));
        data.insert(std::make_pair(0x1b219,"NUSHU CHARACTER-1B219"));
        data.insert(std::make_pair(0x1b21a,"NUSHU CHARACTER-1B21A"));
        data.insert(std::make_pair(0x1b21b,"NUSHU CHARACTER-1B21B"));
        data.insert(std::make_pair(0x1b21c,"NUSHU CHARACTER-1B21C"));
        data.insert(std::make_pair(0x1b21d,"NUSHU CHARACTER-1B21D"));
        data.insert(std::make_pair(0x1b21e,"NUSHU CHARACTER-1B21E"));
        data.insert(std::make_pair(0x1b21f,"NUSHU CHARACTER-1B21F"));
        data.insert(std::make_pair(0x1b220,"NUSHU CHARACTER-1B220"));
        data.insert(std::make_pair(0x1b221,"NUSHU CHARACTER-1B221"));
        data.insert(std::make_pair(0x1b222,"NUSHU CHARACTER-1B222"));
        data.insert(std::make_pair(0x1b223,"NUSHU CHARACTER-1B223"));
        data.insert(std::make_pair(0x1b224,"NUSHU CHARACTER-1B224"));
        data.insert(std::make_pair(0x1b225,"NUSHU CHARACTER-1B225"));
        data.insert(std::make_pair(0x1b226,"NUSHU CHARACTER-1B226"));
        data.insert(std::make_pair(0x1b227,"NUSHU CHARACTER-1B227"));
        data.insert(std::make_pair(0x1b228,"NUSHU CHARACTER-1B228"));
        data.insert(std::make_pair(0x1b229,"NUSHU CHARACTER-1B229"));
        data.insert(std::make_pair(0x1b22a,"NUSHU CHARACTER-1B22A"));
        data.insert(std::make_pair(0x1b22b,"NUSHU CHARACTER-1B22B"));
        data.insert(std::make_pair(0x1b22c,"NUSHU CHARACTER-1B22C"));
        data.insert(std::make_pair(0x1b22d,"NUSHU CHARACTER-1B22D"));
        data.insert(std::make_pair(0x1b22e,"NUSHU CHARACTER-1B22E"));
        data.insert(std::make_pair(0x1b22f,"NUSHU CHARACTER-1B22F"));
        data.insert(std::make_pair(0x1b230,"NUSHU CHARACTER-1B230"));
        data.insert(std::make_pair(0x1b231,"NUSHU CHARACTER-1B231"));
        data.insert(std::make_pair(0x1b232,"NUSHU CHARACTER-1B232"));
        data.insert(std::make_pair(0x1b233,"NUSHU CHARACTER-1B233"));
        data.insert(std::make_pair(0x1b234,"NUSHU CHARACTER-1B234"));
        data.insert(std::make_pair(0x1b235,"NUSHU CHARACTER-1B235"));
        data.insert(std::make_pair(0x1b236,"NUSHU CHARACTER-1B236"));
        data.insert(std::make_pair(0x1b237,"NUSHU CHARACTER-1B237"));
        data.insert(std::make_pair(0x1b238,"NUSHU CHARACTER-1B238"));
        data.insert(std::make_pair(0x1b239,"NUSHU CHARACTER-1B239"));
        data.insert(std::make_pair(0x1b23a,"NUSHU CHARACTER-1B23A"));
        data.insert(std::make_pair(0x1b23b,"NUSHU CHARACTER-1B23B"));
        data.insert(std::make_pair(0x1b23c,"NUSHU CHARACTER-1B23C"));
        data.insert(std::make_pair(0x1b23d,"NUSHU CHARACTER-1B23D"));
        data.insert(std::make_pair(0x1b23e,"NUSHU CHARACTER-1B23E"));
        data.insert(std::make_pair(0x1b23f,"NUSHU CHARACTER-1B23F"));
        data.insert(std::make_pair(0x1b240,"NUSHU CHARACTER-1B240"));
        data.insert(std::make_pair(0x1b241,"NUSHU CHARACTER-1B241"));
        data.insert(std::make_pair(0x1b242,"NUSHU CHARACTER-1B242"));
        data.insert(std::make_pair(0x1b243,"NUSHU CHARACTER-1B243"));
        data.insert(std::make_pair(0x1b244,"NUSHU CHARACTER-1B244"));
        data.insert(std::make_pair(0x1b245,"NUSHU CHARACTER-1B245"));
        data.insert(std::make_pair(0x1b246,"NUSHU CHARACTER-1B246"));
        data.insert(std::make_pair(0x1b247,"NUSHU CHARACTER-1B247"));
        data.insert(std::make_pair(0x1b248,"NUSHU CHARACTER-1B248"));
        data.insert(std::make_pair(0x1b249,"NUSHU CHARACTER-1B249"));
        data.insert(std::make_pair(0x1b24a,"NUSHU CHARACTER-1B24A"));
        data.insert(std::make_pair(0x1b24b,"NUSHU CHARACTER-1B24B"));
        data.insert(std::make_pair(0x1b24c,"NUSHU CHARACTER-1B24C"));
        data.insert(std::make_pair(0x1b24d,"NUSHU CHARACTER-1B24D"));
        data.insert(std::make_pair(0x1b24e,"NUSHU CHARACTER-1B24E"));
        data.insert(std::make_pair(0x1b24f,"NUSHU CHARACTER-1B24F"));
        data.insert(std::make_pair(0x1b250,"NUSHU CHARACTER-1B250"));
        data.insert(std::make_pair(0x1b251,"NUSHU CHARACTER-1B251"));
        data.insert(std::make_pair(0x1b252,"NUSHU CHARACTER-1B252"));
        data.insert(std::make_pair(0x1b253,"NUSHU CHARACTER-1B253"));
        data.insert(std::make_pair(0x1b254,"NUSHU CHARACTER-1B254"));
        data.insert(std::make_pair(0x1b255,"NUSHU CHARACTER-1B255"));
        data.insert(std::make_pair(0x1b256,"NUSHU CHARACTER-1B256"));
        data.insert(std::make_pair(0x1b257,"NUSHU CHARACTER-1B257"));
        data.insert(std::make_pair(0x1b258,"NUSHU CHARACTER-1B258"));
        data.insert(std::make_pair(0x1b259,"NUSHU CHARACTER-1B259"));
        data.insert(std::make_pair(0x1b25a,"NUSHU CHARACTER-1B25A"));
        data.insert(std::make_pair(0x1b25b,"NUSHU CHARACTER-1B25B"));
        data.insert(std::make_pair(0x1b25c,"NUSHU CHARACTER-1B25C"));
        data.insert(std::make_pair(0x1b25d,"NUSHU CHARACTER-1B25D"));
        data.insert(std::make_pair(0x1b25e,"NUSHU CHARACTER-1B25E"));
        data.insert(std::make_pair(0x1b25f,"NUSHU CHARACTER-1B25F"));
        data.insert(std::make_pair(0x1b260,"NUSHU CHARACTER-1B260"));
        data.insert(std::make_pair(0x1b261,"NUSHU CHARACTER-1B261"));
        data.insert(std::make_pair(0x1b262,"NUSHU CHARACTER-1B262"));
        data.insert(std::make_pair(0x1b263,"NUSHU CHARACTER-1B263"));
        data.insert(std::make_pair(0x1b264,"NUSHU CHARACTER-1B264"));
        data.insert(std::make_pair(0x1b265,"NUSHU CHARACTER-1B265"));
        data.insert(std::make_pair(0x1b266,"NUSHU CHARACTER-1B266"));
        data.insert(std::make_pair(0x1b267,"NUSHU CHARACTER-1B267"));
        data.insert(std::make_pair(0x1b268,"NUSHU CHARACTER-1B268"));
        data.insert(std::make_pair(0x1b269,"NUSHU CHARACTER-1B269"));
        data.insert(std::make_pair(0x1b26a,"NUSHU CHARACTER-1B26A"));
        data.insert(std::make_pair(0x1b26b,"NUSHU CHARACTER-1B26B"));
        data.insert(std::make_pair(0x1b26c,"NUSHU CHARACTER-1B26C"));
        data.insert(std::make_pair(0x1b26d,"NUSHU CHARACTER-1B26D"));
        data.insert(std::make_pair(0x1b26e,"NUSHU CHARACTER-1B26E"));
        data.insert(std::make_pair(0x1b26f,"NUSHU CHARACTER-1B26F"));
        data.insert(std::make_pair(0x1b270,"NUSHU CHARACTER-1B270"));
        data.insert(std::make_pair(0x1b271,"NUSHU CHARACTER-1B271"));
        data.insert(std::make_pair(0x1b272,"NUSHU CHARACTER-1B272"));
        data.insert(std::make_pair(0x1b273,"NUSHU CHARACTER-1B273"));
        data.insert(std::make_pair(0x1b274,"NUSHU CHARACTER-1B274"));
        data.insert(std::make_pair(0x1b275,"NUSHU CHARACTER-1B275"));
        data.insert(std::make_pair(0x1b276,"NUSHU CHARACTER-1B276"));
        data.insert(std::make_pair(0x1b277,"NUSHU CHARACTER-1B277"));
        data.insert(std::make_pair(0x1b278,"NUSHU CHARACTER-1B278"));
        data.insert(std::make_pair(0x1b279,"NUSHU CHARACTER-1B279"));
        data.insert(std::make_pair(0x1b27a,"NUSHU CHARACTER-1B27A"));
        data.insert(std::make_pair(0x1b27b,"NUSHU CHARACTER-1B27B"));
        data.insert(std::make_pair(0x1b27c,"NUSHU CHARACTER-1B27C"));
        data.insert(std::make_pair(0x1b27d,"NUSHU CHARACTER-1B27D"));
        data.insert(std::make_pair(0x1b27e,"NUSHU CHARACTER-1B27E"));
        data.insert(std::make_pair(0x1b27f,"NUSHU CHARACTER-1B27F"));
        data.insert(std::make_pair(0x1b280,"NUSHU CHARACTER-1B280"));
        data.insert(std::make_pair(0x1b281,"NUSHU CHARACTER-1B281"));
        data.insert(std::make_pair(0x1b282,"NUSHU CHARACTER-1B282"));
        data.insert(std::make_pair(0x1b283,"NUSHU CHARACTER-1B283"));
        data.insert(std::make_pair(0x1b284,"NUSHU CHARACTER-1B284"));
        data.insert(std::make_pair(0x1b285,"NUSHU CHARACTER-1B285"));
        data.insert(std::make_pair(0x1b286,"NUSHU CHARACTER-1B286"));
        data.insert(std::make_pair(0x1b287,"NUSHU CHARACTER-1B287"));
        data.insert(std::make_pair(0x1b288,"NUSHU CHARACTER-1B288"));
        data.insert(std::make_pair(0x1b289,"NUSHU CHARACTER-1B289"));
        data.insert(std::make_pair(0x1b28a,"NUSHU CHARACTER-1B28A"));
        data.insert(std::make_pair(0x1b28b,"NUSHU CHARACTER-1B28B"));
        data.insert(std::make_pair(0x1b28c,"NUSHU CHARACTER-1B28C"));
        data.insert(std::make_pair(0x1b28d,"NUSHU CHARACTER-1B28D"));
        data.insert(std::make_pair(0x1b28e,"NUSHU CHARACTER-1B28E"));
        data.insert(std::make_pair(0x1b28f,"NUSHU CHARACTER-1B28F"));
        data.insert(std::make_pair(0x1b290,"NUSHU CHARACTER-1B290"));
        data.insert(std::make_pair(0x1b291,"NUSHU CHARACTER-1B291"));
        data.insert(std::make_pair(0x1b292,"NUSHU CHARACTER-1B292"));
        data.insert(std::make_pair(0x1b293,"NUSHU CHARACTER-1B293"));
        data.insert(std::make_pair(0x1b294,"NUSHU CHARACTER-1B294"));
        data.insert(std::make_pair(0x1b295,"NUSHU CHARACTER-1B295"));
        data.insert(std::make_pair(0x1b296,"NUSHU CHARACTER-1B296"));
        data.insert(std::make_pair(0x1b297,"NUSHU CHARACTER-1B297"));
        data.insert(std::make_pair(0x1b298,"NUSHU CHARACTER-1B298"));
        data.insert(std::make_pair(0x1b299,"NUSHU CHARACTER-1B299"));
        data.insert(std::make_pair(0x1b29a,"NUSHU CHARACTER-1B29A"));
        data.insert(std::make_pair(0x1b29b,"NUSHU CHARACTER-1B29B"));
        data.insert(std::make_pair(0x1b29c,"NUSHU CHARACTER-1B29C"));
        data.insert(std::make_pair(0x1b29d,"NUSHU CHARACTER-1B29D"));
        data.insert(std::make_pair(0x1b29e,"NUSHU CHARACTER-1B29E"));
        data.insert(std::make_pair(0x1b29f,"NUSHU CHARACTER-1B29F"));
        data.insert(std::make_pair(0x1b2a0,"NUSHU CHARACTER-1B2A0"));
        data.insert(std::make_pair(0x1b2a1,"NUSHU CHARACTER-1B2A1"));
        data.insert(std::make_pair(0x1b2a2,"NUSHU CHARACTER-1B2A2"));
        data.insert(std::make_pair(0x1b2a3,"NUSHU CHARACTER-1B2A3"));
        data.insert(std::make_pair(0x1b2a4,"NUSHU CHARACTER-1B2A4"));
        data.insert(std::make_pair(0x1b2a5,"NUSHU CHARACTER-1B2A5"));
        data.insert(std::make_pair(0x1b2a6,"NUSHU CHARACTER-1B2A6"));
        data.insert(std::make_pair(0x1b2a7,"NUSHU CHARACTER-1B2A7"));
        data.insert(std::make_pair(0x1b2a8,"NUSHU CHARACTER-1B2A8"));
        data.insert(std::make_pair(0x1b2a9,"NUSHU CHARACTER-1B2A9"));
        data.insert(std::make_pair(0x1b2aa,"NUSHU CHARACTER-1B2AA"));
        data.insert(std::make_pair(0x1b2ab,"NUSHU CHARACTER-1B2AB"));
        data.insert(std::make_pair(0x1b2ac,"NUSHU CHARACTER-1B2AC"));
        data.insert(std::make_pair(0x1b2ad,"NUSHU CHARACTER-1B2AD"));
        data.insert(std::make_pair(0x1b2ae,"NUSHU CHARACTER-1B2AE"));
        data.insert(std::make_pair(0x1b2af,"NUSHU CHARACTER-1B2AF"));
        data.insert(std::make_pair(0x1b2b0,"NUSHU CHARACTER-1B2B0"));
        data.insert(std::make_pair(0x1b2b1,"NUSHU CHARACTER-1B2B1"));
        data.insert(std::make_pair(0x1b2b2,"NUSHU CHARACTER-1B2B2"));
        data.insert(std::make_pair(0x1b2b3,"NUSHU CHARACTER-1B2B3"));
        data.insert(std::make_pair(0x1b2b4,"NUSHU CHARACTER-1B2B4"));
        data.insert(std::make_pair(0x1b2b5,"NUSHU CHARACTER-1B2B5"));
        data.insert(std::make_pair(0x1b2b6,"NUSHU CHARACTER-1B2B6"));
        data.insert(std::make_pair(0x1b2b7,"NUSHU CHARACTER-1B2B7"));
        data.insert(std::make_pair(0x1b2b8,"NUSHU CHARACTER-1B2B8"));
        data.insert(std::make_pair(0x1b2b9,"NUSHU CHARACTER-1B2B9"));
        data.insert(std::make_pair(0x1b2ba,"NUSHU CHARACTER-1B2BA"));
        data.insert(std::make_pair(0x1b2bb,"NUSHU CHARACTER-1B2BB"));
        data.insert(std::make_pair(0x1b2bc,"NUSHU CHARACTER-1B2BC"));
        data.insert(std::make_pair(0x1b2bd,"NUSHU CHARACTER-1B2BD"));
        data.insert(std::make_pair(0x1b2be,"NUSHU CHARACTER-1B2BE"));
        data.insert(std::make_pair(0x1b2bf,"NUSHU CHARACTER-1B2BF"));
        data.insert(std::make_pair(0x1b2c0,"NUSHU CHARACTER-1B2C0"));
        data.insert(std::make_pair(0x1b2c1,"NUSHU CHARACTER-1B2C1"));
        data.insert(std::make_pair(0x1b2c2,"NUSHU CHARACTER-1B2C2"));
        data.insert(std::make_pair(0x1b2c3,"NUSHU CHARACTER-1B2C3"));
        data.insert(std::make_pair(0x1b2c4,"NUSHU CHARACTER-1B2C4"));
        data.insert(std::make_pair(0x1b2c5,"NUSHU CHARACTER-1B2C5"));
        data.insert(std::make_pair(0x1b2c6,"NUSHU CHARACTER-1B2C6"));
        data.insert(std::make_pair(0x1b2c7,"NUSHU CHARACTER-1B2C7"));
        data.insert(std::make_pair(0x1b2c8,"NUSHU CHARACTER-1B2C8"));
        data.insert(std::make_pair(0x1b2c9,"NUSHU CHARACTER-1B2C9"));
        data.insert(std::make_pair(0x1b2ca,"NUSHU CHARACTER-1B2CA"));
        data.insert(std::make_pair(0x1b2cb,"NUSHU CHARACTER-1B2CB"));
        data.insert(std::make_pair(0x1b2cc,"NUSHU CHARACTER-1B2CC"));
        data.insert(std::make_pair(0x1b2cd,"NUSHU CHARACTER-1B2CD"));
        data.insert(std::make_pair(0x1b2ce,"NUSHU CHARACTER-1B2CE"));
        data.insert(std::make_pair(0x1b2cf,"NUSHU CHARACTER-1B2CF"));
        data.insert(std::make_pair(0x1b2d0,"NUSHU CHARACTER-1B2D0"));
        data.insert(std::make_pair(0x1b2d1,"NUSHU CHARACTER-1B2D1"));
        data.insert(std::make_pair(0x1b2d2,"NUSHU CHARACTER-1B2D2"));
        data.insert(std::make_pair(0x1b2d3,"NUSHU CHARACTER-1B2D3"));
        data.insert(std::make_pair(0x1b2d4,"NUSHU CHARACTER-1B2D4"));
        data.insert(std::make_pair(0x1b2d5,"NUSHU CHARACTER-1B2D5"));
        data.insert(std::make_pair(0x1b2d6,"NUSHU CHARACTER-1B2D6"));
        data.insert(std::make_pair(0x1b2d7,"NUSHU CHARACTER-1B2D7"));
        data.insert(std::make_pair(0x1b2d8,"NUSHU CHARACTER-1B2D8"));
        data.insert(std::make_pair(0x1b2d9,"NUSHU CHARACTER-1B2D9"));
        data.insert(std::make_pair(0x1b2da,"NUSHU CHARACTER-1B2DA"));
        data.insert(std::make_pair(0x1b2db,"NUSHU CHARACTER-1B2DB"));
        data.insert(std::make_pair(0x1b2dc,"NUSHU CHARACTER-1B2DC"));
        data.insert(std::make_pair(0x1b2dd,"NUSHU CHARACTER-1B2DD"));
        data.insert(std::make_pair(0x1b2de,"NUSHU CHARACTER-1B2DE"));
        data.insert(std::make_pair(0x1b2df,"NUSHU CHARACTER-1B2DF"));
        data.insert(std::make_pair(0x1b2e0,"NUSHU CHARACTER-1B2E0"));
        data.insert(std::make_pair(0x1b2e1,"NUSHU CHARACTER-1B2E1"));
        data.insert(std::make_pair(0x1b2e2,"NUSHU CHARACTER-1B2E2"));
        data.insert(std::make_pair(0x1b2e3,"NUSHU CHARACTER-1B2E3"));
        data.insert(std::make_pair(0x1b2e4,"NUSHU CHARACTER-1B2E4"));
        data.insert(std::make_pair(0x1b2e5,"NUSHU CHARACTER-1B2E5"));
        data.insert(std::make_pair(0x1b2e6,"NUSHU CHARACTER-1B2E6"));
        data.insert(std::make_pair(0x1b2e7,"NUSHU CHARACTER-1B2E7"));
        data.insert(std::make_pair(0x1b2e8,"NUSHU CHARACTER-1B2E8"));
        data.insert(std::make_pair(0x1b2e9,"NUSHU CHARACTER-1B2E9"));
        data.insert(std::make_pair(0x1b2ea,"NUSHU CHARACTER-1B2EA"));
        data.insert(std::make_pair(0x1b2eb,"NUSHU CHARACTER-1B2EB"));
        data.insert(std::make_pair(0x1b2ec,"NUSHU CHARACTER-1B2EC"));
        data.insert(std::make_pair(0x1b2ed,"NUSHU CHARACTER-1B2ED"));
        data.insert(std::make_pair(0x1b2ee,"NUSHU CHARACTER-1B2EE"));
        data.insert(std::make_pair(0x1b2ef,"NUSHU CHARACTER-1B2EF"));
        data.insert(std::make_pair(0x1b2f0,"NUSHU CHARACTER-1B2F0"));
        data.insert(std::make_pair(0x1b2f1,"NUSHU CHARACTER-1B2F1"));
        data.insert(std::make_pair(0x1b2f2,"NUSHU CHARACTER-1B2F2"));
        data.insert(std::make_pair(0x1b2f3,"NUSHU CHARACTER-1B2F3"));
        data.insert(std::make_pair(0x1b2f4,"NUSHU CHARACTER-1B2F4"));
        data.insert(std::make_pair(0x1b2f5,"NUSHU CHARACTER-1B2F5"));
        data.insert(std::make_pair(0x1b2f6,"NUSHU CHARACTER-1B2F6"));
        data.insert(std::make_pair(0x1b2f7,"NUSHU CHARACTER-1B2F7"));
        data.insert(std::make_pair(0x1b2f8,"NUSHU CHARACTER-1B2F8"));
        data.insert(std::make_pair(0x1b2f9,"NUSHU CHARACTER-1B2F9"));
        data.insert(std::make_pair(0x1b2fa,"NUSHU CHARACTER-1B2FA"));
        data.insert(std::make_pair(0x1b2fb,"NUSHU CHARACTER-1B2FB"));
        data.insert(std::make_pair(0x1bc00,"DUPLOYAN LETTER H"));
        data.insert(std::make_pair(0x1bc01,"DUPLOYAN LETTER X"));
        data.insert(std::make_pair(0x1bc02,"DUPLOYAN LETTER P"));
        data.insert(std::make_pair(0x1bc03,"DUPLOYAN LETTER T"));
        data.insert(std::make_pair(0x1bc04,"DUPLOYAN LETTER F"));
        data.insert(std::make_pair(0x1bc05,"DUPLOYAN LETTER K"));
        data.insert(std::make_pair(0x1bc06,"DUPLOYAN LETTER L"));
        data.insert(std::make_pair(0x1bc07,"DUPLOYAN LETTER B"));
        data.insert(std::make_pair(0x1bc08,"DUPLOYAN LETTER D"));
        data.insert(std::make_pair(0x1bc09,"DUPLOYAN LETTER V"));
        data.insert(std::make_pair(0x1bc0a,"DUPLOYAN LETTER G"));
        data.insert(std::make_pair(0x1bc0b,"DUPLOYAN LETTER R"));
        data.insert(std::make_pair(0x1bc0c,"DUPLOYAN LETTER P N"));
        data.insert(std::make_pair(0x1bc0d,"DUPLOYAN LETTER D S"));
        data.insert(std::make_pair(0x1bc0e,"DUPLOYAN LETTER F N"));
        data.insert(std::make_pair(0x1bc0f,"DUPLOYAN LETTER K M"));
        data.insert(std::make_pair(0x1bc10,"DUPLOYAN LETTER R S"));
        data.insert(std::make_pair(0x1bc11,"DUPLOYAN LETTER TH"));
        data.insert(std::make_pair(0x1bc12,"DUPLOYAN LETTER SLOAN DH"));
        data.insert(std::make_pair(0x1bc13,"DUPLOYAN LETTER DH"));
        data.insert(std::make_pair(0x1bc14,"DUPLOYAN LETTER KK"));
        data.insert(std::make_pair(0x1bc15,"DUPLOYAN LETTER SLOAN J"));
        data.insert(std::make_pair(0x1bc16,"DUPLOYAN LETTER HL"));
        data.insert(std::make_pair(0x1bc17,"DUPLOYAN LETTER LH"));
        data.insert(std::make_pair(0x1bc18,"DUPLOYAN LETTER RH"));
        data.insert(std::make_pair(0x1bc19,"DUPLOYAN LETTER M"));
        data.insert(std::make_pair(0x1bc1a,"DUPLOYAN LETTER N"));
        data.insert(std::make_pair(0x1bc1b,"DUPLOYAN LETTER J"));
        data.insert(std::make_pair(0x1bc1c,"DUPLOYAN LETTER S"));
        data.insert(std::make_pair(0x1bc1d,"DUPLOYAN LETTER M N"));
        data.insert(std::make_pair(0x1bc1e,"DUPLOYAN LETTER N M"));
        data.insert(std::make_pair(0x1bc1f,"DUPLOYAN LETTER J M"));
        data.insert(std::make_pair(0x1bc20,"DUPLOYAN LETTER S J"));
        data.insert(std::make_pair(0x1bc21,"DUPLOYAN LETTER M WITH DOT"));
        data.insert(std::make_pair(0x1bc22,"DUPLOYAN LETTER N WITH DOT"));
        data.insert(std::make_pair(0x1bc23,"DUPLOYAN LETTER J WITH DOT"));
        data.insert(std::make_pair(0x1bc24,"DUPLOYAN LETTER J WITH DOTS INSIDE AND ABOVE"));
        data.insert(std::make_pair(0x1bc25,"DUPLOYAN LETTER S WITH DOT"));
        data.insert(std::make_pair(0x1bc26,"DUPLOYAN LETTER S WITH DOT BELOW"));
        data.insert(std::make_pair(0x1bc27,"DUPLOYAN LETTER M S"));
        data.insert(std::make_pair(0x1bc28,"DUPLOYAN LETTER N S"));
        data.insert(std::make_pair(0x1bc29,"DUPLOYAN LETTER J S"));
        data.insert(std::make_pair(0x1bc2a,"DUPLOYAN LETTER S S"));
        data.insert(std::make_pair(0x1bc2b,"DUPLOYAN LETTER M N S"));
        data.insert(std::make_pair(0x1bc2c,"DUPLOYAN LETTER N M S"));
        data.insert(std::make_pair(0x1bc2d,"DUPLOYAN LETTER J M S"));
        data.insert(std::make_pair(0x1bc2e,"DUPLOYAN LETTER S J S"));
        data.insert(std::make_pair(0x1bc2f,"DUPLOYAN LETTER J S WITH DOT"));
        data.insert(std::make_pair(0x1bc30,"DUPLOYAN LETTER J N"));
        data.insert(std::make_pair(0x1bc31,"DUPLOYAN LETTER J N S"));
        data.insert(std::make_pair(0x1bc32,"DUPLOYAN LETTER S T"));
        data.insert(std::make_pair(0x1bc33,"DUPLOYAN LETTER S T R"));
        data.insert(std::make_pair(0x1bc34,"DUPLOYAN LETTER S P"));
        data.insert(std::make_pair(0x1bc35,"DUPLOYAN LETTER S P R"));
        data.insert(std::make_pair(0x1bc36,"DUPLOYAN LETTER T S"));
        data.insert(std::make_pair(0x1bc37,"DUPLOYAN LETTER T R S"));
        data.insert(std::make_pair(0x1bc38,"DUPLOYAN LETTER W"));
        data.insert(std::make_pair(0x1bc39,"DUPLOYAN LETTER WH"));
        data.insert(std::make_pair(0x1bc3a,"DUPLOYAN LETTER W R"));
        data.insert(std::make_pair(0x1bc3b,"DUPLOYAN LETTER S N"));
        data.insert(std::make_pair(0x1bc3c,"DUPLOYAN LETTER S M"));
        data.insert(std::make_pair(0x1bc3d,"DUPLOYAN LETTER K R S"));
        data.insert(std::make_pair(0x1bc3e,"DUPLOYAN LETTER G R S"));
        data.insert(std::make_pair(0x1bc3f,"DUPLOYAN LETTER S K"));
        data.insert(std::make_pair(0x1bc40,"DUPLOYAN LETTER S K R"));
        data.insert(std::make_pair(0x1bc41,"DUPLOYAN LETTER A"));
        data.insert(std::make_pair(0x1bc42,"DUPLOYAN LETTER SLOAN OW"));
        data.insert(std::make_pair(0x1bc43,"DUPLOYAN LETTER OA"));
        data.insert(std::make_pair(0x1bc44,"DUPLOYAN LETTER O"));
        data.insert(std::make_pair(0x1bc45,"DUPLOYAN LETTER AOU"));
        data.insert(std::make_pair(0x1bc46,"DUPLOYAN LETTER I"));
        data.insert(std::make_pair(0x1bc47,"DUPLOYAN LETTER E"));
        data.insert(std::make_pair(0x1bc48,"DUPLOYAN LETTER IE"));
        data.insert(std::make_pair(0x1bc49,"DUPLOYAN LETTER SHORT I"));
        data.insert(std::make_pair(0x1bc4a,"DUPLOYAN LETTER UI"));
        data.insert(std::make_pair(0x1bc4b,"DUPLOYAN LETTER EE"));
        data.insert(std::make_pair(0x1bc4c,"DUPLOYAN LETTER SLOAN EH"));
        data.insert(std::make_pair(0x1bc4d,"DUPLOYAN LETTER ROMANIAN I"));
        data.insert(std::make_pair(0x1bc4e,"DUPLOYAN LETTER SLOAN EE"));
        data.insert(std::make_pair(0x1bc4f,"DUPLOYAN LETTER LONG I"));
        data.insert(std::make_pair(0x1bc50,"DUPLOYAN LETTER YE"));
        data.insert(std::make_pair(0x1bc51,"DUPLOYAN LETTER U"));
        data.insert(std::make_pair(0x1bc52,"DUPLOYAN LETTER EU"));
        data.insert(std::make_pair(0x1bc53,"DUPLOYAN LETTER XW"));
        data.insert(std::make_pair(0x1bc54,"DUPLOYAN LETTER U N"));
        data.insert(std::make_pair(0x1bc55,"DUPLOYAN LETTER LONG U"));
        data.insert(std::make_pair(0x1bc56,"DUPLOYAN LETTER ROMANIAN U"));
        data.insert(std::make_pair(0x1bc57,"DUPLOYAN LETTER UH"));
        data.insert(std::make_pair(0x1bc58,"DUPLOYAN LETTER SLOAN U"));
        data.insert(std::make_pair(0x1bc59,"DUPLOYAN LETTER OOH"));
        data.insert(std::make_pair(0x1bc5a,"DUPLOYAN LETTER OW"));
        data.insert(std::make_pair(0x1bc5b,"DUPLOYAN LETTER OU"));
        data.insert(std::make_pair(0x1bc5c,"DUPLOYAN LETTER WA"));
        data.insert(std::make_pair(0x1bc5d,"DUPLOYAN LETTER WO"));
        data.insert(std::make_pair(0x1bc5e,"DUPLOYAN LETTER WI"));
        data.insert(std::make_pair(0x1bc5f,"DUPLOYAN LETTER WEI"));
        data.insert(std::make_pair(0x1bc60,"DUPLOYAN LETTER WOW"));
        data.insert(std::make_pair(0x1bc61,"DUPLOYAN LETTER NASAL U"));
        data.insert(std::make_pair(0x1bc62,"DUPLOYAN LETTER NASAL O"));
        data.insert(std::make_pair(0x1bc63,"DUPLOYAN LETTER NASAL I"));
        data.insert(std::make_pair(0x1bc64,"DUPLOYAN LETTER NASAL A"));
        data.insert(std::make_pair(0x1bc65,"DUPLOYAN LETTER PERNIN AN"));
        data.insert(std::make_pair(0x1bc66,"DUPLOYAN LETTER PERNIN AM"));
        data.insert(std::make_pair(0x1bc67,"DUPLOYAN LETTER SLOAN EN"));
        data.insert(std::make_pair(0x1bc68,"DUPLOYAN LETTER SLOAN AN"));
        data.insert(std::make_pair(0x1bc69,"DUPLOYAN LETTER SLOAN ON"));
        data.insert(std::make_pair(0x1bc6a,"DUPLOYAN LETTER VOCALIC M"));
        data.insert(std::make_pair(0x1bc70,"DUPLOYAN AFFIX LEFT HORIZONTAL SECANT"));
        data.insert(std::make_pair(0x1bc71,"DUPLOYAN AFFIX MID HORIZONTAL SECANT"));
        data.insert(std::make_pair(0x1bc72,"DUPLOYAN AFFIX RIGHT HORIZONTAL SECANT"));
        data.insert(std::make_pair(0x1bc73,"DUPLOYAN AFFIX LOW VERTICAL SECANT"));
        data.insert(std::make_pair(0x1bc74,"DUPLOYAN AFFIX MID VERTICAL SECANT"));
        data.insert(std::make_pair(0x1bc75,"DUPLOYAN AFFIX HIGH VERTICAL SECANT"));
        data.insert(std::make_pair(0x1bc76,"DUPLOYAN AFFIX ATTACHED SECANT"));
        data.insert(std::make_pair(0x1bc77,"DUPLOYAN AFFIX ATTACHED LEFT-TO-RIGHT SECANT"));
        data.insert(std::make_pair(0x1bc78,"DUPLOYAN AFFIX ATTACHED TANGENT"));
        data.insert(std::make_pair(0x1bc79,"DUPLOYAN AFFIX ATTACHED TAIL"));
        data.insert(std::make_pair(0x1bc7a,"DUPLOYAN AFFIX ATTACHED E HOOK"));
        data.insert(std::make_pair(0x1bc7b,"DUPLOYAN AFFIX ATTACHED I HOOK"));
        data.insert(std::make_pair(0x1bc7c,"DUPLOYAN AFFIX ATTACHED TANGENT HOOK"));
        data.insert(std::make_pair(0x1bc80,"DUPLOYAN AFFIX HIGH ACUTE"));
        data.insert(std::make_pair(0x1bc81,"DUPLOYAN AFFIX HIGH TIGHT ACUTE"));
        data.insert(std::make_pair(0x1bc82,"DUPLOYAN AFFIX HIGH GRAVE"));
        data.insert(std::make_pair(0x1bc83,"DUPLOYAN AFFIX HIGH LONG GRAVE"));
        data.insert(std::make_pair(0x1bc84,"DUPLOYAN AFFIX HIGH DOT"));
        data.insert(std::make_pair(0x1bc85,"DUPLOYAN AFFIX HIGH CIRCLE"));
        data.insert(std::make_pair(0x1bc86,"DUPLOYAN AFFIX HIGH LINE"));
        data.insert(std::make_pair(0x1bc87,"DUPLOYAN AFFIX HIGH WAVE"));
        data.insert(std::make_pair(0x1bc88,"DUPLOYAN AFFIX HIGH VERTICAL"));
        data.insert(std::make_pair(0x1bc90,"DUPLOYAN AFFIX LOW ACUTE"));
        data.insert(std::make_pair(0x1bc91,"DUPLOYAN AFFIX LOW TIGHT ACUTE"));
        data.insert(std::make_pair(0x1bc92,"DUPLOYAN AFFIX LOW GRAVE"));
        data.insert(std::make_pair(0x1bc93,"DUPLOYAN AFFIX LOW LONG GRAVE"));
        data.insert(std::make_pair(0x1bc94,"DUPLOYAN AFFIX LOW DOT"));
        data.insert(std::make_pair(0x1bc95,"DUPLOYAN AFFIX LOW CIRCLE"));
        data.insert(std::make_pair(0x1bc96,"DUPLOYAN AFFIX LOW LINE"));
        data.insert(std::make_pair(0x1bc97,"DUPLOYAN AFFIX LOW WAVE"));
        data.insert(std::make_pair(0x1bc98,"DUPLOYAN AFFIX LOW VERTICAL"));
        data.insert(std::make_pair(0x1bc99,"DUPLOYAN AFFIX LOW ARROW"));
        data.insert(std::make_pair(0x1bc9c,"DUPLOYAN SIGN O WITH CROSS"));
        data.insert(std::make_pair(0x1bc9d,"DUPLOYAN THICK LETTER SELECTOR"));
        data.insert(std::make_pair(0x1bc9e,"DUPLOYAN DOUBLE MARK"));
        data.insert(std::make_pair(0x1bc9f,"DUPLOYAN PUNCTUATION CHINOOK FULL STOP"));
        data.insert(std::make_pair(0x1bca0,"SHORTHAND FORMAT LETTER OVERLAP"));
        data.insert(std::make_pair(0x1bca1,"SHORTHAND FORMAT CONTINUING OVERLAP"));
        data.insert(std::make_pair(0x1bca2,"SHORTHAND FORMAT DOWN STEP"));
        data.insert(std::make_pair(0x1bca3,"SHORTHAND FORMAT UP STEP"));
        data.insert(std::make_pair(0x1cf00,"ZNAMENNY COMBINING MARK GORAZDO NIZKO S KRYZHEM ON LEFT"));
        data.insert(std::make_pair(0x1cf01,"ZNAMENNY COMBINING MARK NIZKO S KRYZHEM ON LEFT"));
        data.insert(std::make_pair(0x1cf02,"ZNAMENNY COMBINING MARK TSATA ON LEFT"));
        data.insert(std::make_pair(0x1cf03,"ZNAMENNY COMBINING MARK GORAZDO NIZKO ON LEFT"));
        data.insert(std::make_pair(0x1cf04,"ZNAMENNY COMBINING MARK NIZKO ON LEFT"));
        data.insert(std::make_pair(0x1cf05,"ZNAMENNY COMBINING MARK SREDNE ON LEFT"));
        data.insert(std::make_pair(0x1cf06,"ZNAMENNY COMBINING MARK MALO POVYSHE ON LEFT"));
        data.insert(std::make_pair(0x1cf07,"ZNAMENNY COMBINING MARK POVYSHE ON LEFT"));
        data.insert(std::make_pair(0x1cf08,"ZNAMENNY COMBINING MARK VYSOKO ON LEFT"));
        data.insert(std::make_pair(0x1cf09,"ZNAMENNY COMBINING MARK MALO POVYSHE S KHOKHLOM ON LEFT"));
        data.insert(std::make_pair(0x1cf0a,"ZNAMENNY COMBINING MARK POVYSHE S KHOKHLOM ON LEFT"));
        data.insert(std::make_pair(0x1cf0b,"ZNAMENNY COMBINING MARK VYSOKO S KHOKHLOM ON LEFT"));
        data.insert(std::make_pair(0x1cf0c,"ZNAMENNY COMBINING MARK GORAZDO NIZKO S KRYZHEM ON RIGHT"));
        data.insert(std::make_pair(0x1cf0d,"ZNAMENNY COMBINING MARK NIZKO S KRYZHEM ON RIGHT"));
        data.insert(std::make_pair(0x1cf0e,"ZNAMENNY COMBINING MARK TSATA ON RIGHT"));
        data.insert(std::make_pair(0x1cf0f,"ZNAMENNY COMBINING MARK GORAZDO NIZKO ON RIGHT"));
        data.insert(std::make_pair(0x1cf10,"ZNAMENNY COMBINING MARK NIZKO ON RIGHT"));
        data.insert(std::make_pair(0x1cf11,"ZNAMENNY COMBINING MARK SREDNE ON RIGHT"));
        data.insert(std::make_pair(0x1cf12,"ZNAMENNY COMBINING MARK MALO POVYSHE ON RIGHT"));
        data.insert(std::make_pair(0x1cf13,"ZNAMENNY COMBINING MARK POVYSHE ON RIGHT"));
        data.insert(std::make_pair(0x1cf14,"ZNAMENNY COMBINING MARK VYSOKO ON RIGHT"));
        data.insert(std::make_pair(0x1cf15,"ZNAMENNY COMBINING MARK MALO POVYSHE S KHOKHLOM ON RIGHT"));
        data.insert(std::make_pair(0x1cf16,"ZNAMENNY COMBINING MARK POVYSHE S KHOKHLOM ON RIGHT"));
        data.insert(std::make_pair(0x1cf17,"ZNAMENNY COMBINING MARK VYSOKO S KHOKHLOM ON RIGHT"));
        data.insert(std::make_pair(0x1cf18,"ZNAMENNY COMBINING MARK TSATA S KRYZHEM"));
        data.insert(std::make_pair(0x1cf19,"ZNAMENNY COMBINING MARK MALO POVYSHE S KRYZHEM"));
        data.insert(std::make_pair(0x1cf1a,"ZNAMENNY COMBINING MARK STRANNO MALO POVYSHE"));
        data.insert(std::make_pair(0x1cf1b,"ZNAMENNY COMBINING MARK POVYSHE S KRYZHEM"));
        data.insert(std::make_pair(0x1cf1c,"ZNAMENNY COMBINING MARK POVYSHE STRANNO"));
        data.insert(std::make_pair(0x1cf1d,"ZNAMENNY COMBINING MARK VYSOKO S KRYZHEM"));
        data.insert(std::make_pair(0x1cf1e,"ZNAMENNY COMBINING MARK MALO POVYSHE STRANNO"));
        data.insert(std::make_pair(0x1cf1f,"ZNAMENNY COMBINING MARK GORAZDO VYSOKO"));
        data.insert(std::make_pair(0x1cf20,"ZNAMENNY COMBINING MARK ZELO"));
        data.insert(std::make_pair(0x1cf21,"ZNAMENNY COMBINING MARK ON"));
        data.insert(std::make_pair(0x1cf22,"ZNAMENNY COMBINING MARK RAVNO"));
        data.insert(std::make_pair(0x1cf23,"ZNAMENNY COMBINING MARK TIKHAYA"));
        data.insert(std::make_pair(0x1cf24,"ZNAMENNY COMBINING MARK BORZAYA"));
        data.insert(std::make_pair(0x1cf25,"ZNAMENNY COMBINING MARK UDARKA"));
        data.insert(std::make_pair(0x1cf26,"ZNAMENNY COMBINING MARK PODVERTKA"));
        data.insert(std::make_pair(0x1cf27,"ZNAMENNY COMBINING MARK LOMKA"));
        data.insert(std::make_pair(0x1cf28,"ZNAMENNY COMBINING MARK KUPNAYA"));
        data.insert(std::make_pair(0x1cf29,"ZNAMENNY COMBINING MARK KACHKA"));
        data.insert(std::make_pair(0x1cf2a,"ZNAMENNY COMBINING MARK ZEVOK"));
        data.insert(std::make_pair(0x1cf2b,"ZNAMENNY COMBINING MARK SKOBA"));
        data.insert(std::make_pair(0x1cf2c,"ZNAMENNY COMBINING MARK RAZSEKA"));
        data.insert(std::make_pair(0x1cf2d,"ZNAMENNY COMBINING MARK KRYZH ON LEFT"));
        data.insert(std::make_pair(0x1cf30,"ZNAMENNY COMBINING TONAL RANGE MARK MRACHNO"));
        data.insert(std::make_pair(0x1cf31,"ZNAMENNY COMBINING TONAL RANGE MARK SVETLO"));
        data.insert(std::make_pair(0x1cf32,"ZNAMENNY COMBINING TONAL RANGE MARK TRESVETLO"));
        data.insert(std::make_pair(0x1cf33,"ZNAMENNY COMBINING MARK ZADERZHKA"));
        data.insert(std::make_pair(0x1cf34,"ZNAMENNY COMBINING MARK DEMESTVENNY ZADERZHKA"));
        data.insert(std::make_pair(0x1cf35,"ZNAMENNY COMBINING MARK OTSECHKA"));
        data.insert(std::make_pair(0x1cf36,"ZNAMENNY COMBINING MARK PODCHASHIE"));
        data.insert(std::make_pair(0x1cf37,"ZNAMENNY COMBINING MARK PODCHASHIE WITH VERTICAL STROKE"));
        data.insert(std::make_pair(0x1cf38,"ZNAMENNY COMBINING MARK CHASHKA"));
        data.insert(std::make_pair(0x1cf39,"ZNAMENNY COMBINING MARK CHASHKA POLNAYA"));
        data.insert(std::make_pair(0x1cf3a,"ZNAMENNY COMBINING MARK OBLACHKO"));
        data.insert(std::make_pair(0x1cf3b,"ZNAMENNY COMBINING MARK SOROCHYA NOZHKA"));
        data.insert(std::make_pair(0x1cf3c,"ZNAMENNY COMBINING MARK TOCHKA"));
        data.insert(std::make_pair(0x1cf3d,"ZNAMENNY COMBINING MARK DVOETOCHIE"));
        data.insert(std::make_pair(0x1cf3e,"ZNAMENNY COMBINING ATTACHING VERTICAL OMET"));
        data.insert(std::make_pair(0x1cf3f,"ZNAMENNY COMBINING MARK CURVED OMET"));
        data.insert(std::make_pair(0x1cf40,"ZNAMENNY COMBINING MARK KRYZH"));
        data.insert(std::make_pair(0x1cf41,"ZNAMENNY COMBINING LOWER TONAL RANGE INDICATOR"));
        data.insert(std::make_pair(0x1cf42,"ZNAMENNY PRIZNAK MODIFIER LEVEL-2"));
        data.insert(std::make_pair(0x1cf43,"ZNAMENNY PRIZNAK MODIFIER LEVEL-3"));
        data.insert(std::make_pair(0x1cf44,"ZNAMENNY PRIZNAK MODIFIER DIRECTION FLIP"));
        data.insert(std::make_pair(0x1cf45,"ZNAMENNY PRIZNAK MODIFIER KRYZH"));
        data.insert(std::make_pair(0x1cf46,"ZNAMENNY PRIZNAK MODIFIER ROG"));
        data.insert(std::make_pair(0x1cf50,"ZNAMENNY NEUME KRYUK"));
        data.insert(std::make_pair(0x1cf51,"ZNAMENNY NEUME KRYUK TIKHY"));
        data.insert(std::make_pair(0x1cf52,"ZNAMENNY NEUME PARAKLIT"));
        data.insert(std::make_pair(0x1cf53,"ZNAMENNY NEUME DVA V CHELNU"));
        data.insert(std::make_pair(0x1cf54,"ZNAMENNY NEUME KLYUCH"));
        data.insert(std::make_pair(0x1cf55,"ZNAMENNY NEUME ZANOZHEK"));
        data.insert(std::make_pair(0x1cf56,"ZNAMENNY NEUME STOPITSA"));
        data.insert(std::make_pair(0x1cf57,"ZNAMENNY NEUME STOPITSA S OCHKOM"));
        data.insert(std::make_pair(0x1cf58,"ZNAMENNY NEUME PEREVODKA"));
        data.insert(std::make_pair(0x1cf59,"ZNAMENNY NEUME PEREVODKA NEPOSTOYANNAYA"));
        data.insert(std::make_pair(0x1cf5a,"ZNAMENNY NEUME STOPITSA WITH SOROCHYA NOZHKA"));
        data.insert(std::make_pair(0x1cf5b,"ZNAMENNY NEUME CHELYUSTKA"));
        data.insert(std::make_pair(0x1cf5c,"ZNAMENNY NEUME PALKA"));
        data.insert(std::make_pair(0x1cf5d,"ZNAMENNY NEUME ZAPYATAYA"));
        data.insert(std::make_pair(0x1cf5e,"ZNAMENNY NEUME GOLUBCHIK BORZY"));
        data.insert(std::make_pair(0x1cf5f,"ZNAMENNY NEUME GOLUBCHIK TIKHY"));
        data.insert(std::make_pair(0x1cf60,"ZNAMENNY NEUME GOLUBCHIK MRACHNY"));
        data.insert(std::make_pair(0x1cf61,"ZNAMENNY NEUME GOLUBCHIK SVETLY"));
        data.insert(std::make_pair(0x1cf62,"ZNAMENNY NEUME GOLUBCHIK TRESVETLY"));
        data.insert(std::make_pair(0x1cf63,"ZNAMENNY NEUME VRAKHIYA PROSTAYA"));
        data.insert(std::make_pair(0x1cf64,"ZNAMENNY NEUME VRAKHIYA MRACHNAYA"));
        data.insert(std::make_pair(0x1cf65,"ZNAMENNY NEUME VRAKHIYA SVETLAYA"));
        data.insert(std::make_pair(0x1cf66,"ZNAMENNY NEUME VRAKHIYA TRESVETLAYA"));
        data.insert(std::make_pair(0x1cf67,"ZNAMENNY NEUME VRAKHIYA KLYUCHEVAYA PROSTAYA"));
        data.insert(std::make_pair(0x1cf68,"ZNAMENNY NEUME VRAKHIYA KLYUCHEVAYA MRACHNAYA"));
        data.insert(std::make_pair(0x1cf69,"ZNAMENNY NEUME VRAKHIYA KLYUCHEVAYA SVETLAYA"));
        data.insert(std::make_pair(0x1cf6a,"ZNAMENNY NEUME VRAKHIYA KLYUCHEVAYA TRESVETLAYA"));
        data.insert(std::make_pair(0x1cf6b,"ZNAMENNY NEUME DOUBLE ZAPYATAYA"));
        data.insert(std::make_pair(0x1cf6c,"ZNAMENNY NEUME REVERSED CHELYUSTKA"));
        data.insert(std::make_pair(0x1cf6d,"ZNAMENNY NEUME DERBITSA"));
        data.insert(std::make_pair(0x1cf6e,"ZNAMENNY NEUME KHAMILO"));
        data.insert(std::make_pair(0x1cf6f,"ZNAMENNY NEUME CHASHKA"));
        data.insert(std::make_pair(0x1cf70,"ZNAMENNY NEUME PODCHASHIE"));
        data.insert(std::make_pair(0x1cf71,"ZNAMENNY NEUME SKAMEYTSA MRACHNAYA"));
        data.insert(std::make_pair(0x1cf72,"ZNAMENNY NEUME SKAMEYTSA SVETLAYA"));
        data.insert(std::make_pair(0x1cf73,"ZNAMENNY NEUME SKAMEYTSA TRESVETLAYA"));
        data.insert(std::make_pair(0x1cf74,"ZNAMENNY NEUME SKAMEYTSA TIKHAYA"));
        data.insert(std::make_pair(0x1cf75,"ZNAMENNY NEUME DEMESTVENNY KLYUCH"));
        data.insert(std::make_pair(0x1cf76,"ZNAMENNY NEUME SKAMEYTSA KLYUCHEVAYA SVETLAYA"));
        data.insert(std::make_pair(0x1cf77,"ZNAMENNY NEUME SKAMEYTSA KLYUCHENEPOSTOYANNAYA"));
        data.insert(std::make_pair(0x1cf78,"ZNAMENNY NEUME SKAMEYTSA KLYUCHEVAYA TIKHAYA"));
        data.insert(std::make_pair(0x1cf79,"ZNAMENNY NEUME SKAMEYTSA DVOECHELNAYA PROSTAYA"));
        data.insert(std::make_pair(0x1cf7a,"ZNAMENNY NEUME SKAMEYTSA DVOECHELNAYA SVETLAYA"));
        data.insert(std::make_pair(0x1cf7b,"ZNAMENNY NEUME SKAMEYTSA DVOECHELNAYA NEPOSTOYANNAYA"));
        data.insert(std::make_pair(0x1cf7c,"ZNAMENNY NEUME SKAMEYTSA DVOECHELNAYA KLYUCHEVAYA"));
        data.insert(std::make_pair(0x1cf7d,"ZNAMENNY NEUME SLOZHITIE"));
        data.insert(std::make_pair(0x1cf7e,"ZNAMENNY NEUME SLOZHITIE S ZAPYATOY"));
        data.insert(std::make_pair(0x1cf7f,"ZNAMENNY NEUME SLOZHITIE ZAKRYTOE"));
        data.insert(std::make_pair(0x1cf80,"ZNAMENNY NEUME SLOZHITIE S KRYZHEM"));
        data.insert(std::make_pair(0x1cf81,"ZNAMENNY NEUME KRYZH"));
        data.insert(std::make_pair(0x1cf82,"ZNAMENNY NEUME ROG"));
        data.insert(std::make_pair(0x1cf83,"ZNAMENNY NEUME FITA"));
        data.insert(std::make_pair(0x1cf84,"ZNAMENNY NEUME KOBYLA"));
        data.insert(std::make_pair(0x1cf85,"ZNAMENNY NEUME ZMEYTSA"));
        data.insert(std::make_pair(0x1cf86,"ZNAMENNY NEUME STATYA"));
        data.insert(std::make_pair(0x1cf87,"ZNAMENNY NEUME STATYA S ZAPYATOY"));
        data.insert(std::make_pair(0x1cf88,"ZNAMENNY NEUME STATYA S KRYZHEM"));
        data.insert(std::make_pair(0x1cf89,"ZNAMENNY NEUME STATYA S ZAPYATOY I KRYZHEM"));
        data.insert(std::make_pair(0x1cf8a,"ZNAMENNY NEUME STATYA S KRYZHEM I ZAPYATOY"));
        data.insert(std::make_pair(0x1cf8b,"ZNAMENNY NEUME STATYA ZAKRYTAYA"));
        data.insert(std::make_pair(0x1cf8c,"ZNAMENNY NEUME STATYA ZAKRYTAYA S ZAPYATOY"));
        data.insert(std::make_pair(0x1cf8d,"ZNAMENNY NEUME STATYA S ROGOM"));
        data.insert(std::make_pair(0x1cf8e,"ZNAMENNY NEUME STATYA S DVUMYA ZAPYATYMI"));
        data.insert(std::make_pair(0x1cf8f,"ZNAMENNY NEUME STATYA S ZAPYATOY I PODCHASHIEM"));
        data.insert(std::make_pair(0x1cf90,"ZNAMENNY NEUME POLKULIZMY"));
        data.insert(std::make_pair(0x1cf91,"ZNAMENNY NEUME STATYA NEPOSTOYANNAYA"));
        data.insert(std::make_pair(0x1cf92,"ZNAMENNY NEUME STRELA PROSTAYA"));
        data.insert(std::make_pair(0x1cf93,"ZNAMENNY NEUME STRELA MRACHNOTIKHAYA"));
        data.insert(std::make_pair(0x1cf94,"ZNAMENNY NEUME STRELA KRYZHEVAYA"));
        data.insert(std::make_pair(0x1cf95,"ZNAMENNY NEUME STRELA POLUPOVODNAYA"));
        data.insert(std::make_pair(0x1cf96,"ZNAMENNY NEUME STRELA POVODNAYA"));
        data.insert(std::make_pair(0x1cf97,"ZNAMENNY NEUME STRELA NEPOSTOYANNAYA"));
        data.insert(std::make_pair(0x1cf98,"ZNAMENNY NEUME STRELA KLYUCHEPOVODNAYA"));
        data.insert(std::make_pair(0x1cf99,"ZNAMENNY NEUME STRELA KLYUCHENEPOSTOYANNAYA"));
        data.insert(std::make_pair(0x1cf9a,"ZNAMENNY NEUME STRELA TIKHAYA PUTNAYA"));
        data.insert(std::make_pair(0x1cf9b,"ZNAMENNY NEUME STRELA DVOECHELNAYA"));
        data.insert(std::make_pair(0x1cf9c,"ZNAMENNY NEUME STRELA DVOECHELNOKRYZHEVAYA"));
        data.insert(std::make_pair(0x1cf9d,"ZNAMENNY NEUME STRELA DVOECHELNOPOVODNAYA"));
        data.insert(std::make_pair(0x1cf9e,"ZNAMENNY NEUME STRELA DVOECHELNAYA KLYUCHEVAYA"));
        data.insert(std::make_pair(0x1cf9f,"ZNAMENNY NEUME STRELA DVOECHELNOPOVODNAYA KLYUCHEVAYA"));
        data.insert(std::make_pair(0x1cfa0,"ZNAMENNY NEUME STRELA GROMNAYA WITH SINGLE ZAPYATAYA"));
        data.insert(std::make_pair(0x1cfa1,"ZNAMENNY NEUME STRELA GROMOPOVODNAYA WITH SINGLE ZAPYATAYA"));
        data.insert(std::make_pair(0x1cfa2,"ZNAMENNY NEUME STRELA GROMNAYA"));
        data.insert(std::make_pair(0x1cfa3,"ZNAMENNY NEUME STRELA GROMOPOVODNAYA"));
        data.insert(std::make_pair(0x1cfa4,"ZNAMENNY NEUME STRELA GROMOPOVODNAYA WITH DOUBLE ZAPYATAYA"));
        data.insert(std::make_pair(0x1cfa5,"ZNAMENNY NEUME STRELA GROMOKRYZHEVAYA"));
        data.insert(std::make_pair(0x1cfa6,"ZNAMENNY NEUME STRELA GROMOKRYZHEVAYA POVODNAYA"));
        data.insert(std::make_pair(0x1cfa7,"ZNAMENNY NEUME MECHIK"));
        data.insert(std::make_pair(0x1cfa8,"ZNAMENNY NEUME MECHIK POVODNY"));
        data.insert(std::make_pair(0x1cfa9,"ZNAMENNY NEUME MECHIK KLYUCHEVOY"));
        data.insert(std::make_pair(0x1cfaa,"ZNAMENNY NEUME MECHIK KLYUCHEPOVODNY"));
        data.insert(std::make_pair(0x1cfab,"ZNAMENNY NEUME MECHIK KLYUCHENEPOSTOYANNY"));
        data.insert(std::make_pair(0x1cfac,"ZNAMENNY NEUME STRELA TRYASOGLASNAYA"));
        data.insert(std::make_pair(0x1cfad,"ZNAMENNY NEUME STRELA TRYASOPOVODNAYA"));
        data.insert(std::make_pair(0x1cfae,"ZNAMENNY NEUME STRELA TRYASOSTRELNAYA"));
        data.insert(std::make_pair(0x1cfaf,"ZNAMENNY NEUME OSOKA"));
        data.insert(std::make_pair(0x1cfb0,"ZNAMENNY NEUME OSOKA SVETLAYA"));
        data.insert(std::make_pair(0x1cfb1,"ZNAMENNY NEUME OSOKA TRESVETLAYA"));
        data.insert(std::make_pair(0x1cfb2,"ZNAMENNY NEUME OSOKA KRYUKOVAYA SVETLAYA"));
        data.insert(std::make_pair(0x1cfb3,"ZNAMENNY NEUME OSOKA KLYUCHEVAYA SVETLAYA"));
        data.insert(std::make_pair(0x1cfb4,"ZNAMENNY NEUME OSOKA KLYUCHEVAYA NEPOSTOYANNAYA"));
        data.insert(std::make_pair(0x1cfb5,"ZNAMENNY NEUME STRELA KRYUKOVAYA"));
        data.insert(std::make_pair(0x1cfb6,"ZNAMENNY NEUME STRELA KRYUKOVAYA POVODNAYA"));
        data.insert(std::make_pair(0x1cfb7,"ZNAMENNY NEUME STRELA KRYUKOVAYA GROMNAYA WITH SINGLE ZAPYATAYA"));
        data.insert(std::make_pair(0x1cfb8,"ZNAMENNY NEUME STRELA KRYUKOVAYA GROMOPOVODNAYA WITH SINGLE ZAPYATAYA"));
        data.insert(std::make_pair(0x1cfb9,"ZNAMENNY NEUME STRELA KRYUKOVAYA GROMNAYA"));
        data.insert(std::make_pair(0x1cfba,"ZNAMENNY NEUME STRELA KRYUKOVAYA GROMOPOVODNAYA"));
        data.insert(std::make_pair(0x1cfbb,"ZNAMENNY NEUME STRELA KRYUKOVAYA GROMOPOVODNAYA WITH DOUBLE ZAPYATAYA"));
        data.insert(std::make_pair(0x1cfbc,"ZNAMENNY NEUME STRELA KRYUKOVAYA GROMOKRYZHEVAYA"));
        data.insert(std::make_pair(0x1cfbd,"ZNAMENNY NEUME STRELA KRYUKOVAYA GROMOKRYZHEVAYA POVODNAYA"));
        data.insert(std::make_pair(0x1cfbe,"ZNAMENNY NEUME STRELA KRYUKOVAYA TRYASKA"));
        data.insert(std::make_pair(0x1cfbf,"ZNAMENNY NEUME KUFISMA"));
        data.insert(std::make_pair(0x1cfc0,"ZNAMENNY NEUME OBLAKO"));
        data.insert(std::make_pair(0x1cfc1,"ZNAMENNY NEUME DUDA"));
        data.insert(std::make_pair(0x1cfc2,"ZNAMENNY NEUME NEMKA"));
        data.insert(std::make_pair(0x1cfc3,"ZNAMENNY NEUME PAUK"));
        data.insert(std::make_pair(0x1d000,"BYZANTINE MUSICAL SYMBOL PSILI"));
        data.insert(std::make_pair(0x1d001,"BYZANTINE MUSICAL SYMBOL DASEIA"));
        data.insert(std::make_pair(0x1d002,"BYZANTINE MUSICAL SYMBOL PERISPOMENI"));
        data.insert(std::make_pair(0x1d003,"BYZANTINE MUSICAL SYMBOL OXEIA EKFONITIKON"));
        data.insert(std::make_pair(0x1d004,"BYZANTINE MUSICAL SYMBOL OXEIA DIPLI"));
        data.insert(std::make_pair(0x1d005,"BYZANTINE MUSICAL SYMBOL VAREIA EKFONITIKON"));
        data.insert(std::make_pair(0x1d006,"BYZANTINE MUSICAL SYMBOL VAREIA DIPLI"));
        data.insert(std::make_pair(0x1d007,"BYZANTINE MUSICAL SYMBOL KATHISTI"));
        data.insert(std::make_pair(0x1d008,"BYZANTINE MUSICAL SYMBOL SYRMATIKI"));
        data.insert(std::make_pair(0x1d009,"BYZANTINE MUSICAL SYMBOL PARAKLITIKI"));
        data.insert(std::make_pair(0x1d00a,"BYZANTINE MUSICAL SYMBOL YPOKRISIS"));
        data.insert(std::make_pair(0x1d00b,"BYZANTINE MUSICAL SYMBOL YPOKRISIS DIPLI"));
        data.insert(std::make_pair(0x1d00c,"BYZANTINE MUSICAL SYMBOL KREMASTI"));
        data.insert(std::make_pair(0x1d00d,"BYZANTINE MUSICAL SYMBOL APESO EKFONITIKON"));
        data.insert(std::make_pair(0x1d00e,"BYZANTINE MUSICAL SYMBOL EXO EKFONITIKON"));
        data.insert(std::make_pair(0x1d00f,"BYZANTINE MUSICAL SYMBOL TELEIA"));
        data.insert(std::make_pair(0x1d010,"BYZANTINE MUSICAL SYMBOL KENTIMATA"));
        data.insert(std::make_pair(0x1d011,"BYZANTINE MUSICAL SYMBOL APOSTROFOS"));
        data.insert(std::make_pair(0x1d012,"BYZANTINE MUSICAL SYMBOL APOSTROFOS DIPLI"));
        data.insert(std::make_pair(0x1d013,"BYZANTINE MUSICAL SYMBOL SYNEVMA"));
        data.insert(std::make_pair(0x1d014,"BYZANTINE MUSICAL SYMBOL THITA"));
        data.insert(std::make_pair(0x1d015,"BYZANTINE MUSICAL SYMBOL OLIGON ARCHAION"));
        data.insert(std::make_pair(0x1d016,"BYZANTINE MUSICAL SYMBOL GORGON ARCHAION"));
        data.insert(std::make_pair(0x1d017,"BYZANTINE MUSICAL SYMBOL PSILON"));
        data.insert(std::make_pair(0x1d018,"BYZANTINE MUSICAL SYMBOL CHAMILON"));
        data.insert(std::make_pair(0x1d019,"BYZANTINE MUSICAL SYMBOL VATHY"));
        data.insert(std::make_pair(0x1d01a,"BYZANTINE MUSICAL SYMBOL ISON ARCHAION"));
        data.insert(std::make_pair(0x1d01b,"BYZANTINE MUSICAL SYMBOL KENTIMA ARCHAION"));
        data.insert(std::make_pair(0x1d01c,"BYZANTINE MUSICAL SYMBOL KENTIMATA ARCHAION"));
        data.insert(std::make_pair(0x1d01d,"BYZANTINE MUSICAL SYMBOL SAXIMATA"));
        data.insert(std::make_pair(0x1d01e,"BYZANTINE MUSICAL SYMBOL PARICHON"));
        data.insert(std::make_pair(0x1d01f,"BYZANTINE MUSICAL SYMBOL STAVROS APODEXIA"));
        data.insert(std::make_pair(0x1d020,"BYZANTINE MUSICAL SYMBOL OXEIAI ARCHAION"));
        data.insert(std::make_pair(0x1d021,"BYZANTINE MUSICAL SYMBOL VAREIAI ARCHAION"));
        data.insert(std::make_pair(0x1d022,"BYZANTINE MUSICAL SYMBOL APODERMA ARCHAION"));
        data.insert(std::make_pair(0x1d023,"BYZANTINE MUSICAL SYMBOL APOTHEMA"));
        data.insert(std::make_pair(0x1d024,"BYZANTINE MUSICAL SYMBOL KLASMA"));
        data.insert(std::make_pair(0x1d025,"BYZANTINE MUSICAL SYMBOL REVMA"));
        data.insert(std::make_pair(0x1d026,"BYZANTINE MUSICAL SYMBOL PIASMA ARCHAION"));
        data.insert(std::make_pair(0x1d027,"BYZANTINE MUSICAL SYMBOL TINAGMA"));
        data.insert(std::make_pair(0x1d028,"BYZANTINE MUSICAL SYMBOL ANATRICHISMA"));
        data.insert(std::make_pair(0x1d029,"BYZANTINE MUSICAL SYMBOL SEISMA"));
        data.insert(std::make_pair(0x1d02a,"BYZANTINE MUSICAL SYMBOL SYNAGMA ARCHAION"));
        data.insert(std::make_pair(0x1d02b,"BYZANTINE MUSICAL SYMBOL SYNAGMA META STAVROU"));
        data.insert(std::make_pair(0x1d02c,"BYZANTINE MUSICAL SYMBOL OYRANISMA ARCHAION"));
        data.insert(std::make_pair(0x1d02d,"BYZANTINE MUSICAL SYMBOL THEMA"));
        data.insert(std::make_pair(0x1d02e,"BYZANTINE MUSICAL SYMBOL LEMOI"));
        data.insert(std::make_pair(0x1d02f,"BYZANTINE MUSICAL SYMBOL DYO"));
        data.insert(std::make_pair(0x1d030,"BYZANTINE MUSICAL SYMBOL TRIA"));
        data.insert(std::make_pair(0x1d031,"BYZANTINE MUSICAL SYMBOL TESSERA"));
        data.insert(std::make_pair(0x1d032,"BYZANTINE MUSICAL SYMBOL KRATIMATA"));
        data.insert(std::make_pair(0x1d033,"BYZANTINE MUSICAL SYMBOL APESO EXO NEO"));
        data.insert(std::make_pair(0x1d034,"BYZANTINE MUSICAL SYMBOL FTHORA ARCHAION"));
        data.insert(std::make_pair(0x1d035,"BYZANTINE MUSICAL SYMBOL IMIFTHORA"));
        data.insert(std::make_pair(0x1d036,"BYZANTINE MUSICAL SYMBOL TROMIKON ARCHAION"));
        data.insert(std::make_pair(0x1d037,"BYZANTINE MUSICAL SYMBOL KATAVA TROMIKON"));
        data.insert(std::make_pair(0x1d038,"BYZANTINE MUSICAL SYMBOL PELASTON"));
        data.insert(std::make_pair(0x1d039,"BYZANTINE MUSICAL SYMBOL PSIFISTON"));
        data.insert(std::make_pair(0x1d03a,"BYZANTINE MUSICAL SYMBOL KONTEVMA"));
        data.insert(std::make_pair(0x1d03b,"BYZANTINE MUSICAL SYMBOL CHOREVMA ARCHAION"));
        data.insert(std::make_pair(0x1d03c,"BYZANTINE MUSICAL SYMBOL RAPISMA"));
        data.insert(std::make_pair(0x1d03d,"BYZANTINE MUSICAL SYMBOL PARAKALESMA ARCHAION"));
        data.insert(std::make_pair(0x1d03e,"BYZANTINE MUSICAL SYMBOL PARAKLITIKI ARCHAION"));
        data.insert(std::make_pair(0x1d03f,"BYZANTINE MUSICAL SYMBOL ICHADIN"));
        data.insert(std::make_pair(0x1d040,"BYZANTINE MUSICAL SYMBOL NANA"));
        data.insert(std::make_pair(0x1d041,"BYZANTINE MUSICAL SYMBOL PETASMA"));
        data.insert(std::make_pair(0x1d042,"BYZANTINE MUSICAL SYMBOL KONTEVMA ALLO"));
        data.insert(std::make_pair(0x1d043,"BYZANTINE MUSICAL SYMBOL TROMIKON ALLO"));
        data.insert(std::make_pair(0x1d044,"BYZANTINE MUSICAL SYMBOL STRAGGISMATA"));
        data.insert(std::make_pair(0x1d045,"BYZANTINE MUSICAL SYMBOL GRONTHISMATA"));
        data.insert(std::make_pair(0x1d046,"BYZANTINE MUSICAL SYMBOL ISON NEO"));
        data.insert(std::make_pair(0x1d047,"BYZANTINE MUSICAL SYMBOL OLIGON NEO"));
        data.insert(std::make_pair(0x1d048,"BYZANTINE MUSICAL SYMBOL OXEIA NEO"));
        data.insert(std::make_pair(0x1d049,"BYZANTINE MUSICAL SYMBOL PETASTI"));
        data.insert(std::make_pair(0x1d04a,"BYZANTINE MUSICAL SYMBOL KOUFISMA"));
        data.insert(std::make_pair(0x1d04b,"BYZANTINE MUSICAL SYMBOL PETASTOKOUFISMA"));
        data.insert(std::make_pair(0x1d04c,"BYZANTINE MUSICAL SYMBOL KRATIMOKOUFISMA"));
        data.insert(std::make_pair(0x1d04d,"BYZANTINE MUSICAL SYMBOL PELASTON NEO"));
        data.insert(std::make_pair(0x1d04e,"BYZANTINE MUSICAL SYMBOL KENTIMATA NEO ANO"));
        data.insert(std::make_pair(0x1d04f,"BYZANTINE MUSICAL SYMBOL KENTIMA NEO ANO"));
        data.insert(std::make_pair(0x1d050,"BYZANTINE MUSICAL SYMBOL YPSILI"));
        data.insert(std::make_pair(0x1d051,"BYZANTINE MUSICAL SYMBOL APOSTROFOS NEO"));
        data.insert(std::make_pair(0x1d052,"BYZANTINE MUSICAL SYMBOL APOSTROFOI SYNDESMOS NEO"));
        data.insert(std::make_pair(0x1d053,"BYZANTINE MUSICAL SYMBOL YPORROI"));
        data.insert(std::make_pair(0x1d054,"BYZANTINE MUSICAL SYMBOL KRATIMOYPORROON"));
        data.insert(std::make_pair(0x1d055,"BYZANTINE MUSICAL SYMBOL ELAFRON"));
        data.insert(std::make_pair(0x1d056,"BYZANTINE MUSICAL SYMBOL CHAMILI"));
        data.insert(std::make_pair(0x1d057,"BYZANTINE MUSICAL SYMBOL MIKRON ISON"));
        data.insert(std::make_pair(0x1d058,"BYZANTINE MUSICAL SYMBOL VAREIA NEO"));
        data.insert(std::make_pair(0x1d059,"BYZANTINE MUSICAL SYMBOL PIASMA NEO"));
        data.insert(std::make_pair(0x1d05a,"BYZANTINE MUSICAL SYMBOL PSIFISTON NEO"));
        data.insert(std::make_pair(0x1d05b,"BYZANTINE MUSICAL SYMBOL OMALON"));
        data.insert(std::make_pair(0x1d05c,"BYZANTINE MUSICAL SYMBOL ANTIKENOMA"));
        data.insert(std::make_pair(0x1d05d,"BYZANTINE MUSICAL SYMBOL LYGISMA"));
        data.insert(std::make_pair(0x1d05e,"BYZANTINE MUSICAL SYMBOL PARAKLITIKI NEO"));
        data.insert(std::make_pair(0x1d05f,"BYZANTINE MUSICAL SYMBOL PARAKALESMA NEO"));
        data.insert(std::make_pair(0x1d060,"BYZANTINE MUSICAL SYMBOL ETERON PARAKALESMA"));
        data.insert(std::make_pair(0x1d061,"BYZANTINE MUSICAL SYMBOL KYLISMA"));
        data.insert(std::make_pair(0x1d062,"BYZANTINE MUSICAL SYMBOL ANTIKENOKYLISMA"));
        data.insert(std::make_pair(0x1d063,"BYZANTINE MUSICAL SYMBOL TROMIKON NEO"));
        data.insert(std::make_pair(0x1d064,"BYZANTINE MUSICAL SYMBOL EKSTREPTON"));
        data.insert(std::make_pair(0x1d065,"BYZANTINE MUSICAL SYMBOL SYNAGMA NEO"));
        data.insert(std::make_pair(0x1d066,"BYZANTINE MUSICAL SYMBOL SYRMA"));
        data.insert(std::make_pair(0x1d067,"BYZANTINE MUSICAL SYMBOL CHOREVMA NEO"));
        data.insert(std::make_pair(0x1d068,"BYZANTINE MUSICAL SYMBOL EPEGERMA"));
        data.insert(std::make_pair(0x1d069,"BYZANTINE MUSICAL SYMBOL SEISMA NEO"));
        data.insert(std::make_pair(0x1d06a,"BYZANTINE MUSICAL SYMBOL XIRON KLASMA"));
        data.insert(std::make_pair(0x1d06b,"BYZANTINE MUSICAL SYMBOL TROMIKOPSIFISTON"));
        data.insert(std::make_pair(0x1d06c,"BYZANTINE MUSICAL SYMBOL PSIFISTOLYGISMA"));
        data.insert(std::make_pair(0x1d06d,"BYZANTINE MUSICAL SYMBOL TROMIKOLYGISMA"));
        data.insert(std::make_pair(0x1d06e,"BYZANTINE MUSICAL SYMBOL TROMIKOPARAKALESMA"));
        data.insert(std::make_pair(0x1d06f,"BYZANTINE MUSICAL SYMBOL PSIFISTOPARAKALESMA"));
        data.insert(std::make_pair(0x1d070,"BYZANTINE MUSICAL SYMBOL TROMIKOSYNAGMA"));
        data.insert(std::make_pair(0x1d071,"BYZANTINE MUSICAL SYMBOL PSIFISTOSYNAGMA"));
        data.insert(std::make_pair(0x1d072,"BYZANTINE MUSICAL SYMBOL GORGOSYNTHETON"));
        data.insert(std::make_pair(0x1d073,"BYZANTINE MUSICAL SYMBOL ARGOSYNTHETON"));
        data.insert(std::make_pair(0x1d074,"BYZANTINE MUSICAL SYMBOL ETERON ARGOSYNTHETON"));
        data.insert(std::make_pair(0x1d075,"BYZANTINE MUSICAL SYMBOL OYRANISMA NEO"));
        data.insert(std::make_pair(0x1d076,"BYZANTINE MUSICAL SYMBOL THEMATISMOS ESO"));
        data.insert(std::make_pair(0x1d077,"BYZANTINE MUSICAL SYMBOL THEMATISMOS EXO"));
        data.insert(std::make_pair(0x1d078,"BYZANTINE MUSICAL SYMBOL THEMA APLOUN"));
        data.insert(std::make_pair(0x1d079,"BYZANTINE MUSICAL SYMBOL THES KAI APOTHES"));
        data.insert(std::make_pair(0x1d07a,"BYZANTINE MUSICAL SYMBOL KATAVASMA"));
        data.insert(std::make_pair(0x1d07b,"BYZANTINE MUSICAL SYMBOL ENDOFONON"));
        data.insert(std::make_pair(0x1d07c,"BYZANTINE MUSICAL SYMBOL YFEN KATO"));
        data.insert(std::make_pair(0x1d07d,"BYZANTINE MUSICAL SYMBOL YFEN ANO"));
        data.insert(std::make_pair(0x1d07e,"BYZANTINE MUSICAL SYMBOL STAVROS"));
        data.insert(std::make_pair(0x1d07f,"BYZANTINE MUSICAL SYMBOL KLASMA ANO"));
        data.insert(std::make_pair(0x1d080,"BYZANTINE MUSICAL SYMBOL DIPLI ARCHAION"));
        data.insert(std::make_pair(0x1d081,"BYZANTINE MUSICAL SYMBOL KRATIMA ARCHAION"));
        data.insert(std::make_pair(0x1d082,"BYZANTINE MUSICAL SYMBOL KRATIMA ALLO"));
        data.insert(std::make_pair(0x1d083,"BYZANTINE MUSICAL SYMBOL KRATIMA NEO"));
        data.insert(std::make_pair(0x1d084,"BYZANTINE MUSICAL SYMBOL APODERMA NEO"));
        data.insert(std::make_pair(0x1d085,"BYZANTINE MUSICAL SYMBOL APLI"));
        data.insert(std::make_pair(0x1d086,"BYZANTINE MUSICAL SYMBOL DIPLI"));
        data.insert(std::make_pair(0x1d087,"BYZANTINE MUSICAL SYMBOL TRIPLI"));
        data.insert(std::make_pair(0x1d088,"BYZANTINE MUSICAL SYMBOL TETRAPLI"));
        data.insert(std::make_pair(0x1d089,"BYZANTINE MUSICAL SYMBOL KORONIS"));
        data.insert(std::make_pair(0x1d08a,"BYZANTINE MUSICAL SYMBOL LEIMMA ENOS CHRONOU"));
        data.insert(std::make_pair(0x1d08b,"BYZANTINE MUSICAL SYMBOL LEIMMA DYO CHRONON"));
        data.insert(std::make_pair(0x1d08c,"BYZANTINE MUSICAL SYMBOL LEIMMA TRION CHRONON"));
        data.insert(std::make_pair(0x1d08d,"BYZANTINE MUSICAL SYMBOL LEIMMA TESSARON CHRONON"));
        data.insert(std::make_pair(0x1d08e,"BYZANTINE MUSICAL SYMBOL LEIMMA IMISEOS CHRONOU"));
        data.insert(std::make_pair(0x1d08f,"BYZANTINE MUSICAL SYMBOL GORGON NEO ANO"));
        data.insert(std::make_pair(0x1d090,"BYZANTINE MUSICAL SYMBOL GORGON PARESTIGMENON ARISTERA"));
        data.insert(std::make_pair(0x1d091,"BYZANTINE MUSICAL SYMBOL GORGON PARESTIGMENON DEXIA"));
        data.insert(std::make_pair(0x1d092,"BYZANTINE MUSICAL SYMBOL DIGORGON"));
        data.insert(std::make_pair(0x1d093,"BYZANTINE MUSICAL SYMBOL DIGORGON PARESTIGMENON ARISTERA KATO"));
        data.insert(std::make_pair(0x1d094,"BYZANTINE MUSICAL SYMBOL DIGORGON PARESTIGMENON ARISTERA ANO"));
        data.insert(std::make_pair(0x1d095,"BYZANTINE MUSICAL SYMBOL DIGORGON PARESTIGMENON DEXIA"));
        data.insert(std::make_pair(0x1d096,"BYZANTINE MUSICAL SYMBOL TRIGORGON"));
        data.insert(std::make_pair(0x1d097,"BYZANTINE MUSICAL SYMBOL ARGON"));
        data.insert(std::make_pair(0x1d098,"BYZANTINE MUSICAL SYMBOL IMIDIARGON"));
        data.insert(std::make_pair(0x1d099,"BYZANTINE MUSICAL SYMBOL DIARGON"));
        data.insert(std::make_pair(0x1d09a,"BYZANTINE MUSICAL SYMBOL AGOGI POLI ARGI"));
        data.insert(std::make_pair(0x1d09b,"BYZANTINE MUSICAL SYMBOL AGOGI ARGOTERI"));
        data.insert(std::make_pair(0x1d09c,"BYZANTINE MUSICAL SYMBOL AGOGI ARGI"));
        data.insert(std::make_pair(0x1d09d,"BYZANTINE MUSICAL SYMBOL AGOGI METRIA"));
        data.insert(std::make_pair(0x1d09e,"BYZANTINE MUSICAL SYMBOL AGOGI MESI"));
        data.insert(std::make_pair(0x1d09f,"BYZANTINE MUSICAL SYMBOL AGOGI GORGI"));
        data.insert(std::make_pair(0x1d0a0,"BYZANTINE MUSICAL SYMBOL AGOGI GORGOTERI"));
        data.insert(std::make_pair(0x1d0a1,"BYZANTINE MUSICAL SYMBOL AGOGI POLI GORGI"));
        data.insert(std::make_pair(0x1d0a2,"BYZANTINE MUSICAL SYMBOL MARTYRIA PROTOS ICHOS"));
        data.insert(std::make_pair(0x1d0a3,"BYZANTINE MUSICAL SYMBOL MARTYRIA ALLI PROTOS ICHOS"));
        data.insert(std::make_pair(0x1d0a4,"BYZANTINE MUSICAL SYMBOL MARTYRIA DEYTEROS ICHOS"));
        data.insert(std::make_pair(0x1d0a5,"BYZANTINE MUSICAL SYMBOL MARTYRIA ALLI DEYTEROS ICHOS"));
        data.insert(std::make_pair(0x1d0a6,"BYZANTINE MUSICAL SYMBOL MARTYRIA TRITOS ICHOS"));
        data.insert(std::make_pair(0x1d0a7,"BYZANTINE MUSICAL SYMBOL MARTYRIA TRIFONIAS"));
        data.insert(std::make_pair(0x1d0a8,"BYZANTINE MUSICAL SYMBOL MARTYRIA TETARTOS ICHOS"));
        data.insert(std::make_pair(0x1d0a9,"BYZANTINE MUSICAL SYMBOL MARTYRIA TETARTOS LEGETOS ICHOS"));
        data.insert(std::make_pair(0x1d0aa,"BYZANTINE MUSICAL SYMBOL MARTYRIA LEGETOS ICHOS"));
        data.insert(std::make_pair(0x1d0ab,"BYZANTINE MUSICAL SYMBOL MARTYRIA PLAGIOS ICHOS"));
        data.insert(std::make_pair(0x1d0ac,"BYZANTINE MUSICAL SYMBOL ISAKIA TELOUS ICHIMATOS"));
        data.insert(std::make_pair(0x1d0ad,"BYZANTINE MUSICAL SYMBOL APOSTROFOI TELOUS ICHIMATOS"));
        data.insert(std::make_pair(0x1d0ae,"BYZANTINE MUSICAL SYMBOL FANEROSIS TETRAFONIAS"));
        data.insert(std::make_pair(0x1d0af,"BYZANTINE MUSICAL SYMBOL FANEROSIS MONOFONIAS"));
        data.insert(std::make_pair(0x1d0b0,"BYZANTINE MUSICAL SYMBOL FANEROSIS DIFONIAS"));
        data.insert(std::make_pair(0x1d0b1,"BYZANTINE MUSICAL SYMBOL MARTYRIA VARYS ICHOS"));
        data.insert(std::make_pair(0x1d0b2,"BYZANTINE MUSICAL SYMBOL MARTYRIA PROTOVARYS ICHOS"));
        data.insert(std::make_pair(0x1d0b3,"BYZANTINE MUSICAL SYMBOL MARTYRIA PLAGIOS TETARTOS ICHOS"));
        data.insert(std::make_pair(0x1d0b4,"BYZANTINE MUSICAL SYMBOL GORTHMIKON N APLOUN"));
        data.insert(std::make_pair(0x1d0b5,"BYZANTINE MUSICAL SYMBOL GORTHMIKON N DIPLOUN"));
        data.insert(std::make_pair(0x1d0b6,"BYZANTINE MUSICAL SYMBOL ENARXIS KAI FTHORA VOU"));
        data.insert(std::make_pair(0x1d0b7,"BYZANTINE MUSICAL SYMBOL IMIFONON"));
        data.insert(std::make_pair(0x1d0b8,"BYZANTINE MUSICAL SYMBOL IMIFTHORON"));
        data.insert(std::make_pair(0x1d0b9,"BYZANTINE MUSICAL SYMBOL FTHORA ARCHAION DEYTEROU ICHOU"));
        data.insert(std::make_pair(0x1d0ba,"BYZANTINE MUSICAL SYMBOL FTHORA DIATONIKI PA"));
        data.insert(std::make_pair(0x1d0bb,"BYZANTINE MUSICAL SYMBOL FTHORA DIATONIKI NANA"));
        data.insert(std::make_pair(0x1d0bc,"BYZANTINE MUSICAL SYMBOL FTHORA NAOS ICHOS"));
        data.insert(std::make_pair(0x1d0bd,"BYZANTINE MUSICAL SYMBOL FTHORA DIATONIKI DI"));
        data.insert(std::make_pair(0x1d0be,"BYZANTINE MUSICAL SYMBOL FTHORA SKLIRON DIATONON DI"));
        data.insert(std::make_pair(0x1d0bf,"BYZANTINE MUSICAL SYMBOL FTHORA DIATONIKI KE"));
        data.insert(std::make_pair(0x1d0c0,"BYZANTINE MUSICAL SYMBOL FTHORA DIATONIKI ZO"));
        data.insert(std::make_pair(0x1d0c1,"BYZANTINE MUSICAL SYMBOL FTHORA DIATONIKI NI KATO"));
        data.insert(std::make_pair(0x1d0c2,"BYZANTINE MUSICAL SYMBOL FTHORA DIATONIKI NI ANO"));
        data.insert(std::make_pair(0x1d0c3,"BYZANTINE MUSICAL SYMBOL FTHORA MALAKON CHROMA DIFONIAS"));
        data.insert(std::make_pair(0x1d0c4,"BYZANTINE MUSICAL SYMBOL FTHORA MALAKON CHROMA MONOFONIAS"));
        data.insert(std::make_pair(0x1d0c5,"BYZANTINE MUSICAL SYMBOL FHTORA SKLIRON CHROMA VASIS"));
        data.insert(std::make_pair(0x1d0c6,"BYZANTINE MUSICAL SYMBOL FTHORA SKLIRON CHROMA SYNAFI"));
        data.insert(std::make_pair(0x1d0c7,"BYZANTINE MUSICAL SYMBOL FTHORA NENANO"));
        data.insert(std::make_pair(0x1d0c8,"BYZANTINE MUSICAL SYMBOL CHROA ZYGOS"));
        data.insert(std::make_pair(0x1d0c9,"BYZANTINE MUSICAL SYMBOL CHROA KLITON"));
        data.insert(std::make_pair(0x1d0ca,"BYZANTINE MUSICAL SYMBOL CHROA SPATHI"));
        data.insert(std::make_pair(0x1d0cb,"BYZANTINE MUSICAL SYMBOL FTHORA I YFESIS TETARTIMORION"));
        data.insert(std::make_pair(0x1d0cc,"BYZANTINE MUSICAL SYMBOL FTHORA ENARMONIOS ANTIFONIA"));
        data.insert(std::make_pair(0x1d0cd,"BYZANTINE MUSICAL SYMBOL YFESIS TRITIMORION"));
        data.insert(std::make_pair(0x1d0ce,"BYZANTINE MUSICAL SYMBOL DIESIS TRITIMORION"));
        data.insert(std::make_pair(0x1d0cf,"BYZANTINE MUSICAL SYMBOL DIESIS TETARTIMORION"));
        data.insert(std::make_pair(0x1d0d0,"BYZANTINE MUSICAL SYMBOL DIESIS APLI DYO DODEKATA"));
        data.insert(std::make_pair(0x1d0d1,"BYZANTINE MUSICAL SYMBOL DIESIS MONOGRAMMOS TESSERA DODEKATA"));
        data.insert(std::make_pair(0x1d0d2,"BYZANTINE MUSICAL SYMBOL DIESIS DIGRAMMOS EX DODEKATA"));
        data.insert(std::make_pair(0x1d0d3,"BYZANTINE MUSICAL SYMBOL DIESIS TRIGRAMMOS OKTO DODEKATA"));
        data.insert(std::make_pair(0x1d0d4,"BYZANTINE MUSICAL SYMBOL YFESIS APLI DYO DODEKATA"));
        data.insert(std::make_pair(0x1d0d5,"BYZANTINE MUSICAL SYMBOL YFESIS MONOGRAMMOS TESSERA DODEKATA"));
        data.insert(std::make_pair(0x1d0d6,"BYZANTINE MUSICAL SYMBOL YFESIS DIGRAMMOS EX DODEKATA"));
        data.insert(std::make_pair(0x1d0d7,"BYZANTINE MUSICAL SYMBOL YFESIS TRIGRAMMOS OKTO DODEKATA"));
        data.insert(std::make_pair(0x1d0d8,"BYZANTINE MUSICAL SYMBOL GENIKI DIESIS"));
        data.insert(std::make_pair(0x1d0d9,"BYZANTINE MUSICAL SYMBOL GENIKI YFESIS"));
        data.insert(std::make_pair(0x1d0da,"BYZANTINE MUSICAL SYMBOL DIASTOLI APLI MIKRI"));
        data.insert(std::make_pair(0x1d0db,"BYZANTINE MUSICAL SYMBOL DIASTOLI APLI MEGALI"));
        data.insert(std::make_pair(0x1d0dc,"BYZANTINE MUSICAL SYMBOL DIASTOLI DIPLI"));
        data.insert(std::make_pair(0x1d0dd,"BYZANTINE MUSICAL SYMBOL DIASTOLI THESEOS"));
        data.insert(std::make_pair(0x1d0de,"BYZANTINE MUSICAL SYMBOL SIMANSIS THESEOS"));
        data.insert(std::make_pair(0x1d0df,"BYZANTINE MUSICAL SYMBOL SIMANSIS THESEOS DISIMOU"));
        data.insert(std::make_pair(0x1d0e0,"BYZANTINE MUSICAL SYMBOL SIMANSIS THESEOS TRISIMOU"));
        data.insert(std::make_pair(0x1d0e1,"BYZANTINE MUSICAL SYMBOL SIMANSIS THESEOS TETRASIMOU"));
        data.insert(std::make_pair(0x1d0e2,"BYZANTINE MUSICAL SYMBOL SIMANSIS ARSEOS"));
        data.insert(std::make_pair(0x1d0e3,"BYZANTINE MUSICAL SYMBOL SIMANSIS ARSEOS DISIMOU"));
        data.insert(std::make_pair(0x1d0e4,"BYZANTINE MUSICAL SYMBOL SIMANSIS ARSEOS TRISIMOU"));
        data.insert(std::make_pair(0x1d0e5,"BYZANTINE MUSICAL SYMBOL SIMANSIS ARSEOS TETRASIMOU"));
        data.insert(std::make_pair(0x1d0e6,"BYZANTINE MUSICAL SYMBOL DIGRAMMA GG"));
        data.insert(std::make_pair(0x1d0e7,"BYZANTINE MUSICAL SYMBOL DIFTOGGOS OU"));
        data.insert(std::make_pair(0x1d0e8,"BYZANTINE MUSICAL SYMBOL STIGMA"));
        data.insert(std::make_pair(0x1d0e9,"BYZANTINE MUSICAL SYMBOL ARKTIKO PA"));
        data.insert(std::make_pair(0x1d0ea,"BYZANTINE MUSICAL SYMBOL ARKTIKO VOU"));
        data.insert(std::make_pair(0x1d0eb,"BYZANTINE MUSICAL SYMBOL ARKTIKO GA"));
        data.insert(std::make_pair(0x1d0ec,"BYZANTINE MUSICAL SYMBOL ARKTIKO DI"));
        data.insert(std::make_pair(0x1d0ed,"BYZANTINE MUSICAL SYMBOL ARKTIKO KE"));
        data.insert(std::make_pair(0x1d0ee,"BYZANTINE MUSICAL SYMBOL ARKTIKO ZO"));
        data.insert(std::make_pair(0x1d0ef,"BYZANTINE MUSICAL SYMBOL ARKTIKO NI"));
        data.insert(std::make_pair(0x1d0f0,"BYZANTINE MUSICAL SYMBOL KENTIMATA NEO MESO"));
        data.insert(std::make_pair(0x1d0f1,"BYZANTINE MUSICAL SYMBOL KENTIMA NEO MESO"));
        data.insert(std::make_pair(0x1d0f2,"BYZANTINE MUSICAL SYMBOL KENTIMATA NEO KATO"));
        data.insert(std::make_pair(0x1d0f3,"BYZANTINE MUSICAL SYMBOL KENTIMA NEO KATO"));
        data.insert(std::make_pair(0x1d0f4,"BYZANTINE MUSICAL SYMBOL KLASMA KATO"));
        data.insert(std::make_pair(0x1d0f5,"BYZANTINE MUSICAL SYMBOL GORGON NEO KATO"));
        data.insert(std::make_pair(0x1d100,"MUSICAL SYMBOL SINGLE BARLINE"));
        data.insert(std::make_pair(0x1d101,"MUSICAL SYMBOL DOUBLE BARLINE"));
        data.insert(std::make_pair(0x1d102,"MUSICAL SYMBOL FINAL BARLINE"));
        data.insert(std::make_pair(0x1d103,"MUSICAL SYMBOL REVERSE FINAL BARLINE"));
        data.insert(std::make_pair(0x1d104,"MUSICAL SYMBOL DASHED BARLINE"));
        data.insert(std::make_pair(0x1d105,"MUSICAL SYMBOL SHORT BARLINE"));
        data.insert(std::make_pair(0x1d106,"MUSICAL SYMBOL LEFT REPEAT SIGN"));
        data.insert(std::make_pair(0x1d107,"MUSICAL SYMBOL RIGHT REPEAT SIGN"));
        data.insert(std::make_pair(0x1d108,"MUSICAL SYMBOL REPEAT DOTS"));
        data.insert(std::make_pair(0x1d109,"MUSICAL SYMBOL DAL SEGNO"));
        data.insert(std::make_pair(0x1d10a,"MUSICAL SYMBOL DA CAPO"));
        data.insert(std::make_pair(0x1d10b,"MUSICAL SYMBOL SEGNO"));
        data.insert(std::make_pair(0x1d10c,"MUSICAL SYMBOL CODA"));
        data.insert(std::make_pair(0x1d10d,"MUSICAL SYMBOL REPEATED FIGURE-1"));
        data.insert(std::make_pair(0x1d10e,"MUSICAL SYMBOL REPEATED FIGURE-2"));
        data.insert(std::make_pair(0x1d10f,"MUSICAL SYMBOL REPEATED FIGURE-3"));
        data.insert(std::make_pair(0x1d110,"MUSICAL SYMBOL FERMATA"));
        data.insert(std::make_pair(0x1d111,"MUSICAL SYMBOL FERMATA BELOW"));
        data.insert(std::make_pair(0x1d112,"MUSICAL SYMBOL BREATH MARK"));
        data.insert(std::make_pair(0x1d113,"MUSICAL SYMBOL CAESURA"));
        data.insert(std::make_pair(0x1d114,"MUSICAL SYMBOL BRACE"));
        data.insert(std::make_pair(0x1d115,"MUSICAL SYMBOL BRACKET"));
        data.insert(std::make_pair(0x1d116,"MUSICAL SYMBOL ONE-LINE STAFF"));
        data.insert(std::make_pair(0x1d117,"MUSICAL SYMBOL TWO-LINE STAFF"));
        data.insert(std::make_pair(0x1d118,"MUSICAL SYMBOL THREE-LINE STAFF"));
        data.insert(std::make_pair(0x1d119,"MUSICAL SYMBOL FOUR-LINE STAFF"));
        data.insert(std::make_pair(0x1d11a,"MUSICAL SYMBOL FIVE-LINE STAFF"));
        data.insert(std::make_pair(0x1d11b,"MUSICAL SYMBOL SIX-LINE STAFF"));
        data.insert(std::make_pair(0x1d11c,"MUSICAL SYMBOL SIX-STRING FRETBOARD"));
        data.insert(std::make_pair(0x1d11d,"MUSICAL SYMBOL FOUR-STRING FRETBOARD"));
        data.insert(std::make_pair(0x1d11e,"MUSICAL SYMBOL G CLEF"));
        data.insert(std::make_pair(0x1d11f,"MUSICAL SYMBOL G CLEF OTTAVA ALTA"));
        data.insert(std::make_pair(0x1d120,"MUSICAL SYMBOL G CLEF OTTAVA BASSA"));
        data.insert(std::make_pair(0x1d121,"MUSICAL SYMBOL C CLEF"));
        data.insert(std::make_pair(0x1d122,"MUSICAL SYMBOL F CLEF"));
        data.insert(std::make_pair(0x1d123,"MUSICAL SYMBOL F CLEF OTTAVA ALTA"));
        data.insert(std::make_pair(0x1d124,"MUSICAL SYMBOL F CLEF OTTAVA BASSA"));
        data.insert(std::make_pair(0x1d125,"MUSICAL SYMBOL DRUM CLEF-1"));
        data.insert(std::make_pair(0x1d126,"MUSICAL SYMBOL DRUM CLEF-2"));
        data.insert(std::make_pair(0x1d129,"MUSICAL SYMBOL MULTIPLE MEASURE REST"));
        data.insert(std::make_pair(0x1d12a,"MUSICAL SYMBOL DOUBLE SHARP"));
        data.insert(std::make_pair(0x1d12b,"MUSICAL SYMBOL DOUBLE FLAT"));
        data.insert(std::make_pair(0x1d12c,"MUSICAL SYMBOL FLAT UP"));
        data.insert(std::make_pair(0x1d12d,"MUSICAL SYMBOL FLAT DOWN"));
        data.insert(std::make_pair(0x1d12e,"MUSICAL SYMBOL NATURAL UP"));
        data.insert(std::make_pair(0x1d12f,"MUSICAL SYMBOL NATURAL DOWN"));
        data.insert(std::make_pair(0x1d130,"MUSICAL SYMBOL SHARP UP"));
        data.insert(std::make_pair(0x1d131,"MUSICAL SYMBOL SHARP DOWN"));
        data.insert(std::make_pair(0x1d132,"MUSICAL SYMBOL QUARTER TONE SHARP"));
        data.insert(std::make_pair(0x1d133,"MUSICAL SYMBOL QUARTER TONE FLAT"));
        data.insert(std::make_pair(0x1d134,"MUSICAL SYMBOL COMMON TIME"));
        data.insert(std::make_pair(0x1d135,"MUSICAL SYMBOL CUT TIME"));
        data.insert(std::make_pair(0x1d136,"MUSICAL SYMBOL OTTAVA ALTA"));
        data.insert(std::make_pair(0x1d137,"MUSICAL SYMBOL OTTAVA BASSA"));
        data.insert(std::make_pair(0x1d138,"MUSICAL SYMBOL QUINDICESIMA ALTA"));
        data.insert(std::make_pair(0x1d139,"MUSICAL SYMBOL QUINDICESIMA BASSA"));
        data.insert(std::make_pair(0x1d13a,"MUSICAL SYMBOL MULTI REST"));
        data.insert(std::make_pair(0x1d13b,"MUSICAL SYMBOL WHOLE REST"));
        data.insert(std::make_pair(0x1d13c,"MUSICAL SYMBOL HALF REST"));
        data.insert(std::make_pair(0x1d13d,"MUSICAL SYMBOL QUARTER REST"));
        data.insert(std::make_pair(0x1d13e,"MUSICAL SYMBOL EIGHTH REST"));
        data.insert(std::make_pair(0x1d13f,"MUSICAL SYMBOL SIXTEENTH REST"));
        data.insert(std::make_pair(0x1d140,"MUSICAL SYMBOL THIRTY-SECOND REST"));
        data.insert(std::make_pair(0x1d141,"MUSICAL SYMBOL SIXTY-FOURTH REST"));
        data.insert(std::make_pair(0x1d142,"MUSICAL SYMBOL ONE HUNDRED TWENTY-EIGHTH REST"));
        data.insert(std::make_pair(0x1d143,"MUSICAL SYMBOL X NOTEHEAD"));
        data.insert(std::make_pair(0x1d144,"MUSICAL SYMBOL PLUS NOTEHEAD"));
        data.insert(std::make_pair(0x1d145,"MUSICAL SYMBOL CIRCLE X NOTEHEAD"));
        data.insert(std::make_pair(0x1d146,"MUSICAL SYMBOL SQUARE NOTEHEAD WHITE"));
        data.insert(std::make_pair(0x1d147,"MUSICAL SYMBOL SQUARE NOTEHEAD BLACK"));
        data.insert(std::make_pair(0x1d148,"MUSICAL SYMBOL TRIANGLE NOTEHEAD UP WHITE"));
        data.insert(std::make_pair(0x1d149,"MUSICAL SYMBOL TRIANGLE NOTEHEAD UP BLACK"));
        data.insert(std::make_pair(0x1d14a,"MUSICAL SYMBOL TRIANGLE NOTEHEAD LEFT WHITE"));
        data.insert(std::make_pair(0x1d14b,"MUSICAL SYMBOL TRIANGLE NOTEHEAD LEFT BLACK"));
        data.insert(std::make_pair(0x1d14c,"MUSICAL SYMBOL TRIANGLE NOTEHEAD RIGHT WHITE"));
        data.insert(std::make_pair(0x1d14d,"MUSICAL SYMBOL TRIANGLE NOTEHEAD RIGHT BLACK"));
        data.insert(std::make_pair(0x1d14e,"MUSICAL SYMBOL TRIANGLE NOTEHEAD DOWN WHITE"));
        data.insert(std::make_pair(0x1d14f,"MUSICAL SYMBOL TRIANGLE NOTEHEAD DOWN BLACK"));
        data.insert(std::make_pair(0x1d150,"MUSICAL SYMBOL TRIANGLE NOTEHEAD UP RIGHT WHITE"));
        data.insert(std::make_pair(0x1d151,"MUSICAL SYMBOL TRIANGLE NOTEHEAD UP RIGHT BLACK"));
        data.insert(std::make_pair(0x1d152,"MUSICAL SYMBOL MOON NOTEHEAD WHITE"));
        data.insert(std::make_pair(0x1d153,"MUSICAL SYMBOL MOON NOTEHEAD BLACK"));
        data.insert(std::make_pair(0x1d154,"MUSICAL SYMBOL TRIANGLE-ROUND NOTEHEAD DOWN WHITE"));
        data.insert(std::make_pair(0x1d155,"MUSICAL SYMBOL TRIANGLE-ROUND NOTEHEAD DOWN BLACK"));
        data.insert(std::make_pair(0x1d156,"MUSICAL SYMBOL PARENTHESIS NOTEHEAD"));
        data.insert(std::make_pair(0x1d157,"MUSICAL SYMBOL VOID NOTEHEAD"));
        data.insert(std::make_pair(0x1d158,"MUSICAL SYMBOL NOTEHEAD BLACK"));
        data.insert(std::make_pair(0x1d159,"MUSICAL SYMBOL NULL NOTEHEAD"));
        data.insert(std::make_pair(0x1d15a,"MUSICAL SYMBOL CLUSTER NOTEHEAD WHITE"));
        data.insert(std::make_pair(0x1d15b,"MUSICAL SYMBOL CLUSTER NOTEHEAD BLACK"));
        data.insert(std::make_pair(0x1d15c,"MUSICAL SYMBOL BREVE"));
        data.insert(std::make_pair(0x1d15d,"MUSICAL SYMBOL WHOLE NOTE"));
        data.insert(std::make_pair(0x1d15e,"MUSICAL SYMBOL HALF NOTE"));
        data.insert(std::make_pair(0x1d15f,"MUSICAL SYMBOL QUARTER NOTE"));
        data.insert(std::make_pair(0x1d160,"MUSICAL SYMBOL EIGHTH NOTE"));
        data.insert(std::make_pair(0x1d161,"MUSICAL SYMBOL SIXTEENTH NOTE"));
        data.insert(std::make_pair(0x1d162,"MUSICAL SYMBOL THIRTY-SECOND NOTE"));
        data.insert(std::make_pair(0x1d163,"MUSICAL SYMBOL SIXTY-FOURTH NOTE"));
        data.insert(std::make_pair(0x1d164,"MUSICAL SYMBOL ONE HUNDRED TWENTY-EIGHTH NOTE"));
        data.insert(std::make_pair(0x1d165,"MUSICAL SYMBOL COMBINING STEM"));
        data.insert(std::make_pair(0x1d166,"MUSICAL SYMBOL COMBINING SPRECHGESANG STEM"));
        data.insert(std::make_pair(0x1d167,"MUSICAL SYMBOL COMBINING TREMOLO-1"));
        data.insert(std::make_pair(0x1d168,"MUSICAL SYMBOL COMBINING TREMOLO-2"));
        data.insert(std::make_pair(0x1d169,"MUSICAL SYMBOL COMBINING TREMOLO-3"));
        data.insert(std::make_pair(0x1d16a,"MUSICAL SYMBOL FINGERED TREMOLO-1"));
        data.insert(std::make_pair(0x1d16b,"MUSICAL SYMBOL FINGERED TREMOLO-2"));
        data.insert(std::make_pair(0x1d16c,"MUSICAL SYMBOL FINGERED TREMOLO-3"));
        data.insert(std::make_pair(0x1d16d,"MUSICAL SYMBOL COMBINING AUGMENTATION DOT"));
        data.insert(std::make_pair(0x1d16e,"MUSICAL SYMBOL COMBINING FLAG-1"));
        data.insert(std::make_pair(0x1d16f,"MUSICAL SYMBOL COMBINING FLAG-2"));
        data.insert(std::make_pair(0x1d170,"MUSICAL SYMBOL COMBINING FLAG-3"));
        data.insert(std::make_pair(0x1d171,"MUSICAL SYMBOL COMBINING FLAG-4"));
        data.insert(std::make_pair(0x1d172,"MUSICAL SYMBOL COMBINING FLAG-5"));
        data.insert(std::make_pair(0x1d173,"MUSICAL SYMBOL BEGIN BEAM"));
        data.insert(std::make_pair(0x1d174,"MUSICAL SYMBOL END BEAM"));
        data.insert(std::make_pair(0x1d175,"MUSICAL SYMBOL BEGIN TIE"));
        data.insert(std::make_pair(0x1d176,"MUSICAL SYMBOL END TIE"));
        data.insert(std::make_pair(0x1d177,"MUSICAL SYMBOL BEGIN SLUR"));
        data.insert(std::make_pair(0x1d178,"MUSICAL SYMBOL END SLUR"));
        data.insert(std::make_pair(0x1d179,"MUSICAL SYMBOL BEGIN PHRASE"));
        data.insert(std::make_pair(0x1d17a,"MUSICAL SYMBOL END PHRASE"));
        data.insert(std::make_pair(0x1d17b,"MUSICAL SYMBOL COMBINING ACCENT"));
        data.insert(std::make_pair(0x1d17c,"MUSICAL SYMBOL COMBINING STACCATO"));
        data.insert(std::make_pair(0x1d17d,"MUSICAL SYMBOL COMBINING TENUTO"));
        data.insert(std::make_pair(0x1d17e,"MUSICAL SYMBOL COMBINING STACCATISSIMO"));
        data.insert(std::make_pair(0x1d17f,"MUSICAL SYMBOL COMBINING MARCATO"));
        data.insert(std::make_pair(0x1d180,"MUSICAL SYMBOL COMBINING MARCATO-STACCATO"));
        data.insert(std::make_pair(0x1d181,"MUSICAL SYMBOL COMBINING ACCENT-STACCATO"));
        data.insert(std::make_pair(0x1d182,"MUSICAL SYMBOL COMBINING LOURE"));
        data.insert(std::make_pair(0x1d183,"MUSICAL SYMBOL ARPEGGIATO UP"));
        data.insert(std::make_pair(0x1d184,"MUSICAL SYMBOL ARPEGGIATO DOWN"));
        data.insert(std::make_pair(0x1d185,"MUSICAL SYMBOL COMBINING DOIT"));
        data.insert(std::make_pair(0x1d186,"MUSICAL SYMBOL COMBINING RIP"));
        data.insert(std::make_pair(0x1d187,"MUSICAL SYMBOL COMBINING FLIP"));
        data.insert(std::make_pair(0x1d188,"MUSICAL SYMBOL COMBINING SMEAR"));
        data.insert(std::make_pair(0x1d189,"MUSICAL SYMBOL COMBINING BEND"));
        data.insert(std::make_pair(0x1d18a,"MUSICAL SYMBOL COMBINING DOUBLE TONGUE"));
        data.insert(std::make_pair(0x1d18b,"MUSICAL SYMBOL COMBINING TRIPLE TONGUE"));
        data.insert(std::make_pair(0x1d18c,"MUSICAL SYMBOL RINFORZANDO"));
        data.insert(std::make_pair(0x1d18d,"MUSICAL SYMBOL SUBITO"));
        data.insert(std::make_pair(0x1d18e,"MUSICAL SYMBOL Z"));
        data.insert(std::make_pair(0x1d18f,"MUSICAL SYMBOL PIANO"));
        data.insert(std::make_pair(0x1d190,"MUSICAL SYMBOL MEZZO"));
        data.insert(std::make_pair(0x1d191,"MUSICAL SYMBOL FORTE"));
        data.insert(std::make_pair(0x1d192,"MUSICAL SYMBOL CRESCENDO"));
        data.insert(std::make_pair(0x1d193,"MUSICAL SYMBOL DECRESCENDO"));
        data.insert(std::make_pair(0x1d194,"MUSICAL SYMBOL GRACE NOTE SLASH"));
        data.insert(std::make_pair(0x1d195,"MUSICAL SYMBOL GRACE NOTE NO SLASH"));
        data.insert(std::make_pair(0x1d196,"MUSICAL SYMBOL TR"));
        data.insert(std::make_pair(0x1d197,"MUSICAL SYMBOL TURN"));
        data.insert(std::make_pair(0x1d198,"MUSICAL SYMBOL INVERTED TURN"));
        data.insert(std::make_pair(0x1d199,"MUSICAL SYMBOL TURN SLASH"));
        data.insert(std::make_pair(0x1d19a,"MUSICAL SYMBOL TURN UP"));
        data.insert(std::make_pair(0x1d19b,"MUSICAL SYMBOL ORNAMENT STROKE-1"));
        data.insert(std::make_pair(0x1d19c,"MUSICAL SYMBOL ORNAMENT STROKE-2"));
        data.insert(std::make_pair(0x1d19d,"MUSICAL SYMBOL ORNAMENT STROKE-3"));
        data.insert(std::make_pair(0x1d19e,"MUSICAL SYMBOL ORNAMENT STROKE-4"));
        data.insert(std::make_pair(0x1d19f,"MUSICAL SYMBOL ORNAMENT STROKE-5"));
        data.insert(std::make_pair(0x1d1a0,"MUSICAL SYMBOL ORNAMENT STROKE-6"));
        data.insert(std::make_pair(0x1d1a1,"MUSICAL SYMBOL ORNAMENT STROKE-7"));
        data.insert(std::make_pair(0x1d1a2,"MUSICAL SYMBOL ORNAMENT STROKE-8"));
        data.insert(std::make_pair(0x1d1a3,"MUSICAL SYMBOL ORNAMENT STROKE-9"));
        data.insert(std::make_pair(0x1d1a4,"MUSICAL SYMBOL ORNAMENT STROKE-10"));
        data.insert(std::make_pair(0x1d1a5,"MUSICAL SYMBOL ORNAMENT STROKE-11"));
        data.insert(std::make_pair(0x1d1a6,"MUSICAL SYMBOL HAUPTSTIMME"));
        data.insert(std::make_pair(0x1d1a7,"MUSICAL SYMBOL NEBENSTIMME"));
        data.insert(std::make_pair(0x1d1a8,"MUSICAL SYMBOL END OF STIMME"));
        data.insert(std::make_pair(0x1d1a9,"MUSICAL SYMBOL DEGREE SLASH"));
        data.insert(std::make_pair(0x1d1aa,"MUSICAL SYMBOL COMBINING DOWN BOW"));
        data.insert(std::make_pair(0x1d1ab,"MUSICAL SYMBOL COMBINING UP BOW"));
        data.insert(std::make_pair(0x1d1ac,"MUSICAL SYMBOL COMBINING HARMONIC"));
        data.insert(std::make_pair(0x1d1ad,"MUSICAL SYMBOL COMBINING SNAP PIZZICATO"));
        data.insert(std::make_pair(0x1d1ae,"MUSICAL SYMBOL PEDAL MARK"));
        data.insert(std::make_pair(0x1d1af,"MUSICAL SYMBOL PEDAL UP MARK"));
        data.insert(std::make_pair(0x1d1b0,"MUSICAL SYMBOL HALF PEDAL MARK"));
        data.insert(std::make_pair(0x1d1b1,"MUSICAL SYMBOL GLISSANDO UP"));
        data.insert(std::make_pair(0x1d1b2,"MUSICAL SYMBOL GLISSANDO DOWN"));
        data.insert(std::make_pair(0x1d1b3,"MUSICAL SYMBOL WITH FINGERNAILS"));
        data.insert(std::make_pair(0x1d1b4,"MUSICAL SYMBOL DAMP"));
        data.insert(std::make_pair(0x1d1b5,"MUSICAL SYMBOL DAMP ALL"));
        data.insert(std::make_pair(0x1d1b6,"MUSICAL SYMBOL MAXIMA"));
        data.insert(std::make_pair(0x1d1b7,"MUSICAL SYMBOL LONGA"));
        data.insert(std::make_pair(0x1d1b8,"MUSICAL SYMBOL BREVIS"));
        data.insert(std::make_pair(0x1d1b9,"MUSICAL SYMBOL SEMIBREVIS WHITE"));
        data.insert(std::make_pair(0x1d1ba,"MUSICAL SYMBOL SEMIBREVIS BLACK"));
        data.insert(std::make_pair(0x1d1bb,"MUSICAL SYMBOL MINIMA"));
        data.insert(std::make_pair(0x1d1bc,"MUSICAL SYMBOL MINIMA BLACK"));
        data.insert(std::make_pair(0x1d1bd,"MUSICAL SYMBOL SEMIMINIMA WHITE"));
        data.insert(std::make_pair(0x1d1be,"MUSICAL SYMBOL SEMIMINIMA BLACK"));
        data.insert(std::make_pair(0x1d1bf,"MUSICAL SYMBOL FUSA WHITE"));
        data.insert(std::make_pair(0x1d1c0,"MUSICAL SYMBOL FUSA BLACK"));
        data.insert(std::make_pair(0x1d1c1,"MUSICAL SYMBOL LONGA PERFECTA REST"));
        data.insert(std::make_pair(0x1d1c2,"MUSICAL SYMBOL LONGA IMPERFECTA REST"));
        data.insert(std::make_pair(0x1d1c3,"MUSICAL SYMBOL BREVIS REST"));
        data.insert(std::make_pair(0x1d1c4,"MUSICAL SYMBOL SEMIBREVIS REST"));
        data.insert(std::make_pair(0x1d1c5,"MUSICAL SYMBOL MINIMA REST"));
        data.insert(std::make_pair(0x1d1c6,"MUSICAL SYMBOL SEMIMINIMA REST"));
        data.insert(std::make_pair(0x1d1c7,"MUSICAL SYMBOL TEMPUS PERFECTUM CUM PROLATIONE PERFECTA"));
        data.insert(std::make_pair(0x1d1c8,"MUSICAL SYMBOL TEMPUS PERFECTUM CUM PROLATIONE IMPERFECTA"));
        data.insert(std::make_pair(0x1d1c9,"MUSICAL SYMBOL TEMPUS PERFECTUM CUM PROLATIONE PERFECTA DIMINUTION-1"));
        data.insert(std::make_pair(0x1d1ca,"MUSICAL SYMBOL TEMPUS IMPERFECTUM CUM PROLATIONE PERFECTA"));
        data.insert(std::make_pair(0x1d1cb,"MUSICAL SYMBOL TEMPUS IMPERFECTUM CUM PROLATIONE IMPERFECTA"));
        data.insert(std::make_pair(0x1d1cc,"MUSICAL SYMBOL TEMPUS IMPERFECTUM CUM PROLATIONE IMPERFECTA DIMINUTION-1"));
        data.insert(std::make_pair(0x1d1cd,"MUSICAL SYMBOL TEMPUS IMPERFECTUM CUM PROLATIONE IMPERFECTA DIMINUTION-2"));
        data.insert(std::make_pair(0x1d1ce,"MUSICAL SYMBOL TEMPUS IMPERFECTUM CUM PROLATIONE IMPERFECTA DIMINUTION-3"));
        data.insert(std::make_pair(0x1d1cf,"MUSICAL SYMBOL CROIX"));
        data.insert(std::make_pair(0x1d1d0,"MUSICAL SYMBOL GREGORIAN C CLEF"));
        data.insert(std::make_pair(0x1d1d1,"MUSICAL SYMBOL GREGORIAN F CLEF"));
        data.insert(std::make_pair(0x1d1d2,"MUSICAL SYMBOL SQUARE B"));
        data.insert(std::make_pair(0x1d1d3,"MUSICAL SYMBOL VIRGA"));
        data.insert(std::make_pair(0x1d1d4,"MUSICAL SYMBOL PODATUS"));
        data.insert(std::make_pair(0x1d1d5,"MUSICAL SYMBOL CLIVIS"));
        data.insert(std::make_pair(0x1d1d6,"MUSICAL SYMBOL SCANDICUS"));
        data.insert(std::make_pair(0x1d1d7,"MUSICAL SYMBOL CLIMACUS"));
        data.insert(std::make_pair(0x1d1d8,"MUSICAL SYMBOL TORCULUS"));
        data.insert(std::make_pair(0x1d1d9,"MUSICAL SYMBOL PORRECTUS"));
        data.insert(std::make_pair(0x1d1da,"MUSICAL SYMBOL PORRECTUS FLEXUS"));
        data.insert(std::make_pair(0x1d1db,"MUSICAL SYMBOL SCANDICUS FLEXUS"));
        data.insert(std::make_pair(0x1d1dc,"MUSICAL SYMBOL TORCULUS RESUPINUS"));
        data.insert(std::make_pair(0x1d1dd,"MUSICAL SYMBOL PES SUBPUNCTIS"));
        data.insert(std::make_pair(0x1d1de,"MUSICAL SYMBOL KIEVAN C CLEF"));
        data.insert(std::make_pair(0x1d1df,"MUSICAL SYMBOL KIEVAN END OF PIECE"));
        data.insert(std::make_pair(0x1d1e0,"MUSICAL SYMBOL KIEVAN FINAL NOTE"));
        data.insert(std::make_pair(0x1d1e1,"MUSICAL SYMBOL KIEVAN RECITATIVE MARK"));
        data.insert(std::make_pair(0x1d1e2,"MUSICAL SYMBOL KIEVAN WHOLE NOTE"));
        data.insert(std::make_pair(0x1d1e3,"MUSICAL SYMBOL KIEVAN HALF NOTE"));
        data.insert(std::make_pair(0x1d1e4,"MUSICAL SYMBOL KIEVAN QUARTER NOTE STEM DOWN"));
        data.insert(std::make_pair(0x1d1e5,"MUSICAL SYMBOL KIEVAN QUARTER NOTE STEM UP"));
        data.insert(std::make_pair(0x1d1e6,"MUSICAL SYMBOL KIEVAN EIGHTH NOTE STEM DOWN"));
        data.insert(std::make_pair(0x1d1e7,"MUSICAL SYMBOL KIEVAN EIGHTH NOTE STEM UP"));
        data.insert(std::make_pair(0x1d1e8,"MUSICAL SYMBOL KIEVAN FLAT SIGN"));
        data.insert(std::make_pair(0x1d1e9,"MUSICAL SYMBOL SORI"));
        data.insert(std::make_pair(0x1d1ea,"MUSICAL SYMBOL KORON"));
        data.insert(std::make_pair(0x1d200,"GREEK VOCAL NOTATION SYMBOL-1"));
        data.insert(std::make_pair(0x1d201,"GREEK VOCAL NOTATION SYMBOL-2"));
        data.insert(std::make_pair(0x1d202,"GREEK VOCAL NOTATION SYMBOL-3"));
        data.insert(std::make_pair(0x1d203,"GREEK VOCAL NOTATION SYMBOL-4"));
        data.insert(std::make_pair(0x1d204,"GREEK VOCAL NOTATION SYMBOL-5"));
        data.insert(std::make_pair(0x1d205,"GREEK VOCAL NOTATION SYMBOL-6"));
        data.insert(std::make_pair(0x1d206,"GREEK VOCAL NOTATION SYMBOL-7"));
        data.insert(std::make_pair(0x1d207,"GREEK VOCAL NOTATION SYMBOL-8"));
        data.insert(std::make_pair(0x1d208,"GREEK VOCAL NOTATION SYMBOL-9"));
        data.insert(std::make_pair(0x1d209,"GREEK VOCAL NOTATION SYMBOL-10"));
        data.insert(std::make_pair(0x1d20a,"GREEK VOCAL NOTATION SYMBOL-11"));
        data.insert(std::make_pair(0x1d20b,"GREEK VOCAL NOTATION SYMBOL-12"));
        data.insert(std::make_pair(0x1d20c,"GREEK VOCAL NOTATION SYMBOL-13"));
        data.insert(std::make_pair(0x1d20d,"GREEK VOCAL NOTATION SYMBOL-14"));
        data.insert(std::make_pair(0x1d20e,"GREEK VOCAL NOTATION SYMBOL-15"));
        data.insert(std::make_pair(0x1d20f,"GREEK VOCAL NOTATION SYMBOL-16"));
        data.insert(std::make_pair(0x1d210,"GREEK VOCAL NOTATION SYMBOL-17"));
        data.insert(std::make_pair(0x1d211,"GREEK VOCAL NOTATION SYMBOL-18"));
        data.insert(std::make_pair(0x1d212,"GREEK VOCAL NOTATION SYMBOL-19"));
        data.insert(std::make_pair(0x1d213,"GREEK VOCAL NOTATION SYMBOL-20"));
        data.insert(std::make_pair(0x1d214,"GREEK VOCAL NOTATION SYMBOL-21"));
        data.insert(std::make_pair(0x1d215,"GREEK VOCAL NOTATION SYMBOL-22"));
        data.insert(std::make_pair(0x1d216,"GREEK VOCAL NOTATION SYMBOL-23"));
        data.insert(std::make_pair(0x1d217,"GREEK VOCAL NOTATION SYMBOL-24"));
        data.insert(std::make_pair(0x1d218,"GREEK VOCAL NOTATION SYMBOL-50"));
        data.insert(std::make_pair(0x1d219,"GREEK VOCAL NOTATION SYMBOL-51"));
        data.insert(std::make_pair(0x1d21a,"GREEK VOCAL NOTATION SYMBOL-52"));
        data.insert(std::make_pair(0x1d21b,"GREEK VOCAL NOTATION SYMBOL-53"));
        data.insert(std::make_pair(0x1d21c,"GREEK VOCAL NOTATION SYMBOL-54"));
        data.insert(std::make_pair(0x1d21d,"GREEK INSTRUMENTAL NOTATION SYMBOL-1"));
        data.insert(std::make_pair(0x1d21e,"GREEK INSTRUMENTAL NOTATION SYMBOL-2"));
        data.insert(std::make_pair(0x1d21f,"GREEK INSTRUMENTAL NOTATION SYMBOL-4"));
        data.insert(std::make_pair(0x1d220,"GREEK INSTRUMENTAL NOTATION SYMBOL-5"));
        data.insert(std::make_pair(0x1d221,"GREEK INSTRUMENTAL NOTATION SYMBOL-7"));
        data.insert(std::make_pair(0x1d222,"GREEK INSTRUMENTAL NOTATION SYMBOL-8"));
        data.insert(std::make_pair(0x1d223,"GREEK INSTRUMENTAL NOTATION SYMBOL-11"));
        data.insert(std::make_pair(0x1d224,"GREEK INSTRUMENTAL NOTATION SYMBOL-12"));
        data.insert(std::make_pair(0x1d225,"GREEK INSTRUMENTAL NOTATION SYMBOL-13"));
        data.insert(std::make_pair(0x1d226,"GREEK INSTRUMENTAL NOTATION SYMBOL-14"));
        data.insert(std::make_pair(0x1d227,"GREEK INSTRUMENTAL NOTATION SYMBOL-17"));
        data.insert(std::make_pair(0x1d228,"GREEK INSTRUMENTAL NOTATION SYMBOL-18"));
        data.insert(std::make_pair(0x1d229,"GREEK INSTRUMENTAL NOTATION SYMBOL-19"));
        data.insert(std::make_pair(0x1d22a,"GREEK INSTRUMENTAL NOTATION SYMBOL-23"));
        data.insert(std::make_pair(0x1d22b,"GREEK INSTRUMENTAL NOTATION SYMBOL-24"));
        data.insert(std::make_pair(0x1d22c,"GREEK INSTRUMENTAL NOTATION SYMBOL-25"));
        data.insert(std::make_pair(0x1d22d,"GREEK INSTRUMENTAL NOTATION SYMBOL-26"));
        data.insert(std::make_pair(0x1d22e,"GREEK INSTRUMENTAL NOTATION SYMBOL-27"));
        data.insert(std::make_pair(0x1d22f,"GREEK INSTRUMENTAL NOTATION SYMBOL-29"));
        data.insert(std::make_pair(0x1d230,"GREEK INSTRUMENTAL NOTATION SYMBOL-30"));
        data.insert(std::make_pair(0x1d231,"GREEK INSTRUMENTAL NOTATION SYMBOL-32"));
        data.insert(std::make_pair(0x1d232,"GREEK INSTRUMENTAL NOTATION SYMBOL-36"));
        data.insert(std::make_pair(0x1d233,"GREEK INSTRUMENTAL NOTATION SYMBOL-37"));
        data.insert(std::make_pair(0x1d234,"GREEK INSTRUMENTAL NOTATION SYMBOL-38"));
        data.insert(std::make_pair(0x1d235,"GREEK INSTRUMENTAL NOTATION SYMBOL-39"));
        data.insert(std::make_pair(0x1d236,"GREEK INSTRUMENTAL NOTATION SYMBOL-40"));
        data.insert(std::make_pair(0x1d237,"GREEK INSTRUMENTAL NOTATION SYMBOL-42"));
        data.insert(std::make_pair(0x1d238,"GREEK INSTRUMENTAL NOTATION SYMBOL-43"));
        data.insert(std::make_pair(0x1d239,"GREEK INSTRUMENTAL NOTATION SYMBOL-45"));
        data.insert(std::make_pair(0x1d23a,"GREEK INSTRUMENTAL NOTATION SYMBOL-47"));
        data.insert(std::make_pair(0x1d23b,"GREEK INSTRUMENTAL NOTATION SYMBOL-48"));
        data.insert(std::make_pair(0x1d23c,"GREEK INSTRUMENTAL NOTATION SYMBOL-49"));
        data.insert(std::make_pair(0x1d23d,"GREEK INSTRUMENTAL NOTATION SYMBOL-50"));
        data.insert(std::make_pair(0x1d23e,"GREEK INSTRUMENTAL NOTATION SYMBOL-51"));
        data.insert(std::make_pair(0x1d23f,"GREEK INSTRUMENTAL NOTATION SYMBOL-52"));
        data.insert(std::make_pair(0x1d240,"GREEK INSTRUMENTAL NOTATION SYMBOL-53"));
        data.insert(std::make_pair(0x1d241,"GREEK INSTRUMENTAL NOTATION SYMBOL-54"));
        data.insert(std::make_pair(0x1d242,"COMBINING GREEK MUSICAL TRISEME"));
        data.insert(std::make_pair(0x1d243,"COMBINING GREEK MUSICAL TETRASEME"));
        data.insert(std::make_pair(0x1d244,"COMBINING GREEK MUSICAL PENTASEME"));
        data.insert(std::make_pair(0x1d245,"GREEK MUSICAL LEIMMA"));
        data.insert(std::make_pair(0x1d2c0,"KAKTOVIK NUMERAL ZERO"));
        data.insert(std::make_pair(0x1d2c1,"KAKTOVIK NUMERAL ONE"));
        data.insert(std::make_pair(0x1d2c2,"KAKTOVIK NUMERAL TWO"));
        data.insert(std::make_pair(0x1d2c3,"KAKTOVIK NUMERAL THREE"));
        data.insert(std::make_pair(0x1d2c4,"KAKTOVIK NUMERAL FOUR"));
        data.insert(std::make_pair(0x1d2c5,"KAKTOVIK NUMERAL FIVE"));
        data.insert(std::make_pair(0x1d2c6,"KAKTOVIK NUMERAL SIX"));
        data.insert(std::make_pair(0x1d2c7,"KAKTOVIK NUMERAL SEVEN"));
        data.insert(std::make_pair(0x1d2c8,"KAKTOVIK NUMERAL EIGHT"));
        data.insert(std::make_pair(0x1d2c9,"KAKTOVIK NUMERAL NINE"));
        data.insert(std::make_pair(0x1d2ca,"KAKTOVIK NUMERAL TEN"));
        data.insert(std::make_pair(0x1d2cb,"KAKTOVIK NUMERAL ELEVEN"));
        data.insert(std::make_pair(0x1d2cc,"KAKTOVIK NUMERAL TWELVE"));
        data.insert(std::make_pair(0x1d2cd,"KAKTOVIK NUMERAL THIRTEEN"));
        data.insert(std::make_pair(0x1d2ce,"KAKTOVIK NUMERAL FOURTEEN"));
        data.insert(std::make_pair(0x1d2cf,"KAKTOVIK NUMERAL FIFTEEN"));
        data.insert(std::make_pair(0x1d2d0,"KAKTOVIK NUMERAL SIXTEEN"));
        data.insert(std::make_pair(0x1d2d1,"KAKTOVIK NUMERAL SEVENTEEN"));
        data.insert(std::make_pair(0x1d2d2,"KAKTOVIK NUMERAL EIGHTEEN"));
        data.insert(std::make_pair(0x1d2d3,"KAKTOVIK NUMERAL NINETEEN"));
        data.insert(std::make_pair(0x1d2e0,"MAYAN NUMERAL ZERO"));
        data.insert(std::make_pair(0x1d2e1,"MAYAN NUMERAL ONE"));
        data.insert(std::make_pair(0x1d2e2,"MAYAN NUMERAL TWO"));
        data.insert(std::make_pair(0x1d2e3,"MAYAN NUMERAL THREE"));
        data.insert(std::make_pair(0x1d2e4,"MAYAN NUMERAL FOUR"));
        data.insert(std::make_pair(0x1d2e5,"MAYAN NUMERAL FIVE"));
        data.insert(std::make_pair(0x1d2e6,"MAYAN NUMERAL SIX"));
        data.insert(std::make_pair(0x1d2e7,"MAYAN NUMERAL SEVEN"));
        data.insert(std::make_pair(0x1d2e8,"MAYAN NUMERAL EIGHT"));
        data.insert(std::make_pair(0x1d2e9,"MAYAN NUMERAL NINE"));
        data.insert(std::make_pair(0x1d2ea,"MAYAN NUMERAL TEN"));
        data.insert(std::make_pair(0x1d2eb,"MAYAN NUMERAL ELEVEN"));
        data.insert(std::make_pair(0x1d2ec,"MAYAN NUMERAL TWELVE"));
        data.insert(std::make_pair(0x1d2ed,"MAYAN NUMERAL THIRTEEN"));
        data.insert(std::make_pair(0x1d2ee,"MAYAN NUMERAL FOURTEEN"));
        data.insert(std::make_pair(0x1d2ef,"MAYAN NUMERAL FIFTEEN"));
        data.insert(std::make_pair(0x1d2f0,"MAYAN NUMERAL SIXTEEN"));
        data.insert(std::make_pair(0x1d2f1,"MAYAN NUMERAL SEVENTEEN"));
        data.insert(std::make_pair(0x1d2f2,"MAYAN NUMERAL EIGHTEEN"));
        data.insert(std::make_pair(0x1d2f3,"MAYAN NUMERAL NINETEEN"));
        data.insert(std::make_pair(0x1d300,"MONOGRAM FOR EARTH"));
        data.insert(std::make_pair(0x1d301,"DIGRAM FOR HEAVENLY EARTH"));
        data.insert(std::make_pair(0x1d302,"DIGRAM FOR HUMAN EARTH"));
        data.insert(std::make_pair(0x1d303,"DIGRAM FOR EARTHLY HEAVEN"));
        data.insert(std::make_pair(0x1d304,"DIGRAM FOR EARTHLY HUMAN"));
        data.insert(std::make_pair(0x1d305,"DIGRAM FOR EARTH"));
        data.insert(std::make_pair(0x1d306,"TETRAGRAM FOR CENTRE"));
        data.insert(std::make_pair(0x1d307,"TETRAGRAM FOR FULL CIRCLE"));
        data.insert(std::make_pair(0x1d308,"TETRAGRAM FOR MIRED"));
        data.insert(std::make_pair(0x1d309,"TETRAGRAM FOR BARRIER"));
        data.insert(std::make_pair(0x1d30a,"TETRAGRAM FOR KEEPING SMALL"));
        data.insert(std::make_pair(0x1d30b,"TETRAGRAM FOR CONTRARIETY"));
        data.insert(std::make_pair(0x1d30c,"TETRAGRAM FOR ASCENT"));
        data.insert(std::make_pair(0x1d30d,"TETRAGRAM FOR OPPOSITION"));
        data.insert(std::make_pair(0x1d30e,"TETRAGRAM FOR BRANCHING OUT"));
        data.insert(std::make_pair(0x1d30f,"TETRAGRAM FOR DEFECTIVENESS OR DISTORTION"));
        data.insert(std::make_pair(0x1d310,"TETRAGRAM FOR DIVERGENCE"));
        data.insert(std::make_pair(0x1d311,"TETRAGRAM FOR YOUTHFULNESS"));
        data.insert(std::make_pair(0x1d312,"TETRAGRAM FOR INCREASE"));
        data.insert(std::make_pair(0x1d313,"TETRAGRAM FOR PENETRATION"));
        data.insert(std::make_pair(0x1d314,"TETRAGRAM FOR REACH"));
        data.insert(std::make_pair(0x1d315,"TETRAGRAM FOR CONTACT"));
        data.insert(std::make_pair(0x1d316,"TETRAGRAM FOR HOLDING BACK"));
        data.insert(std::make_pair(0x1d317,"TETRAGRAM FOR WAITING"));
        data.insert(std::make_pair(0x1d318,"TETRAGRAM FOR FOLLOWING"));
        data.insert(std::make_pair(0x1d319,"TETRAGRAM FOR ADVANCE"));
        data.insert(std::make_pair(0x1d31a,"TETRAGRAM FOR RELEASE"));
        data.insert(std::make_pair(0x1d31b,"TETRAGRAM FOR RESISTANCE"));
        data.insert(std::make_pair(0x1d31c,"TETRAGRAM FOR EASE"));
        data.insert(std::make_pair(0x1d31d,"TETRAGRAM FOR JOY"));
        data.insert(std::make_pair(0x1d31e,"TETRAGRAM FOR CONTENTION"));
        data.insert(std::make_pair(0x1d31f,"TETRAGRAM FOR ENDEAVOUR"));
        data.insert(std::make_pair(0x1d320,"TETRAGRAM FOR DUTIES"));
        data.insert(std::make_pair(0x1d321,"TETRAGRAM FOR CHANGE"));
        data.insert(std::make_pair(0x1d322,"TETRAGRAM FOR DECISIVENESS"));
        data.insert(std::make_pair(0x1d323,"TETRAGRAM FOR BOLD RESOLUTION"));
        data.insert(std::make_pair(0x1d324,"TETRAGRAM FOR PACKING"));
        data.insert(std::make_pair(0x1d325,"TETRAGRAM FOR LEGION"));
        data.insert(std::make_pair(0x1d326,"TETRAGRAM FOR CLOSENESS"));
        data.insert(std::make_pair(0x1d327,"TETRAGRAM FOR KINSHIP"));
        data.insert(std::make_pair(0x1d328,"TETRAGRAM FOR GATHERING"));
        data.insert(std::make_pair(0x1d329,"TETRAGRAM FOR STRENGTH"));
        data.insert(std::make_pair(0x1d32a,"TETRAGRAM FOR PURITY"));
        data.insert(std::make_pair(0x1d32b,"TETRAGRAM FOR FULLNESS"));
        data.insert(std::make_pair(0x1d32c,"TETRAGRAM FOR RESIDENCE"));
        data.insert(std::make_pair(0x1d32d,"TETRAGRAM FOR LAW OR MODEL"));
        data.insert(std::make_pair(0x1d32e,"TETRAGRAM FOR RESPONSE"));
        data.insert(std::make_pair(0x1d32f,"TETRAGRAM FOR GOING TO MEET"));
        data.insert(std::make_pair(0x1d330,"TETRAGRAM FOR ENCOUNTERS"));
        data.insert(std::make_pair(0x1d331,"TETRAGRAM FOR STOVE"));
        data.insert(std::make_pair(0x1d332,"TETRAGRAM FOR GREATNESS"));
        data.insert(std::make_pair(0x1d333,"TETRAGRAM FOR ENLARGEMENT"));
        data.insert(std::make_pair(0x1d334,"TETRAGRAM FOR PATTERN"));
        data.insert(std::make_pair(0x1d335,"TETRAGRAM FOR RITUAL"));
        data.insert(std::make_pair(0x1d336,"TETRAGRAM FOR FLIGHT"));
        data.insert(std::make_pair(0x1d337,"TETRAGRAM FOR VASTNESS OR WASTING"));
        data.insert(std::make_pair(0x1d338,"TETRAGRAM FOR CONSTANCY"));
        data.insert(std::make_pair(0x1d339,"TETRAGRAM FOR MEASURE"));
        data.insert(std::make_pair(0x1d33a,"TETRAGRAM FOR ETERNITY"));
        data.insert(std::make_pair(0x1d33b,"TETRAGRAM FOR UNITY"));
        data.insert(std::make_pair(0x1d33c,"TETRAGRAM FOR DIMINISHMENT"));
        data.insert(std::make_pair(0x1d33d,"TETRAGRAM FOR CLOSED MOUTH"));
        data.insert(std::make_pair(0x1d33e,"TETRAGRAM FOR GUARDEDNESS"));
        data.insert(std::make_pair(0x1d33f,"TETRAGRAM FOR GATHERING IN"));
        data.insert(std::make_pair(0x1d340,"TETRAGRAM FOR MASSING"));
        data.insert(std::make_pair(0x1d341,"TETRAGRAM FOR ACCUMULATION"));
        data.insert(std::make_pair(0x1d342,"TETRAGRAM FOR EMBELLISHMENT"));
        data.insert(std::make_pair(0x1d343,"TETRAGRAM FOR DOUBT"));
        data.insert(std::make_pair(0x1d344,"TETRAGRAM FOR WATCH"));
        data.insert(std::make_pair(0x1d345,"TETRAGRAM FOR SINKING"));
        data.insert(std::make_pair(0x1d346,"TETRAGRAM FOR INNER"));
        data.insert(std::make_pair(0x1d347,"TETRAGRAM FOR DEPARTURE"));
        data.insert(std::make_pair(0x1d348,"TETRAGRAM FOR DARKENING"));
        data.insert(std::make_pair(0x1d349,"TETRAGRAM FOR DIMMING"));
        data.insert(std::make_pair(0x1d34a,"TETRAGRAM FOR EXHAUSTION"));
        data.insert(std::make_pair(0x1d34b,"TETRAGRAM FOR SEVERANCE"));
        data.insert(std::make_pair(0x1d34c,"TETRAGRAM FOR STOPPAGE"));
        data.insert(std::make_pair(0x1d34d,"TETRAGRAM FOR HARDNESS"));
        data.insert(std::make_pair(0x1d34e,"TETRAGRAM FOR COMPLETION"));
        data.insert(std::make_pair(0x1d34f,"TETRAGRAM FOR CLOSURE"));
        data.insert(std::make_pair(0x1d350,"TETRAGRAM FOR FAILURE"));
        data.insert(std::make_pair(0x1d351,"TETRAGRAM FOR AGGRAVATION"));
        data.insert(std::make_pair(0x1d352,"TETRAGRAM FOR COMPLIANCE"));
        data.insert(std::make_pair(0x1d353,"TETRAGRAM FOR ON THE VERGE"));
        data.insert(std::make_pair(0x1d354,"TETRAGRAM FOR DIFFICULTIES"));
        data.insert(std::make_pair(0x1d355,"TETRAGRAM FOR LABOURING"));
        data.insert(std::make_pair(0x1d356,"TETRAGRAM FOR FOSTERING"));
        data.insert(std::make_pair(0x1d360,"COUNTING ROD UNIT DIGIT ONE"));
        data.insert(std::make_pair(0x1d361,"COUNTING ROD UNIT DIGIT TWO"));
        data.insert(std::make_pair(0x1d362,"COUNTING ROD UNIT DIGIT THREE"));
        data.insert(std::make_pair(0x1d363,"COUNTING ROD UNIT DIGIT FOUR"));
        data.insert(std::make_pair(0x1d364,"COUNTING ROD UNIT DIGIT FIVE"));
        data.insert(std::make_pair(0x1d365,"COUNTING ROD UNIT DIGIT SIX"));
        data.insert(std::make_pair(0x1d366,"COUNTING ROD UNIT DIGIT SEVEN"));
        data.insert(std::make_pair(0x1d367,"COUNTING ROD UNIT DIGIT EIGHT"));
        data.insert(std::make_pair(0x1d368,"COUNTING ROD UNIT DIGIT NINE"));
        data.insert(std::make_pair(0x1d369,"COUNTING ROD TENS DIGIT ONE"));
        data.insert(std::make_pair(0x1d36a,"COUNTING ROD TENS DIGIT TWO"));
        data.insert(std::make_pair(0x1d36b,"COUNTING ROD TENS DIGIT THREE"));
        data.insert(std::make_pair(0x1d36c,"COUNTING ROD TENS DIGIT FOUR"));
        data.insert(std::make_pair(0x1d36d,"COUNTING ROD TENS DIGIT FIVE"));
        data.insert(std::make_pair(0x1d36e,"COUNTING ROD TENS DIGIT SIX"));
        data.insert(std::make_pair(0x1d36f,"COUNTING ROD TENS DIGIT SEVEN"));
        data.insert(std::make_pair(0x1d370,"COUNTING ROD TENS DIGIT EIGHT"));
        data.insert(std::make_pair(0x1d371,"COUNTING ROD TENS DIGIT NINE"));
        data.insert(std::make_pair(0x1d372,"IDEOGRAPHIC TALLY MARK ONE"));
        data.insert(std::make_pair(0x1d373,"IDEOGRAPHIC TALLY MARK TWO"));
        data.insert(std::make_pair(0x1d374,"IDEOGRAPHIC TALLY MARK THREE"));
        data.insert(std::make_pair(0x1d375,"IDEOGRAPHIC TALLY MARK FOUR"));
        data.insert(std::make_pair(0x1d376,"IDEOGRAPHIC TALLY MARK FIVE"));
        data.insert(std::make_pair(0x1d377,"TALLY MARK ONE"));
        data.insert(std::make_pair(0x1d378,"TALLY MARK FIVE"));
        data.insert(std::make_pair(0x1d400,"MATHEMATICAL BOLD CAPITAL A"));
        data.insert(std::make_pair(0x1d401,"MATHEMATICAL BOLD CAPITAL B"));
        data.insert(std::make_pair(0x1d402,"MATHEMATICAL BOLD CAPITAL C"));
        data.insert(std::make_pair(0x1d403,"MATHEMATICAL BOLD CAPITAL D"));
        data.insert(std::make_pair(0x1d404,"MATHEMATICAL BOLD CAPITAL E"));
        data.insert(std::make_pair(0x1d405,"MATHEMATICAL BOLD CAPITAL F"));
        data.insert(std::make_pair(0x1d406,"MATHEMATICAL BOLD CAPITAL G"));
        data.insert(std::make_pair(0x1d407,"MATHEMATICAL BOLD CAPITAL H"));
        data.insert(std::make_pair(0x1d408,"MATHEMATICAL BOLD CAPITAL I"));
        data.insert(std::make_pair(0x1d409,"MATHEMATICAL BOLD CAPITAL J"));
        data.insert(std::make_pair(0x1d40a,"MATHEMATICAL BOLD CAPITAL K"));
        data.insert(std::make_pair(0x1d40b,"MATHEMATICAL BOLD CAPITAL L"));
        data.insert(std::make_pair(0x1d40c,"MATHEMATICAL BOLD CAPITAL M"));
        data.insert(std::make_pair(0x1d40d,"MATHEMATICAL BOLD CAPITAL N"));
        data.insert(std::make_pair(0x1d40e,"MATHEMATICAL BOLD CAPITAL O"));
        data.insert(std::make_pair(0x1d40f,"MATHEMATICAL BOLD CAPITAL P"));
        data.insert(std::make_pair(0x1d410,"MATHEMATICAL BOLD CAPITAL Q"));
        data.insert(std::make_pair(0x1d411,"MATHEMATICAL BOLD CAPITAL R"));
        data.insert(std::make_pair(0x1d412,"MATHEMATICAL BOLD CAPITAL S"));
        data.insert(std::make_pair(0x1d413,"MATHEMATICAL BOLD CAPITAL T"));
        data.insert(std::make_pair(0x1d414,"MATHEMATICAL BOLD CAPITAL U"));
        data.insert(std::make_pair(0x1d415,"MATHEMATICAL BOLD CAPITAL V"));
        data.insert(std::make_pair(0x1d416,"MATHEMATICAL BOLD CAPITAL W"));
        data.insert(std::make_pair(0x1d417,"MATHEMATICAL BOLD CAPITAL X"));
        data.insert(std::make_pair(0x1d418,"MATHEMATICAL BOLD CAPITAL Y"));
        data.insert(std::make_pair(0x1d419,"MATHEMATICAL BOLD CAPITAL Z"));
        data.insert(std::make_pair(0x1d41a,"MATHEMATICAL BOLD SMALL A"));
        data.insert(std::make_pair(0x1d41b,"MATHEMATICAL BOLD SMALL B"));
        data.insert(std::make_pair(0x1d41c,"MATHEMATICAL BOLD SMALL C"));
        data.insert(std::make_pair(0x1d41d,"MATHEMATICAL BOLD SMALL D"));
        data.insert(std::make_pair(0x1d41e,"MATHEMATICAL BOLD SMALL E"));
        data.insert(std::make_pair(0x1d41f,"MATHEMATICAL BOLD SMALL F"));
        data.insert(std::make_pair(0x1d420,"MATHEMATICAL BOLD SMALL G"));
        data.insert(std::make_pair(0x1d421,"MATHEMATICAL BOLD SMALL H"));
        data.insert(std::make_pair(0x1d422,"MATHEMATICAL BOLD SMALL I"));
        data.insert(std::make_pair(0x1d423,"MATHEMATICAL BOLD SMALL J"));
        data.insert(std::make_pair(0x1d424,"MATHEMATICAL BOLD SMALL K"));
        data.insert(std::make_pair(0x1d425,"MATHEMATICAL BOLD SMALL L"));
        data.insert(std::make_pair(0x1d426,"MATHEMATICAL BOLD SMALL M"));
        data.insert(std::make_pair(0x1d427,"MATHEMATICAL BOLD SMALL N"));
        data.insert(std::make_pair(0x1d428,"MATHEMATICAL BOLD SMALL O"));
        data.insert(std::make_pair(0x1d429,"MATHEMATICAL BOLD SMALL P"));
        data.insert(std::make_pair(0x1d42a,"MATHEMATICAL BOLD SMALL Q"));
        data.insert(std::make_pair(0x1d42b,"MATHEMATICAL BOLD SMALL R"));
        data.insert(std::make_pair(0x1d42c,"MATHEMATICAL BOLD SMALL S"));
        data.insert(std::make_pair(0x1d42d,"MATHEMATICAL BOLD SMALL T"));
        data.insert(std::make_pair(0x1d42e,"MATHEMATICAL BOLD SMALL U"));
        data.insert(std::make_pair(0x1d42f,"MATHEMATICAL BOLD SMALL V"));
        data.insert(std::make_pair(0x1d430,"MATHEMATICAL BOLD SMALL W"));
        data.insert(std::make_pair(0x1d431,"MATHEMATICAL BOLD SMALL X"));
        data.insert(std::make_pair(0x1d432,"MATHEMATICAL BOLD SMALL Y"));
        data.insert(std::make_pair(0x1d433,"MATHEMATICAL BOLD SMALL Z"));
        data.insert(std::make_pair(0x1d434,"MATHEMATICAL ITALIC CAPITAL A"));
        data.insert(std::make_pair(0x1d435,"MATHEMATICAL ITALIC CAPITAL B"));
        data.insert(std::make_pair(0x1d436,"MATHEMATICAL ITALIC CAPITAL C"));
        data.insert(std::make_pair(0x1d437,"MATHEMATICAL ITALIC CAPITAL D"));
        data.insert(std::make_pair(0x1d438,"MATHEMATICAL ITALIC CAPITAL E"));
        data.insert(std::make_pair(0x1d439,"MATHEMATICAL ITALIC CAPITAL F"));
        data.insert(std::make_pair(0x1d43a,"MATHEMATICAL ITALIC CAPITAL G"));
        data.insert(std::make_pair(0x1d43b,"MATHEMATICAL ITALIC CAPITAL H"));
        data.insert(std::make_pair(0x1d43c,"MATHEMATICAL ITALIC CAPITAL I"));
        data.insert(std::make_pair(0x1d43d,"MATHEMATICAL ITALIC CAPITAL J"));
        data.insert(std::make_pair(0x1d43e,"MATHEMATICAL ITALIC CAPITAL K"));
        data.insert(std::make_pair(0x1d43f,"MATHEMATICAL ITALIC CAPITAL L"));
        data.insert(std::make_pair(0x1d440,"MATHEMATICAL ITALIC CAPITAL M"));
        data.insert(std::make_pair(0x1d441,"MATHEMATICAL ITALIC CAPITAL N"));
        data.insert(std::make_pair(0x1d442,"MATHEMATICAL ITALIC CAPITAL O"));
        data.insert(std::make_pair(0x1d443,"MATHEMATICAL ITALIC CAPITAL P"));
        data.insert(std::make_pair(0x1d444,"MATHEMATICAL ITALIC CAPITAL Q"));
        data.insert(std::make_pair(0x1d445,"MATHEMATICAL ITALIC CAPITAL R"));
        data.insert(std::make_pair(0x1d446,"MATHEMATICAL ITALIC CAPITAL S"));
        data.insert(std::make_pair(0x1d447,"MATHEMATICAL ITALIC CAPITAL T"));
        data.insert(std::make_pair(0x1d448,"MATHEMATICAL ITALIC CAPITAL U"));
        data.insert(std::make_pair(0x1d449,"MATHEMATICAL ITALIC CAPITAL V"));
        data.insert(std::make_pair(0x1d44a,"MATHEMATICAL ITALIC CAPITAL W"));
        data.insert(std::make_pair(0x1d44b,"MATHEMATICAL ITALIC CAPITAL X"));
        data.insert(std::make_pair(0x1d44c,"MATHEMATICAL ITALIC CAPITAL Y"));
        data.insert(std::make_pair(0x1d44d,"MATHEMATICAL ITALIC CAPITAL Z"));
        data.insert(std::make_pair(0x1d44e,"MATHEMATICAL ITALIC SMALL A"));
        data.insert(std::make_pair(0x1d44f,"MATHEMATICAL ITALIC SMALL B"));
        data.insert(std::make_pair(0x1d450,"MATHEMATICAL ITALIC SMALL C"));
        data.insert(std::make_pair(0x1d451,"MATHEMATICAL ITALIC SMALL D"));
        data.insert(std::make_pair(0x1d452,"MATHEMATICAL ITALIC SMALL E"));
        data.insert(std::make_pair(0x1d453,"MATHEMATICAL ITALIC SMALL F"));
        data.insert(std::make_pair(0x1d454,"MATHEMATICAL ITALIC SMALL G"));
        data.insert(std::make_pair(0x1d456,"MATHEMATICAL ITALIC SMALL I"));
        data.insert(std::make_pair(0x1d457,"MATHEMATICAL ITALIC SMALL J"));
        data.insert(std::make_pair(0x1d458,"MATHEMATICAL ITALIC SMALL K"));
        data.insert(std::make_pair(0x1d459,"MATHEMATICAL ITALIC SMALL L"));
        data.insert(std::make_pair(0x1d45a,"MATHEMATICAL ITALIC SMALL M"));
        data.insert(std::make_pair(0x1d45b,"MATHEMATICAL ITALIC SMALL N"));
        data.insert(std::make_pair(0x1d45c,"MATHEMATICAL ITALIC SMALL O"));
        data.insert(std::make_pair(0x1d45d,"MATHEMATICAL ITALIC SMALL P"));
        data.insert(std::make_pair(0x1d45e,"MATHEMATICAL ITALIC SMALL Q"));
        data.insert(std::make_pair(0x1d45f,"MATHEMATICAL ITALIC SMALL R"));
        data.insert(std::make_pair(0x1d460,"MATHEMATICAL ITALIC SMALL S"));
        data.insert(std::make_pair(0x1d461,"MATHEMATICAL ITALIC SMALL T"));
        data.insert(std::make_pair(0x1d462,"MATHEMATICAL ITALIC SMALL U"));
        data.insert(std::make_pair(0x1d463,"MATHEMATICAL ITALIC SMALL V"));
        data.insert(std::make_pair(0x1d464,"MATHEMATICAL ITALIC SMALL W"));
        data.insert(std::make_pair(0x1d465,"MATHEMATICAL ITALIC SMALL X"));
        data.insert(std::make_pair(0x1d466,"MATHEMATICAL ITALIC SMALL Y"));
        data.insert(std::make_pair(0x1d467,"MATHEMATICAL ITALIC SMALL Z"));
        data.insert(std::make_pair(0x1d468,"MATHEMATICAL BOLD ITALIC CAPITAL A"));
        data.insert(std::make_pair(0x1d469,"MATHEMATICAL BOLD ITALIC CAPITAL B"));
        data.insert(std::make_pair(0x1d46a,"MATHEMATICAL BOLD ITALIC CAPITAL C"));
        data.insert(std::make_pair(0x1d46b,"MATHEMATICAL BOLD ITALIC CAPITAL D"));
        data.insert(std::make_pair(0x1d46c,"MATHEMATICAL BOLD ITALIC CAPITAL E"));
        data.insert(std::make_pair(0x1d46d,"MATHEMATICAL BOLD ITALIC CAPITAL F"));
        data.insert(std::make_pair(0x1d46e,"MATHEMATICAL BOLD ITALIC CAPITAL G"));
        data.insert(std::make_pair(0x1d46f,"MATHEMATICAL BOLD ITALIC CAPITAL H"));
        data.insert(std::make_pair(0x1d470,"MATHEMATICAL BOLD ITALIC CAPITAL I"));
        data.insert(std::make_pair(0x1d471,"MATHEMATICAL BOLD ITALIC CAPITAL J"));
        data.insert(std::make_pair(0x1d472,"MATHEMATICAL BOLD ITALIC CAPITAL K"));
        data.insert(std::make_pair(0x1d473,"MATHEMATICAL BOLD ITALIC CAPITAL L"));
        data.insert(std::make_pair(0x1d474,"MATHEMATICAL BOLD ITALIC CAPITAL M"));
        data.insert(std::make_pair(0x1d475,"MATHEMATICAL BOLD ITALIC CAPITAL N"));
        data.insert(std::make_pair(0x1d476,"MATHEMATICAL BOLD ITALIC CAPITAL O"));
        data.insert(std::make_pair(0x1d477,"MATHEMATICAL BOLD ITALIC CAPITAL P"));
        data.insert(std::make_pair(0x1d478,"MATHEMATICAL BOLD ITALIC CAPITAL Q"));
        data.insert(std::make_pair(0x1d479,"MATHEMATICAL BOLD ITALIC CAPITAL R"));
        data.insert(std::make_pair(0x1d47a,"MATHEMATICAL BOLD ITALIC CAPITAL S"));
        data.insert(std::make_pair(0x1d47b,"MATHEMATICAL BOLD ITALIC CAPITAL T"));
        data.insert(std::make_pair(0x1d47c,"MATHEMATICAL BOLD ITALIC CAPITAL U"));
        data.insert(std::make_pair(0x1d47d,"MATHEMATICAL BOLD ITALIC CAPITAL V"));
        data.insert(std::make_pair(0x1d47e,"MATHEMATICAL BOLD ITALIC CAPITAL W"));
        data.insert(std::make_pair(0x1d47f,"MATHEMATICAL BOLD ITALIC CAPITAL X"));
        data.insert(std::make_pair(0x1d480,"MATHEMATICAL BOLD ITALIC CAPITAL Y"));
        data.insert(std::make_pair(0x1d481,"MATHEMATICAL BOLD ITALIC CAPITAL Z"));
        data.insert(std::make_pair(0x1d482,"MATHEMATICAL BOLD ITALIC SMALL A"));
        data.insert(std::make_pair(0x1d483,"MATHEMATICAL BOLD ITALIC SMALL B"));
        data.insert(std::make_pair(0x1d484,"MATHEMATICAL BOLD ITALIC SMALL C"));
        data.insert(std::make_pair(0x1d485,"MATHEMATICAL BOLD ITALIC SMALL D"));
        data.insert(std::make_pair(0x1d486,"MATHEMATICAL BOLD ITALIC SMALL E"));
        data.insert(std::make_pair(0x1d487,"MATHEMATICAL BOLD ITALIC SMALL F"));
        data.insert(std::make_pair(0x1d488,"MATHEMATICAL BOLD ITALIC SMALL G"));
        data.insert(std::make_pair(0x1d489,"MATHEMATICAL BOLD ITALIC SMALL H"));
        data.insert(std::make_pair(0x1d48a,"MATHEMATICAL BOLD ITALIC SMALL I"));
        data.insert(std::make_pair(0x1d48b,"MATHEMATICAL BOLD ITALIC SMALL J"));
        data.insert(std::make_pair(0x1d48c,"MATHEMATICAL BOLD ITALIC SMALL K"));
        data.insert(std::make_pair(0x1d48d,"MATHEMATICAL BOLD ITALIC SMALL L"));
        data.insert(std::make_pair(0x1d48e,"MATHEMATICAL BOLD ITALIC SMALL M"));
        data.insert(std::make_pair(0x1d48f,"MATHEMATICAL BOLD ITALIC SMALL N"));
        data.insert(std::make_pair(0x1d490,"MATHEMATICAL BOLD ITALIC SMALL O"));
        data.insert(std::make_pair(0x1d491,"MATHEMATICAL BOLD ITALIC SMALL P"));
        data.insert(std::make_pair(0x1d492,"MATHEMATICAL BOLD ITALIC SMALL Q"));
        data.insert(std::make_pair(0x1d493,"MATHEMATICAL BOLD ITALIC SMALL R"));
        data.insert(std::make_pair(0x1d494,"MATHEMATICAL BOLD ITALIC SMALL S"));
        data.insert(std::make_pair(0x1d495,"MATHEMATICAL BOLD ITALIC SMALL T"));
        data.insert(std::make_pair(0x1d496,"MATHEMATICAL BOLD ITALIC SMALL U"));
        data.insert(std::make_pair(0x1d497,"MATHEMATICAL BOLD ITALIC SMALL V"));
        data.insert(std::make_pair(0x1d498,"MATHEMATICAL BOLD ITALIC SMALL W"));
        data.insert(std::make_pair(0x1d499,"MATHEMATICAL BOLD ITALIC SMALL X"));
        data.insert(std::make_pair(0x1d49a,"MATHEMATICAL BOLD ITALIC SMALL Y"));
        data.insert(std::make_pair(0x1d49b,"MATHEMATICAL BOLD ITALIC SMALL Z"));
        data.insert(std::make_pair(0x1d49c,"MATHEMATICAL SCRIPT CAPITAL A"));
        data.insert(std::make_pair(0x1d49e,"MATHEMATICAL SCRIPT CAPITAL C"));
        data.insert(std::make_pair(0x1d49f,"MATHEMATICAL SCRIPT CAPITAL D"));
        data.insert(std::make_pair(0x1d4a2,"MATHEMATICAL SCRIPT CAPITAL G"));
        data.insert(std::make_pair(0x1d4a5,"MATHEMATICAL SCRIPT CAPITAL J"));
        data.insert(std::make_pair(0x1d4a6,"MATHEMATICAL SCRIPT CAPITAL K"));
        data.insert(std::make_pair(0x1d4a9,"MATHEMATICAL SCRIPT CAPITAL N"));
        data.insert(std::make_pair(0x1d4aa,"MATHEMATICAL SCRIPT CAPITAL O"));
        data.insert(std::make_pair(0x1d4ab,"MATHEMATICAL SCRIPT CAPITAL P"));
        data.insert(std::make_pair(0x1d4ac,"MATHEMATICAL SCRIPT CAPITAL Q"));
        data.insert(std::make_pair(0x1d4ae,"MATHEMATICAL SCRIPT CAPITAL S"));
        data.insert(std::make_pair(0x1d4af,"MATHEMATICAL SCRIPT CAPITAL T"));
        data.insert(std::make_pair(0x1d4b0,"MATHEMATICAL SCRIPT CAPITAL U"));
        data.insert(std::make_pair(0x1d4b1,"MATHEMATICAL SCRIPT CAPITAL V"));
        data.insert(std::make_pair(0x1d4b2,"MATHEMATICAL SCRIPT CAPITAL W"));
        data.insert(std::make_pair(0x1d4b3,"MATHEMATICAL SCRIPT CAPITAL X"));
        data.insert(std::make_pair(0x1d4b4,"MATHEMATICAL SCRIPT CAPITAL Y"));
        data.insert(std::make_pair(0x1d4b5,"MATHEMATICAL SCRIPT CAPITAL Z"));
        data.insert(std::make_pair(0x1d4b6,"MATHEMATICAL SCRIPT SMALL A"));
        data.insert(std::make_pair(0x1d4b7,"MATHEMATICAL SCRIPT SMALL B"));
        data.insert(std::make_pair(0x1d4b8,"MATHEMATICAL SCRIPT SMALL C"));
        data.insert(std::make_pair(0x1d4b9,"MATHEMATICAL SCRIPT SMALL D"));
        data.insert(std::make_pair(0x1d4bb,"MATHEMATICAL SCRIPT SMALL F"));
        data.insert(std::make_pair(0x1d4bd,"MATHEMATICAL SCRIPT SMALL H"));
        data.insert(std::make_pair(0x1d4be,"MATHEMATICAL SCRIPT SMALL I"));
        data.insert(std::make_pair(0x1d4bf,"MATHEMATICAL SCRIPT SMALL J"));
        data.insert(std::make_pair(0x1d4c0,"MATHEMATICAL SCRIPT SMALL K"));
        data.insert(std::make_pair(0x1d4c1,"MATHEMATICAL SCRIPT SMALL L"));
        data.insert(std::make_pair(0x1d4c2,"MATHEMATICAL SCRIPT SMALL M"));
        data.insert(std::make_pair(0x1d4c3,"MATHEMATICAL SCRIPT SMALL N"));
        data.insert(std::make_pair(0x1d4c5,"MATHEMATICAL SCRIPT SMALL P"));
        data.insert(std::make_pair(0x1d4c6,"MATHEMATICAL SCRIPT SMALL Q"));
        data.insert(std::make_pair(0x1d4c7,"MATHEMATICAL SCRIPT SMALL R"));
        data.insert(std::make_pair(0x1d4c8,"MATHEMATICAL SCRIPT SMALL S"));
        data.insert(std::make_pair(0x1d4c9,"MATHEMATICAL SCRIPT SMALL T"));
        data.insert(std::make_pair(0x1d4ca,"MATHEMATICAL SCRIPT SMALL U"));
        data.insert(std::make_pair(0x1d4cb,"MATHEMATICAL SCRIPT SMALL V"));
        data.insert(std::make_pair(0x1d4cc,"MATHEMATICAL SCRIPT SMALL W"));
        data.insert(std::make_pair(0x1d4cd,"MATHEMATICAL SCRIPT SMALL X"));
        data.insert(std::make_pair(0x1d4ce,"MATHEMATICAL SCRIPT SMALL Y"));
        data.insert(std::make_pair(0x1d4cf,"MATHEMATICAL SCRIPT SMALL Z"));
        data.insert(std::make_pair(0x1d4d0,"MATHEMATICAL BOLD SCRIPT CAPITAL A"));
        data.insert(std::make_pair(0x1d4d1,"MATHEMATICAL BOLD SCRIPT CAPITAL B"));
        data.insert(std::make_pair(0x1d4d2,"MATHEMATICAL BOLD SCRIPT CAPITAL C"));
        data.insert(std::make_pair(0x1d4d3,"MATHEMATICAL BOLD SCRIPT CAPITAL D"));
        data.insert(std::make_pair(0x1d4d4,"MATHEMATICAL BOLD SCRIPT CAPITAL E"));
        data.insert(std::make_pair(0x1d4d5,"MATHEMATICAL BOLD SCRIPT CAPITAL F"));
        data.insert(std::make_pair(0x1d4d6,"MATHEMATICAL BOLD SCRIPT CAPITAL G"));
        data.insert(std::make_pair(0x1d4d7,"MATHEMATICAL BOLD SCRIPT CAPITAL H"));
        data.insert(std::make_pair(0x1d4d8,"MATHEMATICAL BOLD SCRIPT CAPITAL I"));
        data.insert(std::make_pair(0x1d4d9,"MATHEMATICAL BOLD SCRIPT CAPITAL J"));
        data.insert(std::make_pair(0x1d4da,"MATHEMATICAL BOLD SCRIPT CAPITAL K"));
        data.insert(std::make_pair(0x1d4db,"MATHEMATICAL BOLD SCRIPT CAPITAL L"));
        data.insert(std::make_pair(0x1d4dc,"MATHEMATICAL BOLD SCRIPT CAPITAL M"));
        data.insert(std::make_pair(0x1d4dd,"MATHEMATICAL BOLD SCRIPT CAPITAL N"));
        data.insert(std::make_pair(0x1d4de,"MATHEMATICAL BOLD SCRIPT CAPITAL O"));
        data.insert(std::make_pair(0x1d4df,"MATHEMATICAL BOLD SCRIPT CAPITAL P"));
        data.insert(std::make_pair(0x1d4e0,"MATHEMATICAL BOLD SCRIPT CAPITAL Q"));
        data.insert(std::make_pair(0x1d4e1,"MATHEMATICAL BOLD SCRIPT CAPITAL R"));
        data.insert(std::make_pair(0x1d4e2,"MATHEMATICAL BOLD SCRIPT CAPITAL S"));
        data.insert(std::make_pair(0x1d4e3,"MATHEMATICAL BOLD SCRIPT CAPITAL T"));
        data.insert(std::make_pair(0x1d4e4,"MATHEMATICAL BOLD SCRIPT CAPITAL U"));
        data.insert(std::make_pair(0x1d4e5,"MATHEMATICAL BOLD SCRIPT CAPITAL V"));
        data.insert(std::make_pair(0x1d4e6,"MATHEMATICAL BOLD SCRIPT CAPITAL W"));
        data.insert(std::make_pair(0x1d4e7,"MATHEMATICAL BOLD SCRIPT CAPITAL X"));
        data.insert(std::make_pair(0x1d4e8,"MATHEMATICAL BOLD SCRIPT CAPITAL Y"));
        data.insert(std::make_pair(0x1d4e9,"MATHEMATICAL BOLD SCRIPT CAPITAL Z"));
        data.insert(std::make_pair(0x1d4ea,"MATHEMATICAL BOLD SCRIPT SMALL A"));
        data.insert(std::make_pair(0x1d4eb,"MATHEMATICAL BOLD SCRIPT SMALL B"));
        data.insert(std::make_pair(0x1d4ec,"MATHEMATICAL BOLD SCRIPT SMALL C"));
        data.insert(std::make_pair(0x1d4ed,"MATHEMATICAL BOLD SCRIPT SMALL D"));
        data.insert(std::make_pair(0x1d4ee,"MATHEMATICAL BOLD SCRIPT SMALL E"));
        data.insert(std::make_pair(0x1d4ef,"MATHEMATICAL BOLD SCRIPT SMALL F"));
        data.insert(std::make_pair(0x1d4f0,"MATHEMATICAL BOLD SCRIPT SMALL G"));
        data.insert(std::make_pair(0x1d4f1,"MATHEMATICAL BOLD SCRIPT SMALL H"));
        data.insert(std::make_pair(0x1d4f2,"MATHEMATICAL BOLD SCRIPT SMALL I"));
        data.insert(std::make_pair(0x1d4f3,"MATHEMATICAL BOLD SCRIPT SMALL J"));
        data.insert(std::make_pair(0x1d4f4,"MATHEMATICAL BOLD SCRIPT SMALL K"));
        data.insert(std::make_pair(0x1d4f5,"MATHEMATICAL BOLD SCRIPT SMALL L"));
        data.insert(std::make_pair(0x1d4f6,"MATHEMATICAL BOLD SCRIPT SMALL M"));
        data.insert(std::make_pair(0x1d4f7,"MATHEMATICAL BOLD SCRIPT SMALL N"));
        data.insert(std::make_pair(0x1d4f8,"MATHEMATICAL BOLD SCRIPT SMALL O"));
        data.insert(std::make_pair(0x1d4f9,"MATHEMATICAL BOLD SCRIPT SMALL P"));
        data.insert(std::make_pair(0x1d4fa,"MATHEMATICAL BOLD SCRIPT SMALL Q"));
        data.insert(std::make_pair(0x1d4fb,"MATHEMATICAL BOLD SCRIPT SMALL R"));
        data.insert(std::make_pair(0x1d4fc,"MATHEMATICAL BOLD SCRIPT SMALL S"));
        data.insert(std::make_pair(0x1d4fd,"MATHEMATICAL BOLD SCRIPT SMALL T"));
        data.insert(std::make_pair(0x1d4fe,"MATHEMATICAL BOLD SCRIPT SMALL U"));
        data.insert(std::make_pair(0x1d4ff,"MATHEMATICAL BOLD SCRIPT SMALL V"));
        data.insert(std::make_pair(0x1d500,"MATHEMATICAL BOLD SCRIPT SMALL W"));
        data.insert(std::make_pair(0x1d501,"MATHEMATICAL BOLD SCRIPT SMALL X"));
        data.insert(std::make_pair(0x1d502,"MATHEMATICAL BOLD SCRIPT SMALL Y"));
        data.insert(std::make_pair(0x1d503,"MATHEMATICAL BOLD SCRIPT SMALL Z"));
        data.insert(std::make_pair(0x1d504,"MATHEMATICAL FRAKTUR CAPITAL A"));
        data.insert(std::make_pair(0x1d505,"MATHEMATICAL FRAKTUR CAPITAL B"));
        data.insert(std::make_pair(0x1d507,"MATHEMATICAL FRAKTUR CAPITAL D"));
        data.insert(std::make_pair(0x1d508,"MATHEMATICAL FRAKTUR CAPITAL E"));
        data.insert(std::make_pair(0x1d509,"MATHEMATICAL FRAKTUR CAPITAL F"));
        data.insert(std::make_pair(0x1d50a,"MATHEMATICAL FRAKTUR CAPITAL G"));
        data.insert(std::make_pair(0x1d50d,"MATHEMATICAL FRAKTUR CAPITAL J"));
        data.insert(std::make_pair(0x1d50e,"MATHEMATICAL FRAKTUR CAPITAL K"));
        data.insert(std::make_pair(0x1d50f,"MATHEMATICAL FRAKTUR CAPITAL L"));
        data.insert(std::make_pair(0x1d510,"MATHEMATICAL FRAKTUR CAPITAL M"));
        data.insert(std::make_pair(0x1d511,"MATHEMATICAL FRAKTUR CAPITAL N"));
        data.insert(std::make_pair(0x1d512,"MATHEMATICAL FRAKTUR CAPITAL O"));
        data.insert(std::make_pair(0x1d513,"MATHEMATICAL FRAKTUR CAPITAL P"));
        data.insert(std::make_pair(0x1d514,"MATHEMATICAL FRAKTUR CAPITAL Q"));
        data.insert(std::make_pair(0x1d516,"MATHEMATICAL FRAKTUR CAPITAL S"));
        data.insert(std::make_pair(0x1d517,"MATHEMATICAL FRAKTUR CAPITAL T"));
        data.insert(std::make_pair(0x1d518,"MATHEMATICAL FRAKTUR CAPITAL U"));
        data.insert(std::make_pair(0x1d519,"MATHEMATICAL FRAKTUR CAPITAL V"));
        data.insert(std::make_pair(0x1d51a,"MATHEMATICAL FRAKTUR CAPITAL W"));
        data.insert(std::make_pair(0x1d51b,"MATHEMATICAL FRAKTUR CAPITAL X"));
        data.insert(std::make_pair(0x1d51c,"MATHEMATICAL FRAKTUR CAPITAL Y"));
        data.insert(std::make_pair(0x1d51e,"MATHEMATICAL FRAKTUR SMALL A"));
        data.insert(std::make_pair(0x1d51f,"MATHEMATICAL FRAKTUR SMALL B"));
        data.insert(std::make_pair(0x1d520,"MATHEMATICAL FRAKTUR SMALL C"));
        data.insert(std::make_pair(0x1d521,"MATHEMATICAL FRAKTUR SMALL D"));
        data.insert(std::make_pair(0x1d522,"MATHEMATICAL FRAKTUR SMALL E"));
        data.insert(std::make_pair(0x1d523,"MATHEMATICAL FRAKTUR SMALL F"));
        data.insert(std::make_pair(0x1d524,"MATHEMATICAL FRAKTUR SMALL G"));
        data.insert(std::make_pair(0x1d525,"MATHEMATICAL FRAKTUR SMALL H"));
        data.insert(std::make_pair(0x1d526,"MATHEMATICAL FRAKTUR SMALL I"));
        data.insert(std::make_pair(0x1d527,"MATHEMATICAL FRAKTUR SMALL J"));
        data.insert(std::make_pair(0x1d528,"MATHEMATICAL FRAKTUR SMALL K"));
        data.insert(std::make_pair(0x1d529,"MATHEMATICAL FRAKTUR SMALL L"));
        data.insert(std::make_pair(0x1d52a,"MATHEMATICAL FRAKTUR SMALL M"));
        data.insert(std::make_pair(0x1d52b,"MATHEMATICAL FRAKTUR SMALL N"));
        data.insert(std::make_pair(0x1d52c,"MATHEMATICAL FRAKTUR SMALL O"));
        data.insert(std::make_pair(0x1d52d,"MATHEMATICAL FRAKTUR SMALL P"));
        data.insert(std::make_pair(0x1d52e,"MATHEMATICAL FRAKTUR SMALL Q"));
        data.insert(std::make_pair(0x1d52f,"MATHEMATICAL FRAKTUR SMALL R"));
        data.insert(std::make_pair(0x1d530,"MATHEMATICAL FRAKTUR SMALL S"));
        data.insert(std::make_pair(0x1d531,"MATHEMATICAL FRAKTUR SMALL T"));
        data.insert(std::make_pair(0x1d532,"MATHEMATICAL FRAKTUR SMALL U"));
        data.insert(std::make_pair(0x1d533,"MATHEMATICAL FRAKTUR SMALL V"));
        data.insert(std::make_pair(0x1d534,"MATHEMATICAL FRAKTUR SMALL W"));
        data.insert(std::make_pair(0x1d535,"MATHEMATICAL FRAKTUR SMALL X"));
        data.insert(std::make_pair(0x1d536,"MATHEMATICAL FRAKTUR SMALL Y"));
        data.insert(std::make_pair(0x1d537,"MATHEMATICAL FRAKTUR SMALL Z"));
        data.insert(std::make_pair(0x1d538,"MATHEMATICAL DOUBLE-STRUCK CAPITAL A"));
        data.insert(std::make_pair(0x1d539,"MATHEMATICAL DOUBLE-STRUCK CAPITAL B"));
        data.insert(std::make_pair(0x1d53b,"MATHEMATICAL DOUBLE-STRUCK CAPITAL D"));
        data.insert(std::make_pair(0x1d53c,"MATHEMATICAL DOUBLE-STRUCK CAPITAL E"));
        data.insert(std::make_pair(0x1d53d,"MATHEMATICAL DOUBLE-STRUCK CAPITAL F"));
        data.insert(std::make_pair(0x1d53e,"MATHEMATICAL DOUBLE-STRUCK CAPITAL G"));
        data.insert(std::make_pair(0x1d540,"MATHEMATICAL DOUBLE-STRUCK CAPITAL I"));
        data.insert(std::make_pair(0x1d541,"MATHEMATICAL DOUBLE-STRUCK CAPITAL J"));
        data.insert(std::make_pair(0x1d542,"MATHEMATICAL DOUBLE-STRUCK CAPITAL K"));
        data.insert(std::make_pair(0x1d543,"MATHEMATICAL DOUBLE-STRUCK CAPITAL L"));
        data.insert(std::make_pair(0x1d544,"MATHEMATICAL DOUBLE-STRUCK CAPITAL M"));
        data.insert(std::make_pair(0x1d546,"MATHEMATICAL DOUBLE-STRUCK CAPITAL O"));
        data.insert(std::make_pair(0x1d54a,"MATHEMATICAL DOUBLE-STRUCK CAPITAL S"));
        data.insert(std::make_pair(0x1d54b,"MATHEMATICAL DOUBLE-STRUCK CAPITAL T"));
        data.insert(std::make_pair(0x1d54c,"MATHEMATICAL DOUBLE-STRUCK CAPITAL U"));
        data.insert(std::make_pair(0x1d54d,"MATHEMATICAL DOUBLE-STRUCK CAPITAL V"));
        data.insert(std::make_pair(0x1d54e,"MATHEMATICAL DOUBLE-STRUCK CAPITAL W"));
        data.insert(std::make_pair(0x1d54f,"MATHEMATICAL DOUBLE-STRUCK CAPITAL X"));
        data.insert(std::make_pair(0x1d550,"MATHEMATICAL DOUBLE-STRUCK CAPITAL Y"));
        data.insert(std::make_pair(0x1d552,"MATHEMATICAL DOUBLE-STRUCK SMALL A"));
        data.insert(std::make_pair(0x1d553,"MATHEMATICAL DOUBLE-STRUCK SMALL B"));
        data.insert(std::make_pair(0x1d554,"MATHEMATICAL DOUBLE-STRUCK SMALL C"));
        data.insert(std::make_pair(0x1d555,"MATHEMATICAL DOUBLE-STRUCK SMALL D"));
        data.insert(std::make_pair(0x1d556,"MATHEMATICAL DOUBLE-STRUCK SMALL E"));
        data.insert(std::make_pair(0x1d557,"MATHEMATICAL DOUBLE-STRUCK SMALL F"));
        data.insert(std::make_pair(0x1d558,"MATHEMATICAL DOUBLE-STRUCK SMALL G"));
        data.insert(std::make_pair(0x1d559,"MATHEMATICAL DOUBLE-STRUCK SMALL H"));
        data.insert(std::make_pair(0x1d55a,"MATHEMATICAL DOUBLE-STRUCK SMALL I"));
        data.insert(std::make_pair(0x1d55b,"MATHEMATICAL DOUBLE-STRUCK SMALL J"));
        data.insert(std::make_pair(0x1d55c,"MATHEMATICAL DOUBLE-STRUCK SMALL K"));
        data.insert(std::make_pair(0x1d55d,"MATHEMATICAL DOUBLE-STRUCK SMALL L"));
        data.insert(std::make_pair(0x1d55e,"MATHEMATICAL DOUBLE-STRUCK SMALL M"));
        data.insert(std::make_pair(0x1d55f,"MATHEMATICAL DOUBLE-STRUCK SMALL N"));
        data.insert(std::make_pair(0x1d560,"MATHEMATICAL DOUBLE-STRUCK SMALL O"));
        data.insert(std::make_pair(0x1d561,"MATHEMATICAL DOUBLE-STRUCK SMALL P"));
        data.insert(std::make_pair(0x1d562,"MATHEMATICAL DOUBLE-STRUCK SMALL Q"));
        data.insert(std::make_pair(0x1d563,"MATHEMATICAL DOUBLE-STRUCK SMALL R"));
        data.insert(std::make_pair(0x1d564,"MATHEMATICAL DOUBLE-STRUCK SMALL S"));
        data.insert(std::make_pair(0x1d565,"MATHEMATICAL DOUBLE-STRUCK SMALL T"));
        data.insert(std::make_pair(0x1d566,"MATHEMATICAL DOUBLE-STRUCK SMALL U"));
        data.insert(std::make_pair(0x1d567,"MATHEMATICAL DOUBLE-STRUCK SMALL V"));
        data.insert(std::make_pair(0x1d568,"MATHEMATICAL DOUBLE-STRUCK SMALL W"));
        data.insert(std::make_pair(0x1d569,"MATHEMATICAL DOUBLE-STRUCK SMALL X"));
        data.insert(std::make_pair(0x1d56a,"MATHEMATICAL DOUBLE-STRUCK SMALL Y"));
        data.insert(std::make_pair(0x1d56b,"MATHEMATICAL DOUBLE-STRUCK SMALL Z"));
        data.insert(std::make_pair(0x1d56c,"MATHEMATICAL BOLD FRAKTUR CAPITAL A"));
        data.insert(std::make_pair(0x1d56d,"MATHEMATICAL BOLD FRAKTUR CAPITAL B"));
        data.insert(std::make_pair(0x1d56e,"MATHEMATICAL BOLD FRAKTUR CAPITAL C"));
        data.insert(std::make_pair(0x1d56f,"MATHEMATICAL BOLD FRAKTUR CAPITAL D"));
        data.insert(std::make_pair(0x1d570,"MATHEMATICAL BOLD FRAKTUR CAPITAL E"));
        data.insert(std::make_pair(0x1d571,"MATHEMATICAL BOLD FRAKTUR CAPITAL F"));
        data.insert(std::make_pair(0x1d572,"MATHEMATICAL BOLD FRAKTUR CAPITAL G"));
        data.insert(std::make_pair(0x1d573,"MATHEMATICAL BOLD FRAKTUR CAPITAL H"));
        data.insert(std::make_pair(0x1d574,"MATHEMATICAL BOLD FRAKTUR CAPITAL I"));
        data.insert(std::make_pair(0x1d575,"MATHEMATICAL BOLD FRAKTUR CAPITAL J"));
        data.insert(std::make_pair(0x1d576,"MATHEMATICAL BOLD FRAKTUR CAPITAL K"));
        data.insert(std::make_pair(0x1d577,"MATHEMATICAL BOLD FRAKTUR CAPITAL L"));
        data.insert(std::make_pair(0x1d578,"MATHEMATICAL BOLD FRAKTUR CAPITAL M"));
        data.insert(std::make_pair(0x1d579,"MATHEMATICAL BOLD FRAKTUR CAPITAL N"));
        data.insert(std::make_pair(0x1d57a,"MATHEMATICAL BOLD FRAKTUR CAPITAL O"));
        data.insert(std::make_pair(0x1d57b,"MATHEMATICAL BOLD FRAKTUR CAPITAL P"));
        data.insert(std::make_pair(0x1d57c,"MATHEMATICAL BOLD FRAKTUR CAPITAL Q"));
        data.insert(std::make_pair(0x1d57d,"MATHEMATICAL BOLD FRAKTUR CAPITAL R"));
        data.insert(std::make_pair(0x1d57e,"MATHEMATICAL BOLD FRAKTUR CAPITAL S"));
        data.insert(std::make_pair(0x1d57f,"MATHEMATICAL BOLD FRAKTUR CAPITAL T"));
        data.insert(std::make_pair(0x1d580,"MATHEMATICAL BOLD FRAKTUR CAPITAL U"));
        data.insert(std::make_pair(0x1d581,"MATHEMATICAL BOLD FRAKTUR CAPITAL V"));
        data.insert(std::make_pair(0x1d582,"MATHEMATICAL BOLD FRAKTUR CAPITAL W"));
        data.insert(std::make_pair(0x1d583,"MATHEMATICAL BOLD FRAKTUR CAPITAL X"));
        data.insert(std::make_pair(0x1d584,"MATHEMATICAL BOLD FRAKTUR CAPITAL Y"));
        data.insert(std::make_pair(0x1d585,"MATHEMATICAL BOLD FRAKTUR CAPITAL Z"));
        data.insert(std::make_pair(0x1d586,"MATHEMATICAL BOLD FRAKTUR SMALL A"));
        data.insert(std::make_pair(0x1d587,"MATHEMATICAL BOLD FRAKTUR SMALL B"));
        data.insert(std::make_pair(0x1d588,"MATHEMATICAL BOLD FRAKTUR SMALL C"));
        data.insert(std::make_pair(0x1d589,"MATHEMATICAL BOLD FRAKTUR SMALL D"));
        data.insert(std::make_pair(0x1d58a,"MATHEMATICAL BOLD FRAKTUR SMALL E"));
        data.insert(std::make_pair(0x1d58b,"MATHEMATICAL BOLD FRAKTUR SMALL F"));
        data.insert(std::make_pair(0x1d58c,"MATHEMATICAL BOLD FRAKTUR SMALL G"));
        data.insert(std::make_pair(0x1d58d,"MATHEMATICAL BOLD FRAKTUR SMALL H"));
        data.insert(std::make_pair(0x1d58e,"MATHEMATICAL BOLD FRAKTUR SMALL I"));
        data.insert(std::make_pair(0x1d58f,"MATHEMATICAL BOLD FRAKTUR SMALL J"));
        data.insert(std::make_pair(0x1d590,"MATHEMATICAL BOLD FRAKTUR SMALL K"));
        data.insert(std::make_pair(0x1d591,"MATHEMATICAL BOLD FRAKTUR SMALL L"));
        data.insert(std::make_pair(0x1d592,"MATHEMATICAL BOLD FRAKTUR SMALL M"));
        data.insert(std::make_pair(0x1d593,"MATHEMATICAL BOLD FRAKTUR SMALL N"));
        data.insert(std::make_pair(0x1d594,"MATHEMATICAL BOLD FRAKTUR SMALL O"));
        data.insert(std::make_pair(0x1d595,"MATHEMATICAL BOLD FRAKTUR SMALL P"));
        data.insert(std::make_pair(0x1d596,"MATHEMATICAL BOLD FRAKTUR SMALL Q"));
        data.insert(std::make_pair(0x1d597,"MATHEMATICAL BOLD FRAKTUR SMALL R"));
        data.insert(std::make_pair(0x1d598,"MATHEMATICAL BOLD FRAKTUR SMALL S"));
        data.insert(std::make_pair(0x1d599,"MATHEMATICAL BOLD FRAKTUR SMALL T"));
        data.insert(std::make_pair(0x1d59a,"MATHEMATICAL BOLD FRAKTUR SMALL U"));
        data.insert(std::make_pair(0x1d59b,"MATHEMATICAL BOLD FRAKTUR SMALL V"));
        data.insert(std::make_pair(0x1d59c,"MATHEMATICAL BOLD FRAKTUR SMALL W"));
        data.insert(std::make_pair(0x1d59d,"MATHEMATICAL BOLD FRAKTUR SMALL X"));
        data.insert(std::make_pair(0x1d59e,"MATHEMATICAL BOLD FRAKTUR SMALL Y"));
        data.insert(std::make_pair(0x1d59f,"MATHEMATICAL BOLD FRAKTUR SMALL Z"));
        data.insert(std::make_pair(0x1d5a0,"MATHEMATICAL SANS-SERIF CAPITAL A"));
        data.insert(std::make_pair(0x1d5a1,"MATHEMATICAL SANS-SERIF CAPITAL B"));
        data.insert(std::make_pair(0x1d5a2,"MATHEMATICAL SANS-SERIF CAPITAL C"));
        data.insert(std::make_pair(0x1d5a3,"MATHEMATICAL SANS-SERIF CAPITAL D"));
        data.insert(std::make_pair(0x1d5a4,"MATHEMATICAL SANS-SERIF CAPITAL E"));
        data.insert(std::make_pair(0x1d5a5,"MATHEMATICAL SANS-SERIF CAPITAL F"));
        data.insert(std::make_pair(0x1d5a6,"MATHEMATICAL SANS-SERIF CAPITAL G"));
        data.insert(std::make_pair(0x1d5a7,"MATHEMATICAL SANS-SERIF CAPITAL H"));
        data.insert(std::make_pair(0x1d5a8,"MATHEMATICAL SANS-SERIF CAPITAL I"));
        data.insert(std::make_pair(0x1d5a9,"MATHEMATICAL SANS-SERIF CAPITAL J"));
        data.insert(std::make_pair(0x1d5aa,"MATHEMATICAL SANS-SERIF CAPITAL K"));
        data.insert(std::make_pair(0x1d5ab,"MATHEMATICAL SANS-SERIF CAPITAL L"));
        data.insert(std::make_pair(0x1d5ac,"MATHEMATICAL SANS-SERIF CAPITAL M"));
        data.insert(std::make_pair(0x1d5ad,"MATHEMATICAL SANS-SERIF CAPITAL N"));
        data.insert(std::make_pair(0x1d5ae,"MATHEMATICAL SANS-SERIF CAPITAL O"));
        data.insert(std::make_pair(0x1d5af,"MATHEMATICAL SANS-SERIF CAPITAL P"));
        data.insert(std::make_pair(0x1d5b0,"MATHEMATICAL SANS-SERIF CAPITAL Q"));
        data.insert(std::make_pair(0x1d5b1,"MATHEMATICAL SANS-SERIF CAPITAL R"));
        data.insert(std::make_pair(0x1d5b2,"MATHEMATICAL SANS-SERIF CAPITAL S"));
        data.insert(std::make_pair(0x1d5b3,"MATHEMATICAL SANS-SERIF CAPITAL T"));
        data.insert(std::make_pair(0x1d5b4,"MATHEMATICAL SANS-SERIF CAPITAL U"));
        data.insert(std::make_pair(0x1d5b5,"MATHEMATICAL SANS-SERIF CAPITAL V"));
        data.insert(std::make_pair(0x1d5b6,"MATHEMATICAL SANS-SERIF CAPITAL W"));
        data.insert(std::make_pair(0x1d5b7,"MATHEMATICAL SANS-SERIF CAPITAL X"));
        data.insert(std::make_pair(0x1d5b8,"MATHEMATICAL SANS-SERIF CAPITAL Y"));
        data.insert(std::make_pair(0x1d5b9,"MATHEMATICAL SANS-SERIF CAPITAL Z"));
        data.insert(std::make_pair(0x1d5ba,"MATHEMATICAL SANS-SERIF SMALL A"));
        data.insert(std::make_pair(0x1d5bb,"MATHEMATICAL SANS-SERIF SMALL B"));
        data.insert(std::make_pair(0x1d5bc,"MATHEMATICAL SANS-SERIF SMALL C"));
        data.insert(std::make_pair(0x1d5bd,"MATHEMATICAL SANS-SERIF SMALL D"));
        data.insert(std::make_pair(0x1d5be,"MATHEMATICAL SANS-SERIF SMALL E"));
        data.insert(std::make_pair(0x1d5bf,"MATHEMATICAL SANS-SERIF SMALL F"));
        data.insert(std::make_pair(0x1d5c0,"MATHEMATICAL SANS-SERIF SMALL G"));
        data.insert(std::make_pair(0x1d5c1,"MATHEMATICAL SANS-SERIF SMALL H"));
        data.insert(std::make_pair(0x1d5c2,"MATHEMATICAL SANS-SERIF SMALL I"));
        data.insert(std::make_pair(0x1d5c3,"MATHEMATICAL SANS-SERIF SMALL J"));
        data.insert(std::make_pair(0x1d5c4,"MATHEMATICAL SANS-SERIF SMALL K"));
        data.insert(std::make_pair(0x1d5c5,"MATHEMATICAL SANS-SERIF SMALL L"));
        data.insert(std::make_pair(0x1d5c6,"MATHEMATICAL SANS-SERIF SMALL M"));
        data.insert(std::make_pair(0x1d5c7,"MATHEMATICAL SANS-SERIF SMALL N"));
        data.insert(std::make_pair(0x1d5c8,"MATHEMATICAL SANS-SERIF SMALL O"));
        data.insert(std::make_pair(0x1d5c9,"MATHEMATICAL SANS-SERIF SMALL P"));
        data.insert(std::make_pair(0x1d5ca,"MATHEMATICAL SANS-SERIF SMALL Q"));
        data.insert(std::make_pair(0x1d5cb,"MATHEMATICAL SANS-SERIF SMALL R"));
        data.insert(std::make_pair(0x1d5cc,"MATHEMATICAL SANS-SERIF SMALL S"));
        data.insert(std::make_pair(0x1d5cd,"MATHEMATICAL SANS-SERIF SMALL T"));
        data.insert(std::make_pair(0x1d5ce,"MATHEMATICAL SANS-SERIF SMALL U"));
        data.insert(std::make_pair(0x1d5cf,"MATHEMATICAL SANS-SERIF SMALL V"));
        data.insert(std::make_pair(0x1d5d0,"MATHEMATICAL SANS-SERIF SMALL W"));
        data.insert(std::make_pair(0x1d5d1,"MATHEMATICAL SANS-SERIF SMALL X"));
        data.insert(std::make_pair(0x1d5d2,"MATHEMATICAL SANS-SERIF SMALL Y"));
        data.insert(std::make_pair(0x1d5d3,"MATHEMATICAL SANS-SERIF SMALL Z"));
        data.insert(std::make_pair(0x1d5d4,"MATHEMATICAL SANS-SERIF BOLD CAPITAL A"));
        data.insert(std::make_pair(0x1d5d5,"MATHEMATICAL SANS-SERIF BOLD CAPITAL B"));
        data.insert(std::make_pair(0x1d5d6,"MATHEMATICAL SANS-SERIF BOLD CAPITAL C"));
        data.insert(std::make_pair(0x1d5d7,"MATHEMATICAL SANS-SERIF BOLD CAPITAL D"));
        data.insert(std::make_pair(0x1d5d8,"MATHEMATICAL SANS-SERIF BOLD CAPITAL E"));
        data.insert(std::make_pair(0x1d5d9,"MATHEMATICAL SANS-SERIF BOLD CAPITAL F"));
        data.insert(std::make_pair(0x1d5da,"MATHEMATICAL SANS-SERIF BOLD CAPITAL G"));
        data.insert(std::make_pair(0x1d5db,"MATHEMATICAL SANS-SERIF BOLD CAPITAL H"));
        data.insert(std::make_pair(0x1d5dc,"MATHEMATICAL SANS-SERIF BOLD CAPITAL I"));
        data.insert(std::make_pair(0x1d5dd,"MATHEMATICAL SANS-SERIF BOLD CAPITAL J"));
        data.insert(std::make_pair(0x1d5de,"MATHEMATICAL SANS-SERIF BOLD CAPITAL K"));
        data.insert(std::make_pair(0x1d5df,"MATHEMATICAL SANS-SERIF BOLD CAPITAL L"));
        data.insert(std::make_pair(0x1d5e0,"MATHEMATICAL SANS-SERIF BOLD CAPITAL M"));
        data.insert(std::make_pair(0x1d5e1,"MATHEMATICAL SANS-SERIF BOLD CAPITAL N"));
        data.insert(std::make_pair(0x1d5e2,"MATHEMATICAL SANS-SERIF BOLD CAPITAL O"));
        data.insert(std::make_pair(0x1d5e3,"MATHEMATICAL SANS-SERIF BOLD CAPITAL P"));
        data.insert(std::make_pair(0x1d5e4,"MATHEMATICAL SANS-SERIF BOLD CAPITAL Q"));
        data.insert(std::make_pair(0x1d5e5,"MATHEMATICAL SANS-SERIF BOLD CAPITAL R"));
        data.insert(std::make_pair(0x1d5e6,"MATHEMATICAL SANS-SERIF BOLD CAPITAL S"));
        data.insert(std::make_pair(0x1d5e7,"MATHEMATICAL SANS-SERIF BOLD CAPITAL T"));
        data.insert(std::make_pair(0x1d5e8,"MATHEMATICAL SANS-SERIF BOLD CAPITAL U"));
        data.insert(std::make_pair(0x1d5e9,"MATHEMATICAL SANS-SERIF BOLD CAPITAL V"));
        data.insert(std::make_pair(0x1d5ea,"MATHEMATICAL SANS-SERIF BOLD CAPITAL W"));
        data.insert(std::make_pair(0x1d5eb,"MATHEMATICAL SANS-SERIF BOLD CAPITAL X"));
        data.insert(std::make_pair(0x1d5ec,"MATHEMATICAL SANS-SERIF BOLD CAPITAL Y"));
        data.insert(std::make_pair(0x1d5ed,"MATHEMATICAL SANS-SERIF BOLD CAPITAL Z"));
        data.insert(std::make_pair(0x1d5ee,"MATHEMATICAL SANS-SERIF BOLD SMALL A"));
        data.insert(std::make_pair(0x1d5ef,"MATHEMATICAL SANS-SERIF BOLD SMALL B"));
        data.insert(std::make_pair(0x1d5f0,"MATHEMATICAL SANS-SERIF BOLD SMALL C"));
        data.insert(std::make_pair(0x1d5f1,"MATHEMATICAL SANS-SERIF BOLD SMALL D"));
        data.insert(std::make_pair(0x1d5f2,"MATHEMATICAL SANS-SERIF BOLD SMALL E"));
        data.insert(std::make_pair(0x1d5f3,"MATHEMATICAL SANS-SERIF BOLD SMALL F"));
        data.insert(std::make_pair(0x1d5f4,"MATHEMATICAL SANS-SERIF BOLD SMALL G"));
        data.insert(std::make_pair(0x1d5f5,"MATHEMATICAL SANS-SERIF BOLD SMALL H"));
        data.insert(std::make_pair(0x1d5f6,"MATHEMATICAL SANS-SERIF BOLD SMALL I"));
        data.insert(std::make_pair(0x1d5f7,"MATHEMATICAL SANS-SERIF BOLD SMALL J"));
        data.insert(std::make_pair(0x1d5f8,"MATHEMATICAL SANS-SERIF BOLD SMALL K"));
        data.insert(std::make_pair(0x1d5f9,"MATHEMATICAL SANS-SERIF BOLD SMALL L"));
        data.insert(std::make_pair(0x1d5fa,"MATHEMATICAL SANS-SERIF BOLD SMALL M"));
        data.insert(std::make_pair(0x1d5fb,"MATHEMATICAL SANS-SERIF BOLD SMALL N"));
        data.insert(std::make_pair(0x1d5fc,"MATHEMATICAL SANS-SERIF BOLD SMALL O"));
        data.insert(std::make_pair(0x1d5fd,"MATHEMATICAL SANS-SERIF BOLD SMALL P"));
        data.insert(std::make_pair(0x1d5fe,"MATHEMATICAL SANS-SERIF BOLD SMALL Q"));
        data.insert(std::make_pair(0x1d5ff,"MATHEMATICAL SANS-SERIF BOLD SMALL R"));
        data.insert(std::make_pair(0x1d600,"MATHEMATICAL SANS-SERIF BOLD SMALL S"));
        data.insert(std::make_pair(0x1d601,"MATHEMATICAL SANS-SERIF BOLD SMALL T"));
        data.insert(std::make_pair(0x1d602,"MATHEMATICAL SANS-SERIF BOLD SMALL U"));
        data.insert(std::make_pair(0x1d603,"MATHEMATICAL SANS-SERIF BOLD SMALL V"));
        data.insert(std::make_pair(0x1d604,"MATHEMATICAL SANS-SERIF BOLD SMALL W"));
        data.insert(std::make_pair(0x1d605,"MATHEMATICAL SANS-SERIF BOLD SMALL X"));
        data.insert(std::make_pair(0x1d606,"MATHEMATICAL SANS-SERIF BOLD SMALL Y"));
        data.insert(std::make_pair(0x1d607,"MATHEMATICAL SANS-SERIF BOLD SMALL Z"));
        data.insert(std::make_pair(0x1d608,"MATHEMATICAL SANS-SERIF ITALIC CAPITAL A"));
        data.insert(std::make_pair(0x1d609,"MATHEMATICAL SANS-SERIF ITALIC CAPITAL B"));
        data.insert(std::make_pair(0x1d60a,"MATHEMATICAL SANS-SERIF ITALIC CAPITAL C"));
        data.insert(std::make_pair(0x1d60b,"MATHEMATICAL SANS-SERIF ITALIC CAPITAL D"));
        data.insert(std::make_pair(0x1d60c,"MATHEMATICAL SANS-SERIF ITALIC CAPITAL E"));
        data.insert(std::make_pair(0x1d60d,"MATHEMATICAL SANS-SERIF ITALIC CAPITAL F"));
        data.insert(std::make_pair(0x1d60e,"MATHEMATICAL SANS-SERIF ITALIC CAPITAL G"));
        data.insert(std::make_pair(0x1d60f,"MATHEMATICAL SANS-SERIF ITALIC CAPITAL H"));
        data.insert(std::make_pair(0x1d610,"MATHEMATICAL SANS-SERIF ITALIC CAPITAL I"));
        data.insert(std::make_pair(0x1d611,"MATHEMATICAL SANS-SERIF ITALIC CAPITAL J"));
        data.insert(std::make_pair(0x1d612,"MATHEMATICAL SANS-SERIF ITALIC CAPITAL K"));
        data.insert(std::make_pair(0x1d613,"MATHEMATICAL SANS-SERIF ITALIC CAPITAL L"));
        data.insert(std::make_pair(0x1d614,"MATHEMATICAL SANS-SERIF ITALIC CAPITAL M"));
        data.insert(std::make_pair(0x1d615,"MATHEMATICAL SANS-SERIF ITALIC CAPITAL N"));
        data.insert(std::make_pair(0x1d616,"MATHEMATICAL SANS-SERIF ITALIC CAPITAL O"));
        data.insert(std::make_pair(0x1d617,"MATHEMATICAL SANS-SERIF ITALIC CAPITAL P"));
        data.insert(std::make_pair(0x1d618,"MATHEMATICAL SANS-SERIF ITALIC CAPITAL Q"));
        data.insert(std::make_pair(0x1d619,"MATHEMATICAL SANS-SERIF ITALIC CAPITAL R"));
        data.insert(std::make_pair(0x1d61a,"MATHEMATICAL SANS-SERIF ITALIC CAPITAL S"));
        data.insert(std::make_pair(0x1d61b,"MATHEMATICAL SANS-SERIF ITALIC CAPITAL T"));
        data.insert(std::make_pair(0x1d61c,"MATHEMATICAL SANS-SERIF ITALIC CAPITAL U"));
        data.insert(std::make_pair(0x1d61d,"MATHEMATICAL SANS-SERIF ITALIC CAPITAL V"));
        data.insert(std::make_pair(0x1d61e,"MATHEMATICAL SANS-SERIF ITALIC CAPITAL W"));
        data.insert(std::make_pair(0x1d61f,"MATHEMATICAL SANS-SERIF ITALIC CAPITAL X"));
        data.insert(std::make_pair(0x1d620,"MATHEMATICAL SANS-SERIF ITALIC CAPITAL Y"));
        data.insert(std::make_pair(0x1d621,"MATHEMATICAL SANS-SERIF ITALIC CAPITAL Z"));
        data.insert(std::make_pair(0x1d622,"MATHEMATICAL SANS-SERIF ITALIC SMALL A"));
        data.insert(std::make_pair(0x1d623,"MATHEMATICAL SANS-SERIF ITALIC SMALL B"));
        data.insert(std::make_pair(0x1d624,"MATHEMATICAL SANS-SERIF ITALIC SMALL C"));
        data.insert(std::make_pair(0x1d625,"MATHEMATICAL SANS-SERIF ITALIC SMALL D"));
        data.insert(std::make_pair(0x1d626,"MATHEMATICAL SANS-SERIF ITALIC SMALL E"));
        data.insert(std::make_pair(0x1d627,"MATHEMATICAL SANS-SERIF ITALIC SMALL F"));
        data.insert(std::make_pair(0x1d628,"MATHEMATICAL SANS-SERIF ITALIC SMALL G"));
        data.insert(std::make_pair(0x1d629,"MATHEMATICAL SANS-SERIF ITALIC SMALL H"));
        data.insert(std::make_pair(0x1d62a,"MATHEMATICAL SANS-SERIF ITALIC SMALL I"));
        data.insert(std::make_pair(0x1d62b,"MATHEMATICAL SANS-SERIF ITALIC SMALL J"));
        data.insert(std::make_pair(0x1d62c,"MATHEMATICAL SANS-SERIF ITALIC SMALL K"));
        data.insert(std::make_pair(0x1d62d,"MATHEMATICAL SANS-SERIF ITALIC SMALL L"));
        data.insert(std::make_pair(0x1d62e,"MATHEMATICAL SANS-SERIF ITALIC SMALL M"));
        data.insert(std::make_pair(0x1d62f,"MATHEMATICAL SANS-SERIF ITALIC SMALL N"));
        data.insert(std::make_pair(0x1d630,"MATHEMATICAL SANS-SERIF ITALIC SMALL O"));
        data.insert(std::make_pair(0x1d631,"MATHEMATICAL SANS-SERIF ITALIC SMALL P"));
        data.insert(std::make_pair(0x1d632,"MATHEMATICAL SANS-SERIF ITALIC SMALL Q"));
        data.insert(std::make_pair(0x1d633,"MATHEMATICAL SANS-SERIF ITALIC SMALL R"));
        data.insert(std::make_pair(0x1d634,"MATHEMATICAL SANS-SERIF ITALIC SMALL S"));
        data.insert(std::make_pair(0x1d635,"MATHEMATICAL SANS-SERIF ITALIC SMALL T"));
        data.insert(std::make_pair(0x1d636,"MATHEMATICAL SANS-SERIF ITALIC SMALL U"));
        data.insert(std::make_pair(0x1d637,"MATHEMATICAL SANS-SERIF ITALIC SMALL V"));
        data.insert(std::make_pair(0x1d638,"MATHEMATICAL SANS-SERIF ITALIC SMALL W"));
        data.insert(std::make_pair(0x1d639,"MATHEMATICAL SANS-SERIF ITALIC SMALL X"));
        data.insert(std::make_pair(0x1d63a,"MATHEMATICAL SANS-SERIF ITALIC SMALL Y"));
        data.insert(std::make_pair(0x1d63b,"MATHEMATICAL SANS-SERIF ITALIC SMALL Z"));
        data.insert(std::make_pair(0x1d63c,"MATHEMATICAL SANS-SERIF BOLD ITALIC CAPITAL A"));
        data.insert(std::make_pair(0x1d63d,"MATHEMATICAL SANS-SERIF BOLD ITALIC CAPITAL B"));
        data.insert(std::make_pair(0x1d63e,"MATHEMATICAL SANS-SERIF BOLD ITALIC CAPITAL C"));
        data.insert(std::make_pair(0x1d63f,"MATHEMATICAL SANS-SERIF BOLD ITALIC CAPITAL D"));
        data.insert(std::make_pair(0x1d640,"MATHEMATICAL SANS-SERIF BOLD ITALIC CAPITAL E"));
        data.insert(std::make_pair(0x1d641,"MATHEMATICAL SANS-SERIF BOLD ITALIC CAPITAL F"));
        data.insert(std::make_pair(0x1d642,"MATHEMATICAL SANS-SERIF BOLD ITALIC CAPITAL G"));
        data.insert(std::make_pair(0x1d643,"MATHEMATICAL SANS-SERIF BOLD ITALIC CAPITAL H"));
        data.insert(std::make_pair(0x1d644,"MATHEMATICAL SANS-SERIF BOLD ITALIC CAPITAL I"));
        data.insert(std::make_pair(0x1d645,"MATHEMATICAL SANS-SERIF BOLD ITALIC CAPITAL J"));
        data.insert(std::make_pair(0x1d646,"MATHEMATICAL SANS-SERIF BOLD ITALIC CAPITAL K"));
        data.insert(std::make_pair(0x1d647,"MATHEMATICAL SANS-SERIF BOLD ITALIC CAPITAL L"));
        data.insert(std::make_pair(0x1d648,"MATHEMATICAL SANS-SERIF BOLD ITALIC CAPITAL M"));
        data.insert(std::make_pair(0x1d649,"MATHEMATICAL SANS-SERIF BOLD ITALIC CAPITAL N"));
        data.insert(std::make_pair(0x1d64a,"MATHEMATICAL SANS-SERIF BOLD ITALIC CAPITAL O"));
        data.insert(std::make_pair(0x1d64b,"MATHEMATICAL SANS-SERIF BOLD ITALIC CAPITAL P"));
        data.insert(std::make_pair(0x1d64c,"MATHEMATICAL SANS-SERIF BOLD ITALIC CAPITAL Q"));
        data.insert(std::make_pair(0x1d64d,"MATHEMATICAL SANS-SERIF BOLD ITALIC CAPITAL R"));
        data.insert(std::make_pair(0x1d64e,"MATHEMATICAL SANS-SERIF BOLD ITALIC CAPITAL S"));
        data.insert(std::make_pair(0x1d64f,"MATHEMATICAL SANS-SERIF BOLD ITALIC CAPITAL T"));
        data.insert(std::make_pair(0x1d650,"MATHEMATICAL SANS-SERIF BOLD ITALIC CAPITAL U"));
        data.insert(std::make_pair(0x1d651,"MATHEMATICAL SANS-SERIF BOLD ITALIC CAPITAL V"));
        data.insert(std::make_pair(0x1d652,"MATHEMATICAL SANS-SERIF BOLD ITALIC CAPITAL W"));
        data.insert(std::make_pair(0x1d653,"MATHEMATICAL SANS-SERIF BOLD ITALIC CAPITAL X"));
        data.insert(std::make_pair(0x1d654,"MATHEMATICAL SANS-SERIF BOLD ITALIC CAPITAL Y"));
        data.insert(std::make_pair(0x1d655,"MATHEMATICAL SANS-SERIF BOLD ITALIC CAPITAL Z"));
        data.insert(std::make_pair(0x1d656,"MATHEMATICAL SANS-SERIF BOLD ITALIC SMALL A"));
        data.insert(std::make_pair(0x1d657,"MATHEMATICAL SANS-SERIF BOLD ITALIC SMALL B"));
        data.insert(std::make_pair(0x1d658,"MATHEMATICAL SANS-SERIF BOLD ITALIC SMALL C"));
        data.insert(std::make_pair(0x1d659,"MATHEMATICAL SANS-SERIF BOLD ITALIC SMALL D"));
        data.insert(std::make_pair(0x1d65a,"MATHEMATICAL SANS-SERIF BOLD ITALIC SMALL E"));
        data.insert(std::make_pair(0x1d65b,"MATHEMATICAL SANS-SERIF BOLD ITALIC SMALL F"));
        data.insert(std::make_pair(0x1d65c,"MATHEMATICAL SANS-SERIF BOLD ITALIC SMALL G"));
        data.insert(std::make_pair(0x1d65d,"MATHEMATICAL SANS-SERIF BOLD ITALIC SMALL H"));
        data.insert(std::make_pair(0x1d65e,"MATHEMATICAL SANS-SERIF BOLD ITALIC SMALL I"));
        data.insert(std::make_pair(0x1d65f,"MATHEMATICAL SANS-SERIF BOLD ITALIC SMALL J"));
        data.insert(std::make_pair(0x1d660,"MATHEMATICAL SANS-SERIF BOLD ITALIC SMALL K"));
        data.insert(std::make_pair(0x1d661,"MATHEMATICAL SANS-SERIF BOLD ITALIC SMALL L"));
        data.insert(std::make_pair(0x1d662,"MATHEMATICAL SANS-SERIF BOLD ITALIC SMALL M"));
        data.insert(std::make_pair(0x1d663,"MATHEMATICAL SANS-SERIF BOLD ITALIC SMALL N"));
        data.insert(std::make_pair(0x1d664,"MATHEMATICAL SANS-SERIF BOLD ITALIC SMALL O"));
        data.insert(std::make_pair(0x1d665,"MATHEMATICAL SANS-SERIF BOLD ITALIC SMALL P"));
        data.insert(std::make_pair(0x1d666,"MATHEMATICAL SANS-SERIF BOLD ITALIC SMALL Q"));
        data.insert(std::make_pair(0x1d667,"MATHEMATICAL SANS-SERIF BOLD ITALIC SMALL R"));
        data.insert(std::make_pair(0x1d668,"MATHEMATICAL SANS-SERIF BOLD ITALIC SMALL S"));
        data.insert(std::make_pair(0x1d669,"MATHEMATICAL SANS-SERIF BOLD ITALIC SMALL T"));
        data.insert(std::make_pair(0x1d66a,"MATHEMATICAL SANS-SERIF BOLD ITALIC SMALL U"));
        data.insert(std::make_pair(0x1d66b,"MATHEMATICAL SANS-SERIF BOLD ITALIC SMALL V"));
        data.insert(std::make_pair(0x1d66c,"MATHEMATICAL SANS-SERIF BOLD ITALIC SMALL W"));
        data.insert(std::make_pair(0x1d66d,"MATHEMATICAL SANS-SERIF BOLD ITALIC SMALL X"));
        data.insert(std::make_pair(0x1d66e,"MATHEMATICAL SANS-SERIF BOLD ITALIC SMALL Y"));
        data.insert(std::make_pair(0x1d66f,"MATHEMATICAL SANS-SERIF BOLD ITALIC SMALL Z"));
        data.insert(std::make_pair(0x1d670,"MATHEMATICAL MONOSPACE CAPITAL A"));
        data.insert(std::make_pair(0x1d671,"MATHEMATICAL MONOSPACE CAPITAL B"));
        data.insert(std::make_pair(0x1d672,"MATHEMATICAL MONOSPACE CAPITAL C"));
        data.insert(std::make_pair(0x1d673,"MATHEMATICAL MONOSPACE CAPITAL D"));
        data.insert(std::make_pair(0x1d674,"MATHEMATICAL MONOSPACE CAPITAL E"));
        data.insert(std::make_pair(0x1d675,"MATHEMATICAL MONOSPACE CAPITAL F"));
        data.insert(std::make_pair(0x1d676,"MATHEMATICAL MONOSPACE CAPITAL G"));
        data.insert(std::make_pair(0x1d677,"MATHEMATICAL MONOSPACE CAPITAL H"));
        data.insert(std::make_pair(0x1d678,"MATHEMATICAL MONOSPACE CAPITAL I"));
        data.insert(std::make_pair(0x1d679,"MATHEMATICAL MONOSPACE CAPITAL J"));
        data.insert(std::make_pair(0x1d67a,"MATHEMATICAL MONOSPACE CAPITAL K"));
        data.insert(std::make_pair(0x1d67b,"MATHEMATICAL MONOSPACE CAPITAL L"));
        data.insert(std::make_pair(0x1d67c,"MATHEMATICAL MONOSPACE CAPITAL M"));
        data.insert(std::make_pair(0x1d67d,"MATHEMATICAL MONOSPACE CAPITAL N"));
        data.insert(std::make_pair(0x1d67e,"MATHEMATICAL MONOSPACE CAPITAL O"));
        data.insert(std::make_pair(0x1d67f,"MATHEMATICAL MONOSPACE CAPITAL P"));
        data.insert(std::make_pair(0x1d680,"MATHEMATICAL MONOSPACE CAPITAL Q"));
        data.insert(std::make_pair(0x1d681,"MATHEMATICAL MONOSPACE CAPITAL R"));
        data.insert(std::make_pair(0x1d682,"MATHEMATICAL MONOSPACE CAPITAL S"));
        data.insert(std::make_pair(0x1d683,"MATHEMATICAL MONOSPACE CAPITAL T"));
        data.insert(std::make_pair(0x1d684,"MATHEMATICAL MONOSPACE CAPITAL U"));
        data.insert(std::make_pair(0x1d685,"MATHEMATICAL MONOSPACE CAPITAL V"));
        data.insert(std::make_pair(0x1d686,"MATHEMATICAL MONOSPACE CAPITAL W"));
        data.insert(std::make_pair(0x1d687,"MATHEMATICAL MONOSPACE CAPITAL X"));
        data.insert(std::make_pair(0x1d688,"MATHEMATICAL MONOSPACE CAPITAL Y"));
        data.insert(std::make_pair(0x1d689,"MATHEMATICAL MONOSPACE CAPITAL Z"));
        data.insert(std::make_pair(0x1d68a,"MATHEMATICAL MONOSPACE SMALL A"));
        data.insert(std::make_pair(0x1d68b,"MATHEMATICAL MONOSPACE SMALL B"));
        data.insert(std::make_pair(0x1d68c,"MATHEMATICAL MONOSPACE SMALL C"));
        data.insert(std::make_pair(0x1d68d,"MATHEMATICAL MONOSPACE SMALL D"));
        data.insert(std::make_pair(0x1d68e,"MATHEMATICAL MONOSPACE SMALL E"));
        data.insert(std::make_pair(0x1d68f,"MATHEMATICAL MONOSPACE SMALL F"));
        data.insert(std::make_pair(0x1d690,"MATHEMATICAL MONOSPACE SMALL G"));
        data.insert(std::make_pair(0x1d691,"MATHEMATICAL MONOSPACE SMALL H"));
        data.insert(std::make_pair(0x1d692,"MATHEMATICAL MONOSPACE SMALL I"));
        data.insert(std::make_pair(0x1d693,"MATHEMATICAL MONOSPACE SMALL J"));
        data.insert(std::make_pair(0x1d694,"MATHEMATICAL MONOSPACE SMALL K"));
        data.insert(std::make_pair(0x1d695,"MATHEMATICAL MONOSPACE SMALL L"));
        data.insert(std::make_pair(0x1d696,"MATHEMATICAL MONOSPACE SMALL M"));
        data.insert(std::make_pair(0x1d697,"MATHEMATICAL MONOSPACE SMALL N"));
        data.insert(std::make_pair(0x1d698,"MATHEMATICAL MONOSPACE SMALL O"));
        data.insert(std::make_pair(0x1d699,"MATHEMATICAL MONOSPACE SMALL P"));
        data.insert(std::make_pair(0x1d69a,"MATHEMATICAL MONOSPACE SMALL Q"));
        data.insert(std::make_pair(0x1d69b,"MATHEMATICAL MONOSPACE SMALL R"));
        data.insert(std::make_pair(0x1d69c,"MATHEMATICAL MONOSPACE SMALL S"));
        data.insert(std::make_pair(0x1d69d,"MATHEMATICAL MONOSPACE SMALL T"));
        data.insert(std::make_pair(0x1d69e,"MATHEMATICAL MONOSPACE SMALL U"));
        data.insert(std::make_pair(0x1d69f,"MATHEMATICAL MONOSPACE SMALL V"));
        data.insert(std::make_pair(0x1d6a0,"MATHEMATICAL MONOSPACE SMALL W"));
        data.insert(std::make_pair(0x1d6a1,"MATHEMATICAL MONOSPACE SMALL X"));
        data.insert(std::make_pair(0x1d6a2,"MATHEMATICAL MONOSPACE SMALL Y"));
        data.insert(std::make_pair(0x1d6a3,"MATHEMATICAL MONOSPACE SMALL Z"));
        data.insert(std::make_pair(0x1d6a4,"MATHEMATICAL ITALIC SMALL DOTLESS I"));
        data.insert(std::make_pair(0x1d6a5,"MATHEMATICAL ITALIC SMALL DOTLESS J"));
        data.insert(std::make_pair(0x1d6a8,"MATHEMATICAL BOLD CAPITAL ALPHA"));
        data.insert(std::make_pair(0x1d6a9,"MATHEMATICAL BOLD CAPITAL BETA"));
        data.insert(std::make_pair(0x1d6aa,"MATHEMATICAL BOLD CAPITAL GAMMA"));
        data.insert(std::make_pair(0x1d6ab,"MATHEMATICAL BOLD CAPITAL DELTA"));
        data.insert(std::make_pair(0x1d6ac,"MATHEMATICAL BOLD CAPITAL EPSILON"));
        data.insert(std::make_pair(0x1d6ad,"MATHEMATICAL BOLD CAPITAL ZETA"));
        data.insert(std::make_pair(0x1d6ae,"MATHEMATICAL BOLD CAPITAL ETA"));
        data.insert(std::make_pair(0x1d6af,"MATHEMATICAL BOLD CAPITAL THETA"));
        data.insert(std::make_pair(0x1d6b0,"MATHEMATICAL BOLD CAPITAL IOTA"));
        data.insert(std::make_pair(0x1d6b1,"MATHEMATICAL BOLD CAPITAL KAPPA"));
        data.insert(std::make_pair(0x1d6b2,"MATHEMATICAL BOLD CAPITAL LAMDA"));
        data.insert(std::make_pair(0x1d6b3,"MATHEMATICAL BOLD CAPITAL MU"));
        data.insert(std::make_pair(0x1d6b4,"MATHEMATICAL BOLD CAPITAL NU"));
        data.insert(std::make_pair(0x1d6b5,"MATHEMATICAL BOLD CAPITAL XI"));
        data.insert(std::make_pair(0x1d6b6,"MATHEMATICAL BOLD CAPITAL OMICRON"));
        data.insert(std::make_pair(0x1d6b7,"MATHEMATICAL BOLD CAPITAL PI"));
        data.insert(std::make_pair(0x1d6b8,"MATHEMATICAL BOLD CAPITAL RHO"));
        data.insert(std::make_pair(0x1d6b9,"MATHEMATICAL BOLD CAPITAL THETA SYMBOL"));
        data.insert(std::make_pair(0x1d6ba,"MATHEMATICAL BOLD CAPITAL SIGMA"));
        data.insert(std::make_pair(0x1d6bb,"MATHEMATICAL BOLD CAPITAL TAU"));
        data.insert(std::make_pair(0x1d6bc,"MATHEMATICAL BOLD CAPITAL UPSILON"));
        data.insert(std::make_pair(0x1d6bd,"MATHEMATICAL BOLD CAPITAL PHI"));
        data.insert(std::make_pair(0x1d6be,"MATHEMATICAL BOLD CAPITAL CHI"));
        data.insert(std::make_pair(0x1d6bf,"MATHEMATICAL BOLD CAPITAL PSI"));
        data.insert(std::make_pair(0x1d6c0,"MATHEMATICAL BOLD CAPITAL OMEGA"));
        data.insert(std::make_pair(0x1d6c1,"MATHEMATICAL BOLD NABLA"));
        data.insert(std::make_pair(0x1d6c2,"MATHEMATICAL BOLD SMALL ALPHA"));
        data.insert(std::make_pair(0x1d6c3,"MATHEMATICAL BOLD SMALL BETA"));
        data.insert(std::make_pair(0x1d6c4,"MATHEMATICAL BOLD SMALL GAMMA"));
        data.insert(std::make_pair(0x1d6c5,"MATHEMATICAL BOLD SMALL DELTA"));
        data.insert(std::make_pair(0x1d6c6,"MATHEMATICAL BOLD SMALL EPSILON"));
        data.insert(std::make_pair(0x1d6c7,"MATHEMATICAL BOLD SMALL ZETA"));
        data.insert(std::make_pair(0x1d6c8,"MATHEMATICAL BOLD SMALL ETA"));
        data.insert(std::make_pair(0x1d6c9,"MATHEMATICAL BOLD SMALL THETA"));
        data.insert(std::make_pair(0x1d6ca,"MATHEMATICAL BOLD SMALL IOTA"));
        data.insert(std::make_pair(0x1d6cb,"MATHEMATICAL BOLD SMALL KAPPA"));
        data.insert(std::make_pair(0x1d6cc,"MATHEMATICAL BOLD SMALL LAMDA"));
        data.insert(std::make_pair(0x1d6cd,"MATHEMATICAL BOLD SMALL MU"));
        data.insert(std::make_pair(0x1d6ce,"MATHEMATICAL BOLD SMALL NU"));
        data.insert(std::make_pair(0x1d6cf,"MATHEMATICAL BOLD SMALL XI"));
        data.insert(std::make_pair(0x1d6d0,"MATHEMATICAL BOLD SMALL OMICRON"));
        data.insert(std::make_pair(0x1d6d1,"MATHEMATICAL BOLD SMALL PI"));
        data.insert(std::make_pair(0x1d6d2,"MATHEMATICAL BOLD SMALL RHO"));
        data.insert(std::make_pair(0x1d6d3,"MATHEMATICAL BOLD SMALL FINAL SIGMA"));
        data.insert(std::make_pair(0x1d6d4,"MATHEMATICAL BOLD SMALL SIGMA"));
        data.insert(std::make_pair(0x1d6d5,"MATHEMATICAL BOLD SMALL TAU"));
        data.insert(std::make_pair(0x1d6d6,"MATHEMATICAL BOLD SMALL UPSILON"));
        data.insert(std::make_pair(0x1d6d7,"MATHEMATICAL BOLD SMALL PHI"));
        data.insert(std::make_pair(0x1d6d8,"MATHEMATICAL BOLD SMALL CHI"));
        data.insert(std::make_pair(0x1d6d9,"MATHEMATICAL BOLD SMALL PSI"));
        data.insert(std::make_pair(0x1d6da,"MATHEMATICAL BOLD SMALL OMEGA"));
        data.insert(std::make_pair(0x1d6db,"MATHEMATICAL BOLD PARTIAL DIFFERENTIAL"));
        data.insert(std::make_pair(0x1d6dc,"MATHEMATICAL BOLD EPSILON SYMBOL"));
        data.insert(std::make_pair(0x1d6dd,"MATHEMATICAL BOLD THETA SYMBOL"));
        data.insert(std::make_pair(0x1d6de,"MATHEMATICAL BOLD KAPPA SYMBOL"));
        data.insert(std::make_pair(0x1d6df,"MATHEMATICAL BOLD PHI SYMBOL"));
        data.insert(std::make_pair(0x1d6e0,"MATHEMATICAL BOLD RHO SYMBOL"));
        data.insert(std::make_pair(0x1d6e1,"MATHEMATICAL BOLD PI SYMBOL"));
        data.insert(std::make_pair(0x1d6e2,"MATHEMATICAL ITALIC CAPITAL ALPHA"));
        data.insert(std::make_pair(0x1d6e3,"MATHEMATICAL ITALIC CAPITAL BETA"));
        data.insert(std::make_pair(0x1d6e4,"MATHEMATICAL ITALIC CAPITAL GAMMA"));
        data.insert(std::make_pair(0x1d6e5,"MATHEMATICAL ITALIC CAPITAL DELTA"));
        data.insert(std::make_pair(0x1d6e6,"MATHEMATICAL ITALIC CAPITAL EPSILON"));
        data.insert(std::make_pair(0x1d6e7,"MATHEMATICAL ITALIC CAPITAL ZETA"));
        data.insert(std::make_pair(0x1d6e8,"MATHEMATICAL ITALIC CAPITAL ETA"));
        data.insert(std::make_pair(0x1d6e9,"MATHEMATICAL ITALIC CAPITAL THETA"));
        data.insert(std::make_pair(0x1d6ea,"MATHEMATICAL ITALIC CAPITAL IOTA"));
        data.insert(std::make_pair(0x1d6eb,"MATHEMATICAL ITALIC CAPITAL KAPPA"));
        data.insert(std::make_pair(0x1d6ec,"MATHEMATICAL ITALIC CAPITAL LAMDA"));
        data.insert(std::make_pair(0x1d6ed,"MATHEMATICAL ITALIC CAPITAL MU"));
        data.insert(std::make_pair(0x1d6ee,"MATHEMATICAL ITALIC CAPITAL NU"));
        data.insert(std::make_pair(0x1d6ef,"MATHEMATICAL ITALIC CAPITAL XI"));
        data.insert(std::make_pair(0x1d6f0,"MATHEMATICAL ITALIC CAPITAL OMICRON"));
        data.insert(std::make_pair(0x1d6f1,"MATHEMATICAL ITALIC CAPITAL PI"));
        data.insert(std::make_pair(0x1d6f2,"MATHEMATICAL ITALIC CAPITAL RHO"));
        data.insert(std::make_pair(0x1d6f3,"MATHEMATICAL ITALIC CAPITAL THETA SYMBOL"));
        data.insert(std::make_pair(0x1d6f4,"MATHEMATICAL ITALIC CAPITAL SIGMA"));
        data.insert(std::make_pair(0x1d6f5,"MATHEMATICAL ITALIC CAPITAL TAU"));
        data.insert(std::make_pair(0x1d6f6,"MATHEMATICAL ITALIC CAPITAL UPSILON"));
        data.insert(std::make_pair(0x1d6f7,"MATHEMATICAL ITALIC CAPITAL PHI"));
        data.insert(std::make_pair(0x1d6f8,"MATHEMATICAL ITALIC CAPITAL CHI"));
        data.insert(std::make_pair(0x1d6f9,"MATHEMATICAL ITALIC CAPITAL PSI"));
        data.insert(std::make_pair(0x1d6fa,"MATHEMATICAL ITALIC CAPITAL OMEGA"));
        data.insert(std::make_pair(0x1d6fb,"MATHEMATICAL ITALIC NABLA"));
        data.insert(std::make_pair(0x1d6fc,"MATHEMATICAL ITALIC SMALL ALPHA"));
        data.insert(std::make_pair(0x1d6fd,"MATHEMATICAL ITALIC SMALL BETA"));
        data.insert(std::make_pair(0x1d6fe,"MATHEMATICAL ITALIC SMALL GAMMA"));
        data.insert(std::make_pair(0x1d6ff,"MATHEMATICAL ITALIC SMALL DELTA"));
        data.insert(std::make_pair(0x1d700,"MATHEMATICAL ITALIC SMALL EPSILON"));
        data.insert(std::make_pair(0x1d701,"MATHEMATICAL ITALIC SMALL ZETA"));
        data.insert(std::make_pair(0x1d702,"MATHEMATICAL ITALIC SMALL ETA"));
        data.insert(std::make_pair(0x1d703,"MATHEMATICAL ITALIC SMALL THETA"));
        data.insert(std::make_pair(0x1d704,"MATHEMATICAL ITALIC SMALL IOTA"));
        data.insert(std::make_pair(0x1d705,"MATHEMATICAL ITALIC SMALL KAPPA"));
        data.insert(std::make_pair(0x1d706,"MATHEMATICAL ITALIC SMALL LAMDA"));
        data.insert(std::make_pair(0x1d707,"MATHEMATICAL ITALIC SMALL MU"));
        data.insert(std::make_pair(0x1d708,"MATHEMATICAL ITALIC SMALL NU"));
        data.insert(std::make_pair(0x1d709,"MATHEMATICAL ITALIC SMALL XI"));
        data.insert(std::make_pair(0x1d70a,"MATHEMATICAL ITALIC SMALL OMICRON"));
        data.insert(std::make_pair(0x1d70b,"MATHEMATICAL ITALIC SMALL PI"));
        data.insert(std::make_pair(0x1d70c,"MATHEMATICAL ITALIC SMALL RHO"));
        data.insert(std::make_pair(0x1d70d,"MATHEMATICAL ITALIC SMALL FINAL SIGMA"));
        data.insert(std::make_pair(0x1d70e,"MATHEMATICAL ITALIC SMALL SIGMA"));
        data.insert(std::make_pair(0x1d70f,"MATHEMATICAL ITALIC SMALL TAU"));
        data.insert(std::make_pair(0x1d710,"MATHEMATICAL ITALIC SMALL UPSILON"));
        data.insert(std::make_pair(0x1d711,"MATHEMATICAL ITALIC SMALL PHI"));
        data.insert(std::make_pair(0x1d712,"MATHEMATICAL ITALIC SMALL CHI"));
        data.insert(std::make_pair(0x1d713,"MATHEMATICAL ITALIC SMALL PSI"));
        data.insert(std::make_pair(0x1d714,"MATHEMATICAL ITALIC SMALL OMEGA"));
        data.insert(std::make_pair(0x1d715,"MATHEMATICAL ITALIC PARTIAL DIFFERENTIAL"));
        data.insert(std::make_pair(0x1d716,"MATHEMATICAL ITALIC EPSILON SYMBOL"));
        data.insert(std::make_pair(0x1d717,"MATHEMATICAL ITALIC THETA SYMBOL"));
        data.insert(std::make_pair(0x1d718,"MATHEMATICAL ITALIC KAPPA SYMBOL"));
        data.insert(std::make_pair(0x1d719,"MATHEMATICAL ITALIC PHI SYMBOL"));
        data.insert(std::make_pair(0x1d71a,"MATHEMATICAL ITALIC RHO SYMBOL"));
        data.insert(std::make_pair(0x1d71b,"MATHEMATICAL ITALIC PI SYMBOL"));
        data.insert(std::make_pair(0x1d71c,"MATHEMATICAL BOLD ITALIC CAPITAL ALPHA"));
        data.insert(std::make_pair(0x1d71d,"MATHEMATICAL BOLD ITALIC CAPITAL BETA"));
        data.insert(std::make_pair(0x1d71e,"MATHEMATICAL BOLD ITALIC CAPITAL GAMMA"));
        data.insert(std::make_pair(0x1d71f,"MATHEMATICAL BOLD ITALIC CAPITAL DELTA"));
        data.insert(std::make_pair(0x1d720,"MATHEMATICAL BOLD ITALIC CAPITAL EPSILON"));
        data.insert(std::make_pair(0x1d721,"MATHEMATICAL BOLD ITALIC CAPITAL ZETA"));
        data.insert(std::make_pair(0x1d722,"MATHEMATICAL BOLD ITALIC CAPITAL ETA"));
        data.insert(std::make_pair(0x1d723,"MATHEMATICAL BOLD ITALIC CAPITAL THETA"));
        data.insert(std::make_pair(0x1d724,"MATHEMATICAL BOLD ITALIC CAPITAL IOTA"));
        data.insert(std::make_pair(0x1d725,"MATHEMATICAL BOLD ITALIC CAPITAL KAPPA"));
        data.insert(std::make_pair(0x1d726,"MATHEMATICAL BOLD ITALIC CAPITAL LAMDA"));
        data.insert(std::make_pair(0x1d727,"MATHEMATICAL BOLD ITALIC CAPITAL MU"));
        data.insert(std::make_pair(0x1d728,"MATHEMATICAL BOLD ITALIC CAPITAL NU"));
        data.insert(std::make_pair(0x1d729,"MATHEMATICAL BOLD ITALIC CAPITAL XI"));
        data.insert(std::make_pair(0x1d72a,"MATHEMATICAL BOLD ITALIC CAPITAL OMICRON"));
        data.insert(std::make_pair(0x1d72b,"MATHEMATICAL BOLD ITALIC CAPITAL PI"));
        data.insert(std::make_pair(0x1d72c,"MATHEMATICAL BOLD ITALIC CAPITAL RHO"));
        data.insert(std::make_pair(0x1d72d,"MATHEMATICAL BOLD ITALIC CAPITAL THETA SYMBOL"));
        data.insert(std::make_pair(0x1d72e,"MATHEMATICAL BOLD ITALIC CAPITAL SIGMA"));
        data.insert(std::make_pair(0x1d72f,"MATHEMATICAL BOLD ITALIC CAPITAL TAU"));
        data.insert(std::make_pair(0x1d730,"MATHEMATICAL BOLD ITALIC CAPITAL UPSILON"));
        data.insert(std::make_pair(0x1d731,"MATHEMATICAL BOLD ITALIC CAPITAL PHI"));
        data.insert(std::make_pair(0x1d732,"MATHEMATICAL BOLD ITALIC CAPITAL CHI"));
        data.insert(std::make_pair(0x1d733,"MATHEMATICAL BOLD ITALIC CAPITAL PSI"));
        data.insert(std::make_pair(0x1d734,"MATHEMATICAL BOLD ITALIC CAPITAL OMEGA"));
        data.insert(std::make_pair(0x1d735,"MATHEMATICAL BOLD ITALIC NABLA"));
        data.insert(std::make_pair(0x1d736,"MATHEMATICAL BOLD ITALIC SMALL ALPHA"));
        data.insert(std::make_pair(0x1d737,"MATHEMATICAL BOLD ITALIC SMALL BETA"));
        data.insert(std::make_pair(0x1d738,"MATHEMATICAL BOLD ITALIC SMALL GAMMA"));
        data.insert(std::make_pair(0x1d739,"MATHEMATICAL BOLD ITALIC SMALL DELTA"));
        data.insert(std::make_pair(0x1d73a,"MATHEMATICAL BOLD ITALIC SMALL EPSILON"));
        data.insert(std::make_pair(0x1d73b,"MATHEMATICAL BOLD ITALIC SMALL ZETA"));
        data.insert(std::make_pair(0x1d73c,"MATHEMATICAL BOLD ITALIC SMALL ETA"));
        data.insert(std::make_pair(0x1d73d,"MATHEMATICAL BOLD ITALIC SMALL THETA"));
        data.insert(std::make_pair(0x1d73e,"MATHEMATICAL BOLD ITALIC SMALL IOTA"));
        data.insert(std::make_pair(0x1d73f,"MATHEMATICAL BOLD ITALIC SMALL KAPPA"));
        data.insert(std::make_pair(0x1d740,"MATHEMATICAL BOLD ITALIC SMALL LAMDA"));
        data.insert(std::make_pair(0x1d741,"MATHEMATICAL BOLD ITALIC SMALL MU"));
        data.insert(std::make_pair(0x1d742,"MATHEMATICAL BOLD ITALIC SMALL NU"));
        data.insert(std::make_pair(0x1d743,"MATHEMATICAL BOLD ITALIC SMALL XI"));
        data.insert(std::make_pair(0x1d744,"MATHEMATICAL BOLD ITALIC SMALL OMICRON"));
        data.insert(std::make_pair(0x1d745,"MATHEMATICAL BOLD ITALIC SMALL PI"));
        data.insert(std::make_pair(0x1d746,"MATHEMATICAL BOLD ITALIC SMALL RHO"));
        data.insert(std::make_pair(0x1d747,"MATHEMATICAL BOLD ITALIC SMALL FINAL SIGMA"));
        data.insert(std::make_pair(0x1d748,"MATHEMATICAL BOLD ITALIC SMALL SIGMA"));
        data.insert(std::make_pair(0x1d749,"MATHEMATICAL BOLD ITALIC SMALL TAU"));
        data.insert(std::make_pair(0x1d74a,"MATHEMATICAL BOLD ITALIC SMALL UPSILON"));
        data.insert(std::make_pair(0x1d74b,"MATHEMATICAL BOLD ITALIC SMALL PHI"));
        data.insert(std::make_pair(0x1d74c,"MATHEMATICAL BOLD ITALIC SMALL CHI"));
        data.insert(std::make_pair(0x1d74d,"MATHEMATICAL BOLD ITALIC SMALL PSI"));
        data.insert(std::make_pair(0x1d74e,"MATHEMATICAL BOLD ITALIC SMALL OMEGA"));
        data.insert(std::make_pair(0x1d74f,"MATHEMATICAL BOLD ITALIC PARTIAL DIFFERENTIAL"));
        data.insert(std::make_pair(0x1d750,"MATHEMATICAL BOLD ITALIC EPSILON SYMBOL"));
        data.insert(std::make_pair(0x1d751,"MATHEMATICAL BOLD ITALIC THETA SYMBOL"));
        data.insert(std::make_pair(0x1d752,"MATHEMATICAL BOLD ITALIC KAPPA SYMBOL"));
        data.insert(std::make_pair(0x1d753,"MATHEMATICAL BOLD ITALIC PHI SYMBOL"));
        data.insert(std::make_pair(0x1d754,"MATHEMATICAL BOLD ITALIC RHO SYMBOL"));
        data.insert(std::make_pair(0x1d755,"MATHEMATICAL BOLD ITALIC PI SYMBOL"));
        data.insert(std::make_pair(0x1d756,"MATHEMATICAL SANS-SERIF BOLD CAPITAL ALPHA"));
        data.insert(std::make_pair(0x1d757,"MATHEMATICAL SANS-SERIF BOLD CAPITAL BETA"));
        data.insert(std::make_pair(0x1d758,"MATHEMATICAL SANS-SERIF BOLD CAPITAL GAMMA"));
        data.insert(std::make_pair(0x1d759,"MATHEMATICAL SANS-SERIF BOLD CAPITAL DELTA"));
        data.insert(std::make_pair(0x1d75a,"MATHEMATICAL SANS-SERIF BOLD CAPITAL EPSILON"));
        data.insert(std::make_pair(0x1d75b,"MATHEMATICAL SANS-SERIF BOLD CAPITAL ZETA"));
        data.insert(std::make_pair(0x1d75c,"MATHEMATICAL SANS-SERIF BOLD CAPITAL ETA"));
        data.insert(std::make_pair(0x1d75d,"MATHEMATICAL SANS-SERIF BOLD CAPITAL THETA"));
        data.insert(std::make_pair(0x1d75e,"MATHEMATICAL SANS-SERIF BOLD CAPITAL IOTA"));
        data.insert(std::make_pair(0x1d75f,"MATHEMATICAL SANS-SERIF BOLD CAPITAL KAPPA"));
        data.insert(std::make_pair(0x1d760,"MATHEMATICAL SANS-SERIF BOLD CAPITAL LAMDA"));
        data.insert(std::make_pair(0x1d761,"MATHEMATICAL SANS-SERIF BOLD CAPITAL MU"));
        data.insert(std::make_pair(0x1d762,"MATHEMATICAL SANS-SERIF BOLD CAPITAL NU"));
        data.insert(std::make_pair(0x1d763,"MATHEMATICAL SANS-SERIF BOLD CAPITAL XI"));
        data.insert(std::make_pair(0x1d764,"MATHEMATICAL SANS-SERIF BOLD CAPITAL OMICRON"));
        data.insert(std::make_pair(0x1d765,"MATHEMATICAL SANS-SERIF BOLD CAPITAL PI"));
        data.insert(std::make_pair(0x1d766,"MATHEMATICAL SANS-SERIF BOLD CAPITAL RHO"));
        data.insert(std::make_pair(0x1d767,"MATHEMATICAL SANS-SERIF BOLD CAPITAL THETA SYMBOL"));
        data.insert(std::make_pair(0x1d768,"MATHEMATICAL SANS-SERIF BOLD CAPITAL SIGMA"));
        data.insert(std::make_pair(0x1d769,"MATHEMATICAL SANS-SERIF BOLD CAPITAL TAU"));
        data.insert(std::make_pair(0x1d76a,"MATHEMATICAL SANS-SERIF BOLD CAPITAL UPSILON"));
        data.insert(std::make_pair(0x1d76b,"MATHEMATICAL SANS-SERIF BOLD CAPITAL PHI"));
        data.insert(std::make_pair(0x1d76c,"MATHEMATICAL SANS-SERIF BOLD CAPITAL CHI"));
        data.insert(std::make_pair(0x1d76d,"MATHEMATICAL SANS-SERIF BOLD CAPITAL PSI"));
        data.insert(std::make_pair(0x1d76e,"MATHEMATICAL SANS-SERIF BOLD CAPITAL OMEGA"));
        data.insert(std::make_pair(0x1d76f,"MATHEMATICAL SANS-SERIF BOLD NABLA"));
        data.insert(std::make_pair(0x1d770,"MATHEMATICAL SANS-SERIF BOLD SMALL ALPHA"));
        data.insert(std::make_pair(0x1d771,"MATHEMATICAL SANS-SERIF BOLD SMALL BETA"));
        data.insert(std::make_pair(0x1d772,"MATHEMATICAL SANS-SERIF BOLD SMALL GAMMA"));
        data.insert(std::make_pair(0x1d773,"MATHEMATICAL SANS-SERIF BOLD SMALL DELTA"));
        data.insert(std::make_pair(0x1d774,"MATHEMATICAL SANS-SERIF BOLD SMALL EPSILON"));
        data.insert(std::make_pair(0x1d775,"MATHEMATICAL SANS-SERIF BOLD SMALL ZETA"));
        data.insert(std::make_pair(0x1d776,"MATHEMATICAL SANS-SERIF BOLD SMALL ETA"));
        data.insert(std::make_pair(0x1d777,"MATHEMATICAL SANS-SERIF BOLD SMALL THETA"));
        data.insert(std::make_pair(0x1d778,"MATHEMATICAL SANS-SERIF BOLD SMALL IOTA"));
        data.insert(std::make_pair(0x1d779,"MATHEMATICAL SANS-SERIF BOLD SMALL KAPPA"));
        data.insert(std::make_pair(0x1d77a,"MATHEMATICAL SANS-SERIF BOLD SMALL LAMDA"));
        data.insert(std::make_pair(0x1d77b,"MATHEMATICAL SANS-SERIF BOLD SMALL MU"));
        data.insert(std::make_pair(0x1d77c,"MATHEMATICAL SANS-SERIF BOLD SMALL NU"));
        data.insert(std::make_pair(0x1d77d,"MATHEMATICAL SANS-SERIF BOLD SMALL XI"));
        data.insert(std::make_pair(0x1d77e,"MATHEMATICAL SANS-SERIF BOLD SMALL OMICRON"));
        data.insert(std::make_pair(0x1d77f,"MATHEMATICAL SANS-SERIF BOLD SMALL PI"));
        data.insert(std::make_pair(0x1d780,"MATHEMATICAL SANS-SERIF BOLD SMALL RHO"));
        data.insert(std::make_pair(0x1d781,"MATHEMATICAL SANS-SERIF BOLD SMALL FINAL SIGMA"));
        data.insert(std::make_pair(0x1d782,"MATHEMATICAL SANS-SERIF BOLD SMALL SIGMA"));
        data.insert(std::make_pair(0x1d783,"MATHEMATICAL SANS-SERIF BOLD SMALL TAU"));
        data.insert(std::make_pair(0x1d784,"MATHEMATICAL SANS-SERIF BOLD SMALL UPSILON"));
        data.insert(std::make_pair(0x1d785,"MATHEMATICAL SANS-SERIF BOLD SMALL PHI"));
        data.insert(std::make_pair(0x1d786,"MATHEMATICAL SANS-SERIF BOLD SMALL CHI"));
        data.insert(std::make_pair(0x1d787,"MATHEMATICAL SANS-SERIF BOLD SMALL PSI"));
        data.insert(std::make_pair(0x1d788,"MATHEMATICAL SANS-SERIF BOLD SMALL OMEGA"));
        data.insert(std::make_pair(0x1d789,"MATHEMATICAL SANS-SERIF BOLD PARTIAL DIFFERENTIAL"));
        data.insert(std::make_pair(0x1d78a,"MATHEMATICAL SANS-SERIF BOLD EPSILON SYMBOL"));
        data.insert(std::make_pair(0x1d78b,"MATHEMATICAL SANS-SERIF BOLD THETA SYMBOL"));
        data.insert(std::make_pair(0x1d78c,"MATHEMATICAL SANS-SERIF BOLD KAPPA SYMBOL"));
        data.insert(std::make_pair(0x1d78d,"MATHEMATICAL SANS-SERIF BOLD PHI SYMBOL"));
        data.insert(std::make_pair(0x1d78e,"MATHEMATICAL SANS-SERIF BOLD RHO SYMBOL"));
        data.insert(std::make_pair(0x1d78f,"MATHEMATICAL SANS-SERIF BOLD PI SYMBOL"));
        data.insert(std::make_pair(0x1d790,"MATHEMATICAL SANS-SERIF BOLD ITALIC CAPITAL ALPHA"));
        data.insert(std::make_pair(0x1d791,"MATHEMATICAL SANS-SERIF BOLD ITALIC CAPITAL BETA"));
        data.insert(std::make_pair(0x1d792,"MATHEMATICAL SANS-SERIF BOLD ITALIC CAPITAL GAMMA"));
        data.insert(std::make_pair(0x1d793,"MATHEMATICAL SANS-SERIF BOLD ITALIC CAPITAL DELTA"));
        data.insert(std::make_pair(0x1d794,"MATHEMATICAL SANS-SERIF BOLD ITALIC CAPITAL EPSILON"));
        data.insert(std::make_pair(0x1d795,"MATHEMATICAL SANS-SERIF BOLD ITALIC CAPITAL ZETA"));
        data.insert(std::make_pair(0x1d796,"MATHEMATICAL SANS-SERIF BOLD ITALIC CAPITAL ETA"));
        data.insert(std::make_pair(0x1d797,"MATHEMATICAL SANS-SERIF BOLD ITALIC CAPITAL THETA"));
        data.insert(std::make_pair(0x1d798,"MATHEMATICAL SANS-SERIF BOLD ITALIC CAPITAL IOTA"));
        data.insert(std::make_pair(0x1d799,"MATHEMATICAL SANS-SERIF BOLD ITALIC CAPITAL KAPPA"));
        data.insert(std::make_pair(0x1d79a,"MATHEMATICAL SANS-SERIF BOLD ITALIC CAPITAL LAMDA"));
        data.insert(std::make_pair(0x1d79b,"MATHEMATICAL SANS-SERIF BOLD ITALIC CAPITAL MU"));
        data.insert(std::make_pair(0x1d79c,"MATHEMATICAL SANS-SERIF BOLD ITALIC CAPITAL NU"));
        data.insert(std::make_pair(0x1d79d,"MATHEMATICAL SANS-SERIF BOLD ITALIC CAPITAL XI"));
        data.insert(std::make_pair(0x1d79e,"MATHEMATICAL SANS-SERIF BOLD ITALIC CAPITAL OMICRON"));
        data.insert(std::make_pair(0x1d79f,"MATHEMATICAL SANS-SERIF BOLD ITALIC CAPITAL PI"));
        data.insert(std::make_pair(0x1d7a0,"MATHEMATICAL SANS-SERIF BOLD ITALIC CAPITAL RHO"));
        data.insert(std::make_pair(0x1d7a1,"MATHEMATICAL SANS-SERIF BOLD ITALIC CAPITAL THETA SYMBOL"));
        data.insert(std::make_pair(0x1d7a2,"MATHEMATICAL SANS-SERIF BOLD ITALIC CAPITAL SIGMA"));
        data.insert(std::make_pair(0x1d7a3,"MATHEMATICAL SANS-SERIF BOLD ITALIC CAPITAL TAU"));
        data.insert(std::make_pair(0x1d7a4,"MATHEMATICAL SANS-SERIF BOLD ITALIC CAPITAL UPSILON"));
        data.insert(std::make_pair(0x1d7a5,"MATHEMATICAL SANS-SERIF BOLD ITALIC CAPITAL PHI"));
        data.insert(std::make_pair(0x1d7a6,"MATHEMATICAL SANS-SERIF BOLD ITALIC CAPITAL CHI"));
        data.insert(std::make_pair(0x1d7a7,"MATHEMATICAL SANS-SERIF BOLD ITALIC CAPITAL PSI"));
        data.insert(std::make_pair(0x1d7a8,"MATHEMATICAL SANS-SERIF BOLD ITALIC CAPITAL OMEGA"));
        data.insert(std::make_pair(0x1d7a9,"MATHEMATICAL SANS-SERIF BOLD ITALIC NABLA"));
        data.insert(std::make_pair(0x1d7aa,"MATHEMATICAL SANS-SERIF BOLD ITALIC SMALL ALPHA"));
        data.insert(std::make_pair(0x1d7ab,"MATHEMATICAL SANS-SERIF BOLD ITALIC SMALL BETA"));
        data.insert(std::make_pair(0x1d7ac,"MATHEMATICAL SANS-SERIF BOLD ITALIC SMALL GAMMA"));
        data.insert(std::make_pair(0x1d7ad,"MATHEMATICAL SANS-SERIF BOLD ITALIC SMALL DELTA"));
        data.insert(std::make_pair(0x1d7ae,"MATHEMATICAL SANS-SERIF BOLD ITALIC SMALL EPSILON"));
        data.insert(std::make_pair(0x1d7af,"MATHEMATICAL SANS-SERIF BOLD ITALIC SMALL ZETA"));
        data.insert(std::make_pair(0x1d7b0,"MATHEMATICAL SANS-SERIF BOLD ITALIC SMALL ETA"));
        data.insert(std::make_pair(0x1d7b1,"MATHEMATICAL SANS-SERIF BOLD ITALIC SMALL THETA"));
        data.insert(std::make_pair(0x1d7b2,"MATHEMATICAL SANS-SERIF BOLD ITALIC SMALL IOTA"));
        data.insert(std::make_pair(0x1d7b3,"MATHEMATICAL SANS-SERIF BOLD ITALIC SMALL KAPPA"));
        data.insert(std::make_pair(0x1d7b4,"MATHEMATICAL SANS-SERIF BOLD ITALIC SMALL LAMDA"));
        data.insert(std::make_pair(0x1d7b5,"MATHEMATICAL SANS-SERIF BOLD ITALIC SMALL MU"));
        data.insert(std::make_pair(0x1d7b6,"MATHEMATICAL SANS-SERIF BOLD ITALIC SMALL NU"));
        data.insert(std::make_pair(0x1d7b7,"MATHEMATICAL SANS-SERIF BOLD ITALIC SMALL XI"));
        data.insert(std::make_pair(0x1d7b8,"MATHEMATICAL SANS-SERIF BOLD ITALIC SMALL OMICRON"));
        data.insert(std::make_pair(0x1d7b9,"MATHEMATICAL SANS-SERIF BOLD ITALIC SMALL PI"));
        data.insert(std::make_pair(0x1d7ba,"MATHEMATICAL SANS-SERIF BOLD ITALIC SMALL RHO"));
        data.insert(std::make_pair(0x1d7bb,"MATHEMATICAL SANS-SERIF BOLD ITALIC SMALL FINAL SIGMA"));
        data.insert(std::make_pair(0x1d7bc,"MATHEMATICAL SANS-SERIF BOLD ITALIC SMALL SIGMA"));
        data.insert(std::make_pair(0x1d7bd,"MATHEMATICAL SANS-SERIF BOLD ITALIC SMALL TAU"));
        data.insert(std::make_pair(0x1d7be,"MATHEMATICAL SANS-SERIF BOLD ITALIC SMALL UPSILON"));
        data.insert(std::make_pair(0x1d7bf,"MATHEMATICAL SANS-SERIF BOLD ITALIC SMALL PHI"));
        data.insert(std::make_pair(0x1d7c0,"MATHEMATICAL SANS-SERIF BOLD ITALIC SMALL CHI"));
        data.insert(std::make_pair(0x1d7c1,"MATHEMATICAL SANS-SERIF BOLD ITALIC SMALL PSI"));
        data.insert(std::make_pair(0x1d7c2,"MATHEMATICAL SANS-SERIF BOLD ITALIC SMALL OMEGA"));
        data.insert(std::make_pair(0x1d7c3,"MATHEMATICAL SANS-SERIF BOLD ITALIC PARTIAL DIFFERENTIAL"));
        data.insert(std::make_pair(0x1d7c4,"MATHEMATICAL SANS-SERIF BOLD ITALIC EPSILON SYMBOL"));
        data.insert(std::make_pair(0x1d7c5,"MATHEMATICAL SANS-SERIF BOLD ITALIC THETA SYMBOL"));
        data.insert(std::make_pair(0x1d7c6,"MATHEMATICAL SANS-SERIF BOLD ITALIC KAPPA SYMBOL"));
        data.insert(std::make_pair(0x1d7c7,"MATHEMATICAL SANS-SERIF BOLD ITALIC PHI SYMBOL"));
        data.insert(std::make_pair(0x1d7c8,"MATHEMATICAL SANS-SERIF BOLD ITALIC RHO SYMBOL"));
        data.insert(std::make_pair(0x1d7c9,"MATHEMATICAL SANS-SERIF BOLD ITALIC PI SYMBOL"));
        data.insert(std::make_pair(0x1d7ca,"MATHEMATICAL BOLD CAPITAL DIGAMMA"));
        data.insert(std::make_pair(0x1d7cb,"MATHEMATICAL BOLD SMALL DIGAMMA"));
        data.insert(std::make_pair(0x1d7ce,"MATHEMATICAL BOLD DIGIT ZERO"));
        data.insert(std::make_pair(0x1d7cf,"MATHEMATICAL BOLD DIGIT ONE"));
        data.insert(std::make_pair(0x1d7d0,"MATHEMATICAL BOLD DIGIT TWO"));
        data.insert(std::make_pair(0x1d7d1,"MATHEMATICAL BOLD DIGIT THREE"));
        data.insert(std::make_pair(0x1d7d2,"MATHEMATICAL BOLD DIGIT FOUR"));
        data.insert(std::make_pair(0x1d7d3,"MATHEMATICAL BOLD DIGIT FIVE"));
        data.insert(std::make_pair(0x1d7d4,"MATHEMATICAL BOLD DIGIT SIX"));
        data.insert(std::make_pair(0x1d7d5,"MATHEMATICAL BOLD DIGIT SEVEN"));
        data.insert(std::make_pair(0x1d7d6,"MATHEMATICAL BOLD DIGIT EIGHT"));
        data.insert(std::make_pair(0x1d7d7,"MATHEMATICAL BOLD DIGIT NINE"));
        data.insert(std::make_pair(0x1d7d8,"MATHEMATICAL DOUBLE-STRUCK DIGIT ZERO"));
        data.insert(std::make_pair(0x1d7d9,"MATHEMATICAL DOUBLE-STRUCK DIGIT ONE"));
        data.insert(std::make_pair(0x1d7da,"MATHEMATICAL DOUBLE-STRUCK DIGIT TWO"));
        data.insert(std::make_pair(0x1d7db,"MATHEMATICAL DOUBLE-STRUCK DIGIT THREE"));
        data.insert(std::make_pair(0x1d7dc,"MATHEMATICAL DOUBLE-STRUCK DIGIT FOUR"));
        data.insert(std::make_pair(0x1d7dd,"MATHEMATICAL DOUBLE-STRUCK DIGIT FIVE"));
        data.insert(std::make_pair(0x1d7de,"MATHEMATICAL DOUBLE-STRUCK DIGIT SIX"));
        data.insert(std::make_pair(0x1d7df,"MATHEMATICAL DOUBLE-STRUCK DIGIT SEVEN"));
        data.insert(std::make_pair(0x1d7e0,"MATHEMATICAL DOUBLE-STRUCK DIGIT EIGHT"));
        data.insert(std::make_pair(0x1d7e1,"MATHEMATICAL DOUBLE-STRUCK DIGIT NINE"));
        data.insert(std::make_pair(0x1d7e2,"MATHEMATICAL SANS-SERIF DIGIT ZERO"));
        data.insert(std::make_pair(0x1d7e3,"MATHEMATICAL SANS-SERIF DIGIT ONE"));
        data.insert(std::make_pair(0x1d7e4,"MATHEMATICAL SANS-SERIF DIGIT TWO"));
        data.insert(std::make_pair(0x1d7e5,"MATHEMATICAL SANS-SERIF DIGIT THREE"));
        data.insert(std::make_pair(0x1d7e6,"MATHEMATICAL SANS-SERIF DIGIT FOUR"));
        data.insert(std::make_pair(0x1d7e7,"MATHEMATICAL SANS-SERIF DIGIT FIVE"));
        data.insert(std::make_pair(0x1d7e8,"MATHEMATICAL SANS-SERIF DIGIT SIX"));
        data.insert(std::make_pair(0x1d7e9,"MATHEMATICAL SANS-SERIF DIGIT SEVEN"));
        data.insert(std::make_pair(0x1d7ea,"MATHEMATICAL SANS-SERIF DIGIT EIGHT"));
        data.insert(std::make_pair(0x1d7eb,"MATHEMATICAL SANS-SERIF DIGIT NINE"));
        data.insert(std::make_pair(0x1d7ec,"MATHEMATICAL SANS-SERIF BOLD DIGIT ZERO"));
        data.insert(std::make_pair(0x1d7ed,"MATHEMATICAL SANS-SERIF BOLD DIGIT ONE"));
        data.insert(std::make_pair(0x1d7ee,"MATHEMATICAL SANS-SERIF BOLD DIGIT TWO"));
        data.insert(std::make_pair(0x1d7ef,"MATHEMATICAL SANS-SERIF BOLD DIGIT THREE"));
        data.insert(std::make_pair(0x1d7f0,"MATHEMATICAL SANS-SERIF BOLD DIGIT FOUR"));
        data.insert(std::make_pair(0x1d7f1,"MATHEMATICAL SANS-SERIF BOLD DIGIT FIVE"));
        data.insert(std::make_pair(0x1d7f2,"MATHEMATICAL SANS-SERIF BOLD DIGIT SIX"));
        data.insert(std::make_pair(0x1d7f3,"MATHEMATICAL SANS-SERIF BOLD DIGIT SEVEN"));
        data.insert(std::make_pair(0x1d7f4,"MATHEMATICAL SANS-SERIF BOLD DIGIT EIGHT"));
        data.insert(std::make_pair(0x1d7f5,"MATHEMATICAL SANS-SERIF BOLD DIGIT NINE"));
        data.insert(std::make_pair(0x1d7f6,"MATHEMATICAL MONOSPACE DIGIT ZERO"));
        data.insert(std::make_pair(0x1d7f7,"MATHEMATICAL MONOSPACE DIGIT ONE"));
        data.insert(std::make_pair(0x1d7f8,"MATHEMATICAL MONOSPACE DIGIT TWO"));
        data.insert(std::make_pair(0x1d7f9,"MATHEMATICAL MONOSPACE DIGIT THREE"));
        data.insert(std::make_pair(0x1d7fa,"MATHEMATICAL MONOSPACE DIGIT FOUR"));
        data.insert(std::make_pair(0x1d7fb,"MATHEMATICAL MONOSPACE DIGIT FIVE"));
        data.insert(std::make_pair(0x1d7fc,"MATHEMATICAL MONOSPACE DIGIT SIX"));
        data.insert(std::make_pair(0x1d7fd,"MATHEMATICAL MONOSPACE DIGIT SEVEN"));
        data.insert(std::make_pair(0x1d7fe,"MATHEMATICAL MONOSPACE DIGIT EIGHT"));
        data.insert(std::make_pair(0x1d7ff,"MATHEMATICAL MONOSPACE DIGIT NINE"));
        data.insert(std::make_pair(0x1d800,"SIGNWRITING HAND-FIST INDEX"));
        data.insert(std::make_pair(0x1d801,"SIGNWRITING HAND-CIRCLE INDEX"));
        data.insert(std::make_pair(0x1d802,"SIGNWRITING HAND-CUP INDEX"));
        data.insert(std::make_pair(0x1d803,"SIGNWRITING HAND-OVAL INDEX"));
        data.insert(std::make_pair(0x1d804,"SIGNWRITING HAND-HINGE INDEX"));
        data.insert(std::make_pair(0x1d805,"SIGNWRITING HAND-ANGLE INDEX"));
        data.insert(std::make_pair(0x1d806,"SIGNWRITING HAND-FIST INDEX BENT"));
        data.insert(std::make_pair(0x1d807,"SIGNWRITING HAND-CIRCLE INDEX BENT"));
        data.insert(std::make_pair(0x1d808,"SIGNWRITING HAND-FIST THUMB UNDER INDEX BENT"));
        data.insert(std::make_pair(0x1d809,"SIGNWRITING HAND-FIST INDEX RAISED KNUCKLE"));
        data.insert(std::make_pair(0x1d80a,"SIGNWRITING HAND-FIST INDEX CUPPED"));
        data.insert(std::make_pair(0x1d80b,"SIGNWRITING HAND-FIST INDEX HINGED"));
        data.insert(std::make_pair(0x1d80c,"SIGNWRITING HAND-FIST INDEX HINGED LOW"));
        data.insert(std::make_pair(0x1d80d,"SIGNWRITING HAND-CIRCLE INDEX HINGE"));
        data.insert(std::make_pair(0x1d80e,"SIGNWRITING HAND-FIST INDEX MIDDLE"));
        data.insert(std::make_pair(0x1d80f,"SIGNWRITING HAND-CIRCLE INDEX MIDDLE"));
        data.insert(std::make_pair(0x1d810,"SIGNWRITING HAND-FIST INDEX MIDDLE BENT"));
        data.insert(std::make_pair(0x1d811,"SIGNWRITING HAND-FIST INDEX MIDDLE RAISED KNUCKLES"));
        data.insert(std::make_pair(0x1d812,"SIGNWRITING HAND-FIST INDEX MIDDLE HINGED"));
        data.insert(std::make_pair(0x1d813,"SIGNWRITING HAND-FIST INDEX UP MIDDLE HINGED"));
        data.insert(std::make_pair(0x1d814,"SIGNWRITING HAND-FIST INDEX HINGED MIDDLE UP"));
        data.insert(std::make_pair(0x1d815,"SIGNWRITING HAND-FIST INDEX MIDDLE CONJOINED"));
        data.insert(std::make_pair(0x1d816,"SIGNWRITING HAND-FIST INDEX MIDDLE CONJOINED INDEX BENT"));
        data.insert(std::make_pair(0x1d817,"SIGNWRITING HAND-FIST INDEX MIDDLE CONJOINED MIDDLE BENT"));
        data.insert(std::make_pair(0x1d818,"SIGNWRITING HAND-FIST INDEX MIDDLE CONJOINED CUPPED"));
        data.insert(std::make_pair(0x1d819,"SIGNWRITING HAND-FIST INDEX MIDDLE CONJOINED HINGED"));
        data.insert(std::make_pair(0x1d81a,"SIGNWRITING HAND-FIST INDEX MIDDLE CROSSED"));
        data.insert(std::make_pair(0x1d81b,"SIGNWRITING HAND-CIRCLE INDEX MIDDLE CROSSED"));
        data.insert(std::make_pair(0x1d81c,"SIGNWRITING HAND-FIST MIDDLE BENT OVER INDEX"));
        data.insert(std::make_pair(0x1d81d,"SIGNWRITING HAND-FIST INDEX BENT OVER MIDDLE"));
        data.insert(std::make_pair(0x1d81e,"SIGNWRITING HAND-FIST INDEX MIDDLE THUMB"));
        data.insert(std::make_pair(0x1d81f,"SIGNWRITING HAND-CIRCLE INDEX MIDDLE THUMB"));
        data.insert(std::make_pair(0x1d820,"SIGNWRITING HAND-FIST INDEX MIDDLE STRAIGHT THUMB BENT"));
        data.insert(std::make_pair(0x1d821,"SIGNWRITING HAND-FIST INDEX MIDDLE BENT THUMB STRAIGHT"));
        data.insert(std::make_pair(0x1d822,"SIGNWRITING HAND-FIST INDEX MIDDLE THUMB BENT"));
        data.insert(std::make_pair(0x1d823,"SIGNWRITING HAND-FIST INDEX MIDDLE HINGED SPREAD THUMB SIDE"));
        data.insert(std::make_pair(0x1d824,"SIGNWRITING HAND-FIST INDEX UP MIDDLE HINGED THUMB SIDE"));
        data.insert(std::make_pair(0x1d825,"SIGNWRITING HAND-FIST INDEX UP MIDDLE HINGED THUMB CONJOINED"));
        data.insert(std::make_pair(0x1d826,"SIGNWRITING HAND-FIST INDEX HINGED MIDDLE UP THUMB SIDE"));
        data.insert(std::make_pair(0x1d827,"SIGNWRITING HAND-FIST INDEX MIDDLE UP SPREAD THUMB FORWARD"));
        data.insert(std::make_pair(0x1d828,"SIGNWRITING HAND-FIST INDEX MIDDLE THUMB CUPPED"));
        data.insert(std::make_pair(0x1d829,"SIGNWRITING HAND-FIST INDEX MIDDLE THUMB CIRCLED"));
        data.insert(std::make_pair(0x1d82a,"SIGNWRITING HAND-FIST INDEX MIDDLE THUMB HOOKED"));
        data.insert(std::make_pair(0x1d82b,"SIGNWRITING HAND-FIST INDEX MIDDLE THUMB HINGED"));
        data.insert(std::make_pair(0x1d82c,"SIGNWRITING HAND-FIST THUMB BETWEEN INDEX MIDDLE STRAIGHT"));
        data.insert(std::make_pair(0x1d82d,"SIGNWRITING HAND-FIST INDEX MIDDLE CONJOINED THUMB SIDE"));
        data.insert(std::make_pair(0x1d82e,"SIGNWRITING HAND-FIST INDEX MIDDLE CONJOINED THUMB SIDE CONJOINED"));
        data.insert(std::make_pair(0x1d82f,"SIGNWRITING HAND-FIST INDEX MIDDLE CONJOINED THUMB SIDE BENT"));
        data.insert(std::make_pair(0x1d830,"SIGNWRITING HAND-FIST MIDDLE THUMB HOOKED INDEX UP"));
        data.insert(std::make_pair(0x1d831,"SIGNWRITING HAND-FIST INDEX THUMB HOOKED MIDDLE UP"));
        data.insert(std::make_pair(0x1d832,"SIGNWRITING HAND-FIST INDEX MIDDLE CONJOINED HINGED THUMB SIDE"));
        data.insert(std::make_pair(0x1d833,"SIGNWRITING HAND-FIST INDEX MIDDLE CROSSED THUMB SIDE"));
        data.insert(std::make_pair(0x1d834,"SIGNWRITING HAND-FIST INDEX MIDDLE CONJOINED THUMB FORWARD"));
        data.insert(std::make_pair(0x1d835,"SIGNWRITING HAND-FIST INDEX MIDDLE CONJOINED CUPPED THUMB FORWARD"));
        data.insert(std::make_pair(0x1d836,"SIGNWRITING HAND-FIST MIDDLE THUMB CUPPED INDEX UP"));
        data.insert(std::make_pair(0x1d837,"SIGNWRITING HAND-FIST INDEX THUMB CUPPED MIDDLE UP"));
        data.insert(std::make_pair(0x1d838,"SIGNWRITING HAND-FIST MIDDLE THUMB CIRCLED INDEX UP"));
        data.insert(std::make_pair(0x1d839,"SIGNWRITING HAND-FIST MIDDLE THUMB CIRCLED INDEX HINGED"));
        data.insert(std::make_pair(0x1d83a,"SIGNWRITING HAND-FIST INDEX THUMB ANGLED OUT MIDDLE UP"));
        data.insert(std::make_pair(0x1d83b,"SIGNWRITING HAND-FIST INDEX THUMB ANGLED IN MIDDLE UP"));
        data.insert(std::make_pair(0x1d83c,"SIGNWRITING HAND-FIST INDEX THUMB CIRCLED MIDDLE UP"));
        data.insert(std::make_pair(0x1d83d,"SIGNWRITING HAND-FIST INDEX MIDDLE THUMB CONJOINED HINGED"));
        data.insert(std::make_pair(0x1d83e,"SIGNWRITING HAND-FIST INDEX MIDDLE THUMB ANGLED OUT"));
        data.insert(std::make_pair(0x1d83f,"SIGNWRITING HAND-FIST INDEX MIDDLE THUMB ANGLED"));
        data.insert(std::make_pair(0x1d840,"SIGNWRITING HAND-FIST MIDDLE THUMB ANGLED OUT INDEX UP"));
        data.insert(std::make_pair(0x1d841,"SIGNWRITING HAND-FIST MIDDLE THUMB ANGLED OUT INDEX CROSSED"));
        data.insert(std::make_pair(0x1d842,"SIGNWRITING HAND-FIST MIDDLE THUMB ANGLED INDEX UP"));
        data.insert(std::make_pair(0x1d843,"SIGNWRITING HAND-FIST INDEX THUMB HOOKED MIDDLE HINGED"));
        data.insert(std::make_pair(0x1d844,"SIGNWRITING HAND-FLAT FOUR FINGERS"));
        data.insert(std::make_pair(0x1d845,"SIGNWRITING HAND-FLAT FOUR FINGERS BENT"));
        data.insert(std::make_pair(0x1d846,"SIGNWRITING HAND-FLAT FOUR FINGERS HINGED"));
        data.insert(std::make_pair(0x1d847,"SIGNWRITING HAND-FLAT FOUR FINGERS CONJOINED"));
        data.insert(std::make_pair(0x1d848,"SIGNWRITING HAND-FLAT FOUR FINGERS CONJOINED SPLIT"));
        data.insert(std::make_pair(0x1d849,"SIGNWRITING HAND-CLAW FOUR FINGERS CONJOINED"));
        data.insert(std::make_pair(0x1d84a,"SIGNWRITING HAND-FIST FOUR FINGERS CONJOINED BENT"));
        data.insert(std::make_pair(0x1d84b,"SIGNWRITING HAND-HINGE FOUR FINGERS CONJOINED"));
        data.insert(std::make_pair(0x1d84c,"SIGNWRITING HAND-FLAT FIVE FINGERS SPREAD"));
        data.insert(std::make_pair(0x1d84d,"SIGNWRITING HAND-FLAT HEEL FIVE FINGERS SPREAD"));
        data.insert(std::make_pair(0x1d84e,"SIGNWRITING HAND-FLAT FIVE FINGERS SPREAD FOUR BENT"));
        data.insert(std::make_pair(0x1d84f,"SIGNWRITING HAND-FLAT HEEL FIVE FINGERS SPREAD FOUR BENT"));
        data.insert(std::make_pair(0x1d850,"SIGNWRITING HAND-FLAT FIVE FINGERS SPREAD BENT"));
        data.insert(std::make_pair(0x1d851,"SIGNWRITING HAND-FLAT HEEL FIVE FINGERS SPREAD BENT"));
        data.insert(std::make_pair(0x1d852,"SIGNWRITING HAND-FLAT FIVE FINGERS SPREAD THUMB FORWARD"));
        data.insert(std::make_pair(0x1d853,"SIGNWRITING HAND-CUP FIVE FINGERS SPREAD"));
        data.insert(std::make_pair(0x1d854,"SIGNWRITING HAND-CUP FIVE FINGERS SPREAD OPEN"));
        data.insert(std::make_pair(0x1d855,"SIGNWRITING HAND-HINGE FIVE FINGERS SPREAD OPEN"));
        data.insert(std::make_pair(0x1d856,"SIGNWRITING HAND-OVAL FIVE FINGERS SPREAD"));
        data.insert(std::make_pair(0x1d857,"SIGNWRITING HAND-FLAT FIVE FINGERS SPREAD HINGED"));
        data.insert(std::make_pair(0x1d858,"SIGNWRITING HAND-FLAT FIVE FINGERS SPREAD HINGED THUMB SIDE"));
        data.insert(std::make_pair(0x1d859,"SIGNWRITING HAND-FLAT FIVE FINGERS SPREAD HINGED NO THUMB"));
        data.insert(std::make_pair(0x1d85a,"SIGNWRITING HAND-FLAT"));
        data.insert(std::make_pair(0x1d85b,"SIGNWRITING HAND-FLAT BETWEEN PALM FACINGS"));
        data.insert(std::make_pair(0x1d85c,"SIGNWRITING HAND-FLAT HEEL"));
        data.insert(std::make_pair(0x1d85d,"SIGNWRITING HAND-FLAT THUMB SIDE"));
        data.insert(std::make_pair(0x1d85e,"SIGNWRITING HAND-FLAT HEEL THUMB SIDE"));
        data.insert(std::make_pair(0x1d85f,"SIGNWRITING HAND-FLAT THUMB BENT"));
        data.insert(std::make_pair(0x1d860,"SIGNWRITING HAND-FLAT THUMB FORWARD"));
        data.insert(std::make_pair(0x1d861,"SIGNWRITING HAND-FLAT SPLIT INDEX THUMB SIDE"));
        data.insert(std::make_pair(0x1d862,"SIGNWRITING HAND-FLAT SPLIT CENTRE"));
        data.insert(std::make_pair(0x1d863,"SIGNWRITING HAND-FLAT SPLIT CENTRE THUMB SIDE"));
        data.insert(std::make_pair(0x1d864,"SIGNWRITING HAND-FLAT SPLIT CENTRE THUMB SIDE BENT"));
        data.insert(std::make_pair(0x1d865,"SIGNWRITING HAND-FLAT SPLIT LITTLE"));
        data.insert(std::make_pair(0x1d866,"SIGNWRITING HAND-CLAW"));
        data.insert(std::make_pair(0x1d867,"SIGNWRITING HAND-CLAW THUMB SIDE"));
        data.insert(std::make_pair(0x1d868,"SIGNWRITING HAND-CLAW NO THUMB"));
        data.insert(std::make_pair(0x1d869,"SIGNWRITING HAND-CLAW THUMB FORWARD"));
        data.insert(std::make_pair(0x1d86a,"SIGNWRITING HAND-HOOK CURLICUE"));
        data.insert(std::make_pair(0x1d86b,"SIGNWRITING HAND-HOOK"));
        data.insert(std::make_pair(0x1d86c,"SIGNWRITING HAND-CUP OPEN"));
        data.insert(std::make_pair(0x1d86d,"SIGNWRITING HAND-CUP"));
        data.insert(std::make_pair(0x1d86e,"SIGNWRITING HAND-CUP OPEN THUMB SIDE"));
        data.insert(std::make_pair(0x1d86f,"SIGNWRITING HAND-CUP THUMB SIDE"));
        data.insert(std::make_pair(0x1d870,"SIGNWRITING HAND-CUP OPEN NO THUMB"));
        data.insert(std::make_pair(0x1d871,"SIGNWRITING HAND-CUP NO THUMB"));
        data.insert(std::make_pair(0x1d872,"SIGNWRITING HAND-CUP OPEN THUMB FORWARD"));
        data.insert(std::make_pair(0x1d873,"SIGNWRITING HAND-CUP THUMB FORWARD"));
        data.insert(std::make_pair(0x1d874,"SIGNWRITING HAND-CURLICUE OPEN"));
        data.insert(std::make_pair(0x1d875,"SIGNWRITING HAND-CURLICUE"));
        data.insert(std::make_pair(0x1d876,"SIGNWRITING HAND-CIRCLE"));
        data.insert(std::make_pair(0x1d877,"SIGNWRITING HAND-OVAL"));
        data.insert(std::make_pair(0x1d878,"SIGNWRITING HAND-OVAL THUMB SIDE"));
        data.insert(std::make_pair(0x1d879,"SIGNWRITING HAND-OVAL NO THUMB"));
        data.insert(std::make_pair(0x1d87a,"SIGNWRITING HAND-OVAL THUMB FORWARD"));
        data.insert(std::make_pair(0x1d87b,"SIGNWRITING HAND-HINGE OPEN"));
        data.insert(std::make_pair(0x1d87c,"SIGNWRITING HAND-HINGE OPEN THUMB FORWARD"));
        data.insert(std::make_pair(0x1d87d,"SIGNWRITING HAND-HINGE"));
        data.insert(std::make_pair(0x1d87e,"SIGNWRITING HAND-HINGE SMALL"));
        data.insert(std::make_pair(0x1d87f,"SIGNWRITING HAND-HINGE OPEN THUMB SIDE"));
        data.insert(std::make_pair(0x1d880,"SIGNWRITING HAND-HINGE THUMB SIDE"));
        data.insert(std::make_pair(0x1d881,"SIGNWRITING HAND-HINGE OPEN NO THUMB"));
        data.insert(std::make_pair(0x1d882,"SIGNWRITING HAND-HINGE NO THUMB"));
        data.insert(std::make_pair(0x1d883,"SIGNWRITING HAND-HINGE THUMB SIDE TOUCHING INDEX"));
        data.insert(std::make_pair(0x1d884,"SIGNWRITING HAND-HINGE THUMB BETWEEN MIDDLE RING"));
        data.insert(std::make_pair(0x1d885,"SIGNWRITING HAND-ANGLE"));
        data.insert(std::make_pair(0x1d886,"SIGNWRITING HAND-FIST INDEX MIDDLE RING"));
        data.insert(std::make_pair(0x1d887,"SIGNWRITING HAND-CIRCLE INDEX MIDDLE RING"));
        data.insert(std::make_pair(0x1d888,"SIGNWRITING HAND-HINGE INDEX MIDDLE RING"));
        data.insert(std::make_pair(0x1d889,"SIGNWRITING HAND-ANGLE INDEX MIDDLE RING"));
        data.insert(std::make_pair(0x1d88a,"SIGNWRITING HAND-HINGE LITTLE"));
        data.insert(std::make_pair(0x1d88b,"SIGNWRITING HAND-FIST INDEX MIDDLE RING BENT"));
        data.insert(std::make_pair(0x1d88c,"SIGNWRITING HAND-FIST INDEX MIDDLE RING CONJOINED"));
        data.insert(std::make_pair(0x1d88d,"SIGNWRITING HAND-HINGE INDEX MIDDLE RING CONJOINED"));
        data.insert(std::make_pair(0x1d88e,"SIGNWRITING HAND-FIST LITTLE DOWN"));
        data.insert(std::make_pair(0x1d88f,"SIGNWRITING HAND-FIST LITTLE DOWN RIPPLE STRAIGHT"));
        data.insert(std::make_pair(0x1d890,"SIGNWRITING HAND-FIST LITTLE DOWN RIPPLE CURVED"));
        data.insert(std::make_pair(0x1d891,"SIGNWRITING HAND-FIST LITTLE DOWN OTHERS CIRCLED"));
        data.insert(std::make_pair(0x1d892,"SIGNWRITING HAND-FIST LITTLE UP"));
        data.insert(std::make_pair(0x1d893,"SIGNWRITING HAND-FIST THUMB UNDER LITTLE UP"));
        data.insert(std::make_pair(0x1d894,"SIGNWRITING HAND-CIRCLE LITTLE UP"));
        data.insert(std::make_pair(0x1d895,"SIGNWRITING HAND-OVAL LITTLE UP"));
        data.insert(std::make_pair(0x1d896,"SIGNWRITING HAND-ANGLE LITTLE UP"));
        data.insert(std::make_pair(0x1d897,"SIGNWRITING HAND-FIST LITTLE RAISED KNUCKLE"));
        data.insert(std::make_pair(0x1d898,"SIGNWRITING HAND-FIST LITTLE BENT"));
        data.insert(std::make_pair(0x1d899,"SIGNWRITING HAND-FIST LITTLE TOUCHES THUMB"));
        data.insert(std::make_pair(0x1d89a,"SIGNWRITING HAND-FIST LITTLE THUMB"));
        data.insert(std::make_pair(0x1d89b,"SIGNWRITING HAND-HINGE LITTLE THUMB"));
        data.insert(std::make_pair(0x1d89c,"SIGNWRITING HAND-FIST LITTLE INDEX THUMB"));
        data.insert(std::make_pair(0x1d89d,"SIGNWRITING HAND-HINGE LITTLE INDEX THUMB"));
        data.insert(std::make_pair(0x1d89e,"SIGNWRITING HAND-ANGLE LITTLE INDEX THUMB INDEX THUMB OUT"));
        data.insert(std::make_pair(0x1d89f,"SIGNWRITING HAND-ANGLE LITTLE INDEX THUMB INDEX THUMB"));
        data.insert(std::make_pair(0x1d8a0,"SIGNWRITING HAND-FIST LITTLE INDEX"));
        data.insert(std::make_pair(0x1d8a1,"SIGNWRITING HAND-CIRCLE LITTLE INDEX"));
        data.insert(std::make_pair(0x1d8a2,"SIGNWRITING HAND-HINGE LITTLE INDEX"));
        data.insert(std::make_pair(0x1d8a3,"SIGNWRITING HAND-ANGLE LITTLE INDEX"));
        data.insert(std::make_pair(0x1d8a4,"SIGNWRITING HAND-FIST INDEX MIDDLE LITTLE"));
        data.insert(std::make_pair(0x1d8a5,"SIGNWRITING HAND-CIRCLE INDEX MIDDLE LITTLE"));
        data.insert(std::make_pair(0x1d8a6,"SIGNWRITING HAND-HINGE INDEX MIDDLE LITTLE"));
        data.insert(std::make_pair(0x1d8a7,"SIGNWRITING HAND-HINGE RING"));
        data.insert(std::make_pair(0x1d8a8,"SIGNWRITING HAND-ANGLE INDEX MIDDLE LITTLE"));
        data.insert(std::make_pair(0x1d8a9,"SIGNWRITING HAND-FIST INDEX MIDDLE CROSS LITTLE"));
        data.insert(std::make_pair(0x1d8aa,"SIGNWRITING HAND-CIRCLE INDEX MIDDLE CROSS LITTLE"));
        data.insert(std::make_pair(0x1d8ab,"SIGNWRITING HAND-FIST RING DOWN"));
        data.insert(std::make_pair(0x1d8ac,"SIGNWRITING HAND-HINGE RING DOWN INDEX THUMB HOOK MIDDLE"));
        data.insert(std::make_pair(0x1d8ad,"SIGNWRITING HAND-ANGLE RING DOWN MIDDLE THUMB INDEX CROSS"));
        data.insert(std::make_pair(0x1d8ae,"SIGNWRITING HAND-FIST RING UP"));
        data.insert(std::make_pair(0x1d8af,"SIGNWRITING HAND-FIST RING RAISED KNUCKLE"));
        data.insert(std::make_pair(0x1d8b0,"SIGNWRITING HAND-FIST RING LITTLE"));
        data.insert(std::make_pair(0x1d8b1,"SIGNWRITING HAND-CIRCLE RING LITTLE"));
        data.insert(std::make_pair(0x1d8b2,"SIGNWRITING HAND-OVAL RING LITTLE"));
        data.insert(std::make_pair(0x1d8b3,"SIGNWRITING HAND-ANGLE RING LITTLE"));
        data.insert(std::make_pair(0x1d8b4,"SIGNWRITING HAND-FIST RING MIDDLE"));
        data.insert(std::make_pair(0x1d8b5,"SIGNWRITING HAND-FIST RING MIDDLE CONJOINED"));
        data.insert(std::make_pair(0x1d8b6,"SIGNWRITING HAND-FIST RING MIDDLE RAISED KNUCKLES"));
        data.insert(std::make_pair(0x1d8b7,"SIGNWRITING HAND-FIST RING INDEX"));
        data.insert(std::make_pair(0x1d8b8,"SIGNWRITING HAND-FIST RING THUMB"));
        data.insert(std::make_pair(0x1d8b9,"SIGNWRITING HAND-HOOK RING THUMB"));
        data.insert(std::make_pair(0x1d8ba,"SIGNWRITING HAND-FIST INDEX RING LITTLE"));
        data.insert(std::make_pair(0x1d8bb,"SIGNWRITING HAND-CIRCLE INDEX RING LITTLE"));
        data.insert(std::make_pair(0x1d8bc,"SIGNWRITING HAND-CURLICUE INDEX RING LITTLE ON"));
        data.insert(std::make_pair(0x1d8bd,"SIGNWRITING HAND-HOOK INDEX RING LITTLE OUT"));
        data.insert(std::make_pair(0x1d8be,"SIGNWRITING HAND-HOOK INDEX RING LITTLE IN"));
        data.insert(std::make_pair(0x1d8bf,"SIGNWRITING HAND-HOOK INDEX RING LITTLE UNDER"));
        data.insert(std::make_pair(0x1d8c0,"SIGNWRITING HAND-CUP INDEX RING LITTLE"));
        data.insert(std::make_pair(0x1d8c1,"SIGNWRITING HAND-HINGE INDEX RING LITTLE"));
        data.insert(std::make_pair(0x1d8c2,"SIGNWRITING HAND-ANGLE INDEX RING LITTLE OUT"));
        data.insert(std::make_pair(0x1d8c3,"SIGNWRITING HAND-ANGLE INDEX RING LITTLE"));
        data.insert(std::make_pair(0x1d8c4,"SIGNWRITING HAND-FIST MIDDLE DOWN"));
        data.insert(std::make_pair(0x1d8c5,"SIGNWRITING HAND-HINGE MIDDLE"));
        data.insert(std::make_pair(0x1d8c6,"SIGNWRITING HAND-FIST MIDDLE UP"));
        data.insert(std::make_pair(0x1d8c7,"SIGNWRITING HAND-CIRCLE MIDDLE UP"));
        data.insert(std::make_pair(0x1d8c8,"SIGNWRITING HAND-FIST MIDDLE RAISED KNUCKLE"));
        data.insert(std::make_pair(0x1d8c9,"SIGNWRITING HAND-FIST MIDDLE UP THUMB SIDE"));
        data.insert(std::make_pair(0x1d8ca,"SIGNWRITING HAND-HOOK MIDDLE THUMB"));
        data.insert(std::make_pair(0x1d8cb,"SIGNWRITING HAND-FIST MIDDLE THUMB LITTLE"));
        data.insert(std::make_pair(0x1d8cc,"SIGNWRITING HAND-FIST MIDDLE LITTLE"));
        data.insert(std::make_pair(0x1d8cd,"SIGNWRITING HAND-FIST MIDDLE RING LITTLE"));
        data.insert(std::make_pair(0x1d8ce,"SIGNWRITING HAND-CIRCLE MIDDLE RING LITTLE"));
        data.insert(std::make_pair(0x1d8cf,"SIGNWRITING HAND-CURLICUE MIDDLE RING LITTLE ON"));
        data.insert(std::make_pair(0x1d8d0,"SIGNWRITING HAND-CUP MIDDLE RING LITTLE"));
        data.insert(std::make_pair(0x1d8d1,"SIGNWRITING HAND-HINGE MIDDLE RING LITTLE"));
        data.insert(std::make_pair(0x1d8d2,"SIGNWRITING HAND-ANGLE MIDDLE RING LITTLE OUT"));
        data.insert(std::make_pair(0x1d8d3,"SIGNWRITING HAND-ANGLE MIDDLE RING LITTLE IN"));
        data.insert(std::make_pair(0x1d8d4,"SIGNWRITING HAND-ANGLE MIDDLE RING LITTLE"));
        data.insert(std::make_pair(0x1d8d5,"SIGNWRITING HAND-CIRCLE MIDDLE RING LITTLE BENT"));
        data.insert(std::make_pair(0x1d8d6,"SIGNWRITING HAND-CLAW MIDDLE RING LITTLE CONJOINED"));
        data.insert(std::make_pair(0x1d8d7,"SIGNWRITING HAND-CLAW MIDDLE RING LITTLE CONJOINED SIDE"));
        data.insert(std::make_pair(0x1d8d8,"SIGNWRITING HAND-HOOK MIDDLE RING LITTLE CONJOINED OUT"));
        data.insert(std::make_pair(0x1d8d9,"SIGNWRITING HAND-HOOK MIDDLE RING LITTLE CONJOINED IN"));
        data.insert(std::make_pair(0x1d8da,"SIGNWRITING HAND-HOOK MIDDLE RING LITTLE CONJOINED"));
        data.insert(std::make_pair(0x1d8db,"SIGNWRITING HAND-HINGE INDEX HINGED"));
        data.insert(std::make_pair(0x1d8dc,"SIGNWRITING HAND-FIST INDEX THUMB SIDE"));
        data.insert(std::make_pair(0x1d8dd,"SIGNWRITING HAND-HINGE INDEX THUMB SIDE"));
        data.insert(std::make_pair(0x1d8de,"SIGNWRITING HAND-FIST INDEX THUMB SIDE THUMB DIAGONAL"));
        data.insert(std::make_pair(0x1d8df,"SIGNWRITING HAND-FIST INDEX THUMB SIDE THUMB CONJOINED"));
        data.insert(std::make_pair(0x1d8e0,"SIGNWRITING HAND-FIST INDEX THUMB SIDE THUMB BENT"));
        data.insert(std::make_pair(0x1d8e1,"SIGNWRITING HAND-FIST INDEX THUMB SIDE INDEX BENT"));
        data.insert(std::make_pair(0x1d8e2,"SIGNWRITING HAND-FIST INDEX THUMB SIDE BOTH BENT"));
        data.insert(std::make_pair(0x1d8e3,"SIGNWRITING HAND-FIST INDEX THUMB SIDE INDEX HINGE"));
        data.insert(std::make_pair(0x1d8e4,"SIGNWRITING HAND-FIST INDEX THUMB FORWARD INDEX STRAIGHT"));
        data.insert(std::make_pair(0x1d8e5,"SIGNWRITING HAND-FIST INDEX THUMB FORWARD INDEX BENT"));
        data.insert(std::make_pair(0x1d8e6,"SIGNWRITING HAND-FIST INDEX THUMB HOOK"));
        data.insert(std::make_pair(0x1d8e7,"SIGNWRITING HAND-FIST INDEX THUMB CURLICUE"));
        data.insert(std::make_pair(0x1d8e8,"SIGNWRITING HAND-FIST INDEX THUMB CURVE THUMB INSIDE"));
        data.insert(std::make_pair(0x1d8e9,"SIGNWRITING HAND-CLAW INDEX THUMB CURVE THUMB INSIDE"));
        data.insert(std::make_pair(0x1d8ea,"SIGNWRITING HAND-FIST INDEX THUMB CURVE THUMB UNDER"));
        data.insert(std::make_pair(0x1d8eb,"SIGNWRITING HAND-FIST INDEX THUMB CIRCLE"));
        data.insert(std::make_pair(0x1d8ec,"SIGNWRITING HAND-CUP INDEX THUMB"));
        data.insert(std::make_pair(0x1d8ed,"SIGNWRITING HAND-CUP INDEX THUMB OPEN"));
        data.insert(std::make_pair(0x1d8ee,"SIGNWRITING HAND-HINGE INDEX THUMB OPEN"));
        data.insert(std::make_pair(0x1d8ef,"SIGNWRITING HAND-HINGE INDEX THUMB LARGE"));
        data.insert(std::make_pair(0x1d8f0,"SIGNWRITING HAND-HINGE INDEX THUMB"));
        data.insert(std::make_pair(0x1d8f1,"SIGNWRITING HAND-HINGE INDEX THUMB SMALL"));
        data.insert(std::make_pair(0x1d8f2,"SIGNWRITING HAND-ANGLE INDEX THUMB OUT"));
        data.insert(std::make_pair(0x1d8f3,"SIGNWRITING HAND-ANGLE INDEX THUMB IN"));
        data.insert(std::make_pair(0x1d8f4,"SIGNWRITING HAND-ANGLE INDEX THUMB"));
        data.insert(std::make_pair(0x1d8f5,"SIGNWRITING HAND-FIST THUMB"));
        data.insert(std::make_pair(0x1d8f6,"SIGNWRITING HAND-FIST THUMB HEEL"));
        data.insert(std::make_pair(0x1d8f7,"SIGNWRITING HAND-FIST THUMB SIDE DIAGONAL"));
        data.insert(std::make_pair(0x1d8f8,"SIGNWRITING HAND-FIST THUMB SIDE CONJOINED"));
        data.insert(std::make_pair(0x1d8f9,"SIGNWRITING HAND-FIST THUMB SIDE BENT"));
        data.insert(std::make_pair(0x1d8fa,"SIGNWRITING HAND-FIST THUMB FORWARD"));
        data.insert(std::make_pair(0x1d8fb,"SIGNWRITING HAND-FIST THUMB BETWEEN INDEX MIDDLE"));
        data.insert(std::make_pair(0x1d8fc,"SIGNWRITING HAND-FIST THUMB BETWEEN MIDDLE RING"));
        data.insert(std::make_pair(0x1d8fd,"SIGNWRITING HAND-FIST THUMB BETWEEN RING LITTLE"));
        data.insert(std::make_pair(0x1d8fe,"SIGNWRITING HAND-FIST THUMB UNDER TWO FINGERS"));
        data.insert(std::make_pair(0x1d8ff,"SIGNWRITING HAND-FIST THUMB OVER TWO FINGERS"));
        data.insert(std::make_pair(0x1d900,"SIGNWRITING HAND-FIST THUMB UNDER THREE FINGERS"));
        data.insert(std::make_pair(0x1d901,"SIGNWRITING HAND-FIST THUMB UNDER FOUR FINGERS"));
        data.insert(std::make_pair(0x1d902,"SIGNWRITING HAND-FIST THUMB OVER FOUR RAISED KNUCKLES"));
        data.insert(std::make_pair(0x1d903,"SIGNWRITING HAND-FIST"));
        data.insert(std::make_pair(0x1d904,"SIGNWRITING HAND-FIST HEEL"));
        data.insert(std::make_pair(0x1d905,"SIGNWRITING TOUCH SINGLE"));
        data.insert(std::make_pair(0x1d906,"SIGNWRITING TOUCH MULTIPLE"));
        data.insert(std::make_pair(0x1d907,"SIGNWRITING TOUCH BETWEEN"));
        data.insert(std::make_pair(0x1d908,"SIGNWRITING GRASP SINGLE"));
        data.insert(std::make_pair(0x1d909,"SIGNWRITING GRASP MULTIPLE"));
        data.insert(std::make_pair(0x1d90a,"SIGNWRITING GRASP BETWEEN"));
        data.insert(std::make_pair(0x1d90b,"SIGNWRITING STRIKE SINGLE"));
        data.insert(std::make_pair(0x1d90c,"SIGNWRITING STRIKE MULTIPLE"));
        data.insert(std::make_pair(0x1d90d,"SIGNWRITING STRIKE BETWEEN"));
        data.insert(std::make_pair(0x1d90e,"SIGNWRITING BRUSH SINGLE"));
        data.insert(std::make_pair(0x1d90f,"SIGNWRITING BRUSH MULTIPLE"));
        data.insert(std::make_pair(0x1d910,"SIGNWRITING BRUSH BETWEEN"));
        data.insert(std::make_pair(0x1d911,"SIGNWRITING RUB SINGLE"));
        data.insert(std::make_pair(0x1d912,"SIGNWRITING RUB MULTIPLE"));
        data.insert(std::make_pair(0x1d913,"SIGNWRITING RUB BETWEEN"));
        data.insert(std::make_pair(0x1d914,"SIGNWRITING SURFACE SYMBOLS"));
        data.insert(std::make_pair(0x1d915,"SIGNWRITING SURFACE BETWEEN"));
        data.insert(std::make_pair(0x1d916,"SIGNWRITING SQUEEZE LARGE SINGLE"));
        data.insert(std::make_pair(0x1d917,"SIGNWRITING SQUEEZE SMALL SINGLE"));
        data.insert(std::make_pair(0x1d918,"SIGNWRITING SQUEEZE LARGE MULTIPLE"));
        data.insert(std::make_pair(0x1d919,"SIGNWRITING SQUEEZE SMALL MULTIPLE"));
        data.insert(std::make_pair(0x1d91a,"SIGNWRITING SQUEEZE SEQUENTIAL"));
        data.insert(std::make_pair(0x1d91b,"SIGNWRITING FLICK LARGE SINGLE"));
        data.insert(std::make_pair(0x1d91c,"SIGNWRITING FLICK SMALL SINGLE"));
        data.insert(std::make_pair(0x1d91d,"SIGNWRITING FLICK LARGE MULTIPLE"));
        data.insert(std::make_pair(0x1d91e,"SIGNWRITING FLICK SMALL MULTIPLE"));
        data.insert(std::make_pair(0x1d91f,"SIGNWRITING FLICK SEQUENTIAL"));
        data.insert(std::make_pair(0x1d920,"SIGNWRITING SQUEEZE FLICK ALTERNATING"));
        data.insert(std::make_pair(0x1d921,"SIGNWRITING MOVEMENT-HINGE UP DOWN LARGE"));
        data.insert(std::make_pair(0x1d922,"SIGNWRITING MOVEMENT-HINGE UP DOWN SMALL"));
        data.insert(std::make_pair(0x1d923,"SIGNWRITING MOVEMENT-HINGE UP SEQUENTIAL"));
        data.insert(std::make_pair(0x1d924,"SIGNWRITING MOVEMENT-HINGE DOWN SEQUENTIAL"));
        data.insert(std::make_pair(0x1d925,"SIGNWRITING MOVEMENT-HINGE UP DOWN ALTERNATING LARGE"));
        data.insert(std::make_pair(0x1d926,"SIGNWRITING MOVEMENT-HINGE UP DOWN ALTERNATING SMALL"));
        data.insert(std::make_pair(0x1d927,"SIGNWRITING MOVEMENT-HINGE SIDE TO SIDE SCISSORS"));
        data.insert(std::make_pair(0x1d928,"SIGNWRITING MOVEMENT-WALLPLANE FINGER CONTACT"));
        data.insert(std::make_pair(0x1d929,"SIGNWRITING MOVEMENT-FLOORPLANE FINGER CONTACT"));
        data.insert(std::make_pair(0x1d92a,"SIGNWRITING MOVEMENT-WALLPLANE SINGLE STRAIGHT SMALL"));
        data.insert(std::make_pair(0x1d92b,"SIGNWRITING MOVEMENT-WALLPLANE SINGLE STRAIGHT MEDIUM"));
        data.insert(std::make_pair(0x1d92c,"SIGNWRITING MOVEMENT-WALLPLANE SINGLE STRAIGHT LARGE"));
        data.insert(std::make_pair(0x1d92d,"SIGNWRITING MOVEMENT-WALLPLANE SINGLE STRAIGHT LARGEST"));
        data.insert(std::make_pair(0x1d92e,"SIGNWRITING MOVEMENT-WALLPLANE SINGLE WRIST FLEX"));
        data.insert(std::make_pair(0x1d92f,"SIGNWRITING MOVEMENT-WALLPLANE DOUBLE STRAIGHT"));
        data.insert(std::make_pair(0x1d930,"SIGNWRITING MOVEMENT-WALLPLANE DOUBLE WRIST FLEX"));
        data.insert(std::make_pair(0x1d931,"SIGNWRITING MOVEMENT-WALLPLANE DOUBLE ALTERNATING"));
        data.insert(std::make_pair(0x1d932,"SIGNWRITING MOVEMENT-WALLPLANE DOUBLE ALTERNATING WRIST FLEX"));
        data.insert(std::make_pair(0x1d933,"SIGNWRITING MOVEMENT-WALLPLANE CROSS"));
        data.insert(std::make_pair(0x1d934,"SIGNWRITING MOVEMENT-WALLPLANE TRIPLE STRAIGHT MOVEMENT"));
        data.insert(std::make_pair(0x1d935,"SIGNWRITING MOVEMENT-WALLPLANE TRIPLE WRIST FLEX"));
        data.insert(std::make_pair(0x1d936,"SIGNWRITING MOVEMENT-WALLPLANE TRIPLE ALTERNATING"));
        data.insert(std::make_pair(0x1d937,"SIGNWRITING MOVEMENT-WALLPLANE TRIPLE ALTERNATING WRIST FLEX"));
        data.insert(std::make_pair(0x1d938,"SIGNWRITING MOVEMENT-WALLPLANE BEND SMALL"));
        data.insert(std::make_pair(0x1d939,"SIGNWRITING MOVEMENT-WALLPLANE BEND MEDIUM"));
        data.insert(std::make_pair(0x1d93a,"SIGNWRITING MOVEMENT-WALLPLANE BEND LARGE"));
        data.insert(std::make_pair(0x1d93b,"SIGNWRITING MOVEMENT-WALLPLANE CORNER SMALL"));
        data.insert(std::make_pair(0x1d93c,"SIGNWRITING MOVEMENT-WALLPLANE CORNER MEDIUM"));
        data.insert(std::make_pair(0x1d93d,"SIGNWRITING MOVEMENT-WALLPLANE CORNER LARGE"));
        data.insert(std::make_pair(0x1d93e,"SIGNWRITING MOVEMENT-WALLPLANE CORNER ROTATION"));
        data.insert(std::make_pair(0x1d93f,"SIGNWRITING MOVEMENT-WALLPLANE CHECK SMALL"));
        data.insert(std::make_pair(0x1d940,"SIGNWRITING MOVEMENT-WALLPLANE CHECK MEDIUM"));
        data.insert(std::make_pair(0x1d941,"SIGNWRITING MOVEMENT-WALLPLANE CHECK LARGE"));
        data.insert(std::make_pair(0x1d942,"SIGNWRITING MOVEMENT-WALLPLANE BOX SMALL"));
        data.insert(std::make_pair(0x1d943,"SIGNWRITING MOVEMENT-WALLPLANE BOX MEDIUM"));
        data.insert(std::make_pair(0x1d944,"SIGNWRITING MOVEMENT-WALLPLANE BOX LARGE"));
        data.insert(std::make_pair(0x1d945,"SIGNWRITING MOVEMENT-WALLPLANE ZIGZAG SMALL"));
        data.insert(std::make_pair(0x1d946,"SIGNWRITING MOVEMENT-WALLPLANE ZIGZAG MEDIUM"));
        data.insert(std::make_pair(0x1d947,"SIGNWRITING MOVEMENT-WALLPLANE ZIGZAG LARGE"));
        data.insert(std::make_pair(0x1d948,"SIGNWRITING MOVEMENT-WALLPLANE PEAKS SMALL"));
        data.insert(std::make_pair(0x1d949,"SIGNWRITING MOVEMENT-WALLPLANE PEAKS MEDIUM"));
        data.insert(std::make_pair(0x1d94a,"SIGNWRITING MOVEMENT-WALLPLANE PEAKS LARGE"));
        data.insert(std::make_pair(0x1d94b,"SIGNWRITING TRAVEL-WALLPLANE ROTATION-WALLPLANE SINGLE"));
        data.insert(std::make_pair(0x1d94c,"SIGNWRITING TRAVEL-WALLPLANE ROTATION-WALLPLANE DOUBLE"));
        data.insert(std::make_pair(0x1d94d,"SIGNWRITING TRAVEL-WALLPLANE ROTATION-WALLPLANE ALTERNATING"));
        data.insert(std::make_pair(0x1d94e,"SIGNWRITING TRAVEL-WALLPLANE ROTATION-FLOORPLANE SINGLE"));
        data.insert(std::make_pair(0x1d94f,"SIGNWRITING TRAVEL-WALLPLANE ROTATION-FLOORPLANE DOUBLE"));
        data.insert(std::make_pair(0x1d950,"SIGNWRITING TRAVEL-WALLPLANE ROTATION-FLOORPLANE ALTERNATING"));
        data.insert(std::make_pair(0x1d951,"SIGNWRITING TRAVEL-WALLPLANE SHAKING"));
        data.insert(std::make_pair(0x1d952,"SIGNWRITING TRAVEL-WALLPLANE ARM SPIRAL SINGLE"));
        data.insert(std::make_pair(0x1d953,"SIGNWRITING TRAVEL-WALLPLANE ARM SPIRAL DOUBLE"));
        data.insert(std::make_pair(0x1d954,"SIGNWRITING TRAVEL-WALLPLANE ARM SPIRAL TRIPLE"));
        data.insert(std::make_pair(0x1d955,"SIGNWRITING MOVEMENT-DIAGONAL AWAY SMALL"));
        data.insert(std::make_pair(0x1d956,"SIGNWRITING MOVEMENT-DIAGONAL AWAY MEDIUM"));
        data.insert(std::make_pair(0x1d957,"SIGNWRITING MOVEMENT-DIAGONAL AWAY LARGE"));
        data.insert(std::make_pair(0x1d958,"SIGNWRITING MOVEMENT-DIAGONAL AWAY LARGEST"));
        data.insert(std::make_pair(0x1d959,"SIGNWRITING MOVEMENT-DIAGONAL TOWARDS SMALL"));
        data.insert(std::make_pair(0x1d95a,"SIGNWRITING MOVEMENT-DIAGONAL TOWARDS MEDIUM"));
        data.insert(std::make_pair(0x1d95b,"SIGNWRITING MOVEMENT-DIAGONAL TOWARDS LARGE"));
        data.insert(std::make_pair(0x1d95c,"SIGNWRITING MOVEMENT-DIAGONAL TOWARDS LARGEST"));
        data.insert(std::make_pair(0x1d95d,"SIGNWRITING MOVEMENT-DIAGONAL BETWEEN AWAY SMALL"));
        data.insert(std::make_pair(0x1d95e,"SIGNWRITING MOVEMENT-DIAGONAL BETWEEN AWAY MEDIUM"));
        data.insert(std::make_pair(0x1d95f,"SIGNWRITING MOVEMENT-DIAGONAL BETWEEN AWAY LARGE"));
        data.insert(std::make_pair(0x1d960,"SIGNWRITING MOVEMENT-DIAGONAL BETWEEN AWAY LARGEST"));
        data.insert(std::make_pair(0x1d961,"SIGNWRITING MOVEMENT-DIAGONAL BETWEEN TOWARDS SMALL"));
        data.insert(std::make_pair(0x1d962,"SIGNWRITING MOVEMENT-DIAGONAL BETWEEN TOWARDS MEDIUM"));
        data.insert(std::make_pair(0x1d963,"SIGNWRITING MOVEMENT-DIAGONAL BETWEEN TOWARDS LARGE"));
        data.insert(std::make_pair(0x1d964,"SIGNWRITING MOVEMENT-DIAGONAL BETWEEN TOWARDS LARGEST"));
        data.insert(std::make_pair(0x1d965,"SIGNWRITING MOVEMENT-FLOORPLANE SINGLE STRAIGHT SMALL"));
        data.insert(std::make_pair(0x1d966,"SIGNWRITING MOVEMENT-FLOORPLANE SINGLE STRAIGHT MEDIUM"));
        data.insert(std::make_pair(0x1d967,"SIGNWRITING MOVEMENT-FLOORPLANE SINGLE STRAIGHT LARGE"));
        data.insert(std::make_pair(0x1d968,"SIGNWRITING MOVEMENT-FLOORPLANE SINGLE STRAIGHT LARGEST"));
        data.insert(std::make_pair(0x1d969,"SIGNWRITING MOVEMENT-FLOORPLANE SINGLE WRIST FLEX"));
        data.insert(std::make_pair(0x1d96a,"SIGNWRITING MOVEMENT-FLOORPLANE DOUBLE STRAIGHT"));
        data.insert(std::make_pair(0x1d96b,"SIGNWRITING MOVEMENT-FLOORPLANE DOUBLE WRIST FLEX"));
        data.insert(std::make_pair(0x1d96c,"SIGNWRITING MOVEMENT-FLOORPLANE DOUBLE ALTERNATING"));
        data.insert(std::make_pair(0x1d96d,"SIGNWRITING MOVEMENT-FLOORPLANE DOUBLE ALTERNATING WRIST FLEX"));
        data.insert(std::make_pair(0x1d96e,"SIGNWRITING MOVEMENT-FLOORPLANE CROSS"));
        data.insert(std::make_pair(0x1d96f,"SIGNWRITING MOVEMENT-FLOORPLANE TRIPLE STRAIGHT MOVEMENT"));
        data.insert(std::make_pair(0x1d970,"SIGNWRITING MOVEMENT-FLOORPLANE TRIPLE WRIST FLEX"));
        data.insert(std::make_pair(0x1d971,"SIGNWRITING MOVEMENT-FLOORPLANE TRIPLE ALTERNATING MOVEMENT"));
        data.insert(std::make_pair(0x1d972,"SIGNWRITING MOVEMENT-FLOORPLANE TRIPLE ALTERNATING WRIST FLEX"));
        data.insert(std::make_pair(0x1d973,"SIGNWRITING MOVEMENT-FLOORPLANE BEND"));
        data.insert(std::make_pair(0x1d974,"SIGNWRITING MOVEMENT-FLOORPLANE CORNER SMALL"));
        data.insert(std::make_pair(0x1d975,"SIGNWRITING MOVEMENT-FLOORPLANE CORNER MEDIUM"));
        data.insert(std::make_pair(0x1d976,"SIGNWRITING MOVEMENT-FLOORPLANE CORNER LARGE"));
        data.insert(std::make_pair(0x1d977,"SIGNWRITING MOVEMENT-FLOORPLANE CHECK"));
        data.insert(std::make_pair(0x1d978,"SIGNWRITING MOVEMENT-FLOORPLANE BOX SMALL"));
        data.insert(std::make_pair(0x1d979,"SIGNWRITING MOVEMENT-FLOORPLANE BOX MEDIUM"));
        data.insert(std::make_pair(0x1d97a,"SIGNWRITING MOVEMENT-FLOORPLANE BOX LARGE"));
        data.insert(std::make_pair(0x1d97b,"SIGNWRITING MOVEMENT-FLOORPLANE ZIGZAG SMALL"));
        data.insert(std::make_pair(0x1d97c,"SIGNWRITING MOVEMENT-FLOORPLANE ZIGZAG MEDIUM"));
        data.insert(std::make_pair(0x1d97d,"SIGNWRITING MOVEMENT-FLOORPLANE ZIGZAG LARGE"));
        data.insert(std::make_pair(0x1d97e,"SIGNWRITING MOVEMENT-FLOORPLANE PEAKS SMALL"));
        data.insert(std::make_pair(0x1d97f,"SIGNWRITING MOVEMENT-FLOORPLANE PEAKS MEDIUM"));
        data.insert(std::make_pair(0x1d980,"SIGNWRITING MOVEMENT-FLOORPLANE PEAKS LARGE"));
        data.insert(std::make_pair(0x1d981,"SIGNWRITING TRAVEL-FLOORPLANE ROTATION-FLOORPLANE SINGLE"));
        data.insert(std::make_pair(0x1d982,"SIGNWRITING TRAVEL-FLOORPLANE ROTATION-FLOORPLANE DOUBLE"));
        data.insert(std::make_pair(0x1d983,"SIGNWRITING TRAVEL-FLOORPLANE ROTATION-FLOORPLANE ALTERNATING"));
        data.insert(std::make_pair(0x1d984,"SIGNWRITING TRAVEL-FLOORPLANE ROTATION-WALLPLANE SINGLE"));
        data.insert(std::make_pair(0x1d985,"SIGNWRITING TRAVEL-FLOORPLANE ROTATION-WALLPLANE DOUBLE"));
        data.insert(std::make_pair(0x1d986,"SIGNWRITING TRAVEL-FLOORPLANE ROTATION-WALLPLANE ALTERNATING"));
        data.insert(std::make_pair(0x1d987,"SIGNWRITING TRAVEL-FLOORPLANE SHAKING"));
        data.insert(std::make_pair(0x1d988,"SIGNWRITING MOVEMENT-WALLPLANE CURVE QUARTER SMALL"));
        data.insert(std::make_pair(0x1d989,"SIGNWRITING MOVEMENT-WALLPLANE CURVE QUARTER MEDIUM"));
        data.insert(std::make_pair(0x1d98a,"SIGNWRITING MOVEMENT-WALLPLANE CURVE QUARTER LARGE"));
        data.insert(std::make_pair(0x1d98b,"SIGNWRITING MOVEMENT-WALLPLANE CURVE QUARTER LARGEST"));
        data.insert(std::make_pair(0x1d98c,"SIGNWRITING MOVEMENT-WALLPLANE CURVE HALF-CIRCLE SMALL"));
        data.insert(std::make_pair(0x1d98d,"SIGNWRITING MOVEMENT-WALLPLANE CURVE HALF-CIRCLE MEDIUM"));
        data.insert(std::make_pair(0x1d98e,"SIGNWRITING MOVEMENT-WALLPLANE CURVE HALF-CIRCLE LARGE"));
        data.insert(std::make_pair(0x1d98f,"SIGNWRITING MOVEMENT-WALLPLANE CURVE HALF-CIRCLE LARGEST"));
        data.insert(std::make_pair(0x1d990,"SIGNWRITING MOVEMENT-WALLPLANE CURVE THREE-QUARTER CIRCLE SMALL"));
        data.insert(std::make_pair(0x1d991,"SIGNWRITING MOVEMENT-WALLPLANE CURVE THREE-QUARTER CIRCLE MEDIUM"));
        data.insert(std::make_pair(0x1d992,"SIGNWRITING MOVEMENT-WALLPLANE HUMP SMALL"));
        data.insert(std::make_pair(0x1d993,"SIGNWRITING MOVEMENT-WALLPLANE HUMP MEDIUM"));
        data.insert(std::make_pair(0x1d994,"SIGNWRITING MOVEMENT-WALLPLANE HUMP LARGE"));
        data.insert(std::make_pair(0x1d995,"SIGNWRITING MOVEMENT-WALLPLANE LOOP SMALL"));
        data.insert(std::make_pair(0x1d996,"SIGNWRITING MOVEMENT-WALLPLANE LOOP MEDIUM"));
        data.insert(std::make_pair(0x1d997,"SIGNWRITING MOVEMENT-WALLPLANE LOOP LARGE"));
        data.insert(std::make_pair(0x1d998,"SIGNWRITING MOVEMENT-WALLPLANE LOOP SMALL DOUBLE"));
        data.insert(std::make_pair(0x1d999,"SIGNWRITING MOVEMENT-WALLPLANE WAVE CURVE DOUBLE SMALL"));
        data.insert(std::make_pair(0x1d99a,"SIGNWRITING MOVEMENT-WALLPLANE WAVE CURVE DOUBLE MEDIUM"));
        data.insert(std::make_pair(0x1d99b,"SIGNWRITING MOVEMENT-WALLPLANE WAVE CURVE DOUBLE LARGE"));
        data.insert(std::make_pair(0x1d99c,"SIGNWRITING MOVEMENT-WALLPLANE WAVE CURVE TRIPLE SMALL"));
        data.insert(std::make_pair(0x1d99d,"SIGNWRITING MOVEMENT-WALLPLANE WAVE CURVE TRIPLE MEDIUM"));
        data.insert(std::make_pair(0x1d99e,"SIGNWRITING MOVEMENT-WALLPLANE WAVE CURVE TRIPLE LARGE"));
        data.insert(std::make_pair(0x1d99f,"SIGNWRITING MOVEMENT-WALLPLANE CURVE THEN STRAIGHT"));
        data.insert(std::make_pair(0x1d9a0,"SIGNWRITING MOVEMENT-WALLPLANE CURVED CROSS SMALL"));
        data.insert(std::make_pair(0x1d9a1,"SIGNWRITING MOVEMENT-WALLPLANE CURVED CROSS MEDIUM"));
        data.insert(std::make_pair(0x1d9a2,"SIGNWRITING ROTATION-WALLPLANE SINGLE"));
        data.insert(std::make_pair(0x1d9a3,"SIGNWRITING ROTATION-WALLPLANE DOUBLE"));
        data.insert(std::make_pair(0x1d9a4,"SIGNWRITING ROTATION-WALLPLANE ALTERNATE"));
        data.insert(std::make_pair(0x1d9a5,"SIGNWRITING MOVEMENT-WALLPLANE SHAKING"));
        data.insert(std::make_pair(0x1d9a6,"SIGNWRITING MOVEMENT-WALLPLANE CURVE HITTING FRONT WALL"));
        data.insert(std::make_pair(0x1d9a7,"SIGNWRITING MOVEMENT-WALLPLANE HUMP HITTING FRONT WALL"));
        data.insert(std::make_pair(0x1d9a8,"SIGNWRITING MOVEMENT-WALLPLANE LOOP HITTING FRONT WALL"));
        data.insert(std::make_pair(0x1d9a9,"SIGNWRITING MOVEMENT-WALLPLANE WAVE HITTING FRONT WALL"));
        data.insert(std::make_pair(0x1d9aa,"SIGNWRITING ROTATION-WALLPLANE SINGLE HITTING FRONT WALL"));
        data.insert(std::make_pair(0x1d9ab,"SIGNWRITING ROTATION-WALLPLANE DOUBLE HITTING FRONT WALL"));
        data.insert(std::make_pair(0x1d9ac,"SIGNWRITING ROTATION-WALLPLANE ALTERNATING HITTING FRONT WALL"));
        data.insert(std::make_pair(0x1d9ad,"SIGNWRITING MOVEMENT-WALLPLANE CURVE HITTING CHEST"));
        data.insert(std::make_pair(0x1d9ae,"SIGNWRITING MOVEMENT-WALLPLANE HUMP HITTING CHEST"));
        data.insert(std::make_pair(0x1d9af,"SIGNWRITING MOVEMENT-WALLPLANE LOOP HITTING CHEST"));
        data.insert(std::make_pair(0x1d9b0,"SIGNWRITING MOVEMENT-WALLPLANE WAVE HITTING CHEST"));
        data.insert(std::make_pair(0x1d9b1,"SIGNWRITING ROTATION-WALLPLANE SINGLE HITTING CHEST"));
        data.insert(std::make_pair(0x1d9b2,"SIGNWRITING ROTATION-WALLPLANE DOUBLE HITTING CHEST"));
        data.insert(std::make_pair(0x1d9b3,"SIGNWRITING ROTATION-WALLPLANE ALTERNATING HITTING CHEST"));
        data.insert(std::make_pair(0x1d9b4,"SIGNWRITING MOVEMENT-WALLPLANE WAVE DIAGONAL PATH SMALL"));
        data.insert(std::make_pair(0x1d9b5,"SIGNWRITING MOVEMENT-WALLPLANE WAVE DIAGONAL PATH MEDIUM"));
        data.insert(std::make_pair(0x1d9b6,"SIGNWRITING MOVEMENT-WALLPLANE WAVE DIAGONAL PATH LARGE"));
        data.insert(std::make_pair(0x1d9b7,"SIGNWRITING MOVEMENT-FLOORPLANE CURVE HITTING CEILING SMALL"));
        data.insert(std::make_pair(0x1d9b8,"SIGNWRITING MOVEMENT-FLOORPLANE CURVE HITTING CEILING LARGE"));
        data.insert(std::make_pair(0x1d9b9,"SIGNWRITING MOVEMENT-FLOORPLANE HUMP HITTING CEILING SMALL DOUBLE"));
        data.insert(std::make_pair(0x1d9ba,"SIGNWRITING MOVEMENT-FLOORPLANE HUMP HITTING CEILING LARGE DOUBLE"));
        data.insert(std::make_pair(0x1d9bb,"SIGNWRITING MOVEMENT-FLOORPLANE HUMP HITTING CEILING SMALL TRIPLE"));
        data.insert(std::make_pair(0x1d9bc,"SIGNWRITING MOVEMENT-FLOORPLANE HUMP HITTING CEILING LARGE TRIPLE"));
        data.insert(std::make_pair(0x1d9bd,"SIGNWRITING MOVEMENT-FLOORPLANE LOOP HITTING CEILING SMALL SINGLE"));
        data.insert(std::make_pair(0x1d9be,"SIGNWRITING MOVEMENT-FLOORPLANE LOOP HITTING CEILING LARGE SINGLE"));
        data.insert(std::make_pair(0x1d9bf,"SIGNWRITING MOVEMENT-FLOORPLANE LOOP HITTING CEILING SMALL DOUBLE"));
        data.insert(std::make_pair(0x1d9c0,"SIGNWRITING MOVEMENT-FLOORPLANE LOOP HITTING CEILING LARGE DOUBLE"));
        data.insert(std::make_pair(0x1d9c1,"SIGNWRITING MOVEMENT-FLOORPLANE WAVE HITTING CEILING SMALL"));
        data.insert(std::make_pair(0x1d9c2,"SIGNWRITING MOVEMENT-FLOORPLANE WAVE HITTING CEILING LARGE"));
        data.insert(std::make_pair(0x1d9c3,"SIGNWRITING ROTATION-FLOORPLANE SINGLE HITTING CEILING"));
        data.insert(std::make_pair(0x1d9c4,"SIGNWRITING ROTATION-FLOORPLANE DOUBLE HITTING CEILING"));
        data.insert(std::make_pair(0x1d9c5,"SIGNWRITING ROTATION-FLOORPLANE ALTERNATING HITTING CEILING"));
        data.insert(std::make_pair(0x1d9c6,"SIGNWRITING MOVEMENT-FLOORPLANE CURVE HITTING FLOOR SMALL"));
        data.insert(std::make_pair(0x1d9c7,"SIGNWRITING MOVEMENT-FLOORPLANE CURVE HITTING FLOOR LARGE"));
        data.insert(std::make_pair(0x1d9c8,"SIGNWRITING MOVEMENT-FLOORPLANE HUMP HITTING FLOOR SMALL DOUBLE"));
        data.insert(std::make_pair(0x1d9c9,"SIGNWRITING MOVEMENT-FLOORPLANE HUMP HITTING FLOOR LARGE DOUBLE"));
        data.insert(std::make_pair(0x1d9ca,"SIGNWRITING MOVEMENT-FLOORPLANE HUMP HITTING FLOOR TRIPLE SMALL TRIPLE"));
        data.insert(std::make_pair(0x1d9cb,"SIGNWRITING MOVEMENT-FLOORPLANE HUMP HITTING FLOOR TRIPLE LARGE TRIPLE"));
        data.insert(std::make_pair(0x1d9cc,"SIGNWRITING MOVEMENT-FLOORPLANE LOOP HITTING FLOOR SMALL SINGLE"));
        data.insert(std::make_pair(0x1d9cd,"SIGNWRITING MOVEMENT-FLOORPLANE LOOP HITTING FLOOR LARGE SINGLE"));
        data.insert(std::make_pair(0x1d9ce,"SIGNWRITING MOVEMENT-FLOORPLANE LOOP HITTING FLOOR SMALL DOUBLE"));
        data.insert(std::make_pair(0x1d9cf,"SIGNWRITING MOVEMENT-FLOORPLANE LOOP HITTING FLOOR LARGE DOUBLE"));
        data.insert(std::make_pair(0x1d9d0,"SIGNWRITING MOVEMENT-FLOORPLANE WAVE HITTING FLOOR SMALL"));
        data.insert(std::make_pair(0x1d9d1,"SIGNWRITING MOVEMENT-FLOORPLANE WAVE HITTING FLOOR LARGE"));
        data.insert(std::make_pair(0x1d9d2,"SIGNWRITING ROTATION-FLOORPLANE SINGLE HITTING FLOOR"));
        data.insert(std::make_pair(0x1d9d3,"SIGNWRITING ROTATION-FLOORPLANE DOUBLE HITTING FLOOR"));
        data.insert(std::make_pair(0x1d9d4,"SIGNWRITING ROTATION-FLOORPLANE ALTERNATING HITTING FLOOR"));
        data.insert(std::make_pair(0x1d9d5,"SIGNWRITING MOVEMENT-FLOORPLANE CURVE SMALL"));
        data.insert(std::make_pair(0x1d9d6,"SIGNWRITING MOVEMENT-FLOORPLANE CURVE MEDIUM"));
        data.insert(std::make_pair(0x1d9d7,"SIGNWRITING MOVEMENT-FLOORPLANE CURVE LARGE"));
        data.insert(std::make_pair(0x1d9d8,"SIGNWRITING MOVEMENT-FLOORPLANE CURVE LARGEST"));
        data.insert(std::make_pair(0x1d9d9,"SIGNWRITING MOVEMENT-FLOORPLANE CURVE COMBINED"));
        data.insert(std::make_pair(0x1d9da,"SIGNWRITING MOVEMENT-FLOORPLANE HUMP SMALL"));
        data.insert(std::make_pair(0x1d9db,"SIGNWRITING MOVEMENT-FLOORPLANE LOOP SMALL"));
        data.insert(std::make_pair(0x1d9dc,"SIGNWRITING MOVEMENT-FLOORPLANE WAVE SNAKE"));
        data.insert(std::make_pair(0x1d9dd,"SIGNWRITING MOVEMENT-FLOORPLANE WAVE SMALL"));
        data.insert(std::make_pair(0x1d9de,"SIGNWRITING MOVEMENT-FLOORPLANE WAVE LARGE"));
        data.insert(std::make_pair(0x1d9df,"SIGNWRITING ROTATION-FLOORPLANE SINGLE"));
        data.insert(std::make_pair(0x1d9e0,"SIGNWRITING ROTATION-FLOORPLANE DOUBLE"));
        data.insert(std::make_pair(0x1d9e1,"SIGNWRITING ROTATION-FLOORPLANE ALTERNATING"));
        data.insert(std::make_pair(0x1d9e2,"SIGNWRITING MOVEMENT-FLOORPLANE SHAKING PARALLEL"));
        data.insert(std::make_pair(0x1d9e3,"SIGNWRITING MOVEMENT-WALLPLANE ARM CIRCLE SMALL SINGLE"));
        data.insert(std::make_pair(0x1d9e4,"SIGNWRITING MOVEMENT-WALLPLANE ARM CIRCLE MEDIUM SINGLE"));
        data.insert(std::make_pair(0x1d9e5,"SIGNWRITING MOVEMENT-WALLPLANE ARM CIRCLE SMALL DOUBLE"));
        data.insert(std::make_pair(0x1d9e6,"SIGNWRITING MOVEMENT-WALLPLANE ARM CIRCLE MEDIUM DOUBLE"));
        data.insert(std::make_pair(0x1d9e7,"SIGNWRITING MOVEMENT-FLOORPLANE ARM CIRCLE HITTING WALL SMALL SINGLE"));
        data.insert(std::make_pair(0x1d9e8,"SIGNWRITING MOVEMENT-FLOORPLANE ARM CIRCLE HITTING WALL MEDIUM SINGLE"));
        data.insert(std::make_pair(0x1d9e9,"SIGNWRITING MOVEMENT-FLOORPLANE ARM CIRCLE HITTING WALL LARGE SINGLE"));
        data.insert(std::make_pair(0x1d9ea,"SIGNWRITING MOVEMENT-FLOORPLANE ARM CIRCLE HITTING WALL SMALL DOUBLE"));
        data.insert(std::make_pair(0x1d9eb,"SIGNWRITING MOVEMENT-FLOORPLANE ARM CIRCLE HITTING WALL MEDIUM DOUBLE"));
        data.insert(std::make_pair(0x1d9ec,"SIGNWRITING MOVEMENT-FLOORPLANE ARM CIRCLE HITTING WALL LARGE DOUBLE"));
        data.insert(std::make_pair(0x1d9ed,"SIGNWRITING MOVEMENT-WALLPLANE WRIST CIRCLE FRONT SINGLE"));
        data.insert(std::make_pair(0x1d9ee,"SIGNWRITING MOVEMENT-WALLPLANE WRIST CIRCLE FRONT DOUBLE"));
        data.insert(std::make_pair(0x1d9ef,"SIGNWRITING MOVEMENT-FLOORPLANE WRIST CIRCLE HITTING WALL SINGLE"));
        data.insert(std::make_pair(0x1d9f0,"SIGNWRITING MOVEMENT-FLOORPLANE WRIST CIRCLE HITTING WALL DOUBLE"));
        data.insert(std::make_pair(0x1d9f1,"SIGNWRITING MOVEMENT-WALLPLANE FINGER CIRCLES SINGLE"));
        data.insert(std::make_pair(0x1d9f2,"SIGNWRITING MOVEMENT-WALLPLANE FINGER CIRCLES DOUBLE"));
        data.insert(std::make_pair(0x1d9f3,"SIGNWRITING MOVEMENT-FLOORPLANE FINGER CIRCLES HITTING WALL SINGLE"));
        data.insert(std::make_pair(0x1d9f4,"SIGNWRITING MOVEMENT-FLOORPLANE FINGER CIRCLES HITTING WALL DOUBLE"));
        data.insert(std::make_pair(0x1d9f5,"SIGNWRITING DYNAMIC ARROWHEAD SMALL"));
        data.insert(std::make_pair(0x1d9f6,"SIGNWRITING DYNAMIC ARROWHEAD LARGE"));
        data.insert(std::make_pair(0x1d9f7,"SIGNWRITING DYNAMIC FAST"));
        data.insert(std::make_pair(0x1d9f8,"SIGNWRITING DYNAMIC SLOW"));
        data.insert(std::make_pair(0x1d9f9,"SIGNWRITING DYNAMIC TENSE"));
        data.insert(std::make_pair(0x1d9fa,"SIGNWRITING DYNAMIC RELAXED"));
        data.insert(std::make_pair(0x1d9fb,"SIGNWRITING DYNAMIC SIMULTANEOUS"));
        data.insert(std::make_pair(0x1d9fc,"SIGNWRITING DYNAMIC SIMULTANEOUS ALTERNATING"));
        data.insert(std::make_pair(0x1d9fd,"SIGNWRITING DYNAMIC EVERY OTHER TIME"));
        data.insert(std::make_pair(0x1d9fe,"SIGNWRITING DYNAMIC GRADUAL"));
        data.insert(std::make_pair(0x1d9ff,"SIGNWRITING HEAD"));
        data.insert(std::make_pair(0x1da00,"SIGNWRITING HEAD RIM"));
        data.insert(std::make_pair(0x1da01,"SIGNWRITING HEAD MOVEMENT-WALLPLANE STRAIGHT"));
        data.insert(std::make_pair(0x1da02,"SIGNWRITING HEAD MOVEMENT-WALLPLANE TILT"));
        data.insert(std::make_pair(0x1da03,"SIGNWRITING HEAD MOVEMENT-FLOORPLANE STRAIGHT"));
        data.insert(std::make_pair(0x1da04,"SIGNWRITING HEAD MOVEMENT-WALLPLANE CURVE"));
        data.insert(std::make_pair(0x1da05,"SIGNWRITING HEAD MOVEMENT-FLOORPLANE CURVE"));
        data.insert(std::make_pair(0x1da06,"SIGNWRITING HEAD MOVEMENT CIRCLE"));
        data.insert(std::make_pair(0x1da07,"SIGNWRITING FACE DIRECTION POSITION NOSE FORWARD TILTING"));
        data.insert(std::make_pair(0x1da08,"SIGNWRITING FACE DIRECTION POSITION NOSE UP OR DOWN"));
        data.insert(std::make_pair(0x1da09,"SIGNWRITING FACE DIRECTION POSITION NOSE UP OR DOWN TILTING"));
        data.insert(std::make_pair(0x1da0a,"SIGNWRITING EYEBROWS STRAIGHT UP"));
        data.insert(std::make_pair(0x1da0b,"SIGNWRITING EYEBROWS STRAIGHT NEUTRAL"));
        data.insert(std::make_pair(0x1da0c,"SIGNWRITING EYEBROWS STRAIGHT DOWN"));
        data.insert(std::make_pair(0x1da0d,"SIGNWRITING DREAMY EYEBROWS NEUTRAL DOWN"));
        data.insert(std::make_pair(0x1da0e,"SIGNWRITING DREAMY EYEBROWS DOWN NEUTRAL"));
        data.insert(std::make_pair(0x1da0f,"SIGNWRITING DREAMY EYEBROWS UP NEUTRAL"));
        data.insert(std::make_pair(0x1da10,"SIGNWRITING DREAMY EYEBROWS NEUTRAL UP"));
        data.insert(std::make_pair(0x1da11,"SIGNWRITING FOREHEAD NEUTRAL"));
        data.insert(std::make_pair(0x1da12,"SIGNWRITING FOREHEAD CONTACT"));
        data.insert(std::make_pair(0x1da13,"SIGNWRITING FOREHEAD WRINKLED"));
        data.insert(std::make_pair(0x1da14,"SIGNWRITING EYES OPEN"));
        data.insert(std::make_pair(0x1da15,"SIGNWRITING EYES SQUEEZED"));
        data.insert(std::make_pair(0x1da16,"SIGNWRITING EYES CLOSED"));
        data.insert(std::make_pair(0x1da17,"SIGNWRITING EYE BLINK SINGLE"));
        data.insert(std::make_pair(0x1da18,"SIGNWRITING EYE BLINK MULTIPLE"));
        data.insert(std::make_pair(0x1da19,"SIGNWRITING EYES HALF OPEN"));
        data.insert(std::make_pair(0x1da1a,"SIGNWRITING EYES WIDE OPEN"));
        data.insert(std::make_pair(0x1da1b,"SIGNWRITING EYES HALF CLOSED"));
        data.insert(std::make_pair(0x1da1c,"SIGNWRITING EYES WIDENING MOVEMENT"));
        data.insert(std::make_pair(0x1da1d,"SIGNWRITING EYE WINK"));
        data.insert(std::make_pair(0x1da1e,"SIGNWRITING EYELASHES UP"));
        data.insert(std::make_pair(0x1da1f,"SIGNWRITING EYELASHES DOWN"));
        data.insert(std::make_pair(0x1da20,"SIGNWRITING EYELASHES FLUTTERING"));
        data.insert(std::make_pair(0x1da21,"SIGNWRITING EYEGAZE-WALLPLANE STRAIGHT"));
        data.insert(std::make_pair(0x1da22,"SIGNWRITING EYEGAZE-WALLPLANE STRAIGHT DOUBLE"));
        data.insert(std::make_pair(0x1da23,"SIGNWRITING EYEGAZE-WALLPLANE STRAIGHT ALTERNATING"));
        data.insert(std::make_pair(0x1da24,"SIGNWRITING EYEGAZE-FLOORPLANE STRAIGHT"));
        data.insert(std::make_pair(0x1da25,"SIGNWRITING EYEGAZE-FLOORPLANE STRAIGHT DOUBLE"));
        data.insert(std::make_pair(0x1da26,"SIGNWRITING EYEGAZE-FLOORPLANE STRAIGHT ALTERNATING"));
        data.insert(std::make_pair(0x1da27,"SIGNWRITING EYEGAZE-WALLPLANE CURVED"));
        data.insert(std::make_pair(0x1da28,"SIGNWRITING EYEGAZE-FLOORPLANE CURVED"));
        data.insert(std::make_pair(0x1da29,"SIGNWRITING EYEGAZE-WALLPLANE CIRCLING"));
        data.insert(std::make_pair(0x1da2a,"SIGNWRITING CHEEKS PUFFED"));
        data.insert(std::make_pair(0x1da2b,"SIGNWRITING CHEEKS NEUTRAL"));
        data.insert(std::make_pair(0x1da2c,"SIGNWRITING CHEEKS SUCKED"));
        data.insert(std::make_pair(0x1da2d,"SIGNWRITING TENSE CHEEKS HIGH"));
        data.insert(std::make_pair(0x1da2e,"SIGNWRITING TENSE CHEEKS MIDDLE"));
        data.insert(std::make_pair(0x1da2f,"SIGNWRITING TENSE CHEEKS LOW"));
        data.insert(std::make_pair(0x1da30,"SIGNWRITING EARS"));
        data.insert(std::make_pair(0x1da31,"SIGNWRITING NOSE NEUTRAL"));
        data.insert(std::make_pair(0x1da32,"SIGNWRITING NOSE CONTACT"));
        data.insert(std::make_pair(0x1da33,"SIGNWRITING NOSE WRINKLES"));
        data.insert(std::make_pair(0x1da34,"SIGNWRITING NOSE WIGGLES"));
        data.insert(std::make_pair(0x1da35,"SIGNWRITING AIR BLOWING OUT"));
        data.insert(std::make_pair(0x1da36,"SIGNWRITING AIR SUCKING IN"));
        data.insert(std::make_pair(0x1da37,"SIGNWRITING AIR BLOW SMALL ROTATIONS"));
        data.insert(std::make_pair(0x1da38,"SIGNWRITING AIR SUCK SMALL ROTATIONS"));
        data.insert(std::make_pair(0x1da39,"SIGNWRITING BREATH INHALE"));
        data.insert(std::make_pair(0x1da3a,"SIGNWRITING BREATH EXHALE"));
        data.insert(std::make_pair(0x1da3b,"SIGNWRITING MOUTH CLOSED NEUTRAL"));
        data.insert(std::make_pair(0x1da3c,"SIGNWRITING MOUTH CLOSED FORWARD"));
        data.insert(std::make_pair(0x1da3d,"SIGNWRITING MOUTH CLOSED CONTACT"));
        data.insert(std::make_pair(0x1da3e,"SIGNWRITING MOUTH SMILE"));
        data.insert(std::make_pair(0x1da3f,"SIGNWRITING MOUTH SMILE WRINKLED"));
        data.insert(std::make_pair(0x1da40,"SIGNWRITING MOUTH SMILE OPEN"));
        data.insert(std::make_pair(0x1da41,"SIGNWRITING MOUTH FROWN"));
        data.insert(std::make_pair(0x1da42,"SIGNWRITING MOUTH FROWN WRINKLED"));
        data.insert(std::make_pair(0x1da43,"SIGNWRITING MOUTH FROWN OPEN"));
        data.insert(std::make_pair(0x1da44,"SIGNWRITING MOUTH OPEN CIRCLE"));
        data.insert(std::make_pair(0x1da45,"SIGNWRITING MOUTH OPEN FORWARD"));
        data.insert(std::make_pair(0x1da46,"SIGNWRITING MOUTH OPEN WRINKLED"));
        data.insert(std::make_pair(0x1da47,"SIGNWRITING MOUTH OPEN OVAL"));
        data.insert(std::make_pair(0x1da48,"SIGNWRITING MOUTH OPEN OVAL WRINKLED"));
        data.insert(std::make_pair(0x1da49,"SIGNWRITING MOUTH OPEN OVAL YAWN"));
        data.insert(std::make_pair(0x1da4a,"SIGNWRITING MOUTH OPEN RECTANGLE"));
        data.insert(std::make_pair(0x1da4b,"SIGNWRITING MOUTH OPEN RECTANGLE WRINKLED"));
        data.insert(std::make_pair(0x1da4c,"SIGNWRITING MOUTH OPEN RECTANGLE YAWN"));
        data.insert(std::make_pair(0x1da4d,"SIGNWRITING MOUTH KISS"));
        data.insert(std::make_pair(0x1da4e,"SIGNWRITING MOUTH KISS FORWARD"));
        data.insert(std::make_pair(0x1da4f,"SIGNWRITING MOUTH KISS WRINKLED"));
        data.insert(std::make_pair(0x1da50,"SIGNWRITING MOUTH TENSE"));
        data.insert(std::make_pair(0x1da51,"SIGNWRITING MOUTH TENSE FORWARD"));
        data.insert(std::make_pair(0x1da52,"SIGNWRITING MOUTH TENSE SUCKED"));
        data.insert(std::make_pair(0x1da53,"SIGNWRITING LIPS PRESSED TOGETHER"));
        data.insert(std::make_pair(0x1da54,"SIGNWRITING LIP LOWER OVER UPPER"));
        data.insert(std::make_pair(0x1da55,"SIGNWRITING LIP UPPER OVER LOWER"));
        data.insert(std::make_pair(0x1da56,"SIGNWRITING MOUTH CORNERS"));
        data.insert(std::make_pair(0x1da57,"SIGNWRITING MOUTH WRINKLES SINGLE"));
        data.insert(std::make_pair(0x1da58,"SIGNWRITING MOUTH WRINKLES DOUBLE"));
        data.insert(std::make_pair(0x1da59,"SIGNWRITING TONGUE STICKING OUT FAR"));
        data.insert(std::make_pair(0x1da5a,"SIGNWRITING TONGUE LICKING LIPS"));
        data.insert(std::make_pair(0x1da5b,"SIGNWRITING TONGUE TIP BETWEEN LIPS"));
        data.insert(std::make_pair(0x1da5c,"SIGNWRITING TONGUE TIP TOUCHING INSIDE MOUTH"));
        data.insert(std::make_pair(0x1da5d,"SIGNWRITING TONGUE INSIDE MOUTH RELAXED"));
        data.insert(std::make_pair(0x1da5e,"SIGNWRITING TONGUE MOVES AGAINST CHEEK"));
        data.insert(std::make_pair(0x1da5f,"SIGNWRITING TONGUE CENTRE STICKING OUT"));
        data.insert(std::make_pair(0x1da60,"SIGNWRITING TONGUE CENTRE INSIDE MOUTH"));
        data.insert(std::make_pair(0x1da61,"SIGNWRITING TEETH"));
        data.insert(std::make_pair(0x1da62,"SIGNWRITING TEETH MOVEMENT"));
        data.insert(std::make_pair(0x1da63,"SIGNWRITING TEETH ON TONGUE"));
        data.insert(std::make_pair(0x1da64,"SIGNWRITING TEETH ON TONGUE MOVEMENT"));
        data.insert(std::make_pair(0x1da65,"SIGNWRITING TEETH ON LIPS"));
        data.insert(std::make_pair(0x1da66,"SIGNWRITING TEETH ON LIPS MOVEMENT"));
        data.insert(std::make_pair(0x1da67,"SIGNWRITING TEETH BITE LIPS"));
        data.insert(std::make_pair(0x1da68,"SIGNWRITING MOVEMENT-WALLPLANE JAW"));
        data.insert(std::make_pair(0x1da69,"SIGNWRITING MOVEMENT-FLOORPLANE JAW"));
        data.insert(std::make_pair(0x1da6a,"SIGNWRITING NECK"));
        data.insert(std::make_pair(0x1da6b,"SIGNWRITING HAIR"));
        data.insert(std::make_pair(0x1da6c,"SIGNWRITING EXCITEMENT"));
        data.insert(std::make_pair(0x1da6d,"SIGNWRITING SHOULDER HIP SPINE"));
        data.insert(std::make_pair(0x1da6e,"SIGNWRITING SHOULDER HIP POSITIONS"));
        data.insert(std::make_pair(0x1da6f,"SIGNWRITING WALLPLANE SHOULDER HIP MOVE"));
        data.insert(std::make_pair(0x1da70,"SIGNWRITING FLOORPLANE SHOULDER HIP MOVE"));
        data.insert(std::make_pair(0x1da71,"SIGNWRITING SHOULDER TILTING FROM WAIST"));
        data.insert(std::make_pair(0x1da72,"SIGNWRITING TORSO-WALLPLANE STRAIGHT STRETCH"));
        data.insert(std::make_pair(0x1da73,"SIGNWRITING TORSO-WALLPLANE CURVED BEND"));
        data.insert(std::make_pair(0x1da74,"SIGNWRITING TORSO-FLOORPLANE TWISTING"));
        data.insert(std::make_pair(0x1da75,"SIGNWRITING UPPER BODY TILTING FROM HIP JOINTS"));
        data.insert(std::make_pair(0x1da76,"SIGNWRITING LIMB COMBINATION"));
        data.insert(std::make_pair(0x1da77,"SIGNWRITING LIMB LENGTH-1"));
        data.insert(std::make_pair(0x1da78,"SIGNWRITING LIMB LENGTH-2"));
        data.insert(std::make_pair(0x1da79,"SIGNWRITING LIMB LENGTH-3"));
        data.insert(std::make_pair(0x1da7a,"SIGNWRITING LIMB LENGTH-4"));
        data.insert(std::make_pair(0x1da7b,"SIGNWRITING LIMB LENGTH-5"));
        data.insert(std::make_pair(0x1da7c,"SIGNWRITING LIMB LENGTH-6"));
        data.insert(std::make_pair(0x1da7d,"SIGNWRITING LIMB LENGTH-7"));
        data.insert(std::make_pair(0x1da7e,"SIGNWRITING FINGER"));
        data.insert(std::make_pair(0x1da7f,"SIGNWRITING LOCATION-WALLPLANE SPACE"));
        data.insert(std::make_pair(0x1da80,"SIGNWRITING LOCATION-FLOORPLANE SPACE"));
        data.insert(std::make_pair(0x1da81,"SIGNWRITING LOCATION HEIGHT"));
        data.insert(std::make_pair(0x1da82,"SIGNWRITING LOCATION WIDTH"));
        data.insert(std::make_pair(0x1da83,"SIGNWRITING LOCATION DEPTH"));
        data.insert(std::make_pair(0x1da84,"SIGNWRITING LOCATION HEAD NECK"));
        data.insert(std::make_pair(0x1da85,"SIGNWRITING LOCATION TORSO"));
        data.insert(std::make_pair(0x1da86,"SIGNWRITING LOCATION LIMBS DIGITS"));
        data.insert(std::make_pair(0x1da87,"SIGNWRITING COMMA"));
        data.insert(std::make_pair(0x1da88,"SIGNWRITING FULL STOP"));
        data.insert(std::make_pair(0x1da89,"SIGNWRITING SEMICOLON"));
        data.insert(std::make_pair(0x1da8a,"SIGNWRITING COLON"));
        data.insert(std::make_pair(0x1da8b,"SIGNWRITING PARENTHESIS"));
        data.insert(std::make_pair(0x1da9b,"SIGNWRITING FILL MODIFIER-2"));
        data.insert(std::make_pair(0x1da9c,"SIGNWRITING FILL MODIFIER-3"));
        data.insert(std::make_pair(0x1da9d,"SIGNWRITING FILL MODIFIER-4"));
        data.insert(std::make_pair(0x1da9e,"SIGNWRITING FILL MODIFIER-5"));
        data.insert(std::make_pair(0x1da9f,"SIGNWRITING FILL MODIFIER-6"));
        data.insert(std::make_pair(0x1daa1,"SIGNWRITING ROTATION MODIFIER-2"));
        data.insert(std::make_pair(0x1daa2,"SIGNWRITING ROTATION MODIFIER-3"));
        data.insert(std::make_pair(0x1daa3,"SIGNWRITING ROTATION MODIFIER-4"));
        data.insert(std::make_pair(0x1daa4,"SIGNWRITING ROTATION MODIFIER-5"));
        data.insert(std::make_pair(0x1daa5,"SIGNWRITING ROTATION MODIFIER-6"));
        data.insert(std::make_pair(0x1daa6,"SIGNWRITING ROTATION MODIFIER-7"));
        data.insert(std::make_pair(0x1daa7,"SIGNWRITING ROTATION MODIFIER-8"));
        data.insert(std::make_pair(0x1daa8,"SIGNWRITING ROTATION MODIFIER-9"));
        data.insert(std::make_pair(0x1daa9,"SIGNWRITING ROTATION MODIFIER-10"));
        data.insert(std::make_pair(0x1daaa,"SIGNWRITING ROTATION MODIFIER-11"));
        data.insert(std::make_pair(0x1daab,"SIGNWRITING ROTATION MODIFIER-12"));
        data.insert(std::make_pair(0x1daac,"SIGNWRITING ROTATION MODIFIER-13"));
        data.insert(std::make_pair(0x1daad,"SIGNWRITING ROTATION MODIFIER-14"));
        data.insert(std::make_pair(0x1daae,"SIGNWRITING ROTATION MODIFIER-15"));
        data.insert(std::make_pair(0x1daaf,"SIGNWRITING ROTATION MODIFIER-16"));
        data.insert(std::make_pair(0x1df00,"LATIN SMALL LETTER FENG DIGRAPH WITH TRILL"));
        data.insert(std::make_pair(0x1df01,"LATIN SMALL LETTER REVERSED SCRIPT G"));
        data.insert(std::make_pair(0x1df02,"LATIN LETTER SMALL CAPITAL TURNED G"));
        data.insert(std::make_pair(0x1df03,"LATIN SMALL LETTER REVERSED K"));
        data.insert(std::make_pair(0x1df04,"LATIN LETTER SMALL CAPITAL L WITH BELT"));
        data.insert(std::make_pair(0x1df05,"LATIN SMALL LETTER LEZH WITH RETROFLEX HOOK"));
        data.insert(std::make_pair(0x1df06,"LATIN SMALL LETTER TURNED Y WITH BELT"));
        data.insert(std::make_pair(0x1df07,"LATIN SMALL LETTER REVERSED ENG"));
        data.insert(std::make_pair(0x1df08,"LATIN SMALL LETTER TURNED R WITH LONG LEG AND RETROFLEX HOOK"));
        data.insert(std::make_pair(0x1df09,"LATIN SMALL LETTER T WITH HOOK AND RETROFLEX HOOK"));
        data.insert(std::make_pair(0x1df0a,"LATIN LETTER RETROFLEX CLICK WITH RETROFLEX HOOK"));
        data.insert(std::make_pair(0x1df0b,"LATIN SMALL LETTER ESH WITH DOUBLE BAR"));
        data.insert(std::make_pair(0x1df0c,"LATIN SMALL LETTER ESH WITH DOUBLE BAR AND CURL"));
        data.insert(std::make_pair(0x1df0d,"LATIN SMALL LETTER TURNED T WITH CURL"));
        data.insert(std::make_pair(0x1df0e,"LATIN LETTER INVERTED GLOTTAL STOP WITH CURL"));
        data.insert(std::make_pair(0x1df0f,"LATIN LETTER STRETCHED C WITH CURL"));
        data.insert(std::make_pair(0x1df10,"LATIN LETTER SMALL CAPITAL TURNED K"));
        data.insert(std::make_pair(0x1df11,"LATIN SMALL LETTER L WITH FISHHOOK"));
        data.insert(std::make_pair(0x1df12,"LATIN SMALL LETTER DEZH DIGRAPH WITH PALATAL HOOK"));
        data.insert(std::make_pair(0x1df13,"LATIN SMALL LETTER L WITH BELT AND PALATAL HOOK"));
        data.insert(std::make_pair(0x1df14,"LATIN SMALL LETTER ENG WITH PALATAL HOOK"));
        data.insert(std::make_pair(0x1df15,"LATIN SMALL LETTER TURNED R WITH PALATAL HOOK"));
        data.insert(std::make_pair(0x1df16,"LATIN SMALL LETTER R WITH FISHHOOK AND PALATAL HOOK"));
        data.insert(std::make_pair(0x1df17,"LATIN SMALL LETTER TESH DIGRAPH WITH PALATAL HOOK"));
        data.insert(std::make_pair(0x1df18,"LATIN SMALL LETTER EZH WITH PALATAL HOOK"));
        data.insert(std::make_pair(0x1df19,"LATIN SMALL LETTER DEZH DIGRAPH WITH RETROFLEX HOOK"));
        data.insert(std::make_pair(0x1df1a,"LATIN SMALL LETTER I WITH STROKE AND RETROFLEX HOOK"));
        data.insert(std::make_pair(0x1df1b,"LATIN SMALL LETTER O WITH RETROFLEX HOOK"));
        data.insert(std::make_pair(0x1df1c,"LATIN SMALL LETTER TESH DIGRAPH WITH RETROFLEX HOOK"));
        data.insert(std::make_pair(0x1df1d,"LATIN SMALL LETTER C WITH RETROFLEX HOOK"));
        data.insert(std::make_pair(0x1df1e,"LATIN SMALL LETTER S WITH CURL"));
        data.insert(std::make_pair(0x1df25,"LATIN SMALL LETTER D WITH MID-HEIGHT LEFT HOOK"));
        data.insert(std::make_pair(0x1df26,"LATIN SMALL LETTER L WITH MID-HEIGHT LEFT HOOK"));
        data.insert(std::make_pair(0x1df27,"LATIN SMALL LETTER N WITH MID-HEIGHT LEFT HOOK"));
        data.insert(std::make_pair(0x1df28,"LATIN SMALL LETTER R WITH MID-HEIGHT LEFT HOOK"));
        data.insert(std::make_pair(0x1df29,"LATIN SMALL LETTER S WITH MID-HEIGHT LEFT HOOK"));
        data.insert(std::make_pair(0x1df2a,"LATIN SMALL LETTER T WITH MID-HEIGHT LEFT HOOK"));
        data.insert(std::make_pair(0x1e000,"COMBINING GLAGOLITIC LETTER AZU"));
        data.insert(std::make_pair(0x1e001,"COMBINING GLAGOLITIC LETTER BUKY"));
        data.insert(std::make_pair(0x1e002,"COMBINING GLAGOLITIC LETTER VEDE"));
        data.insert(std::make_pair(0x1e003,"COMBINING GLAGOLITIC LETTER GLAGOLI"));
        data.insert(std::make_pair(0x1e004,"COMBINING GLAGOLITIC LETTER DOBRO"));
        data.insert(std::make_pair(0x1e005,"COMBINING GLAGOLITIC LETTER YESTU"));
        data.insert(std::make_pair(0x1e006,"COMBINING GLAGOLITIC LETTER ZHIVETE"));
        data.insert(std::make_pair(0x1e008,"COMBINING GLAGOLITIC LETTER ZEMLJA"));
        data.insert(std::make_pair(0x1e009,"COMBINING GLAGOLITIC LETTER IZHE"));
        data.insert(std::make_pair(0x1e00a,"COMBINING GLAGOLITIC LETTER INITIAL IZHE"));
        data.insert(std::make_pair(0x1e00b,"COMBINING GLAGOLITIC LETTER I"));
        data.insert(std::make_pair(0x1e00c,"COMBINING GLAGOLITIC LETTER DJERVI"));
        data.insert(std::make_pair(0x1e00d,"COMBINING GLAGOLITIC LETTER KAKO"));
        data.insert(std::make_pair(0x1e00e,"COMBINING GLAGOLITIC LETTER LJUDIJE"));
        data.insert(std::make_pair(0x1e00f,"COMBINING GLAGOLITIC LETTER MYSLITE"));
        data.insert(std::make_pair(0x1e010,"COMBINING GLAGOLITIC LETTER NASHI"));
        data.insert(std::make_pair(0x1e011,"COMBINING GLAGOLITIC LETTER ONU"));
        data.insert(std::make_pair(0x1e012,"COMBINING GLAGOLITIC LETTER POKOJI"));
        data.insert(std::make_pair(0x1e013,"COMBINING GLAGOLITIC LETTER RITSI"));
        data.insert(std::make_pair(0x1e014,"COMBINING GLAGOLITIC LETTER SLOVO"));
        data.insert(std::make_pair(0x1e015,"COMBINING GLAGOLITIC LETTER TVRIDO"));
        data.insert(std::make_pair(0x1e016,"COMBINING GLAGOLITIC LETTER UKU"));
        data.insert(std::make_pair(0x1e017,"COMBINING GLAGOLITIC LETTER FRITU"));
        data.insert(std::make_pair(0x1e018,"COMBINING GLAGOLITIC LETTER HERU"));
        data.insert(std::make_pair(0x1e01b,"COMBINING GLAGOLITIC LETTER SHTA"));
        data.insert(std::make_pair(0x1e01c,"COMBINING GLAGOLITIC LETTER TSI"));
        data.insert(std::make_pair(0x1e01d,"COMBINING GLAGOLITIC LETTER CHRIVI"));
        data.insert(std::make_pair(0x1e01e,"COMBINING GLAGOLITIC LETTER SHA"));
        data.insert(std::make_pair(0x1e01f,"COMBINING GLAGOLITIC LETTER YERU"));
        data.insert(std::make_pair(0x1e020,"COMBINING GLAGOLITIC LETTER YERI"));
        data.insert(std::make_pair(0x1e021,"COMBINING GLAGOLITIC LETTER YATI"));
        data.insert(std::make_pair(0x1e023,"COMBINING GLAGOLITIC LETTER YU"));
        data.insert(std::make_pair(0x1e024,"COMBINING GLAGOLITIC LETTER SMALL YUS"));
        data.insert(std::make_pair(0x1e026,"COMBINING GLAGOLITIC LETTER YO"));
        data.insert(std::make_pair(0x1e027,"COMBINING GLAGOLITIC LETTER IOTATED SMALL YUS"));
        data.insert(std::make_pair(0x1e028,"COMBINING GLAGOLITIC LETTER BIG YUS"));
        data.insert(std::make_pair(0x1e029,"COMBINING GLAGOLITIC LETTER IOTATED BIG YUS"));
        data.insert(std::make_pair(0x1e02a,"COMBINING GLAGOLITIC LETTER FITA"));
        data.insert(std::make_pair(0x1e030,"MODIFIER LETTER CYRILLIC SMALL A"));
        data.insert(std::make_pair(0x1e031,"MODIFIER LETTER CYRILLIC SMALL BE"));
        data.insert(std::make_pair(0x1e032,"MODIFIER LETTER CYRILLIC SMALL VE"));
        data.insert(std::make_pair(0x1e033,"MODIFIER LETTER CYRILLIC SMALL GHE"));
        data.insert(std::make_pair(0x1e034,"MODIFIER LETTER CYRILLIC SMALL DE"));
        data.insert(std::make_pair(0x1e035,"MODIFIER LETTER CYRILLIC SMALL IE"));
        data.insert(std::make_pair(0x1e036,"MODIFIER LETTER CYRILLIC SMALL ZHE"));
        data.insert(std::make_pair(0x1e037,"MODIFIER LETTER CYRILLIC SMALL ZE"));
        data.insert(std::make_pair(0x1e038,"MODIFIER LETTER CYRILLIC SMALL I"));
        data.insert(std::make_pair(0x1e039,"MODIFIER LETTER CYRILLIC SMALL KA"));
        data.insert(std::make_pair(0x1e03a,"MODIFIER LETTER CYRILLIC SMALL EL"));
        data.insert(std::make_pair(0x1e03b,"MODIFIER LETTER CYRILLIC SMALL EM"));
        data.insert(std::make_pair(0x1e03c,"MODIFIER LETTER CYRILLIC SMALL O"));
        data.insert(std::make_pair(0x1e03d,"MODIFIER LETTER CYRILLIC SMALL PE"));
        data.insert(std::make_pair(0x1e03e,"MODIFIER LETTER CYRILLIC SMALL ER"));
        data.insert(std::make_pair(0x1e03f,"MODIFIER LETTER CYRILLIC SMALL ES"));
        data.insert(std::make_pair(0x1e040,"MODIFIER LETTER CYRILLIC SMALL TE"));
        data.insert(std::make_pair(0x1e041,"MODIFIER LETTER CYRILLIC SMALL U"));
        data.insert(std::make_pair(0x1e042,"MODIFIER LETTER CYRILLIC SMALL EF"));
        data.insert(std::make_pair(0x1e043,"MODIFIER LETTER CYRILLIC SMALL HA"));
        data.insert(std::make_pair(0x1e044,"MODIFIER LETTER CYRILLIC SMALL TSE"));
        data.insert(std::make_pair(0x1e045,"MODIFIER LETTER CYRILLIC SMALL CHE"));
        data.insert(std::make_pair(0x1e046,"MODIFIER LETTER CYRILLIC SMALL SHA"));
        data.insert(std::make_pair(0x1e047,"MODIFIER LETTER CYRILLIC SMALL YERU"));
        data.insert(std::make_pair(0x1e048,"MODIFIER LETTER CYRILLIC SMALL E"));
        data.insert(std::make_pair(0x1e049,"MODIFIER LETTER CYRILLIC SMALL YU"));
        data.insert(std::make_pair(0x1e04a,"MODIFIER LETTER CYRILLIC SMALL DZZE"));
        data.insert(std::make_pair(0x1e04b,"MODIFIER LETTER CYRILLIC SMALL SCHWA"));
        data.insert(std::make_pair(0x1e04c,"MODIFIER LETTER CYRILLIC SMALL BYELORUSSIAN-UKRAINIAN I"));
        data.insert(std::make_pair(0x1e04d,"MODIFIER LETTER CYRILLIC SMALL JE"));
        data.insert(std::make_pair(0x1e04e,"MODIFIER LETTER CYRILLIC SMALL BARRED O"));
        data.insert(std::make_pair(0x1e04f,"MODIFIER LETTER CYRILLIC SMALL STRAIGHT U"));
        data.insert(std::make_pair(0x1e050,"MODIFIER LETTER CYRILLIC SMALL PALOCHKA"));
        data.insert(std::make_pair(0x1e051,"CYRILLIC SUBSCRIPT SMALL LETTER A"));
        data.insert(std::make_pair(0x1e052,"CYRILLIC SUBSCRIPT SMALL LETTER BE"));
        data.insert(std::make_pair(0x1e053,"CYRILLIC SUBSCRIPT SMALL LETTER VE"));
        data.insert(std::make_pair(0x1e054,"CYRILLIC SUBSCRIPT SMALL LETTER GHE"));
        data.insert(std::make_pair(0x1e055,"CYRILLIC SUBSCRIPT SMALL LETTER DE"));
        data.insert(std::make_pair(0x1e056,"CYRILLIC SUBSCRIPT SMALL LETTER IE"));
        data.insert(std::make_pair(0x1e057,"CYRILLIC SUBSCRIPT SMALL LETTER ZHE"));
        data.insert(std::make_pair(0x1e058,"CYRILLIC SUBSCRIPT SMALL LETTER ZE"));
        data.insert(std::make_pair(0x1e059,"CYRILLIC SUBSCRIPT SMALL LETTER I"));
        data.insert(std::make_pair(0x1e05a,"CYRILLIC SUBSCRIPT SMALL LETTER KA"));
        data.insert(std::make_pair(0x1e05b,"CYRILLIC SUBSCRIPT SMALL LETTER EL"));
        data.insert(std::make_pair(0x1e05c,"CYRILLIC SUBSCRIPT SMALL LETTER O"));
        data.insert(std::make_pair(0x1e05d,"CYRILLIC SUBSCRIPT SMALL LETTER PE"));
        data.insert(std::make_pair(0x1e05e,"CYRILLIC SUBSCRIPT SMALL LETTER ES"));
        data.insert(std::make_pair(0x1e05f,"CYRILLIC SUBSCRIPT SMALL LETTER U"));
        data.insert(std::make_pair(0x1e060,"CYRILLIC SUBSCRIPT SMALL LETTER EF"));
        data.insert(std::make_pair(0x1e061,"CYRILLIC SUBSCRIPT SMALL LETTER HA"));
        data.insert(std::make_pair(0x1e062,"CYRILLIC SUBSCRIPT SMALL LETTER TSE"));
        data.insert(std::make_pair(0x1e063,"CYRILLIC SUBSCRIPT SMALL LETTER CHE"));
        data.insert(std::make_pair(0x1e064,"CYRILLIC SUBSCRIPT SMALL LETTER SHA"));
        data.insert(std::make_pair(0x1e065,"CYRILLIC SUBSCRIPT SMALL LETTER HARD SIGN"));
        data.insert(std::make_pair(0x1e066,"CYRILLIC SUBSCRIPT SMALL LETTER YERU"));
        data.insert(std::make_pair(0x1e067,"CYRILLIC SUBSCRIPT SMALL LETTER GHE WITH UPTURN"));
        data.insert(std::make_pair(0x1e068,"CYRILLIC SUBSCRIPT SMALL LETTER BYELORUSSIAN-UKRAINIAN I"));
        data.insert(std::make_pair(0x1e069,"CYRILLIC SUBSCRIPT SMALL LETTER DZE"));
        data.insert(std::make_pair(0x1e06a,"CYRILLIC SUBSCRIPT SMALL LETTER DZHE"));
        data.insert(std::make_pair(0x1e06b,"MODIFIER LETTER CYRILLIC SMALL ES WITH DESCENDER"));
        data.insert(std::make_pair(0x1e06c,"MODIFIER LETTER CYRILLIC SMALL YERU WITH BACK YER"));
        data.insert(std::make_pair(0x1e06d,"MODIFIER LETTER CYRILLIC SMALL STRAIGHT U WITH STROKE"));
        data.insert(std::make_pair(0x1e08f,"COMBINING CYRILLIC SMALL LETTER BYELORUSSIAN-UKRAINIAN I"));
        data.insert(std::make_pair(0x1e100,"NYIAKENG PUACHUE HMONG LETTER MA"));
        data.insert(std::make_pair(0x1e101,"NYIAKENG PUACHUE HMONG LETTER TSA"));
        data.insert(std::make_pair(0x1e102,"NYIAKENG PUACHUE HMONG LETTER NTA"));
        data.insert(std::make_pair(0x1e103,"NYIAKENG PUACHUE HMONG LETTER TA"));
        data.insert(std::make_pair(0x1e104,"NYIAKENG PUACHUE HMONG LETTER HA"));
        data.insert(std::make_pair(0x1e105,"NYIAKENG PUACHUE HMONG LETTER NA"));
        data.insert(std::make_pair(0x1e106,"NYIAKENG PUACHUE HMONG LETTER XA"));
        data.insert(std::make_pair(0x1e107,"NYIAKENG PUACHUE HMONG LETTER NKA"));
        data.insert(std::make_pair(0x1e108,"NYIAKENG PUACHUE HMONG LETTER CA"));
        data.insert(std::make_pair(0x1e109,"NYIAKENG PUACHUE HMONG LETTER LA"));
        data.insert(std::make_pair(0x1e10a,"NYIAKENG PUACHUE HMONG LETTER SA"));
        data.insert(std::make_pair(0x1e10b,"NYIAKENG PUACHUE HMONG LETTER ZA"));
        data.insert(std::make_pair(0x1e10c,"NYIAKENG PUACHUE HMONG LETTER NCA"));
        data.insert(std::make_pair(0x1e10d,"NYIAKENG PUACHUE HMONG LETTER NTSA"));
        data.insert(std::make_pair(0x1e10e,"NYIAKENG PUACHUE HMONG LETTER KA"));
        data.insert(std::make_pair(0x1e10f,"NYIAKENG PUACHUE HMONG LETTER DA"));
        data.insert(std::make_pair(0x1e110,"NYIAKENG PUACHUE HMONG LETTER NYA"));
        data.insert(std::make_pair(0x1e111,"NYIAKENG PUACHUE HMONG LETTER NRA"));
        data.insert(std::make_pair(0x1e112,"NYIAKENG PUACHUE HMONG LETTER VA"));
        data.insert(std::make_pair(0x1e113,"NYIAKENG PUACHUE HMONG LETTER NTXA"));
        data.insert(std::make_pair(0x1e114,"NYIAKENG PUACHUE HMONG LETTER TXA"));
        data.insert(std::make_pair(0x1e115,"NYIAKENG PUACHUE HMONG LETTER FA"));
        data.insert(std::make_pair(0x1e116,"NYIAKENG PUACHUE HMONG LETTER RA"));
        data.insert(std::make_pair(0x1e117,"NYIAKENG PUACHUE HMONG LETTER QA"));
        data.insert(std::make_pair(0x1e118,"NYIAKENG PUACHUE HMONG LETTER YA"));
        data.insert(std::make_pair(0x1e119,"NYIAKENG PUACHUE HMONG LETTER NQA"));
        data.insert(std::make_pair(0x1e11a,"NYIAKENG PUACHUE HMONG LETTER PA"));
        data.insert(std::make_pair(0x1e11b,"NYIAKENG PUACHUE HMONG LETTER XYA"));
        data.insert(std::make_pair(0x1e11c,"NYIAKENG PUACHUE HMONG LETTER NPA"));
        data.insert(std::make_pair(0x1e11d,"NYIAKENG PUACHUE HMONG LETTER DLA"));
        data.insert(std::make_pair(0x1e11e,"NYIAKENG PUACHUE HMONG LETTER NPLA"));
        data.insert(std::make_pair(0x1e11f,"NYIAKENG PUACHUE HMONG LETTER HAH"));
        data.insert(std::make_pair(0x1e120,"NYIAKENG PUACHUE HMONG LETTER MLA"));
        data.insert(std::make_pair(0x1e121,"NYIAKENG PUACHUE HMONG LETTER PLA"));
        data.insert(std::make_pair(0x1e122,"NYIAKENG PUACHUE HMONG LETTER GA"));
        data.insert(std::make_pair(0x1e123,"NYIAKENG PUACHUE HMONG LETTER RRA"));
        data.insert(std::make_pair(0x1e124,"NYIAKENG PUACHUE HMONG LETTER A"));
        data.insert(std::make_pair(0x1e125,"NYIAKENG PUACHUE HMONG LETTER AA"));
        data.insert(std::make_pair(0x1e126,"NYIAKENG PUACHUE HMONG LETTER I"));
        data.insert(std::make_pair(0x1e127,"NYIAKENG PUACHUE HMONG LETTER U"));
        data.insert(std::make_pair(0x1e128,"NYIAKENG PUACHUE HMONG LETTER O"));
        data.insert(std::make_pair(0x1e129,"NYIAKENG PUACHUE HMONG LETTER OO"));
        data.insert(std::make_pair(0x1e12a,"NYIAKENG PUACHUE HMONG LETTER E"));
        data.insert(std::make_pair(0x1e12b,"NYIAKENG PUACHUE HMONG LETTER EE"));
        data.insert(std::make_pair(0x1e12c,"NYIAKENG PUACHUE HMONG LETTER W"));
        data.insert(std::make_pair(0x1e130,"NYIAKENG PUACHUE HMONG TONE-B"));
        data.insert(std::make_pair(0x1e131,"NYIAKENG PUACHUE HMONG TONE-M"));
        data.insert(std::make_pair(0x1e132,"NYIAKENG PUACHUE HMONG TONE-J"));
        data.insert(std::make_pair(0x1e133,"NYIAKENG PUACHUE HMONG TONE-V"));
        data.insert(std::make_pair(0x1e134,"NYIAKENG PUACHUE HMONG TONE-S"));
        data.insert(std::make_pair(0x1e135,"NYIAKENG PUACHUE HMONG TONE-G"));
        data.insert(std::make_pair(0x1e136,"NYIAKENG PUACHUE HMONG TONE-D"));
        data.insert(std::make_pair(0x1e137,"NYIAKENG PUACHUE HMONG SIGN FOR PERSON"));
        data.insert(std::make_pair(0x1e138,"NYIAKENG PUACHUE HMONG SIGN FOR THING"));
        data.insert(std::make_pair(0x1e139,"NYIAKENG PUACHUE HMONG SIGN FOR LOCATION"));
        data.insert(std::make_pair(0x1e13a,"NYIAKENG PUACHUE HMONG SIGN FOR ANIMAL"));
        data.insert(std::make_pair(0x1e13b,"NYIAKENG PUACHUE HMONG SIGN FOR INVERTEBRATE"));
        data.insert(std::make_pair(0x1e13c,"NYIAKENG PUACHUE HMONG SIGN XW XW"));
        data.insert(std::make_pair(0x1e13d,"NYIAKENG PUACHUE HMONG SYLLABLE LENGTHENER"));
        data.insert(std::make_pair(0x1e140,"NYIAKENG PUACHUE HMONG DIGIT ZERO"));
        data.insert(std::make_pair(0x1e141,"NYIAKENG PUACHUE HMONG DIGIT ONE"));
        data.insert(std::make_pair(0x1e142,"NYIAKENG PUACHUE HMONG DIGIT TWO"));
        data.insert(std::make_pair(0x1e143,"NYIAKENG PUACHUE HMONG DIGIT THREE"));
        data.insert(std::make_pair(0x1e144,"NYIAKENG PUACHUE HMONG DIGIT FOUR"));
        data.insert(std::make_pair(0x1e145,"NYIAKENG PUACHUE HMONG DIGIT FIVE"));
        data.insert(std::make_pair(0x1e146,"NYIAKENG PUACHUE HMONG DIGIT SIX"));
        data.insert(std::make_pair(0x1e147,"NYIAKENG PUACHUE HMONG DIGIT SEVEN"));
        data.insert(std::make_pair(0x1e148,"NYIAKENG PUACHUE HMONG DIGIT EIGHT"));
        data.insert(std::make_pair(0x1e149,"NYIAKENG PUACHUE HMONG DIGIT NINE"));
        data.insert(std::make_pair(0x1e14e,"NYIAKENG PUACHUE HMONG LOGOGRAM NYAJ"));
        data.insert(std::make_pair(0x1e14f,"NYIAKENG PUACHUE HMONG CIRCLED CA"));
        data.insert(std::make_pair(0x1e290,"TOTO LETTER PA"));
        data.insert(std::make_pair(0x1e291,"TOTO LETTER BA"));
        data.insert(std::make_pair(0x1e292,"TOTO LETTER TA"));
        data.insert(std::make_pair(0x1e293,"TOTO LETTER DA"));
        data.insert(std::make_pair(0x1e294,"TOTO LETTER KA"));
        data.insert(std::make_pair(0x1e295,"TOTO LETTER GA"));
        data.insert(std::make_pair(0x1e296,"TOTO LETTER MA"));
        data.insert(std::make_pair(0x1e297,"TOTO LETTER NA"));
        data.insert(std::make_pair(0x1e298,"TOTO LETTER NGA"));
        data.insert(std::make_pair(0x1e299,"TOTO LETTER SA"));
        data.insert(std::make_pair(0x1e29a,"TOTO LETTER CHA"));
        data.insert(std::make_pair(0x1e29b,"TOTO LETTER YA"));
        data.insert(std::make_pair(0x1e29c,"TOTO LETTER WA"));
        data.insert(std::make_pair(0x1e29d,"TOTO LETTER JA"));
        data.insert(std::make_pair(0x1e29e,"TOTO LETTER HA"));
        data.insert(std::make_pair(0x1e29f,"TOTO LETTER RA"));
        data.insert(std::make_pair(0x1e2a0,"TOTO LETTER LA"));
        data.insert(std::make_pair(0x1e2a1,"TOTO LETTER I"));
        data.insert(std::make_pair(0x1e2a2,"TOTO LETTER BREATHY I"));
        data.insert(std::make_pair(0x1e2a3,"TOTO LETTER IU"));
        data.insert(std::make_pair(0x1e2a4,"TOTO LETTER BREATHY IU"));
        data.insert(std::make_pair(0x1e2a5,"TOTO LETTER U"));
        data.insert(std::make_pair(0x1e2a6,"TOTO LETTER E"));
        data.insert(std::make_pair(0x1e2a7,"TOTO LETTER BREATHY E"));
        data.insert(std::make_pair(0x1e2a8,"TOTO LETTER EO"));
        data.insert(std::make_pair(0x1e2a9,"TOTO LETTER BREATHY EO"));
        data.insert(std::make_pair(0x1e2aa,"TOTO LETTER O"));
        data.insert(std::make_pair(0x1e2ab,"TOTO LETTER AE"));
        data.insert(std::make_pair(0x1e2ac,"TOTO LETTER BREATHY AE"));
        data.insert(std::make_pair(0x1e2ad,"TOTO LETTER A"));
        data.insert(std::make_pair(0x1e2ae,"TOTO SIGN RISING TONE"));
        data.insert(std::make_pair(0x1e2c0,"WANCHO LETTER AA"));
        data.insert(std::make_pair(0x1e2c1,"WANCHO LETTER A"));
        data.insert(std::make_pair(0x1e2c2,"WANCHO LETTER BA"));
        data.insert(std::make_pair(0x1e2c3,"WANCHO LETTER CA"));
        data.insert(std::make_pair(0x1e2c4,"WANCHO LETTER DA"));
        data.insert(std::make_pair(0x1e2c5,"WANCHO LETTER GA"));
        data.insert(std::make_pair(0x1e2c6,"WANCHO LETTER YA"));
        data.insert(std::make_pair(0x1e2c7,"WANCHO LETTER PHA"));
        data.insert(std::make_pair(0x1e2c8,"WANCHO LETTER LA"));
        data.insert(std::make_pair(0x1e2c9,"WANCHO LETTER NA"));
        data.insert(std::make_pair(0x1e2ca,"WANCHO LETTER PA"));
        data.insert(std::make_pair(0x1e2cb,"WANCHO LETTER TA"));
        data.insert(std::make_pair(0x1e2cc,"WANCHO LETTER THA"));
        data.insert(std::make_pair(0x1e2cd,"WANCHO LETTER FA"));
        data.insert(std::make_pair(0x1e2ce,"WANCHO LETTER SA"));
        data.insert(std::make_pair(0x1e2cf,"WANCHO LETTER SHA"));
        data.insert(std::make_pair(0x1e2d0,"WANCHO LETTER JA"));
        data.insert(std::make_pair(0x1e2d1,"WANCHO LETTER ZA"));
        data.insert(std::make_pair(0x1e2d2,"WANCHO LETTER WA"));
        data.insert(std::make_pair(0x1e2d3,"WANCHO LETTER VA"));
        data.insert(std::make_pair(0x1e2d4,"WANCHO LETTER KA"));
        data.insert(std::make_pair(0x1e2d5,"WANCHO LETTER O"));
        data.insert(std::make_pair(0x1e2d6,"WANCHO LETTER AU"));
        data.insert(std::make_pair(0x1e2d7,"WANCHO LETTER RA"));
        data.insert(std::make_pair(0x1e2d8,"WANCHO LETTER MA"));
        data.insert(std::make_pair(0x1e2d9,"WANCHO LETTER KHA"));
        data.insert(std::make_pair(0x1e2da,"WANCHO LETTER HA"));
        data.insert(std::make_pair(0x1e2db,"WANCHO LETTER E"));
        data.insert(std::make_pair(0x1e2dc,"WANCHO LETTER I"));
        data.insert(std::make_pair(0x1e2dd,"WANCHO LETTER NGA"));
        data.insert(std::make_pair(0x1e2de,"WANCHO LETTER U"));
        data.insert(std::make_pair(0x1e2df,"WANCHO LETTER LLHA"));
        data.insert(std::make_pair(0x1e2e0,"WANCHO LETTER TSA"));
        data.insert(std::make_pair(0x1e2e1,"WANCHO LETTER TRA"));
        data.insert(std::make_pair(0x1e2e2,"WANCHO LETTER ONG"));
        data.insert(std::make_pair(0x1e2e3,"WANCHO LETTER AANG"));
        data.insert(std::make_pair(0x1e2e4,"WANCHO LETTER ANG"));
        data.insert(std::make_pair(0x1e2e5,"WANCHO LETTER ING"));
        data.insert(std::make_pair(0x1e2e6,"WANCHO LETTER ON"));
        data.insert(std::make_pair(0x1e2e7,"WANCHO LETTER EN"));
        data.insert(std::make_pair(0x1e2e8,"WANCHO LETTER AAN"));
        data.insert(std::make_pair(0x1e2e9,"WANCHO LETTER NYA"));
        data.insert(std::make_pair(0x1e2ea,"WANCHO LETTER UEN"));
        data.insert(std::make_pair(0x1e2eb,"WANCHO LETTER YIH"));
        data.insert(std::make_pair(0x1e2ec,"WANCHO TONE TUP"));
        data.insert(std::make_pair(0x1e2ed,"WANCHO TONE TUPNI"));
        data.insert(std::make_pair(0x1e2ee,"WANCHO TONE KOI"));
        data.insert(std::make_pair(0x1e2ef,"WANCHO TONE KOINI"));
        data.insert(std::make_pair(0x1e2f0,"WANCHO DIGIT ZERO"));
        data.insert(std::make_pair(0x1e2f1,"WANCHO DIGIT ONE"));
        data.insert(std::make_pair(0x1e2f2,"WANCHO DIGIT TWO"));
        data.insert(std::make_pair(0x1e2f3,"WANCHO DIGIT THREE"));
        data.insert(std::make_pair(0x1e2f4,"WANCHO DIGIT FOUR"));
        data.insert(std::make_pair(0x1e2f5,"WANCHO DIGIT FIVE"));
        data.insert(std::make_pair(0x1e2f6,"WANCHO DIGIT SIX"));
        data.insert(std::make_pair(0x1e2f7,"WANCHO DIGIT SEVEN"));
        data.insert(std::make_pair(0x1e2f8,"WANCHO DIGIT EIGHT"));
        data.insert(std::make_pair(0x1e2f9,"WANCHO DIGIT NINE"));
        data.insert(std::make_pair(0x1e2ff,"WANCHO NGUN SIGN"));
        data.insert(std::make_pair(0x1e4d0,"NAG MUNDARI LETTER O"));
        data.insert(std::make_pair(0x1e4d1,"NAG MUNDARI LETTER OP"));
        data.insert(std::make_pair(0x1e4d2,"NAG MUNDARI LETTER OL"));
        data.insert(std::make_pair(0x1e4d3,"NAG MUNDARI LETTER OY"));
        data.insert(std::make_pair(0x1e4d4,"NAG MUNDARI LETTER ONG"));
        data.insert(std::make_pair(0x1e4d5,"NAG MUNDARI LETTER A"));
        data.insert(std::make_pair(0x1e4d6,"NAG MUNDARI LETTER AJ"));
        data.insert(std::make_pair(0x1e4d7,"NAG MUNDARI LETTER AB"));
        data.insert(std::make_pair(0x1e4d8,"NAG MUNDARI LETTER ANY"));
        data.insert(std::make_pair(0x1e4d9,"NAG MUNDARI LETTER AH"));
        data.insert(std::make_pair(0x1e4da,"NAG MUNDARI LETTER I"));
        data.insert(std::make_pair(0x1e4db,"NAG MUNDARI LETTER IS"));
        data.insert(std::make_pair(0x1e4dc,"NAG MUNDARI LETTER IDD"));
        data.insert(std::make_pair(0x1e4dd,"NAG MUNDARI LETTER IT"));
        data.insert(std::make_pair(0x1e4de,"NAG MUNDARI LETTER IH"));
        data.insert(std::make_pair(0x1e4df,"NAG MUNDARI LETTER U"));
        data.insert(std::make_pair(0x1e4e0,"NAG MUNDARI LETTER UC"));
        data.insert(std::make_pair(0x1e4e1,"NAG MUNDARI LETTER UD"));
        data.insert(std::make_pair(0x1e4e2,"NAG MUNDARI LETTER UK"));
        data.insert(std::make_pair(0x1e4e3,"NAG MUNDARI LETTER UR"));
        data.insert(std::make_pair(0x1e4e4,"NAG MUNDARI LETTER E"));
        data.insert(std::make_pair(0x1e4e5,"NAG MUNDARI LETTER ENN"));
        data.insert(std::make_pair(0x1e4e6,"NAG MUNDARI LETTER EG"));
        data.insert(std::make_pair(0x1e4e7,"NAG MUNDARI LETTER EM"));
        data.insert(std::make_pair(0x1e4e8,"NAG MUNDARI LETTER EN"));
        data.insert(std::make_pair(0x1e4e9,"NAG MUNDARI LETTER ETT"));
        data.insert(std::make_pair(0x1e4ea,"NAG MUNDARI LETTER ELL"));
        data.insert(std::make_pair(0x1e4eb,"NAG MUNDARI SIGN OJOD"));
        data.insert(std::make_pair(0x1e4ec,"NAG MUNDARI SIGN MUHOR"));
        data.insert(std::make_pair(0x1e4ed,"NAG MUNDARI SIGN TOYOR"));
        data.insert(std::make_pair(0x1e4ee,"NAG MUNDARI SIGN IKIR"));
        data.insert(std::make_pair(0x1e4ef,"NAG MUNDARI SIGN SUTUH"));
        data.insert(std::make_pair(0x1e4f0,"NAG MUNDARI DIGIT ZERO"));
        data.insert(std::make_pair(0x1e4f1,"NAG MUNDARI DIGIT ONE"));
        data.insert(std::make_pair(0x1e4f2,"NAG MUNDARI DIGIT TWO"));
        data.insert(std::make_pair(0x1e4f3,"NAG MUNDARI DIGIT THREE"));
        data.insert(std::make_pair(0x1e4f4,"NAG MUNDARI DIGIT FOUR"));
        data.insert(std::make_pair(0x1e4f5,"NAG MUNDARI DIGIT FIVE"));
        data.insert(std::make_pair(0x1e4f6,"NAG MUNDARI DIGIT SIX"));
        data.insert(std::make_pair(0x1e4f7,"NAG MUNDARI DIGIT SEVEN"));
        data.insert(std::make_pair(0x1e4f8,"NAG MUNDARI DIGIT EIGHT"));
        data.insert(std::make_pair(0x1e4f9,"NAG MUNDARI DIGIT NINE"));
        data.insert(std::make_pair(0x1e7e0,"ETHIOPIC SYLLABLE HHYA"));
        data.insert(std::make_pair(0x1e7e1,"ETHIOPIC SYLLABLE HHYU"));
        data.insert(std::make_pair(0x1e7e2,"ETHIOPIC SYLLABLE HHYI"));
        data.insert(std::make_pair(0x1e7e3,"ETHIOPIC SYLLABLE HHYAA"));
        data.insert(std::make_pair(0x1e7e4,"ETHIOPIC SYLLABLE HHYEE"));
        data.insert(std::make_pair(0x1e7e5,"ETHIOPIC SYLLABLE HHYE"));
        data.insert(std::make_pair(0x1e7e6,"ETHIOPIC SYLLABLE HHYO"));
        data.insert(std::make_pair(0x1e7e8,"ETHIOPIC SYLLABLE GURAGE HHWA"));
        data.insert(std::make_pair(0x1e7e9,"ETHIOPIC SYLLABLE HHWI"));
        data.insert(std::make_pair(0x1e7ea,"ETHIOPIC SYLLABLE HHWEE"));
        data.insert(std::make_pair(0x1e7eb,"ETHIOPIC SYLLABLE HHWE"));
        data.insert(std::make_pair(0x1e7ed,"ETHIOPIC SYLLABLE GURAGE MWI"));
        data.insert(std::make_pair(0x1e7ee,"ETHIOPIC SYLLABLE GURAGE MWEE"));
        data.insert(std::make_pair(0x1e7f0,"ETHIOPIC SYLLABLE GURAGE QWI"));
        data.insert(std::make_pair(0x1e7f1,"ETHIOPIC SYLLABLE GURAGE QWEE"));
        data.insert(std::make_pair(0x1e7f2,"ETHIOPIC SYLLABLE GURAGE QWE"));
        data.insert(std::make_pair(0x1e7f3,"ETHIOPIC SYLLABLE GURAGE BWI"));
        data.insert(std::make_pair(0x1e7f4,"ETHIOPIC SYLLABLE GURAGE BWEE"));
        data.insert(std::make_pair(0x1e7f5,"ETHIOPIC SYLLABLE GURAGE KWI"));
        data.insert(std::make_pair(0x1e7f6,"ETHIOPIC SYLLABLE GURAGE KWEE"));
        data.insert(std::make_pair(0x1e7f7,"ETHIOPIC SYLLABLE GURAGE KWE"));
        data.insert(std::make_pair(0x1e7f8,"ETHIOPIC SYLLABLE GURAGE GWI"));
        data.insert(std::make_pair(0x1e7f9,"ETHIOPIC SYLLABLE GURAGE GWEE"));
        data.insert(std::make_pair(0x1e7fa,"ETHIOPIC SYLLABLE GURAGE GWE"));
        data.insert(std::make_pair(0x1e7fb,"ETHIOPIC SYLLABLE GURAGE FWI"));
        data.insert(std::make_pair(0x1e7fc,"ETHIOPIC SYLLABLE GURAGE FWEE"));
        data.insert(std::make_pair(0x1e7fd,"ETHIOPIC SYLLABLE GURAGE PWI"));
        data.insert(std::make_pair(0x1e7fe,"ETHIOPIC SYLLABLE GURAGE PWEE"));
        data.insert(std::make_pair(0x1e800,"MENDE KIKAKUI SYLLABLE M001 KI"));
        data.insert(std::make_pair(0x1e801,"MENDE KIKAKUI SYLLABLE M002 KA"));
        data.insert(std::make_pair(0x1e802,"MENDE KIKAKUI SYLLABLE M003 KU"));
        data.insert(std::make_pair(0x1e803,"MENDE KIKAKUI SYLLABLE M065 KEE"));
        data.insert(std::make_pair(0x1e804,"MENDE KIKAKUI SYLLABLE M095 KE"));
        data.insert(std::make_pair(0x1e805,"MENDE KIKAKUI SYLLABLE M076 KOO"));
        data.insert(std::make_pair(0x1e806,"MENDE KIKAKUI SYLLABLE M048 KO"));
        data.insert(std::make_pair(0x1e807,"MENDE KIKAKUI SYLLABLE M179 KUA"));
        data.insert(std::make_pair(0x1e808,"MENDE KIKAKUI SYLLABLE M004 WI"));
        data.insert(std::make_pair(0x1e809,"MENDE KIKAKUI SYLLABLE M005 WA"));
        data.insert(std::make_pair(0x1e80a,"MENDE KIKAKUI SYLLABLE M006 WU"));
        data.insert(std::make_pair(0x1e80b,"MENDE KIKAKUI SYLLABLE M126 WEE"));
        data.insert(std::make_pair(0x1e80c,"MENDE KIKAKUI SYLLABLE M118 WE"));
        data.insert(std::make_pair(0x1e80d,"MENDE KIKAKUI SYLLABLE M114 WOO"));
        data.insert(std::make_pair(0x1e80e,"MENDE KIKAKUI SYLLABLE M045 WO"));
        data.insert(std::make_pair(0x1e80f,"MENDE KIKAKUI SYLLABLE M194 WUI"));
        data.insert(std::make_pair(0x1e810,"MENDE KIKAKUI SYLLABLE M143 WEI"));
        data.insert(std::make_pair(0x1e811,"MENDE KIKAKUI SYLLABLE M061 WVI"));
        data.insert(std::make_pair(0x1e812,"MENDE KIKAKUI SYLLABLE M049 WVA"));
        data.insert(std::make_pair(0x1e813,"MENDE KIKAKUI SYLLABLE M139 WVE"));
        data.insert(std::make_pair(0x1e814,"MENDE KIKAKUI SYLLABLE M007 MIN"));
        data.insert(std::make_pair(0x1e815,"MENDE KIKAKUI SYLLABLE M008 MAN"));
        data.insert(std::make_pair(0x1e816,"MENDE KIKAKUI SYLLABLE M009 MUN"));
        data.insert(std::make_pair(0x1e817,"MENDE KIKAKUI SYLLABLE M059 MEN"));
        data.insert(std::make_pair(0x1e818,"MENDE KIKAKUI SYLLABLE M094 MON"));
        data.insert(std::make_pair(0x1e819,"MENDE KIKAKUI SYLLABLE M154 MUAN"));
        data.insert(std::make_pair(0x1e81a,"MENDE KIKAKUI SYLLABLE M189 MUEN"));
        data.insert(std::make_pair(0x1e81b,"MENDE KIKAKUI SYLLABLE M010 BI"));
        data.insert(std::make_pair(0x1e81c,"MENDE KIKAKUI SYLLABLE M011 BA"));
        data.insert(std::make_pair(0x1e81d,"MENDE KIKAKUI SYLLABLE M012 BU"));
        data.insert(std::make_pair(0x1e81e,"MENDE KIKAKUI SYLLABLE M150 BEE"));
        data.insert(std::make_pair(0x1e81f,"MENDE KIKAKUI SYLLABLE M097 BE"));
        data.insert(std::make_pair(0x1e820,"MENDE KIKAKUI SYLLABLE M103 BOO"));
        data.insert(std::make_pair(0x1e821,"MENDE KIKAKUI SYLLABLE M138 BO"));
        data.insert(std::make_pair(0x1e822,"MENDE KIKAKUI SYLLABLE M013 I"));
        data.insert(std::make_pair(0x1e823,"MENDE KIKAKUI SYLLABLE M014 A"));
        data.insert(std::make_pair(0x1e824,"MENDE KIKAKUI SYLLABLE M015 U"));
        data.insert(std::make_pair(0x1e825,"MENDE KIKAKUI SYLLABLE M163 EE"));
        data.insert(std::make_pair(0x1e826,"MENDE KIKAKUI SYLLABLE M100 E"));
        data.insert(std::make_pair(0x1e827,"MENDE KIKAKUI SYLLABLE M165 OO"));
        data.insert(std::make_pair(0x1e828,"MENDE KIKAKUI SYLLABLE M147 O"));
        data.insert(std::make_pair(0x1e829,"MENDE KIKAKUI SYLLABLE M137 EI"));
        data.insert(std::make_pair(0x1e82a,"MENDE KIKAKUI SYLLABLE M131 IN"));
        data.insert(std::make_pair(0x1e82b,"MENDE KIKAKUI SYLLABLE M135 IN"));
        data.insert(std::make_pair(0x1e82c,"MENDE KIKAKUI SYLLABLE M195 AN"));
        data.insert(std::make_pair(0x1e82d,"MENDE KIKAKUI SYLLABLE M178 EN"));
        data.insert(std::make_pair(0x1e82e,"MENDE KIKAKUI SYLLABLE M019 SI"));
        data.insert(std::make_pair(0x1e82f,"MENDE KIKAKUI SYLLABLE M020 SA"));
        data.insert(std::make_pair(0x1e830,"MENDE KIKAKUI SYLLABLE M021 SU"));
        data.insert(std::make_pair(0x1e831,"MENDE KIKAKUI SYLLABLE M162 SEE"));
        data.insert(std::make_pair(0x1e832,"MENDE KIKAKUI SYLLABLE M116 SE"));
        data.insert(std::make_pair(0x1e833,"MENDE KIKAKUI SYLLABLE M136 SOO"));
        data.insert(std::make_pair(0x1e834,"MENDE KIKAKUI SYLLABLE M079 SO"));
        data.insert(std::make_pair(0x1e835,"MENDE KIKAKUI SYLLABLE M196 SIA"));
        data.insert(std::make_pair(0x1e836,"MENDE KIKAKUI SYLLABLE M025 LI"));
        data.insert(std::make_pair(0x1e837,"MENDE KIKAKUI SYLLABLE M026 LA"));
        data.insert(std::make_pair(0x1e838,"MENDE KIKAKUI SYLLABLE M027 LU"));
        data.insert(std::make_pair(0x1e839,"MENDE KIKAKUI SYLLABLE M084 LEE"));
        data.insert(std::make_pair(0x1e83a,"MENDE KIKAKUI SYLLABLE M073 LE"));
        data.insert(std::make_pair(0x1e83b,"MENDE KIKAKUI SYLLABLE M054 LOO"));
        data.insert(std::make_pair(0x1e83c,"MENDE KIKAKUI SYLLABLE M153 LO"));
        data.insert(std::make_pair(0x1e83d,"MENDE KIKAKUI SYLLABLE M110 LONG LE"));
        data.insert(std::make_pair(0x1e83e,"MENDE KIKAKUI SYLLABLE M016 DI"));
        data.insert(std::make_pair(0x1e83f,"MENDE KIKAKUI SYLLABLE M017 DA"));
        data.insert(std::make_pair(0x1e840,"MENDE KIKAKUI SYLLABLE M018 DU"));
        data.insert(std::make_pair(0x1e841,"MENDE KIKAKUI SYLLABLE M089 DEE"));
        data.insert(std::make_pair(0x1e842,"MENDE KIKAKUI SYLLABLE M180 DOO"));
        data.insert(std::make_pair(0x1e843,"MENDE KIKAKUI SYLLABLE M181 DO"));
        data.insert(std::make_pair(0x1e844,"MENDE KIKAKUI SYLLABLE M022 TI"));
        data.insert(std::make_pair(0x1e845,"MENDE KIKAKUI SYLLABLE M023 TA"));
        data.insert(std::make_pair(0x1e846,"MENDE KIKAKUI SYLLABLE M024 TU"));
        data.insert(std::make_pair(0x1e847,"MENDE KIKAKUI SYLLABLE M091 TEE"));
        data.insert(std::make_pair(0x1e848,"MENDE KIKAKUI SYLLABLE M055 TE"));
        data.insert(std::make_pair(0x1e849,"MENDE KIKAKUI SYLLABLE M104 TOO"));
        data.insert(std::make_pair(0x1e84a,"MENDE KIKAKUI SYLLABLE M069 TO"));
        data.insert(std::make_pair(0x1e84b,"MENDE KIKAKUI SYLLABLE M028 JI"));
        data.insert(std::make_pair(0x1e84c,"MENDE KIKAKUI SYLLABLE M029 JA"));
        data.insert(std::make_pair(0x1e84d,"MENDE KIKAKUI SYLLABLE M030 JU"));
        data.insert(std::make_pair(0x1e84e,"MENDE KIKAKUI SYLLABLE M157 JEE"));
        data.insert(std::make_pair(0x1e84f,"MENDE KIKAKUI SYLLABLE M113 JE"));
        data.insert(std::make_pair(0x1e850,"MENDE KIKAKUI SYLLABLE M160 JOO"));
        data.insert(std::make_pair(0x1e851,"MENDE KIKAKUI SYLLABLE M063 JO"));
        data.insert(std::make_pair(0x1e852,"MENDE KIKAKUI SYLLABLE M175 LONG JO"));
        data.insert(std::make_pair(0x1e853,"MENDE KIKAKUI SYLLABLE M031 YI"));
        data.insert(std::make_pair(0x1e854,"MENDE KIKAKUI SYLLABLE M032 YA"));
        data.insert(std::make_pair(0x1e855,"MENDE KIKAKUI SYLLABLE M033 YU"));
        data.insert(std::make_pair(0x1e856,"MENDE KIKAKUI SYLLABLE M109 YEE"));
        data.insert(std::make_pair(0x1e857,"MENDE KIKAKUI SYLLABLE M080 YE"));
        data.insert(std::make_pair(0x1e858,"MENDE KIKAKUI SYLLABLE M141 YOO"));
        data.insert(std::make_pair(0x1e859,"MENDE KIKAKUI SYLLABLE M121 YO"));
        data.insert(std::make_pair(0x1e85a,"MENDE KIKAKUI SYLLABLE M034 FI"));
        data.insert(std::make_pair(0x1e85b,"MENDE KIKAKUI SYLLABLE M035 FA"));
        data.insert(std::make_pair(0x1e85c,"MENDE KIKAKUI SYLLABLE M036 FU"));
        data.insert(std::make_pair(0x1e85d,"MENDE KIKAKUI SYLLABLE M078 FEE"));
        data.insert(std::make_pair(0x1e85e,"MENDE KIKAKUI SYLLABLE M075 FE"));
        data.insert(std::make_pair(0x1e85f,"MENDE KIKAKUI SYLLABLE M133 FOO"));
        data.insert(std::make_pair(0x1e860,"MENDE KIKAKUI SYLLABLE M088 FO"));
        data.insert(std::make_pair(0x1e861,"MENDE KIKAKUI SYLLABLE M197 FUA"));
        data.insert(std::make_pair(0x1e862,"MENDE KIKAKUI SYLLABLE M101 FAN"));
        data.insert(std::make_pair(0x1e863,"MENDE KIKAKUI SYLLABLE M037 NIN"));
        data.insert(std::make_pair(0x1e864,"MENDE KIKAKUI SYLLABLE M038 NAN"));
        data.insert(std::make_pair(0x1e865,"MENDE KIKAKUI SYLLABLE M039 NUN"));
        data.insert(std::make_pair(0x1e866,"MENDE KIKAKUI SYLLABLE M117 NEN"));
        data.insert(std::make_pair(0x1e867,"MENDE KIKAKUI SYLLABLE M169 NON"));
        data.insert(std::make_pair(0x1e868,"MENDE KIKAKUI SYLLABLE M176 HI"));
        data.insert(std::make_pair(0x1e869,"MENDE KIKAKUI SYLLABLE M041 HA"));
        data.insert(std::make_pair(0x1e86a,"MENDE KIKAKUI SYLLABLE M186 HU"));
        data.insert(std::make_pair(0x1e86b,"MENDE KIKAKUI SYLLABLE M040 HEE"));
        data.insert(std::make_pair(0x1e86c,"MENDE KIKAKUI SYLLABLE M096 HE"));
        data.insert(std::make_pair(0x1e86d,"MENDE KIKAKUI SYLLABLE M042 HOO"));
        data.insert(std::make_pair(0x1e86e,"MENDE KIKAKUI SYLLABLE M140 HO"));
        data.insert(std::make_pair(0x1e86f,"MENDE KIKAKUI SYLLABLE M083 HEEI"));
        data.insert(std::make_pair(0x1e870,"MENDE KIKAKUI SYLLABLE M128 HOOU"));
        data.insert(std::make_pair(0x1e871,"MENDE KIKAKUI SYLLABLE M053 HIN"));
        data.insert(std::make_pair(0x1e872,"MENDE KIKAKUI SYLLABLE M130 HAN"));
        data.insert(std::make_pair(0x1e873,"MENDE KIKAKUI SYLLABLE M087 HUN"));
        data.insert(std::make_pair(0x1e874,"MENDE KIKAKUI SYLLABLE M052 HEN"));
        data.insert(std::make_pair(0x1e875,"MENDE KIKAKUI SYLLABLE M193 HON"));
        data.insert(std::make_pair(0x1e876,"MENDE KIKAKUI SYLLABLE M046 HUAN"));
        data.insert(std::make_pair(0x1e877,"MENDE KIKAKUI SYLLABLE M090 NGGI"));
        data.insert(std::make_pair(0x1e878,"MENDE KIKAKUI SYLLABLE M043 NGGA"));
        data.insert(std::make_pair(0x1e879,"MENDE KIKAKUI SYLLABLE M082 NGGU"));
        data.insert(std::make_pair(0x1e87a,"MENDE KIKAKUI SYLLABLE M115 NGGEE"));
        data.insert(std::make_pair(0x1e87b,"MENDE KIKAKUI SYLLABLE M146 NGGE"));
        data.insert(std::make_pair(0x1e87c,"MENDE KIKAKUI SYLLABLE M156 NGGOO"));
        data.insert(std::make_pair(0x1e87d,"MENDE KIKAKUI SYLLABLE M120 NGGO"));
        data.insert(std::make_pair(0x1e87e,"MENDE KIKAKUI SYLLABLE M159 NGGAA"));
        data.insert(std::make_pair(0x1e87f,"MENDE KIKAKUI SYLLABLE M127 NGGUA"));
        data.insert(std::make_pair(0x1e880,"MENDE KIKAKUI SYLLABLE M086 LONG NGGE"));
        data.insert(std::make_pair(0x1e881,"MENDE KIKAKUI SYLLABLE M106 LONG NGGOO"));
        data.insert(std::make_pair(0x1e882,"MENDE KIKAKUI SYLLABLE M183 LONG NGGO"));
        data.insert(std::make_pair(0x1e883,"MENDE KIKAKUI SYLLABLE M155 GI"));
        data.insert(std::make_pair(0x1e884,"MENDE KIKAKUI SYLLABLE M111 GA"));
        data.insert(std::make_pair(0x1e885,"MENDE KIKAKUI SYLLABLE M168 GU"));
        data.insert(std::make_pair(0x1e886,"MENDE KIKAKUI SYLLABLE M190 GEE"));
        data.insert(std::make_pair(0x1e887,"MENDE KIKAKUI SYLLABLE M166 GUEI"));
        data.insert(std::make_pair(0x1e888,"MENDE KIKAKUI SYLLABLE M167 GUAN"));
        data.insert(std::make_pair(0x1e889,"MENDE KIKAKUI SYLLABLE M184 NGEN"));
        data.insert(std::make_pair(0x1e88a,"MENDE KIKAKUI SYLLABLE M057 NGON"));
        data.insert(std::make_pair(0x1e88b,"MENDE KIKAKUI SYLLABLE M177 NGUAN"));
        data.insert(std::make_pair(0x1e88c,"MENDE KIKAKUI SYLLABLE M068 PI"));
        data.insert(std::make_pair(0x1e88d,"MENDE KIKAKUI SYLLABLE M099 PA"));
        data.insert(std::make_pair(0x1e88e,"MENDE KIKAKUI SYLLABLE M050 PU"));
        data.insert(std::make_pair(0x1e88f,"MENDE KIKAKUI SYLLABLE M081 PEE"));
        data.insert(std::make_pair(0x1e890,"MENDE KIKAKUI SYLLABLE M051 PE"));
        data.insert(std::make_pair(0x1e891,"MENDE KIKAKUI SYLLABLE M102 POO"));
        data.insert(std::make_pair(0x1e892,"MENDE KIKAKUI SYLLABLE M066 PO"));
        data.insert(std::make_pair(0x1e893,"MENDE KIKAKUI SYLLABLE M145 MBI"));
        data.insert(std::make_pair(0x1e894,"MENDE KIKAKUI SYLLABLE M062 MBA"));
        data.insert(std::make_pair(0x1e895,"MENDE KIKAKUI SYLLABLE M122 MBU"));
        data.insert(std::make_pair(0x1e896,"MENDE KIKAKUI SYLLABLE M047 MBEE"));
        data.insert(std::make_pair(0x1e897,"MENDE KIKAKUI SYLLABLE M188 MBEE"));
        data.insert(std::make_pair(0x1e898,"MENDE KIKAKUI SYLLABLE M072 MBE"));
        data.insert(std::make_pair(0x1e899,"MENDE KIKAKUI SYLLABLE M172 MBOO"));
        data.insert(std::make_pair(0x1e89a,"MENDE KIKAKUI SYLLABLE M174 MBO"));
        data.insert(std::make_pair(0x1e89b,"MENDE KIKAKUI SYLLABLE M187 MBUU"));
        data.insert(std::make_pair(0x1e89c,"MENDE KIKAKUI SYLLABLE M161 LONG MBE"));
        data.insert(std::make_pair(0x1e89d,"MENDE KIKAKUI SYLLABLE M105 LONG MBOO"));
        data.insert(std::make_pair(0x1e89e,"MENDE KIKAKUI SYLLABLE M142 LONG MBO"));
        data.insert(std::make_pair(0x1e89f,"MENDE KIKAKUI SYLLABLE M132 KPI"));
        data.insert(std::make_pair(0x1e8a0,"MENDE KIKAKUI SYLLABLE M092 KPA"));
        data.insert(std::make_pair(0x1e8a1,"MENDE KIKAKUI SYLLABLE M074 KPU"));
        data.insert(std::make_pair(0x1e8a2,"MENDE KIKAKUI SYLLABLE M044 KPEE"));
        data.insert(std::make_pair(0x1e8a3,"MENDE KIKAKUI SYLLABLE M108 KPE"));
        data.insert(std::make_pair(0x1e8a4,"MENDE KIKAKUI SYLLABLE M112 KPOO"));
        data.insert(std::make_pair(0x1e8a5,"MENDE KIKAKUI SYLLABLE M158 KPO"));
        data.insert(std::make_pair(0x1e8a6,"MENDE KIKAKUI SYLLABLE M124 GBI"));
        data.insert(std::make_pair(0x1e8a7,"MENDE KIKAKUI SYLLABLE M056 GBA"));
        data.insert(std::make_pair(0x1e8a8,"MENDE KIKAKUI SYLLABLE M148 GBU"));
        data.insert(std::make_pair(0x1e8a9,"MENDE KIKAKUI SYLLABLE M093 GBEE"));
        data.insert(std::make_pair(0x1e8aa,"MENDE KIKAKUI SYLLABLE M107 GBE"));
        data.insert(std::make_pair(0x1e8ab,"MENDE KIKAKUI SYLLABLE M071 GBOO"));
        data.insert(std::make_pair(0x1e8ac,"MENDE KIKAKUI SYLLABLE M070 GBO"));
        data.insert(std::make_pair(0x1e8ad,"MENDE KIKAKUI SYLLABLE M171 RA"));
        data.insert(std::make_pair(0x1e8ae,"MENDE KIKAKUI SYLLABLE M123 NDI"));
        data.insert(std::make_pair(0x1e8af,"MENDE KIKAKUI SYLLABLE M129 NDA"));
        data.insert(std::make_pair(0x1e8b0,"MENDE KIKAKUI SYLLABLE M125 NDU"));
        data.insert(std::make_pair(0x1e8b1,"MENDE KIKAKUI SYLLABLE M191 NDEE"));
        data.insert(std::make_pair(0x1e8b2,"MENDE KIKAKUI SYLLABLE M119 NDE"));
        data.insert(std::make_pair(0x1e8b3,"MENDE KIKAKUI SYLLABLE M067 NDOO"));
        data.insert(std::make_pair(0x1e8b4,"MENDE KIKAKUI SYLLABLE M064 NDO"));
        data.insert(std::make_pair(0x1e8b5,"MENDE KIKAKUI SYLLABLE M152 NJA"));
        data.insert(std::make_pair(0x1e8b6,"MENDE KIKAKUI SYLLABLE M192 NJU"));
        data.insert(std::make_pair(0x1e8b7,"MENDE KIKAKUI SYLLABLE M149 NJEE"));
        data.insert(std::make_pair(0x1e8b8,"MENDE KIKAKUI SYLLABLE M134 NJOO"));
        data.insert(std::make_pair(0x1e8b9,"MENDE KIKAKUI SYLLABLE M182 VI"));
        data.insert(std::make_pair(0x1e8ba,"MENDE KIKAKUI SYLLABLE M185 VA"));
        data.insert(std::make_pair(0x1e8bb,"MENDE KIKAKUI SYLLABLE M151 VU"));
        data.insert(std::make_pair(0x1e8bc,"MENDE KIKAKUI SYLLABLE M173 VEE"));
        data.insert(std::make_pair(0x1e8bd,"MENDE KIKAKUI SYLLABLE M085 VE"));
        data.insert(std::make_pair(0x1e8be,"MENDE KIKAKUI SYLLABLE M144 VOO"));
        data.insert(std::make_pair(0x1e8bf,"MENDE KIKAKUI SYLLABLE M077 VO"));
        data.insert(std::make_pair(0x1e8c0,"MENDE KIKAKUI SYLLABLE M164 NYIN"));
        data.insert(std::make_pair(0x1e8c1,"MENDE KIKAKUI SYLLABLE M058 NYAN"));
        data.insert(std::make_pair(0x1e8c2,"MENDE KIKAKUI SYLLABLE M170 NYUN"));
        data.insert(std::make_pair(0x1e8c3,"MENDE KIKAKUI SYLLABLE M098 NYEN"));
        data.insert(std::make_pair(0x1e8c4,"MENDE KIKAKUI SYLLABLE M060 NYON"));
        data.insert(std::make_pair(0x1e8c7,"MENDE KIKAKUI DIGIT ONE"));
        data.insert(std::make_pair(0x1e8c8,"MENDE KIKAKUI DIGIT TWO"));
        data.insert(std::make_pair(0x1e8c9,"MENDE KIKAKUI DIGIT THREE"));
        data.insert(std::make_pair(0x1e8ca,"MENDE KIKAKUI DIGIT FOUR"));
        data.insert(std::make_pair(0x1e8cb,"MENDE KIKAKUI DIGIT FIVE"));
        data.insert(std::make_pair(0x1e8cc,"MENDE KIKAKUI DIGIT SIX"));
        data.insert(std::make_pair(0x1e8cd,"MENDE KIKAKUI DIGIT SEVEN"));
        data.insert(std::make_pair(0x1e8ce,"MENDE KIKAKUI DIGIT EIGHT"));
        data.insert(std::make_pair(0x1e8cf,"MENDE KIKAKUI DIGIT NINE"));
        data.insert(std::make_pair(0x1e8d0,"MENDE KIKAKUI COMBINING NUMBER TEENS"));
        data.insert(std::make_pair(0x1e8d1,"MENDE KIKAKUI COMBINING NUMBER TENS"));
        data.insert(std::make_pair(0x1e8d2,"MENDE KIKAKUI COMBINING NUMBER HUNDREDS"));
        data.insert(std::make_pair(0x1e8d3,"MENDE KIKAKUI COMBINING NUMBER THOUSANDS"));
        data.insert(std::make_pair(0x1e8d4,"MENDE KIKAKUI COMBINING NUMBER TEN THOUSANDS"));
        data.insert(std::make_pair(0x1e8d5,"MENDE KIKAKUI COMBINING NUMBER HUNDRED THOUSANDS"));
        data.insert(std::make_pair(0x1e8d6,"MENDE KIKAKUI COMBINING NUMBER MILLIONS"));
        data.insert(std::make_pair(0x1e900,"ADLAM CAPITAL LETTER ALIF"));
        data.insert(std::make_pair(0x1e901,"ADLAM CAPITAL LETTER DAALI"));
        data.insert(std::make_pair(0x1e902,"ADLAM CAPITAL LETTER LAAM"));
        data.insert(std::make_pair(0x1e903,"ADLAM CAPITAL LETTER MIIM"));
        data.insert(std::make_pair(0x1e904,"ADLAM CAPITAL LETTER BA"));
        data.insert(std::make_pair(0x1e905,"ADLAM CAPITAL LETTER SINNYIIYHE"));
        data.insert(std::make_pair(0x1e906,"ADLAM CAPITAL LETTER PE"));
        data.insert(std::make_pair(0x1e907,"ADLAM CAPITAL LETTER BHE"));
        data.insert(std::make_pair(0x1e908,"ADLAM CAPITAL LETTER RA"));
        data.insert(std::make_pair(0x1e909,"ADLAM CAPITAL LETTER E"));
        data.insert(std::make_pair(0x1e90a,"ADLAM CAPITAL LETTER FA"));
        data.insert(std::make_pair(0x1e90b,"ADLAM CAPITAL LETTER I"));
        data.insert(std::make_pair(0x1e90c,"ADLAM CAPITAL LETTER O"));
        data.insert(std::make_pair(0x1e90d,"ADLAM CAPITAL LETTER DHA"));
        data.insert(std::make_pair(0x1e90e,"ADLAM CAPITAL LETTER YHE"));
        data.insert(std::make_pair(0x1e90f,"ADLAM CAPITAL LETTER WAW"));
        data.insert(std::make_pair(0x1e910,"ADLAM CAPITAL LETTER NUN"));
        data.insert(std::make_pair(0x1e911,"ADLAM CAPITAL LETTER KAF"));
        data.insert(std::make_pair(0x1e912,"ADLAM CAPITAL LETTER YA"));
        data.insert(std::make_pair(0x1e913,"ADLAM CAPITAL LETTER U"));
        data.insert(std::make_pair(0x1e914,"ADLAM CAPITAL LETTER JIIM"));
        data.insert(std::make_pair(0x1e915,"ADLAM CAPITAL LETTER CHI"));
        data.insert(std::make_pair(0x1e916,"ADLAM CAPITAL LETTER HA"));
        data.insert(std::make_pair(0x1e917,"ADLAM CAPITAL LETTER QAAF"));
        data.insert(std::make_pair(0x1e918,"ADLAM CAPITAL LETTER GA"));
        data.insert(std::make_pair(0x1e919,"ADLAM CAPITAL LETTER NYA"));
        data.insert(std::make_pair(0x1e91a,"ADLAM CAPITAL LETTER TU"));
        data.insert(std::make_pair(0x1e91b,"ADLAM CAPITAL LETTER NHA"));
        data.insert(std::make_pair(0x1e91c,"ADLAM CAPITAL LETTER VA"));
        data.insert(std::make_pair(0x1e91d,"ADLAM CAPITAL LETTER KHA"));
        data.insert(std::make_pair(0x1e91e,"ADLAM CAPITAL LETTER GBE"));
        data.insert(std::make_pair(0x1e91f,"ADLAM CAPITAL LETTER ZAL"));
        data.insert(std::make_pair(0x1e920,"ADLAM CAPITAL LETTER KPO"));
        data.insert(std::make_pair(0x1e921,"ADLAM CAPITAL LETTER SHA"));
        data.insert(std::make_pair(0x1e922,"ADLAM SMALL LETTER ALIF"));
        data.insert(std::make_pair(0x1e923,"ADLAM SMALL LETTER DAALI"));
        data.insert(std::make_pair(0x1e924,"ADLAM SMALL LETTER LAAM"));
        data.insert(std::make_pair(0x1e925,"ADLAM SMALL LETTER MIIM"));
        data.insert(std::make_pair(0x1e926,"ADLAM SMALL LETTER BA"));
        data.insert(std::make_pair(0x1e927,"ADLAM SMALL LETTER SINNYIIYHE"));
        data.insert(std::make_pair(0x1e928,"ADLAM SMALL LETTER PE"));
        data.insert(std::make_pair(0x1e929,"ADLAM SMALL LETTER BHE"));
        data.insert(std::make_pair(0x1e92a,"ADLAM SMALL LETTER RA"));
        data.insert(std::make_pair(0x1e92b,"ADLAM SMALL LETTER E"));
        data.insert(std::make_pair(0x1e92c,"ADLAM SMALL LETTER FA"));
        data.insert(std::make_pair(0x1e92d,"ADLAM SMALL LETTER I"));
        data.insert(std::make_pair(0x1e92e,"ADLAM SMALL LETTER O"));
        data.insert(std::make_pair(0x1e92f,"ADLAM SMALL LETTER DHA"));
        data.insert(std::make_pair(0x1e930,"ADLAM SMALL LETTER YHE"));
        data.insert(std::make_pair(0x1e931,"ADLAM SMALL LETTER WAW"));
        data.insert(std::make_pair(0x1e932,"ADLAM SMALL LETTER NUN"));
        data.insert(std::make_pair(0x1e933,"ADLAM SMALL LETTER KAF"));
        data.insert(std::make_pair(0x1e934,"ADLAM SMALL LETTER YA"));
        data.insert(std::make_pair(0x1e935,"ADLAM SMALL LETTER U"));
        data.insert(std::make_pair(0x1e936,"ADLAM SMALL LETTER JIIM"));
        data.insert(std::make_pair(0x1e937,"ADLAM SMALL LETTER CHI"));
        data.insert(std::make_pair(0x1e938,"ADLAM SMALL LETTER HA"));
        data.insert(std::make_pair(0x1e939,"ADLAM SMALL LETTER QAAF"));
        data.insert(std::make_pair(0x1e93a,"ADLAM SMALL LETTER GA"));
        data.insert(std::make_pair(0x1e93b,"ADLAM SMALL LETTER NYA"));
        data.insert(std::make_pair(0x1e93c,"ADLAM SMALL LETTER TU"));
        data.insert(std::make_pair(0x1e93d,"ADLAM SMALL LETTER NHA"));
        data.insert(std::make_pair(0x1e93e,"ADLAM SMALL LETTER VA"));
        data.insert(std::make_pair(0x1e93f,"ADLAM SMALL LETTER KHA"));
        data.insert(std::make_pair(0x1e940,"ADLAM SMALL LETTER GBE"));
        data.insert(std::make_pair(0x1e941,"ADLAM SMALL LETTER ZAL"));
        data.insert(std::make_pair(0x1e942,"ADLAM SMALL LETTER KPO"));
        data.insert(std::make_pair(0x1e943,"ADLAM SMALL LETTER SHA"));
        data.insert(std::make_pair(0x1e944,"ADLAM ALIF LENGTHENER"));
        data.insert(std::make_pair(0x1e945,"ADLAM VOWEL LENGTHENER"));
        data.insert(std::make_pair(0x1e946,"ADLAM GEMINATION MARK"));
        data.insert(std::make_pair(0x1e947,"ADLAM HAMZA"));
        data.insert(std::make_pair(0x1e948,"ADLAM CONSONANT MODIFIER"));
        data.insert(std::make_pair(0x1e949,"ADLAM GEMINATE CONSONANT MODIFIER"));
        data.insert(std::make_pair(0x1e94a,"ADLAM NUKTA"));
        data.insert(std::make_pair(0x1e94b,"ADLAM NASALIZATION MARK"));
        data.insert(std::make_pair(0x1e950,"ADLAM DIGIT ZERO"));
        data.insert(std::make_pair(0x1e951,"ADLAM DIGIT ONE"));
        data.insert(std::make_pair(0x1e952,"ADLAM DIGIT TWO"));
        data.insert(std::make_pair(0x1e953,"ADLAM DIGIT THREE"));
        data.insert(std::make_pair(0x1e954,"ADLAM DIGIT FOUR"));
        data.insert(std::make_pair(0x1e955,"ADLAM DIGIT FIVE"));
        data.insert(std::make_pair(0x1e956,"ADLAM DIGIT SIX"));
        data.insert(std::make_pair(0x1e957,"ADLAM DIGIT SEVEN"));
        data.insert(std::make_pair(0x1e958,"ADLAM DIGIT EIGHT"));
        data.insert(std::make_pair(0x1e959,"ADLAM DIGIT NINE"));
        data.insert(std::make_pair(0x1e95e,"ADLAM INITIAL EXCLAMATION MARK"));
        data.insert(std::make_pair(0x1e95f,"ADLAM INITIAL QUESTION MARK"));
        data.insert(std::make_pair(0x1ec71,"INDIC SIYAQ NUMBER ONE"));
        data.insert(std::make_pair(0x1ec72,"INDIC SIYAQ NUMBER TWO"));
        data.insert(std::make_pair(0x1ec73,"INDIC SIYAQ NUMBER THREE"));
        data.insert(std::make_pair(0x1ec74,"INDIC SIYAQ NUMBER FOUR"));
        data.insert(std::make_pair(0x1ec75,"INDIC SIYAQ NUMBER FIVE"));
        data.insert(std::make_pair(0x1ec76,"INDIC SIYAQ NUMBER SIX"));
        data.insert(std::make_pair(0x1ec77,"INDIC SIYAQ NUMBER SEVEN"));
        data.insert(std::make_pair(0x1ec78,"INDIC SIYAQ NUMBER EIGHT"));
        data.insert(std::make_pair(0x1ec79,"INDIC SIYAQ NUMBER NINE"));
        data.insert(std::make_pair(0x1ec7a,"INDIC SIYAQ NUMBER TEN"));
        data.insert(std::make_pair(0x1ec7b,"INDIC SIYAQ NUMBER TWENTY"));
        data.insert(std::make_pair(0x1ec7c,"INDIC SIYAQ NUMBER THIRTY"));
        data.insert(std::make_pair(0x1ec7d,"INDIC SIYAQ NUMBER FORTY"));
        data.insert(std::make_pair(0x1ec7e,"INDIC SIYAQ NUMBER FIFTY"));
        data.insert(std::make_pair(0x1ec7f,"INDIC SIYAQ NUMBER SIXTY"));
        data.insert(std::make_pair(0x1ec80,"INDIC SIYAQ NUMBER SEVENTY"));
        data.insert(std::make_pair(0x1ec81,"INDIC SIYAQ NUMBER EIGHTY"));
        data.insert(std::make_pair(0x1ec82,"INDIC SIYAQ NUMBER NINETY"));
        data.insert(std::make_pair(0x1ec83,"INDIC SIYAQ NUMBER ONE HUNDRED"));
        data.insert(std::make_pair(0x1ec84,"INDIC SIYAQ NUMBER TWO HUNDRED"));
        data.insert(std::make_pair(0x1ec85,"INDIC SIYAQ NUMBER THREE HUNDRED"));
        data.insert(std::make_pair(0x1ec86,"INDIC SIYAQ NUMBER FOUR HUNDRED"));
        data.insert(std::make_pair(0x1ec87,"INDIC SIYAQ NUMBER FIVE HUNDRED"));
        data.insert(std::make_pair(0x1ec88,"INDIC SIYAQ NUMBER SIX HUNDRED"));
        data.insert(std::make_pair(0x1ec89,"INDIC SIYAQ NUMBER SEVEN HUNDRED"));
        data.insert(std::make_pair(0x1ec8a,"INDIC SIYAQ NUMBER EIGHT HUNDRED"));
        data.insert(std::make_pair(0x1ec8b,"INDIC SIYAQ NUMBER NINE HUNDRED"));
        data.insert(std::make_pair(0x1ec8c,"INDIC SIYAQ NUMBER ONE THOUSAND"));
        data.insert(std::make_pair(0x1ec8d,"INDIC SIYAQ NUMBER TWO THOUSAND"));
        data.insert(std::make_pair(0x1ec8e,"INDIC SIYAQ NUMBER THREE THOUSAND"));
        data.insert(std::make_pair(0x1ec8f,"INDIC SIYAQ NUMBER FOUR THOUSAND"));
        data.insert(std::make_pair(0x1ec90,"INDIC SIYAQ NUMBER FIVE THOUSAND"));
        data.insert(std::make_pair(0x1ec91,"INDIC SIYAQ NUMBER SIX THOUSAND"));
        data.insert(std::make_pair(0x1ec92,"INDIC SIYAQ NUMBER SEVEN THOUSAND"));
        data.insert(std::make_pair(0x1ec93,"INDIC SIYAQ NUMBER EIGHT THOUSAND"));
        data.insert(std::make_pair(0x1ec94,"INDIC SIYAQ NUMBER NINE THOUSAND"));
        data.insert(std::make_pair(0x1ec95,"INDIC SIYAQ NUMBER TEN THOUSAND"));
        data.insert(std::make_pair(0x1ec96,"INDIC SIYAQ NUMBER TWENTY THOUSAND"));
        data.insert(std::make_pair(0x1ec97,"INDIC SIYAQ NUMBER THIRTY THOUSAND"));
        data.insert(std::make_pair(0x1ec98,"INDIC SIYAQ NUMBER FORTY THOUSAND"));
        data.insert(std::make_pair(0x1ec99,"INDIC SIYAQ NUMBER FIFTY THOUSAND"));
        data.insert(std::make_pair(0x1ec9a,"INDIC SIYAQ NUMBER SIXTY THOUSAND"));
        data.insert(std::make_pair(0x1ec9b,"INDIC SIYAQ NUMBER SEVENTY THOUSAND"));
        data.insert(std::make_pair(0x1ec9c,"INDIC SIYAQ NUMBER EIGHTY THOUSAND"));
        data.insert(std::make_pair(0x1ec9d,"INDIC SIYAQ NUMBER NINETY THOUSAND"));
        data.insert(std::make_pair(0x1ec9e,"INDIC SIYAQ NUMBER LAKH"));
        data.insert(std::make_pair(0x1ec9f,"INDIC SIYAQ NUMBER LAKHAN"));
        data.insert(std::make_pair(0x1eca0,"INDIC SIYAQ LAKH MARK"));
        data.insert(std::make_pair(0x1eca1,"INDIC SIYAQ NUMBER KAROR"));
        data.insert(std::make_pair(0x1eca2,"INDIC SIYAQ NUMBER KARORAN"));
        data.insert(std::make_pair(0x1eca3,"INDIC SIYAQ NUMBER PREFIXED ONE"));
        data.insert(std::make_pair(0x1eca4,"INDIC SIYAQ NUMBER PREFIXED TWO"));
        data.insert(std::make_pair(0x1eca5,"INDIC SIYAQ NUMBER PREFIXED THREE"));
        data.insert(std::make_pair(0x1eca6,"INDIC SIYAQ NUMBER PREFIXED FOUR"));
        data.insert(std::make_pair(0x1eca7,"INDIC SIYAQ NUMBER PREFIXED FIVE"));
        data.insert(std::make_pair(0x1eca8,"INDIC SIYAQ NUMBER PREFIXED SIX"));
        data.insert(std::make_pair(0x1eca9,"INDIC SIYAQ NUMBER PREFIXED SEVEN"));
        data.insert(std::make_pair(0x1ecaa,"INDIC SIYAQ NUMBER PREFIXED EIGHT"));
        data.insert(std::make_pair(0x1ecab,"INDIC SIYAQ NUMBER PREFIXED NINE"));
        data.insert(std::make_pair(0x1ecac,"INDIC SIYAQ PLACEHOLDER"));
        data.insert(std::make_pair(0x1ecad,"INDIC SIYAQ FRACTION ONE QUARTER"));
        data.insert(std::make_pair(0x1ecae,"INDIC SIYAQ FRACTION ONE HALF"));
        data.insert(std::make_pair(0x1ecaf,"INDIC SIYAQ FRACTION THREE QUARTERS"));
        data.insert(std::make_pair(0x1ecb0,"INDIC SIYAQ RUPEE MARK"));
        data.insert(std::make_pair(0x1ecb1,"INDIC SIYAQ NUMBER ALTERNATE ONE"));
        data.insert(std::make_pair(0x1ecb2,"INDIC SIYAQ NUMBER ALTERNATE TWO"));
        data.insert(std::make_pair(0x1ecb3,"INDIC SIYAQ NUMBER ALTERNATE TEN THOUSAND"));
        data.insert(std::make_pair(0x1ecb4,"INDIC SIYAQ ALTERNATE LAKH MARK"));
        data.insert(std::make_pair(0x1ed01,"OTTOMAN SIYAQ NUMBER ONE"));
        data.insert(std::make_pair(0x1ed02,"OTTOMAN SIYAQ NUMBER TWO"));
        data.insert(std::make_pair(0x1ed03,"OTTOMAN SIYAQ NUMBER THREE"));
        data.insert(std::make_pair(0x1ed04,"OTTOMAN SIYAQ NUMBER FOUR"));
        data.insert(std::make_pair(0x1ed05,"OTTOMAN SIYAQ NUMBER FIVE"));
        data.insert(std::make_pair(0x1ed06,"OTTOMAN SIYAQ NUMBER SIX"));
        data.insert(std::make_pair(0x1ed07,"OTTOMAN SIYAQ NUMBER SEVEN"));
        data.insert(std::make_pair(0x1ed08,"OTTOMAN SIYAQ NUMBER EIGHT"));
        data.insert(std::make_pair(0x1ed09,"OTTOMAN SIYAQ NUMBER NINE"));
        data.insert(std::make_pair(0x1ed0a,"OTTOMAN SIYAQ NUMBER TEN"));
        data.insert(std::make_pair(0x1ed0b,"OTTOMAN SIYAQ NUMBER TWENTY"));
        data.insert(std::make_pair(0x1ed0c,"OTTOMAN SIYAQ NUMBER THIRTY"));
        data.insert(std::make_pair(0x1ed0d,"OTTOMAN SIYAQ NUMBER FORTY"));
        data.insert(std::make_pair(0x1ed0e,"OTTOMAN SIYAQ NUMBER FIFTY"));
        data.insert(std::make_pair(0x1ed0f,"OTTOMAN SIYAQ NUMBER SIXTY"));
        data.insert(std::make_pair(0x1ed10,"OTTOMAN SIYAQ NUMBER SEVENTY"));
        data.insert(std::make_pair(0x1ed11,"OTTOMAN SIYAQ NUMBER EIGHTY"));
        data.insert(std::make_pair(0x1ed12,"OTTOMAN SIYAQ NUMBER NINETY"));
        data.insert(std::make_pair(0x1ed13,"OTTOMAN SIYAQ NUMBER ONE HUNDRED"));
        data.insert(std::make_pair(0x1ed14,"OTTOMAN SIYAQ NUMBER TWO HUNDRED"));
        data.insert(std::make_pair(0x1ed15,"OTTOMAN SIYAQ NUMBER THREE HUNDRED"));
        data.insert(std::make_pair(0x1ed16,"OTTOMAN SIYAQ NUMBER FOUR HUNDRED"));
        data.insert(std::make_pair(0x1ed17,"OTTOMAN SIYAQ NUMBER FIVE HUNDRED"));
        data.insert(std::make_pair(0x1ed18,"OTTOMAN SIYAQ NUMBER SIX HUNDRED"));
        data.insert(std::make_pair(0x1ed19,"OTTOMAN SIYAQ NUMBER SEVEN HUNDRED"));
        data.insert(std::make_pair(0x1ed1a,"OTTOMAN SIYAQ NUMBER EIGHT HUNDRED"));
        data.insert(std::make_pair(0x1ed1b,"OTTOMAN SIYAQ NUMBER NINE HUNDRED"));
        data.insert(std::make_pair(0x1ed1c,"OTTOMAN SIYAQ NUMBER ONE THOUSAND"));
        data.insert(std::make_pair(0x1ed1d,"OTTOMAN SIYAQ NUMBER TWO THOUSAND"));
        data.insert(std::make_pair(0x1ed1e,"OTTOMAN SIYAQ NUMBER THREE THOUSAND"));
        data.insert(std::make_pair(0x1ed1f,"OTTOMAN SIYAQ NUMBER FOUR THOUSAND"));
        data.insert(std::make_pair(0x1ed20,"OTTOMAN SIYAQ NUMBER FIVE THOUSAND"));
        data.insert(std::make_pair(0x1ed21,"OTTOMAN SIYAQ NUMBER SIX THOUSAND"));
        data.insert(std::make_pair(0x1ed22,"OTTOMAN SIYAQ NUMBER SEVEN THOUSAND"));
        data.insert(std::make_pair(0x1ed23,"OTTOMAN SIYAQ NUMBER EIGHT THOUSAND"));
        data.insert(std::make_pair(0x1ed24,"OTTOMAN SIYAQ NUMBER NINE THOUSAND"));
        data.insert(std::make_pair(0x1ed25,"OTTOMAN SIYAQ NUMBER TEN THOUSAND"));
        data.insert(std::make_pair(0x1ed26,"OTTOMAN SIYAQ NUMBER TWENTY THOUSAND"));
        data.insert(std::make_pair(0x1ed27,"OTTOMAN SIYAQ NUMBER THIRTY THOUSAND"));
        data.insert(std::make_pair(0x1ed28,"OTTOMAN SIYAQ NUMBER FORTY THOUSAND"));
        data.insert(std::make_pair(0x1ed29,"OTTOMAN SIYAQ NUMBER FIFTY THOUSAND"));
        data.insert(std::make_pair(0x1ed2a,"OTTOMAN SIYAQ NUMBER SIXTY THOUSAND"));
        data.insert(std::make_pair(0x1ed2b,"OTTOMAN SIYAQ NUMBER SEVENTY THOUSAND"));
        data.insert(std::make_pair(0x1ed2c,"OTTOMAN SIYAQ NUMBER EIGHTY THOUSAND"));
        data.insert(std::make_pair(0x1ed2d,"OTTOMAN SIYAQ NUMBER NINETY THOUSAND"));
        data.insert(std::make_pair(0x1ed2e,"OTTOMAN SIYAQ MARRATAN"));
        data.insert(std::make_pair(0x1ed2f,"OTTOMAN SIYAQ ALTERNATE NUMBER TWO"));
        data.insert(std::make_pair(0x1ed30,"OTTOMAN SIYAQ ALTERNATE NUMBER THREE"));
        data.insert(std::make_pair(0x1ed31,"OTTOMAN SIYAQ ALTERNATE NUMBER FOUR"));
        data.insert(std::make_pair(0x1ed32,"OTTOMAN SIYAQ ALTERNATE NUMBER FIVE"));
        data.insert(std::make_pair(0x1ed33,"OTTOMAN SIYAQ ALTERNATE NUMBER SIX"));
        data.insert(std::make_pair(0x1ed34,"OTTOMAN SIYAQ ALTERNATE NUMBER SEVEN"));
        data.insert(std::make_pair(0x1ed35,"OTTOMAN SIYAQ ALTERNATE NUMBER EIGHT"));
        data.insert(std::make_pair(0x1ed36,"OTTOMAN SIYAQ ALTERNATE NUMBER NINE"));
        data.insert(std::make_pair(0x1ed37,"OTTOMAN SIYAQ ALTERNATE NUMBER TEN"));
        data.insert(std::make_pair(0x1ed38,"OTTOMAN SIYAQ ALTERNATE NUMBER FOUR HUNDRED"));
        data.insert(std::make_pair(0x1ed39,"OTTOMAN SIYAQ ALTERNATE NUMBER SIX HUNDRED"));
        data.insert(std::make_pair(0x1ed3a,"OTTOMAN SIYAQ ALTERNATE NUMBER TWO THOUSAND"));
        data.insert(std::make_pair(0x1ed3b,"OTTOMAN SIYAQ ALTERNATE NUMBER TEN THOUSAND"));
        data.insert(std::make_pair(0x1ed3c,"OTTOMAN SIYAQ FRACTION ONE HALF"));
        data.insert(std::make_pair(0x1ed3d,"OTTOMAN SIYAQ FRACTION ONE SIXTH"));
        data.insert(std::make_pair(0x1ee00,"ARABIC MATHEMATICAL ALEF"));
        data.insert(std::make_pair(0x1ee01,"ARABIC MATHEMATICAL BEH"));
        data.insert(std::make_pair(0x1ee02,"ARABIC MATHEMATICAL JEEM"));
        data.insert(std::make_pair(0x1ee03,"ARABIC MATHEMATICAL DAL"));
        data.insert(std::make_pair(0x1ee05,"ARABIC MATHEMATICAL WAW"));
        data.insert(std::make_pair(0x1ee06,"ARABIC MATHEMATICAL ZAIN"));
        data.insert(std::make_pair(0x1ee07,"ARABIC MATHEMATICAL HAH"));
        data.insert(std::make_pair(0x1ee08,"ARABIC MATHEMATICAL TAH"));
        data.insert(std::make_pair(0x1ee09,"ARABIC MATHEMATICAL YEH"));
        data.insert(std::make_pair(0x1ee0a,"ARABIC MATHEMATICAL KAF"));
        data.insert(std::make_pair(0x1ee0b,"ARABIC MATHEMATICAL LAM"));
        data.insert(std::make_pair(0x1ee0c,"ARABIC MATHEMATICAL MEEM"));
        data.insert(std::make_pair(0x1ee0d,"ARABIC MATHEMATICAL NOON"));
        data.insert(std::make_pair(0x1ee0e,"ARABIC MATHEMATICAL SEEN"));
        data.insert(std::make_pair(0x1ee0f,"ARABIC MATHEMATICAL AIN"));
        data.insert(std::make_pair(0x1ee10,"ARABIC MATHEMATICAL FEH"));
        data.insert(std::make_pair(0x1ee11,"ARABIC MATHEMATICAL SAD"));
        data.insert(std::make_pair(0x1ee12,"ARABIC MATHEMATICAL QAF"));
        data.insert(std::make_pair(0x1ee13,"ARABIC MATHEMATICAL REH"));
        data.insert(std::make_pair(0x1ee14,"ARABIC MATHEMATICAL SHEEN"));
        data.insert(std::make_pair(0x1ee15,"ARABIC MATHEMATICAL TEH"));
        data.insert(std::make_pair(0x1ee16,"ARABIC MATHEMATICAL THEH"));
        data.insert(std::make_pair(0x1ee17,"ARABIC MATHEMATICAL KHAH"));
        data.insert(std::make_pair(0x1ee18,"ARABIC MATHEMATICAL THAL"));
        data.insert(std::make_pair(0x1ee19,"ARABIC MATHEMATICAL DAD"));
        data.insert(std::make_pair(0x1ee1a,"ARABIC MATHEMATICAL ZAH"));
        data.insert(std::make_pair(0x1ee1b,"ARABIC MATHEMATICAL GHAIN"));
        data.insert(std::make_pair(0x1ee1c,"ARABIC MATHEMATICAL DOTLESS BEH"));
        data.insert(std::make_pair(0x1ee1d,"ARABIC MATHEMATICAL DOTLESS NOON"));
        data.insert(std::make_pair(0x1ee1e,"ARABIC MATHEMATICAL DOTLESS FEH"));
        data.insert(std::make_pair(0x1ee1f,"ARABIC MATHEMATICAL DOTLESS QAF"));
        data.insert(std::make_pair(0x1ee21,"ARABIC MATHEMATICAL INITIAL BEH"));
        data.insert(std::make_pair(0x1ee22,"ARABIC MATHEMATICAL INITIAL JEEM"));
        data.insert(std::make_pair(0x1ee24,"ARABIC MATHEMATICAL INITIAL HEH"));
        data.insert(std::make_pair(0x1ee27,"ARABIC MATHEMATICAL INITIAL HAH"));
        data.insert(std::make_pair(0x1ee29,"ARABIC MATHEMATICAL INITIAL YEH"));
        data.insert(std::make_pair(0x1ee2a,"ARABIC MATHEMATICAL INITIAL KAF"));
        data.insert(std::make_pair(0x1ee2b,"ARABIC MATHEMATICAL INITIAL LAM"));
        data.insert(std::make_pair(0x1ee2c,"ARABIC MATHEMATICAL INITIAL MEEM"));
        data.insert(std::make_pair(0x1ee2d,"ARABIC MATHEMATICAL INITIAL NOON"));
        data.insert(std::make_pair(0x1ee2e,"ARABIC MATHEMATICAL INITIAL SEEN"));
        data.insert(std::make_pair(0x1ee2f,"ARABIC MATHEMATICAL INITIAL AIN"));
        data.insert(std::make_pair(0x1ee30,"ARABIC MATHEMATICAL INITIAL FEH"));
        data.insert(std::make_pair(0x1ee31,"ARABIC MATHEMATICAL INITIAL SAD"));
        data.insert(std::make_pair(0x1ee32,"ARABIC MATHEMATICAL INITIAL QAF"));
        data.insert(std::make_pair(0x1ee34,"ARABIC MATHEMATICAL INITIAL SHEEN"));
        data.insert(std::make_pair(0x1ee35,"ARABIC MATHEMATICAL INITIAL TEH"));
        data.insert(std::make_pair(0x1ee36,"ARABIC MATHEMATICAL INITIAL THEH"));
        data.insert(std::make_pair(0x1ee37,"ARABIC MATHEMATICAL INITIAL KHAH"));
        data.insert(std::make_pair(0x1ee39,"ARABIC MATHEMATICAL INITIAL DAD"));
        data.insert(std::make_pair(0x1ee3b,"ARABIC MATHEMATICAL INITIAL GHAIN"));
        data.insert(std::make_pair(0x1ee42,"ARABIC MATHEMATICAL TAILED JEEM"));
        data.insert(std::make_pair(0x1ee47,"ARABIC MATHEMATICAL TAILED HAH"));
        data.insert(std::make_pair(0x1ee49,"ARABIC MATHEMATICAL TAILED YEH"));
        data.insert(std::make_pair(0x1ee4b,"ARABIC MATHEMATICAL TAILED LAM"));
        data.insert(std::make_pair(0x1ee4d,"ARABIC MATHEMATICAL TAILED NOON"));
        data.insert(std::make_pair(0x1ee4e,"ARABIC MATHEMATICAL TAILED SEEN"));
        data.insert(std::make_pair(0x1ee4f,"ARABIC MATHEMATICAL TAILED AIN"));
        data.insert(std::make_pair(0x1ee51,"ARABIC MATHEMATICAL TAILED SAD"));
        data.insert(std::make_pair(0x1ee52,"ARABIC MATHEMATICAL TAILED QAF"));
        data.insert(std::make_pair(0x1ee54,"ARABIC MATHEMATICAL TAILED SHEEN"));
        data.insert(std::make_pair(0x1ee57,"ARABIC MATHEMATICAL TAILED KHAH"));
        data.insert(std::make_pair(0x1ee59,"ARABIC MATHEMATICAL TAILED DAD"));
        data.insert(std::make_pair(0x1ee5b,"ARABIC MATHEMATICAL TAILED GHAIN"));
        data.insert(std::make_pair(0x1ee5d,"ARABIC MATHEMATICAL TAILED DOTLESS NOON"));
        data.insert(std::make_pair(0x1ee5f,"ARABIC MATHEMATICAL TAILED DOTLESS QAF"));
        data.insert(std::make_pair(0x1ee61,"ARABIC MATHEMATICAL STRETCHED BEH"));
        data.insert(std::make_pair(0x1ee62,"ARABIC MATHEMATICAL STRETCHED JEEM"));
        data.insert(std::make_pair(0x1ee64,"ARABIC MATHEMATICAL STRETCHED HEH"));
        data.insert(std::make_pair(0x1ee67,"ARABIC MATHEMATICAL STRETCHED HAH"));
        data.insert(std::make_pair(0x1ee68,"ARABIC MATHEMATICAL STRETCHED TAH"));
        data.insert(std::make_pair(0x1ee69,"ARABIC MATHEMATICAL STRETCHED YEH"));
        data.insert(std::make_pair(0x1ee6a,"ARABIC MATHEMATICAL STRETCHED KAF"));
        data.insert(std::make_pair(0x1ee6c,"ARABIC MATHEMATICAL STRETCHED MEEM"));
        data.insert(std::make_pair(0x1ee6d,"ARABIC MATHEMATICAL STRETCHED NOON"));
        data.insert(std::make_pair(0x1ee6e,"ARABIC MATHEMATICAL STRETCHED SEEN"));
        data.insert(std::make_pair(0x1ee6f,"ARABIC MATHEMATICAL STRETCHED AIN"));
        data.insert(std::make_pair(0x1ee70,"ARABIC MATHEMATICAL STRETCHED FEH"));
        data.insert(std::make_pair(0x1ee71,"ARABIC MATHEMATICAL STRETCHED SAD"));
        data.insert(std::make_pair(0x1ee72,"ARABIC MATHEMATICAL STRETCHED QAF"));
        data.insert(std::make_pair(0x1ee74,"ARABIC MATHEMATICAL STRETCHED SHEEN"));
        data.insert(std::make_pair(0x1ee75,"ARABIC MATHEMATICAL STRETCHED TEH"));
        data.insert(std::make_pair(0x1ee76,"ARABIC MATHEMATICAL STRETCHED THEH"));
        data.insert(std::make_pair(0x1ee77,"ARABIC MATHEMATICAL STRETCHED KHAH"));
        data.insert(std::make_pair(0x1ee79,"ARABIC MATHEMATICAL STRETCHED DAD"));
        data.insert(std::make_pair(0x1ee7a,"ARABIC MATHEMATICAL STRETCHED ZAH"));
        data.insert(std::make_pair(0x1ee7b,"ARABIC MATHEMATICAL STRETCHED GHAIN"));
        data.insert(std::make_pair(0x1ee7c,"ARABIC MATHEMATICAL STRETCHED DOTLESS BEH"));
        data.insert(std::make_pair(0x1ee7e,"ARABIC MATHEMATICAL STRETCHED DOTLESS FEH"));
        data.insert(std::make_pair(0x1ee80,"ARABIC MATHEMATICAL LOOPED ALEF"));
        data.insert(std::make_pair(0x1ee81,"ARABIC MATHEMATICAL LOOPED BEH"));
        data.insert(std::make_pair(0x1ee82,"ARABIC MATHEMATICAL LOOPED JEEM"));
        data.insert(std::make_pair(0x1ee83,"ARABIC MATHEMATICAL LOOPED DAL"));
        data.insert(std::make_pair(0x1ee84,"ARABIC MATHEMATICAL LOOPED HEH"));
        data.insert(std::make_pair(0x1ee85,"ARABIC MATHEMATICAL LOOPED WAW"));
        data.insert(std::make_pair(0x1ee86,"ARABIC MATHEMATICAL LOOPED ZAIN"));
        data.insert(std::make_pair(0x1ee87,"ARABIC MATHEMATICAL LOOPED HAH"));
        data.insert(std::make_pair(0x1ee88,"ARABIC MATHEMATICAL LOOPED TAH"));
        data.insert(std::make_pair(0x1ee89,"ARABIC MATHEMATICAL LOOPED YEH"));
        data.insert(std::make_pair(0x1ee8b,"ARABIC MATHEMATICAL LOOPED LAM"));
        data.insert(std::make_pair(0x1ee8c,"ARABIC MATHEMATICAL LOOPED MEEM"));
        data.insert(std::make_pair(0x1ee8d,"ARABIC MATHEMATICAL LOOPED NOON"));
        data.insert(std::make_pair(0x1ee8e,"ARABIC MATHEMATICAL LOOPED SEEN"));
        data.insert(std::make_pair(0x1ee8f,"ARABIC MATHEMATICAL LOOPED AIN"));
        data.insert(std::make_pair(0x1ee90,"ARABIC MATHEMATICAL LOOPED FEH"));
        data.insert(std::make_pair(0x1ee91,"ARABIC MATHEMATICAL LOOPED SAD"));
        data.insert(std::make_pair(0x1ee92,"ARABIC MATHEMATICAL LOOPED QAF"));
        data.insert(std::make_pair(0x1ee93,"ARABIC MATHEMATICAL LOOPED REH"));
        data.insert(std::make_pair(0x1ee94,"ARABIC MATHEMATICAL LOOPED SHEEN"));
        data.insert(std::make_pair(0x1ee95,"ARABIC MATHEMATICAL LOOPED TEH"));
        data.insert(std::make_pair(0x1ee96,"ARABIC MATHEMATICAL LOOPED THEH"));
        data.insert(std::make_pair(0x1ee97,"ARABIC MATHEMATICAL LOOPED KHAH"));
        data.insert(std::make_pair(0x1ee98,"ARABIC MATHEMATICAL LOOPED THAL"));
        data.insert(std::make_pair(0x1ee99,"ARABIC MATHEMATICAL LOOPED DAD"));
        data.insert(std::make_pair(0x1ee9a,"ARABIC MATHEMATICAL LOOPED ZAH"));
        data.insert(std::make_pair(0x1ee9b,"ARABIC MATHEMATICAL LOOPED GHAIN"));
        data.insert(std::make_pair(0x1eea1,"ARABIC MATHEMATICAL DOUBLE-STRUCK BEH"));
        data.insert(std::make_pair(0x1eea2,"ARABIC MATHEMATICAL DOUBLE-STRUCK JEEM"));
        data.insert(std::make_pair(0x1eea3,"ARABIC MATHEMATICAL DOUBLE-STRUCK DAL"));
        data.insert(std::make_pair(0x1eea5,"ARABIC MATHEMATICAL DOUBLE-STRUCK WAW"));
        data.insert(std::make_pair(0x1eea6,"ARABIC MATHEMATICAL DOUBLE-STRUCK ZAIN"));
        data.insert(std::make_pair(0x1eea7,"ARABIC MATHEMATICAL DOUBLE-STRUCK HAH"));
        data.insert(std::make_pair(0x1eea8,"ARABIC MATHEMATICAL DOUBLE-STRUCK TAH"));
        data.insert(std::make_pair(0x1eea9,"ARABIC MATHEMATICAL DOUBLE-STRUCK YEH"));
        data.insert(std::make_pair(0x1eeab,"ARABIC MATHEMATICAL DOUBLE-STRUCK LAM"));
        data.insert(std::make_pair(0x1eeac,"ARABIC MATHEMATICAL DOUBLE-STRUCK MEEM"));
        data.insert(std::make_pair(0x1eead,"ARABIC MATHEMATICAL DOUBLE-STRUCK NOON"));
        data.insert(std::make_pair(0x1eeae,"ARABIC MATHEMATICAL DOUBLE-STRUCK SEEN"));
        data.insert(std::make_pair(0x1eeaf,"ARABIC MATHEMATICAL DOUBLE-STRUCK AIN"));
        data.insert(std::make_pair(0x1eeb0,"ARABIC MATHEMATICAL DOUBLE-STRUCK FEH"));
        data.insert(std::make_pair(0x1eeb1,"ARABIC MATHEMATICAL DOUBLE-STRUCK SAD"));
        data.insert(std::make_pair(0x1eeb2,"ARABIC MATHEMATICAL DOUBLE-STRUCK QAF"));
        data.insert(std::make_pair(0x1eeb3,"ARABIC MATHEMATICAL DOUBLE-STRUCK REH"));
        data.insert(std::make_pair(0x1eeb4,"ARABIC MATHEMATICAL DOUBLE-STRUCK SHEEN"));
        data.insert(std::make_pair(0x1eeb5,"ARABIC MATHEMATICAL DOUBLE-STRUCK TEH"));
        data.insert(std::make_pair(0x1eeb6,"ARABIC MATHEMATICAL DOUBLE-STRUCK THEH"));
        data.insert(std::make_pair(0x1eeb7,"ARABIC MATHEMATICAL DOUBLE-STRUCK KHAH"));
        data.insert(std::make_pair(0x1eeb8,"ARABIC MATHEMATICAL DOUBLE-STRUCK THAL"));
        data.insert(std::make_pair(0x1eeb9,"ARABIC MATHEMATICAL DOUBLE-STRUCK DAD"));
        data.insert(std::make_pair(0x1eeba,"ARABIC MATHEMATICAL DOUBLE-STRUCK ZAH"));
        data.insert(std::make_pair(0x1eebb,"ARABIC MATHEMATICAL DOUBLE-STRUCK GHAIN"));
        data.insert(std::make_pair(0x1eef0,"ARABIC MATHEMATICAL OPERATOR MEEM WITH HAH WITH TATWEEL"));
        data.insert(std::make_pair(0x1eef1,"ARABIC MATHEMATICAL OPERATOR HAH WITH DAL"));
        data.insert(std::make_pair(0x1f000,"MAHJONG TILE EAST WIND"));
        data.insert(std::make_pair(0x1f001,"MAHJONG TILE SOUTH WIND"));
        data.insert(std::make_pair(0x1f002,"MAHJONG TILE WEST WIND"));
        data.insert(std::make_pair(0x1f003,"MAHJONG TILE NORTH WIND"));
        data.insert(std::make_pair(0x1f004,"MAHJONG TILE RED DRAGON"));
        data.insert(std::make_pair(0x1f005,"MAHJONG TILE GREEN DRAGON"));
        data.insert(std::make_pair(0x1f006,"MAHJONG TILE WHITE DRAGON"));
        data.insert(std::make_pair(0x1f007,"MAHJONG TILE ONE OF CHARACTERS"));
        data.insert(std::make_pair(0x1f008,"MAHJONG TILE TWO OF CHARACTERS"));
        data.insert(std::make_pair(0x1f009,"MAHJONG TILE THREE OF CHARACTERS"));
        data.insert(std::make_pair(0x1f00a,"MAHJONG TILE FOUR OF CHARACTERS"));
        data.insert(std::make_pair(0x1f00b,"MAHJONG TILE FIVE OF CHARACTERS"));
        data.insert(std::make_pair(0x1f00c,"MAHJONG TILE SIX OF CHARACTERS"));
        data.insert(std::make_pair(0x1f00d,"MAHJONG TILE SEVEN OF CHARACTERS"));
        data.insert(std::make_pair(0x1f00e,"MAHJONG TILE EIGHT OF CHARACTERS"));
        data.insert(std::make_pair(0x1f00f,"MAHJONG TILE NINE OF CHARACTERS"));
        data.insert(std::make_pair(0x1f010,"MAHJONG TILE ONE OF BAMBOOS"));
        data.insert(std::make_pair(0x1f011,"MAHJONG TILE TWO OF BAMBOOS"));
        data.insert(std::make_pair(0x1f012,"MAHJONG TILE THREE OF BAMBOOS"));
        data.insert(std::make_pair(0x1f013,"MAHJONG TILE FOUR OF BAMBOOS"));
        data.insert(std::make_pair(0x1f014,"MAHJONG TILE FIVE OF BAMBOOS"));
        data.insert(std::make_pair(0x1f015,"MAHJONG TILE SIX OF BAMBOOS"));
        data.insert(std::make_pair(0x1f016,"MAHJONG TILE SEVEN OF BAMBOOS"));
        data.insert(std::make_pair(0x1f017,"MAHJONG TILE EIGHT OF BAMBOOS"));
        data.insert(std::make_pair(0x1f018,"MAHJONG TILE NINE OF BAMBOOS"));
        data.insert(std::make_pair(0x1f019,"MAHJONG TILE ONE OF CIRCLES"));
        data.insert(std::make_pair(0x1f01a,"MAHJONG TILE TWO OF CIRCLES"));
        data.insert(std::make_pair(0x1f01b,"MAHJONG TILE THREE OF CIRCLES"));
        data.insert(std::make_pair(0x1f01c,"MAHJONG TILE FOUR OF CIRCLES"));
        data.insert(std::make_pair(0x1f01d,"MAHJONG TILE FIVE OF CIRCLES"));
        data.insert(std::make_pair(0x1f01e,"MAHJONG TILE SIX OF CIRCLES"));
        data.insert(std::make_pair(0x1f01f,"MAHJONG TILE SEVEN OF CIRCLES"));
        data.insert(std::make_pair(0x1f020,"MAHJONG TILE EIGHT OF CIRCLES"));
        data.insert(std::make_pair(0x1f021,"MAHJONG TILE NINE OF CIRCLES"));
        data.insert(std::make_pair(0x1f022,"MAHJONG TILE PLUM"));
        data.insert(std::make_pair(0x1f023,"MAHJONG TILE ORCHID"));
        data.insert(std::make_pair(0x1f024,"MAHJONG TILE BAMBOO"));
        data.insert(std::make_pair(0x1f025,"MAHJONG TILE CHRYSANTHEMUM"));
        data.insert(std::make_pair(0x1f026,"MAHJONG TILE SPRING"));
        data.insert(std::make_pair(0x1f027,"MAHJONG TILE SUMMER"));
        data.insert(std::make_pair(0x1f028,"MAHJONG TILE AUTUMN"));
        data.insert(std::make_pair(0x1f029,"MAHJONG TILE WINTER"));
        data.insert(std::make_pair(0x1f02a,"MAHJONG TILE JOKER"));
        data.insert(std::make_pair(0x1f02b,"MAHJONG TILE BACK"));
        data.insert(std::make_pair(0x1f030,"DOMINO TILE HORIZONTAL BACK"));
        data.insert(std::make_pair(0x1f031,"DOMINO TILE HORIZONTAL-00-00"));
        data.insert(std::make_pair(0x1f032,"DOMINO TILE HORIZONTAL-00-01"));
        data.insert(std::make_pair(0x1f033,"DOMINO TILE HORIZONTAL-00-02"));
        data.insert(std::make_pair(0x1f034,"DOMINO TILE HORIZONTAL-00-03"));
        data.insert(std::make_pair(0x1f035,"DOMINO TILE HORIZONTAL-00-04"));
        data.insert(std::make_pair(0x1f036,"DOMINO TILE HORIZONTAL-00-05"));
        data.insert(std::make_pair(0x1f037,"DOMINO TILE HORIZONTAL-00-06"));
        data.insert(std::make_pair(0x1f038,"DOMINO TILE HORIZONTAL-01-00"));
        data.insert(std::make_pair(0x1f039,"DOMINO TILE HORIZONTAL-01-01"));
        data.insert(std::make_pair(0x1f03a,"DOMINO TILE HORIZONTAL-01-02"));
        data.insert(std::make_pair(0x1f03b,"DOMINO TILE HORIZONTAL-01-03"));
        data.insert(std::make_pair(0x1f03c,"DOMINO TILE HORIZONTAL-01-04"));
        data.insert(std::make_pair(0x1f03d,"DOMINO TILE HORIZONTAL-01-05"));
        data.insert(std::make_pair(0x1f03e,"DOMINO TILE HORIZONTAL-01-06"));
        data.insert(std::make_pair(0x1f03f,"DOMINO TILE HORIZONTAL-02-00"));
        data.insert(std::make_pair(0x1f040,"DOMINO TILE HORIZONTAL-02-01"));
        data.insert(std::make_pair(0x1f041,"DOMINO TILE HORIZONTAL-02-02"));
        data.insert(std::make_pair(0x1f042,"DOMINO TILE HORIZONTAL-02-03"));
        data.insert(std::make_pair(0x1f043,"DOMINO TILE HORIZONTAL-02-04"));
        data.insert(std::make_pair(0x1f044,"DOMINO TILE HORIZONTAL-02-05"));
        data.insert(std::make_pair(0x1f045,"DOMINO TILE HORIZONTAL-02-06"));
        data.insert(std::make_pair(0x1f046,"DOMINO TILE HORIZONTAL-03-00"));
        data.insert(std::make_pair(0x1f047,"DOMINO TILE HORIZONTAL-03-01"));
        data.insert(std::make_pair(0x1f048,"DOMINO TILE HORIZONTAL-03-02"));
        data.insert(std::make_pair(0x1f049,"DOMINO TILE HORIZONTAL-03-03"));
        data.insert(std::make_pair(0x1f04a,"DOMINO TILE HORIZONTAL-03-04"));
        data.insert(std::make_pair(0x1f04b,"DOMINO TILE HORIZONTAL-03-05"));
        data.insert(std::make_pair(0x1f04c,"DOMINO TILE HORIZONTAL-03-06"));
        data.insert(std::make_pair(0x1f04d,"DOMINO TILE HORIZONTAL-04-00"));
        data.insert(std::make_pair(0x1f04e,"DOMINO TILE HORIZONTAL-04-01"));
        data.insert(std::make_pair(0x1f04f,"DOMINO TILE HORIZONTAL-04-02"));
        data.insert(std::make_pair(0x1f050,"DOMINO TILE HORIZONTAL-04-03"));
        data.insert(std::make_pair(0x1f051,"DOMINO TILE HORIZONTAL-04-04"));
        data.insert(std::make_pair(0x1f052,"DOMINO TILE HORIZONTAL-04-05"));
        data.insert(std::make_pair(0x1f053,"DOMINO TILE HORIZONTAL-04-06"));
        data.insert(std::make_pair(0x1f054,"DOMINO TILE HORIZONTAL-05-00"));
        data.insert(std::make_pair(0x1f055,"DOMINO TILE HORIZONTAL-05-01"));
        data.insert(std::make_pair(0x1f056,"DOMINO TILE HORIZONTAL-05-02"));
        data.insert(std::make_pair(0x1f057,"DOMINO TILE HORIZONTAL-05-03"));
        data.insert(std::make_pair(0x1f058,"DOMINO TILE HORIZONTAL-05-04"));
        data.insert(std::make_pair(0x1f059,"DOMINO TILE HORIZONTAL-05-05"));
        data.insert(std::make_pair(0x1f05a,"DOMINO TILE HORIZONTAL-05-06"));
        data.insert(std::make_pair(0x1f05b,"DOMINO TILE HORIZONTAL-06-00"));
        data.insert(std::make_pair(0x1f05c,"DOMINO TILE HORIZONTAL-06-01"));
        data.insert(std::make_pair(0x1f05d,"DOMINO TILE HORIZONTAL-06-02"));
        data.insert(std::make_pair(0x1f05e,"DOMINO TILE HORIZONTAL-06-03"));
        data.insert(std::make_pair(0x1f05f,"DOMINO TILE HORIZONTAL-06-04"));
        data.insert(std::make_pair(0x1f060,"DOMINO TILE HORIZONTAL-06-05"));
        data.insert(std::make_pair(0x1f061,"DOMINO TILE HORIZONTAL-06-06"));
        data.insert(std::make_pair(0x1f062,"DOMINO TILE VERTICAL BACK"));
        data.insert(std::make_pair(0x1f063,"DOMINO TILE VERTICAL-00-00"));
        data.insert(std::make_pair(0x1f064,"DOMINO TILE VERTICAL-00-01"));
        data.insert(std::make_pair(0x1f065,"DOMINO TILE VERTICAL-00-02"));
        data.insert(std::make_pair(0x1f066,"DOMINO TILE VERTICAL-00-03"));
        data.insert(std::make_pair(0x1f067,"DOMINO TILE VERTICAL-00-04"));
        data.insert(std::make_pair(0x1f068,"DOMINO TILE VERTICAL-00-05"));
        data.insert(std::make_pair(0x1f069,"DOMINO TILE VERTICAL-00-06"));
        data.insert(std::make_pair(0x1f06a,"DOMINO TILE VERTICAL-01-00"));
        data.insert(std::make_pair(0x1f06b,"DOMINO TILE VERTICAL-01-01"));
        data.insert(std::make_pair(0x1f06c,"DOMINO TILE VERTICAL-01-02"));
        data.insert(std::make_pair(0x1f06d,"DOMINO TILE VERTICAL-01-03"));
        data.insert(std::make_pair(0x1f06e,"DOMINO TILE VERTICAL-01-04"));
        data.insert(std::make_pair(0x1f06f,"DOMINO TILE VERTICAL-01-05"));
        data.insert(std::make_pair(0x1f070,"DOMINO TILE VERTICAL-01-06"));
        data.insert(std::make_pair(0x1f071,"DOMINO TILE VERTICAL-02-00"));
        data.insert(std::make_pair(0x1f072,"DOMINO TILE VERTICAL-02-01"));
        data.insert(std::make_pair(0x1f073,"DOMINO TILE VERTICAL-02-02"));
        data.insert(std::make_pair(0x1f074,"DOMINO TILE VERTICAL-02-03"));
        data.insert(std::make_pair(0x1f075,"DOMINO TILE VERTICAL-02-04"));
        data.insert(std::make_pair(0x1f076,"DOMINO TILE VERTICAL-02-05"));
        data.insert(std::make_pair(0x1f077,"DOMINO TILE VERTICAL-02-06"));
        data.insert(std::make_pair(0x1f078,"DOMINO TILE VERTICAL-03-00"));
        data.insert(std::make_pair(0x1f079,"DOMINO TILE VERTICAL-03-01"));
        data.insert(std::make_pair(0x1f07a,"DOMINO TILE VERTICAL-03-02"));
        data.insert(std::make_pair(0x1f07b,"DOMINO TILE VERTICAL-03-03"));
        data.insert(std::make_pair(0x1f07c,"DOMINO TILE VERTICAL-03-04"));
        data.insert(std::make_pair(0x1f07d,"DOMINO TILE VERTICAL-03-05"));
        data.insert(std::make_pair(0x1f07e,"DOMINO TILE VERTICAL-03-06"));
        data.insert(std::make_pair(0x1f07f,"DOMINO TILE VERTICAL-04-00"));
        data.insert(std::make_pair(0x1f080,"DOMINO TILE VERTICAL-04-01"));
        data.insert(std::make_pair(0x1f081,"DOMINO TILE VERTICAL-04-02"));
        data.insert(std::make_pair(0x1f082,"DOMINO TILE VERTICAL-04-03"));
        data.insert(std::make_pair(0x1f083,"DOMINO TILE VERTICAL-04-04"));
        data.insert(std::make_pair(0x1f084,"DOMINO TILE VERTICAL-04-05"));
        data.insert(std::make_pair(0x1f085,"DOMINO TILE VERTICAL-04-06"));
        data.insert(std::make_pair(0x1f086,"DOMINO TILE VERTICAL-05-00"));
        data.insert(std::make_pair(0x1f087,"DOMINO TILE VERTICAL-05-01"));
        data.insert(std::make_pair(0x1f088,"DOMINO TILE VERTICAL-05-02"));
        data.insert(std::make_pair(0x1f089,"DOMINO TILE VERTICAL-05-03"));
        data.insert(std::make_pair(0x1f08a,"DOMINO TILE VERTICAL-05-04"));
        data.insert(std::make_pair(0x1f08b,"DOMINO TILE VERTICAL-05-05"));
        data.insert(std::make_pair(0x1f08c,"DOMINO TILE VERTICAL-05-06"));
        data.insert(std::make_pair(0x1f08d,"DOMINO TILE VERTICAL-06-00"));
        data.insert(std::make_pair(0x1f08e,"DOMINO TILE VERTICAL-06-01"));
        data.insert(std::make_pair(0x1f08f,"DOMINO TILE VERTICAL-06-02"));
        data.insert(std::make_pair(0x1f090,"DOMINO TILE VERTICAL-06-03"));
        data.insert(std::make_pair(0x1f091,"DOMINO TILE VERTICAL-06-04"));
        data.insert(std::make_pair(0x1f092,"DOMINO TILE VERTICAL-06-05"));
        data.insert(std::make_pair(0x1f093,"DOMINO TILE VERTICAL-06-06"));
        data.insert(std::make_pair(0x1f0a0,"PLAYING CARD BACK"));
        data.insert(std::make_pair(0x1f0a1,"PLAYING CARD ACE OF SPADES"));
        data.insert(std::make_pair(0x1f0a2,"PLAYING CARD TWO OF SPADES"));
        data.insert(std::make_pair(0x1f0a3,"PLAYING CARD THREE OF SPADES"));
        data.insert(std::make_pair(0x1f0a4,"PLAYING CARD FOUR OF SPADES"));
        data.insert(std::make_pair(0x1f0a5,"PLAYING CARD FIVE OF SPADES"));
        data.insert(std::make_pair(0x1f0a6,"PLAYING CARD SIX OF SPADES"));
        data.insert(std::make_pair(0x1f0a7,"PLAYING CARD SEVEN OF SPADES"));
        data.insert(std::make_pair(0x1f0a8,"PLAYING CARD EIGHT OF SPADES"));
        data.insert(std::make_pair(0x1f0a9,"PLAYING CARD NINE OF SPADES"));
        data.insert(std::make_pair(0x1f0aa,"PLAYING CARD TEN OF SPADES"));
        data.insert(std::make_pair(0x1f0ab,"PLAYING CARD JACK OF SPADES"));
        data.insert(std::make_pair(0x1f0ac,"PLAYING CARD KNIGHT OF SPADES"));
        data.insert(std::make_pair(0x1f0ad,"PLAYING CARD QUEEN OF SPADES"));
        data.insert(std::make_pair(0x1f0ae,"PLAYING CARD KING OF SPADES"));
        data.insert(std::make_pair(0x1f0b1,"PLAYING CARD ACE OF HEARTS"));
        data.insert(std::make_pair(0x1f0b2,"PLAYING CARD TWO OF HEARTS"));
        data.insert(std::make_pair(0x1f0b3,"PLAYING CARD THREE OF HEARTS"));
        data.insert(std::make_pair(0x1f0b4,"PLAYING CARD FOUR OF HEARTS"));
        data.insert(std::make_pair(0x1f0b5,"PLAYING CARD FIVE OF HEARTS"));
        data.insert(std::make_pair(0x1f0b6,"PLAYING CARD SIX OF HEARTS"));
        data.insert(std::make_pair(0x1f0b7,"PLAYING CARD SEVEN OF HEARTS"));
        data.insert(std::make_pair(0x1f0b8,"PLAYING CARD EIGHT OF HEARTS"));
        data.insert(std::make_pair(0x1f0b9,"PLAYING CARD NINE OF HEARTS"));
        data.insert(std::make_pair(0x1f0ba,"PLAYING CARD TEN OF HEARTS"));
        data.insert(std::make_pair(0x1f0bb,"PLAYING CARD JACK OF HEARTS"));
        data.insert(std::make_pair(0x1f0bc,"PLAYING CARD KNIGHT OF HEARTS"));
        data.insert(std::make_pair(0x1f0bd,"PLAYING CARD QUEEN OF HEARTS"));
        data.insert(std::make_pair(0x1f0be,"PLAYING CARD KING OF HEARTS"));
        data.insert(std::make_pair(0x1f0bf,"PLAYING CARD RED JOKER"));
        data.insert(std::make_pair(0x1f0c1,"PLAYING CARD ACE OF DIAMONDS"));
        data.insert(std::make_pair(0x1f0c2,"PLAYING CARD TWO OF DIAMONDS"));
        data.insert(std::make_pair(0x1f0c3,"PLAYING CARD THREE OF DIAMONDS"));
        data.insert(std::make_pair(0x1f0c4,"PLAYING CARD FOUR OF DIAMONDS"));
        data.insert(std::make_pair(0x1f0c5,"PLAYING CARD FIVE OF DIAMONDS"));
        data.insert(std::make_pair(0x1f0c6,"PLAYING CARD SIX OF DIAMONDS"));
        data.insert(std::make_pair(0x1f0c7,"PLAYING CARD SEVEN OF DIAMONDS"));
        data.insert(std::make_pair(0x1f0c8,"PLAYING CARD EIGHT OF DIAMONDS"));
        data.insert(std::make_pair(0x1f0c9,"PLAYING CARD NINE OF DIAMONDS"));
        data.insert(std::make_pair(0x1f0ca,"PLAYING CARD TEN OF DIAMONDS"));
        data.insert(std::make_pair(0x1f0cb,"PLAYING CARD JACK OF DIAMONDS"));
        data.insert(std::make_pair(0x1f0cc,"PLAYING CARD KNIGHT OF DIAMONDS"));
        data.insert(std::make_pair(0x1f0cd,"PLAYING CARD QUEEN OF DIAMONDS"));
        data.insert(std::make_pair(0x1f0ce,"PLAYING CARD KING OF DIAMONDS"));
        data.insert(std::make_pair(0x1f0cf,"PLAYING CARD BLACK JOKER"));
        data.insert(std::make_pair(0x1f0d1,"PLAYING CARD ACE OF CLUBS"));
        data.insert(std::make_pair(0x1f0d2,"PLAYING CARD TWO OF CLUBS"));
        data.insert(std::make_pair(0x1f0d3,"PLAYING CARD THREE OF CLUBS"));
        data.insert(std::make_pair(0x1f0d4,"PLAYING CARD FOUR OF CLUBS"));
        data.insert(std::make_pair(0x1f0d5,"PLAYING CARD FIVE OF CLUBS"));
        data.insert(std::make_pair(0x1f0d6,"PLAYING CARD SIX OF CLUBS"));
        data.insert(std::make_pair(0x1f0d7,"PLAYING CARD SEVEN OF CLUBS"));
        data.insert(std::make_pair(0x1f0d8,"PLAYING CARD EIGHT OF CLUBS"));
        data.insert(std::make_pair(0x1f0d9,"PLAYING CARD NINE OF CLUBS"));
        data.insert(std::make_pair(0x1f0da,"PLAYING CARD TEN OF CLUBS"));
        data.insert(std::make_pair(0x1f0db,"PLAYING CARD JACK OF CLUBS"));
        data.insert(std::make_pair(0x1f0dc,"PLAYING CARD KNIGHT OF CLUBS"));
        data.insert(std::make_pair(0x1f0dd,"PLAYING CARD QUEEN OF CLUBS"));
        data.insert(std::make_pair(0x1f0de,"PLAYING CARD KING OF CLUBS"));
        data.insert(std::make_pair(0x1f0df,"PLAYING CARD WHITE JOKER"));
        data.insert(std::make_pair(0x1f0e0,"PLAYING CARD FOOL"));
        data.insert(std::make_pair(0x1f0e1,"PLAYING CARD TRUMP-1"));
        data.insert(std::make_pair(0x1f0e2,"PLAYING CARD TRUMP-2"));
        data.insert(std::make_pair(0x1f0e3,"PLAYING CARD TRUMP-3"));
        data.insert(std::make_pair(0x1f0e4,"PLAYING CARD TRUMP-4"));
        data.insert(std::make_pair(0x1f0e5,"PLAYING CARD TRUMP-5"));
        data.insert(std::make_pair(0x1f0e6,"PLAYING CARD TRUMP-6"));
        data.insert(std::make_pair(0x1f0e7,"PLAYING CARD TRUMP-7"));
        data.insert(std::make_pair(0x1f0e8,"PLAYING CARD TRUMP-8"));
        data.insert(std::make_pair(0x1f0e9,"PLAYING CARD TRUMP-9"));
        data.insert(std::make_pair(0x1f0ea,"PLAYING CARD TRUMP-10"));
        data.insert(std::make_pair(0x1f0eb,"PLAYING CARD TRUMP-11"));
        data.insert(std::make_pair(0x1f0ec,"PLAYING CARD TRUMP-12"));
        data.insert(std::make_pair(0x1f0ed,"PLAYING CARD TRUMP-13"));
        data.insert(std::make_pair(0x1f0ee,"PLAYING CARD TRUMP-14"));
        data.insert(std::make_pair(0x1f0ef,"PLAYING CARD TRUMP-15"));
        data.insert(std::make_pair(0x1f0f0,"PLAYING CARD TRUMP-16"));
        data.insert(std::make_pair(0x1f0f1,"PLAYING CARD TRUMP-17"));
        data.insert(std::make_pair(0x1f0f2,"PLAYING CARD TRUMP-18"));
        data.insert(std::make_pair(0x1f0f3,"PLAYING CARD TRUMP-19"));
        data.insert(std::make_pair(0x1f0f4,"PLAYING CARD TRUMP-20"));
        data.insert(std::make_pair(0x1f0f5,"PLAYING CARD TRUMP-21"));
        data.insert(std::make_pair(0x1f100,"DIGIT ZERO FULL STOP"));
        data.insert(std::make_pair(0x1f101,"DIGIT ZERO COMMA"));
        data.insert(std::make_pair(0x1f102,"DIGIT ONE COMMA"));
        data.insert(std::make_pair(0x1f103,"DIGIT TWO COMMA"));
        data.insert(std::make_pair(0x1f104,"DIGIT THREE COMMA"));
        data.insert(std::make_pair(0x1f105,"DIGIT FOUR COMMA"));
        data.insert(std::make_pair(0x1f106,"DIGIT FIVE COMMA"));
        data.insert(std::make_pair(0x1f107,"DIGIT SIX COMMA"));
        data.insert(std::make_pair(0x1f108,"DIGIT SEVEN COMMA"));
        data.insert(std::make_pair(0x1f109,"DIGIT EIGHT COMMA"));
        data.insert(std::make_pair(0x1f10a,"DIGIT NINE COMMA"));
        data.insert(std::make_pair(0x1f10b,"DINGBAT CIRCLED SANS-SERIF DIGIT ZERO"));
        data.insert(std::make_pair(0x1f10c,"DINGBAT NEGATIVE CIRCLED SANS-SERIF DIGIT ZERO"));
        data.insert(std::make_pair(0x1f10d,"CIRCLED ZERO WITH SLASH"));
        data.insert(std::make_pair(0x1f10e,"CIRCLED ANTICLOCKWISE ARROW"));
        data.insert(std::make_pair(0x1f10f,"CIRCLED DOLLAR SIGN WITH OVERLAID BACKSLASH"));
        data.insert(std::make_pair(0x1f110,"PARENTHESIZED LATIN CAPITAL LETTER A"));
        data.insert(std::make_pair(0x1f111,"PARENTHESIZED LATIN CAPITAL LETTER B"));
        data.insert(std::make_pair(0x1f112,"PARENTHESIZED LATIN CAPITAL LETTER C"));
        data.insert(std::make_pair(0x1f113,"PARENTHESIZED LATIN CAPITAL LETTER D"));
        data.insert(std::make_pair(0x1f114,"PARENTHESIZED LATIN CAPITAL LETTER E"));
        data.insert(std::make_pair(0x1f115,"PARENTHESIZED LATIN CAPITAL LETTER F"));
        data.insert(std::make_pair(0x1f116,"PARENTHESIZED LATIN CAPITAL LETTER G"));
        data.insert(std::make_pair(0x1f117,"PARENTHESIZED LATIN CAPITAL LETTER H"));
        data.insert(std::make_pair(0x1f118,"PARENTHESIZED LATIN CAPITAL LETTER I"));
        data.insert(std::make_pair(0x1f119,"PARENTHESIZED LATIN CAPITAL LETTER J"));
        data.insert(std::make_pair(0x1f11a,"PARENTHESIZED LATIN CAPITAL LETTER K"));
        data.insert(std::make_pair(0x1f11b,"PARENTHESIZED LATIN CAPITAL LETTER L"));
        data.insert(std::make_pair(0x1f11c,"PARENTHESIZED LATIN CAPITAL LETTER M"));
        data.insert(std::make_pair(0x1f11d,"PARENTHESIZED LATIN CAPITAL LETTER N"));
        data.insert(std::make_pair(0x1f11e,"PARENTHESIZED LATIN CAPITAL LETTER O"));
        data.insert(std::make_pair(0x1f11f,"PARENTHESIZED LATIN CAPITAL LETTER P"));
        data.insert(std::make_pair(0x1f120,"PARENTHESIZED LATIN CAPITAL LETTER Q"));
        data.insert(std::make_pair(0x1f121,"PARENTHESIZED LATIN CAPITAL LETTER R"));
        data.insert(std::make_pair(0x1f122,"PARENTHESIZED LATIN CAPITAL LETTER S"));
        data.insert(std::make_pair(0x1f123,"PARENTHESIZED LATIN CAPITAL LETTER T"));
        data.insert(std::make_pair(0x1f124,"PARENTHESIZED LATIN CAPITAL LETTER U"));
        data.insert(std::make_pair(0x1f125,"PARENTHESIZED LATIN CAPITAL LETTER V"));
        data.insert(std::make_pair(0x1f126,"PARENTHESIZED LATIN CAPITAL LETTER W"));
        data.insert(std::make_pair(0x1f127,"PARENTHESIZED LATIN CAPITAL LETTER X"));
        data.insert(std::make_pair(0x1f128,"PARENTHESIZED LATIN CAPITAL LETTER Y"));
        data.insert(std::make_pair(0x1f129,"PARENTHESIZED LATIN CAPITAL LETTER Z"));
        data.insert(std::make_pair(0x1f12a,"TORTOISE SHELL BRACKETED LATIN CAPITAL LETTER S"));
        data.insert(std::make_pair(0x1f12b,"CIRCLED ITALIC LATIN CAPITAL LETTER C"));
        data.insert(std::make_pair(0x1f12c,"CIRCLED ITALIC LATIN CAPITAL LETTER R"));
        data.insert(std::make_pair(0x1f12d,"CIRCLED CD"));
        data.insert(std::make_pair(0x1f12e,"CIRCLED WZ"));
        data.insert(std::make_pair(0x1f12f,"COPYLEFT SYMBOL"));
        data.insert(std::make_pair(0x1f130,"SQUARED LATIN CAPITAL LETTER A"));
        data.insert(std::make_pair(0x1f131,"SQUARED LATIN CAPITAL LETTER B"));
        data.insert(std::make_pair(0x1f132,"SQUARED LATIN CAPITAL LETTER C"));
        data.insert(std::make_pair(0x1f133,"SQUARED LATIN CAPITAL LETTER D"));
        data.insert(std::make_pair(0x1f134,"SQUARED LATIN CAPITAL LETTER E"));
        data.insert(std::make_pair(0x1f135,"SQUARED LATIN CAPITAL LETTER F"));
        data.insert(std::make_pair(0x1f136,"SQUARED LATIN CAPITAL LETTER G"));
        data.insert(std::make_pair(0x1f137,"SQUARED LATIN CAPITAL LETTER H"));
        data.insert(std::make_pair(0x1f138,"SQUARED LATIN CAPITAL LETTER I"));
        data.insert(std::make_pair(0x1f139,"SQUARED LATIN CAPITAL LETTER J"));
        data.insert(std::make_pair(0x1f13a,"SQUARED LATIN CAPITAL LETTER K"));
        data.insert(std::make_pair(0x1f13b,"SQUARED LATIN CAPITAL LETTER L"));
        data.insert(std::make_pair(0x1f13c,"SQUARED LATIN CAPITAL LETTER M"));
        data.insert(std::make_pair(0x1f13d,"SQUARED LATIN CAPITAL LETTER N"));
        data.insert(std::make_pair(0x1f13e,"SQUARED LATIN CAPITAL LETTER O"));
        data.insert(std::make_pair(0x1f13f,"SQUARED LATIN CAPITAL LETTER P"));
        data.insert(std::make_pair(0x1f140,"SQUARED LATIN CAPITAL LETTER Q"));
        data.insert(std::make_pair(0x1f141,"SQUARED LATIN CAPITAL LETTER R"));
        data.insert(std::make_pair(0x1f142,"SQUARED LATIN CAPITAL LETTER S"));
        data.insert(std::make_pair(0x1f143,"SQUARED LATIN CAPITAL LETTER T"));
        data.insert(std::make_pair(0x1f144,"SQUARED LATIN CAPITAL LETTER U"));
        data.insert(std::make_pair(0x1f145,"SQUARED LATIN CAPITAL LETTER V"));
        data.insert(std::make_pair(0x1f146,"SQUARED LATIN CAPITAL LETTER W"));
        data.insert(std::make_pair(0x1f147,"SQUARED LATIN CAPITAL LETTER X"));
        data.insert(std::make_pair(0x1f148,"SQUARED LATIN CAPITAL LETTER Y"));
        data.insert(std::make_pair(0x1f149,"SQUARED LATIN CAPITAL LETTER Z"));
        data.insert(std::make_pair(0x1f14a,"SQUARED HV"));
        data.insert(std::make_pair(0x1f14b,"SQUARED MV"));
        data.insert(std::make_pair(0x1f14c,"SQUARED SD"));
        data.insert(std::make_pair(0x1f14d,"SQUARED SS"));
        data.insert(std::make_pair(0x1f14e,"SQUARED PPV"));
        data.insert(std::make_pair(0x1f14f,"SQUARED WC"));
        data.insert(std::make_pair(0x1f150,"NEGATIVE CIRCLED LATIN CAPITAL LETTER A"));
        data.insert(std::make_pair(0x1f151,"NEGATIVE CIRCLED LATIN CAPITAL LETTER B"));
        data.insert(std::make_pair(0x1f152,"NEGATIVE CIRCLED LATIN CAPITAL LETTER C"));
        data.insert(std::make_pair(0x1f153,"NEGATIVE CIRCLED LATIN CAPITAL LETTER D"));
        data.insert(std::make_pair(0x1f154,"NEGATIVE CIRCLED LATIN CAPITAL LETTER E"));
        data.insert(std::make_pair(0x1f155,"NEGATIVE CIRCLED LATIN CAPITAL LETTER F"));
        data.insert(std::make_pair(0x1f156,"NEGATIVE CIRCLED LATIN CAPITAL LETTER G"));
        data.insert(std::make_pair(0x1f157,"NEGATIVE CIRCLED LATIN CAPITAL LETTER H"));
        data.insert(std::make_pair(0x1f158,"NEGATIVE CIRCLED LATIN CAPITAL LETTER I"));
        data.insert(std::make_pair(0x1f159,"NEGATIVE CIRCLED LATIN CAPITAL LETTER J"));
        data.insert(std::make_pair(0x1f15a,"NEGATIVE CIRCLED LATIN CAPITAL LETTER K"));
        data.insert(std::make_pair(0x1f15b,"NEGATIVE CIRCLED LATIN CAPITAL LETTER L"));
        data.insert(std::make_pair(0x1f15c,"NEGATIVE CIRCLED LATIN CAPITAL LETTER M"));
        data.insert(std::make_pair(0x1f15d,"NEGATIVE CIRCLED LATIN CAPITAL LETTER N"));
        data.insert(std::make_pair(0x1f15e,"NEGATIVE CIRCLED LATIN CAPITAL LETTER O"));
        data.insert(std::make_pair(0x1f15f,"NEGATIVE CIRCLED LATIN CAPITAL LETTER P"));
        data.insert(std::make_pair(0x1f160,"NEGATIVE CIRCLED LATIN CAPITAL LETTER Q"));
        data.insert(std::make_pair(0x1f161,"NEGATIVE CIRCLED LATIN CAPITAL LETTER R"));
        data.insert(std::make_pair(0x1f162,"NEGATIVE CIRCLED LATIN CAPITAL LETTER S"));
        data.insert(std::make_pair(0x1f163,"NEGATIVE CIRCLED LATIN CAPITAL LETTER T"));
        data.insert(std::make_pair(0x1f164,"NEGATIVE CIRCLED LATIN CAPITAL LETTER U"));
        data.insert(std::make_pair(0x1f165,"NEGATIVE CIRCLED LATIN CAPITAL LETTER V"));
        data.insert(std::make_pair(0x1f166,"NEGATIVE CIRCLED LATIN CAPITAL LETTER W"));
        data.insert(std::make_pair(0x1f167,"NEGATIVE CIRCLED LATIN CAPITAL LETTER X"));
        data.insert(std::make_pair(0x1f168,"NEGATIVE CIRCLED LATIN CAPITAL LETTER Y"));
        data.insert(std::make_pair(0x1f169,"NEGATIVE CIRCLED LATIN CAPITAL LETTER Z"));
        data.insert(std::make_pair(0x1f16a,"RAISED MC SIGN"));
        data.insert(std::make_pair(0x1f16b,"RAISED MD SIGN"));
        data.insert(std::make_pair(0x1f16c,"RAISED MR SIGN"));
        data.insert(std::make_pair(0x1f16d,"CIRCLED CC"));
        data.insert(std::make_pair(0x1f16e,"CIRCLED C WITH OVERLAID BACKSLASH"));
        data.insert(std::make_pair(0x1f16f,"CIRCLED HUMAN FIGURE"));
        data.insert(std::make_pair(0x1f170,"NEGATIVE SQUARED LATIN CAPITAL LETTER A"));
        data.insert(std::make_pair(0x1f171,"NEGATIVE SQUARED LATIN CAPITAL LETTER B"));
        data.insert(std::make_pair(0x1f172,"NEGATIVE SQUARED LATIN CAPITAL LETTER C"));
        data.insert(std::make_pair(0x1f173,"NEGATIVE SQUARED LATIN CAPITAL LETTER D"));
        data.insert(std::make_pair(0x1f174,"NEGATIVE SQUARED LATIN CAPITAL LETTER E"));
        data.insert(std::make_pair(0x1f175,"NEGATIVE SQUARED LATIN CAPITAL LETTER F"));
        data.insert(std::make_pair(0x1f176,"NEGATIVE SQUARED LATIN CAPITAL LETTER G"));
        data.insert(std::make_pair(0x1f177,"NEGATIVE SQUARED LATIN CAPITAL LETTER H"));
        data.insert(std::make_pair(0x1f178,"NEGATIVE SQUARED LATIN CAPITAL LETTER I"));
        data.insert(std::make_pair(0x1f179,"NEGATIVE SQUARED LATIN CAPITAL LETTER J"));
        data.insert(std::make_pair(0x1f17a,"NEGATIVE SQUARED LATIN CAPITAL LETTER K"));
        data.insert(std::make_pair(0x1f17b,"NEGATIVE SQUARED LATIN CAPITAL LETTER L"));
        data.insert(std::make_pair(0x1f17c,"NEGATIVE SQUARED LATIN CAPITAL LETTER M"));
        data.insert(std::make_pair(0x1f17d,"NEGATIVE SQUARED LATIN CAPITAL LETTER N"));
        data.insert(std::make_pair(0x1f17e,"NEGATIVE SQUARED LATIN CAPITAL LETTER O"));
        data.insert(std::make_pair(0x1f17f,"NEGATIVE SQUARED LATIN CAPITAL LETTER P"));
        data.insert(std::make_pair(0x1f180,"NEGATIVE SQUARED LATIN CAPITAL LETTER Q"));
        data.insert(std::make_pair(0x1f181,"NEGATIVE SQUARED LATIN CAPITAL LETTER R"));
        data.insert(std::make_pair(0x1f182,"NEGATIVE SQUARED LATIN CAPITAL LETTER S"));
        data.insert(std::make_pair(0x1f183,"NEGATIVE SQUARED LATIN CAPITAL LETTER T"));
        data.insert(std::make_pair(0x1f184,"NEGATIVE SQUARED LATIN CAPITAL LETTER U"));
        data.insert(std::make_pair(0x1f185,"NEGATIVE SQUARED LATIN CAPITAL LETTER V"));
        data.insert(std::make_pair(0x1f186,"NEGATIVE SQUARED LATIN CAPITAL LETTER W"));
        data.insert(std::make_pair(0x1f187,"NEGATIVE SQUARED LATIN CAPITAL LETTER X"));
        data.insert(std::make_pair(0x1f188,"NEGATIVE SQUARED LATIN CAPITAL LETTER Y"));
        data.insert(std::make_pair(0x1f189,"NEGATIVE SQUARED LATIN CAPITAL LETTER Z"));
        data.insert(std::make_pair(0x1f18a,"CROSSED NEGATIVE SQUARED LATIN CAPITAL LETTER P"));
        data.insert(std::make_pair(0x1f18b,"NEGATIVE SQUARED IC"));
        data.insert(std::make_pair(0x1f18c,"NEGATIVE SQUARED PA"));
        data.insert(std::make_pair(0x1f18d,"NEGATIVE SQUARED SA"));
        data.insert(std::make_pair(0x1f18e,"NEGATIVE SQUARED AB"));
        data.insert(std::make_pair(0x1f18f,"NEGATIVE SQUARED WC"));
        data.insert(std::make_pair(0x1f190,"SQUARE DJ"));
        data.insert(std::make_pair(0x1f191,"SQUARED CL"));
        data.insert(std::make_pair(0x1f192,"SQUARED COOL"));
        data.insert(std::make_pair(0x1f193,"SQUARED FREE"));
        data.insert(std::make_pair(0x1f194,"SQUARED ID"));
        data.insert(std::make_pair(0x1f195,"SQUARED NEW"));
        data.insert(std::make_pair(0x1f196,"SQUARED NG"));
        data.insert(std::make_pair(0x1f197,"SQUARED OK"));
        data.insert(std::make_pair(0x1f198,"SQUARED SOS"));
        data.insert(std::make_pair(0x1f199,"SQUARED UP WITH EXCLAMATION MARK"));
        data.insert(std::make_pair(0x1f19a,"SQUARED VS"));
        data.insert(std::make_pair(0x1f19b,"SQUARED THREE D"));
        data.insert(std::make_pair(0x1f19c,"SQUARED SECOND SCREEN"));
        data.insert(std::make_pair(0x1f19d,"SQUARED TWO K"));
        data.insert(std::make_pair(0x1f19e,"SQUARED FOUR K"));
        data.insert(std::make_pair(0x1f19f,"SQUARED EIGHT K"));
        data.insert(std::make_pair(0x1f1a0,"SQUARED FIVE POINT ONE"));
        data.insert(std::make_pair(0x1f1a1,"SQUARED SEVEN POINT ONE"));
        data.insert(std::make_pair(0x1f1a2,"SQUARED TWENTY-TWO POINT TWO"));
        data.insert(std::make_pair(0x1f1a3,"SQUARED SIXTY P"));
        data.insert(std::make_pair(0x1f1a4,"SQUARED ONE HUNDRED TWENTY P"));
        data.insert(std::make_pair(0x1f1a5,"SQUARED LATIN SMALL LETTER D"));
        data.insert(std::make_pair(0x1f1a6,"SQUARED HC"));
        data.insert(std::make_pair(0x1f1a7,"SQUARED HDR"));
        data.insert(std::make_pair(0x1f1a8,"SQUARED HI-RES"));
        data.insert(std::make_pair(0x1f1a9,"SQUARED LOSSLESS"));
        data.insert(std::make_pair(0x1f1aa,"SQUARED SHV"));
        data.insert(std::make_pair(0x1f1ab,"SQUARED UHD"));
        data.insert(std::make_pair(0x1f1ac,"SQUARED VOD"));
        data.insert(std::make_pair(0x1f1ad,"MASK WORK SYMBOL"));
        data.insert(std::make_pair(0x1f1e6,"REGIONAL INDICATOR SYMBOL LETTER A"));
        data.insert(std::make_pair(0x1f1e7,"REGIONAL INDICATOR SYMBOL LETTER B"));
        data.insert(std::make_pair(0x1f1e8,"REGIONAL INDICATOR SYMBOL LETTER C"));
        data.insert(std::make_pair(0x1f1e9,"REGIONAL INDICATOR SYMBOL LETTER D"));
        data.insert(std::make_pair(0x1f1ea,"REGIONAL INDICATOR SYMBOL LETTER E"));
        data.insert(std::make_pair(0x1f1eb,"REGIONAL INDICATOR SYMBOL LETTER F"));
        data.insert(std::make_pair(0x1f1ec,"REGIONAL INDICATOR SYMBOL LETTER G"));
        data.insert(std::make_pair(0x1f1ed,"REGIONAL INDICATOR SYMBOL LETTER H"));
        data.insert(std::make_pair(0x1f1ee,"REGIONAL INDICATOR SYMBOL LETTER I"));
        data.insert(std::make_pair(0x1f1ef,"REGIONAL INDICATOR SYMBOL LETTER J"));
        data.insert(std::make_pair(0x1f1f0,"REGIONAL INDICATOR SYMBOL LETTER K"));
        data.insert(std::make_pair(0x1f1f1,"REGIONAL INDICATOR SYMBOL LETTER L"));
        data.insert(std::make_pair(0x1f1f2,"REGIONAL INDICATOR SYMBOL LETTER M"));
        data.insert(std::make_pair(0x1f1f3,"REGIONAL INDICATOR SYMBOL LETTER N"));
        data.insert(std::make_pair(0x1f1f4,"REGIONAL INDICATOR SYMBOL LETTER O"));
        data.insert(std::make_pair(0x1f1f5,"REGIONAL INDICATOR SYMBOL LETTER P"));
        data.insert(std::make_pair(0x1f1f6,"REGIONAL INDICATOR SYMBOL LETTER Q"));
        data.insert(std::make_pair(0x1f1f7,"REGIONAL INDICATOR SYMBOL LETTER R"));
        data.insert(std::make_pair(0x1f1f8,"REGIONAL INDICATOR SYMBOL LETTER S"));
        data.insert(std::make_pair(0x1f1f9,"REGIONAL INDICATOR SYMBOL LETTER T"));
        data.insert(std::make_pair(0x1f1fa,"REGIONAL INDICATOR SYMBOL LETTER U"));
        data.insert(std::make_pair(0x1f1fb,"REGIONAL INDICATOR SYMBOL LETTER V"));
        data.insert(std::make_pair(0x1f1fc,"REGIONAL INDICATOR SYMBOL LETTER W"));
        data.insert(std::make_pair(0x1f1fd,"REGIONAL INDICATOR SYMBOL LETTER X"));
        data.insert(std::make_pair(0x1f1fe,"REGIONAL INDICATOR SYMBOL LETTER Y"));
        data.insert(std::make_pair(0x1f1ff,"REGIONAL INDICATOR SYMBOL LETTER Z"));
        data.insert(std::make_pair(0x1f200,"SQUARE HIRAGANA HOKA"));
        data.insert(std::make_pair(0x1f201,"SQUARED KATAKANA KOKO"));
        data.insert(std::make_pair(0x1f202,"SQUARED KATAKANA SA"));
        data.insert(std::make_pair(0x1f210,"SQUARED CJK UNIFIED IDEOGRAPH-624B"));
        data.insert(std::make_pair(0x1f211,"SQUARED CJK UNIFIED IDEOGRAPH-5B57"));
        data.insert(std::make_pair(0x1f212,"SQUARED CJK UNIFIED IDEOGRAPH-53CC"));
        data.insert(std::make_pair(0x1f213,"SQUARED KATAKANA DE"));
        data.insert(std::make_pair(0x1f214,"SQUARED CJK UNIFIED IDEOGRAPH-4E8C"));
        data.insert(std::make_pair(0x1f215,"SQUARED CJK UNIFIED IDEOGRAPH-591A"));
        data.insert(std::make_pair(0x1f216,"SQUARED CJK UNIFIED IDEOGRAPH-89E3"));
        data.insert(std::make_pair(0x1f217,"SQUARED CJK UNIFIED IDEOGRAPH-5929"));
        data.insert(std::make_pair(0x1f218,"SQUARED CJK UNIFIED IDEOGRAPH-4EA4"));
        data.insert(std::make_pair(0x1f219,"SQUARED CJK UNIFIED IDEOGRAPH-6620"));
        data.insert(std::make_pair(0x1f21a,"SQUARED CJK UNIFIED IDEOGRAPH-7121"));
        data.insert(std::make_pair(0x1f21b,"SQUARED CJK UNIFIED IDEOGRAPH-6599"));
        data.insert(std::make_pair(0x1f21c,"SQUARED CJK UNIFIED IDEOGRAPH-524D"));
        data.insert(std::make_pair(0x1f21d,"SQUARED CJK UNIFIED IDEOGRAPH-5F8C"));
        data.insert(std::make_pair(0x1f21e,"SQUARED CJK UNIFIED IDEOGRAPH-518D"));
        data.insert(std::make_pair(0x1f21f,"SQUARED CJK UNIFIED IDEOGRAPH-65B0"));
        data.insert(std::make_pair(0x1f220,"SQUARED CJK UNIFIED IDEOGRAPH-521D"));
        data.insert(std::make_pair(0x1f221,"SQUARED CJK UNIFIED IDEOGRAPH-7D42"));
        data.insert(std::make_pair(0x1f222,"SQUARED CJK UNIFIED IDEOGRAPH-751F"));
        data.insert(std::make_pair(0x1f223,"SQUARED CJK UNIFIED IDEOGRAPH-8CA9"));
        data.insert(std::make_pair(0x1f224,"SQUARED CJK UNIFIED IDEOGRAPH-58F0"));
        data.insert(std::make_pair(0x1f225,"SQUARED CJK UNIFIED IDEOGRAPH-5439"));
        data.insert(std::make_pair(0x1f226,"SQUARED CJK UNIFIED IDEOGRAPH-6F14"));
        data.insert(std::make_pair(0x1f227,"SQUARED CJK UNIFIED IDEOGRAPH-6295"));
        data.insert(std::make_pair(0x1f228,"SQUARED CJK UNIFIED IDEOGRAPH-6355"));
        data.insert(std::make_pair(0x1f229,"SQUARED CJK UNIFIED IDEOGRAPH-4E00"));
        data.insert(std::make_pair(0x1f22a,"SQUARED CJK UNIFIED IDEOGRAPH-4E09"));
        data.insert(std::make_pair(0x1f22b,"SQUARED CJK UNIFIED IDEOGRAPH-904A"));
        data.insert(std::make_pair(0x1f22c,"SQUARED CJK UNIFIED IDEOGRAPH-5DE6"));
        data.insert(std::make_pair(0x1f22d,"SQUARED CJK UNIFIED IDEOGRAPH-4E2D"));
        data.insert(std::make_pair(0x1f22e,"SQUARED CJK UNIFIED IDEOGRAPH-53F3"));
        data.insert(std::make_pair(0x1f22f,"SQUARED CJK UNIFIED IDEOGRAPH-6307"));
        data.insert(std::make_pair(0x1f230,"SQUARED CJK UNIFIED IDEOGRAPH-8D70"));
        data.insert(std::make_pair(0x1f231,"SQUARED CJK UNIFIED IDEOGRAPH-6253"));
        data.insert(std::make_pair(0x1f232,"SQUARED CJK UNIFIED IDEOGRAPH-7981"));
        data.insert(std::make_pair(0x1f233,"SQUARED CJK UNIFIED IDEOGRAPH-7A7A"));
        data.insert(std::make_pair(0x1f234,"SQUARED CJK UNIFIED IDEOGRAPH-5408"));
        data.insert(std::make_pair(0x1f235,"SQUARED CJK UNIFIED IDEOGRAPH-6E80"));
        data.insert(std::make_pair(0x1f236,"SQUARED CJK UNIFIED IDEOGRAPH-6709"));
        data.insert(std::make_pair(0x1f237,"SQUARED CJK UNIFIED IDEOGRAPH-6708"));
        data.insert(std::make_pair(0x1f238,"SQUARED CJK UNIFIED IDEOGRAPH-7533"));
        data.insert(std::make_pair(0x1f239,"SQUARED CJK UNIFIED IDEOGRAPH-5272"));
        data.insert(std::make_pair(0x1f23a,"SQUARED CJK UNIFIED IDEOGRAPH-55B6"));
        data.insert(std::make_pair(0x1f23b,"SQUARED CJK UNIFIED IDEOGRAPH-914D"));
        data.insert(std::make_pair(0x1f240,"TORTOISE SHELL BRACKETED CJK UNIFIED IDEOGRAPH-672C"));
        data.insert(std::make_pair(0x1f241,"TORTOISE SHELL BRACKETED CJK UNIFIED IDEOGRAPH-4E09"));
        data.insert(std::make_pair(0x1f242,"TORTOISE SHELL BRACKETED CJK UNIFIED IDEOGRAPH-4E8C"));
        data.insert(std::make_pair(0x1f243,"TORTOISE SHELL BRACKETED CJK UNIFIED IDEOGRAPH-5B89"));
        data.insert(std::make_pair(0x1f244,"TORTOISE SHELL BRACKETED CJK UNIFIED IDEOGRAPH-70B9"));
        data.insert(std::make_pair(0x1f245,"TORTOISE SHELL BRACKETED CJK UNIFIED IDEOGRAPH-6253"));
        data.insert(std::make_pair(0x1f246,"TORTOISE SHELL BRACKETED CJK UNIFIED IDEOGRAPH-76D7"));
        data.insert(std::make_pair(0x1f247,"TORTOISE SHELL BRACKETED CJK UNIFIED IDEOGRAPH-52DD"));
        data.insert(std::make_pair(0x1f248,"TORTOISE SHELL BRACKETED CJK UNIFIED IDEOGRAPH-6557"));
        data.insert(std::make_pair(0x1f250,"CIRCLED IDEOGRAPH ADVANTAGE"));
        data.insert(std::make_pair(0x1f251,"CIRCLED IDEOGRAPH ACCEPT"));
        data.insert(std::make_pair(0x1f260,"ROUNDED SYMBOL FOR FU"));
        data.insert(std::make_pair(0x1f261,"ROUNDED SYMBOL FOR LU"));
        data.insert(std::make_pair(0x1f262,"ROUNDED SYMBOL FOR SHOU"));
        data.insert(std::make_pair(0x1f263,"ROUNDED SYMBOL FOR XI"));
        data.insert(std::make_pair(0x1f264,"ROUNDED SYMBOL FOR SHUANGXI"));
        data.insert(std::make_pair(0x1f265,"ROUNDED SYMBOL FOR CAI"));
        data.insert(std::make_pair(0x1f300,"CYCLONE"));
        data.insert(std::make_pair(0x1f301,"FOGGY"));
        data.insert(std::make_pair(0x1f302,"CLOSED UMBRELLA"));
        data.insert(std::make_pair(0x1f303,"NIGHT WITH STARS"));
        data.insert(std::make_pair(0x1f304,"SUNRISE OVER MOUNTAINS"));
        data.insert(std::make_pair(0x1f305,"SUNRISE"));
        data.insert(std::make_pair(0x1f306,"CITYSCAPE AT DUSK"));
        data.insert(std::make_pair(0x1f307,"SUNSET OVER BUILDINGS"));
        data.insert(std::make_pair(0x1f308,"RAINBOW"));
        data.insert(std::make_pair(0x1f309,"BRIDGE AT NIGHT"));
        data.insert(std::make_pair(0x1f30a,"WATER WAVE"));
        data.insert(std::make_pair(0x1f30b,"VOLCANO"));
        data.insert(std::make_pair(0x1f30c,"MILKY WAY"));
        data.insert(std::make_pair(0x1f30d,"EARTH GLOBE EUROPE-AFRICA"));
        data.insert(std::make_pair(0x1f30e,"EARTH GLOBE AMERICAS"));
        data.insert(std::make_pair(0x1f30f,"EARTH GLOBE ASIA-AUSTRALIA"));
        data.insert(std::make_pair(0x1f310,"GLOBE WITH MERIDIANS"));
        data.insert(std::make_pair(0x1f311,"NEW MOON SYMBOL"));
        data.insert(std::make_pair(0x1f312,"WAXING CRESCENT MOON SYMBOL"));
        data.insert(std::make_pair(0x1f313,"FIRST QUARTER MOON SYMBOL"));
        data.insert(std::make_pair(0x1f314,"WAXING GIBBOUS MOON SYMBOL"));
        data.insert(std::make_pair(0x1f315,"FULL MOON SYMBOL"));
        data.insert(std::make_pair(0x1f316,"WANING GIBBOUS MOON SYMBOL"));
        data.insert(std::make_pair(0x1f317,"LAST QUARTER MOON SYMBOL"));
        data.insert(std::make_pair(0x1f318,"WANING CRESCENT MOON SYMBOL"));
        data.insert(std::make_pair(0x1f319,"CRESCENT MOON"));
        data.insert(std::make_pair(0x1f31a,"NEW MOON WITH FACE"));
        data.insert(std::make_pair(0x1f31b,"FIRST QUARTER MOON WITH FACE"));
        data.insert(std::make_pair(0x1f31c,"LAST QUARTER MOON WITH FACE"));
        data.insert(std::make_pair(0x1f31d,"FULL MOON WITH FACE"));
        data.insert(std::make_pair(0x1f31e,"SUN WITH FACE"));
        data.insert(std::make_pair(0x1f31f,"GLOWING STAR"));
        data.insert(std::make_pair(0x1f320,"SHOOTING STAR"));
        data.insert(std::make_pair(0x1f321,"THERMOMETER"));
        data.insert(std::make_pair(0x1f322,"BLACK DROPLET"));
        data.insert(std::make_pair(0x1f323,"WHITE SUN"));
        data.insert(std::make_pair(0x1f324,"WHITE SUN WITH SMALL CLOUD"));
        data.insert(std::make_pair(0x1f325,"WHITE SUN BEHIND CLOUD"));
        data.insert(std::make_pair(0x1f326,"WHITE SUN BEHIND CLOUD WITH RAIN"));
        data.insert(std::make_pair(0x1f327,"CLOUD WITH RAIN"));
        data.insert(std::make_pair(0x1f328,"CLOUD WITH SNOW"));
        data.insert(std::make_pair(0x1f329,"CLOUD WITH LIGHTNING"));
        data.insert(std::make_pair(0x1f32a,"CLOUD WITH TORNADO"));
        data.insert(std::make_pair(0x1f32b,"FOG"));
        data.insert(std::make_pair(0x1f32c,"WIND BLOWING FACE"));
        data.insert(std::make_pair(0x1f32d,"HOT DOG"));
        data.insert(std::make_pair(0x1f32e,"TACO"));
        data.insert(std::make_pair(0x1f32f,"BURRITO"));
        data.insert(std::make_pair(0x1f330,"CHESTNUT"));
        data.insert(std::make_pair(0x1f331,"SEEDLING"));
        data.insert(std::make_pair(0x1f332,"EVERGREEN TREE"));
        data.insert(std::make_pair(0x1f333,"DECIDUOUS TREE"));
        data.insert(std::make_pair(0x1f334,"PALM TREE"));
        data.insert(std::make_pair(0x1f335,"CACTUS"));
        data.insert(std::make_pair(0x1f336,"HOT PEPPER"));
        data.insert(std::make_pair(0x1f337,"TULIP"));
        data.insert(std::make_pair(0x1f338,"CHERRY BLOSSOM"));
        data.insert(std::make_pair(0x1f339,"ROSE"));
        data.insert(std::make_pair(0x1f33a,"HIBISCUS"));
        data.insert(std::make_pair(0x1f33b,"SUNFLOWER"));
        data.insert(std::make_pair(0x1f33c,"BLOSSOM"));
        data.insert(std::make_pair(0x1f33d,"EAR OF MAIZE"));
        data.insert(std::make_pair(0x1f33e,"EAR OF RICE"));
        data.insert(std::make_pair(0x1f33f,"HERB"));
        data.insert(std::make_pair(0x1f340,"FOUR LEAF CLOVER"));
        data.insert(std::make_pair(0x1f341,"MAPLE LEAF"));
        data.insert(std::make_pair(0x1f342,"FALLEN LEAF"));
        data.insert(std::make_pair(0x1f343,"LEAF FLUTTERING IN WIND"));
        data.insert(std::make_pair(0x1f344,"MUSHROOM"));
        data.insert(std::make_pair(0x1f345,"TOMATO"));
        data.insert(std::make_pair(0x1f346,"AUBERGINE"));
        data.insert(std::make_pair(0x1f347,"GRAPES"));
        data.insert(std::make_pair(0x1f348,"MELON"));
        data.insert(std::make_pair(0x1f349,"WATERMELON"));
        data.insert(std::make_pair(0x1f34a,"TANGERINE"));
        data.insert(std::make_pair(0x1f34b,"LEMON"));
        data.insert(std::make_pair(0x1f34c,"BANANA"));
        data.insert(std::make_pair(0x1f34d,"PINEAPPLE"));
        data.insert(std::make_pair(0x1f34e,"RED APPLE"));
        data.insert(std::make_pair(0x1f34f,"GREEN APPLE"));
        data.insert(std::make_pair(0x1f350,"PEAR"));
        data.insert(std::make_pair(0x1f351,"PEACH"));
        data.insert(std::make_pair(0x1f352,"CHERRIES"));
        data.insert(std::make_pair(0x1f353,"STRAWBERRY"));
        data.insert(std::make_pair(0x1f354,"HAMBURGER"));
        data.insert(std::make_pair(0x1f355,"SLICE OF PIZZA"));
        data.insert(std::make_pair(0x1f356,"MEAT ON BONE"));
        data.insert(std::make_pair(0x1f357,"POULTRY LEG"));
        data.insert(std::make_pair(0x1f358,"RICE CRACKER"));
        data.insert(std::make_pair(0x1f359,"RICE BALL"));
        data.insert(std::make_pair(0x1f35a,"COOKED RICE"));
        data.insert(std::make_pair(0x1f35b,"CURRY AND RICE"));
        data.insert(std::make_pair(0x1f35c,"STEAMING BOWL"));
        data.insert(std::make_pair(0x1f35d,"SPAGHETTI"));
        data.insert(std::make_pair(0x1f35e,"BREAD"));
        data.insert(std::make_pair(0x1f35f,"FRENCH FRIES"));
        data.insert(std::make_pair(0x1f360,"ROASTED SWEET POTATO"));
        data.insert(std::make_pair(0x1f361,"DANGO"));
        data.insert(std::make_pair(0x1f362,"ODEN"));
        data.insert(std::make_pair(0x1f363,"SUSHI"));
        data.insert(std::make_pair(0x1f364,"FRIED SHRIMP"));
        data.insert(std::make_pair(0x1f365,"FISH CAKE WITH SWIRL DESIGN"));
        data.insert(std::make_pair(0x1f366,"SOFT ICE CREAM"));
        data.insert(std::make_pair(0x1f367,"SHAVED ICE"));
        data.insert(std::make_pair(0x1f368,"ICE CREAM"));
        data.insert(std::make_pair(0x1f369,"DOUGHNUT"));
        data.insert(std::make_pair(0x1f36a,"COOKIE"));
        data.insert(std::make_pair(0x1f36b,"CHOCOLATE BAR"));
        data.insert(std::make_pair(0x1f36c,"CANDY"));
        data.insert(std::make_pair(0x1f36d,"LOLLIPOP"));
        data.insert(std::make_pair(0x1f36e,"CUSTARD"));
        data.insert(std::make_pair(0x1f36f,"HONEY POT"));
        data.insert(std::make_pair(0x1f370,"SHORTCAKE"));
        data.insert(std::make_pair(0x1f371,"BENTO BOX"));
        data.insert(std::make_pair(0x1f372,"POT OF FOOD"));
        data.insert(std::make_pair(0x1f373,"COOKING"));
        data.insert(std::make_pair(0x1f374,"FORK AND KNIFE"));
        data.insert(std::make_pair(0x1f375,"TEACUP WITHOUT HANDLE"));
        data.insert(std::make_pair(0x1f376,"SAKE BOTTLE AND CUP"));
        data.insert(std::make_pair(0x1f377,"WINE GLASS"));
        data.insert(std::make_pair(0x1f378,"COCKTAIL GLASS"));
        data.insert(std::make_pair(0x1f379,"TROPICAL DRINK"));
        data.insert(std::make_pair(0x1f37a,"BEER MUG"));
        data.insert(std::make_pair(0x1f37b,"CLINKING BEER MUGS"));
        data.insert(std::make_pair(0x1f37c,"BABY BOTTLE"));
        data.insert(std::make_pair(0x1f37d,"FORK AND KNIFE WITH PLATE"));
        data.insert(std::make_pair(0x1f37e,"BOTTLE WITH POPPING CORK"));
        data.insert(std::make_pair(0x1f37f,"POPCORN"));
        data.insert(std::make_pair(0x1f380,"RIBBON"));
        data.insert(std::make_pair(0x1f381,"WRAPPED PRESENT"));
        data.insert(std::make_pair(0x1f382,"BIRTHDAY CAKE"));
        data.insert(std::make_pair(0x1f383,"JACK-O-LANTERN"));
        data.insert(std::make_pair(0x1f384,"CHRISTMAS TREE"));
        data.insert(std::make_pair(0x1f385,"FATHER CHRISTMAS"));
        data.insert(std::make_pair(0x1f386,"FIREWORKS"));
        data.insert(std::make_pair(0x1f387,"FIREWORK SPARKLER"));
        data.insert(std::make_pair(0x1f388,"BALLOON"));
        data.insert(std::make_pair(0x1f389,"PARTY POPPER"));
        data.insert(std::make_pair(0x1f38a,"CONFETTI BALL"));
        data.insert(std::make_pair(0x1f38b,"TANABATA TREE"));
        data.insert(std::make_pair(0x1f38c,"CROSSED FLAGS"));
        data.insert(std::make_pair(0x1f38d,"PINE DECORATION"));
        data.insert(std::make_pair(0x1f38e,"JAPANESE DOLLS"));
        data.insert(std::make_pair(0x1f38f,"CARP STREAMER"));
        data.insert(std::make_pair(0x1f390,"WIND CHIME"));
        data.insert(std::make_pair(0x1f391,"MOON VIEWING CEREMONY"));
        data.insert(std::make_pair(0x1f392,"SCHOOL SATCHEL"));
        data.insert(std::make_pair(0x1f393,"GRADUATION CAP"));
        data.insert(std::make_pair(0x1f394,"HEART WITH TIP ON THE LEFT"));
        data.insert(std::make_pair(0x1f395,"BOUQUET OF FLOWERS"));
        data.insert(std::make_pair(0x1f396,"MILITARY MEDAL"));
        data.insert(std::make_pair(0x1f397,"REMINDER RIBBON"));
        data.insert(std::make_pair(0x1f398,"MUSICAL KEYBOARD WITH JACKS"));
        data.insert(std::make_pair(0x1f399,"STUDIO MICROPHONE"));
        data.insert(std::make_pair(0x1f39a,"LEVEL SLIDER"));
        data.insert(std::make_pair(0x1f39b,"CONTROL KNOBS"));
        data.insert(std::make_pair(0x1f39c,"BEAMED ASCENDING MUSICAL NOTES"));
        data.insert(std::make_pair(0x1f39d,"BEAMED DESCENDING MUSICAL NOTES"));
        data.insert(std::make_pair(0x1f39e,"FILM FRAMES"));
        data.insert(std::make_pair(0x1f39f,"ADMISSION TICKETS"));
        data.insert(std::make_pair(0x1f3a0,"CAROUSEL HORSE"));
        data.insert(std::make_pair(0x1f3a1,"FERRIS WHEEL"));
        data.insert(std::make_pair(0x1f3a2,"ROLLER COASTER"));
        data.insert(std::make_pair(0x1f3a3,"FISHING POLE AND FISH"));
        data.insert(std::make_pair(0x1f3a4,"MICROPHONE"));
        data.insert(std::make_pair(0x1f3a5,"MOVIE CAMERA"));
        data.insert(std::make_pair(0x1f3a6,"CINEMA"));
        data.insert(std::make_pair(0x1f3a7,"HEADPHONE"));
        data.insert(std::make_pair(0x1f3a8,"ARTIST PALETTE"));
        data.insert(std::make_pair(0x1f3a9,"TOP HAT"));
        data.insert(std::make_pair(0x1f3aa,"CIRCUS TENT"));
        data.insert(std::make_pair(0x1f3ab,"TICKET"));
        data.insert(std::make_pair(0x1f3ac,"CLAPPER BOARD"));
        data.insert(std::make_pair(0x1f3ad,"PERFORMING ARTS"));
        data.insert(std::make_pair(0x1f3ae,"VIDEO GAME"));
        data.insert(std::make_pair(0x1f3af,"DIRECT HIT"));
        data.insert(std::make_pair(0x1f3b0,"SLOT MACHINE"));
        data.insert(std::make_pair(0x1f3b1,"BILLIARDS"));
        data.insert(std::make_pair(0x1f3b2,"GAME DIE"));
        data.insert(std::make_pair(0x1f3b3,"BOWLING"));
        data.insert(std::make_pair(0x1f3b4,"FLOWER PLAYING CARDS"));
        data.insert(std::make_pair(0x1f3b5,"MUSICAL NOTE"));
        data.insert(std::make_pair(0x1f3b6,"MULTIPLE MUSICAL NOTES"));
        data.insert(std::make_pair(0x1f3b7,"SAXOPHONE"));
        data.insert(std::make_pair(0x1f3b8,"GUITAR"));
        data.insert(std::make_pair(0x1f3b9,"MUSICAL KEYBOARD"));
        data.insert(std::make_pair(0x1f3ba,"TRUMPET"));
        data.insert(std::make_pair(0x1f3bb,"VIOLIN"));
        data.insert(std::make_pair(0x1f3bc,"MUSICAL SCORE"));
        data.insert(std::make_pair(0x1f3bd,"RUNNING SHIRT WITH SASH"));
        data.insert(std::make_pair(0x1f3be,"TENNIS RACQUET AND BALL"));
        data.insert(std::make_pair(0x1f3bf,"SKI AND SKI BOOT"));
        data.insert(std::make_pair(0x1f3c0,"BASKETBALL AND HOOP"));
        data.insert(std::make_pair(0x1f3c1,"CHEQUERED FLAG"));
        data.insert(std::make_pair(0x1f3c2,"SNOWBOARDER"));
        data.insert(std::make_pair(0x1f3c3,"RUNNER"));
        data.insert(std::make_pair(0x1f3c4,"SURFER"));
        data.insert(std::make_pair(0x1f3c5,"SPORTS MEDAL"));
        data.insert(std::make_pair(0x1f3c6,"TROPHY"));
        data.insert(std::make_pair(0x1f3c7,"HORSE RACING"));
        data.insert(std::make_pair(0x1f3c8,"AMERICAN FOOTBALL"));
        data.insert(std::make_pair(0x1f3c9,"RUGBY FOOTBALL"));
        data.insert(std::make_pair(0x1f3ca,"SWIMMER"));
        data.insert(std::make_pair(0x1f3cb,"WEIGHT LIFTER"));
        data.insert(std::make_pair(0x1f3cc,"GOLFER"));
        data.insert(std::make_pair(0x1f3cd,"RACING MOTORCYCLE"));
        data.insert(std::make_pair(0x1f3ce,"RACING CAR"));
        data.insert(std::make_pair(0x1f3cf,"CRICKET BAT AND BALL"));
        data.insert(std::make_pair(0x1f3d0,"VOLLEYBALL"));
        data.insert(std::make_pair(0x1f3d1,"FIELD HOCKEY STICK AND BALL"));
        data.insert(std::make_pair(0x1f3d2,"ICE HOCKEY STICK AND PUCK"));
        data.insert(std::make_pair(0x1f3d3,"TABLE TENNIS PADDLE AND BALL"));
        data.insert(std::make_pair(0x1f3d4,"SNOW CAPPED MOUNTAIN"));
        data.insert(std::make_pair(0x1f3d5,"CAMPING"));
        data.insert(std::make_pair(0x1f3d6,"BEACH WITH UMBRELLA"));
        data.insert(std::make_pair(0x1f3d7,"BUILDING CONSTRUCTION"));
        data.insert(std::make_pair(0x1f3d8,"HOUSE BUILDINGS"));
        data.insert(std::make_pair(0x1f3d9,"CITYSCAPE"));
        data.insert(std::make_pair(0x1f3da,"DERELICT HOUSE BUILDING"));
        data.insert(std::make_pair(0x1f3db,"CLASSICAL BUILDING"));
        data.insert(std::make_pair(0x1f3dc,"DESERT"));
        data.insert(std::make_pair(0x1f3dd,"DESERT ISLAND"));
        data.insert(std::make_pair(0x1f3de,"NATIONAL PARK"));
        data.insert(std::make_pair(0x1f3df,"STADIUM"));
        data.insert(std::make_pair(0x1f3e0,"HOUSE BUILDING"));
        data.insert(std::make_pair(0x1f3e1,"HOUSE WITH GARDEN"));
        data.insert(std::make_pair(0x1f3e2,"OFFICE BUILDING"));
        data.insert(std::make_pair(0x1f3e3,"JAPANESE POST OFFICE"));
        data.insert(std::make_pair(0x1f3e4,"EUROPEAN POST OFFICE"));
        data.insert(std::make_pair(0x1f3e5,"HOSPITAL"));
        data.insert(std::make_pair(0x1f3e6,"BANK"));
        data.insert(std::make_pair(0x1f3e7,"AUTOMATED TELLER MACHINE"));
        data.insert(std::make_pair(0x1f3e8,"HOTEL"));
        data.insert(std::make_pair(0x1f3e9,"LOVE HOTEL"));
        data.insert(std::make_pair(0x1f3ea,"CONVENIENCE STORE"));
        data.insert(std::make_pair(0x1f3eb,"SCHOOL"));
        data.insert(std::make_pair(0x1f3ec,"DEPARTMENT STORE"));
        data.insert(std::make_pair(0x1f3ed,"FACTORY"));
        data.insert(std::make_pair(0x1f3ee,"IZAKAYA LANTERN"));
        data.insert(std::make_pair(0x1f3ef,"JAPANESE CASTLE"));
        data.insert(std::make_pair(0x1f3f0,"EUROPEAN CASTLE"));
        data.insert(std::make_pair(0x1f3f1,"WHITE PENNANT"));
        data.insert(std::make_pair(0x1f3f2,"BLACK PENNANT"));
        data.insert(std::make_pair(0x1f3f3,"WAVING WHITE FLAG"));
        data.insert(std::make_pair(0x1f3f4,"WAVING BLACK FLAG"));
        data.insert(std::make_pair(0x1f3f5,"ROSETTE"));
        data.insert(std::make_pair(0x1f3f6,"BLACK ROSETTE"));
        data.insert(std::make_pair(0x1f3f7,"LABEL"));
        data.insert(std::make_pair(0x1f3f8,"BADMINTON RACQUET AND SHUTTLECOCK"));
        data.insert(std::make_pair(0x1f3f9,"BOW AND ARROW"));
        data.insert(std::make_pair(0x1f3fa,"AMPHORA"));
        data.insert(std::make_pair(0x1f3fb,"EMOJI MODIFIER FITZPATRICK TYPE-1-2"));
        data.insert(std::make_pair(0x1f3fc,"EMOJI MODIFIER FITZPATRICK TYPE-3"));
        data.insert(std::make_pair(0x1f3fd,"EMOJI MODIFIER FITZPATRICK TYPE-4"));
        data.insert(std::make_pair(0x1f3fe,"EMOJI MODIFIER FITZPATRICK TYPE-5"));
        data.insert(std::make_pair(0x1f3ff,"EMOJI MODIFIER FITZPATRICK TYPE-6"));
        data.insert(std::make_pair(0x1f400,"RAT"));
        data.insert(std::make_pair(0x1f401,"MOUSE"));
        data.insert(std::make_pair(0x1f402,"OX"));
        data.insert(std::make_pair(0x1f403,"WATER BUFFALO"));
        data.insert(std::make_pair(0x1f404,"COW"));
        data.insert(std::make_pair(0x1f405,"TIGER"));
        data.insert(std::make_pair(0x1f406,"LEOPARD"));
        data.insert(std::make_pair(0x1f407,"RABBIT"));
        data.insert(std::make_pair(0x1f408,"CAT"));
        data.insert(std::make_pair(0x1f409,"DRAGON"));
        data.insert(std::make_pair(0x1f40a,"CROCODILE"));
        data.insert(std::make_pair(0x1f40b,"WHALE"));
        data.insert(std::make_pair(0x1f40c,"SNAIL"));
        data.insert(std::make_pair(0x1f40d,"SNAKE"));
        data.insert(std::make_pair(0x1f40e,"HORSE"));
        data.insert(std::make_pair(0x1f40f,"RAM"));
        data.insert(std::make_pair(0x1f410,"GOAT"));
        data.insert(std::make_pair(0x1f411,"SHEEP"));
        data.insert(std::make_pair(0x1f412,"MONKEY"));
        data.insert(std::make_pair(0x1f413,"ROOSTER"));
        data.insert(std::make_pair(0x1f414,"CHICKEN"));
        data.insert(std::make_pair(0x1f415,"DOG"));
        data.insert(std::make_pair(0x1f416,"PIG"));
        data.insert(std::make_pair(0x1f417,"BOAR"));
        data.insert(std::make_pair(0x1f418,"ELEPHANT"));
        data.insert(std::make_pair(0x1f419,"OCTOPUS"));
        data.insert(std::make_pair(0x1f41a,"SPIRAL SHELL"));
        data.insert(std::make_pair(0x1f41b,"BUG"));
        data.insert(std::make_pair(0x1f41c,"ANT"));
        data.insert(std::make_pair(0x1f41d,"HONEYBEE"));
        data.insert(std::make_pair(0x1f41e,"LADY BEETLE"));
        data.insert(std::make_pair(0x1f41f,"FISH"));
        data.insert(std::make_pair(0x1f420,"TROPICAL FISH"));
        data.insert(std::make_pair(0x1f421,"BLOWFISH"));
        data.insert(std::make_pair(0x1f422,"TURTLE"));
        data.insert(std::make_pair(0x1f423,"HATCHING CHICK"));
        data.insert(std::make_pair(0x1f424,"BABY CHICK"));
        data.insert(std::make_pair(0x1f425,"FRONT-FACING BABY CHICK"));
        data.insert(std::make_pair(0x1f426,"BIRD"));
        data.insert(std::make_pair(0x1f427,"PENGUIN"));
        data.insert(std::make_pair(0x1f428,"KOALA"));
        data.insert(std::make_pair(0x1f429,"POODLE"));
        data.insert(std::make_pair(0x1f42a,"DROMEDARY CAMEL"));
        data.insert(std::make_pair(0x1f42b,"BACTRIAN CAMEL"));
        data.insert(std::make_pair(0x1f42c,"DOLPHIN"));
        data.insert(std::make_pair(0x1f42d,"MOUSE FACE"));
        data.insert(std::make_pair(0x1f42e,"COW FACE"));
        data.insert(std::make_pair(0x1f42f,"TIGER FACE"));
        data.insert(std::make_pair(0x1f430,"RABBIT FACE"));
        data.insert(std::make_pair(0x1f431,"CAT FACE"));
        data.insert(std::make_pair(0x1f432,"DRAGON FACE"));
        data.insert(std::make_pair(0x1f433,"SPOUTING WHALE"));
        data.insert(std::make_pair(0x1f434,"HORSE FACE"));
        data.insert(std::make_pair(0x1f435,"MONKEY FACE"));
        data.insert(std::make_pair(0x1f436,"DOG FACE"));
        data.insert(std::make_pair(0x1f437,"PIG FACE"));
        data.insert(std::make_pair(0x1f438,"FROG FACE"));
        data.insert(std::make_pair(0x1f439,"HAMSTER FACE"));
        data.insert(std::make_pair(0x1f43a,"WOLF FACE"));
        data.insert(std::make_pair(0x1f43b,"BEAR FACE"));
        data.insert(std::make_pair(0x1f43c,"PANDA FACE"));
        data.insert(std::make_pair(0x1f43d,"PIG NOSE"));
        data.insert(std::make_pair(0x1f43e,"PAW PRINTS"));
        data.insert(std::make_pair(0x1f43f,"CHIPMUNK"));
        data.insert(std::make_pair(0x1f440,"EYES"));
        data.insert(std::make_pair(0x1f441,"EYE"));
        data.insert(std::make_pair(0x1f442,"EAR"));
        data.insert(std::make_pair(0x1f443,"NOSE"));
        data.insert(std::make_pair(0x1f444,"MOUTH"));
        data.insert(std::make_pair(0x1f445,"TONGUE"));
        data.insert(std::make_pair(0x1f446,"WHITE UP POINTING BACKHAND INDEX"));
        data.insert(std::make_pair(0x1f447,"WHITE DOWN POINTING BACKHAND INDEX"));
        data.insert(std::make_pair(0x1f448,"WHITE LEFT POINTING BACKHAND INDEX"));
        data.insert(std::make_pair(0x1f449,"WHITE RIGHT POINTING BACKHAND INDEX"));
        data.insert(std::make_pair(0x1f44a,"FISTED HAND SIGN"));
        data.insert(std::make_pair(0x1f44b,"WAVING HAND SIGN"));
        data.insert(std::make_pair(0x1f44c,"OK HAND SIGN"));
        data.insert(std::make_pair(0x1f44d,"THUMBS UP SIGN"));
        data.insert(std::make_pair(0x1f44e,"THUMBS DOWN SIGN"));
        data.insert(std::make_pair(0x1f44f,"CLAPPING HANDS SIGN"));
        data.insert(std::make_pair(0x1f450,"OPEN HANDS SIGN"));
        data.insert(std::make_pair(0x1f451,"CROWN"));
        data.insert(std::make_pair(0x1f452,"WOMANS HAT"));
        data.insert(std::make_pair(0x1f453,"EYEGLASSES"));
        data.insert(std::make_pair(0x1f454,"NECKTIE"));
        data.insert(std::make_pair(0x1f455,"T-SHIRT"));
        data.insert(std::make_pair(0x1f456,"JEANS"));
        data.insert(std::make_pair(0x1f457,"DRESS"));
        data.insert(std::make_pair(0x1f458,"KIMONO"));
        data.insert(std::make_pair(0x1f459,"BIKINI"));
        data.insert(std::make_pair(0x1f45a,"WOMANS CLOTHES"));
        data.insert(std::make_pair(0x1f45b,"PURSE"));
        data.insert(std::make_pair(0x1f45c,"HANDBAG"));
        data.insert(std::make_pair(0x1f45d,"POUCH"));
        data.insert(std::make_pair(0x1f45e,"MANS SHOE"));
        data.insert(std::make_pair(0x1f45f,"ATHLETIC SHOE"));
        data.insert(std::make_pair(0x1f460,"HIGH-HEELED SHOE"));
        data.insert(std::make_pair(0x1f461,"WOMANS SANDAL"));
        data.insert(std::make_pair(0x1f462,"WOMANS BOOTS"));
        data.insert(std::make_pair(0x1f463,"FOOTPRINTS"));
        data.insert(std::make_pair(0x1f464,"BUST IN SILHOUETTE"));
        data.insert(std::make_pair(0x1f465,"BUSTS IN SILHOUETTE"));
        data.insert(std::make_pair(0x1f466,"BOY"));
        data.insert(std::make_pair(0x1f467,"GIRL"));
        data.insert(std::make_pair(0x1f468,"MAN"));
        data.insert(std::make_pair(0x1f469,"WOMAN"));
        data.insert(std::make_pair(0x1f46a,"FAMILY"));
        data.insert(std::make_pair(0x1f46b,"MAN AND WOMAN HOLDING HANDS"));
        data.insert(std::make_pair(0x1f46c,"TWO MEN HOLDING HANDS"));
        data.insert(std::make_pair(0x1f46d,"TWO WOMEN HOLDING HANDS"));
        data.insert(std::make_pair(0x1f46e,"POLICE OFFICER"));
        data.insert(std::make_pair(0x1f46f,"WOMAN WITH BUNNY EARS"));
        data.insert(std::make_pair(0x1f470,"BRIDE WITH VEIL"));
        data.insert(std::make_pair(0x1f471,"PERSON WITH BLOND HAIR"));
        data.insert(std::make_pair(0x1f472,"MAN WITH GUA PI MAO"));
        data.insert(std::make_pair(0x1f473,"MAN WITH TURBAN"));
        data.insert(std::make_pair(0x1f474,"OLDER MAN"));
        data.insert(std::make_pair(0x1f475,"OLDER WOMAN"));
        data.insert(std::make_pair(0x1f476,"BABY"));
        data.insert(std::make_pair(0x1f477,"CONSTRUCTION WORKER"));
        data.insert(std::make_pair(0x1f478,"PRINCESS"));
        data.insert(std::make_pair(0x1f479,"JAPANESE OGRE"));
        data.insert(std::make_pair(0x1f47a,"JAPANESE GOBLIN"));
        data.insert(std::make_pair(0x1f47b,"GHOST"));
        data.insert(std::make_pair(0x1f47c,"BABY ANGEL"));
        data.insert(std::make_pair(0x1f47d,"EXTRATERRESTRIAL ALIEN"));
        data.insert(std::make_pair(0x1f47e,"ALIEN MONSTER"));
        data.insert(std::make_pair(0x1f47f,"IMP"));
        data.insert(std::make_pair(0x1f480,"SKULL"));
        data.insert(std::make_pair(0x1f481,"INFORMATION DESK PERSON"));
        data.insert(std::make_pair(0x1f482,"GUARDSMAN"));
        data.insert(std::make_pair(0x1f483,"DANCER"));
        data.insert(std::make_pair(0x1f484,"LIPSTICK"));
        data.insert(std::make_pair(0x1f485,"NAIL POLISH"));
        data.insert(std::make_pair(0x1f486,"FACE MASSAGE"));
        data.insert(std::make_pair(0x1f487,"HAIRCUT"));
        data.insert(std::make_pair(0x1f488,"BARBER POLE"));
        data.insert(std::make_pair(0x1f489,"SYRINGE"));
        data.insert(std::make_pair(0x1f48a,"PILL"));
        data.insert(std::make_pair(0x1f48b,"KISS MARK"));
        data.insert(std::make_pair(0x1f48c,"LOVE LETTER"));
        data.insert(std::make_pair(0x1f48d,"RING"));
        data.insert(std::make_pair(0x1f48e,"GEM STONE"));
        data.insert(std::make_pair(0x1f48f,"KISS"));
        data.insert(std::make_pair(0x1f490,"BOUQUET"));
        data.insert(std::make_pair(0x1f491,"COUPLE WITH HEART"));
        data.insert(std::make_pair(0x1f492,"WEDDING"));
        data.insert(std::make_pair(0x1f493,"BEATING HEART"));
        data.insert(std::make_pair(0x1f494,"BROKEN HEART"));
        data.insert(std::make_pair(0x1f495,"TWO HEARTS"));
        data.insert(std::make_pair(0x1f496,"SPARKLING HEART"));
        data.insert(std::make_pair(0x1f497,"GROWING HEART"));
        data.insert(std::make_pair(0x1f498,"HEART WITH ARROW"));
        data.insert(std::make_pair(0x1f499,"BLUE HEART"));
        data.insert(std::make_pair(0x1f49a,"GREEN HEART"));
        data.insert(std::make_pair(0x1f49b,"YELLOW HEART"));
        data.insert(std::make_pair(0x1f49c,"PURPLE HEART"));
        data.insert(std::make_pair(0x1f49d,"HEART WITH RIBBON"));
        data.insert(std::make_pair(0x1f49e,"REVOLVING HEARTS"));
        data.insert(std::make_pair(0x1f49f,"HEART DECORATION"));
        data.insert(std::make_pair(0x1f4a0,"DIAMOND SHAPE WITH A DOT INSIDE"));
        data.insert(std::make_pair(0x1f4a1,"ELECTRIC LIGHT BULB"));
        data.insert(std::make_pair(0x1f4a2,"ANGER SYMBOL"));
        data.insert(std::make_pair(0x1f4a3,"BOMB"));
        data.insert(std::make_pair(0x1f4a4,"SLEEPING SYMBOL"));
        data.insert(std::make_pair(0x1f4a5,"COLLISION SYMBOL"));
        data.insert(std::make_pair(0x1f4a6,"SPLASHING SWEAT SYMBOL"));
        data.insert(std::make_pair(0x1f4a7,"DROPLET"));
        data.insert(std::make_pair(0x1f4a8,"DASH SYMBOL"));
        data.insert(std::make_pair(0x1f4a9,"PILE OF POO"));
        data.insert(std::make_pair(0x1f4aa,"FLEXED BICEPS"));
        data.insert(std::make_pair(0x1f4ab,"DIZZY SYMBOL"));
        data.insert(std::make_pair(0x1f4ac,"SPEECH BALLOON"));
        data.insert(std::make_pair(0x1f4ad,"THOUGHT BALLOON"));
        data.insert(std::make_pair(0x1f4ae,"WHITE FLOWER"));
        data.insert(std::make_pair(0x1f4af,"HUNDRED POINTS SYMBOL"));
        data.insert(std::make_pair(0x1f4b0,"MONEY BAG"));
        data.insert(std::make_pair(0x1f4b1,"CURRENCY EXCHANGE"));
        data.insert(std::make_pair(0x1f4b2,"HEAVY DOLLAR SIGN"));
        data.insert(std::make_pair(0x1f4b3,"CREDIT CARD"));
        data.insert(std::make_pair(0x1f4b4,"BANKNOTE WITH YEN SIGN"));
        data.insert(std::make_pair(0x1f4b5,"BANKNOTE WITH DOLLAR SIGN"));
        data.insert(std::make_pair(0x1f4b6,"BANKNOTE WITH EURO SIGN"));
        data.insert(std::make_pair(0x1f4b7,"BANKNOTE WITH POUND SIGN"));
        data.insert(std::make_pair(0x1f4b8,"MONEY WITH WINGS"));
        data.insert(std::make_pair(0x1f4b9,"CHART WITH UPWARDS TREND AND YEN SIGN"));
        data.insert(std::make_pair(0x1f4ba,"SEAT"));
        data.insert(std::make_pair(0x1f4bb,"PERSONAL COMPUTER"));
        data.insert(std::make_pair(0x1f4bc,"BRIEFCASE"));
        data.insert(std::make_pair(0x1f4bd,"MINIDISC"));
        data.insert(std::make_pair(0x1f4be,"FLOPPY DISK"));
        data.insert(std::make_pair(0x1f4bf,"OPTICAL DISC"));
        data.insert(std::make_pair(0x1f4c0,"DVD"));
        data.insert(std::make_pair(0x1f4c1,"FILE FOLDER"));
        data.insert(std::make_pair(0x1f4c2,"OPEN FILE FOLDER"));
        data.insert(std::make_pair(0x1f4c3,"PAGE WITH CURL"));
        data.insert(std::make_pair(0x1f4c4,"PAGE FACING UP"));
        data.insert(std::make_pair(0x1f4c5,"CALENDAR"));
        data.insert(std::make_pair(0x1f4c6,"TEAR-OFF CALENDAR"));
        data.insert(std::make_pair(0x1f4c7,"CARD INDEX"));
        data.insert(std::make_pair(0x1f4c8,"CHART WITH UPWARDS TREND"));
        data.insert(std::make_pair(0x1f4c9,"CHART WITH DOWNWARDS TREND"));
        data.insert(std::make_pair(0x1f4ca,"BAR CHART"));
        data.insert(std::make_pair(0x1f4cb,"CLIPBOARD"));
        data.insert(std::make_pair(0x1f4cc,"PUSHPIN"));
        data.insert(std::make_pair(0x1f4cd,"ROUND PUSHPIN"));
        data.insert(std::make_pair(0x1f4ce,"PAPERCLIP"));
        data.insert(std::make_pair(0x1f4cf,"STRAIGHT RULER"));
        data.insert(std::make_pair(0x1f4d0,"TRIANGULAR RULER"));
        data.insert(std::make_pair(0x1f4d1,"BOOKMARK TABS"));
        data.insert(std::make_pair(0x1f4d2,"LEDGER"));
        data.insert(std::make_pair(0x1f4d3,"NOTEBOOK"));
        data.insert(std::make_pair(0x1f4d4,"NOTEBOOK WITH DECORATIVE COVER"));
        data.insert(std::make_pair(0x1f4d5,"CLOSED BOOK"));
        data.insert(std::make_pair(0x1f4d6,"OPEN BOOK"));
        data.insert(std::make_pair(0x1f4d7,"GREEN BOOK"));
        data.insert(std::make_pair(0x1f4d8,"BLUE BOOK"));
        data.insert(std::make_pair(0x1f4d9,"ORANGE BOOK"));
        data.insert(std::make_pair(0x1f4da,"BOOKS"));
        data.insert(std::make_pair(0x1f4db,"NAME BADGE"));
        data.insert(std::make_pair(0x1f4dc,"SCROLL"));
        data.insert(std::make_pair(0x1f4dd,"MEMO"));
        data.insert(std::make_pair(0x1f4de,"TELEPHONE RECEIVER"));
        data.insert(std::make_pair(0x1f4df,"PAGER"));
        data.insert(std::make_pair(0x1f4e0,"FAX MACHINE"));
        data.insert(std::make_pair(0x1f4e1,"SATELLITE ANTENNA"));
        data.insert(std::make_pair(0x1f4e2,"PUBLIC ADDRESS LOUDSPEAKER"));
        data.insert(std::make_pair(0x1f4e3,"CHEERING MEGAPHONE"));
        data.insert(std::make_pair(0x1f4e4,"OUTBOX TRAY"));
        data.insert(std::make_pair(0x1f4e5,"INBOX TRAY"));
        data.insert(std::make_pair(0x1f4e6,"PACKAGE"));
        data.insert(std::make_pair(0x1f4e7,"E-MAIL SYMBOL"));
        data.insert(std::make_pair(0x1f4e8,"INCOMING ENVELOPE"));
        data.insert(std::make_pair(0x1f4e9,"ENVELOPE WITH DOWNWARDS ARROW ABOVE"));
        data.insert(std::make_pair(0x1f4ea,"CLOSED MAILBOX WITH LOWERED FLAG"));
        data.insert(std::make_pair(0x1f4eb,"CLOSED MAILBOX WITH RAISED FLAG"));
        data.insert(std::make_pair(0x1f4ec,"OPEN MAILBOX WITH RAISED FLAG"));
        data.insert(std::make_pair(0x1f4ed,"OPEN MAILBOX WITH LOWERED FLAG"));
        data.insert(std::make_pair(0x1f4ee,"POSTBOX"));
        data.insert(std::make_pair(0x1f4ef,"POSTAL HORN"));
        data.insert(std::make_pair(0x1f4f0,"NEWSPAPER"));
        data.insert(std::make_pair(0x1f4f1,"MOBILE PHONE"));
        data.insert(std::make_pair(0x1f4f2,"MOBILE PHONE WITH RIGHTWARDS ARROW AT LEFT"));
        data.insert(std::make_pair(0x1f4f3,"VIBRATION MODE"));
        data.insert(std::make_pair(0x1f4f4,"MOBILE PHONE OFF"));
        data.insert(std::make_pair(0x1f4f5,"NO MOBILE PHONES"));
        data.insert(std::make_pair(0x1f4f6,"ANTENNA WITH BARS"));
        data.insert(std::make_pair(0x1f4f7,"CAMERA"));
        data.insert(std::make_pair(0x1f4f8,"CAMERA WITH FLASH"));
        data.insert(std::make_pair(0x1f4f9,"VIDEO CAMERA"));
        data.insert(std::make_pair(0x1f4fa,"TELEVISION"));
        data.insert(std::make_pair(0x1f4fb,"RADIO"));
        data.insert(std::make_pair(0x1f4fc,"VIDEOCASSETTE"));
        data.insert(std::make_pair(0x1f4fd,"FILM PROJECTOR"));
        data.insert(std::make_pair(0x1f4fe,"PORTABLE STEREO"));
        data.insert(std::make_pair(0x1f4ff,"PRAYER BEADS"));
        data.insert(std::make_pair(0x1f500,"TWISTED RIGHTWARDS ARROWS"));
        data.insert(std::make_pair(0x1f501,"CLOCKWISE RIGHTWARDS AND LEFTWARDS OPEN CIRCLE ARROWS"));
        data.insert(std::make_pair(0x1f502,"CLOCKWISE RIGHTWARDS AND LEFTWARDS OPEN CIRCLE ARROWS WITH CIRCLED ONE OVERLAY"));
        data.insert(std::make_pair(0x1f503,"CLOCKWISE DOWNWARDS AND UPWARDS OPEN CIRCLE ARROWS"));
        data.insert(std::make_pair(0x1f504,"ANTICLOCKWISE DOWNWARDS AND UPWARDS OPEN CIRCLE ARROWS"));
        data.insert(std::make_pair(0x1f505,"LOW BRIGHTNESS SYMBOL"));
        data.insert(std::make_pair(0x1f506,"HIGH BRIGHTNESS SYMBOL"));
        data.insert(std::make_pair(0x1f507,"SPEAKER WITH CANCELLATION STROKE"));
        data.insert(std::make_pair(0x1f508,"SPEAKER"));
        data.insert(std::make_pair(0x1f509,"SPEAKER WITH ONE SOUND WAVE"));
        data.insert(std::make_pair(0x1f50a,"SPEAKER WITH THREE SOUND WAVES"));
        data.insert(std::make_pair(0x1f50b,"BATTERY"));
        data.insert(std::make_pair(0x1f50c,"ELECTRIC PLUG"));
        data.insert(std::make_pair(0x1f50d,"LEFT-POINTING MAGNIFYING GLASS"));
        data.insert(std::make_pair(0x1f50e,"RIGHT-POINTING MAGNIFYING GLASS"));
        data.insert(std::make_pair(0x1f50f,"LOCK WITH INK PEN"));
        data.insert(std::make_pair(0x1f510,"CLOSED LOCK WITH KEY"));
        data.insert(std::make_pair(0x1f511,"KEY"));
        data.insert(std::make_pair(0x1f512,"LOCK"));
        data.insert(std::make_pair(0x1f513,"OPEN LOCK"));
        data.insert(std::make_pair(0x1f514,"BELL"));
        data.insert(std::make_pair(0x1f515,"BELL WITH CANCELLATION STROKE"));
        data.insert(std::make_pair(0x1f516,"BOOKMARK"));
        data.insert(std::make_pair(0x1f517,"LINK SYMBOL"));
        data.insert(std::make_pair(0x1f518,"RADIO BUTTON"));
        data.insert(std::make_pair(0x1f519,"BACK WITH LEFTWARDS ARROW ABOVE"));
        data.insert(std::make_pair(0x1f51a,"END WITH LEFTWARDS ARROW ABOVE"));
        data.insert(std::make_pair(0x1f51b,"ON WITH EXCLAMATION MARK WITH LEFT RIGHT ARROW ABOVE"));
        data.insert(std::make_pair(0x1f51c,"SOON WITH RIGHTWARDS ARROW ABOVE"));
        data.insert(std::make_pair(0x1f51d,"TOP WITH UPWARDS ARROW ABOVE"));
        data.insert(std::make_pair(0x1f51e,"NO ONE UNDER EIGHTEEN SYMBOL"));
        data.insert(std::make_pair(0x1f51f,"KEYCAP TEN"));
        data.insert(std::make_pair(0x1f520,"INPUT SYMBOL FOR LATIN CAPITAL LETTERS"));
        data.insert(std::make_pair(0x1f521,"INPUT SYMBOL FOR LATIN SMALL LETTERS"));
        data.insert(std::make_pair(0x1f522,"INPUT SYMBOL FOR NUMBERS"));
        data.insert(std::make_pair(0x1f523,"INPUT SYMBOL FOR SYMBOLS"));
        data.insert(std::make_pair(0x1f524,"INPUT SYMBOL FOR LATIN LETTERS"));
        data.insert(std::make_pair(0x1f525,"FIRE"));
        data.insert(std::make_pair(0x1f526,"ELECTRIC TORCH"));
        data.insert(std::make_pair(0x1f527,"WRENCH"));
        data.insert(std::make_pair(0x1f528,"HAMMER"));
        data.insert(std::make_pair(0x1f529,"NUT AND BOLT"));
        data.insert(std::make_pair(0x1f52a,"HOCHO"));
        data.insert(std::make_pair(0x1f52b,"PISTOL"));
        data.insert(std::make_pair(0x1f52c,"MICROSCOPE"));
        data.insert(std::make_pair(0x1f52d,"TELESCOPE"));
        data.insert(std::make_pair(0x1f52e,"CRYSTAL BALL"));
        data.insert(std::make_pair(0x1f52f,"SIX POINTED STAR WITH MIDDLE DOT"));
        data.insert(std::make_pair(0x1f530,"JAPANESE SYMBOL FOR BEGINNER"));
        data.insert(std::make_pair(0x1f531,"TRIDENT EMBLEM"));
        data.insert(std::make_pair(0x1f532,"BLACK SQUARE BUTTON"));
        data.insert(std::make_pair(0x1f533,"WHITE SQUARE BUTTON"));
        data.insert(std::make_pair(0x1f534,"LARGE RED CIRCLE"));
        data.insert(std::make_pair(0x1f535,"LARGE BLUE CIRCLE"));
        data.insert(std::make_pair(0x1f536,"LARGE ORANGE DIAMOND"));
        data.insert(std::make_pair(0x1f537,"LARGE BLUE DIAMOND"));
        data.insert(std::make_pair(0x1f538,"SMALL ORANGE DIAMOND"));
        data.insert(std::make_pair(0x1f539,"SMALL BLUE DIAMOND"));
        data.insert(std::make_pair(0x1f53a,"UP-POINTING RED TRIANGLE"));
        data.insert(std::make_pair(0x1f53b,"DOWN-POINTING RED TRIANGLE"));
        data.insert(std::make_pair(0x1f53c,"UP-POINTING SMALL RED TRIANGLE"));
        data.insert(std::make_pair(0x1f53d,"DOWN-POINTING SMALL RED TRIANGLE"));
        data.insert(std::make_pair(0x1f53e,"LOWER RIGHT SHADOWED WHITE CIRCLE"));
        data.insert(std::make_pair(0x1f53f,"UPPER RIGHT SHADOWED WHITE CIRCLE"));
        data.insert(std::make_pair(0x1f540,"CIRCLED CROSS POMMEE"));
        data.insert(std::make_pair(0x1f541,"CROSS POMMEE WITH HALF-CIRCLE BELOW"));
        data.insert(std::make_pair(0x1f542,"CROSS POMMEE"));
        data.insert(std::make_pair(0x1f543,"NOTCHED LEFT SEMICIRCLE WITH THREE DOTS"));
        data.insert(std::make_pair(0x1f544,"NOTCHED RIGHT SEMICIRCLE WITH THREE DOTS"));
        data.insert(std::make_pair(0x1f545,"SYMBOL FOR MARKS CHAPTER"));
        data.insert(std::make_pair(0x1f546,"WHITE LATIN CROSS"));
        data.insert(std::make_pair(0x1f547,"HEAVY LATIN CROSS"));
        data.insert(std::make_pair(0x1f548,"CELTIC CROSS"));
        data.insert(std::make_pair(0x1f549,"OM SYMBOL"));
        data.insert(std::make_pair(0x1f54a,"DOVE OF PEACE"));
        data.insert(std::make_pair(0x1f54b,"KAABA"));
        data.insert(std::make_pair(0x1f54c,"MOSQUE"));
        data.insert(std::make_pair(0x1f54d,"SYNAGOGUE"));
        data.insert(std::make_pair(0x1f54e,"MENORAH WITH NINE BRANCHES"));
        data.insert(std::make_pair(0x1f54f,"BOWL OF HYGIEIA"));
        data.insert(std::make_pair(0x1f550,"CLOCK FACE ONE OCLOCK"));
        data.insert(std::make_pair(0x1f551,"CLOCK FACE TWO OCLOCK"));
        data.insert(std::make_pair(0x1f552,"CLOCK FACE THREE OCLOCK"));
        data.insert(std::make_pair(0x1f553,"CLOCK FACE FOUR OCLOCK"));
        data.insert(std::make_pair(0x1f554,"CLOCK FACE FIVE OCLOCK"));
        data.insert(std::make_pair(0x1f555,"CLOCK FACE SIX OCLOCK"));
        data.insert(std::make_pair(0x1f556,"CLOCK FACE SEVEN OCLOCK"));
        data.insert(std::make_pair(0x1f557,"CLOCK FACE EIGHT OCLOCK"));
        data.insert(std::make_pair(0x1f558,"CLOCK FACE NINE OCLOCK"));
        data.insert(std::make_pair(0x1f559,"CLOCK FACE TEN OCLOCK"));
        data.insert(std::make_pair(0x1f55a,"CLOCK FACE ELEVEN OCLOCK"));
        data.insert(std::make_pair(0x1f55b,"CLOCK FACE TWELVE OCLOCK"));
        data.insert(std::make_pair(0x1f55c,"CLOCK FACE ONE-THIRTY"));
        data.insert(std::make_pair(0x1f55d,"CLOCK FACE TWO-THIRTY"));
        data.insert(std::make_pair(0x1f55e,"CLOCK FACE THREE-THIRTY"));
        data.insert(std::make_pair(0x1f55f,"CLOCK FACE FOUR-THIRTY"));
        data.insert(std::make_pair(0x1f560,"CLOCK FACE FIVE-THIRTY"));
        data.insert(std::make_pair(0x1f561,"CLOCK FACE SIX-THIRTY"));
        data.insert(std::make_pair(0x1f562,"CLOCK FACE SEVEN-THIRTY"));
        data.insert(std::make_pair(0x1f563,"CLOCK FACE EIGHT-THIRTY"));
        data.insert(std::make_pair(0x1f564,"CLOCK FACE NINE-THIRTY"));
        data.insert(std::make_pair(0x1f565,"CLOCK FACE TEN-THIRTY"));
        data.insert(std::make_pair(0x1f566,"CLOCK FACE ELEVEN-THIRTY"));
        data.insert(std::make_pair(0x1f567,"CLOCK FACE TWELVE-THIRTY"));
        data.insert(std::make_pair(0x1f568,"RIGHT SPEAKER"));
        data.insert(std::make_pair(0x1f569,"RIGHT SPEAKER WITH ONE SOUND WAVE"));
        data.insert(std::make_pair(0x1f56a,"RIGHT SPEAKER WITH THREE SOUND WAVES"));
        data.insert(std::make_pair(0x1f56b,"BULLHORN"));
        data.insert(std::make_pair(0x1f56c,"BULLHORN WITH SOUND WAVES"));
        data.insert(std::make_pair(0x1f56d,"RINGING BELL"));
        data.insert(std::make_pair(0x1f56e,"BOOK"));
        data.insert(std::make_pair(0x1f56f,"CANDLE"));
        data.insert(std::make_pair(0x1f570,"MANTELPIECE CLOCK"));
        data.insert(std::make_pair(0x1f571,"BLACK SKULL AND CROSSBONES"));
        data.insert(std::make_pair(0x1f572,"NO PIRACY"));
        data.insert(std::make_pair(0x1f573,"HOLE"));
        data.insert(std::make_pair(0x1f574,"MAN IN BUSINESS SUIT LEVITATING"));
        data.insert(std::make_pair(0x1f575,"SLEUTH OR SPY"));
        data.insert(std::make_pair(0x1f576,"DARK SUNGLASSES"));
        data.insert(std::make_pair(0x1f577,"SPIDER"));
        data.insert(std::make_pair(0x1f578,"SPIDER WEB"));
        data.insert(std::make_pair(0x1f579,"JOYSTICK"));
        data.insert(std::make_pair(0x1f57a,"MAN DANCING"));
        data.insert(std::make_pair(0x1f57b,"LEFT HAND TELEPHONE RECEIVER"));
        data.insert(std::make_pair(0x1f57c,"TELEPHONE RECEIVER WITH PAGE"));
        data.insert(std::make_pair(0x1f57d,"RIGHT HAND TELEPHONE RECEIVER"));
        data.insert(std::make_pair(0x1f57e,"WHITE TOUCHTONE TELEPHONE"));
        data.insert(std::make_pair(0x1f57f,"BLACK TOUCHTONE TELEPHONE"));
        data.insert(std::make_pair(0x1f580,"TELEPHONE ON TOP OF MODEM"));
        data.insert(std::make_pair(0x1f581,"CLAMSHELL MOBILE PHONE"));
        data.insert(std::make_pair(0x1f582,"BACK OF ENVELOPE"));
        data.insert(std::make_pair(0x1f583,"STAMPED ENVELOPE"));
        data.insert(std::make_pair(0x1f584,"ENVELOPE WITH LIGHTNING"));
        data.insert(std::make_pair(0x1f585,"FLYING ENVELOPE"));
        data.insert(std::make_pair(0x1f586,"PEN OVER STAMPED ENVELOPE"));
        data.insert(std::make_pair(0x1f587,"LINKED PAPERCLIPS"));
        data.insert(std::make_pair(0x1f588,"BLACK PUSHPIN"));
        data.insert(std::make_pair(0x1f589,"LOWER LEFT PENCIL"));
        data.insert(std::make_pair(0x1f58a,"LOWER LEFT BALLPOINT PEN"));
        data.insert(std::make_pair(0x1f58b,"LOWER LEFT FOUNTAIN PEN"));
        data.insert(std::make_pair(0x1f58c,"LOWER LEFT PAINTBRUSH"));
        data.insert(std::make_pair(0x1f58d,"LOWER LEFT CRAYON"));
        data.insert(std::make_pair(0x1f58e,"LEFT WRITING HAND"));
        data.insert(std::make_pair(0x1f58f,"TURNED OK HAND SIGN"));
        data.insert(std::make_pair(0x1f590,"RAISED HAND WITH FINGERS SPLAYED"));
        data.insert(std::make_pair(0x1f591,"REVERSED RAISED HAND WITH FINGERS SPLAYED"));
        data.insert(std::make_pair(0x1f592,"REVERSED THUMBS UP SIGN"));
        data.insert(std::make_pair(0x1f593,"REVERSED THUMBS DOWN SIGN"));
        data.insert(std::make_pair(0x1f594,"REVERSED VICTORY HAND"));
        data.insert(std::make_pair(0x1f595,"REVERSED HAND WITH MIDDLE FINGER EXTENDED"));
        data.insert(std::make_pair(0x1f596,"RAISED HAND WITH PART BETWEEN MIDDLE AND RING FINGERS"));
        data.insert(std::make_pair(0x1f597,"WHITE DOWN POINTING LEFT HAND INDEX"));
        data.insert(std::make_pair(0x1f598,"SIDEWAYS WHITE LEFT POINTING INDEX"));
        data.insert(std::make_pair(0x1f599,"SIDEWAYS WHITE RIGHT POINTING INDEX"));
        data.insert(std::make_pair(0x1f59a,"SIDEWAYS BLACK LEFT POINTING INDEX"));
        data.insert(std::make_pair(0x1f59b,"SIDEWAYS BLACK RIGHT POINTING INDEX"));
        data.insert(std::make_pair(0x1f59c,"BLACK LEFT POINTING BACKHAND INDEX"));
        data.insert(std::make_pair(0x1f59d,"BLACK RIGHT POINTING BACKHAND INDEX"));
        data.insert(std::make_pair(0x1f59e,"SIDEWAYS WHITE UP POINTING INDEX"));
        data.insert(std::make_pair(0x1f59f,"SIDEWAYS WHITE DOWN POINTING INDEX"));
        data.insert(std::make_pair(0x1f5a0,"SIDEWAYS BLACK UP POINTING INDEX"));
        data.insert(std::make_pair(0x1f5a1,"SIDEWAYS BLACK DOWN POINTING INDEX"));
        data.insert(std::make_pair(0x1f5a2,"BLACK UP POINTING BACKHAND INDEX"));
        data.insert(std::make_pair(0x1f5a3,"BLACK DOWN POINTING BACKHAND INDEX"));
        data.insert(std::make_pair(0x1f5a4,"BLACK HEART"));
        data.insert(std::make_pair(0x1f5a5,"DESKTOP COMPUTER"));
        data.insert(std::make_pair(0x1f5a6,"KEYBOARD AND MOUSE"));
        data.insert(std::make_pair(0x1f5a7,"THREE NETWORKED COMPUTERS"));
        data.insert(std::make_pair(0x1f5a8,"PRINTER"));
        data.insert(std::make_pair(0x1f5a9,"POCKET CALCULATOR"));
        data.insert(std::make_pair(0x1f5aa,"BLACK HARD SHELL FLOPPY DISK"));
        data.insert(std::make_pair(0x1f5ab,"WHITE HARD SHELL FLOPPY DISK"));
        data.insert(std::make_pair(0x1f5ac,"SOFT SHELL FLOPPY DISK"));
        data.insert(std::make_pair(0x1f5ad,"TAPE CARTRIDGE"));
        data.insert(std::make_pair(0x1f5ae,"WIRED KEYBOARD"));
        data.insert(std::make_pair(0x1f5af,"ONE BUTTON MOUSE"));
        data.insert(std::make_pair(0x1f5b0,"TWO BUTTON MOUSE"));
        data.insert(std::make_pair(0x1f5b1,"THREE BUTTON MOUSE"));
        data.insert(std::make_pair(0x1f5b2,"TRACKBALL"));
        data.insert(std::make_pair(0x1f5b3,"OLD PERSONAL COMPUTER"));
        data.insert(std::make_pair(0x1f5b4,"HARD DISK"));
        data.insert(std::make_pair(0x1f5b5,"SCREEN"));
        data.insert(std::make_pair(0x1f5b6,"PRINTER ICON"));
        data.insert(std::make_pair(0x1f5b7,"FAX ICON"));
        data.insert(std::make_pair(0x1f5b8,"OPTICAL DISC ICON"));
        data.insert(std::make_pair(0x1f5b9,"DOCUMENT WITH TEXT"));
        data.insert(std::make_pair(0x1f5ba,"DOCUMENT WITH TEXT AND PICTURE"));
        data.insert(std::make_pair(0x1f5bb,"DOCUMENT WITH PICTURE"));
        data.insert(std::make_pair(0x1f5bc,"FRAME WITH PICTURE"));
        data.insert(std::make_pair(0x1f5bd,"FRAME WITH TILES"));
        data.insert(std::make_pair(0x1f5be,"FRAME WITH AN X"));
        data.insert(std::make_pair(0x1f5bf,"BLACK FOLDER"));
        data.insert(std::make_pair(0x1f5c0,"FOLDER"));
        data.insert(std::make_pair(0x1f5c1,"OPEN FOLDER"));
        data.insert(std::make_pair(0x1f5c2,"CARD INDEX DIVIDERS"));
        data.insert(std::make_pair(0x1f5c3,"CARD FILE BOX"));
        data.insert(std::make_pair(0x1f5c4,"FILE CABINET"));
        data.insert(std::make_pair(0x1f5c5,"EMPTY NOTE"));
        data.insert(std::make_pair(0x1f5c6,"EMPTY NOTE PAGE"));
        data.insert(std::make_pair(0x1f5c7,"EMPTY NOTE PAD"));
        data.insert(std::make_pair(0x1f5c8,"NOTE"));
        data.insert(std::make_pair(0x1f5c9,"NOTE PAGE"));
        data.insert(std::make_pair(0x1f5ca,"NOTE PAD"));
        data.insert(std::make_pair(0x1f5cb,"EMPTY DOCUMENT"));
        data.insert(std::make_pair(0x1f5cc,"EMPTY PAGE"));
        data.insert(std::make_pair(0x1f5cd,"EMPTY PAGES"));
        data.insert(std::make_pair(0x1f5ce,"DOCUMENT"));
        data.insert(std::make_pair(0x1f5cf,"PAGE"));
        data.insert(std::make_pair(0x1f5d0,"PAGES"));
        data.insert(std::make_pair(0x1f5d1,"WASTEBASKET"));
        data.insert(std::make_pair(0x1f5d2,"SPIRAL NOTE PAD"));
        data.insert(std::make_pair(0x1f5d3,"SPIRAL CALENDAR PAD"));
        data.insert(std::make_pair(0x1f5d4,"DESKTOP WINDOW"));
        data.insert(std::make_pair(0x1f5d5,"MINIMIZE"));
        data.insert(std::make_pair(0x1f5d6,"MAXIMIZE"));
        data.insert(std::make_pair(0x1f5d7,"OVERLAP"));
        data.insert(std::make_pair(0x1f5d8,"CLOCKWISE RIGHT AND LEFT SEMICIRCLE ARROWS"));
        data.insert(std::make_pair(0x1f5d9,"CANCELLATION X"));
        data.insert(std::make_pair(0x1f5da,"INCREASE FONT SIZE SYMBOL"));
        data.insert(std::make_pair(0x1f5db,"DECREASE FONT SIZE SYMBOL"));
        data.insert(std::make_pair(0x1f5dc,"COMPRESSION"));
        data.insert(std::make_pair(0x1f5dd,"OLD KEY"));
        data.insert(std::make_pair(0x1f5de,"ROLLED-UP NEWSPAPER"));
        data.insert(std::make_pair(0x1f5df,"PAGE WITH CIRCLED TEXT"));
        data.insert(std::make_pair(0x1f5e0,"STOCK CHART"));
        data.insert(std::make_pair(0x1f5e1,"DAGGER KNIFE"));
        data.insert(std::make_pair(0x1f5e2,"LIPS"));
        data.insert(std::make_pair(0x1f5e3,"SPEAKING HEAD IN SILHOUETTE"));
        data.insert(std::make_pair(0x1f5e4,"THREE RAYS ABOVE"));
        data.insert(std::make_pair(0x1f5e5,"THREE RAYS BELOW"));
        data.insert(std::make_pair(0x1f5e6,"THREE RAYS LEFT"));
        data.insert(std::make_pair(0x1f5e7,"THREE RAYS RIGHT"));
        data.insert(std::make_pair(0x1f5e8,"LEFT SPEECH BUBBLE"));
        data.insert(std::make_pair(0x1f5e9,"RIGHT SPEECH BUBBLE"));
        data.insert(std::make_pair(0x1f5ea,"TWO SPEECH BUBBLES"));
        data.insert(std::make_pair(0x1f5eb,"THREE SPEECH BUBBLES"));
        data.insert(std::make_pair(0x1f5ec,"LEFT THOUGHT BUBBLE"));
        data.insert(std::make_pair(0x1f5ed,"RIGHT THOUGHT BUBBLE"));
        data.insert(std::make_pair(0x1f5ee,"LEFT ANGER BUBBLE"));
        data.insert(std::make_pair(0x1f5ef,"RIGHT ANGER BUBBLE"));
        data.insert(std::make_pair(0x1f5f0,"MOOD BUBBLE"));
        data.insert(std::make_pair(0x1f5f1,"LIGHTNING MOOD BUBBLE"));
        data.insert(std::make_pair(0x1f5f2,"LIGHTNING MOOD"));
        data.insert(std::make_pair(0x1f5f3,"BALLOT BOX WITH BALLOT"));
        data.insert(std::make_pair(0x1f5f4,"BALLOT SCRIPT X"));
        data.insert(std::make_pair(0x1f5f5,"BALLOT BOX WITH SCRIPT X"));
        data.insert(std::make_pair(0x1f5f6,"BALLOT BOLD SCRIPT X"));
        data.insert(std::make_pair(0x1f5f7,"BALLOT BOX WITH BOLD SCRIPT X"));
        data.insert(std::make_pair(0x1f5f8,"LIGHT CHECK MARK"));
        data.insert(std::make_pair(0x1f5f9,"BALLOT BOX WITH BOLD CHECK"));
        data.insert(std::make_pair(0x1f5fa,"WORLD MAP"));
        data.insert(std::make_pair(0x1f5fb,"MOUNT FUJI"));
        data.insert(std::make_pair(0x1f5fc,"TOKYO TOWER"));
        data.insert(std::make_pair(0x1f5fd,"STATUE OF LIBERTY"));
        data.insert(std::make_pair(0x1f5fe,"SILHOUETTE OF JAPAN"));
        data.insert(std::make_pair(0x1f5ff,"MOYAI"));
        data.insert(std::make_pair(0x1f600,"GRINNING FACE"));
        data.insert(std::make_pair(0x1f601,"GRINNING FACE WITH SMILING EYES"));
        data.insert(std::make_pair(0x1f602,"FACE WITH TEARS OF JOY"));
        data.insert(std::make_pair(0x1f603,"SMILING FACE WITH OPEN MOUTH"));
        data.insert(std::make_pair(0x1f604,"SMILING FACE WITH OPEN MOUTH AND SMILING EYES"));
        data.insert(std::make_pair(0x1f605,"SMILING FACE WITH OPEN MOUTH AND COLD SWEAT"));
        data.insert(std::make_pair(0x1f606,"SMILING FACE WITH OPEN MOUTH AND TIGHTLY-CLOSED EYES"));
        data.insert(std::make_pair(0x1f607,"SMILING FACE WITH HALO"));
        data.insert(std::make_pair(0x1f608,"SMILING FACE WITH HORNS"));
        data.insert(std::make_pair(0x1f609,"WINKING FACE"));
        data.insert(std::make_pair(0x1f60a,"SMILING FACE WITH SMILING EYES"));
        data.insert(std::make_pair(0x1f60b,"FACE SAVOURING DELICIOUS FOOD"));
        data.insert(std::make_pair(0x1f60c,"RELIEVED FACE"));
        data.insert(std::make_pair(0x1f60d,"SMILING FACE WITH HEART-SHAPED EYES"));
        data.insert(std::make_pair(0x1f60e,"SMILING FACE WITH SUNGLASSES"));
        data.insert(std::make_pair(0x1f60f,"SMIRKING FACE"));
        data.insert(std::make_pair(0x1f610,"NEUTRAL FACE"));
        data.insert(std::make_pair(0x1f611,"EXPRESSIONLESS FACE"));
        data.insert(std::make_pair(0x1f612,"UNAMUSED FACE"));
        data.insert(std::make_pair(0x1f613,"FACE WITH COLD SWEAT"));
        data.insert(std::make_pair(0x1f614,"PENSIVE FACE"));
        data.insert(std::make_pair(0x1f615,"CONFUSED FACE"));
        data.insert(std::make_pair(0x1f616,"CONFOUNDED FACE"));
        data.insert(std::make_pair(0x1f617,"KISSING FACE"));
        data.insert(std::make_pair(0x1f618,"FACE THROWING A KISS"));
        data.insert(std::make_pair(0x1f619,"KISSING FACE WITH SMILING EYES"));
        data.insert(std::make_pair(0x1f61a,"KISSING FACE WITH CLOSED EYES"));
        data.insert(std::make_pair(0x1f61b,"FACE WITH STUCK-OUT TONGUE"));
        data.insert(std::make_pair(0x1f61c,"FACE WITH STUCK-OUT TONGUE AND WINKING EYE"));
        data.insert(std::make_pair(0x1f61d,"FACE WITH STUCK-OUT TONGUE AND TIGHTLY-CLOSED EYES"));
        data.insert(std::make_pair(0x1f61e,"DISAPPOINTED FACE"));
        data.insert(std::make_pair(0x1f61f,"WORRIED FACE"));
        data.insert(std::make_pair(0x1f620,"ANGRY FACE"));
        data.insert(std::make_pair(0x1f621,"POUTING FACE"));
        data.insert(std::make_pair(0x1f622,"CRYING FACE"));
        data.insert(std::make_pair(0x1f623,"PERSEVERING FACE"));
        data.insert(std::make_pair(0x1f624,"FACE WITH LOOK OF TRIUMPH"));
        data.insert(std::make_pair(0x1f625,"DISAPPOINTED BUT RELIEVED FACE"));
        data.insert(std::make_pair(0x1f626,"FROWNING FACE WITH OPEN MOUTH"));
        data.insert(std::make_pair(0x1f627,"ANGUISHED FACE"));
        data.insert(std::make_pair(0x1f628,"FEARFUL FACE"));
        data.insert(std::make_pair(0x1f629,"WEARY FACE"));
        data.insert(std::make_pair(0x1f62a,"SLEEPY FACE"));
        data.insert(std::make_pair(0x1f62b,"TIRED FACE"));
        data.insert(std::make_pair(0x1f62c,"GRIMACING FACE"));
        data.insert(std::make_pair(0x1f62d,"LOUDLY CRYING FACE"));
        data.insert(std::make_pair(0x1f62e,"FACE WITH OPEN MOUTH"));
        data.insert(std::make_pair(0x1f62f,"HUSHED FACE"));
        data.insert(std::make_pair(0x1f630,"FACE WITH OPEN MOUTH AND COLD SWEAT"));
        data.insert(std::make_pair(0x1f631,"FACE SCREAMING IN FEAR"));
        data.insert(std::make_pair(0x1f632,"ASTONISHED FACE"));
        data.insert(std::make_pair(0x1f633,"FLUSHED FACE"));
        data.insert(std::make_pair(0x1f634,"SLEEPING FACE"));
        data.insert(std::make_pair(0x1f635,"DIZZY FACE"));
        data.insert(std::make_pair(0x1f636,"FACE WITHOUT MOUTH"));
        data.insert(std::make_pair(0x1f637,"FACE WITH MEDICAL MASK"));
        data.insert(std::make_pair(0x1f638,"GRINNING CAT FACE WITH SMILING EYES"));
        data.insert(std::make_pair(0x1f639,"CAT FACE WITH TEARS OF JOY"));
        data.insert(std::make_pair(0x1f63a,"SMILING CAT FACE WITH OPEN MOUTH"));
        data.insert(std::make_pair(0x1f63b,"SMILING CAT FACE WITH HEART-SHAPED EYES"));
        data.insert(std::make_pair(0x1f63c,"CAT FACE WITH WRY SMILE"));
        data.insert(std::make_pair(0x1f63d,"KISSING CAT FACE WITH CLOSED EYES"));
        data.insert(std::make_pair(0x1f63e,"POUTING CAT FACE"));
        data.insert(std::make_pair(0x1f63f,"CRYING CAT FACE"));
        data.insert(std::make_pair(0x1f640,"WEARY CAT FACE"));
        data.insert(std::make_pair(0x1f641,"SLIGHTLY FROWNING FACE"));
        data.insert(std::make_pair(0x1f642,"SLIGHTLY SMILING FACE"));
        data.insert(std::make_pair(0x1f643,"UPSIDE-DOWN FACE"));
        data.insert(std::make_pair(0x1f644,"FACE WITH ROLLING EYES"));
        data.insert(std::make_pair(0x1f645,"FACE WITH NO GOOD GESTURE"));
        data.insert(std::make_pair(0x1f646,"FACE WITH OK GESTURE"));
        data.insert(std::make_pair(0x1f647,"PERSON BOWING DEEPLY"));
        data.insert(std::make_pair(0x1f648,"SEE-NO-EVIL MONKEY"));
        data.insert(std::make_pair(0x1f649,"HEAR-NO-EVIL MONKEY"));
        data.insert(std::make_pair(0x1f64a,"SPEAK-NO-EVIL MONKEY"));
        data.insert(std::make_pair(0x1f64b,"HAPPY PERSON RAISING ONE HAND"));
        data.insert(std::make_pair(0x1f64c,"PERSON RAISING BOTH HANDS IN CELEBRATION"));
        data.insert(std::make_pair(0x1f64d,"PERSON FROWNING"));
        data.insert(std::make_pair(0x1f64e,"PERSON WITH POUTING FACE"));
        data.insert(std::make_pair(0x1f64f,"PERSON WITH FOLDED HANDS"));
        data.insert(std::make_pair(0x1f650,"NORTH WEST POINTING LEAF"));
        data.insert(std::make_pair(0x1f651,"SOUTH WEST POINTING LEAF"));
        data.insert(std::make_pair(0x1f652,"NORTH EAST POINTING LEAF"));
        data.insert(std::make_pair(0x1f653,"SOUTH EAST POINTING LEAF"));
        data.insert(std::make_pair(0x1f654,"TURNED NORTH WEST POINTING LEAF"));
        data.insert(std::make_pair(0x1f655,"TURNED SOUTH WEST POINTING LEAF"));
        data.insert(std::make_pair(0x1f656,"TURNED NORTH EAST POINTING LEAF"));
        data.insert(std::make_pair(0x1f657,"TURNED SOUTH EAST POINTING LEAF"));
        data.insert(std::make_pair(0x1f658,"NORTH WEST POINTING VINE LEAF"));
        data.insert(std::make_pair(0x1f659,"SOUTH WEST POINTING VINE LEAF"));
        data.insert(std::make_pair(0x1f65a,"NORTH EAST POINTING VINE LEAF"));
        data.insert(std::make_pair(0x1f65b,"SOUTH EAST POINTING VINE LEAF"));
        data.insert(std::make_pair(0x1f65c,"HEAVY NORTH WEST POINTING VINE LEAF"));
        data.insert(std::make_pair(0x1f65d,"HEAVY SOUTH WEST POINTING VINE LEAF"));
        data.insert(std::make_pair(0x1f65e,"HEAVY NORTH EAST POINTING VINE LEAF"));
        data.insert(std::make_pair(0x1f65f,"HEAVY SOUTH EAST POINTING VINE LEAF"));
        data.insert(std::make_pair(0x1f660,"NORTH WEST POINTING BUD"));
        data.insert(std::make_pair(0x1f661,"SOUTH WEST POINTING BUD"));
        data.insert(std::make_pair(0x1f662,"NORTH EAST POINTING BUD"));
        data.insert(std::make_pair(0x1f663,"SOUTH EAST POINTING BUD"));
        data.insert(std::make_pair(0x1f664,"HEAVY NORTH WEST POINTING BUD"));
        data.insert(std::make_pair(0x1f665,"HEAVY SOUTH WEST POINTING BUD"));
        data.insert(std::make_pair(0x1f666,"HEAVY NORTH EAST POINTING BUD"));
        data.insert(std::make_pair(0x1f667,"HEAVY SOUTH EAST POINTING BUD"));
        data.insert(std::make_pair(0x1f668,"HOLLOW QUILT SQUARE ORNAMENT"));
        data.insert(std::make_pair(0x1f669,"HOLLOW QUILT SQUARE ORNAMENT IN BLACK SQUARE"));
        data.insert(std::make_pair(0x1f66a,"SOLID QUILT SQUARE ORNAMENT"));
        data.insert(std::make_pair(0x1f66b,"SOLID QUILT SQUARE ORNAMENT IN BLACK SQUARE"));
        data.insert(std::make_pair(0x1f66c,"LEFTWARDS ROCKET"));
        data.insert(std::make_pair(0x1f66d,"UPWARDS ROCKET"));
        data.insert(std::make_pair(0x1f66e,"RIGHTWARDS ROCKET"));
        data.insert(std::make_pair(0x1f66f,"DOWNWARDS ROCKET"));
        data.insert(std::make_pair(0x1f670,"SCRIPT LIGATURE ET ORNAMENT"));
        data.insert(std::make_pair(0x1f671,"HEAVY SCRIPT LIGATURE ET ORNAMENT"));
        data.insert(std::make_pair(0x1f672,"LIGATURE OPEN ET ORNAMENT"));
        data.insert(std::make_pair(0x1f673,"HEAVY LIGATURE OPEN ET ORNAMENT"));
        data.insert(std::make_pair(0x1f674,"HEAVY AMPERSAND ORNAMENT"));
        data.insert(std::make_pair(0x1f675,"SWASH AMPERSAND ORNAMENT"));
        data.insert(std::make_pair(0x1f676,"SANS-SERIF HEAVY DOUBLE TURNED COMMA QUOTATION MARK ORNAMENT"));
        data.insert(std::make_pair(0x1f677,"SANS-SERIF HEAVY DOUBLE COMMA QUOTATION MARK ORNAMENT"));
        data.insert(std::make_pair(0x1f678,"SANS-SERIF HEAVY LOW DOUBLE COMMA QUOTATION MARK ORNAMENT"));
        data.insert(std::make_pair(0x1f679,"HEAVY INTERROBANG ORNAMENT"));
        data.insert(std::make_pair(0x1f67a,"SANS-SERIF INTERROBANG ORNAMENT"));
        data.insert(std::make_pair(0x1f67b,"HEAVY SANS-SERIF INTERROBANG ORNAMENT"));
        data.insert(std::make_pair(0x1f67c,"VERY HEAVY SOLIDUS"));
        data.insert(std::make_pair(0x1f67d,"VERY HEAVY REVERSE SOLIDUS"));
        data.insert(std::make_pair(0x1f67e,"CHECKER BOARD"));
        data.insert(std::make_pair(0x1f67f,"REVERSE CHECKER BOARD"));
        data.insert(std::make_pair(0x1f680,"ROCKET"));
        data.insert(std::make_pair(0x1f681,"HELICOPTER"));
        data.insert(std::make_pair(0x1f682,"STEAM LOCOMOTIVE"));
        data.insert(std::make_pair(0x1f683,"RAILWAY CAR"));
        data.insert(std::make_pair(0x1f684,"HIGH-SPEED TRAIN"));
        data.insert(std::make_pair(0x1f685,"HIGH-SPEED TRAIN WITH BULLET NOSE"));
        data.insert(std::make_pair(0x1f686,"TRAIN"));
        data.insert(std::make_pair(0x1f687,"METRO"));
        data.insert(std::make_pair(0x1f688,"LIGHT RAIL"));
        data.insert(std::make_pair(0x1f689,"STATION"));
        data.insert(std::make_pair(0x1f68a,"TRAM"));
        data.insert(std::make_pair(0x1f68b,"TRAM CAR"));
        data.insert(std::make_pair(0x1f68c,"BUS"));
        data.insert(std::make_pair(0x1f68d,"ONCOMING BUS"));
        data.insert(std::make_pair(0x1f68e,"TROLLEYBUS"));
        data.insert(std::make_pair(0x1f68f,"BUS STOP"));
        data.insert(std::make_pair(0x1f690,"MINIBUS"));
        data.insert(std::make_pair(0x1f691,"AMBULANCE"));
        data.insert(std::make_pair(0x1f692,"FIRE ENGINE"));
        data.insert(std::make_pair(0x1f693,"POLICE CAR"));
        data.insert(std::make_pair(0x1f694,"ONCOMING POLICE CAR"));
        data.insert(std::make_pair(0x1f695,"TAXI"));
        data.insert(std::make_pair(0x1f696,"ONCOMING TAXI"));
        data.insert(std::make_pair(0x1f697,"AUTOMOBILE"));
        data.insert(std::make_pair(0x1f698,"ONCOMING AUTOMOBILE"));
        data.insert(std::make_pair(0x1f699,"RECREATIONAL VEHICLE"));
        data.insert(std::make_pair(0x1f69a,"DELIVERY TRUCK"));
        data.insert(std::make_pair(0x1f69b,"ARTICULATED LORRY"));
        data.insert(std::make_pair(0x1f69c,"TRACTOR"));
        data.insert(std::make_pair(0x1f69d,"MONORAIL"));
        data.insert(std::make_pair(0x1f69e,"MOUNTAIN RAILWAY"));
        data.insert(std::make_pair(0x1f69f,"SUSPENSION RAILWAY"));
        data.insert(std::make_pair(0x1f6a0,"MOUNTAIN CABLEWAY"));
        data.insert(std::make_pair(0x1f6a1,"AERIAL TRAMWAY"));
        data.insert(std::make_pair(0x1f6a2,"SHIP"));
        data.insert(std::make_pair(0x1f6a3,"ROWBOAT"));
        data.insert(std::make_pair(0x1f6a4,"SPEEDBOAT"));
        data.insert(std::make_pair(0x1f6a5,"HORIZONTAL TRAFFIC LIGHT"));
        data.insert(std::make_pair(0x1f6a6,"VERTICAL TRAFFIC LIGHT"));
        data.insert(std::make_pair(0x1f6a7,"CONSTRUCTION SIGN"));
        data.insert(std::make_pair(0x1f6a8,"POLICE CARS REVOLVING LIGHT"));
        data.insert(std::make_pair(0x1f6a9,"TRIANGULAR FLAG ON POST"));
        data.insert(std::make_pair(0x1f6aa,"DOOR"));
        data.insert(std::make_pair(0x1f6ab,"NO ENTRY SIGN"));
        data.insert(std::make_pair(0x1f6ac,"SMOKING SYMBOL"));
        data.insert(std::make_pair(0x1f6ad,"NO SMOKING SYMBOL"));
        data.insert(std::make_pair(0x1f6ae,"PUT LITTER IN ITS PLACE SYMBOL"));
        data.insert(std::make_pair(0x1f6af,"DO NOT LITTER SYMBOL"));
        data.insert(std::make_pair(0x1f6b0,"POTABLE WATER SYMBOL"));
        data.insert(std::make_pair(0x1f6b1,"NON-POTABLE WATER SYMBOL"));
        data.insert(std::make_pair(0x1f6b2,"BICYCLE"));
        data.insert(std::make_pair(0x1f6b3,"NO BICYCLES"));
        data.insert(std::make_pair(0x1f6b4,"BICYCLIST"));
        data.insert(std::make_pair(0x1f6b5,"MOUNTAIN BICYCLIST"));
        data.insert(std::make_pair(0x1f6b6,"PEDESTRIAN"));
        data.insert(std::make_pair(0x1f6b7,"NO PEDESTRIANS"));
        data.insert(std::make_pair(0x1f6b8,"CHILDREN CROSSING"));
        data.insert(std::make_pair(0x1f6b9,"MENS SYMBOL"));
        data.insert(std::make_pair(0x1f6ba,"WOMENS SYMBOL"));
        data.insert(std::make_pair(0x1f6bb,"RESTROOM"));
        data.insert(std::make_pair(0x1f6bc,"BABY SYMBOL"));
        data.insert(std::make_pair(0x1f6bd,"TOILET"));
        data.insert(std::make_pair(0x1f6be,"WATER CLOSET"));
        data.insert(std::make_pair(0x1f6bf,"SHOWER"));
        data.insert(std::make_pair(0x1f6c0,"BATH"));
        data.insert(std::make_pair(0x1f6c1,"BATHTUB"));
        data.insert(std::make_pair(0x1f6c2,"PASSPORT CONTROL"));
        data.insert(std::make_pair(0x1f6c3,"CUSTOMS"));
        data.insert(std::make_pair(0x1f6c4,"BAGGAGE CLAIM"));
        data.insert(std::make_pair(0x1f6c5,"LEFT LUGGAGE"));
        data.insert(std::make_pair(0x1f6c6,"TRIANGLE WITH ROUNDED CORNERS"));
        data.insert(std::make_pair(0x1f6c7,"PROHIBITED SIGN"));
        data.insert(std::make_pair(0x1f6c8,"CIRCLED INFORMATION SOURCE"));
        data.insert(std::make_pair(0x1f6c9,"BOYS SYMBOL"));
        data.insert(std::make_pair(0x1f6ca,"GIRLS SYMBOL"));
        data.insert(std::make_pair(0x1f6cb,"COUCH AND LAMP"));
        data.insert(std::make_pair(0x1f6cc,"SLEEPING ACCOMMODATION"));
        data.insert(std::make_pair(0x1f6cd,"SHOPPING BAGS"));
        data.insert(std::make_pair(0x1f6ce,"BELLHOP BELL"));
        data.insert(std::make_pair(0x1f6cf,"BED"));
        data.insert(std::make_pair(0x1f6d0,"PLACE OF WORSHIP"));
        data.insert(std::make_pair(0x1f6d1,"OCTAGONAL SIGN"));
        data.insert(std::make_pair(0x1f6d2,"SHOPPING TROLLEY"));
        data.insert(std::make_pair(0x1f6d3,"STUPA"));
        data.insert(std::make_pair(0x1f6d4,"PAGODA"));
        data.insert(std::make_pair(0x1f6d5,"HINDU TEMPLE"));
        data.insert(std::make_pair(0x1f6d6,"HUT"));
        data.insert(std::make_pair(0x1f6d7,"ELEVATOR"));
        data.insert(std::make_pair(0x1f6dc,"WIRELESS"));
        data.insert(std::make_pair(0x1f6dd,"PLAYGROUND SLIDE"));
        data.insert(std::make_pair(0x1f6de,"WHEEL"));
        data.insert(std::make_pair(0x1f6df,"RING BUOY"));
        data.insert(std::make_pair(0x1f6e0,"HAMMER AND WRENCH"));
        data.insert(std::make_pair(0x1f6e1,"SHIELD"));
        data.insert(std::make_pair(0x1f6e2,"OIL DRUM"));
        data.insert(std::make_pair(0x1f6e3,"MOTORWAY"));
        data.insert(std::make_pair(0x1f6e4,"RAILWAY TRACK"));
        data.insert(std::make_pair(0x1f6e5,"MOTOR BOAT"));
        data.insert(std::make_pair(0x1f6e6,"UP-POINTING MILITARY AIRPLANE"));
        data.insert(std::make_pair(0x1f6e7,"UP-POINTING AIRPLANE"));
        data.insert(std::make_pair(0x1f6e8,"UP-POINTING SMALL AIRPLANE"));
        data.insert(std::make_pair(0x1f6e9,"SMALL AIRPLANE"));
        data.insert(std::make_pair(0x1f6ea,"NORTHEAST-POINTING AIRPLANE"));
        data.insert(std::make_pair(0x1f6eb,"AIRPLANE DEPARTURE"));
        data.insert(std::make_pair(0x1f6ec,"AIRPLANE ARRIVING"));
        data.insert(std::make_pair(0x1f6f0,"SATELLITE"));
        data.insert(std::make_pair(0x1f6f1,"ONCOMING FIRE ENGINE"));
        data.insert(std::make_pair(0x1f6f2,"DIESEL LOCOMOTIVE"));
        data.insert(std::make_pair(0x1f6f3,"PASSENGER SHIP"));
        data.insert(std::make_pair(0x1f6f4,"SCOOTER"));
        data.insert(std::make_pair(0x1f6f5,"MOTOR SCOOTER"));
        data.insert(std::make_pair(0x1f6f6,"CANOE"));
        data.insert(std::make_pair(0x1f6f7,"SLED"));
        data.insert(std::make_pair(0x1f6f8,"FLYING SAUCER"));
        data.insert(std::make_pair(0x1f6f9,"SKATEBOARD"));
        data.insert(std::make_pair(0x1f6fa,"AUTO RICKSHAW"));
        data.insert(std::make_pair(0x1f6fb,"PICKUP TRUCK"));
        data.insert(std::make_pair(0x1f6fc,"ROLLER SKATE"));
        data.insert(std::make_pair(0x1f700,"ALCHEMICAL SYMBOL FOR QUINTESSENCE"));
        data.insert(std::make_pair(0x1f701,"ALCHEMICAL SYMBOL FOR AIR"));
        data.insert(std::make_pair(0x1f702,"ALCHEMICAL SYMBOL FOR FIRE"));
        data.insert(std::make_pair(0x1f703,"ALCHEMICAL SYMBOL FOR EARTH"));
        data.insert(std::make_pair(0x1f704,"ALCHEMICAL SYMBOL FOR WATER"));
        data.insert(std::make_pair(0x1f705,"ALCHEMICAL SYMBOL FOR AQUAFORTIS"));
        data.insert(std::make_pair(0x1f706,"ALCHEMICAL SYMBOL FOR AQUA REGIA"));
        data.insert(std::make_pair(0x1f707,"ALCHEMICAL SYMBOL FOR AQUA REGIA-2"));
        data.insert(std::make_pair(0x1f708,"ALCHEMICAL SYMBOL FOR AQUA VITAE"));
        data.insert(std::make_pair(0x1f709,"ALCHEMICAL SYMBOL FOR AQUA VITAE-2"));
        data.insert(std::make_pair(0x1f70a,"ALCHEMICAL SYMBOL FOR VINEGAR"));
        data.insert(std::make_pair(0x1f70b,"ALCHEMICAL SYMBOL FOR VINEGAR-2"));
        data.insert(std::make_pair(0x1f70c,"ALCHEMICAL SYMBOL FOR VINEGAR-3"));
        data.insert(std::make_pair(0x1f70d,"ALCHEMICAL SYMBOL FOR SULFUR"));
        data.insert(std::make_pair(0x1f70e,"ALCHEMICAL SYMBOL FOR PHILOSOPHERS SULFUR"));
        data.insert(std::make_pair(0x1f70f,"ALCHEMICAL SYMBOL FOR BLACK SULFUR"));
        data.insert(std::make_pair(0x1f710,"ALCHEMICAL SYMBOL FOR MERCURY SUBLIMATE"));
        data.insert(std::make_pair(0x1f711,"ALCHEMICAL SYMBOL FOR MERCURY SUBLIMATE-2"));
        data.insert(std::make_pair(0x1f712,"ALCHEMICAL SYMBOL FOR MERCURY SUBLIMATE-3"));
        data.insert(std::make_pair(0x1f713,"ALCHEMICAL SYMBOL FOR CINNABAR"));
        data.insert(std::make_pair(0x1f714,"ALCHEMICAL SYMBOL FOR SALT"));
        data.insert(std::make_pair(0x1f715,"ALCHEMICAL SYMBOL FOR NITRE"));
        data.insert(std::make_pair(0x1f716,"ALCHEMICAL SYMBOL FOR VITRIOL"));
        data.insert(std::make_pair(0x1f717,"ALCHEMICAL SYMBOL FOR VITRIOL-2"));
        data.insert(std::make_pair(0x1f718,"ALCHEMICAL SYMBOL FOR ROCK SALT"));
        data.insert(std::make_pair(0x1f719,"ALCHEMICAL SYMBOL FOR ROCK SALT-2"));
        data.insert(std::make_pair(0x1f71a,"ALCHEMICAL SYMBOL FOR GOLD"));
        data.insert(std::make_pair(0x1f71b,"ALCHEMICAL SYMBOL FOR SILVER"));
        data.insert(std::make_pair(0x1f71c,"ALCHEMICAL SYMBOL FOR IRON ORE"));
        data.insert(std::make_pair(0x1f71d,"ALCHEMICAL SYMBOL FOR IRON ORE-2"));
        data.insert(std::make_pair(0x1f71e,"ALCHEMICAL SYMBOL FOR CROCUS OF IRON"));
        data.insert(std::make_pair(0x1f71f,"ALCHEMICAL SYMBOL FOR REGULUS OF IRON"));
        data.insert(std::make_pair(0x1f720,"ALCHEMICAL SYMBOL FOR COPPER ORE"));
        data.insert(std::make_pair(0x1f721,"ALCHEMICAL SYMBOL FOR IRON-COPPER ORE"));
        data.insert(std::make_pair(0x1f722,"ALCHEMICAL SYMBOL FOR SUBLIMATE OF COPPER"));
        data.insert(std::make_pair(0x1f723,"ALCHEMICAL SYMBOL FOR CROCUS OF COPPER"));
        data.insert(std::make_pair(0x1f724,"ALCHEMICAL SYMBOL FOR CROCUS OF COPPER-2"));
        data.insert(std::make_pair(0x1f725,"ALCHEMICAL SYMBOL FOR COPPER ANTIMONIATE"));
        data.insert(std::make_pair(0x1f726,"ALCHEMICAL SYMBOL FOR SALT OF COPPER ANTIMONIATE"));
        data.insert(std::make_pair(0x1f727,"ALCHEMICAL SYMBOL FOR SUBLIMATE OF SALT OF COPPER"));
        data.insert(std::make_pair(0x1f728,"ALCHEMICAL SYMBOL FOR VERDIGRIS"));
        data.insert(std::make_pair(0x1f729,"ALCHEMICAL SYMBOL FOR TIN ORE"));
        data.insert(std::make_pair(0x1f72a,"ALCHEMICAL SYMBOL FOR LEAD ORE"));
        data.insert(std::make_pair(0x1f72b,"ALCHEMICAL SYMBOL FOR ANTIMONY ORE"));
        data.insert(std::make_pair(0x1f72c,"ALCHEMICAL SYMBOL FOR SUBLIMATE OF ANTIMONY"));
        data.insert(std::make_pair(0x1f72d,"ALCHEMICAL SYMBOL FOR SALT OF ANTIMONY"));
        data.insert(std::make_pair(0x1f72e,"ALCHEMICAL SYMBOL FOR SUBLIMATE OF SALT OF ANTIMONY"));
        data.insert(std::make_pair(0x1f72f,"ALCHEMICAL SYMBOL FOR VINEGAR OF ANTIMONY"));
        data.insert(std::make_pair(0x1f730,"ALCHEMICAL SYMBOL FOR REGULUS OF ANTIMONY"));
        data.insert(std::make_pair(0x1f731,"ALCHEMICAL SYMBOL FOR REGULUS OF ANTIMONY-2"));
        data.insert(std::make_pair(0x1f732,"ALCHEMICAL SYMBOL FOR REGULUS"));
        data.insert(std::make_pair(0x1f733,"ALCHEMICAL SYMBOL FOR REGULUS-2"));
        data.insert(std::make_pair(0x1f734,"ALCHEMICAL SYMBOL FOR REGULUS-3"));
        data.insert(std::make_pair(0x1f735,"ALCHEMICAL SYMBOL FOR REGULUS-4"));
        data.insert(std::make_pair(0x1f736,"ALCHEMICAL SYMBOL FOR ALKALI"));
        data.insert(std::make_pair(0x1f737,"ALCHEMICAL SYMBOL FOR ALKALI-2"));
        data.insert(std::make_pair(0x1f738,"ALCHEMICAL SYMBOL FOR MARCASITE"));
        data.insert(std::make_pair(0x1f739,"ALCHEMICAL SYMBOL FOR SAL-AMMONIAC"));
        data.insert(std::make_pair(0x1f73a,"ALCHEMICAL SYMBOL FOR ARSENIC"));
        data.insert(std::make_pair(0x1f73b,"ALCHEMICAL SYMBOL FOR REALGAR"));
        data.insert(std::make_pair(0x1f73c,"ALCHEMICAL SYMBOL FOR REALGAR-2"));
        data.insert(std::make_pair(0x1f73d,"ALCHEMICAL SYMBOL FOR AURIPIGMENT"));
        data.insert(std::make_pair(0x1f73e,"ALCHEMICAL SYMBOL FOR BISMUTH ORE"));
        data.insert(std::make_pair(0x1f73f,"ALCHEMICAL SYMBOL FOR TARTAR"));
        data.insert(std::make_pair(0x1f740,"ALCHEMICAL SYMBOL FOR TARTAR-2"));
        data.insert(std::make_pair(0x1f741,"ALCHEMICAL SYMBOL FOR QUICK LIME"));
        data.insert(std::make_pair(0x1f742,"ALCHEMICAL SYMBOL FOR BORAX"));
        data.insert(std::make_pair(0x1f743,"ALCHEMICAL SYMBOL FOR BORAX-2"));
        data.insert(std::make_pair(0x1f744,"ALCHEMICAL SYMBOL FOR BORAX-3"));
        data.insert(std::make_pair(0x1f745,"ALCHEMICAL SYMBOL FOR ALUM"));
        data.insert(std::make_pair(0x1f746,"ALCHEMICAL SYMBOL FOR OIL"));
        data.insert(std::make_pair(0x1f747,"ALCHEMICAL SYMBOL FOR SPIRIT"));
        data.insert(std::make_pair(0x1f748,"ALCHEMICAL SYMBOL FOR TINCTURE"));
        data.insert(std::make_pair(0x1f749,"ALCHEMICAL SYMBOL FOR GUM"));
        data.insert(std::make_pair(0x1f74a,"ALCHEMICAL SYMBOL FOR WAX"));
        data.insert(std::make_pair(0x1f74b,"ALCHEMICAL SYMBOL FOR POWDER"));
        data.insert(std::make_pair(0x1f74c,"ALCHEMICAL SYMBOL FOR CALX"));
        data.insert(std::make_pair(0x1f74d,"ALCHEMICAL SYMBOL FOR TUTTY"));
        data.insert(std::make_pair(0x1f74e,"ALCHEMICAL SYMBOL FOR CAPUT MORTUUM"));
        data.insert(std::make_pair(0x1f74f,"ALCHEMICAL SYMBOL FOR SCEPTER OF JOVE"));
        data.insert(std::make_pair(0x1f750,"ALCHEMICAL SYMBOL FOR CADUCEUS"));
        data.insert(std::make_pair(0x1f751,"ALCHEMICAL SYMBOL FOR TRIDENT"));
        data.insert(std::make_pair(0x1f752,"ALCHEMICAL SYMBOL FOR STARRED TRIDENT"));
        data.insert(std::make_pair(0x1f753,"ALCHEMICAL SYMBOL FOR LODESTONE"));
        data.insert(std::make_pair(0x1f754,"ALCHEMICAL SYMBOL FOR SOAP"));
        data.insert(std::make_pair(0x1f755,"ALCHEMICAL SYMBOL FOR URINE"));
        data.insert(std::make_pair(0x1f756,"ALCHEMICAL SYMBOL FOR HORSE DUNG"));
        data.insert(std::make_pair(0x1f757,"ALCHEMICAL SYMBOL FOR ASHES"));
        data.insert(std::make_pair(0x1f758,"ALCHEMICAL SYMBOL FOR POT ASHES"));
        data.insert(std::make_pair(0x1f759,"ALCHEMICAL SYMBOL FOR BRICK"));
        data.insert(std::make_pair(0x1f75a,"ALCHEMICAL SYMBOL FOR POWDERED BRICK"));
        data.insert(std::make_pair(0x1f75b,"ALCHEMICAL SYMBOL FOR AMALGAM"));
        data.insert(std::make_pair(0x1f75c,"ALCHEMICAL SYMBOL FOR STRATUM SUPER STRATUM"));
        data.insert(std::make_pair(0x1f75d,"ALCHEMICAL SYMBOL FOR STRATUM SUPER STRATUM-2"));
        data.insert(std::make_pair(0x1f75e,"ALCHEMICAL SYMBOL FOR SUBLIMATION"));
        data.insert(std::make_pair(0x1f75f,"ALCHEMICAL SYMBOL FOR PRECIPITATE"));
        data.insert(std::make_pair(0x1f760,"ALCHEMICAL SYMBOL FOR DISTILL"));
        data.insert(std::make_pair(0x1f761,"ALCHEMICAL SYMBOL FOR DISSOLVE"));
        data.insert(std::make_pair(0x1f762,"ALCHEMICAL SYMBOL FOR DISSOLVE-2"));
        data.insert(std::make_pair(0x1f763,"ALCHEMICAL SYMBOL FOR PURIFY"));
        data.insert(std::make_pair(0x1f764,"ALCHEMICAL SYMBOL FOR PUTREFACTION"));
        data.insert(std::make_pair(0x1f765,"ALCHEMICAL SYMBOL FOR CRUCIBLE"));
        data.insert(std::make_pair(0x1f766,"ALCHEMICAL SYMBOL FOR CRUCIBLE-2"));
        data.insert(std::make_pair(0x1f767,"ALCHEMICAL SYMBOL FOR CRUCIBLE-3"));
        data.insert(std::make_pair(0x1f768,"ALCHEMICAL SYMBOL FOR CRUCIBLE-4"));
        data.insert(std::make_pair(0x1f769,"ALCHEMICAL SYMBOL FOR CRUCIBLE-5"));
        data.insert(std::make_pair(0x1f76a,"ALCHEMICAL SYMBOL FOR ALEMBIC"));
        data.insert(std::make_pair(0x1f76b,"ALCHEMICAL SYMBOL FOR BATH OF MARY"));
        data.insert(std::make_pair(0x1f76c,"ALCHEMICAL SYMBOL FOR BATH OF VAPOURS"));
        data.insert(std::make_pair(0x1f76d,"ALCHEMICAL SYMBOL FOR RETORT"));
        data.insert(std::make_pair(0x1f76e,"ALCHEMICAL SYMBOL FOR HOUR"));
        data.insert(std::make_pair(0x1f76f,"ALCHEMICAL SYMBOL FOR NIGHT"));
        data.insert(std::make_pair(0x1f770,"ALCHEMICAL SYMBOL FOR DAY-NIGHT"));
        data.insert(std::make_pair(0x1f771,"ALCHEMICAL SYMBOL FOR MONTH"));
        data.insert(std::make_pair(0x1f772,"ALCHEMICAL SYMBOL FOR HALF DRAM"));
        data.insert(std::make_pair(0x1f773,"ALCHEMICAL SYMBOL FOR HALF OUNCE"));
        data.insert(std::make_pair(0x1f774,"LOT OF FORTUNE"));
        data.insert(std::make_pair(0x1f775,"OCCULTATION"));
        data.insert(std::make_pair(0x1f776,"LUNAR ECLIPSE"));
        data.insert(std::make_pair(0x1f77b,"HAUMEA"));
        data.insert(std::make_pair(0x1f77c,"MAKEMAKE"));
        data.insert(std::make_pair(0x1f77d,"GONGGONG"));
        data.insert(std::make_pair(0x1f77e,"QUAOAR"));
        data.insert(std::make_pair(0x1f77f,"ORCUS"));
        data.insert(std::make_pair(0x1f780,"BLACK LEFT-POINTING ISOSCELES RIGHT TRIANGLE"));
        data.insert(std::make_pair(0x1f781,"BLACK UP-POINTING ISOSCELES RIGHT TRIANGLE"));
        data.insert(std::make_pair(0x1f782,"BLACK RIGHT-POINTING ISOSCELES RIGHT TRIANGLE"));
        data.insert(std::make_pair(0x1f783,"BLACK DOWN-POINTING ISOSCELES RIGHT TRIANGLE"));
        data.insert(std::make_pair(0x1f784,"BLACK SLIGHTLY SMALL CIRCLE"));
        data.insert(std::make_pair(0x1f785,"MEDIUM BOLD WHITE CIRCLE"));
        data.insert(std::make_pair(0x1f786,"BOLD WHITE CIRCLE"));
        data.insert(std::make_pair(0x1f787,"HEAVY WHITE CIRCLE"));
        data.insert(std::make_pair(0x1f788,"VERY HEAVY WHITE CIRCLE"));
        data.insert(std::make_pair(0x1f789,"EXTREMELY HEAVY WHITE CIRCLE"));
        data.insert(std::make_pair(0x1f78a,"WHITE CIRCLE CONTAINING BLACK SMALL CIRCLE"));
        data.insert(std::make_pair(0x1f78b,"ROUND TARGET"));
        data.insert(std::make_pair(0x1f78c,"BLACK TINY SQUARE"));
        data.insert(std::make_pair(0x1f78d,"BLACK SLIGHTLY SMALL SQUARE"));
        data.insert(std::make_pair(0x1f78e,"LIGHT WHITE SQUARE"));
        data.insert(std::make_pair(0x1f78f,"MEDIUM WHITE SQUARE"));
        data.insert(std::make_pair(0x1f790,"BOLD WHITE SQUARE"));
        data.insert(std::make_pair(0x1f791,"HEAVY WHITE SQUARE"));
        data.insert(std::make_pair(0x1f792,"VERY HEAVY WHITE SQUARE"));
        data.insert(std::make_pair(0x1f793,"EXTREMELY HEAVY WHITE SQUARE"));
        data.insert(std::make_pair(0x1f794,"WHITE SQUARE CONTAINING BLACK VERY SMALL SQUARE"));
        data.insert(std::make_pair(0x1f795,"WHITE SQUARE CONTAINING BLACK MEDIUM SQUARE"));
        data.insert(std::make_pair(0x1f796,"SQUARE TARGET"));
        data.insert(std::make_pair(0x1f797,"BLACK TINY DIAMOND"));
        data.insert(std::make_pair(0x1f798,"BLACK VERY SMALL DIAMOND"));
        data.insert(std::make_pair(0x1f799,"BLACK MEDIUM SMALL DIAMOND"));
        data.insert(std::make_pair(0x1f79a,"WHITE DIAMOND CONTAINING BLACK VERY SMALL DIAMOND"));
        data.insert(std::make_pair(0x1f79b,"WHITE DIAMOND CONTAINING BLACK MEDIUM DIAMOND"));
        data.insert(std::make_pair(0x1f79c,"DIAMOND TARGET"));
        data.insert(std::make_pair(0x1f79d,"BLACK TINY LOZENGE"));
        data.insert(std::make_pair(0x1f79e,"BLACK VERY SMALL LOZENGE"));
        data.insert(std::make_pair(0x1f79f,"BLACK MEDIUM SMALL LOZENGE"));
        data.insert(std::make_pair(0x1f7a0,"WHITE LOZENGE CONTAINING BLACK SMALL LOZENGE"));
        data.insert(std::make_pair(0x1f7a1,"THIN GREEK CROSS"));
        data.insert(std::make_pair(0x1f7a2,"LIGHT GREEK CROSS"));
        data.insert(std::make_pair(0x1f7a3,"MEDIUM GREEK CROSS"));
        data.insert(std::make_pair(0x1f7a4,"BOLD GREEK CROSS"));
        data.insert(std::make_pair(0x1f7a5,"VERY BOLD GREEK CROSS"));
        data.insert(std::make_pair(0x1f7a6,"VERY HEAVY GREEK CROSS"));
        data.insert(std::make_pair(0x1f7a7,"EXTREMELY HEAVY GREEK CROSS"));
        data.insert(std::make_pair(0x1f7a8,"THIN SALTIRE"));
        data.insert(std::make_pair(0x1f7a9,"LIGHT SALTIRE"));
        data.insert(std::make_pair(0x1f7aa,"MEDIUM SALTIRE"));
        data.insert(std::make_pair(0x1f7ab,"BOLD SALTIRE"));
        data.insert(std::make_pair(0x1f7ac,"HEAVY SALTIRE"));
        data.insert(std::make_pair(0x1f7ad,"VERY HEAVY SALTIRE"));
        data.insert(std::make_pair(0x1f7ae,"EXTREMELY HEAVY SALTIRE"));
        data.insert(std::make_pair(0x1f7af,"LIGHT FIVE SPOKED ASTERISK"));
        data.insert(std::make_pair(0x1f7b0,"MEDIUM FIVE SPOKED ASTERISK"));
        data.insert(std::make_pair(0x1f7b1,"BOLD FIVE SPOKED ASTERISK"));
        data.insert(std::make_pair(0x1f7b2,"HEAVY FIVE SPOKED ASTERISK"));
        data.insert(std::make_pair(0x1f7b3,"VERY HEAVY FIVE SPOKED ASTERISK"));
        data.insert(std::make_pair(0x1f7b4,"EXTREMELY HEAVY FIVE SPOKED ASTERISK"));
        data.insert(std::make_pair(0x1f7b5,"LIGHT SIX SPOKED ASTERISK"));
        data.insert(std::make_pair(0x1f7b6,"MEDIUM SIX SPOKED ASTERISK"));
        data.insert(std::make_pair(0x1f7b7,"BOLD SIX SPOKED ASTERISK"));
        data.insert(std::make_pair(0x1f7b8,"HEAVY SIX SPOKED ASTERISK"));
        data.insert(std::make_pair(0x1f7b9,"VERY HEAVY SIX SPOKED ASTERISK"));
        data.insert(std::make_pair(0x1f7ba,"EXTREMELY HEAVY SIX SPOKED ASTERISK"));
        data.insert(std::make_pair(0x1f7bb,"LIGHT EIGHT SPOKED ASTERISK"));
        data.insert(std::make_pair(0x1f7bc,"MEDIUM EIGHT SPOKED ASTERISK"));
        data.insert(std::make_pair(0x1f7bd,"BOLD EIGHT SPOKED ASTERISK"));
        data.insert(std::make_pair(0x1f7be,"HEAVY EIGHT SPOKED ASTERISK"));
        data.insert(std::make_pair(0x1f7bf,"VERY HEAVY EIGHT SPOKED ASTERISK"));
        data.insert(std::make_pair(0x1f7c0,"LIGHT THREE POINTED BLACK STAR"));
        data.insert(std::make_pair(0x1f7c1,"MEDIUM THREE POINTED BLACK STAR"));
        data.insert(std::make_pair(0x1f7c2,"THREE POINTED BLACK STAR"));
        data.insert(std::make_pair(0x1f7c3,"MEDIUM THREE POINTED PINWHEEL STAR"));
        data.insert(std::make_pair(0x1f7c4,"LIGHT FOUR POINTED BLACK STAR"));
        data.insert(std::make_pair(0x1f7c5,"MEDIUM FOUR POINTED BLACK STAR"));
        data.insert(std::make_pair(0x1f7c6,"FOUR POINTED BLACK STAR"));
        data.insert(std::make_pair(0x1f7c7,"MEDIUM FOUR POINTED PINWHEEL STAR"));
        data.insert(std::make_pair(0x1f7c8,"REVERSE LIGHT FOUR POINTED PINWHEEL STAR"));
        data.insert(std::make_pair(0x1f7c9,"LIGHT FIVE POINTED BLACK STAR"));
        data.insert(std::make_pair(0x1f7ca,"HEAVY FIVE POINTED BLACK STAR"));
        data.insert(std::make_pair(0x1f7cb,"MEDIUM SIX POINTED BLACK STAR"));
        data.insert(std::make_pair(0x1f7cc,"HEAVY SIX POINTED BLACK STAR"));
        data.insert(std::make_pair(0x1f7cd,"SIX POINTED PINWHEEL STAR"));
        data.insert(std::make_pair(0x1f7ce,"MEDIUM EIGHT POINTED BLACK STAR"));
        data.insert(std::make_pair(0x1f7cf,"HEAVY EIGHT POINTED BLACK STAR"));
        data.insert(std::make_pair(0x1f7d0,"VERY HEAVY EIGHT POINTED BLACK STAR"));
        data.insert(std::make_pair(0x1f7d1,"HEAVY EIGHT POINTED PINWHEEL STAR"));
        data.insert(std::make_pair(0x1f7d2,"LIGHT TWELVE POINTED BLACK STAR"));
        data.insert(std::make_pair(0x1f7d3,"HEAVY TWELVE POINTED BLACK STAR"));
        data.insert(std::make_pair(0x1f7d4,"HEAVY TWELVE POINTED PINWHEEL STAR"));
        data.insert(std::make_pair(0x1f7d5,"CIRCLED TRIANGLE"));
        data.insert(std::make_pair(0x1f7d6,"NEGATIVE CIRCLED TRIANGLE"));
        data.insert(std::make_pair(0x1f7d7,"CIRCLED SQUARE"));
        data.insert(std::make_pair(0x1f7d8,"NEGATIVE CIRCLED SQUARE"));
        data.insert(std::make_pair(0x1f7d9,"NINE POINTED WHITE STAR"));
        data.insert(std::make_pair(0x1f7e0,"LARGE ORANGE CIRCLE"));
        data.insert(std::make_pair(0x1f7e1,"LARGE YELLOW CIRCLE"));
        data.insert(std::make_pair(0x1f7e2,"LARGE GREEN CIRCLE"));
        data.insert(std::make_pair(0x1f7e3,"LARGE PURPLE CIRCLE"));
        data.insert(std::make_pair(0x1f7e4,"LARGE BROWN CIRCLE"));
        data.insert(std::make_pair(0x1f7e5,"LARGE RED SQUARE"));
        data.insert(std::make_pair(0x1f7e6,"LARGE BLUE SQUARE"));
        data.insert(std::make_pair(0x1f7e7,"LARGE ORANGE SQUARE"));
        data.insert(std::make_pair(0x1f7e8,"LARGE YELLOW SQUARE"));
        data.insert(std::make_pair(0x1f7e9,"LARGE GREEN SQUARE"));
        data.insert(std::make_pair(0x1f7ea,"LARGE PURPLE SQUARE"));
        data.insert(std::make_pair(0x1f7eb,"LARGE BROWN SQUARE"));
        data.insert(std::make_pair(0x1f7f0,"HEAVY EQUALS SIGN"));
        data.insert(std::make_pair(0x1f800,"LEFTWARDS ARROW WITH SMALL TRIANGLE ARROWHEAD"));
        data.insert(std::make_pair(0x1f801,"UPWARDS ARROW WITH SMALL TRIANGLE ARROWHEAD"));
        data.insert(std::make_pair(0x1f802,"RIGHTWARDS ARROW WITH SMALL TRIANGLE ARROWHEAD"));
        data.insert(std::make_pair(0x1f803,"DOWNWARDS ARROW WITH SMALL TRIANGLE ARROWHEAD"));
        data.insert(std::make_pair(0x1f804,"LEFTWARDS ARROW WITH MEDIUM TRIANGLE ARROWHEAD"));
        data.insert(std::make_pair(0x1f805,"UPWARDS ARROW WITH MEDIUM TRIANGLE ARROWHEAD"));
        data.insert(std::make_pair(0x1f806,"RIGHTWARDS ARROW WITH MEDIUM TRIANGLE ARROWHEAD"));
        data.insert(std::make_pair(0x1f807,"DOWNWARDS ARROW WITH MEDIUM TRIANGLE ARROWHEAD"));
        data.insert(std::make_pair(0x1f808,"LEFTWARDS ARROW WITH LARGE TRIANGLE ARROWHEAD"));
        data.insert(std::make_pair(0x1f809,"UPWARDS ARROW WITH LARGE TRIANGLE ARROWHEAD"));
        data.insert(std::make_pair(0x1f80a,"RIGHTWARDS ARROW WITH LARGE TRIANGLE ARROWHEAD"));
        data.insert(std::make_pair(0x1f80b,"DOWNWARDS ARROW WITH LARGE TRIANGLE ARROWHEAD"));
        data.insert(std::make_pair(0x1f810,"LEFTWARDS ARROW WITH SMALL EQUILATERAL ARROWHEAD"));
        data.insert(std::make_pair(0x1f811,"UPWARDS ARROW WITH SMALL EQUILATERAL ARROWHEAD"));
        data.insert(std::make_pair(0x1f812,"RIGHTWARDS ARROW WITH SMALL EQUILATERAL ARROWHEAD"));
        data.insert(std::make_pair(0x1f813,"DOWNWARDS ARROW WITH SMALL EQUILATERAL ARROWHEAD"));
        data.insert(std::make_pair(0x1f814,"LEFTWARDS ARROW WITH EQUILATERAL ARROWHEAD"));
        data.insert(std::make_pair(0x1f815,"UPWARDS ARROW WITH EQUILATERAL ARROWHEAD"));
        data.insert(std::make_pair(0x1f816,"RIGHTWARDS ARROW WITH EQUILATERAL ARROWHEAD"));
        data.insert(std::make_pair(0x1f817,"DOWNWARDS ARROW WITH EQUILATERAL ARROWHEAD"));
        data.insert(std::make_pair(0x1f818,"HEAVY LEFTWARDS ARROW WITH EQUILATERAL ARROWHEAD"));
        data.insert(std::make_pair(0x1f819,"HEAVY UPWARDS ARROW WITH EQUILATERAL ARROWHEAD"));
        data.insert(std::make_pair(0x1f81a,"HEAVY RIGHTWARDS ARROW WITH EQUILATERAL ARROWHEAD"));
        data.insert(std::make_pair(0x1f81b,"HEAVY DOWNWARDS ARROW WITH EQUILATERAL ARROWHEAD"));
        data.insert(std::make_pair(0x1f81c,"HEAVY LEFTWARDS ARROW WITH LARGE EQUILATERAL ARROWHEAD"));
        data.insert(std::make_pair(0x1f81d,"HEAVY UPWARDS ARROW WITH LARGE EQUILATERAL ARROWHEAD"));
        data.insert(std::make_pair(0x1f81e,"HEAVY RIGHTWARDS ARROW WITH LARGE EQUILATERAL ARROWHEAD"));
        data.insert(std::make_pair(0x1f81f,"HEAVY DOWNWARDS ARROW WITH LARGE EQUILATERAL ARROWHEAD"));
        data.insert(std::make_pair(0x1f820,"LEFTWARDS TRIANGLE-HEADED ARROW WITH NARROW SHAFT"));
        data.insert(std::make_pair(0x1f821,"UPWARDS TRIANGLE-HEADED ARROW WITH NARROW SHAFT"));
        data.insert(std::make_pair(0x1f822,"RIGHTWARDS TRIANGLE-HEADED ARROW WITH NARROW SHAFT"));
        data.insert(std::make_pair(0x1f823,"DOWNWARDS TRIANGLE-HEADED ARROW WITH NARROW SHAFT"));
        data.insert(std::make_pair(0x1f824,"LEFTWARDS TRIANGLE-HEADED ARROW WITH MEDIUM SHAFT"));
        data.insert(std::make_pair(0x1f825,"UPWARDS TRIANGLE-HEADED ARROW WITH MEDIUM SHAFT"));
        data.insert(std::make_pair(0x1f826,"RIGHTWARDS TRIANGLE-HEADED ARROW WITH MEDIUM SHAFT"));
        data.insert(std::make_pair(0x1f827,"DOWNWARDS TRIANGLE-HEADED ARROW WITH MEDIUM SHAFT"));
        data.insert(std::make_pair(0x1f828,"LEFTWARDS TRIANGLE-HEADED ARROW WITH BOLD SHAFT"));
        data.insert(std::make_pair(0x1f829,"UPWARDS TRIANGLE-HEADED ARROW WITH BOLD SHAFT"));
        data.insert(std::make_pair(0x1f82a,"RIGHTWARDS TRIANGLE-HEADED ARROW WITH BOLD SHAFT"));
        data.insert(std::make_pair(0x1f82b,"DOWNWARDS TRIANGLE-HEADED ARROW WITH BOLD SHAFT"));
        data.insert(std::make_pair(0x1f82c,"LEFTWARDS TRIANGLE-HEADED ARROW WITH HEAVY SHAFT"));
        data.insert(std::make_pair(0x1f82d,"UPWARDS TRIANGLE-HEADED ARROW WITH HEAVY SHAFT"));
        data.insert(std::make_pair(0x1f82e,"RIGHTWARDS TRIANGLE-HEADED ARROW WITH HEAVY SHAFT"));
        data.insert(std::make_pair(0x1f82f,"DOWNWARDS TRIANGLE-HEADED ARROW WITH HEAVY SHAFT"));
        data.insert(std::make_pair(0x1f830,"LEFTWARDS TRIANGLE-HEADED ARROW WITH VERY HEAVY SHAFT"));
        data.insert(std::make_pair(0x1f831,"UPWARDS TRIANGLE-HEADED ARROW WITH VERY HEAVY SHAFT"));
        data.insert(std::make_pair(0x1f832,"RIGHTWARDS TRIANGLE-HEADED ARROW WITH VERY HEAVY SHAFT"));
        data.insert(std::make_pair(0x1f833,"DOWNWARDS TRIANGLE-HEADED ARROW WITH VERY HEAVY SHAFT"));
        data.insert(std::make_pair(0x1f834,"LEFTWARDS FINGER-POST ARROW"));
        data.insert(std::make_pair(0x1f835,"UPWARDS FINGER-POST ARROW"));
        data.insert(std::make_pair(0x1f836,"RIGHTWARDS FINGER-POST ARROW"));
        data.insert(std::make_pair(0x1f837,"DOWNWARDS FINGER-POST ARROW"));
        data.insert(std::make_pair(0x1f838,"LEFTWARDS SQUARED ARROW"));
        data.insert(std::make_pair(0x1f839,"UPWARDS SQUARED ARROW"));
        data.insert(std::make_pair(0x1f83a,"RIGHTWARDS SQUARED ARROW"));
        data.insert(std::make_pair(0x1f83b,"DOWNWARDS SQUARED ARROW"));
        data.insert(std::make_pair(0x1f83c,"LEFTWARDS COMPRESSED ARROW"));
        data.insert(std::make_pair(0x1f83d,"UPWARDS COMPRESSED ARROW"));
        data.insert(std::make_pair(0x1f83e,"RIGHTWARDS COMPRESSED ARROW"));
        data.insert(std::make_pair(0x1f83f,"DOWNWARDS COMPRESSED ARROW"));
        data.insert(std::make_pair(0x1f840,"LEFTWARDS HEAVY COMPRESSED ARROW"));
        data.insert(std::make_pair(0x1f841,"UPWARDS HEAVY COMPRESSED ARROW"));
        data.insert(std::make_pair(0x1f842,"RIGHTWARDS HEAVY COMPRESSED ARROW"));
        data.insert(std::make_pair(0x1f843,"DOWNWARDS HEAVY COMPRESSED ARROW"));
        data.insert(std::make_pair(0x1f844,"LEFTWARDS HEAVY ARROW"));
        data.insert(std::make_pair(0x1f845,"UPWARDS HEAVY ARROW"));
        data.insert(std::make_pair(0x1f846,"RIGHTWARDS HEAVY ARROW"));
        data.insert(std::make_pair(0x1f847,"DOWNWARDS HEAVY ARROW"));
        data.insert(std::make_pair(0x1f850,"LEFTWARDS SANS-SERIF ARROW"));
        data.insert(std::make_pair(0x1f851,"UPWARDS SANS-SERIF ARROW"));
        data.insert(std::make_pair(0x1f852,"RIGHTWARDS SANS-SERIF ARROW"));
        data.insert(std::make_pair(0x1f853,"DOWNWARDS SANS-SERIF ARROW"));
        data.insert(std::make_pair(0x1f854,"NORTH WEST SANS-SERIF ARROW"));
        data.insert(std::make_pair(0x1f855,"NORTH EAST SANS-SERIF ARROW"));
        data.insert(std::make_pair(0x1f856,"SOUTH EAST SANS-SERIF ARROW"));
        data.insert(std::make_pair(0x1f857,"SOUTH WEST SANS-SERIF ARROW"));
        data.insert(std::make_pair(0x1f858,"LEFT RIGHT SANS-SERIF ARROW"));
        data.insert(std::make_pair(0x1f859,"UP DOWN SANS-SERIF ARROW"));
        data.insert(std::make_pair(0x1f860,"WIDE-HEADED LEFTWARDS LIGHT BARB ARROW"));
        data.insert(std::make_pair(0x1f861,"WIDE-HEADED UPWARDS LIGHT BARB ARROW"));
        data.insert(std::make_pair(0x1f862,"WIDE-HEADED RIGHTWARDS LIGHT BARB ARROW"));
        data.insert(std::make_pair(0x1f863,"WIDE-HEADED DOWNWARDS LIGHT BARB ARROW"));
        data.insert(std::make_pair(0x1f864,"WIDE-HEADED NORTH WEST LIGHT BARB ARROW"));
        data.insert(std::make_pair(0x1f865,"WIDE-HEADED NORTH EAST LIGHT BARB ARROW"));
        data.insert(std::make_pair(0x1f866,"WIDE-HEADED SOUTH EAST LIGHT BARB ARROW"));
        data.insert(std::make_pair(0x1f867,"WIDE-HEADED SOUTH WEST LIGHT BARB ARROW"));
        data.insert(std::make_pair(0x1f868,"WIDE-HEADED LEFTWARDS BARB ARROW"));
        data.insert(std::make_pair(0x1f869,"WIDE-HEADED UPWARDS BARB ARROW"));
        data.insert(std::make_pair(0x1f86a,"WIDE-HEADED RIGHTWARDS BARB ARROW"));
        data.insert(std::make_pair(0x1f86b,"WIDE-HEADED DOWNWARDS BARB ARROW"));
        data.insert(std::make_pair(0x1f86c,"WIDE-HEADED NORTH WEST BARB ARROW"));
        data.insert(std::make_pair(0x1f86d,"WIDE-HEADED NORTH EAST BARB ARROW"));
        data.insert(std::make_pair(0x1f86e,"WIDE-HEADED SOUTH EAST BARB ARROW"));
        data.insert(std::make_pair(0x1f86f,"WIDE-HEADED SOUTH WEST BARB ARROW"));
        data.insert(std::make_pair(0x1f870,"WIDE-HEADED LEFTWARDS MEDIUM BARB ARROW"));
        data.insert(std::make_pair(0x1f871,"WIDE-HEADED UPWARDS MEDIUM BARB ARROW"));
        data.insert(std::make_pair(0x1f872,"WIDE-HEADED RIGHTWARDS MEDIUM BARB ARROW"));
        data.insert(std::make_pair(0x1f873,"WIDE-HEADED DOWNWARDS MEDIUM BARB ARROW"));
        data.insert(std::make_pair(0x1f874,"WIDE-HEADED NORTH WEST MEDIUM BARB ARROW"));
        data.insert(std::make_pair(0x1f875,"WIDE-HEADED NORTH EAST MEDIUM BARB ARROW"));
        data.insert(std::make_pair(0x1f876,"WIDE-HEADED SOUTH EAST MEDIUM BARB ARROW"));
        data.insert(std::make_pair(0x1f877,"WIDE-HEADED SOUTH WEST MEDIUM BARB ARROW"));
        data.insert(std::make_pair(0x1f878,"WIDE-HEADED LEFTWARDS HEAVY BARB ARROW"));
        data.insert(std::make_pair(0x1f879,"WIDE-HEADED UPWARDS HEAVY BARB ARROW"));
        data.insert(std::make_pair(0x1f87a,"WIDE-HEADED RIGHTWARDS HEAVY BARB ARROW"));
        data.insert(std::make_pair(0x1f87b,"WIDE-HEADED DOWNWARDS HEAVY BARB ARROW"));
        data.insert(std::make_pair(0x1f87c,"WIDE-HEADED NORTH WEST HEAVY BARB ARROW"));
        data.insert(std::make_pair(0x1f87d,"WIDE-HEADED NORTH EAST HEAVY BARB ARROW"));
        data.insert(std::make_pair(0x1f87e,"WIDE-HEADED SOUTH EAST HEAVY BARB ARROW"));
        data.insert(std::make_pair(0x1f87f,"WIDE-HEADED SOUTH WEST HEAVY BARB ARROW"));
        data.insert(std::make_pair(0x1f880,"WIDE-HEADED LEFTWARDS VERY HEAVY BARB ARROW"));
        data.insert(std::make_pair(0x1f881,"WIDE-HEADED UPWARDS VERY HEAVY BARB ARROW"));
        data.insert(std::make_pair(0x1f882,"WIDE-HEADED RIGHTWARDS VERY HEAVY BARB ARROW"));
        data.insert(std::make_pair(0x1f883,"WIDE-HEADED DOWNWARDS VERY HEAVY BARB ARROW"));
        data.insert(std::make_pair(0x1f884,"WIDE-HEADED NORTH WEST VERY HEAVY BARB ARROW"));
        data.insert(std::make_pair(0x1f885,"WIDE-HEADED NORTH EAST VERY HEAVY BARB ARROW"));
        data.insert(std::make_pair(0x1f886,"WIDE-HEADED SOUTH EAST VERY HEAVY BARB ARROW"));
        data.insert(std::make_pair(0x1f887,"WIDE-HEADED SOUTH WEST VERY HEAVY BARB ARROW"));
        data.insert(std::make_pair(0x1f890,"LEFTWARDS TRIANGLE ARROWHEAD"));
        data.insert(std::make_pair(0x1f891,"UPWARDS TRIANGLE ARROWHEAD"));
        data.insert(std::make_pair(0x1f892,"RIGHTWARDS TRIANGLE ARROWHEAD"));
        data.insert(std::make_pair(0x1f893,"DOWNWARDS TRIANGLE ARROWHEAD"));
        data.insert(std::make_pair(0x1f894,"LEFTWARDS WHITE ARROW WITHIN TRIANGLE ARROWHEAD"));
        data.insert(std::make_pair(0x1f895,"UPWARDS WHITE ARROW WITHIN TRIANGLE ARROWHEAD"));
        data.insert(std::make_pair(0x1f896,"RIGHTWARDS WHITE ARROW WITHIN TRIANGLE ARROWHEAD"));
        data.insert(std::make_pair(0x1f897,"DOWNWARDS WHITE ARROW WITHIN TRIANGLE ARROWHEAD"));
        data.insert(std::make_pair(0x1f898,"LEFTWARDS ARROW WITH NOTCHED TAIL"));
        data.insert(std::make_pair(0x1f899,"UPWARDS ARROW WITH NOTCHED TAIL"));
        data.insert(std::make_pair(0x1f89a,"RIGHTWARDS ARROW WITH NOTCHED TAIL"));
        data.insert(std::make_pair(0x1f89b,"DOWNWARDS ARROW WITH NOTCHED TAIL"));
        data.insert(std::make_pair(0x1f89c,"HEAVY ARROW SHAFT WIDTH ONE"));
        data.insert(std::make_pair(0x1f89d,"HEAVY ARROW SHAFT WIDTH TWO THIRDS"));
        data.insert(std::make_pair(0x1f89e,"HEAVY ARROW SHAFT WIDTH ONE HALF"));
        data.insert(std::make_pair(0x1f89f,"HEAVY ARROW SHAFT WIDTH ONE THIRD"));
        data.insert(std::make_pair(0x1f8a0,"LEFTWARDS BOTTOM-SHADED WHITE ARROW"));
        data.insert(std::make_pair(0x1f8a1,"RIGHTWARDS BOTTOM SHADED WHITE ARROW"));
        data.insert(std::make_pair(0x1f8a2,"LEFTWARDS TOP SHADED WHITE ARROW"));
        data.insert(std::make_pair(0x1f8a3,"RIGHTWARDS TOP SHADED WHITE ARROW"));
        data.insert(std::make_pair(0x1f8a4,"LEFTWARDS LEFT-SHADED WHITE ARROW"));
        data.insert(std::make_pair(0x1f8a5,"RIGHTWARDS RIGHT-SHADED WHITE ARROW"));
        data.insert(std::make_pair(0x1f8a6,"LEFTWARDS RIGHT-SHADED WHITE ARROW"));
        data.insert(std::make_pair(0x1f8a7,"RIGHTWARDS LEFT-SHADED WHITE ARROW"));
        data.insert(std::make_pair(0x1f8a8,"LEFTWARDS BACK-TILTED SHADOWED WHITE ARROW"));
        data.insert(std::make_pair(0x1f8a9,"RIGHTWARDS BACK-TILTED SHADOWED WHITE ARROW"));
        data.insert(std::make_pair(0x1f8aa,"LEFTWARDS FRONT-TILTED SHADOWED WHITE ARROW"));
        data.insert(std::make_pair(0x1f8ab,"RIGHTWARDS FRONT-TILTED SHADOWED WHITE ARROW"));
        data.insert(std::make_pair(0x1f8ac,"WHITE ARROW SHAFT WIDTH ONE"));
        data.insert(std::make_pair(0x1f8ad,"WHITE ARROW SHAFT WIDTH TWO THIRDS"));
        data.insert(std::make_pair(0x1f8b0,"ARROW POINTING UPWARDS THEN NORTH WEST"));
        data.insert(std::make_pair(0x1f8b1,"ARROW POINTING RIGHTWARDS THEN CURVING SOUTH WEST"));
        data.insert(std::make_pair(0x1f900,"CIRCLED CROSS FORMEE WITH FOUR DOTS"));
        data.insert(std::make_pair(0x1f901,"CIRCLED CROSS FORMEE WITH TWO DOTS"));
        data.insert(std::make_pair(0x1f902,"CIRCLED CROSS FORMEE"));
        data.insert(std::make_pair(0x1f903,"LEFT HALF CIRCLE WITH FOUR DOTS"));
        data.insert(std::make_pair(0x1f904,"LEFT HALF CIRCLE WITH THREE DOTS"));
        data.insert(std::make_pair(0x1f905,"LEFT HALF CIRCLE WITH TWO DOTS"));
        data.insert(std::make_pair(0x1f906,"LEFT HALF CIRCLE WITH DOT"));
        data.insert(std::make_pair(0x1f907,"LEFT HALF CIRCLE"));
        data.insert(std::make_pair(0x1f908,"DOWNWARD FACING HOOK"));
        data.insert(std::make_pair(0x1f909,"DOWNWARD FACING NOTCHED HOOK"));
        data.insert(std::make_pair(0x1f90a,"DOWNWARD FACING HOOK WITH DOT"));
        data.insert(std::make_pair(0x1f90b,"DOWNWARD FACING NOTCHED HOOK WITH DOT"));
        data.insert(std::make_pair(0x1f90c,"PINCHED FINGERS"));
        data.insert(std::make_pair(0x1f90d,"WHITE HEART"));
        data.insert(std::make_pair(0x1f90e,"BROWN HEART"));
        data.insert(std::make_pair(0x1f90f,"PINCHING HAND"));
        data.insert(std::make_pair(0x1f910,"ZIPPER-MOUTH FACE"));
        data.insert(std::make_pair(0x1f911,"MONEY-MOUTH FACE"));
        data.insert(std::make_pair(0x1f912,"FACE WITH THERMOMETER"));
        data.insert(std::make_pair(0x1f913,"NERD FACE"));
        data.insert(std::make_pair(0x1f914,"THINKING FACE"));
        data.insert(std::make_pair(0x1f915,"FACE WITH HEAD-BANDAGE"));
        data.insert(std::make_pair(0x1f916,"ROBOT FACE"));
        data.insert(std::make_pair(0x1f917,"HUGGING FACE"));
        data.insert(std::make_pair(0x1f918,"SIGN OF THE HORNS"));
        data.insert(std::make_pair(0x1f919,"CALL ME HAND"));
        data.insert(std::make_pair(0x1f91a,"RAISED BACK OF HAND"));
        data.insert(std::make_pair(0x1f91b,"LEFT-FACING FIST"));
        data.insert(std::make_pair(0x1f91c,"RIGHT-FACING FIST"));
        data.insert(std::make_pair(0x1f91d,"HANDSHAKE"));
        data.insert(std::make_pair(0x1f91e,"HAND WITH INDEX AND MIDDLE FINGERS CROSSED"));
        data.insert(std::make_pair(0x1f91f,"I LOVE YOU HAND SIGN"));
        data.insert(std::make_pair(0x1f920,"FACE WITH COWBOY HAT"));
        data.insert(std::make_pair(0x1f921,"CLOWN FACE"));
        data.insert(std::make_pair(0x1f922,"NAUSEATED FACE"));
        data.insert(std::make_pair(0x1f923,"ROLLING ON THE FLOOR LAUGHING"));
        data.insert(std::make_pair(0x1f924,"DROOLING FACE"));
        data.insert(std::make_pair(0x1f925,"LYING FACE"));
        data.insert(std::make_pair(0x1f926,"FACE PALM"));
        data.insert(std::make_pair(0x1f927,"SNEEZING FACE"));
        data.insert(std::make_pair(0x1f928,"FACE WITH ONE EYEBROW RAISED"));
        data.insert(std::make_pair(0x1f929,"GRINNING FACE WITH STAR EYES"));
        data.insert(std::make_pair(0x1f92a,"GRINNING FACE WITH ONE LARGE AND ONE SMALL EYE"));
        data.insert(std::make_pair(0x1f92b,"FACE WITH FINGER COVERING CLOSED LIPS"));
        data.insert(std::make_pair(0x1f92c,"SERIOUS FACE WITH SYMBOLS COVERING MOUTH"));
        data.insert(std::make_pair(0x1f92d,"SMILING FACE WITH SMILING EYES AND HAND COVERING MOUTH"));
        data.insert(std::make_pair(0x1f92e,"FACE WITH OPEN MOUTH VOMITING"));
        data.insert(std::make_pair(0x1f92f,"SHOCKED FACE WITH EXPLODING HEAD"));
        data.insert(std::make_pair(0x1f930,"PREGNANT WOMAN"));
        data.insert(std::make_pair(0x1f931,"BREAST-FEEDING"));
        data.insert(std::make_pair(0x1f932,"PALMS UP TOGETHER"));
        data.insert(std::make_pair(0x1f933,"SELFIE"));
        data.insert(std::make_pair(0x1f934,"PRINCE"));
        data.insert(std::make_pair(0x1f935,"MAN IN TUXEDO"));
        data.insert(std::make_pair(0x1f936,"MOTHER CHRISTMAS"));
        data.insert(std::make_pair(0x1f937,"SHRUG"));
        data.insert(std::make_pair(0x1f938,"PERSON DOING CARTWHEEL"));
        data.insert(std::make_pair(0x1f939,"JUGGLING"));
        data.insert(std::make_pair(0x1f93a,"FENCER"));
        data.insert(std::make_pair(0x1f93b,"MODERN PENTATHLON"));
        data.insert(std::make_pair(0x1f93c,"WRESTLERS"));
        data.insert(std::make_pair(0x1f93d,"WATER POLO"));
        data.insert(std::make_pair(0x1f93e,"HANDBALL"));
        data.insert(std::make_pair(0x1f93f,"DIVING MASK"));
        data.insert(std::make_pair(0x1f940,"WILTED FLOWER"));
        data.insert(std::make_pair(0x1f941,"DRUM WITH DRUMSTICKS"));
        data.insert(std::make_pair(0x1f942,"CLINKING GLASSES"));
        data.insert(std::make_pair(0x1f943,"TUMBLER GLASS"));
        data.insert(std::make_pair(0x1f944,"SPOON"));
        data.insert(std::make_pair(0x1f945,"GOAL NET"));
        data.insert(std::make_pair(0x1f946,"RIFLE"));
        data.insert(std::make_pair(0x1f947,"FIRST PLACE MEDAL"));
        data.insert(std::make_pair(0x1f948,"SECOND PLACE MEDAL"));
        data.insert(std::make_pair(0x1f949,"THIRD PLACE MEDAL"));
        data.insert(std::make_pair(0x1f94a,"BOXING GLOVE"));
        data.insert(std::make_pair(0x1f94b,"MARTIAL ARTS UNIFORM"));
        data.insert(std::make_pair(0x1f94c,"CURLING STONE"));
        data.insert(std::make_pair(0x1f94d,"LACROSSE STICK AND BALL"));
        data.insert(std::make_pair(0x1f94e,"SOFTBALL"));
        data.insert(std::make_pair(0x1f94f,"FLYING DISC"));
        data.insert(std::make_pair(0x1f950,"CROISSANT"));
        data.insert(std::make_pair(0x1f951,"AVOCADO"));
        data.insert(std::make_pair(0x1f952,"CUCUMBER"));
        data.insert(std::make_pair(0x1f953,"BACON"));
        data.insert(std::make_pair(0x1f954,"POTATO"));
        data.insert(std::make_pair(0x1f955,"CARROT"));
        data.insert(std::make_pair(0x1f956,"BAGUETTE BREAD"));
        data.insert(std::make_pair(0x1f957,"GREEN SALAD"));
        data.insert(std::make_pair(0x1f958,"SHALLOW PAN OF FOOD"));
        data.insert(std::make_pair(0x1f959,"STUFFED FLATBREAD"));
        data.insert(std::make_pair(0x1f95a,"EGG"));
        data.insert(std::make_pair(0x1f95b,"GLASS OF MILK"));
        data.insert(std::make_pair(0x1f95c,"PEANUTS"));
        data.insert(std::make_pair(0x1f95d,"KIWIFRUIT"));
        data.insert(std::make_pair(0x1f95e,"PANCAKES"));
        data.insert(std::make_pair(0x1f95f,"DUMPLING"));
        data.insert(std::make_pair(0x1f960,"FORTUNE COOKIE"));
        data.insert(std::make_pair(0x1f961,"TAKEOUT BOX"));
        data.insert(std::make_pair(0x1f962,"CHOPSTICKS"));
        data.insert(std::make_pair(0x1f963,"BOWL WITH SPOON"));
        data.insert(std::make_pair(0x1f964,"CUP WITH STRAW"));
        data.insert(std::make_pair(0x1f965,"COCONUT"));
        data.insert(std::make_pair(0x1f966,"BROCCOLI"));
        data.insert(std::make_pair(0x1f967,"PIE"));
        data.insert(std::make_pair(0x1f968,"PRETZEL"));
        data.insert(std::make_pair(0x1f969,"CUT OF MEAT"));
        data.insert(std::make_pair(0x1f96a,"SANDWICH"));
        data.insert(std::make_pair(0x1f96b,"CANNED FOOD"));
        data.insert(std::make_pair(0x1f96c,"LEAFY GREEN"));
        data.insert(std::make_pair(0x1f96d,"MANGO"));
        data.insert(std::make_pair(0x1f96e,"MOON CAKE"));
        data.insert(std::make_pair(0x1f96f,"BAGEL"));
        data.insert(std::make_pair(0x1f970,"SMILING FACE WITH SMILING EYES AND THREE HEARTS"));
        data.insert(std::make_pair(0x1f971,"YAWNING FACE"));
        data.insert(std::make_pair(0x1f972,"SMILING FACE WITH TEAR"));
        data.insert(std::make_pair(0x1f973,"FACE WITH PARTY HORN AND PARTY HAT"));
        data.insert(std::make_pair(0x1f974,"FACE WITH UNEVEN EYES AND WAVY MOUTH"));
        data.insert(std::make_pair(0x1f975,"OVERHEATED FACE"));
        data.insert(std::make_pair(0x1f976,"FREEZING FACE"));
        data.insert(std::make_pair(0x1f977,"NINJA"));
        data.insert(std::make_pair(0x1f978,"DISGUISED FACE"));
        data.insert(std::make_pair(0x1f979,"FACE HOLDING BACK TEARS"));
        data.insert(std::make_pair(0x1f97a,"FACE WITH PLEADING EYES"));
        data.insert(std::make_pair(0x1f97b,"SARI"));
        data.insert(std::make_pair(0x1f97c,"LAB COAT"));
        data.insert(std::make_pair(0x1f97d,"GOGGLES"));
        data.insert(std::make_pair(0x1f97e,"HIKING BOOT"));
        data.insert(std::make_pair(0x1f97f,"FLAT SHOE"));
        data.insert(std::make_pair(0x1f980,"CRAB"));
        data.insert(std::make_pair(0x1f981,"LION FACE"));
        data.insert(std::make_pair(0x1f982,"SCORPION"));
        data.insert(std::make_pair(0x1f983,"TURKEY"));
        data.insert(std::make_pair(0x1f984,"UNICORN FACE"));
        data.insert(std::make_pair(0x1f985,"EAGLE"));
        data.insert(std::make_pair(0x1f986,"DUCK"));
        data.insert(std::make_pair(0x1f987,"BAT"));
        data.insert(std::make_pair(0x1f988,"SHARK"));
        data.insert(std::make_pair(0x1f989,"OWL"));
        data.insert(std::make_pair(0x1f98a,"FOX FACE"));
        data.insert(std::make_pair(0x1f98b,"BUTTERFLY"));
        data.insert(std::make_pair(0x1f98c,"DEER"));
        data.insert(std::make_pair(0x1f98d,"GORILLA"));
        data.insert(std::make_pair(0x1f98e,"LIZARD"));
        data.insert(std::make_pair(0x1f98f,"RHINOCEROS"));
        data.insert(std::make_pair(0x1f990,"SHRIMP"));
        data.insert(std::make_pair(0x1f991,"SQUID"));
        data.insert(std::make_pair(0x1f992,"GIRAFFE FACE"));
        data.insert(std::make_pair(0x1f993,"ZEBRA FACE"));
        data.insert(std::make_pair(0x1f994,"HEDGEHOG"));
        data.insert(std::make_pair(0x1f995,"SAUROPOD"));
        data.insert(std::make_pair(0x1f996,"T-REX"));
        data.insert(std::make_pair(0x1f997,"CRICKET"));
        data.insert(std::make_pair(0x1f998,"KANGAROO"));
        data.insert(std::make_pair(0x1f999,"LLAMA"));
        data.insert(std::make_pair(0x1f99a,"PEACOCK"));
        data.insert(std::make_pair(0x1f99b,"HIPPOPOTAMUS"));
        data.insert(std::make_pair(0x1f99c,"PARROT"));
        data.insert(std::make_pair(0x1f99d,"RACCOON"));
        data.insert(std::make_pair(0x1f99e,"LOBSTER"));
        data.insert(std::make_pair(0x1f99f,"MOSQUITO"));
        data.insert(std::make_pair(0x1f9a0,"MICROBE"));
        data.insert(std::make_pair(0x1f9a1,"BADGER"));
        data.insert(std::make_pair(0x1f9a2,"SWAN"));
        data.insert(std::make_pair(0x1f9a3,"MAMMOTH"));
        data.insert(std::make_pair(0x1f9a4,"DODO"));
        data.insert(std::make_pair(0x1f9a5,"SLOTH"));
        data.insert(std::make_pair(0x1f9a6,"OTTER"));
        data.insert(std::make_pair(0x1f9a7,"ORANGUTAN"));
        data.insert(std::make_pair(0x1f9a8,"SKUNK"));
        data.insert(std::make_pair(0x1f9a9,"FLAMINGO"));
        data.insert(std::make_pair(0x1f9aa,"OYSTER"));
        data.insert(std::make_pair(0x1f9ab,"BEAVER"));
        data.insert(std::make_pair(0x1f9ac,"BISON"));
        data.insert(std::make_pair(0x1f9ad,"SEAL"));
        data.insert(std::make_pair(0x1f9ae,"GUIDE DOG"));
        data.insert(std::make_pair(0x1f9af,"PROBING CANE"));
        data.insert(std::make_pair(0x1f9b0,"EMOJI COMPONENT RED HAIR"));
        data.insert(std::make_pair(0x1f9b1,"EMOJI COMPONENT CURLY HAIR"));
        data.insert(std::make_pair(0x1f9b2,"EMOJI COMPONENT BALD"));
        data.insert(std::make_pair(0x1f9b3,"EMOJI COMPONENT WHITE HAIR"));
        data.insert(std::make_pair(0x1f9b4,"BONE"));
        data.insert(std::make_pair(0x1f9b5,"LEG"));
        data.insert(std::make_pair(0x1f9b6,"FOOT"));
        data.insert(std::make_pair(0x1f9b7,"TOOTH"));
        data.insert(std::make_pair(0x1f9b8,"SUPERHERO"));
        data.insert(std::make_pair(0x1f9b9,"SUPERVILLAIN"));
        data.insert(std::make_pair(0x1f9ba,"SAFETY VEST"));
        data.insert(std::make_pair(0x1f9bb,"EAR WITH HEARING AID"));
        data.insert(std::make_pair(0x1f9bc,"MOTORIZED WHEELCHAIR"));
        data.insert(std::make_pair(0x1f9bd,"MANUAL WHEELCHAIR"));
        data.insert(std::make_pair(0x1f9be,"MECHANICAL ARM"));
        data.insert(std::make_pair(0x1f9bf,"MECHANICAL LEG"));
        data.insert(std::make_pair(0x1f9c0,"CHEESE WEDGE"));
        data.insert(std::make_pair(0x1f9c1,"CUPCAKE"));
        data.insert(std::make_pair(0x1f9c2,"SALT SHAKER"));
        data.insert(std::make_pair(0x1f9c3,"BEVERAGE BOX"));
        data.insert(std::make_pair(0x1f9c4,"GARLIC"));
        data.insert(std::make_pair(0x1f9c5,"ONION"));
        data.insert(std::make_pair(0x1f9c6,"FALAFEL"));
        data.insert(std::make_pair(0x1f9c7,"WAFFLE"));
        data.insert(std::make_pair(0x1f9c8,"BUTTER"));
        data.insert(std::make_pair(0x1f9c9,"MATE DRINK"));
        data.insert(std::make_pair(0x1f9ca,"ICE CUBE"));
        data.insert(std::make_pair(0x1f9cb,"BUBBLE TEA"));
        data.insert(std::make_pair(0x1f9cc,"TROLL"));
        data.insert(std::make_pair(0x1f9cd,"STANDING PERSON"));
        data.insert(std::make_pair(0x1f9ce,"KNEELING PERSON"));
        data.insert(std::make_pair(0x1f9cf,"DEAF PERSON"));
        data.insert(std::make_pair(0x1f9d0,"FACE WITH MONOCLE"));
        data.insert(std::make_pair(0x1f9d1,"ADULT"));
        data.insert(std::make_pair(0x1f9d2,"CHILD"));
        data.insert(std::make_pair(0x1f9d3,"OLDER ADULT"));
        data.insert(std::make_pair(0x1f9d4,"BEARDED PERSON"));
        data.insert(std::make_pair(0x1f9d5,"PERSON WITH HEADSCARF"));
        data.insert(std::make_pair(0x1f9d6,"PERSON IN STEAMY ROOM"));
        data.insert(std::make_pair(0x1f9d7,"PERSON CLIMBING"));
        data.insert(std::make_pair(0x1f9d8,"PERSON IN LOTUS POSITION"));
        data.insert(std::make_pair(0x1f9d9,"MAGE"));
        data.insert(std::make_pair(0x1f9da,"FAIRY"));
        data.insert(std::make_pair(0x1f9db,"VAMPIRE"));
        data.insert(std::make_pair(0x1f9dc,"MERPERSON"));
        data.insert(std::make_pair(0x1f9dd,"ELF"));
        data.insert(std::make_pair(0x1f9de,"GENIE"));
        data.insert(std::make_pair(0x1f9df,"ZOMBIE"));
        data.insert(std::make_pair(0x1f9e0,"BRAIN"));
        data.insert(std::make_pair(0x1f9e1,"ORANGE HEART"));
        data.insert(std::make_pair(0x1f9e2,"BILLED CAP"));
        data.insert(std::make_pair(0x1f9e3,"SCARF"));
        data.insert(std::make_pair(0x1f9e4,"GLOVES"));
        data.insert(std::make_pair(0x1f9e5,"COAT"));
        data.insert(std::make_pair(0x1f9e6,"SOCKS"));
        data.insert(std::make_pair(0x1f9e7,"RED GIFT ENVELOPE"));
        data.insert(std::make_pair(0x1f9e8,"FIRECRACKER"));
        data.insert(std::make_pair(0x1f9e9,"JIGSAW PUZZLE PIECE"));
        data.insert(std::make_pair(0x1f9ea,"TEST TUBE"));
        data.insert(std::make_pair(0x1f9eb,"PETRI DISH"));
        data.insert(std::make_pair(0x1f9ec,"DNA DOUBLE HELIX"));
        data.insert(std::make_pair(0x1f9ed,"COMPASS"));
        data.insert(std::make_pair(0x1f9ee,"ABACUS"));
        data.insert(std::make_pair(0x1f9ef,"FIRE EXTINGUISHER"));
        data.insert(std::make_pair(0x1f9f0,"TOOLBOX"));
        data.insert(std::make_pair(0x1f9f1,"BRICK"));
        data.insert(std::make_pair(0x1f9f2,"MAGNET"));
        data.insert(std::make_pair(0x1f9f3,"LUGGAGE"));
        data.insert(std::make_pair(0x1f9f4,"LOTION BOTTLE"));
        data.insert(std::make_pair(0x1f9f5,"SPOOL OF THREAD"));
        data.insert(std::make_pair(0x1f9f6,"BALL OF YARN"));
        data.insert(std::make_pair(0x1f9f7,"SAFETY PIN"));
        data.insert(std::make_pair(0x1f9f8,"TEDDY BEAR"));
        data.insert(std::make_pair(0x1f9f9,"BROOM"));
        data.insert(std::make_pair(0x1f9fa,"BASKET"));
        data.insert(std::make_pair(0x1f9fb,"ROLL OF PAPER"));
        data.insert(std::make_pair(0x1f9fc,"BAR OF SOAP"));
        data.insert(std::make_pair(0x1f9fd,"SPONGE"));
        data.insert(std::make_pair(0x1f9fe,"RECEIPT"));
        data.insert(std::make_pair(0x1f9ff,"NAZAR AMULET"));
        data.insert(std::make_pair(0x1fa00,"NEUTRAL CHESS KING"));
        data.insert(std::make_pair(0x1fa01,"NEUTRAL CHESS QUEEN"));
        data.insert(std::make_pair(0x1fa02,"NEUTRAL CHESS ROOK"));
        data.insert(std::make_pair(0x1fa03,"NEUTRAL CHESS BISHOP"));
        data.insert(std::make_pair(0x1fa04,"NEUTRAL CHESS KNIGHT"));
        data.insert(std::make_pair(0x1fa05,"NEUTRAL CHESS PAWN"));
        data.insert(std::make_pair(0x1fa06,"WHITE CHESS KNIGHT ROTATED FORTY-FIVE DEGREES"));
        data.insert(std::make_pair(0x1fa07,"BLACK CHESS KNIGHT ROTATED FORTY-FIVE DEGREES"));
        data.insert(std::make_pair(0x1fa08,"NEUTRAL CHESS KNIGHT ROTATED FORTY-FIVE DEGREES"));
        data.insert(std::make_pair(0x1fa09,"WHITE CHESS KING ROTATED NINETY DEGREES"));
        data.insert(std::make_pair(0x1fa0a,"WHITE CHESS QUEEN ROTATED NINETY DEGREES"));
        data.insert(std::make_pair(0x1fa0b,"WHITE CHESS ROOK ROTATED NINETY DEGREES"));
        data.insert(std::make_pair(0x1fa0c,"WHITE CHESS BISHOP ROTATED NINETY DEGREES"));
        data.insert(std::make_pair(0x1fa0d,"WHITE CHESS KNIGHT ROTATED NINETY DEGREES"));
        data.insert(std::make_pair(0x1fa0e,"WHITE CHESS PAWN ROTATED NINETY DEGREES"));
        data.insert(std::make_pair(0x1fa0f,"BLACK CHESS KING ROTATED NINETY DEGREES"));
        data.insert(std::make_pair(0x1fa10,"BLACK CHESS QUEEN ROTATED NINETY DEGREES"));
        data.insert(std::make_pair(0x1fa11,"BLACK CHESS ROOK ROTATED NINETY DEGREES"));
        data.insert(std::make_pair(0x1fa12,"BLACK CHESS BISHOP ROTATED NINETY DEGREES"));
        data.insert(std::make_pair(0x1fa13,"BLACK CHESS KNIGHT ROTATED NINETY DEGREES"));
        data.insert(std::make_pair(0x1fa14,"BLACK CHESS PAWN ROTATED NINETY DEGREES"));
        data.insert(std::make_pair(0x1fa15,"NEUTRAL CHESS KING ROTATED NINETY DEGREES"));
        data.insert(std::make_pair(0x1fa16,"NEUTRAL CHESS QUEEN ROTATED NINETY DEGREES"));
        data.insert(std::make_pair(0x1fa17,"NEUTRAL CHESS ROOK ROTATED NINETY DEGREES"));
        data.insert(std::make_pair(0x1fa18,"NEUTRAL CHESS BISHOP ROTATED NINETY DEGREES"));
        data.insert(std::make_pair(0x1fa19,"NEUTRAL CHESS KNIGHT ROTATED NINETY DEGREES"));
        data.insert(std::make_pair(0x1fa1a,"NEUTRAL CHESS PAWN ROTATED NINETY DEGREES"));
        data.insert(std::make_pair(0x1fa1b,"WHITE CHESS KNIGHT ROTATED ONE HUNDRED THIRTY-FIVE DEGREES"));
        data.insert(std::make_pair(0x1fa1c,"BLACK CHESS KNIGHT ROTATED ONE HUNDRED THIRTY-FIVE DEGREES"));
        data.insert(std::make_pair(0x1fa1d,"NEUTRAL CHESS KNIGHT ROTATED ONE HUNDRED THIRTY-FIVE DEGREES"));
        data.insert(std::make_pair(0x1fa1e,"WHITE CHESS TURNED KING"));
        data.insert(std::make_pair(0x1fa1f,"WHITE CHESS TURNED QUEEN"));
        data.insert(std::make_pair(0x1fa20,"WHITE CHESS TURNED ROOK"));
        data.insert(std::make_pair(0x1fa21,"WHITE CHESS TURNED BISHOP"));
        data.insert(std::make_pair(0x1fa22,"WHITE CHESS TURNED KNIGHT"));
        data.insert(std::make_pair(0x1fa23,"WHITE CHESS TURNED PAWN"));
        data.insert(std::make_pair(0x1fa24,"BLACK CHESS TURNED KING"));
        data.insert(std::make_pair(0x1fa25,"BLACK CHESS TURNED QUEEN"));
        data.insert(std::make_pair(0x1fa26,"BLACK CHESS TURNED ROOK"));
        data.insert(std::make_pair(0x1fa27,"BLACK CHESS TURNED BISHOP"));
        data.insert(std::make_pair(0x1fa28,"BLACK CHESS TURNED KNIGHT"));
        data.insert(std::make_pair(0x1fa29,"BLACK CHESS TURNED PAWN"));
        data.insert(std::make_pair(0x1fa2a,"NEUTRAL CHESS TURNED KING"));
        data.insert(std::make_pair(0x1fa2b,"NEUTRAL CHESS TURNED QUEEN"));
        data.insert(std::make_pair(0x1fa2c,"NEUTRAL CHESS TURNED ROOK"));
        data.insert(std::make_pair(0x1fa2d,"NEUTRAL CHESS TURNED BISHOP"));
        data.insert(std::make_pair(0x1fa2e,"NEUTRAL CHESS TURNED KNIGHT"));
        data.insert(std::make_pair(0x1fa2f,"NEUTRAL CHESS TURNED PAWN"));
        data.insert(std::make_pair(0x1fa30,"WHITE CHESS KNIGHT ROTATED TWO HUNDRED TWENTY-FIVE DEGREES"));
        data.insert(std::make_pair(0x1fa31,"BLACK CHESS KNIGHT ROTATED TWO HUNDRED TWENTY-FIVE DEGREES"));
        data.insert(std::make_pair(0x1fa32,"NEUTRAL CHESS KNIGHT ROTATED TWO HUNDRED TWENTY-FIVE DEGREES"));
        data.insert(std::make_pair(0x1fa33,"WHITE CHESS KING ROTATED TWO HUNDRED SEVENTY DEGREES"));
        data.insert(std::make_pair(0x1fa34,"WHITE CHESS QUEEN ROTATED TWO HUNDRED SEVENTY DEGREES"));
        data.insert(std::make_pair(0x1fa35,"WHITE CHESS ROOK ROTATED TWO HUNDRED SEVENTY DEGREES"));
        data.insert(std::make_pair(0x1fa36,"WHITE CHESS BISHOP ROTATED TWO HUNDRED SEVENTY DEGREES"));
        data.insert(std::make_pair(0x1fa37,"WHITE CHESS KNIGHT ROTATED TWO HUNDRED SEVENTY DEGREES"));
        data.insert(std::make_pair(0x1fa38,"WHITE CHESS PAWN ROTATED TWO HUNDRED SEVENTY DEGREES"));
        data.insert(std::make_pair(0x1fa39,"BLACK CHESS KING ROTATED TWO HUNDRED SEVENTY DEGREES"));
        data.insert(std::make_pair(0x1fa3a,"BLACK CHESS QUEEN ROTATED TWO HUNDRED SEVENTY DEGREES"));
        data.insert(std::make_pair(0x1fa3b,"BLACK CHESS ROOK ROTATED TWO HUNDRED SEVENTY DEGREES"));
        data.insert(std::make_pair(0x1fa3c,"BLACK CHESS BISHOP ROTATED TWO HUNDRED SEVENTY DEGREES"));
        data.insert(std::make_pair(0x1fa3d,"BLACK CHESS KNIGHT ROTATED TWO HUNDRED SEVENTY DEGREES"));
        data.insert(std::make_pair(0x1fa3e,"BLACK CHESS PAWN ROTATED TWO HUNDRED SEVENTY DEGREES"));
        data.insert(std::make_pair(0x1fa3f,"NEUTRAL CHESS KING ROTATED TWO HUNDRED SEVENTY DEGREES"));
        data.insert(std::make_pair(0x1fa40,"NEUTRAL CHESS QUEEN ROTATED TWO HUNDRED SEVENTY DEGREES"));
        data.insert(std::make_pair(0x1fa41,"NEUTRAL CHESS ROOK ROTATED TWO HUNDRED SEVENTY DEGREES"));
        data.insert(std::make_pair(0x1fa42,"NEUTRAL CHESS BISHOP ROTATED TWO HUNDRED SEVENTY DEGREES"));
        data.insert(std::make_pair(0x1fa43,"NEUTRAL CHESS KNIGHT ROTATED TWO HUNDRED SEVENTY DEGREES"));
        data.insert(std::make_pair(0x1fa44,"NEUTRAL CHESS PAWN ROTATED TWO HUNDRED SEVENTY DEGREES"));
        data.insert(std::make_pair(0x1fa45,"WHITE CHESS KNIGHT ROTATED THREE HUNDRED FIFTEEN DEGREES"));
        data.insert(std::make_pair(0x1fa46,"BLACK CHESS KNIGHT ROTATED THREE HUNDRED FIFTEEN DEGREES"));
        data.insert(std::make_pair(0x1fa47,"NEUTRAL CHESS KNIGHT ROTATED THREE HUNDRED FIFTEEN DEGREES"));
        data.insert(std::make_pair(0x1fa48,"WHITE CHESS EQUIHOPPER"));
        data.insert(std::make_pair(0x1fa49,"BLACK CHESS EQUIHOPPER"));
        data.insert(std::make_pair(0x1fa4a,"NEUTRAL CHESS EQUIHOPPER"));
        data.insert(std::make_pair(0x1fa4b,"WHITE CHESS EQUIHOPPER ROTATED NINETY DEGREES"));
        data.insert(std::make_pair(0x1fa4c,"BLACK CHESS EQUIHOPPER ROTATED NINETY DEGREES"));
        data.insert(std::make_pair(0x1fa4d,"NEUTRAL CHESS EQUIHOPPER ROTATED NINETY DEGREES"));
        data.insert(std::make_pair(0x1fa4e,"WHITE CHESS KNIGHT-QUEEN"));
        data.insert(std::make_pair(0x1fa4f,"WHITE CHESS KNIGHT-ROOK"));
        data.insert(std::make_pair(0x1fa50,"WHITE CHESS KNIGHT-BISHOP"));
        data.insert(std::make_pair(0x1fa51,"BLACK CHESS KNIGHT-QUEEN"));
        data.insert(std::make_pair(0x1fa52,"BLACK CHESS KNIGHT-ROOK"));
        data.insert(std::make_pair(0x1fa53,"BLACK CHESS KNIGHT-BISHOP"));
        data.insert(std::make_pair(0x1fa60,"XIANGQI RED GENERAL"));
        data.insert(std::make_pair(0x1fa61,"XIANGQI RED MANDARIN"));
        data.insert(std::make_pair(0x1fa62,"XIANGQI RED ELEPHANT"));
        data.insert(std::make_pair(0x1fa63,"XIANGQI RED HORSE"));
        data.insert(std::make_pair(0x1fa64,"XIANGQI RED CHARIOT"));
        data.insert(std::make_pair(0x1fa65,"XIANGQI RED CANNON"));
        data.insert(std::make_pair(0x1fa66,"XIANGQI RED SOLDIER"));
        data.insert(std::make_pair(0x1fa67,"XIANGQI BLACK GENERAL"));
        data.insert(std::make_pair(0x1fa68,"XIANGQI BLACK MANDARIN"));
        data.insert(std::make_pair(0x1fa69,"XIANGQI BLACK ELEPHANT"));
        data.insert(std::make_pair(0x1fa6a,"XIANGQI BLACK HORSE"));
        data.insert(std::make_pair(0x1fa6b,"XIANGQI BLACK CHARIOT"));
        data.insert(std::make_pair(0x1fa6c,"XIANGQI BLACK CANNON"));
        data.insert(std::make_pair(0x1fa6d,"XIANGQI BLACK SOLDIER"));
        data.insert(std::make_pair(0x1fa70,"BALLET SHOES"));
        data.insert(std::make_pair(0x1fa71,"ONE-PIECE SWIMSUIT"));
        data.insert(std::make_pair(0x1fa72,"BRIEFS"));
        data.insert(std::make_pair(0x1fa73,"SHORTS"));
        data.insert(std::make_pair(0x1fa74,"THONG SANDAL"));
        data.insert(std::make_pair(0x1fa75,"LIGHT BLUE HEART"));
        data.insert(std::make_pair(0x1fa76,"GREY HEART"));
        data.insert(std::make_pair(0x1fa77,"PINK HEART"));
        data.insert(std::make_pair(0x1fa78,"DROP OF BLOOD"));
        data.insert(std::make_pair(0x1fa79,"ADHESIVE BANDAGE"));
        data.insert(std::make_pair(0x1fa7a,"STETHOSCOPE"));
        data.insert(std::make_pair(0x1fa7b,"X-RAY"));
        data.insert(std::make_pair(0x1fa7c,"CRUTCH"));
        data.insert(std::make_pair(0x1fa80,"YO-YO"));
        data.insert(std::make_pair(0x1fa81,"KITE"));
        data.insert(std::make_pair(0x1fa82,"PARACHUTE"));
        data.insert(std::make_pair(0x1fa83,"BOOMERANG"));
        data.insert(std::make_pair(0x1fa84,"MAGIC WAND"));
        data.insert(std::make_pair(0x1fa85,"PINATA"));
        data.insert(std::make_pair(0x1fa86,"NESTING DOLLS"));
        data.insert(std::make_pair(0x1fa87,"MARACAS"));
        data.insert(std::make_pair(0x1fa88,"FLUTE"));
        data.insert(std::make_pair(0x1fa90,"RINGED PLANET"));
        data.insert(std::make_pair(0x1fa91,"CHAIR"));
        data.insert(std::make_pair(0x1fa92,"RAZOR"));
        data.insert(std::make_pair(0x1fa93,"AXE"));
        data.insert(std::make_pair(0x1fa94,"DIYA LAMP"));
        data.insert(std::make_pair(0x1fa95,"BANJO"));
        data.insert(std::make_pair(0x1fa96,"MILITARY HELMET"));
        data.insert(std::make_pair(0x1fa97,"ACCORDION"));
        data.insert(std::make_pair(0x1fa98,"LONG DRUM"));
        data.insert(std::make_pair(0x1fa99,"COIN"));
        data.insert(std::make_pair(0x1fa9a,"CARPENTRY SAW"));
        data.insert(std::make_pair(0x1fa9b,"SCREWDRIVER"));
        data.insert(std::make_pair(0x1fa9c,"LADDER"));
        data.insert(std::make_pair(0x1fa9d,"HOOK"));
        data.insert(std::make_pair(0x1fa9e,"MIRROR"));
        data.insert(std::make_pair(0x1fa9f,"WINDOW"));
        data.insert(std::make_pair(0x1faa0,"PLUNGER"));
        data.insert(std::make_pair(0x1faa1,"SEWING NEEDLE"));
        data.insert(std::make_pair(0x1faa2,"KNOT"));
        data.insert(std::make_pair(0x1faa3,"BUCKET"));
        data.insert(std::make_pair(0x1faa4,"MOUSE TRAP"));
        data.insert(std::make_pair(0x1faa5,"TOOTHBRUSH"));
        data.insert(std::make_pair(0x1faa6,"HEADSTONE"));
        data.insert(std::make_pair(0x1faa7,"PLACARD"));
        data.insert(std::make_pair(0x1faa8,"ROCK"));
        data.insert(std::make_pair(0x1faa9,"MIRROR BALL"));
        data.insert(std::make_pair(0x1faaa,"IDENTIFICATION CARD"));
        data.insert(std::make_pair(0x1faab,"LOW BATTERY"));
        data.insert(std::make_pair(0x1faac,"HAMSA"));
        data.insert(std::make_pair(0x1faad,"FOLDING HAND FAN"));
        data.insert(std::make_pair(0x1faae,"HAIR PICK"));
        data.insert(std::make_pair(0x1faaf,"KHANDA"));
        data.insert(std::make_pair(0x1fab0,"FLY"));
        data.insert(std::make_pair(0x1fab1,"WORM"));
        data.insert(std::make_pair(0x1fab2,"BEETLE"));
        data.insert(std::make_pair(0x1fab3,"COCKROACH"));
        data.insert(std::make_pair(0x1fab4,"POTTED PLANT"));
        data.insert(std::make_pair(0x1fab5,"WOOD"));
        data.insert(std::make_pair(0x1fab6,"FEATHER"));
        data.insert(std::make_pair(0x1fab7,"LOTUS"));
        data.insert(std::make_pair(0x1fab8,"CORAL"));
        data.insert(std::make_pair(0x1fab9,"EMPTY NEST"));
        data.insert(std::make_pair(0x1faba,"NEST WITH EGGS"));
        data.insert(std::make_pair(0x1fabb,"HYACINTH"));
        data.insert(std::make_pair(0x1fabc,"JELLYFISH"));
        data.insert(std::make_pair(0x1fabd,"WING"));
        data.insert(std::make_pair(0x1fabf,"GOOSE"));
        data.insert(std::make_pair(0x1fac0,"ANATOMICAL HEART"));
        data.insert(std::make_pair(0x1fac1,"LUNGS"));
        data.insert(std::make_pair(0x1fac2,"PEOPLE HUGGING"));
        data.insert(std::make_pair(0x1fac3,"PREGNANT MAN"));
        data.insert(std::make_pair(0x1fac4,"PREGNANT PERSON"));
        data.insert(std::make_pair(0x1fac5,"PERSON WITH CROWN"));
        data.insert(std::make_pair(0x1face,"MOOSE"));
        data.insert(std::make_pair(0x1facf,"DONKEY"));
        data.insert(std::make_pair(0x1fad0,"BLUEBERRIES"));
        data.insert(std::make_pair(0x1fad1,"BELL PEPPER"));
        data.insert(std::make_pair(0x1fad2,"OLIVE"));
        data.insert(std::make_pair(0x1fad3,"FLATBREAD"));
        data.insert(std::make_pair(0x1fad4,"TAMALE"));
        data.insert(std::make_pair(0x1fad5,"FONDUE"));
        data.insert(std::make_pair(0x1fad6,"TEAPOT"));
        data.insert(std::make_pair(0x1fad7,"POURING LIQUID"));
        data.insert(std::make_pair(0x1fad8,"BEANS"));
        data.insert(std::make_pair(0x1fad9,"JAR"));
        data.insert(std::make_pair(0x1fada,"GINGER ROOT"));
        data.insert(std::make_pair(0x1fadb,"PEA POD"));
        data.insert(std::make_pair(0x1fae0,"MELTING FACE"));
        data.insert(std::make_pair(0x1fae1,"SALUTING FACE"));
        data.insert(std::make_pair(0x1fae2,"FACE WITH OPEN EYES AND HAND OVER MOUTH"));
        data.insert(std::make_pair(0x1fae3,"FACE WITH PEEKING EYE"));
        data.insert(std::make_pair(0x1fae4,"FACE WITH DIAGONAL MOUTH"));
        data.insert(std::make_pair(0x1fae5,"DOTTED LINE FACE"));
        data.insert(std::make_pair(0x1fae6,"BITING LIP"));
        data.insert(std::make_pair(0x1fae7,"BUBBLES"));
        data.insert(std::make_pair(0x1fae8,"SHAKING FACE"));
        data.insert(std::make_pair(0x1faf0,"HAND WITH INDEX FINGER AND THUMB CROSSED"));
        data.insert(std::make_pair(0x1faf1,"RIGHTWARDS HAND"));
        data.insert(std::make_pair(0x1faf2,"LEFTWARDS HAND"));
        data.insert(std::make_pair(0x1faf3,"PALM DOWN HAND"));
        data.insert(std::make_pair(0x1faf4,"PALM UP HAND"));
        data.insert(std::make_pair(0x1faf5,"INDEX POINTING AT THE VIEWER"));
        data.insert(std::make_pair(0x1faf6,"HEART HANDS"));
        data.insert(std::make_pair(0x1faf7,"LEFTWARDS PUSHING HAND"));
        data.insert(std::make_pair(0x1faf8,"RIGHTWARDS PUSHING HAND"));
        data.insert(std::make_pair(0x1fb00,"BLOCK SEXTANT-1"));
        data.insert(std::make_pair(0x1fb01,"BLOCK SEXTANT-2"));
        data.insert(std::make_pair(0x1fb02,"BLOCK SEXTANT-12"));
        data.insert(std::make_pair(0x1fb03,"BLOCK SEXTANT-3"));
        data.insert(std::make_pair(0x1fb04,"BLOCK SEXTANT-13"));
        data.insert(std::make_pair(0x1fb05,"BLOCK SEXTANT-23"));
        data.insert(std::make_pair(0x1fb06,"BLOCK SEXTANT-123"));
        data.insert(std::make_pair(0x1fb07,"BLOCK SEXTANT-4"));
        data.insert(std::make_pair(0x1fb08,"BLOCK SEXTANT-14"));
        data.insert(std::make_pair(0x1fb09,"BLOCK SEXTANT-24"));
        data.insert(std::make_pair(0x1fb0a,"BLOCK SEXTANT-124"));
        data.insert(std::make_pair(0x1fb0b,"BLOCK SEXTANT-34"));
        data.insert(std::make_pair(0x1fb0c,"BLOCK SEXTANT-134"));
        data.insert(std::make_pair(0x1fb0d,"BLOCK SEXTANT-234"));
        data.insert(std::make_pair(0x1fb0e,"BLOCK SEXTANT-1234"));
        data.insert(std::make_pair(0x1fb0f,"BLOCK SEXTANT-5"));
        data.insert(std::make_pair(0x1fb10,"BLOCK SEXTANT-15"));
        data.insert(std::make_pair(0x1fb11,"BLOCK SEXTANT-25"));
        data.insert(std::make_pair(0x1fb12,"BLOCK SEXTANT-125"));
        data.insert(std::make_pair(0x1fb13,"BLOCK SEXTANT-35"));
        data.insert(std::make_pair(0x1fb14,"BLOCK SEXTANT-235"));
        data.insert(std::make_pair(0x1fb15,"BLOCK SEXTANT-1235"));
        data.insert(std::make_pair(0x1fb16,"BLOCK SEXTANT-45"));
        data.insert(std::make_pair(0x1fb17,"BLOCK SEXTANT-145"));
        data.insert(std::make_pair(0x1fb18,"BLOCK SEXTANT-245"));
        data.insert(std::make_pair(0x1fb19,"BLOCK SEXTANT-1245"));
        data.insert(std::make_pair(0x1fb1a,"BLOCK SEXTANT-345"));
        data.insert(std::make_pair(0x1fb1b,"BLOCK SEXTANT-1345"));
        data.insert(std::make_pair(0x1fb1c,"BLOCK SEXTANT-2345"));
        data.insert(std::make_pair(0x1fb1d,"BLOCK SEXTANT-12345"));
        data.insert(std::make_pair(0x1fb1e,"BLOCK SEXTANT-6"));
        data.insert(std::make_pair(0x1fb1f,"BLOCK SEXTANT-16"));
        data.insert(std::make_pair(0x1fb20,"BLOCK SEXTANT-26"));
        data.insert(std::make_pair(0x1fb21,"BLOCK SEXTANT-126"));
        data.insert(std::make_pair(0x1fb22,"BLOCK SEXTANT-36"));
        data.insert(std::make_pair(0x1fb23,"BLOCK SEXTANT-136"));
        data.insert(std::make_pair(0x1fb24,"BLOCK SEXTANT-236"));
        data.insert(std::make_pair(0x1fb25,"BLOCK SEXTANT-1236"));
        data.insert(std::make_pair(0x1fb26,"BLOCK SEXTANT-46"));
        data.insert(std::make_pair(0x1fb27,"BLOCK SEXTANT-146"));
        data.insert(std::make_pair(0x1fb28,"BLOCK SEXTANT-1246"));
        data.insert(std::make_pair(0x1fb29,"BLOCK SEXTANT-346"));
        data.insert(std::make_pair(0x1fb2a,"BLOCK SEXTANT-1346"));
        data.insert(std::make_pair(0x1fb2b,"BLOCK SEXTANT-2346"));
        data.insert(std::make_pair(0x1fb2c,"BLOCK SEXTANT-12346"));
        data.insert(std::make_pair(0x1fb2d,"BLOCK SEXTANT-56"));
        data.insert(std::make_pair(0x1fb2e,"BLOCK SEXTANT-156"));
        data.insert(std::make_pair(0x1fb2f,"BLOCK SEXTANT-256"));
        data.insert(std::make_pair(0x1fb30,"BLOCK SEXTANT-1256"));
        data.insert(std::make_pair(0x1fb31,"BLOCK SEXTANT-356"));
        data.insert(std::make_pair(0x1fb32,"BLOCK SEXTANT-1356"));
        data.insert(std::make_pair(0x1fb33,"BLOCK SEXTANT-2356"));
        data.insert(std::make_pair(0x1fb34,"BLOCK SEXTANT-12356"));
        data.insert(std::make_pair(0x1fb35,"BLOCK SEXTANT-456"));
        data.insert(std::make_pair(0x1fb36,"BLOCK SEXTANT-1456"));
        data.insert(std::make_pair(0x1fb37,"BLOCK SEXTANT-2456"));
        data.insert(std::make_pair(0x1fb38,"BLOCK SEXTANT-12456"));
        data.insert(std::make_pair(0x1fb39,"BLOCK SEXTANT-3456"));
        data.insert(std::make_pair(0x1fb3a,"BLOCK SEXTANT-13456"));
        data.insert(std::make_pair(0x1fb3b,"BLOCK SEXTANT-23456"));
        data.insert(std::make_pair(0x1fb3c,"LOWER LEFT BLOCK DIAGONAL LOWER MIDDLE LEFT TO LOWER CENTRE"));
        data.insert(std::make_pair(0x1fb3d,"LOWER LEFT BLOCK DIAGONAL LOWER MIDDLE LEFT TO LOWER RIGHT"));
        data.insert(std::make_pair(0x1fb3e,"LOWER LEFT BLOCK DIAGONAL UPPER MIDDLE LEFT TO LOWER CENTRE"));
        data.insert(std::make_pair(0x1fb3f,"LOWER LEFT BLOCK DIAGONAL UPPER MIDDLE LEFT TO LOWER RIGHT"));
        data.insert(std::make_pair(0x1fb40,"LOWER LEFT BLOCK DIAGONAL UPPER LEFT TO LOWER CENTRE"));
        data.insert(std::make_pair(0x1fb41,"LOWER RIGHT BLOCK DIAGONAL UPPER MIDDLE LEFT TO UPPER CENTRE"));
        data.insert(std::make_pair(0x1fb42,"LOWER RIGHT BLOCK DIAGONAL UPPER MIDDLE LEFT TO UPPER RIGHT"));
        data.insert(std::make_pair(0x1fb43,"LOWER RIGHT BLOCK DIAGONAL LOWER MIDDLE LEFT TO UPPER CENTRE"));
        data.insert(std::make_pair(0x1fb44,"LOWER RIGHT BLOCK DIAGONAL LOWER MIDDLE LEFT TO UPPER RIGHT"));
        data.insert(std::make_pair(0x1fb45,"LOWER RIGHT BLOCK DIAGONAL LOWER LEFT TO UPPER CENTRE"));
        data.insert(std::make_pair(0x1fb46,"LOWER RIGHT BLOCK DIAGONAL LOWER MIDDLE LEFT TO UPPER MIDDLE RIGHT"));
        data.insert(std::make_pair(0x1fb47,"LOWER RIGHT BLOCK DIAGONAL LOWER CENTRE TO LOWER MIDDLE RIGHT"));
        data.insert(std::make_pair(0x1fb48,"LOWER RIGHT BLOCK DIAGONAL LOWER LEFT TO LOWER MIDDLE RIGHT"));
        data.insert(std::make_pair(0x1fb49,"LOWER RIGHT BLOCK DIAGONAL LOWER CENTRE TO UPPER MIDDLE RIGHT"));
        data.insert(std::make_pair(0x1fb4a,"LOWER RIGHT BLOCK DIAGONAL LOWER LEFT TO UPPER MIDDLE RIGHT"));
        data.insert(std::make_pair(0x1fb4b,"LOWER RIGHT BLOCK DIAGONAL LOWER CENTRE TO UPPER RIGHT"));
        data.insert(std::make_pair(0x1fb4c,"LOWER LEFT BLOCK DIAGONAL UPPER CENTRE TO UPPER MIDDLE RIGHT"));
        data.insert(std::make_pair(0x1fb4d,"LOWER LEFT BLOCK DIAGONAL UPPER LEFT TO UPPER MIDDLE RIGHT"));
        data.insert(std::make_pair(0x1fb4e,"LOWER LEFT BLOCK DIAGONAL UPPER CENTRE TO LOWER MIDDLE RIGHT"));
        data.insert(std::make_pair(0x1fb4f,"LOWER LEFT BLOCK DIAGONAL UPPER LEFT TO LOWER MIDDLE RIGHT"));
        data.insert(std::make_pair(0x1fb50,"LOWER LEFT BLOCK DIAGONAL UPPER CENTRE TO LOWER RIGHT"));
        data.insert(std::make_pair(0x1fb51,"LOWER LEFT BLOCK DIAGONAL UPPER MIDDLE LEFT TO LOWER MIDDLE RIGHT"));
        data.insert(std::make_pair(0x1fb52,"UPPER RIGHT BLOCK DIAGONAL LOWER MIDDLE LEFT TO LOWER CENTRE"));
        data.insert(std::make_pair(0x1fb53,"UPPER RIGHT BLOCK DIAGONAL LOWER MIDDLE LEFT TO LOWER RIGHT"));
        data.insert(std::make_pair(0x1fb54,"UPPER RIGHT BLOCK DIAGONAL UPPER MIDDLE LEFT TO LOWER CENTRE"));
        data.insert(std::make_pair(0x1fb55,"UPPER RIGHT BLOCK DIAGONAL UPPER MIDDLE LEFT TO LOWER RIGHT"));
        data.insert(std::make_pair(0x1fb56,"UPPER RIGHT BLOCK DIAGONAL UPPER LEFT TO LOWER CENTRE"));
        data.insert(std::make_pair(0x1fb57,"UPPER LEFT BLOCK DIAGONAL UPPER MIDDLE LEFT TO UPPER CENTRE"));
        data.insert(std::make_pair(0x1fb58,"UPPER LEFT BLOCK DIAGONAL UPPER MIDDLE LEFT TO UPPER RIGHT"));
        data.insert(std::make_pair(0x1fb59,"UPPER LEFT BLOCK DIAGONAL LOWER MIDDLE LEFT TO UPPER CENTRE"));
        data.insert(std::make_pair(0x1fb5a,"UPPER LEFT BLOCK DIAGONAL LOWER MIDDLE LEFT TO UPPER RIGHT"));
        data.insert(std::make_pair(0x1fb5b,"UPPER LEFT BLOCK DIAGONAL LOWER LEFT TO UPPER CENTRE"));
        data.insert(std::make_pair(0x1fb5c,"UPPER LEFT BLOCK DIAGONAL LOWER MIDDLE LEFT TO UPPER MIDDLE RIGHT"));
        data.insert(std::make_pair(0x1fb5d,"UPPER LEFT BLOCK DIAGONAL LOWER CENTRE TO LOWER MIDDLE RIGHT"));
        data.insert(std::make_pair(0x1fb5e,"UPPER LEFT BLOCK DIAGONAL LOWER LEFT TO LOWER MIDDLE RIGHT"));
        data.insert(std::make_pair(0x1fb5f,"UPPER LEFT BLOCK DIAGONAL LOWER CENTRE TO UPPER MIDDLE RIGHT"));
        data.insert(std::make_pair(0x1fb60,"UPPER LEFT BLOCK DIAGONAL LOWER LEFT TO UPPER MIDDLE RIGHT"));
        data.insert(std::make_pair(0x1fb61,"UPPER LEFT BLOCK DIAGONAL LOWER CENTRE TO UPPER RIGHT"));
        data.insert(std::make_pair(0x1fb62,"UPPER RIGHT BLOCK DIAGONAL UPPER CENTRE TO UPPER MIDDLE RIGHT"));
        data.insert(std::make_pair(0x1fb63,"UPPER RIGHT BLOCK DIAGONAL UPPER LEFT TO UPPER MIDDLE RIGHT"));
        data.insert(std::make_pair(0x1fb64,"UPPER RIGHT BLOCK DIAGONAL UPPER CENTRE TO LOWER MIDDLE RIGHT"));
        data.insert(std::make_pair(0x1fb65,"UPPER RIGHT BLOCK DIAGONAL UPPER LEFT TO LOWER MIDDLE RIGHT"));
        data.insert(std::make_pair(0x1fb66,"UPPER RIGHT BLOCK DIAGONAL UPPER CENTRE TO LOWER RIGHT"));
        data.insert(std::make_pair(0x1fb67,"UPPER RIGHT BLOCK DIAGONAL UPPER MIDDLE LEFT TO LOWER MIDDLE RIGHT"));
        data.insert(std::make_pair(0x1fb68,"UPPER AND RIGHT AND LOWER TRIANGULAR THREE QUARTERS BLOCK"));
        data.insert(std::make_pair(0x1fb69,"LEFT AND LOWER AND RIGHT TRIANGULAR THREE QUARTERS BLOCK"));
        data.insert(std::make_pair(0x1fb6a,"UPPER AND LEFT AND LOWER TRIANGULAR THREE QUARTERS BLOCK"));
        data.insert(std::make_pair(0x1fb6b,"LEFT AND UPPER AND RIGHT TRIANGULAR THREE QUARTERS BLOCK"));
        data.insert(std::make_pair(0x1fb6c,"LEFT TRIANGULAR ONE QUARTER BLOCK"));
        data.insert(std::make_pair(0x1fb6d,"UPPER TRIANGULAR ONE QUARTER BLOCK"));
        data.insert(std::make_pair(0x1fb6e,"RIGHT TRIANGULAR ONE QUARTER BLOCK"));
        data.insert(std::make_pair(0x1fb6f,"LOWER TRIANGULAR ONE QUARTER BLOCK"));
        data.insert(std::make_pair(0x1fb70,"VERTICAL ONE EIGHTH BLOCK-2"));
        data.insert(std::make_pair(0x1fb71,"VERTICAL ONE EIGHTH BLOCK-3"));
        data.insert(std::make_pair(0x1fb72,"VERTICAL ONE EIGHTH BLOCK-4"));
        data.insert(std::make_pair(0x1fb73,"VERTICAL ONE EIGHTH BLOCK-5"));
        data.insert(std::make_pair(0x1fb74,"VERTICAL ONE EIGHTH BLOCK-6"));
        data.insert(std::make_pair(0x1fb75,"VERTICAL ONE EIGHTH BLOCK-7"));
        data.insert(std::make_pair(0x1fb76,"HORIZONTAL ONE EIGHTH BLOCK-2"));
        data.insert(std::make_pair(0x1fb77,"HORIZONTAL ONE EIGHTH BLOCK-3"));
        data.insert(std::make_pair(0x1fb78,"HORIZONTAL ONE EIGHTH BLOCK-4"));
        data.insert(std::make_pair(0x1fb79,"HORIZONTAL ONE EIGHTH BLOCK-5"));
        data.insert(std::make_pair(0x1fb7a,"HORIZONTAL ONE EIGHTH BLOCK-6"));
        data.insert(std::make_pair(0x1fb7b,"HORIZONTAL ONE EIGHTH BLOCK-7"));
        data.insert(std::make_pair(0x1fb7c,"LEFT AND LOWER ONE EIGHTH BLOCK"));
        data.insert(std::make_pair(0x1fb7d,"LEFT AND UPPER ONE EIGHTH BLOCK"));
        data.insert(std::make_pair(0x1fb7e,"RIGHT AND UPPER ONE EIGHTH BLOCK"));
        data.insert(std::make_pair(0x1fb7f,"RIGHT AND LOWER ONE EIGHTH BLOCK"));
        data.insert(std::make_pair(0x1fb80,"UPPER AND LOWER ONE EIGHTH BLOCK"));
        data.insert(std::make_pair(0x1fb81,"HORIZONTAL ONE EIGHTH BLOCK-1358"));
        data.insert(std::make_pair(0x1fb82,"UPPER ONE QUARTER BLOCK"));
        data.insert(std::make_pair(0x1fb83,"UPPER THREE EIGHTHS BLOCK"));
        data.insert(std::make_pair(0x1fb84,"UPPER FIVE EIGHTHS BLOCK"));
        data.insert(std::make_pair(0x1fb85,"UPPER THREE QUARTERS BLOCK"));
        data.insert(std::make_pair(0x1fb86,"UPPER SEVEN EIGHTHS BLOCK"));
        data.insert(std::make_pair(0x1fb87,"RIGHT ONE QUARTER BLOCK"));
        data.insert(std::make_pair(0x1fb88,"RIGHT THREE EIGHTHS BLOCK"));
        data.insert(std::make_pair(0x1fb89,"RIGHT FIVE EIGHTHS BLOCK"));
        data.insert(std::make_pair(0x1fb8a,"RIGHT THREE QUARTERS BLOCK"));
        data.insert(std::make_pair(0x1fb8b,"RIGHT SEVEN EIGHTHS BLOCK"));
        data.insert(std::make_pair(0x1fb8c,"LEFT HALF MEDIUM SHADE"));
        data.insert(std::make_pair(0x1fb8d,"RIGHT HALF MEDIUM SHADE"));
        data.insert(std::make_pair(0x1fb8e,"UPPER HALF MEDIUM SHADE"));
        data.insert(std::make_pair(0x1fb8f,"LOWER HALF MEDIUM SHADE"));
        data.insert(std::make_pair(0x1fb90,"INVERSE MEDIUM SHADE"));
        data.insert(std::make_pair(0x1fb91,"UPPER HALF BLOCK AND LOWER HALF INVERSE MEDIUM SHADE"));
        data.insert(std::make_pair(0x1fb92,"UPPER HALF INVERSE MEDIUM SHADE AND LOWER HALF BLOCK"));
        data.insert(std::make_pair(0x1fb94,"LEFT HALF INVERSE MEDIUM SHADE AND RIGHT HALF BLOCK"));
        data.insert(std::make_pair(0x1fb95,"CHECKER BOARD FILL"));
        data.insert(std::make_pair(0x1fb96,"INVERSE CHECKER BOARD FILL"));
        data.insert(std::make_pair(0x1fb97,"HEAVY HORIZONTAL FILL"));
        data.insert(std::make_pair(0x1fb98,"UPPER LEFT TO LOWER RIGHT FILL"));
        data.insert(std::make_pair(0x1fb99,"UPPER RIGHT TO LOWER LEFT FILL"));
        data.insert(std::make_pair(0x1fb9a,"UPPER AND LOWER TRIANGULAR HALF BLOCK"));
        data.insert(std::make_pair(0x1fb9b,"LEFT AND RIGHT TRIANGULAR HALF BLOCK"));
        data.insert(std::make_pair(0x1fb9c,"UPPER LEFT TRIANGULAR MEDIUM SHADE"));
        data.insert(std::make_pair(0x1fb9d,"UPPER RIGHT TRIANGULAR MEDIUM SHADE"));
        data.insert(std::make_pair(0x1fb9e,"LOWER RIGHT TRIANGULAR MEDIUM SHADE"));
        data.insert(std::make_pair(0x1fb9f,"LOWER LEFT TRIANGULAR MEDIUM SHADE"));
        data.insert(std::make_pair(0x1fba0,"BOX DRAWINGS LIGHT DIAGONAL UPPER CENTRE TO MIDDLE LEFT"));
        data.insert(std::make_pair(0x1fba1,"BOX DRAWINGS LIGHT DIAGONAL UPPER CENTRE TO MIDDLE RIGHT"));
        data.insert(std::make_pair(0x1fba2,"BOX DRAWINGS LIGHT DIAGONAL MIDDLE LEFT TO LOWER CENTRE"));
        data.insert(std::make_pair(0x1fba3,"BOX DRAWINGS LIGHT DIAGONAL MIDDLE RIGHT TO LOWER CENTRE"));
        data.insert(std::make_pair(0x1fba4,"BOX DRAWINGS LIGHT DIAGONAL UPPER CENTRE TO MIDDLE LEFT TO LOWER CENTRE"));
        data.insert(std::make_pair(0x1fba5,"BOX DRAWINGS LIGHT DIAGONAL UPPER CENTRE TO MIDDLE RIGHT TO LOWER CENTRE"));
        data.insert(std::make_pair(0x1fba6,"BOX DRAWINGS LIGHT DIAGONAL MIDDLE LEFT TO LOWER CENTRE TO MIDDLE RIGHT"));
        data.insert(std::make_pair(0x1fba7,"BOX DRAWINGS LIGHT DIAGONAL MIDDLE LEFT TO UPPER CENTRE TO MIDDLE RIGHT"));
        data.insert(std::make_pair(0x1fba8,"BOX DRAWINGS LIGHT DIAGONAL UPPER CENTRE TO MIDDLE LEFT AND MIDDLE RIGHT TO LOWER CENTRE"));
        data.insert(std::make_pair(0x1fba9,"BOX DRAWINGS LIGHT DIAGONAL UPPER CENTRE TO MIDDLE RIGHT AND MIDDLE LEFT TO LOWER CENTRE"));
        data.insert(std::make_pair(0x1fbaa,"BOX DRAWINGS LIGHT DIAGONAL UPPER CENTRE TO MIDDLE RIGHT TO LOWER CENTRE TO MIDDLE LEFT"));
        data.insert(std::make_pair(0x1fbab,"BOX DRAWINGS LIGHT DIAGONAL UPPER CENTRE TO MIDDLE LEFT TO LOWER CENTRE TO MIDDLE RIGHT"));
        data.insert(std::make_pair(0x1fbac,"BOX DRAWINGS LIGHT DIAGONAL MIDDLE LEFT TO UPPER CENTRE TO MIDDLE RIGHT TO LOWER CENTRE"));
        data.insert(std::make_pair(0x1fbad,"BOX DRAWINGS LIGHT DIAGONAL MIDDLE RIGHT TO UPPER CENTRE TO MIDDLE LEFT TO LOWER CENTRE"));
        data.insert(std::make_pair(0x1fbae,"BOX DRAWINGS LIGHT DIAGONAL DIAMOND"));
        data.insert(std::make_pair(0x1fbaf,"BOX DRAWINGS LIGHT HORIZONTAL WITH VERTICAL STROKE"));
        data.insert(std::make_pair(0x1fbb0,"ARROWHEAD-SHAPED POINTER"));
        data.insert(std::make_pair(0x1fbb1,"INVERSE CHECK MARK"));
        data.insert(std::make_pair(0x1fbb2,"LEFT HALF RUNNING MAN"));
        data.insert(std::make_pair(0x1fbb3,"RIGHT HALF RUNNING MAN"));
        data.insert(std::make_pair(0x1fbb4,"INVERSE DOWNWARDS ARROW WITH TIP LEFTWARDS"));
        data.insert(std::make_pair(0x1fbb5,"LEFTWARDS ARROW AND UPPER AND LOWER ONE EIGHTH BLOCK"));
        data.insert(std::make_pair(0x1fbb6,"RIGHTWARDS ARROW AND UPPER AND LOWER ONE EIGHTH BLOCK"));
        data.insert(std::make_pair(0x1fbb7,"DOWNWARDS ARROW AND RIGHT ONE EIGHTH BLOCK"));
        data.insert(std::make_pair(0x1fbb8,"UPWARDS ARROW AND RIGHT ONE EIGHTH BLOCK"));
        data.insert(std::make_pair(0x1fbb9,"LEFT HALF FOLDER"));
        data.insert(std::make_pair(0x1fbba,"RIGHT HALF FOLDER"));
        data.insert(std::make_pair(0x1fbbb,"VOIDED GREEK CROSS"));
        data.insert(std::make_pair(0x1fbbc,"RIGHT OPEN SQUARED DOT"));
        data.insert(std::make_pair(0x1fbbd,"NEGATIVE DIAGONAL CROSS"));
        data.insert(std::make_pair(0x1fbbe,"NEGATIVE DIAGONAL MIDDLE RIGHT TO LOWER CENTRE"));
        data.insert(std::make_pair(0x1fbbf,"NEGATIVE DIAGONAL DIAMOND"));
        data.insert(std::make_pair(0x1fbc0,"WHITE HEAVY SALTIRE WITH ROUNDED CORNERS"));
        data.insert(std::make_pair(0x1fbc1,"LEFT THIRD WHITE RIGHT POINTING INDEX"));
        data.insert(std::make_pair(0x1fbc2,"MIDDLE THIRD WHITE RIGHT POINTING INDEX"));
        data.insert(std::make_pair(0x1fbc3,"RIGHT THIRD WHITE RIGHT POINTING INDEX"));
        data.insert(std::make_pair(0x1fbc4,"NEGATIVE SQUARED QUESTION MARK"));
        data.insert(std::make_pair(0x1fbc5,"STICK FIGURE"));
        data.insert(std::make_pair(0x1fbc6,"STICK FIGURE WITH ARMS RAISED"));
        data.insert(std::make_pair(0x1fbc7,"STICK FIGURE LEANING LEFT"));
        data.insert(std::make_pair(0x1fbc8,"STICK FIGURE LEANING RIGHT"));
        data.insert(std::make_pair(0x1fbc9,"STICK FIGURE WITH DRESS"));
        data.insert(std::make_pair(0x1fbca,"WHITE UP-POINTING CHEVRON"));
        data.insert(std::make_pair(0x1fbf0,"SEGMENTED DIGIT ZERO"));
        data.insert(std::make_pair(0x1fbf1,"SEGMENTED DIGIT ONE"));
        data.insert(std::make_pair(0x1fbf2,"SEGMENTED DIGIT TWO"));
        data.insert(std::make_pair(0x1fbf3,"SEGMENTED DIGIT THREE"));
        data.insert(std::make_pair(0x1fbf4,"SEGMENTED DIGIT FOUR"));
        data.insert(std::make_pair(0x1fbf5,"SEGMENTED DIGIT FIVE"));
        data.insert(std::make_pair(0x1fbf6,"SEGMENTED DIGIT SIX"));
        data.insert(std::make_pair(0x1fbf7,"SEGMENTED DIGIT SEVEN"));
        data.insert(std::make_pair(0x1fbf8,"SEGMENTED DIGIT EIGHT"));
        data.insert(std::make_pair(0x1fbf9,"SEGMENTED DIGIT NINE"));
        data.insert(std::make_pair(0x20000,"<CJK Ideograph Extension B, First>"));
        data.insert(std::make_pair(0x2a6df,"<CJK Ideograph Extension B, Last>"));
        data.insert(std::make_pair(0x2a700,"<CJK Ideograph Extension C, First>"));
        data.insert(std::make_pair(0x2b739,"<CJK Ideograph Extension C, Last>"));
        data.insert(std::make_pair(0x2b740,"<CJK Ideograph Extension D, First>"));
        data.insert(std::make_pair(0x2b81d,"<CJK Ideograph Extension D, Last>"));
        data.insert(std::make_pair(0x2b820,"<CJK Ideograph Extension E, First>"));
        data.insert(std::make_pair(0x2cea1,"<CJK Ideograph Extension E, Last>"));
        data.insert(std::make_pair(0x2ceb0,"<CJK Ideograph Extension F, First>"));
        data.insert(std::make_pair(0x2ebe0,"<CJK Ideograph Extension F, Last>"));
        data.insert(std::make_pair(0x2f800,"CJK COMPATIBILITY IDEOGRAPH-2F800"));
        data.insert(std::make_pair(0x2f801,"CJK COMPATIBILITY IDEOGRAPH-2F801"));
        data.insert(std::make_pair(0x2f802,"CJK COMPATIBILITY IDEOGRAPH-2F802"));
        data.insert(std::make_pair(0x2f803,"CJK COMPATIBILITY IDEOGRAPH-2F803"));
        data.insert(std::make_pair(0x2f804,"CJK COMPATIBILITY IDEOGRAPH-2F804"));
        data.insert(std::make_pair(0x2f805,"CJK COMPATIBILITY IDEOGRAPH-2F805"));
        data.insert(std::make_pair(0x2f806,"CJK COMPATIBILITY IDEOGRAPH-2F806"));
        data.insert(std::make_pair(0x2f807,"CJK COMPATIBILITY IDEOGRAPH-2F807"));
        data.insert(std::make_pair(0x2f808,"CJK COMPATIBILITY IDEOGRAPH-2F808"));
        data.insert(std::make_pair(0x2f809,"CJK COMPATIBILITY IDEOGRAPH-2F809"));
        data.insert(std::make_pair(0x2f80a,"CJK COMPATIBILITY IDEOGRAPH-2F80A"));
        data.insert(std::make_pair(0x2f80b,"CJK COMPATIBILITY IDEOGRAPH-2F80B"));
        data.insert(std::make_pair(0x2f80c,"CJK COMPATIBILITY IDEOGRAPH-2F80C"));
        data.insert(std::make_pair(0x2f80d,"CJK COMPATIBILITY IDEOGRAPH-2F80D"));
        data.insert(std::make_pair(0x2f80e,"CJK COMPATIBILITY IDEOGRAPH-2F80E"));
        data.insert(std::make_pair(0x2f80f,"CJK COMPATIBILITY IDEOGRAPH-2F80F"));
        data.insert(std::make_pair(0x2f810,"CJK COMPATIBILITY IDEOGRAPH-2F810"));
        data.insert(std::make_pair(0x2f811,"CJK COMPATIBILITY IDEOGRAPH-2F811"));
        data.insert(std::make_pair(0x2f812,"CJK COMPATIBILITY IDEOGRAPH-2F812"));
        data.insert(std::make_pair(0x2f813,"CJK COMPATIBILITY IDEOGRAPH-2F813"));
        data.insert(std::make_pair(0x2f814,"CJK COMPATIBILITY IDEOGRAPH-2F814"));
        data.insert(std::make_pair(0x2f815,"CJK COMPATIBILITY IDEOGRAPH-2F815"));
        data.insert(std::make_pair(0x2f816,"CJK COMPATIBILITY IDEOGRAPH-2F816"));
        data.insert(std::make_pair(0x2f817,"CJK COMPATIBILITY IDEOGRAPH-2F817"));
        data.insert(std::make_pair(0x2f818,"CJK COMPATIBILITY IDEOGRAPH-2F818"));
        data.insert(std::make_pair(0x2f819,"CJK COMPATIBILITY IDEOGRAPH-2F819"));
        data.insert(std::make_pair(0x2f81a,"CJK COMPATIBILITY IDEOGRAPH-2F81A"));
        data.insert(std::make_pair(0x2f81b,"CJK COMPATIBILITY IDEOGRAPH-2F81B"));
        data.insert(std::make_pair(0x2f81c,"CJK COMPATIBILITY IDEOGRAPH-2F81C"));
        data.insert(std::make_pair(0x2f81d,"CJK COMPATIBILITY IDEOGRAPH-2F81D"));
        data.insert(std::make_pair(0x2f81e,"CJK COMPATIBILITY IDEOGRAPH-2F81E"));
        data.insert(std::make_pair(0x2f81f,"CJK COMPATIBILITY IDEOGRAPH-2F81F"));
        data.insert(std::make_pair(0x2f820,"CJK COMPATIBILITY IDEOGRAPH-2F820"));
        data.insert(std::make_pair(0x2f821,"CJK COMPATIBILITY IDEOGRAPH-2F821"));
        data.insert(std::make_pair(0x2f822,"CJK COMPATIBILITY IDEOGRAPH-2F822"));
        data.insert(std::make_pair(0x2f823,"CJK COMPATIBILITY IDEOGRAPH-2F823"));
        data.insert(std::make_pair(0x2f824,"CJK COMPATIBILITY IDEOGRAPH-2F824"));
        data.insert(std::make_pair(0x2f825,"CJK COMPATIBILITY IDEOGRAPH-2F825"));
        data.insert(std::make_pair(0x2f826,"CJK COMPATIBILITY IDEOGRAPH-2F826"));
        data.insert(std::make_pair(0x2f827,"CJK COMPATIBILITY IDEOGRAPH-2F827"));
        data.insert(std::make_pair(0x2f828,"CJK COMPATIBILITY IDEOGRAPH-2F828"));
        data.insert(std::make_pair(0x2f829,"CJK COMPATIBILITY IDEOGRAPH-2F829"));
        data.insert(std::make_pair(0x2f82a,"CJK COMPATIBILITY IDEOGRAPH-2F82A"));
        data.insert(std::make_pair(0x2f82b,"CJK COMPATIBILITY IDEOGRAPH-2F82B"));
        data.insert(std::make_pair(0x2f82c,"CJK COMPATIBILITY IDEOGRAPH-2F82C"));
        data.insert(std::make_pair(0x2f82d,"CJK COMPATIBILITY IDEOGRAPH-2F82D"));
        data.insert(std::make_pair(0x2f82e,"CJK COMPATIBILITY IDEOGRAPH-2F82E"));
        data.insert(std::make_pair(0x2f82f,"CJK COMPATIBILITY IDEOGRAPH-2F82F"));
        data.insert(std::make_pair(0x2f830,"CJK COMPATIBILITY IDEOGRAPH-2F830"));
        data.insert(std::make_pair(0x2f831,"CJK COMPATIBILITY IDEOGRAPH-2F831"));
        data.insert(std::make_pair(0x2f832,"CJK COMPATIBILITY IDEOGRAPH-2F832"));
        data.insert(std::make_pair(0x2f833,"CJK COMPATIBILITY IDEOGRAPH-2F833"));
        data.insert(std::make_pair(0x2f834,"CJK COMPATIBILITY IDEOGRAPH-2F834"));
        data.insert(std::make_pair(0x2f835,"CJK COMPATIBILITY IDEOGRAPH-2F835"));
        data.insert(std::make_pair(0x2f836,"CJK COMPATIBILITY IDEOGRAPH-2F836"));
        data.insert(std::make_pair(0x2f837,"CJK COMPATIBILITY IDEOGRAPH-2F837"));
        data.insert(std::make_pair(0x2f838,"CJK COMPATIBILITY IDEOGRAPH-2F838"));
        data.insert(std::make_pair(0x2f839,"CJK COMPATIBILITY IDEOGRAPH-2F839"));
        data.insert(std::make_pair(0x2f83a,"CJK COMPATIBILITY IDEOGRAPH-2F83A"));
        data.insert(std::make_pair(0x2f83b,"CJK COMPATIBILITY IDEOGRAPH-2F83B"));
        data.insert(std::make_pair(0x2f83c,"CJK COMPATIBILITY IDEOGRAPH-2F83C"));
        data.insert(std::make_pair(0x2f83d,"CJK COMPATIBILITY IDEOGRAPH-2F83D"));
        data.insert(std::make_pair(0x2f83e,"CJK COMPATIBILITY IDEOGRAPH-2F83E"));
        data.insert(std::make_pair(0x2f83f,"CJK COMPATIBILITY IDEOGRAPH-2F83F"));
        data.insert(std::make_pair(0x2f840,"CJK COMPATIBILITY IDEOGRAPH-2F840"));
        data.insert(std::make_pair(0x2f841,"CJK COMPATIBILITY IDEOGRAPH-2F841"));
        data.insert(std::make_pair(0x2f842,"CJK COMPATIBILITY IDEOGRAPH-2F842"));
        data.insert(std::make_pair(0x2f843,"CJK COMPATIBILITY IDEOGRAPH-2F843"));
        data.insert(std::make_pair(0x2f844,"CJK COMPATIBILITY IDEOGRAPH-2F844"));
        data.insert(std::make_pair(0x2f845,"CJK COMPATIBILITY IDEOGRAPH-2F845"));
        data.insert(std::make_pair(0x2f846,"CJK COMPATIBILITY IDEOGRAPH-2F846"));
        data.insert(std::make_pair(0x2f847,"CJK COMPATIBILITY IDEOGRAPH-2F847"));
        data.insert(std::make_pair(0x2f848,"CJK COMPATIBILITY IDEOGRAPH-2F848"));
        data.insert(std::make_pair(0x2f849,"CJK COMPATIBILITY IDEOGRAPH-2F849"));
        data.insert(std::make_pair(0x2f84a,"CJK COMPATIBILITY IDEOGRAPH-2F84A"));
        data.insert(std::make_pair(0x2f84b,"CJK COMPATIBILITY IDEOGRAPH-2F84B"));
        data.insert(std::make_pair(0x2f84c,"CJK COMPATIBILITY IDEOGRAPH-2F84C"));
        data.insert(std::make_pair(0x2f84d,"CJK COMPATIBILITY IDEOGRAPH-2F84D"));
        data.insert(std::make_pair(0x2f84e,"CJK COMPATIBILITY IDEOGRAPH-2F84E"));
        data.insert(std::make_pair(0x2f84f,"CJK COMPATIBILITY IDEOGRAPH-2F84F"));
        data.insert(std::make_pair(0x2f850,"CJK COMPATIBILITY IDEOGRAPH-2F850"));
        data.insert(std::make_pair(0x2f851,"CJK COMPATIBILITY IDEOGRAPH-2F851"));
        data.insert(std::make_pair(0x2f852,"CJK COMPATIBILITY IDEOGRAPH-2F852"));
        data.insert(std::make_pair(0x2f853,"CJK COMPATIBILITY IDEOGRAPH-2F853"));
        data.insert(std::make_pair(0x2f854,"CJK COMPATIBILITY IDEOGRAPH-2F854"));
        data.insert(std::make_pair(0x2f855,"CJK COMPATIBILITY IDEOGRAPH-2F855"));
        data.insert(std::make_pair(0x2f856,"CJK COMPATIBILITY IDEOGRAPH-2F856"));
        data.insert(std::make_pair(0x2f857,"CJK COMPATIBILITY IDEOGRAPH-2F857"));
        data.insert(std::make_pair(0x2f858,"CJK COMPATIBILITY IDEOGRAPH-2F858"));
        data.insert(std::make_pair(0x2f859,"CJK COMPATIBILITY IDEOGRAPH-2F859"));
        data.insert(std::make_pair(0x2f85a,"CJK COMPATIBILITY IDEOGRAPH-2F85A"));
        data.insert(std::make_pair(0x2f85b,"CJK COMPATIBILITY IDEOGRAPH-2F85B"));
        data.insert(std::make_pair(0x2f85c,"CJK COMPATIBILITY IDEOGRAPH-2F85C"));
        data.insert(std::make_pair(0x2f85d,"CJK COMPATIBILITY IDEOGRAPH-2F85D"));
        data.insert(std::make_pair(0x2f85e,"CJK COMPATIBILITY IDEOGRAPH-2F85E"));
        data.insert(std::make_pair(0x2f85f,"CJK COMPATIBILITY IDEOGRAPH-2F85F"));
        data.insert(std::make_pair(0x2f860,"CJK COMPATIBILITY IDEOGRAPH-2F860"));
        data.insert(std::make_pair(0x2f861,"CJK COMPATIBILITY IDEOGRAPH-2F861"));
        data.insert(std::make_pair(0x2f862,"CJK COMPATIBILITY IDEOGRAPH-2F862"));
        data.insert(std::make_pair(0x2f863,"CJK COMPATIBILITY IDEOGRAPH-2F863"));
        data.insert(std::make_pair(0x2f864,"CJK COMPATIBILITY IDEOGRAPH-2F864"));
        data.insert(std::make_pair(0x2f865,"CJK COMPATIBILITY IDEOGRAPH-2F865"));
        data.insert(std::make_pair(0x2f866,"CJK COMPATIBILITY IDEOGRAPH-2F866"));
        data.insert(std::make_pair(0x2f867,"CJK COMPATIBILITY IDEOGRAPH-2F867"));
        data.insert(std::make_pair(0x2f868,"CJK COMPATIBILITY IDEOGRAPH-2F868"));
        data.insert(std::make_pair(0x2f869,"CJK COMPATIBILITY IDEOGRAPH-2F869"));
        data.insert(std::make_pair(0x2f86a,"CJK COMPATIBILITY IDEOGRAPH-2F86A"));
        data.insert(std::make_pair(0x2f86b,"CJK COMPATIBILITY IDEOGRAPH-2F86B"));
        data.insert(std::make_pair(0x2f86c,"CJK COMPATIBILITY IDEOGRAPH-2F86C"));
        data.insert(std::make_pair(0x2f86d,"CJK COMPATIBILITY IDEOGRAPH-2F86D"));
        data.insert(std::make_pair(0x2f86e,"CJK COMPATIBILITY IDEOGRAPH-2F86E"));
        data.insert(std::make_pair(0x2f86f,"CJK COMPATIBILITY IDEOGRAPH-2F86F"));
        data.insert(std::make_pair(0x2f870,"CJK COMPATIBILITY IDEOGRAPH-2F870"));
        data.insert(std::make_pair(0x2f871,"CJK COMPATIBILITY IDEOGRAPH-2F871"));
        data.insert(std::make_pair(0x2f872,"CJK COMPATIBILITY IDEOGRAPH-2F872"));
        data.insert(std::make_pair(0x2f873,"CJK COMPATIBILITY IDEOGRAPH-2F873"));
        data.insert(std::make_pair(0x2f874,"CJK COMPATIBILITY IDEOGRAPH-2F874"));
        data.insert(std::make_pair(0x2f875,"CJK COMPATIBILITY IDEOGRAPH-2F875"));
        data.insert(std::make_pair(0x2f876,"CJK COMPATIBILITY IDEOGRAPH-2F876"));
        data.insert(std::make_pair(0x2f877,"CJK COMPATIBILITY IDEOGRAPH-2F877"));
        data.insert(std::make_pair(0x2f878,"CJK COMPATIBILITY IDEOGRAPH-2F878"));
        data.insert(std::make_pair(0x2f879,"CJK COMPATIBILITY IDEOGRAPH-2F879"));
        data.insert(std::make_pair(0x2f87a,"CJK COMPATIBILITY IDEOGRAPH-2F87A"));
        data.insert(std::make_pair(0x2f87b,"CJK COMPATIBILITY IDEOGRAPH-2F87B"));
        data.insert(std::make_pair(0x2f87c,"CJK COMPATIBILITY IDEOGRAPH-2F87C"));
        data.insert(std::make_pair(0x2f87d,"CJK COMPATIBILITY IDEOGRAPH-2F87D"));
        data.insert(std::make_pair(0x2f87e,"CJK COMPATIBILITY IDEOGRAPH-2F87E"));
        data.insert(std::make_pair(0x2f87f,"CJK COMPATIBILITY IDEOGRAPH-2F87F"));
        data.insert(std::make_pair(0x2f880,"CJK COMPATIBILITY IDEOGRAPH-2F880"));
        data.insert(std::make_pair(0x2f881,"CJK COMPATIBILITY IDEOGRAPH-2F881"));
        data.insert(std::make_pair(0x2f882,"CJK COMPATIBILITY IDEOGRAPH-2F882"));
        data.insert(std::make_pair(0x2f883,"CJK COMPATIBILITY IDEOGRAPH-2F883"));
        data.insert(std::make_pair(0x2f884,"CJK COMPATIBILITY IDEOGRAPH-2F884"));
        data.insert(std::make_pair(0x2f885,"CJK COMPATIBILITY IDEOGRAPH-2F885"));
        data.insert(std::make_pair(0x2f886,"CJK COMPATIBILITY IDEOGRAPH-2F886"));
        data.insert(std::make_pair(0x2f887,"CJK COMPATIBILITY IDEOGRAPH-2F887"));
        data.insert(std::make_pair(0x2f888,"CJK COMPATIBILITY IDEOGRAPH-2F888"));
        data.insert(std::make_pair(0x2f889,"CJK COMPATIBILITY IDEOGRAPH-2F889"));
        data.insert(std::make_pair(0x2f88a,"CJK COMPATIBILITY IDEOGRAPH-2F88A"));
        data.insert(std::make_pair(0x2f88b,"CJK COMPATIBILITY IDEOGRAPH-2F88B"));
        data.insert(std::make_pair(0x2f88c,"CJK COMPATIBILITY IDEOGRAPH-2F88C"));
        data.insert(std::make_pair(0x2f88d,"CJK COMPATIBILITY IDEOGRAPH-2F88D"));
        data.insert(std::make_pair(0x2f88e,"CJK COMPATIBILITY IDEOGRAPH-2F88E"));
        data.insert(std::make_pair(0x2f88f,"CJK COMPATIBILITY IDEOGRAPH-2F88F"));
        data.insert(std::make_pair(0x2f890,"CJK COMPATIBILITY IDEOGRAPH-2F890"));
        data.insert(std::make_pair(0x2f891,"CJK COMPATIBILITY IDEOGRAPH-2F891"));
        data.insert(std::make_pair(0x2f892,"CJK COMPATIBILITY IDEOGRAPH-2F892"));
        data.insert(std::make_pair(0x2f893,"CJK COMPATIBILITY IDEOGRAPH-2F893"));
        data.insert(std::make_pair(0x2f894,"CJK COMPATIBILITY IDEOGRAPH-2F894"));
        data.insert(std::make_pair(0x2f895,"CJK COMPATIBILITY IDEOGRAPH-2F895"));
        data.insert(std::make_pair(0x2f896,"CJK COMPATIBILITY IDEOGRAPH-2F896"));
        data.insert(std::make_pair(0x2f897,"CJK COMPATIBILITY IDEOGRAPH-2F897"));
        data.insert(std::make_pair(0x2f898,"CJK COMPATIBILITY IDEOGRAPH-2F898"));
        data.insert(std::make_pair(0x2f899,"CJK COMPATIBILITY IDEOGRAPH-2F899"));
        data.insert(std::make_pair(0x2f89a,"CJK COMPATIBILITY IDEOGRAPH-2F89A"));
        data.insert(std::make_pair(0x2f89b,"CJK COMPATIBILITY IDEOGRAPH-2F89B"));
        data.insert(std::make_pair(0x2f89c,"CJK COMPATIBILITY IDEOGRAPH-2F89C"));
        data.insert(std::make_pair(0x2f89d,"CJK COMPATIBILITY IDEOGRAPH-2F89D"));
        data.insert(std::make_pair(0x2f89e,"CJK COMPATIBILITY IDEOGRAPH-2F89E"));
        data.insert(std::make_pair(0x2f89f,"CJK COMPATIBILITY IDEOGRAPH-2F89F"));
        data.insert(std::make_pair(0x2f8a0,"CJK COMPATIBILITY IDEOGRAPH-2F8A0"));
        data.insert(std::make_pair(0x2f8a1,"CJK COMPATIBILITY IDEOGRAPH-2F8A1"));
        data.insert(std::make_pair(0x2f8a2,"CJK COMPATIBILITY IDEOGRAPH-2F8A2"));
        data.insert(std::make_pair(0x2f8a3,"CJK COMPATIBILITY IDEOGRAPH-2F8A3"));
        data.insert(std::make_pair(0x2f8a4,"CJK COMPATIBILITY IDEOGRAPH-2F8A4"));
        data.insert(std::make_pair(0x2f8a5,"CJK COMPATIBILITY IDEOGRAPH-2F8A5"));
        data.insert(std::make_pair(0x2f8a6,"CJK COMPATIBILITY IDEOGRAPH-2F8A6"));
        data.insert(std::make_pair(0x2f8a7,"CJK COMPATIBILITY IDEOGRAPH-2F8A7"));
        data.insert(std::make_pair(0x2f8a8,"CJK COMPATIBILITY IDEOGRAPH-2F8A8"));
        data.insert(std::make_pair(0x2f8a9,"CJK COMPATIBILITY IDEOGRAPH-2F8A9"));
        data.insert(std::make_pair(0x2f8aa,"CJK COMPATIBILITY IDEOGRAPH-2F8AA"));
        data.insert(std::make_pair(0x2f8ab,"CJK COMPATIBILITY IDEOGRAPH-2F8AB"));
        data.insert(std::make_pair(0x2f8ac,"CJK COMPATIBILITY IDEOGRAPH-2F8AC"));
        data.insert(std::make_pair(0x2f8ad,"CJK COMPATIBILITY IDEOGRAPH-2F8AD"));
        data.insert(std::make_pair(0x2f8ae,"CJK COMPATIBILITY IDEOGRAPH-2F8AE"));
        data.insert(std::make_pair(0x2f8af,"CJK COMPATIBILITY IDEOGRAPH-2F8AF"));
        data.insert(std::make_pair(0x2f8b0,"CJK COMPATIBILITY IDEOGRAPH-2F8B0"));
        data.insert(std::make_pair(0x2f8b1,"CJK COMPATIBILITY IDEOGRAPH-2F8B1"));
        data.insert(std::make_pair(0x2f8b2,"CJK COMPATIBILITY IDEOGRAPH-2F8B2"));
        data.insert(std::make_pair(0x2f8b3,"CJK COMPATIBILITY IDEOGRAPH-2F8B3"));
        data.insert(std::make_pair(0x2f8b4,"CJK COMPATIBILITY IDEOGRAPH-2F8B4"));
        data.insert(std::make_pair(0x2f8b5,"CJK COMPATIBILITY IDEOGRAPH-2F8B5"));
        data.insert(std::make_pair(0x2f8b6,"CJK COMPATIBILITY IDEOGRAPH-2F8B6"));
        data.insert(std::make_pair(0x2f8b7,"CJK COMPATIBILITY IDEOGRAPH-2F8B7"));
        data.insert(std::make_pair(0x2f8b8,"CJK COMPATIBILITY IDEOGRAPH-2F8B8"));
        data.insert(std::make_pair(0x2f8b9,"CJK COMPATIBILITY IDEOGRAPH-2F8B9"));
        data.insert(std::make_pair(0x2f8ba,"CJK COMPATIBILITY IDEOGRAPH-2F8BA"));
        data.insert(std::make_pair(0x2f8bb,"CJK COMPATIBILITY IDEOGRAPH-2F8BB"));
        data.insert(std::make_pair(0x2f8bc,"CJK COMPATIBILITY IDEOGRAPH-2F8BC"));
        data.insert(std::make_pair(0x2f8bd,"CJK COMPATIBILITY IDEOGRAPH-2F8BD"));
        data.insert(std::make_pair(0x2f8be,"CJK COMPATIBILITY IDEOGRAPH-2F8BE"));
        data.insert(std::make_pair(0x2f8bf,"CJK COMPATIBILITY IDEOGRAPH-2F8BF"));
        data.insert(std::make_pair(0x2f8c0,"CJK COMPATIBILITY IDEOGRAPH-2F8C0"));
        data.insert(std::make_pair(0x2f8c1,"CJK COMPATIBILITY IDEOGRAPH-2F8C1"));
        data.insert(std::make_pair(0x2f8c2,"CJK COMPATIBILITY IDEOGRAPH-2F8C2"));
        data.insert(std::make_pair(0x2f8c3,"CJK COMPATIBILITY IDEOGRAPH-2F8C3"));
        data.insert(std::make_pair(0x2f8c4,"CJK COMPATIBILITY IDEOGRAPH-2F8C4"));
        data.insert(std::make_pair(0x2f8c5,"CJK COMPATIBILITY IDEOGRAPH-2F8C5"));
        data.insert(std::make_pair(0x2f8c6,"CJK COMPATIBILITY IDEOGRAPH-2F8C6"));
        data.insert(std::make_pair(0x2f8c7,"CJK COMPATIBILITY IDEOGRAPH-2F8C7"));
        data.insert(std::make_pair(0x2f8c8,"CJK COMPATIBILITY IDEOGRAPH-2F8C8"));
        data.insert(std::make_pair(0x2f8c9,"CJK COMPATIBILITY IDEOGRAPH-2F8C9"));
        data.insert(std::make_pair(0x2f8ca,"CJK COMPATIBILITY IDEOGRAPH-2F8CA"));
        data.insert(std::make_pair(0x2f8cb,"CJK COMPATIBILITY IDEOGRAPH-2F8CB"));
        data.insert(std::make_pair(0x2f8cc,"CJK COMPATIBILITY IDEOGRAPH-2F8CC"));
        data.insert(std::make_pair(0x2f8cd,"CJK COMPATIBILITY IDEOGRAPH-2F8CD"));
        data.insert(std::make_pair(0x2f8ce,"CJK COMPATIBILITY IDEOGRAPH-2F8CE"));
        data.insert(std::make_pair(0x2f8cf,"CJK COMPATIBILITY IDEOGRAPH-2F8CF"));
        data.insert(std::make_pair(0x2f8d0,"CJK COMPATIBILITY IDEOGRAPH-2F8D0"));
        data.insert(std::make_pair(0x2f8d1,"CJK COMPATIBILITY IDEOGRAPH-2F8D1"));
        data.insert(std::make_pair(0x2f8d2,"CJK COMPATIBILITY IDEOGRAPH-2F8D2"));
        data.insert(std::make_pair(0x2f8d3,"CJK COMPATIBILITY IDEOGRAPH-2F8D3"));
        data.insert(std::make_pair(0x2f8d4,"CJK COMPATIBILITY IDEOGRAPH-2F8D4"));
        data.insert(std::make_pair(0x2f8d5,"CJK COMPATIBILITY IDEOGRAPH-2F8D5"));
        data.insert(std::make_pair(0x2f8d6,"CJK COMPATIBILITY IDEOGRAPH-2F8D6"));
        data.insert(std::make_pair(0x2f8d7,"CJK COMPATIBILITY IDEOGRAPH-2F8D7"));
        data.insert(std::make_pair(0x2f8d8,"CJK COMPATIBILITY IDEOGRAPH-2F8D8"));
        data.insert(std::make_pair(0x2f8d9,"CJK COMPATIBILITY IDEOGRAPH-2F8D9"));
        data.insert(std::make_pair(0x2f8da,"CJK COMPATIBILITY IDEOGRAPH-2F8DA"));
        data.insert(std::make_pair(0x2f8db,"CJK COMPATIBILITY IDEOGRAPH-2F8DB"));
        data.insert(std::make_pair(0x2f8dc,"CJK COMPATIBILITY IDEOGRAPH-2F8DC"));
        data.insert(std::make_pair(0x2f8dd,"CJK COMPATIBILITY IDEOGRAPH-2F8DD"));
        data.insert(std::make_pair(0x2f8de,"CJK COMPATIBILITY IDEOGRAPH-2F8DE"));
        data.insert(std::make_pair(0x2f8df,"CJK COMPATIBILITY IDEOGRAPH-2F8DF"));
        data.insert(std::make_pair(0x2f8e0,"CJK COMPATIBILITY IDEOGRAPH-2F8E0"));
        data.insert(std::make_pair(0x2f8e1,"CJK COMPATIBILITY IDEOGRAPH-2F8E1"));
        data.insert(std::make_pair(0x2f8e2,"CJK COMPATIBILITY IDEOGRAPH-2F8E2"));
        data.insert(std::make_pair(0x2f8e3,"CJK COMPATIBILITY IDEOGRAPH-2F8E3"));
        data.insert(std::make_pair(0x2f8e4,"CJK COMPATIBILITY IDEOGRAPH-2F8E4"));
        data.insert(std::make_pair(0x2f8e5,"CJK COMPATIBILITY IDEOGRAPH-2F8E5"));
        data.insert(std::make_pair(0x2f8e6,"CJK COMPATIBILITY IDEOGRAPH-2F8E6"));
        data.insert(std::make_pair(0x2f8e7,"CJK COMPATIBILITY IDEOGRAPH-2F8E7"));
        data.insert(std::make_pair(0x2f8e8,"CJK COMPATIBILITY IDEOGRAPH-2F8E8"));
        data.insert(std::make_pair(0x2f8e9,"CJK COMPATIBILITY IDEOGRAPH-2F8E9"));
        data.insert(std::make_pair(0x2f8ea,"CJK COMPATIBILITY IDEOGRAPH-2F8EA"));
        data.insert(std::make_pair(0x2f8eb,"CJK COMPATIBILITY IDEOGRAPH-2F8EB"));
        data.insert(std::make_pair(0x2f8ec,"CJK COMPATIBILITY IDEOGRAPH-2F8EC"));
        data.insert(std::make_pair(0x2f8ed,"CJK COMPATIBILITY IDEOGRAPH-2F8ED"));
        data.insert(std::make_pair(0x2f8ee,"CJK COMPATIBILITY IDEOGRAPH-2F8EE"));
        data.insert(std::make_pair(0x2f8ef,"CJK COMPATIBILITY IDEOGRAPH-2F8EF"));
        data.insert(std::make_pair(0x2f8f0,"CJK COMPATIBILITY IDEOGRAPH-2F8F0"));
        data.insert(std::make_pair(0x2f8f1,"CJK COMPATIBILITY IDEOGRAPH-2F8F1"));
        data.insert(std::make_pair(0x2f8f2,"CJK COMPATIBILITY IDEOGRAPH-2F8F2"));
        data.insert(std::make_pair(0x2f8f3,"CJK COMPATIBILITY IDEOGRAPH-2F8F3"));
        data.insert(std::make_pair(0x2f8f4,"CJK COMPATIBILITY IDEOGRAPH-2F8F4"));
        data.insert(std::make_pair(0x2f8f5,"CJK COMPATIBILITY IDEOGRAPH-2F8F5"));
        data.insert(std::make_pair(0x2f8f6,"CJK COMPATIBILITY IDEOGRAPH-2F8F6"));
        data.insert(std::make_pair(0x2f8f7,"CJK COMPATIBILITY IDEOGRAPH-2F8F7"));
        data.insert(std::make_pair(0x2f8f8,"CJK COMPATIBILITY IDEOGRAPH-2F8F8"));
        data.insert(std::make_pair(0x2f8f9,"CJK COMPATIBILITY IDEOGRAPH-2F8F9"));
        data.insert(std::make_pair(0x2f8fa,"CJK COMPATIBILITY IDEOGRAPH-2F8FA"));
        data.insert(std::make_pair(0x2f8fb,"CJK COMPATIBILITY IDEOGRAPH-2F8FB"));
        data.insert(std::make_pair(0x2f8fc,"CJK COMPATIBILITY IDEOGRAPH-2F8FC"));
        data.insert(std::make_pair(0x2f8fd,"CJK COMPATIBILITY IDEOGRAPH-2F8FD"));
        data.insert(std::make_pair(0x2f8fe,"CJK COMPATIBILITY IDEOGRAPH-2F8FE"));
        data.insert(std::make_pair(0x2f8ff,"CJK COMPATIBILITY IDEOGRAPH-2F8FF"));
        data.insert(std::make_pair(0x2f900,"CJK COMPATIBILITY IDEOGRAPH-2F900"));
        data.insert(std::make_pair(0x2f901,"CJK COMPATIBILITY IDEOGRAPH-2F901"));
        data.insert(std::make_pair(0x2f902,"CJK COMPATIBILITY IDEOGRAPH-2F902"));
        data.insert(std::make_pair(0x2f903,"CJK COMPATIBILITY IDEOGRAPH-2F903"));
        data.insert(std::make_pair(0x2f904,"CJK COMPATIBILITY IDEOGRAPH-2F904"));
        data.insert(std::make_pair(0x2f905,"CJK COMPATIBILITY IDEOGRAPH-2F905"));
        data.insert(std::make_pair(0x2f906,"CJK COMPATIBILITY IDEOGRAPH-2F906"));
        data.insert(std::make_pair(0x2f907,"CJK COMPATIBILITY IDEOGRAPH-2F907"));
        data.insert(std::make_pair(0x2f908,"CJK COMPATIBILITY IDEOGRAPH-2F908"));
        data.insert(std::make_pair(0x2f909,"CJK COMPATIBILITY IDEOGRAPH-2F909"));
        data.insert(std::make_pair(0x2f90a,"CJK COMPATIBILITY IDEOGRAPH-2F90A"));
        data.insert(std::make_pair(0x2f90b,"CJK COMPATIBILITY IDEOGRAPH-2F90B"));
        data.insert(std::make_pair(0x2f90c,"CJK COMPATIBILITY IDEOGRAPH-2F90C"));
        data.insert(std::make_pair(0x2f90d,"CJK COMPATIBILITY IDEOGRAPH-2F90D"));
        data.insert(std::make_pair(0x2f90e,"CJK COMPATIBILITY IDEOGRAPH-2F90E"));
        data.insert(std::make_pair(0x2f90f,"CJK COMPATIBILITY IDEOGRAPH-2F90F"));
        data.insert(std::make_pair(0x2f910,"CJK COMPATIBILITY IDEOGRAPH-2F910"));
        data.insert(std::make_pair(0x2f911,"CJK COMPATIBILITY IDEOGRAPH-2F911"));
        data.insert(std::make_pair(0x2f912,"CJK COMPATIBILITY IDEOGRAPH-2F912"));
        data.insert(std::make_pair(0x2f913,"CJK COMPATIBILITY IDEOGRAPH-2F913"));
        data.insert(std::make_pair(0x2f914,"CJK COMPATIBILITY IDEOGRAPH-2F914"));
        data.insert(std::make_pair(0x2f915,"CJK COMPATIBILITY IDEOGRAPH-2F915"));
        data.insert(std::make_pair(0x2f916,"CJK COMPATIBILITY IDEOGRAPH-2F916"));
        data.insert(std::make_pair(0x2f917,"CJK COMPATIBILITY IDEOGRAPH-2F917"));
        data.insert(std::make_pair(0x2f918,"CJK COMPATIBILITY IDEOGRAPH-2F918"));
        data.insert(std::make_pair(0x2f919,"CJK COMPATIBILITY IDEOGRAPH-2F919"));
        data.insert(std::make_pair(0x2f91a,"CJK COMPATIBILITY IDEOGRAPH-2F91A"));
        data.insert(std::make_pair(0x2f91b,"CJK COMPATIBILITY IDEOGRAPH-2F91B"));
        data.insert(std::make_pair(0x2f91c,"CJK COMPATIBILITY IDEOGRAPH-2F91C"));
        data.insert(std::make_pair(0x2f91d,"CJK COMPATIBILITY IDEOGRAPH-2F91D"));
        data.insert(std::make_pair(0x2f91e,"CJK COMPATIBILITY IDEOGRAPH-2F91E"));
        data.insert(std::make_pair(0x2f91f,"CJK COMPATIBILITY IDEOGRAPH-2F91F"));
        data.insert(std::make_pair(0x2f920,"CJK COMPATIBILITY IDEOGRAPH-2F920"));
        data.insert(std::make_pair(0x2f921,"CJK COMPATIBILITY IDEOGRAPH-2F921"));
        data.insert(std::make_pair(0x2f922,"CJK COMPATIBILITY IDEOGRAPH-2F922"));
        data.insert(std::make_pair(0x2f923,"CJK COMPATIBILITY IDEOGRAPH-2F923"));
        data.insert(std::make_pair(0x2f924,"CJK COMPATIBILITY IDEOGRAPH-2F924"));
        data.insert(std::make_pair(0x2f925,"CJK COMPATIBILITY IDEOGRAPH-2F925"));
        data.insert(std::make_pair(0x2f926,"CJK COMPATIBILITY IDEOGRAPH-2F926"));
        data.insert(std::make_pair(0x2f927,"CJK COMPATIBILITY IDEOGRAPH-2F927"));
        data.insert(std::make_pair(0x2f928,"CJK COMPATIBILITY IDEOGRAPH-2F928"));
        data.insert(std::make_pair(0x2f929,"CJK COMPATIBILITY IDEOGRAPH-2F929"));
        data.insert(std::make_pair(0x2f92a,"CJK COMPATIBILITY IDEOGRAPH-2F92A"));
        data.insert(std::make_pair(0x2f92b,"CJK COMPATIBILITY IDEOGRAPH-2F92B"));
        data.insert(std::make_pair(0x2f92c,"CJK COMPATIBILITY IDEOGRAPH-2F92C"));
        data.insert(std::make_pair(0x2f92d,"CJK COMPATIBILITY IDEOGRAPH-2F92D"));
        data.insert(std::make_pair(0x2f92e,"CJK COMPATIBILITY IDEOGRAPH-2F92E"));
        data.insert(std::make_pair(0x2f92f,"CJK COMPATIBILITY IDEOGRAPH-2F92F"));
        data.insert(std::make_pair(0x2f930,"CJK COMPATIBILITY IDEOGRAPH-2F930"));
        data.insert(std::make_pair(0x2f931,"CJK COMPATIBILITY IDEOGRAPH-2F931"));
        data.insert(std::make_pair(0x2f932,"CJK COMPATIBILITY IDEOGRAPH-2F932"));
        data.insert(std::make_pair(0x2f933,"CJK COMPATIBILITY IDEOGRAPH-2F933"));
        data.insert(std::make_pair(0x2f934,"CJK COMPATIBILITY IDEOGRAPH-2F934"));
        data.insert(std::make_pair(0x2f935,"CJK COMPATIBILITY IDEOGRAPH-2F935"));
        data.insert(std::make_pair(0x2f936,"CJK COMPATIBILITY IDEOGRAPH-2F936"));
        data.insert(std::make_pair(0x2f937,"CJK COMPATIBILITY IDEOGRAPH-2F937"));
        data.insert(std::make_pair(0x2f938,"CJK COMPATIBILITY IDEOGRAPH-2F938"));
        data.insert(std::make_pair(0x2f939,"CJK COMPATIBILITY IDEOGRAPH-2F939"));
        data.insert(std::make_pair(0x2f93a,"CJK COMPATIBILITY IDEOGRAPH-2F93A"));
        data.insert(std::make_pair(0x2f93b,"CJK COMPATIBILITY IDEOGRAPH-2F93B"));
        data.insert(std::make_pair(0x2f93c,"CJK COMPATIBILITY IDEOGRAPH-2F93C"));
        data.insert(std::make_pair(0x2f93d,"CJK COMPATIBILITY IDEOGRAPH-2F93D"));
        data.insert(std::make_pair(0x2f93e,"CJK COMPATIBILITY IDEOGRAPH-2F93E"));
        data.insert(std::make_pair(0x2f93f,"CJK COMPATIBILITY IDEOGRAPH-2F93F"));
        data.insert(std::make_pair(0x2f940,"CJK COMPATIBILITY IDEOGRAPH-2F940"));
        data.insert(std::make_pair(0x2f941,"CJK COMPATIBILITY IDEOGRAPH-2F941"));
        data.insert(std::make_pair(0x2f942,"CJK COMPATIBILITY IDEOGRAPH-2F942"));
        data.insert(std::make_pair(0x2f943,"CJK COMPATIBILITY IDEOGRAPH-2F943"));
        data.insert(std::make_pair(0x2f944,"CJK COMPATIBILITY IDEOGRAPH-2F944"));
        data.insert(std::make_pair(0x2f945,"CJK COMPATIBILITY IDEOGRAPH-2F945"));
        data.insert(std::make_pair(0x2f946,"CJK COMPATIBILITY IDEOGRAPH-2F946"));
        data.insert(std::make_pair(0x2f947,"CJK COMPATIBILITY IDEOGRAPH-2F947"));
        data.insert(std::make_pair(0x2f948,"CJK COMPATIBILITY IDEOGRAPH-2F948"));
        data.insert(std::make_pair(0x2f949,"CJK COMPATIBILITY IDEOGRAPH-2F949"));
        data.insert(std::make_pair(0x2f94a,"CJK COMPATIBILITY IDEOGRAPH-2F94A"));
        data.insert(std::make_pair(0x2f94b,"CJK COMPATIBILITY IDEOGRAPH-2F94B"));
        data.insert(std::make_pair(0x2f94c,"CJK COMPATIBILITY IDEOGRAPH-2F94C"));
        data.insert(std::make_pair(0x2f94d,"CJK COMPATIBILITY IDEOGRAPH-2F94D"));
        data.insert(std::make_pair(0x2f94e,"CJK COMPATIBILITY IDEOGRAPH-2F94E"));
        data.insert(std::make_pair(0x2f94f,"CJK COMPATIBILITY IDEOGRAPH-2F94F"));
        data.insert(std::make_pair(0x2f950,"CJK COMPATIBILITY IDEOGRAPH-2F950"));
        data.insert(std::make_pair(0x2f951,"CJK COMPATIBILITY IDEOGRAPH-2F951"));
        data.insert(std::make_pair(0x2f952,"CJK COMPATIBILITY IDEOGRAPH-2F952"));
        data.insert(std::make_pair(0x2f953,"CJK COMPATIBILITY IDEOGRAPH-2F953"));
        data.insert(std::make_pair(0x2f954,"CJK COMPATIBILITY IDEOGRAPH-2F954"));
        data.insert(std::make_pair(0x2f955,"CJK COMPATIBILITY IDEOGRAPH-2F955"));
        data.insert(std::make_pair(0x2f956,"CJK COMPATIBILITY IDEOGRAPH-2F956"));
        data.insert(std::make_pair(0x2f957,"CJK COMPATIBILITY IDEOGRAPH-2F957"));
        data.insert(std::make_pair(0x2f958,"CJK COMPATIBILITY IDEOGRAPH-2F958"));
        data.insert(std::make_pair(0x2f959,"CJK COMPATIBILITY IDEOGRAPH-2F959"));
        data.insert(std::make_pair(0x2f95a,"CJK COMPATIBILITY IDEOGRAPH-2F95A"));
        data.insert(std::make_pair(0x2f95b,"CJK COMPATIBILITY IDEOGRAPH-2F95B"));
        data.insert(std::make_pair(0x2f95c,"CJK COMPATIBILITY IDEOGRAPH-2F95C"));
        data.insert(std::make_pair(0x2f95d,"CJK COMPATIBILITY IDEOGRAPH-2F95D"));
        data.insert(std::make_pair(0x2f95e,"CJK COMPATIBILITY IDEOGRAPH-2F95E"));
        data.insert(std::make_pair(0x2f95f,"CJK COMPATIBILITY IDEOGRAPH-2F95F"));
        data.insert(std::make_pair(0x2f960,"CJK COMPATIBILITY IDEOGRAPH-2F960"));
        data.insert(std::make_pair(0x2f961,"CJK COMPATIBILITY IDEOGRAPH-2F961"));
        data.insert(std::make_pair(0x2f962,"CJK COMPATIBILITY IDEOGRAPH-2F962"));
        data.insert(std::make_pair(0x2f963,"CJK COMPATIBILITY IDEOGRAPH-2F963"));
        data.insert(std::make_pair(0x2f964,"CJK COMPATIBILITY IDEOGRAPH-2F964"));
        data.insert(std::make_pair(0x2f965,"CJK COMPATIBILITY IDEOGRAPH-2F965"));
        data.insert(std::make_pair(0x2f966,"CJK COMPATIBILITY IDEOGRAPH-2F966"));
        data.insert(std::make_pair(0x2f967,"CJK COMPATIBILITY IDEOGRAPH-2F967"));
        data.insert(std::make_pair(0x2f968,"CJK COMPATIBILITY IDEOGRAPH-2F968"));
        data.insert(std::make_pair(0x2f969,"CJK COMPATIBILITY IDEOGRAPH-2F969"));
        data.insert(std::make_pair(0x2f96a,"CJK COMPATIBILITY IDEOGRAPH-2F96A"));
        data.insert(std::make_pair(0x2f96b,"CJK COMPATIBILITY IDEOGRAPH-2F96B"));
        data.insert(std::make_pair(0x2f96c,"CJK COMPATIBILITY IDEOGRAPH-2F96C"));
        data.insert(std::make_pair(0x2f96d,"CJK COMPATIBILITY IDEOGRAPH-2F96D"));
        data.insert(std::make_pair(0x2f96e,"CJK COMPATIBILITY IDEOGRAPH-2F96E"));
        data.insert(std::make_pair(0x2f96f,"CJK COMPATIBILITY IDEOGRAPH-2F96F"));
        data.insert(std::make_pair(0x2f970,"CJK COMPATIBILITY IDEOGRAPH-2F970"));
        data.insert(std::make_pair(0x2f971,"CJK COMPATIBILITY IDEOGRAPH-2F971"));
        data.insert(std::make_pair(0x2f972,"CJK COMPATIBILITY IDEOGRAPH-2F972"));
        data.insert(std::make_pair(0x2f973,"CJK COMPATIBILITY IDEOGRAPH-2F973"));
        data.insert(std::make_pair(0x2f974,"CJK COMPATIBILITY IDEOGRAPH-2F974"));
        data.insert(std::make_pair(0x2f975,"CJK COMPATIBILITY IDEOGRAPH-2F975"));
        data.insert(std::make_pair(0x2f976,"CJK COMPATIBILITY IDEOGRAPH-2F976"));
        data.insert(std::make_pair(0x2f977,"CJK COMPATIBILITY IDEOGRAPH-2F977"));
        data.insert(std::make_pair(0x2f978,"CJK COMPATIBILITY IDEOGRAPH-2F978"));
        data.insert(std::make_pair(0x2f979,"CJK COMPATIBILITY IDEOGRAPH-2F979"));
        data.insert(std::make_pair(0x2f97a,"CJK COMPATIBILITY IDEOGRAPH-2F97A"));
        data.insert(std::make_pair(0x2f97b,"CJK COMPATIBILITY IDEOGRAPH-2F97B"));
        data.insert(std::make_pair(0x2f97c,"CJK COMPATIBILITY IDEOGRAPH-2F97C"));
        data.insert(std::make_pair(0x2f97d,"CJK COMPATIBILITY IDEOGRAPH-2F97D"));
        data.insert(std::make_pair(0x2f97e,"CJK COMPATIBILITY IDEOGRAPH-2F97E"));
        data.insert(std::make_pair(0x2f97f,"CJK COMPATIBILITY IDEOGRAPH-2F97F"));
        data.insert(std::make_pair(0x2f980,"CJK COMPATIBILITY IDEOGRAPH-2F980"));
        data.insert(std::make_pair(0x2f981,"CJK COMPATIBILITY IDEOGRAPH-2F981"));
        data.insert(std::make_pair(0x2f982,"CJK COMPATIBILITY IDEOGRAPH-2F982"));
        data.insert(std::make_pair(0x2f983,"CJK COMPATIBILITY IDEOGRAPH-2F983"));
        data.insert(std::make_pair(0x2f984,"CJK COMPATIBILITY IDEOGRAPH-2F984"));
        data.insert(std::make_pair(0x2f985,"CJK COMPATIBILITY IDEOGRAPH-2F985"));
        data.insert(std::make_pair(0x2f986,"CJK COMPATIBILITY IDEOGRAPH-2F986"));
        data.insert(std::make_pair(0x2f987,"CJK COMPATIBILITY IDEOGRAPH-2F987"));
        data.insert(std::make_pair(0x2f988,"CJK COMPATIBILITY IDEOGRAPH-2F988"));
        data.insert(std::make_pair(0x2f989,"CJK COMPATIBILITY IDEOGRAPH-2F989"));
        data.insert(std::make_pair(0x2f98a,"CJK COMPATIBILITY IDEOGRAPH-2F98A"));
        data.insert(std::make_pair(0x2f98b,"CJK COMPATIBILITY IDEOGRAPH-2F98B"));
        data.insert(std::make_pair(0x2f98c,"CJK COMPATIBILITY IDEOGRAPH-2F98C"));
        data.insert(std::make_pair(0x2f98d,"CJK COMPATIBILITY IDEOGRAPH-2F98D"));
        data.insert(std::make_pair(0x2f98e,"CJK COMPATIBILITY IDEOGRAPH-2F98E"));
        data.insert(std::make_pair(0x2f98f,"CJK COMPATIBILITY IDEOGRAPH-2F98F"));
        data.insert(std::make_pair(0x2f990,"CJK COMPATIBILITY IDEOGRAPH-2F990"));
        data.insert(std::make_pair(0x2f991,"CJK COMPATIBILITY IDEOGRAPH-2F991"));
        data.insert(std::make_pair(0x2f992,"CJK COMPATIBILITY IDEOGRAPH-2F992"));
        data.insert(std::make_pair(0x2f993,"CJK COMPATIBILITY IDEOGRAPH-2F993"));
        data.insert(std::make_pair(0x2f994,"CJK COMPATIBILITY IDEOGRAPH-2F994"));
        data.insert(std::make_pair(0x2f995,"CJK COMPATIBILITY IDEOGRAPH-2F995"));
        data.insert(std::make_pair(0x2f996,"CJK COMPATIBILITY IDEOGRAPH-2F996"));
        data.insert(std::make_pair(0x2f997,"CJK COMPATIBILITY IDEOGRAPH-2F997"));
        data.insert(std::make_pair(0x2f998,"CJK COMPATIBILITY IDEOGRAPH-2F998"));
        data.insert(std::make_pair(0x2f999,"CJK COMPATIBILITY IDEOGRAPH-2F999"));
        data.insert(std::make_pair(0x2f99a,"CJK COMPATIBILITY IDEOGRAPH-2F99A"));
        data.insert(std::make_pair(0x2f99b,"CJK COMPATIBILITY IDEOGRAPH-2F99B"));
        data.insert(std::make_pair(0x2f99c,"CJK COMPATIBILITY IDEOGRAPH-2F99C"));
        data.insert(std::make_pair(0x2f99d,"CJK COMPATIBILITY IDEOGRAPH-2F99D"));
        data.insert(std::make_pair(0x2f99e,"CJK COMPATIBILITY IDEOGRAPH-2F99E"));
        data.insert(std::make_pair(0x2f99f,"CJK COMPATIBILITY IDEOGRAPH-2F99F"));
        data.insert(std::make_pair(0x2f9a0,"CJK COMPATIBILITY IDEOGRAPH-2F9A0"));
        data.insert(std::make_pair(0x2f9a1,"CJK COMPATIBILITY IDEOGRAPH-2F9A1"));
        data.insert(std::make_pair(0x2f9a2,"CJK COMPATIBILITY IDEOGRAPH-2F9A2"));
        data.insert(std::make_pair(0x2f9a3,"CJK COMPATIBILITY IDEOGRAPH-2F9A3"));
        data.insert(std::make_pair(0x2f9a4,"CJK COMPATIBILITY IDEOGRAPH-2F9A4"));
        data.insert(std::make_pair(0x2f9a5,"CJK COMPATIBILITY IDEOGRAPH-2F9A5"));
        data.insert(std::make_pair(0x2f9a6,"CJK COMPATIBILITY IDEOGRAPH-2F9A6"));
        data.insert(std::make_pair(0x2f9a7,"CJK COMPATIBILITY IDEOGRAPH-2F9A7"));
        data.insert(std::make_pair(0x2f9a8,"CJK COMPATIBILITY IDEOGRAPH-2F9A8"));
        data.insert(std::make_pair(0x2f9a9,"CJK COMPATIBILITY IDEOGRAPH-2F9A9"));
        data.insert(std::make_pair(0x2f9aa,"CJK COMPATIBILITY IDEOGRAPH-2F9AA"));
        data.insert(std::make_pair(0x2f9ab,"CJK COMPATIBILITY IDEOGRAPH-2F9AB"));
        data.insert(std::make_pair(0x2f9ac,"CJK COMPATIBILITY IDEOGRAPH-2F9AC"));
        data.insert(std::make_pair(0x2f9ad,"CJK COMPATIBILITY IDEOGRAPH-2F9AD"));
        data.insert(std::make_pair(0x2f9ae,"CJK COMPATIBILITY IDEOGRAPH-2F9AE"));
        data.insert(std::make_pair(0x2f9af,"CJK COMPATIBILITY IDEOGRAPH-2F9AF"));
        data.insert(std::make_pair(0x2f9b0,"CJK COMPATIBILITY IDEOGRAPH-2F9B0"));
        data.insert(std::make_pair(0x2f9b1,"CJK COMPATIBILITY IDEOGRAPH-2F9B1"));
        data.insert(std::make_pair(0x2f9b2,"CJK COMPATIBILITY IDEOGRAPH-2F9B2"));
        data.insert(std::make_pair(0x2f9b3,"CJK COMPATIBILITY IDEOGRAPH-2F9B3"));
        data.insert(std::make_pair(0x2f9b4,"CJK COMPATIBILITY IDEOGRAPH-2F9B4"));
        data.insert(std::make_pair(0x2f9b5,"CJK COMPATIBILITY IDEOGRAPH-2F9B5"));
        data.insert(std::make_pair(0x2f9b6,"CJK COMPATIBILITY IDEOGRAPH-2F9B6"));
        data.insert(std::make_pair(0x2f9b7,"CJK COMPATIBILITY IDEOGRAPH-2F9B7"));
        data.insert(std::make_pair(0x2f9b8,"CJK COMPATIBILITY IDEOGRAPH-2F9B8"));
        data.insert(std::make_pair(0x2f9b9,"CJK COMPATIBILITY IDEOGRAPH-2F9B9"));
        data.insert(std::make_pair(0x2f9ba,"CJK COMPATIBILITY IDEOGRAPH-2F9BA"));
        data.insert(std::make_pair(0x2f9bb,"CJK COMPATIBILITY IDEOGRAPH-2F9BB"));
        data.insert(std::make_pair(0x2f9bc,"CJK COMPATIBILITY IDEOGRAPH-2F9BC"));
        data.insert(std::make_pair(0x2f9bd,"CJK COMPATIBILITY IDEOGRAPH-2F9BD"));
        data.insert(std::make_pair(0x2f9be,"CJK COMPATIBILITY IDEOGRAPH-2F9BE"));
        data.insert(std::make_pair(0x2f9bf,"CJK COMPATIBILITY IDEOGRAPH-2F9BF"));
        data.insert(std::make_pair(0x2f9c0,"CJK COMPATIBILITY IDEOGRAPH-2F9C0"));
        data.insert(std::make_pair(0x2f9c1,"CJK COMPATIBILITY IDEOGRAPH-2F9C1"));
        data.insert(std::make_pair(0x2f9c2,"CJK COMPATIBILITY IDEOGRAPH-2F9C2"));
        data.insert(std::make_pair(0x2f9c3,"CJK COMPATIBILITY IDEOGRAPH-2F9C3"));
        data.insert(std::make_pair(0x2f9c4,"CJK COMPATIBILITY IDEOGRAPH-2F9C4"));
        data.insert(std::make_pair(0x2f9c5,"CJK COMPATIBILITY IDEOGRAPH-2F9C5"));
        data.insert(std::make_pair(0x2f9c6,"CJK COMPATIBILITY IDEOGRAPH-2F9C6"));
        data.insert(std::make_pair(0x2f9c7,"CJK COMPATIBILITY IDEOGRAPH-2F9C7"));
        data.insert(std::make_pair(0x2f9c8,"CJK COMPATIBILITY IDEOGRAPH-2F9C8"));
        data.insert(std::make_pair(0x2f9c9,"CJK COMPATIBILITY IDEOGRAPH-2F9C9"));
        data.insert(std::make_pair(0x2f9ca,"CJK COMPATIBILITY IDEOGRAPH-2F9CA"));
        data.insert(std::make_pair(0x2f9cb,"CJK COMPATIBILITY IDEOGRAPH-2F9CB"));
        data.insert(std::make_pair(0x2f9cc,"CJK COMPATIBILITY IDEOGRAPH-2F9CC"));
        data.insert(std::make_pair(0x2f9cd,"CJK COMPATIBILITY IDEOGRAPH-2F9CD"));
        data.insert(std::make_pair(0x2f9ce,"CJK COMPATIBILITY IDEOGRAPH-2F9CE"));
        data.insert(std::make_pair(0x2f9cf,"CJK COMPATIBILITY IDEOGRAPH-2F9CF"));
        data.insert(std::make_pair(0x2f9d0,"CJK COMPATIBILITY IDEOGRAPH-2F9D0"));
        data.insert(std::make_pair(0x2f9d1,"CJK COMPATIBILITY IDEOGRAPH-2F9D1"));
        data.insert(std::make_pair(0x2f9d2,"CJK COMPATIBILITY IDEOGRAPH-2F9D2"));
        data.insert(std::make_pair(0x2f9d3,"CJK COMPATIBILITY IDEOGRAPH-2F9D3"));
        data.insert(std::make_pair(0x2f9d4,"CJK COMPATIBILITY IDEOGRAPH-2F9D4"));
        data.insert(std::make_pair(0x2f9d5,"CJK COMPATIBILITY IDEOGRAPH-2F9D5"));
        data.insert(std::make_pair(0x2f9d6,"CJK COMPATIBILITY IDEOGRAPH-2F9D6"));
        data.insert(std::make_pair(0x2f9d7,"CJK COMPATIBILITY IDEOGRAPH-2F9D7"));
        data.insert(std::make_pair(0x2f9d8,"CJK COMPATIBILITY IDEOGRAPH-2F9D8"));
        data.insert(std::make_pair(0x2f9d9,"CJK COMPATIBILITY IDEOGRAPH-2F9D9"));
        data.insert(std::make_pair(0x2f9da,"CJK COMPATIBILITY IDEOGRAPH-2F9DA"));
        data.insert(std::make_pair(0x2f9db,"CJK COMPATIBILITY IDEOGRAPH-2F9DB"));
        data.insert(std::make_pair(0x2f9dc,"CJK COMPATIBILITY IDEOGRAPH-2F9DC"));
        data.insert(std::make_pair(0x2f9dd,"CJK COMPATIBILITY IDEOGRAPH-2F9DD"));
        data.insert(std::make_pair(0x2f9de,"CJK COMPATIBILITY IDEOGRAPH-2F9DE"));
        data.insert(std::make_pair(0x2f9df,"CJK COMPATIBILITY IDEOGRAPH-2F9DF"));
        data.insert(std::make_pair(0x2f9e0,"CJK COMPATIBILITY IDEOGRAPH-2F9E0"));
        data.insert(std::make_pair(0x2f9e1,"CJK COMPATIBILITY IDEOGRAPH-2F9E1"));
        data.insert(std::make_pair(0x2f9e2,"CJK COMPATIBILITY IDEOGRAPH-2F9E2"));
        data.insert(std::make_pair(0x2f9e3,"CJK COMPATIBILITY IDEOGRAPH-2F9E3"));
        data.insert(std::make_pair(0x2f9e4,"CJK COMPATIBILITY IDEOGRAPH-2F9E4"));
        data.insert(std::make_pair(0x2f9e5,"CJK COMPATIBILITY IDEOGRAPH-2F9E5"));
        data.insert(std::make_pair(0x2f9e6,"CJK COMPATIBILITY IDEOGRAPH-2F9E6"));
        data.insert(std::make_pair(0x2f9e7,"CJK COMPATIBILITY IDEOGRAPH-2F9E7"));
        data.insert(std::make_pair(0x2f9e8,"CJK COMPATIBILITY IDEOGRAPH-2F9E8"));
        data.insert(std::make_pair(0x2f9e9,"CJK COMPATIBILITY IDEOGRAPH-2F9E9"));
        data.insert(std::make_pair(0x2f9ea,"CJK COMPATIBILITY IDEOGRAPH-2F9EA"));
        data.insert(std::make_pair(0x2f9eb,"CJK COMPATIBILITY IDEOGRAPH-2F9EB"));
        data.insert(std::make_pair(0x2f9ec,"CJK COMPATIBILITY IDEOGRAPH-2F9EC"));
        data.insert(std::make_pair(0x2f9ed,"CJK COMPATIBILITY IDEOGRAPH-2F9ED"));
        data.insert(std::make_pair(0x2f9ee,"CJK COMPATIBILITY IDEOGRAPH-2F9EE"));
        data.insert(std::make_pair(0x2f9ef,"CJK COMPATIBILITY IDEOGRAPH-2F9EF"));
        data.insert(std::make_pair(0x2f9f0,"CJK COMPATIBILITY IDEOGRAPH-2F9F0"));
        data.insert(std::make_pair(0x2f9f1,"CJK COMPATIBILITY IDEOGRAPH-2F9F1"));
        data.insert(std::make_pair(0x2f9f2,"CJK COMPATIBILITY IDEOGRAPH-2F9F2"));
        data.insert(std::make_pair(0x2f9f3,"CJK COMPATIBILITY IDEOGRAPH-2F9F3"));
        data.insert(std::make_pair(0x2f9f4,"CJK COMPATIBILITY IDEOGRAPH-2F9F4"));
        data.insert(std::make_pair(0x2f9f5,"CJK COMPATIBILITY IDEOGRAPH-2F9F5"));
        data.insert(std::make_pair(0x2f9f6,"CJK COMPATIBILITY IDEOGRAPH-2F9F6"));
        data.insert(std::make_pair(0x2f9f7,"CJK COMPATIBILITY IDEOGRAPH-2F9F7"));
        data.insert(std::make_pair(0x2f9f8,"CJK COMPATIBILITY IDEOGRAPH-2F9F8"));
        data.insert(std::make_pair(0x2f9f9,"CJK COMPATIBILITY IDEOGRAPH-2F9F9"));
        data.insert(std::make_pair(0x2f9fa,"CJK COMPATIBILITY IDEOGRAPH-2F9FA"));
        data.insert(std::make_pair(0x2f9fb,"CJK COMPATIBILITY IDEOGRAPH-2F9FB"));
        data.insert(std::make_pair(0x2f9fc,"CJK COMPATIBILITY IDEOGRAPH-2F9FC"));
        data.insert(std::make_pair(0x2f9fd,"CJK COMPATIBILITY IDEOGRAPH-2F9FD"));
        data.insert(std::make_pair(0x2f9fe,"CJK COMPATIBILITY IDEOGRAPH-2F9FE"));
        data.insert(std::make_pair(0x2f9ff,"CJK COMPATIBILITY IDEOGRAPH-2F9FF"));
        data.insert(std::make_pair(0x2fa00,"CJK COMPATIBILITY IDEOGRAPH-2FA00"));
        data.insert(std::make_pair(0x2fa01,"CJK COMPATIBILITY IDEOGRAPH-2FA01"));
        data.insert(std::make_pair(0x2fa02,"CJK COMPATIBILITY IDEOGRAPH-2FA02"));
        data.insert(std::make_pair(0x2fa03,"CJK COMPATIBILITY IDEOGRAPH-2FA03"));
        data.insert(std::make_pair(0x2fa04,"CJK COMPATIBILITY IDEOGRAPH-2FA04"));
        data.insert(std::make_pair(0x2fa05,"CJK COMPATIBILITY IDEOGRAPH-2FA05"));
        data.insert(std::make_pair(0x2fa06,"CJK COMPATIBILITY IDEOGRAPH-2FA06"));
        data.insert(std::make_pair(0x2fa07,"CJK COMPATIBILITY IDEOGRAPH-2FA07"));
        data.insert(std::make_pair(0x2fa08,"CJK COMPATIBILITY IDEOGRAPH-2FA08"));
        data.insert(std::make_pair(0x2fa09,"CJK COMPATIBILITY IDEOGRAPH-2FA09"));
        data.insert(std::make_pair(0x2fa0a,"CJK COMPATIBILITY IDEOGRAPH-2FA0A"));
        data.insert(std::make_pair(0x2fa0b,"CJK COMPATIBILITY IDEOGRAPH-2FA0B"));
        data.insert(std::make_pair(0x2fa0c,"CJK COMPATIBILITY IDEOGRAPH-2FA0C"));
        data.insert(std::make_pair(0x2fa0d,"CJK COMPATIBILITY IDEOGRAPH-2FA0D"));
        data.insert(std::make_pair(0x2fa0e,"CJK COMPATIBILITY IDEOGRAPH-2FA0E"));
        data.insert(std::make_pair(0x2fa0f,"CJK COMPATIBILITY IDEOGRAPH-2FA0F"));
        data.insert(std::make_pair(0x2fa10,"CJK COMPATIBILITY IDEOGRAPH-2FA10"));
        data.insert(std::make_pair(0x2fa11,"CJK COMPATIBILITY IDEOGRAPH-2FA11"));
        data.insert(std::make_pair(0x2fa12,"CJK COMPATIBILITY IDEOGRAPH-2FA12"));
        data.insert(std::make_pair(0x2fa13,"CJK COMPATIBILITY IDEOGRAPH-2FA13"));
        data.insert(std::make_pair(0x2fa14,"CJK COMPATIBILITY IDEOGRAPH-2FA14"));
        data.insert(std::make_pair(0x2fa15,"CJK COMPATIBILITY IDEOGRAPH-2FA15"));
        data.insert(std::make_pair(0x2fa16,"CJK COMPATIBILITY IDEOGRAPH-2FA16"));
        data.insert(std::make_pair(0x2fa17,"CJK COMPATIBILITY IDEOGRAPH-2FA17"));
        data.insert(std::make_pair(0x2fa18,"CJK COMPATIBILITY IDEOGRAPH-2FA18"));
        data.insert(std::make_pair(0x2fa19,"CJK COMPATIBILITY IDEOGRAPH-2FA19"));
        data.insert(std::make_pair(0x2fa1a,"CJK COMPATIBILITY IDEOGRAPH-2FA1A"));
        data.insert(std::make_pair(0x2fa1b,"CJK COMPATIBILITY IDEOGRAPH-2FA1B"));
        data.insert(std::make_pair(0x2fa1c,"CJK COMPATIBILITY IDEOGRAPH-2FA1C"));
        data.insert(std::make_pair(0x2fa1d,"CJK COMPATIBILITY IDEOGRAPH-2FA1D"));
        data.insert(std::make_pair(0x30000,"<CJK Ideograph Extension G, First>"));
        data.insert(std::make_pair(0x3134a,"<CJK Ideograph Extension G, Last>"));
        data.insert(std::make_pair(0x31350,"<CJK Ideograph Extension H, First>"));
        data.insert(std::make_pair(0x323af,"<CJK Ideograph Extension H, Last>"));
        data.insert(std::make_pair(0xe0001,"LANGUAGE TAG"));
        data.insert(std::make_pair(0xe0020,"TAG SPACE"));
        data.insert(std::make_pair(0xe0021,"TAG EXCLAMATION MARK"));
        data.insert(std::make_pair(0xe0022,"TAG QUOTATION MARK"));
        data.insert(std::make_pair(0xe0023,"TAG NUMBER SIGN"));
        data.insert(std::make_pair(0xe0024,"TAG DOLLAR SIGN"));
        data.insert(std::make_pair(0xe0025,"TAG PERCENT SIGN"));
        data.insert(std::make_pair(0xe0026,"TAG AMPERSAND"));
        data.insert(std::make_pair(0xe0027,"TAG APOSTROPHE"));
        data.insert(std::make_pair(0xe0028,"TAG LEFT PARENTHESIS"));
        data.insert(std::make_pair(0xe0029,"TAG RIGHT PARENTHESIS"));
        data.insert(std::make_pair(0xe002a,"TAG ASTERISK"));
        data.insert(std::make_pair(0xe002b,"TAG PLUS SIGN"));
        data.insert(std::make_pair(0xe002c,"TAG COMMA"));
        data.insert(std::make_pair(0xe002d,"TAG HYPHEN-MINUS"));
        data.insert(std::make_pair(0xe002e,"TAG FULL STOP"));
        data.insert(std::make_pair(0xe002f,"TAG SOLIDUS"));
        data.insert(std::make_pair(0xe0030,"TAG DIGIT ZERO"));
        data.insert(std::make_pair(0xe0031,"TAG DIGIT ONE"));
        data.insert(std::make_pair(0xe0032,"TAG DIGIT TWO"));
        data.insert(std::make_pair(0xe0033,"TAG DIGIT THREE"));
        data.insert(std::make_pair(0xe0034,"TAG DIGIT FOUR"));
        data.insert(std::make_pair(0xe0035,"TAG DIGIT FIVE"));
        data.insert(std::make_pair(0xe0036,"TAG DIGIT SIX"));
        data.insert(std::make_pair(0xe0037,"TAG DIGIT SEVEN"));
        data.insert(std::make_pair(0xe0038,"TAG DIGIT EIGHT"));
        data.insert(std::make_pair(0xe0039,"TAG DIGIT NINE"));
        data.insert(std::make_pair(0xe003a,"TAG COLON"));
        data.insert(std::make_pair(0xe003b,"TAG SEMICOLON"));
        data.insert(std::make_pair(0xe003c,"TAG LESS-THAN SIGN"));
        data.insert(std::make_pair(0xe003d,"TAG EQUALS SIGN"));
        data.insert(std::make_pair(0xe003e,"TAG GREATER-THAN SIGN"));
        data.insert(std::make_pair(0xe003f,"TAG QUESTION MARK"));
        data.insert(std::make_pair(0xe0040,"TAG COMMERCIAL AT"));
        data.insert(std::make_pair(0xe0041,"TAG LATIN CAPITAL LETTER A"));
        data.insert(std::make_pair(0xe0042,"TAG LATIN CAPITAL LETTER B"));
        data.insert(std::make_pair(0xe0043,"TAG LATIN CAPITAL LETTER C"));
        data.insert(std::make_pair(0xe0044,"TAG LATIN CAPITAL LETTER D"));
        data.insert(std::make_pair(0xe0045,"TAG LATIN CAPITAL LETTER E"));
        data.insert(std::make_pair(0xe0046,"TAG LATIN CAPITAL LETTER F"));
        data.insert(std::make_pair(0xe0047,"TAG LATIN CAPITAL LETTER G"));
        data.insert(std::make_pair(0xe0048,"TAG LATIN CAPITAL LETTER H"));
        data.insert(std::make_pair(0xe0049,"TAG LATIN CAPITAL LETTER I"));
        data.insert(std::make_pair(0xe004a,"TAG LATIN CAPITAL LETTER J"));
        data.insert(std::make_pair(0xe004b,"TAG LATIN CAPITAL LETTER K"));
        data.insert(std::make_pair(0xe004c,"TAG LATIN CAPITAL LETTER L"));
        data.insert(std::make_pair(0xe004d,"TAG LATIN CAPITAL LETTER M"));
        data.insert(std::make_pair(0xe004e,"TAG LATIN CAPITAL LETTER N"));
        data.insert(std::make_pair(0xe004f,"TAG LATIN CAPITAL LETTER O"));
        data.insert(std::make_pair(0xe0050,"TAG LATIN CAPITAL LETTER P"));
        data.insert(std::make_pair(0xe0051,"TAG LATIN CAPITAL LETTER Q"));
        data.insert(std::make_pair(0xe0052,"TAG LATIN CAPITAL LETTER R"));
        data.insert(std::make_pair(0xe0053,"TAG LATIN CAPITAL LETTER S"));
        data.insert(std::make_pair(0xe0054,"TAG LATIN CAPITAL LETTER T"));
        data.insert(std::make_pair(0xe0055,"TAG LATIN CAPITAL LETTER U"));
        data.insert(std::make_pair(0xe0056,"TAG LATIN CAPITAL LETTER V"));
        data.insert(std::make_pair(0xe0057,"TAG LATIN CAPITAL LETTER W"));
        data.insert(std::make_pair(0xe0058,"TAG LATIN CAPITAL LETTER X"));
        data.insert(std::make_pair(0xe0059,"TAG LATIN CAPITAL LETTER Y"));
        data.insert(std::make_pair(0xe005a,"TAG LATIN CAPITAL LETTER Z"));
        data.insert(std::make_pair(0xe005b,"TAG LEFT SQUARE BRACKET"));
        data.insert(std::make_pair(0xe005c,"TAG REVERSE SOLIDUS"));
        data.insert(std::make_pair(0xe005d,"TAG RIGHT SQUARE BRACKET"));
        data.insert(std::make_pair(0xe005e,"TAG CIRCUMFLEX ACCENT"));
        data.insert(std::make_pair(0xe005f,"TAG LOW LINE"));
        data.insert(std::make_pair(0xe0060,"TAG GRAVE ACCENT"));
        data.insert(std::make_pair(0xe0061,"TAG LATIN SMALL LETTER A"));
        data.insert(std::make_pair(0xe0062,"TAG LATIN SMALL LETTER B"));
        data.insert(std::make_pair(0xe0063,"TAG LATIN SMALL LETTER C"));
        data.insert(std::make_pair(0xe0064,"TAG LATIN SMALL LETTER D"));
        data.insert(std::make_pair(0xe0065,"TAG LATIN SMALL LETTER E"));
        data.insert(std::make_pair(0xe0066,"TAG LATIN SMALL LETTER F"));
        data.insert(std::make_pair(0xe0067,"TAG LATIN SMALL LETTER G"));
        data.insert(std::make_pair(0xe0068,"TAG LATIN SMALL LETTER H"));
        data.insert(std::make_pair(0xe0069,"TAG LATIN SMALL LETTER I"));
        data.insert(std::make_pair(0xe006a,"TAG LATIN SMALL LETTER J"));
        data.insert(std::make_pair(0xe006b,"TAG LATIN SMALL LETTER K"));
        data.insert(std::make_pair(0xe006c,"TAG LATIN SMALL LETTER L"));
        data.insert(std::make_pair(0xe006d,"TAG LATIN SMALL LETTER M"));
        data.insert(std::make_pair(0xe006e,"TAG LATIN SMALL LETTER N"));
        data.insert(std::make_pair(0xe006f,"TAG LATIN SMALL LETTER O"));
        data.insert(std::make_pair(0xe0070,"TAG LATIN SMALL LETTER P"));
        data.insert(std::make_pair(0xe0071,"TAG LATIN SMALL LETTER Q"));
        data.insert(std::make_pair(0xe0072,"TAG LATIN SMALL LETTER R"));
        data.insert(std::make_pair(0xe0073,"TAG LATIN SMALL LETTER S"));
        data.insert(std::make_pair(0xe0074,"TAG LATIN SMALL LETTER T"));
        data.insert(std::make_pair(0xe0075,"TAG LATIN SMALL LETTER U"));
        data.insert(std::make_pair(0xe0076,"TAG LATIN SMALL LETTER V"));
        data.insert(std::make_pair(0xe0077,"TAG LATIN SMALL LETTER W"));
        data.insert(std::make_pair(0xe0078,"TAG LATIN SMALL LETTER X"));
        data.insert(std::make_pair(0xe0079,"TAG LATIN SMALL LETTER Y"));
        data.insert(std::make_pair(0xe007a,"TAG LATIN SMALL LETTER Z"));
        data.insert(std::make_pair(0xe007b,"TAG LEFT CURLY BRACKET"));
        data.insert(std::make_pair(0xe007c,"TAG VERTICAL LINE"));
        data.insert(std::make_pair(0xe007d,"TAG RIGHT CURLY BRACKET"));
        data.insert(std::make_pair(0xe007e,"TAG TILDE"));
        data.insert(std::make_pair(0xe007f,"CANCEL TAG"));
        data.insert(std::make_pair(0xe0100,"VARIATION SELECTOR-17"));
        data.insert(std::make_pair(0xe0101,"VARIATION SELECTOR-18"));
        data.insert(std::make_pair(0xe0102,"VARIATION SELECTOR-19"));
        data.insert(std::make_pair(0xe0103,"VARIATION SELECTOR-20"));
        data.insert(std::make_pair(0xe0104,"VARIATION SELECTOR-21"));
        data.insert(std::make_pair(0xe0105,"VARIATION SELECTOR-22"));
        data.insert(std::make_pair(0xe0106,"VARIATION SELECTOR-23"));
        data.insert(std::make_pair(0xe0107,"VARIATION SELECTOR-24"));
        data.insert(std::make_pair(0xe0108,"VARIATION SELECTOR-25"));
        data.insert(std::make_pair(0xe0109,"VARIATION SELECTOR-26"));
        data.insert(std::make_pair(0xe010a,"VARIATION SELECTOR-27"));
        data.insert(std::make_pair(0xe010b,"VARIATION SELECTOR-28"));
        data.insert(std::make_pair(0xe010c,"VARIATION SELECTOR-29"));
        data.insert(std::make_pair(0xe010d,"VARIATION SELECTOR-30"));
        data.insert(std::make_pair(0xe010e,"VARIATION SELECTOR-31"));
        data.insert(std::make_pair(0xe010f,"VARIATION SELECTOR-32"));
        data.insert(std::make_pair(0xe0110,"VARIATION SELECTOR-33"));
        data.insert(std::make_pair(0xe0111,"VARIATION SELECTOR-34"));
        data.insert(std::make_pair(0xe0112,"VARIATION SELECTOR-35"));
        data.insert(std::make_pair(0xe0113,"VARIATION SELECTOR-36"));
        data.insert(std::make_pair(0xe0114,"VARIATION SELECTOR-37"));
        data.insert(std::make_pair(0xe0115,"VARIATION SELECTOR-38"));
        data.insert(std::make_pair(0xe0116,"VARIATION SELECTOR-39"));
        data.insert(std::make_pair(0xe0117,"VARIATION SELECTOR-40"));
        data.insert(std::make_pair(0xe0118,"VARIATION SELECTOR-41"));
        data.insert(std::make_pair(0xe0119,"VARIATION SELECTOR-42"));
        data.insert(std::make_pair(0xe011a,"VARIATION SELECTOR-43"));
        data.insert(std::make_pair(0xe011b,"VARIATION SELECTOR-44"));
        data.insert(std::make_pair(0xe011c,"VARIATION SELECTOR-45"));
        data.insert(std::make_pair(0xe011d,"VARIATION SELECTOR-46"));
        data.insert(std::make_pair(0xe011e,"VARIATION SELECTOR-47"));
        data.insert(std::make_pair(0xe011f,"VARIATION SELECTOR-48"));
        data.insert(std::make_pair(0xe0120,"VARIATION SELECTOR-49"));
        data.insert(std::make_pair(0xe0121,"VARIATION SELECTOR-50"));
        data.insert(std::make_pair(0xe0122,"VARIATION SELECTOR-51"));
        data.insert(std::make_pair(0xe0123,"VARIATION SELECTOR-52"));
        data.insert(std::make_pair(0xe0124,"VARIATION SELECTOR-53"));
        data.insert(std::make_pair(0xe0125,"VARIATION SELECTOR-54"));
        data.insert(std::make_pair(0xe0126,"VARIATION SELECTOR-55"));
        data.insert(std::make_pair(0xe0127,"VARIATION SELECTOR-56"));
        data.insert(std::make_pair(0xe0128,"VARIATION SELECTOR-57"));
        data.insert(std::make_pair(0xe0129,"VARIATION SELECTOR-58"));
        data.insert(std::make_pair(0xe012a,"VARIATION SELECTOR-59"));
        data.insert(std::make_pair(0xe012b,"VARIATION SELECTOR-60"));
        data.insert(std::make_pair(0xe012c,"VARIATION SELECTOR-61"));
        data.insert(std::make_pair(0xe012d,"VARIATION SELECTOR-62"));
        data.insert(std::make_pair(0xe012e,"VARIATION SELECTOR-63"));
        data.insert(std::make_pair(0xe012f,"VARIATION SELECTOR-64"));
        data.insert(std::make_pair(0xe0130,"VARIATION SELECTOR-65"));
        data.insert(std::make_pair(0xe0131,"VARIATION SELECTOR-66"));
        data.insert(std::make_pair(0xe0132,"VARIATION SELECTOR-67"));
        data.insert(std::make_pair(0xe0133,"VARIATION SELECTOR-68"));
        data.insert(std::make_pair(0xe0134,"VARIATION SELECTOR-69"));
        data.insert(std::make_pair(0xe0135,"VARIATION SELECTOR-70"));
        data.insert(std::make_pair(0xe0136,"VARIATION SELECTOR-71"));
        data.insert(std::make_pair(0xe0137,"VARIATION SELECTOR-72"));
        data.insert(std::make_pair(0xe0138,"VARIATION SELECTOR-73"));
        data.insert(std::make_pair(0xe0139,"VARIATION SELECTOR-74"));
        data.insert(std::make_pair(0xe013a,"VARIATION SELECTOR-75"));
        data.insert(std::make_pair(0xe013b,"VARIATION SELECTOR-76"));
        data.insert(std::make_pair(0xe013c,"VARIATION SELECTOR-77"));
        data.insert(std::make_pair(0xe013d,"VARIATION SELECTOR-78"));
        data.insert(std::make_pair(0xe013e,"VARIATION SELECTOR-79"));
        data.insert(std::make_pair(0xe013f,"VARIATION SELECTOR-80"));
        data.insert(std::make_pair(0xe0140,"VARIATION SELECTOR-81"));
        data.insert(std::make_pair(0xe0141,"VARIATION SELECTOR-82"));
        data.insert(std::make_pair(0xe0142,"VARIATION SELECTOR-83"));
        data.insert(std::make_pair(0xe0143,"VARIATION SELECTOR-84"));
        data.insert(std::make_pair(0xe0144,"VARIATION SELECTOR-85"));
        data.insert(std::make_pair(0xe0145,"VARIATION SELECTOR-86"));
        data.insert(std::make_pair(0xe0146,"VARIATION SELECTOR-87"));
        data.insert(std::make_pair(0xe0147,"VARIATION SELECTOR-88"));
        data.insert(std::make_pair(0xe0148,"VARIATION SELECTOR-89"));
        data.insert(std::make_pair(0xe0149,"VARIATION SELECTOR-90"));
        data.insert(std::make_pair(0xe014a,"VARIATION SELECTOR-91"));
        data.insert(std::make_pair(0xe014b,"VARIATION SELECTOR-92"));
        data.insert(std::make_pair(0xe014c,"VARIATION SELECTOR-93"));
        data.insert(std::make_pair(0xe014d,"VARIATION SELECTOR-94"));
        data.insert(std::make_pair(0xe014e,"VARIATION SELECTOR-95"));
        data.insert(std::make_pair(0xe014f,"VARIATION SELECTOR-96"));
        data.insert(std::make_pair(0xe0150,"VARIATION SELECTOR-97"));
        data.insert(std::make_pair(0xe0151,"VARIATION SELECTOR-98"));
        data.insert(std::make_pair(0xe0152,"VARIATION SELECTOR-99"));
        data.insert(std::make_pair(0xe0153,"VARIATION SELECTOR-100"));
        data.insert(std::make_pair(0xe0154,"VARIATION SELECTOR-101"));
        data.insert(std::make_pair(0xe0155,"VARIATION SELECTOR-102"));
        data.insert(std::make_pair(0xe0156,"VARIATION SELECTOR-103"));
        data.insert(std::make_pair(0xe0157,"VARIATION SELECTOR-104"));
        data.insert(std::make_pair(0xe0158,"VARIATION SELECTOR-105"));
        data.insert(std::make_pair(0xe0159,"VARIATION SELECTOR-106"));
        data.insert(std::make_pair(0xe015a,"VARIATION SELECTOR-107"));
        data.insert(std::make_pair(0xe015b,"VARIATION SELECTOR-108"));
        data.insert(std::make_pair(0xe015c,"VARIATION SELECTOR-109"));
        data.insert(std::make_pair(0xe015d,"VARIATION SELECTOR-110"));
        data.insert(std::make_pair(0xe015e,"VARIATION SELECTOR-111"));
        data.insert(std::make_pair(0xe015f,"VARIATION SELECTOR-112"));
        data.insert(std::make_pair(0xe0160,"VARIATION SELECTOR-113"));
        data.insert(std::make_pair(0xe0161,"VARIATION SELECTOR-114"));
        data.insert(std::make_pair(0xe0162,"VARIATION SELECTOR-115"));
        data.insert(std::make_pair(0xe0163,"VARIATION SELECTOR-116"));
        data.insert(std::make_pair(0xe0164,"VARIATION SELECTOR-117"));
        data.insert(std::make_pair(0xe0165,"VARIATION SELECTOR-118"));
        data.insert(std::make_pair(0xe0166,"VARIATION SELECTOR-119"));
        data.insert(std::make_pair(0xe0167,"VARIATION SELECTOR-120"));
        data.insert(std::make_pair(0xe0168,"VARIATION SELECTOR-121"));
        data.insert(std::make_pair(0xe0169,"VARIATION SELECTOR-122"));
        data.insert(std::make_pair(0xe016a,"VARIATION SELECTOR-123"));
        data.insert(std::make_pair(0xe016b,"VARIATION SELECTOR-124"));
        data.insert(std::make_pair(0xe016c,"VARIATION SELECTOR-125"));
        data.insert(std::make_pair(0xe016d,"VARIATION SELECTOR-126"));
        data.insert(std::make_pair(0xe016e,"VARIATION SELECTOR-127"));
        data.insert(std::make_pair(0xe016f,"VARIATION SELECTOR-128"));
        data.insert(std::make_pair(0xe0170,"VARIATION SELECTOR-129"));
        data.insert(std::make_pair(0xe0171,"VARIATION SELECTOR-130"));
        data.insert(std::make_pair(0xe0172,"VARIATION SELECTOR-131"));
        data.insert(std::make_pair(0xe0173,"VARIATION SELECTOR-132"));
        data.insert(std::make_pair(0xe0174,"VARIATION SELECTOR-133"));
        data.insert(std::make_pair(0xe0175,"VARIATION SELECTOR-134"));
        data.insert(std::make_pair(0xe0176,"VARIATION SELECTOR-135"));
        data.insert(std::make_pair(0xe0177,"VARIATION SELECTOR-136"));
        data.insert(std::make_pair(0xe0178,"VARIATION SELECTOR-137"));
        data.insert(std::make_pair(0xe0179,"VARIATION SELECTOR-138"));
        data.insert(std::make_pair(0xe017a,"VARIATION SELECTOR-139"));
        data.insert(std::make_pair(0xe017b,"VARIATION SELECTOR-140"));
        data.insert(std::make_pair(0xe017c,"VARIATION SELECTOR-141"));
        data.insert(std::make_pair(0xe017d,"VARIATION SELECTOR-142"));
        data.insert(std::make_pair(0xe017e,"VARIATION SELECTOR-143"));
        data.insert(std::make_pair(0xe017f,"VARIATION SELECTOR-144"));
        data.insert(std::make_pair(0xe0180,"VARIATION SELECTOR-145"));
        data.insert(std::make_pair(0xe0181,"VARIATION SELECTOR-146"));
        data.insert(std::make_pair(0xe0182,"VARIATION SELECTOR-147"));
        data.insert(std::make_pair(0xe0183,"VARIATION SELECTOR-148"));
        data.insert(std::make_pair(0xe0184,"VARIATION SELECTOR-149"));
        data.insert(std::make_pair(0xe0185,"VARIATION SELECTOR-150"));
        data.insert(std::make_pair(0xe0186,"VARIATION SELECTOR-151"));
        data.insert(std::make_pair(0xe0187,"VARIATION SELECTOR-152"));
        data.insert(std::make_pair(0xe0188,"VARIATION SELECTOR-153"));
        data.insert(std::make_pair(0xe0189,"VARIATION SELECTOR-154"));
        data.insert(std::make_pair(0xe018a,"VARIATION SELECTOR-155"));
        data.insert(std::make_pair(0xe018b,"VARIATION SELECTOR-156"));
        data.insert(std::make_pair(0xe018c,"VARIATION SELECTOR-157"));
        data.insert(std::make_pair(0xe018d,"VARIATION SELECTOR-158"));
        data.insert(std::make_pair(0xe018e,"VARIATION SELECTOR-159"));
        data.insert(std::make_pair(0xe018f,"VARIATION SELECTOR-160"));
        data.insert(std::make_pair(0xe0190,"VARIATION SELECTOR-161"));
        data.insert(std::make_pair(0xe0191,"VARIATION SELECTOR-162"));
        data.insert(std::make_pair(0xe0192,"VARIATION SELECTOR-163"));
        data.insert(std::make_pair(0xe0193,"VARIATION SELECTOR-164"));
        data.insert(std::make_pair(0xe0194,"VARIATION SELECTOR-165"));
        data.insert(std::make_pair(0xe0195,"VARIATION SELECTOR-166"));
        data.insert(std::make_pair(0xe0196,"VARIATION SELECTOR-167"));
        data.insert(std::make_pair(0xe0197,"VARIATION SELECTOR-168"));
        data.insert(std::make_pair(0xe0198,"VARIATION SELECTOR-169"));
        data.insert(std::make_pair(0xe0199,"VARIATION SELECTOR-170"));
        data.insert(std::make_pair(0xe019a,"VARIATION SELECTOR-171"));
        data.insert(std::make_pair(0xe019b,"VARIATION SELECTOR-172"));
        data.insert(std::make_pair(0xe019c,"VARIATION SELECTOR-173"));
        data.insert(std::make_pair(0xe019d,"VARIATION SELECTOR-174"));
        data.insert(std::make_pair(0xe019e,"VARIATION SELECTOR-175"));
        data.insert(std::make_pair(0xe019f,"VARIATION SELECTOR-176"));
        data.insert(std::make_pair(0xe01a0,"VARIATION SELECTOR-177"));
        data.insert(std::make_pair(0xe01a1,"VARIATION SELECTOR-178"));
        data.insert(std::make_pair(0xe01a2,"VARIATION SELECTOR-179"));
        data.insert(std::make_pair(0xe01a3,"VARIATION SELECTOR-180"));
        data.insert(std::make_pair(0xe01a4,"VARIATION SELECTOR-181"));
        data.insert(std::make_pair(0xe01a5,"VARIATION SELECTOR-182"));
        data.insert(std::make_pair(0xe01a6,"VARIATION SELECTOR-183"));
        data.insert(std::make_pair(0xe01a7,"VARIATION SELECTOR-184"));
        data.insert(std::make_pair(0xe01a8,"VARIATION SELECTOR-185"));
        data.insert(std::make_pair(0xe01a9,"VARIATION SELECTOR-186"));
        data.insert(std::make_pair(0xe01aa,"VARIATION SELECTOR-187"));
        data.insert(std::make_pair(0xe01ab,"VARIATION SELECTOR-188"));
        data.insert(std::make_pair(0xe01ac,"VARIATION SELECTOR-189"));
        data.insert(std::make_pair(0xe01ad,"VARIATION SELECTOR-190"));
        data.insert(std::make_pair(0xe01ae,"VARIATION SELECTOR-191"));
        data.insert(std::make_pair(0xe01af,"VARIATION SELECTOR-192"));
        data.insert(std::make_pair(0xe01b0,"VARIATION SELECTOR-193"));
        data.insert(std::make_pair(0xe01b1,"VARIATION SELECTOR-194"));
        data.insert(std::make_pair(0xe01b2,"VARIATION SELECTOR-195"));
        data.insert(std::make_pair(0xe01b3,"VARIATION SELECTOR-196"));
        data.insert(std::make_pair(0xe01b4,"VARIATION SELECTOR-197"));
        data.insert(std::make_pair(0xe01b5,"VARIATION SELECTOR-198"));
        data.insert(std::make_pair(0xe01b6,"VARIATION SELECTOR-199"));
        data.insert(std::make_pair(0xe01b7,"VARIATION SELECTOR-200"));
        data.insert(std::make_pair(0xe01b8,"VARIATION SELECTOR-201"));
        data.insert(std::make_pair(0xe01b9,"VARIATION SELECTOR-202"));
        data.insert(std::make_pair(0xe01ba,"VARIATION SELECTOR-203"));
        data.insert(std::make_pair(0xe01bb,"VARIATION SELECTOR-204"));
        data.insert(std::make_pair(0xe01bc,"VARIATION SELECTOR-205"));
        data.insert(std::make_pair(0xe01bd,"VARIATION SELECTOR-206"));
        data.insert(std::make_pair(0xe01be,"VARIATION SELECTOR-207"));
        data.insert(std::make_pair(0xe01bf,"VARIATION SELECTOR-208"));
        data.insert(std::make_pair(0xe01c0,"VARIATION SELECTOR-209"));
        data.insert(std::make_pair(0xe01c1,"VARIATION SELECTOR-210"));
        data.insert(std::make_pair(0xe01c2,"VARIATION SELECTOR-211"));
        data.insert(std::make_pair(0xe01c3,"VARIATION SELECTOR-212"));
        data.insert(std::make_pair(0xe01c4,"VARIATION SELECTOR-213"));
        data.insert(std::make_pair(0xe01c5,"VARIATION SELECTOR-214"));
        data.insert(std::make_pair(0xe01c6,"VARIATION SELECTOR-215"));
        data.insert(std::make_pair(0xe01c7,"VARIATION SELECTOR-216"));
        data.insert(std::make_pair(0xe01c8,"VARIATION SELECTOR-217"));
        data.insert(std::make_pair(0xe01c9,"VARIATION SELECTOR-218"));
        data.insert(std::make_pair(0xe01ca,"VARIATION SELECTOR-219"));
        data.insert(std::make_pair(0xe01cb,"VARIATION SELECTOR-220"));
        data.insert(std::make_pair(0xe01cc,"VARIATION SELECTOR-221"));
        data.insert(std::make_pair(0xe01cd,"VARIATION SELECTOR-222"));
        data.insert(std::make_pair(0xe01ce,"VARIATION SELECTOR-223"));
        data.insert(std::make_pair(0xe01cf,"VARIATION SELECTOR-224"));
        data.insert(std::make_pair(0xe01d0,"VARIATION SELECTOR-225"));
        data.insert(std::make_pair(0xe01d1,"VARIATION SELECTOR-226"));
        data.insert(std::make_pair(0xe01d2,"VARIATION SELECTOR-227"));
        data.insert(std::make_pair(0xe01d3,"VARIATION SELECTOR-228"));
        data.insert(std::make_pair(0xe01d4,"VARIATION SELECTOR-229"));
        data.insert(std::make_pair(0xe01d5,"VARIATION SELECTOR-230"));
        data.insert(std::make_pair(0xe01d6,"VARIATION SELECTOR-231"));
        data.insert(std::make_pair(0xe01d7,"VARIATION SELECTOR-232"));
        data.insert(std::make_pair(0xe01d8,"VARIATION SELECTOR-233"));
        data.insert(std::make_pair(0xe01d9,"VARIATION SELECTOR-234"));
        data.insert(std::make_pair(0xe01da,"VARIATION SELECTOR-235"));
        data.insert(std::make_pair(0xe01db,"VARIATION SELECTOR-236"));
        data.insert(std::make_pair(0xe01dc,"VARIATION SELECTOR-237"));
        data.insert(std::make_pair(0xe01dd,"VARIATION SELECTOR-238"));
        data.insert(std::make_pair(0xe01de,"VARIATION SELECTOR-239"));
        data.insert(std::make_pair(0xe01df,"VARIATION SELECTOR-240"));
        data.insert(std::make_pair(0xe01e0,"VARIATION SELECTOR-241"));
        data.insert(std::make_pair(0xe01e1,"VARIATION SELECTOR-242"));
        data.insert(std::make_pair(0xe01e2,"VARIATION SELECTOR-243"));
        data.insert(std::make_pair(0xe01e3,"VARIATION SELECTOR-244"));
        data.insert(std::make_pair(0xe01e4,"VARIATION SELECTOR-245"));
        data.insert(std::make_pair(0xe01e5,"VARIATION SELECTOR-246"));
        data.insert(std::make_pair(0xe01e6,"VARIATION SELECTOR-247"));
        data.insert(std::make_pair(0xe01e7,"VARIATION SELECTOR-248"));
        data.insert(std::make_pair(0xe01e8,"VARIATION SELECTOR-249"));
        data.insert(std::make_pair(0xe01e9,"VARIATION SELECTOR-250"));
        data.insert(std::make_pair(0xe01ea,"VARIATION SELECTOR-251"));
        data.insert(std::make_pair(0xe01eb,"VARIATION SELECTOR-252"));
        data.insert(std::make_pair(0xe01ec,"VARIATION SELECTOR-253"));
        data.insert(std::make_pair(0xe01ed,"VARIATION SELECTOR-254"));
        data.insert(std::make_pair(0xe01ee,"VARIATION SELECTOR-255"));
        data.insert(std::make_pair(0xe01ef,"VARIATION SELECTOR-256"));
    }
    auto it = data.find(code);
    return it != data.end() ? (*it).second.c_str() : nullptr;
}
