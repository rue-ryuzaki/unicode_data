#include "unicode_data.h"

#include <string>
#include <unordered_map>

char const*
unicode_codepoint_old_name(
        unicode_codepoint code)
{
    static std::unordered_map<unicode_codepoint, std::string> data;
    if (data.empty()) {
        data.insert(std::make_pair(0x0000,"NULL"));
        data.insert(std::make_pair(0x0001,"START OF HEADING"));
        data.insert(std::make_pair(0x0002,"START OF TEXT"));
        data.insert(std::make_pair(0x0003,"END OF TEXT"));
        data.insert(std::make_pair(0x0004,"END OF TRANSMISSION"));
        data.insert(std::make_pair(0x0005,"ENQUIRY"));
        data.insert(std::make_pair(0x0006,"ACKNOWLEDGE"));
        data.insert(std::make_pair(0x0007,"BELL"));
        data.insert(std::make_pair(0x0008,"BACKSPACE"));
        data.insert(std::make_pair(0x0009,"CHARACTER TABULATION"));
        data.insert(std::make_pair(0x000a,"LINE FEED (LF)"));
        data.insert(std::make_pair(0x000b,"LINE TABULATION"));
        data.insert(std::make_pair(0x000c,"FORM FEED (FF)"));
        data.insert(std::make_pair(0x000d,"CARRIAGE RETURN (CR)"));
        data.insert(std::make_pair(0x000e,"SHIFT OUT"));
        data.insert(std::make_pair(0x000f,"SHIFT IN"));
        data.insert(std::make_pair(0x0010,"DATA LINK ESCAPE"));
        data.insert(std::make_pair(0x0011,"DEVICE CONTROL ONE"));
        data.insert(std::make_pair(0x0012,"DEVICE CONTROL TWO"));
        data.insert(std::make_pair(0x0013,"DEVICE CONTROL THREE"));
        data.insert(std::make_pair(0x0014,"DEVICE CONTROL FOUR"));
        data.insert(std::make_pair(0x0015,"NEGATIVE ACKNOWLEDGE"));
        data.insert(std::make_pair(0x0016,"SYNCHRONOUS IDLE"));
        data.insert(std::make_pair(0x0017,"END OF TRANSMISSION BLOCK"));
        data.insert(std::make_pair(0x0018,"CANCEL"));
        data.insert(std::make_pair(0x0019,"END OF MEDIUM"));
        data.insert(std::make_pair(0x001a,"SUBSTITUTE"));
        data.insert(std::make_pair(0x001b,"ESCAPE"));
        data.insert(std::make_pair(0x001c,"INFORMATION SEPARATOR FOUR"));
        data.insert(std::make_pair(0x001d,"INFORMATION SEPARATOR THREE"));
        data.insert(std::make_pair(0x001e,"INFORMATION SEPARATOR TWO"));
        data.insert(std::make_pair(0x001f,"INFORMATION SEPARATOR ONE"));
        data.insert(std::make_pair(0x0027,"APOSTROPHE-QUOTE"));
        data.insert(std::make_pair(0x0028,"OPENING PARENTHESIS"));
        data.insert(std::make_pair(0x0029,"CLOSING PARENTHESIS"));
        data.insert(std::make_pair(0x002e,"PERIOD"));
        data.insert(std::make_pair(0x002f,"SLASH"));
        data.insert(std::make_pair(0x005b,"OPENING SQUARE BRACKET"));
        data.insert(std::make_pair(0x005c,"BACKSLASH"));
        data.insert(std::make_pair(0x005d,"CLOSING SQUARE BRACKET"));
        data.insert(std::make_pair(0x005e,"SPACING CIRCUMFLEX"));
        data.insert(std::make_pair(0x005f,"SPACING UNDERSCORE"));
        data.insert(std::make_pair(0x0060,"SPACING GRAVE"));
        data.insert(std::make_pair(0x007b,"OPENING CURLY BRACKET"));
        data.insert(std::make_pair(0x007c,"VERTICAL BAR"));
        data.insert(std::make_pair(0x007d,"CLOSING CURLY BRACKET"));
        data.insert(std::make_pair(0x007f,"DELETE"));
        data.insert(std::make_pair(0x0082,"BREAK PERMITTED HERE"));
        data.insert(std::make_pair(0x0083,"NO BREAK HERE"));
        data.insert(std::make_pair(0x0085,"NEXT LINE (NEL)"));
        data.insert(std::make_pair(0x0086,"START OF SELECTED AREA"));
        data.insert(std::make_pair(0x0087,"END OF SELECTED AREA"));
        data.insert(std::make_pair(0x0088,"CHARACTER TABULATION SET"));
        data.insert(std::make_pair(0x0089,"CHARACTER TABULATION WITH JUSTIFICATION"));
        data.insert(std::make_pair(0x008a,"LINE TABULATION SET"));
        data.insert(std::make_pair(0x008b,"PARTIAL LINE FORWARD"));
        data.insert(std::make_pair(0x008c,"PARTIAL LINE BACKWARD"));
        data.insert(std::make_pair(0x008d,"REVERSE LINE FEED"));
        data.insert(std::make_pair(0x008e,"SINGLE SHIFT TWO"));
        data.insert(std::make_pair(0x008f,"SINGLE SHIFT THREE"));
        data.insert(std::make_pair(0x0090,"DEVICE CONTROL STRING"));
        data.insert(std::make_pair(0x0091,"PRIVATE USE ONE"));
        data.insert(std::make_pair(0x0092,"PRIVATE USE TWO"));
        data.insert(std::make_pair(0x0093,"SET TRANSMIT STATE"));
        data.insert(std::make_pair(0x0094,"CANCEL CHARACTER"));
        data.insert(std::make_pair(0x0095,"MESSAGE WAITING"));
        data.insert(std::make_pair(0x0096,"START OF GUARDED AREA"));
        data.insert(std::make_pair(0x0097,"END OF GUARDED AREA"));
        data.insert(std::make_pair(0x0098,"START OF STRING"));
        data.insert(std::make_pair(0x009a,"SINGLE CHARACTER INTRODUCER"));
        data.insert(std::make_pair(0x009b,"CONTROL SEQUENCE INTRODUCER"));
        data.insert(std::make_pair(0x009c,"STRING TERMINATOR"));
        data.insert(std::make_pair(0x009d,"OPERATING SYSTEM COMMAND"));
        data.insert(std::make_pair(0x009e,"PRIVACY MESSAGE"));
        data.insert(std::make_pair(0x009f,"APPLICATION PROGRAM COMMAND"));
        data.insert(std::make_pair(0x00a0,"NON-BREAKING SPACE"));
        data.insert(std::make_pair(0x00a6,"BROKEN VERTICAL BAR"));
        data.insert(std::make_pair(0x00a8,"SPACING DIAERESIS"));
        data.insert(std::make_pair(0x00ab,"LEFT POINTING GUILLEMET"));
        data.insert(std::make_pair(0x00ae,"REGISTERED TRADE MARK SIGN"));
        data.insert(std::make_pair(0x00af,"SPACING MACRON"));
        data.insert(std::make_pair(0x00b1,"PLUS-OR-MINUS SIGN"));
        data.insert(std::make_pair(0x00b2,"SUPERSCRIPT DIGIT TWO"));
        data.insert(std::make_pair(0x00b3,"SUPERSCRIPT DIGIT THREE"));
        data.insert(std::make_pair(0x00b4,"SPACING ACUTE"));
        data.insert(std::make_pair(0x00b6,"PARAGRAPH SIGN"));
        data.insert(std::make_pair(0x00b8,"SPACING CEDILLA"));
        data.insert(std::make_pair(0x00b9,"SUPERSCRIPT DIGIT ONE"));
        data.insert(std::make_pair(0x00bb,"RIGHT POINTING GUILLEMET"));
        data.insert(std::make_pair(0x00bc,"FRACTION ONE QUARTER"));
        data.insert(std::make_pair(0x00bd,"FRACTION ONE HALF"));
        data.insert(std::make_pair(0x00be,"FRACTION THREE QUARTERS"));
        data.insert(std::make_pair(0x00c0,"LATIN CAPITAL LETTER A GRAVE"));
        data.insert(std::make_pair(0x00c1,"LATIN CAPITAL LETTER A ACUTE"));
        data.insert(std::make_pair(0x00c2,"LATIN CAPITAL LETTER A CIRCUMFLEX"));
        data.insert(std::make_pair(0x00c3,"LATIN CAPITAL LETTER A TILDE"));
        data.insert(std::make_pair(0x00c4,"LATIN CAPITAL LETTER A DIAERESIS"));
        data.insert(std::make_pair(0x00c5,"LATIN CAPITAL LETTER A RING"));
        data.insert(std::make_pair(0x00c6,"LATIN CAPITAL LETTER A E"));
        data.insert(std::make_pair(0x00c7,"LATIN CAPITAL LETTER C CEDILLA"));
        data.insert(std::make_pair(0x00c8,"LATIN CAPITAL LETTER E GRAVE"));
        data.insert(std::make_pair(0x00c9,"LATIN CAPITAL LETTER E ACUTE"));
        data.insert(std::make_pair(0x00ca,"LATIN CAPITAL LETTER E CIRCUMFLEX"));
        data.insert(std::make_pair(0x00cb,"LATIN CAPITAL LETTER E DIAERESIS"));
        data.insert(std::make_pair(0x00cc,"LATIN CAPITAL LETTER I GRAVE"));
        data.insert(std::make_pair(0x00cd,"LATIN CAPITAL LETTER I ACUTE"));
        data.insert(std::make_pair(0x00ce,"LATIN CAPITAL LETTER I CIRCUMFLEX"));
        data.insert(std::make_pair(0x00cf,"LATIN CAPITAL LETTER I DIAERESIS"));
        data.insert(std::make_pair(0x00d1,"LATIN CAPITAL LETTER N TILDE"));
        data.insert(std::make_pair(0x00d2,"LATIN CAPITAL LETTER O GRAVE"));
        data.insert(std::make_pair(0x00d3,"LATIN CAPITAL LETTER O ACUTE"));
        data.insert(std::make_pair(0x00d4,"LATIN CAPITAL LETTER O CIRCUMFLEX"));
        data.insert(std::make_pair(0x00d5,"LATIN CAPITAL LETTER O TILDE"));
        data.insert(std::make_pair(0x00d6,"LATIN CAPITAL LETTER O DIAERESIS"));
        data.insert(std::make_pair(0x00d8,"LATIN CAPITAL LETTER O SLASH"));
        data.insert(std::make_pair(0x00d9,"LATIN CAPITAL LETTER U GRAVE"));
        data.insert(std::make_pair(0x00da,"LATIN CAPITAL LETTER U ACUTE"));
        data.insert(std::make_pair(0x00db,"LATIN CAPITAL LETTER U CIRCUMFLEX"));
        data.insert(std::make_pair(0x00dc,"LATIN CAPITAL LETTER U DIAERESIS"));
        data.insert(std::make_pair(0x00dd,"LATIN CAPITAL LETTER Y ACUTE"));
        data.insert(std::make_pair(0x00e0,"LATIN SMALL LETTER A GRAVE"));
        data.insert(std::make_pair(0x00e1,"LATIN SMALL LETTER A ACUTE"));
        data.insert(std::make_pair(0x00e2,"LATIN SMALL LETTER A CIRCUMFLEX"));
        data.insert(std::make_pair(0x00e3,"LATIN SMALL LETTER A TILDE"));
        data.insert(std::make_pair(0x00e4,"LATIN SMALL LETTER A DIAERESIS"));
        data.insert(std::make_pair(0x00e5,"LATIN SMALL LETTER A RING"));
        data.insert(std::make_pair(0x00e6,"LATIN SMALL LETTER A E"));
        data.insert(std::make_pair(0x00e7,"LATIN SMALL LETTER C CEDILLA"));
        data.insert(std::make_pair(0x00e8,"LATIN SMALL LETTER E GRAVE"));
        data.insert(std::make_pair(0x00e9,"LATIN SMALL LETTER E ACUTE"));
        data.insert(std::make_pair(0x00ea,"LATIN SMALL LETTER E CIRCUMFLEX"));
        data.insert(std::make_pair(0x00eb,"LATIN SMALL LETTER E DIAERESIS"));
        data.insert(std::make_pair(0x00ec,"LATIN SMALL LETTER I GRAVE"));
        data.insert(std::make_pair(0x00ed,"LATIN SMALL LETTER I ACUTE"));
        data.insert(std::make_pair(0x00ee,"LATIN SMALL LETTER I CIRCUMFLEX"));
        data.insert(std::make_pair(0x00ef,"LATIN SMALL LETTER I DIAERESIS"));
        data.insert(std::make_pair(0x00f1,"LATIN SMALL LETTER N TILDE"));
        data.insert(std::make_pair(0x00f2,"LATIN SMALL LETTER O GRAVE"));
        data.insert(std::make_pair(0x00f3,"LATIN SMALL LETTER O ACUTE"));
        data.insert(std::make_pair(0x00f4,"LATIN SMALL LETTER O CIRCUMFLEX"));
        data.insert(std::make_pair(0x00f5,"LATIN SMALL LETTER O TILDE"));
        data.insert(std::make_pair(0x00f6,"LATIN SMALL LETTER O DIAERESIS"));
        data.insert(std::make_pair(0x00f8,"LATIN SMALL LETTER O SLASH"));
        data.insert(std::make_pair(0x00f9,"LATIN SMALL LETTER U GRAVE"));
        data.insert(std::make_pair(0x00fa,"LATIN SMALL LETTER U ACUTE"));
        data.insert(std::make_pair(0x00fb,"LATIN SMALL LETTER U CIRCUMFLEX"));
        data.insert(std::make_pair(0x00fc,"LATIN SMALL LETTER U DIAERESIS"));
        data.insert(std::make_pair(0x00fd,"LATIN SMALL LETTER Y ACUTE"));
        data.insert(std::make_pair(0x00ff,"LATIN SMALL LETTER Y DIAERESIS"));
        data.insert(std::make_pair(0x0100,"LATIN CAPITAL LETTER A MACRON"));
        data.insert(std::make_pair(0x0101,"LATIN SMALL LETTER A MACRON"));
        data.insert(std::make_pair(0x0102,"LATIN CAPITAL LETTER A BREVE"));
        data.insert(std::make_pair(0x0103,"LATIN SMALL LETTER A BREVE"));
        data.insert(std::make_pair(0x0104,"LATIN CAPITAL LETTER A OGONEK"));
        data.insert(std::make_pair(0x0105,"LATIN SMALL LETTER A OGONEK"));
        data.insert(std::make_pair(0x0106,"LATIN CAPITAL LETTER C ACUTE"));
        data.insert(std::make_pair(0x0107,"LATIN SMALL LETTER C ACUTE"));
        data.insert(std::make_pair(0x0108,"LATIN CAPITAL LETTER C CIRCUMFLEX"));
        data.insert(std::make_pair(0x0109,"LATIN SMALL LETTER C CIRCUMFLEX"));
        data.insert(std::make_pair(0x010a,"LATIN CAPITAL LETTER C DOT"));
        data.insert(std::make_pair(0x010b,"LATIN SMALL LETTER C DOT"));
        data.insert(std::make_pair(0x010c,"LATIN CAPITAL LETTER C HACEK"));
        data.insert(std::make_pair(0x010d,"LATIN SMALL LETTER C HACEK"));
        data.insert(std::make_pair(0x010e,"LATIN CAPITAL LETTER D HACEK"));
        data.insert(std::make_pair(0x010f,"LATIN SMALL LETTER D HACEK"));
        data.insert(std::make_pair(0x0110,"LATIN CAPITAL LETTER D BAR"));
        data.insert(std::make_pair(0x0111,"LATIN SMALL LETTER D BAR"));
        data.insert(std::make_pair(0x0112,"LATIN CAPITAL LETTER E MACRON"));
        data.insert(std::make_pair(0x0113,"LATIN SMALL LETTER E MACRON"));
        data.insert(std::make_pair(0x0114,"LATIN CAPITAL LETTER E BREVE"));
        data.insert(std::make_pair(0x0115,"LATIN SMALL LETTER E BREVE"));
        data.insert(std::make_pair(0x0116,"LATIN CAPITAL LETTER E DOT"));
        data.insert(std::make_pair(0x0117,"LATIN SMALL LETTER E DOT"));
        data.insert(std::make_pair(0x0118,"LATIN CAPITAL LETTER E OGONEK"));
        data.insert(std::make_pair(0x0119,"LATIN SMALL LETTER E OGONEK"));
        data.insert(std::make_pair(0x011a,"LATIN CAPITAL LETTER E HACEK"));
        data.insert(std::make_pair(0x011b,"LATIN SMALL LETTER E HACEK"));
        data.insert(std::make_pair(0x011c,"LATIN CAPITAL LETTER G CIRCUMFLEX"));
        data.insert(std::make_pair(0x011d,"LATIN SMALL LETTER G CIRCUMFLEX"));
        data.insert(std::make_pair(0x011e,"LATIN CAPITAL LETTER G BREVE"));
        data.insert(std::make_pair(0x011f,"LATIN SMALL LETTER G BREVE"));
        data.insert(std::make_pair(0x0120,"LATIN CAPITAL LETTER G DOT"));
        data.insert(std::make_pair(0x0121,"LATIN SMALL LETTER G DOT"));
        data.insert(std::make_pair(0x0122,"LATIN CAPITAL LETTER G CEDILLA"));
        data.insert(std::make_pair(0x0123,"LATIN SMALL LETTER G CEDILLA"));
        data.insert(std::make_pair(0x0124,"LATIN CAPITAL LETTER H CIRCUMFLEX"));
        data.insert(std::make_pair(0x0125,"LATIN SMALL LETTER H CIRCUMFLEX"));
        data.insert(std::make_pair(0x0126,"LATIN CAPITAL LETTER H BAR"));
        data.insert(std::make_pair(0x0127,"LATIN SMALL LETTER H BAR"));
        data.insert(std::make_pair(0x0128,"LATIN CAPITAL LETTER I TILDE"));
        data.insert(std::make_pair(0x0129,"LATIN SMALL LETTER I TILDE"));
        data.insert(std::make_pair(0x012a,"LATIN CAPITAL LETTER I MACRON"));
        data.insert(std::make_pair(0x012b,"LATIN SMALL LETTER I MACRON"));
        data.insert(std::make_pair(0x012c,"LATIN CAPITAL LETTER I BREVE"));
        data.insert(std::make_pair(0x012d,"LATIN SMALL LETTER I BREVE"));
        data.insert(std::make_pair(0x012e,"LATIN CAPITAL LETTER I OGONEK"));
        data.insert(std::make_pair(0x012f,"LATIN SMALL LETTER I OGONEK"));
        data.insert(std::make_pair(0x0130,"LATIN CAPITAL LETTER I DOT"));
        data.insert(std::make_pair(0x0132,"LATIN CAPITAL LETTER I J"));
        data.insert(std::make_pair(0x0133,"LATIN SMALL LETTER I J"));
        data.insert(std::make_pair(0x0134,"LATIN CAPITAL LETTER J CIRCUMFLEX"));
        data.insert(std::make_pair(0x0135,"LATIN SMALL LETTER J CIRCUMFLEX"));
        data.insert(std::make_pair(0x0136,"LATIN CAPITAL LETTER K CEDILLA"));
        data.insert(std::make_pair(0x0137,"LATIN SMALL LETTER K CEDILLA"));
        data.insert(std::make_pair(0x0139,"LATIN CAPITAL LETTER L ACUTE"));
        data.insert(std::make_pair(0x013a,"LATIN SMALL LETTER L ACUTE"));
        data.insert(std::make_pair(0x013b,"LATIN CAPITAL LETTER L CEDILLA"));
        data.insert(std::make_pair(0x013c,"LATIN SMALL LETTER L CEDILLA"));
        data.insert(std::make_pair(0x013d,"LATIN CAPITAL LETTER L HACEK"));
        data.insert(std::make_pair(0x013e,"LATIN SMALL LETTER L HACEK"));
        data.insert(std::make_pair(0x0141,"LATIN CAPITAL LETTER L SLASH"));
        data.insert(std::make_pair(0x0142,"LATIN SMALL LETTER L SLASH"));
        data.insert(std::make_pair(0x0143,"LATIN CAPITAL LETTER N ACUTE"));
        data.insert(std::make_pair(0x0144,"LATIN SMALL LETTER N ACUTE"));
        data.insert(std::make_pair(0x0145,"LATIN CAPITAL LETTER N CEDILLA"));
        data.insert(std::make_pair(0x0146,"LATIN SMALL LETTER N CEDILLA"));
        data.insert(std::make_pair(0x0147,"LATIN CAPITAL LETTER N HACEK"));
        data.insert(std::make_pair(0x0148,"LATIN SMALL LETTER N HACEK"));
        data.insert(std::make_pair(0x0149,"LATIN SMALL LETTER APOSTROPHE N"));
        data.insert(std::make_pair(0x014c,"LATIN CAPITAL LETTER O MACRON"));
        data.insert(std::make_pair(0x014d,"LATIN SMALL LETTER O MACRON"));
        data.insert(std::make_pair(0x014e,"LATIN CAPITAL LETTER O BREVE"));
        data.insert(std::make_pair(0x014f,"LATIN SMALL LETTER O BREVE"));
        data.insert(std::make_pair(0x0150,"LATIN CAPITAL LETTER O DOUBLE ACUTE"));
        data.insert(std::make_pair(0x0151,"LATIN SMALL LETTER O DOUBLE ACUTE"));
        data.insert(std::make_pair(0x0152,"LATIN CAPITAL LETTER O E"));
        data.insert(std::make_pair(0x0153,"LATIN SMALL LETTER O E"));
        data.insert(std::make_pair(0x0154,"LATIN CAPITAL LETTER R ACUTE"));
        data.insert(std::make_pair(0x0155,"LATIN SMALL LETTER R ACUTE"));
        data.insert(std::make_pair(0x0156,"LATIN CAPITAL LETTER R CEDILLA"));
        data.insert(std::make_pair(0x0157,"LATIN SMALL LETTER R CEDILLA"));
        data.insert(std::make_pair(0x0158,"LATIN CAPITAL LETTER R HACEK"));
        data.insert(std::make_pair(0x0159,"LATIN SMALL LETTER R HACEK"));
        data.insert(std::make_pair(0x015a,"LATIN CAPITAL LETTER S ACUTE"));
        data.insert(std::make_pair(0x015b,"LATIN SMALL LETTER S ACUTE"));
        data.insert(std::make_pair(0x015c,"LATIN CAPITAL LETTER S CIRCUMFLEX"));
        data.insert(std::make_pair(0x015d,"LATIN SMALL LETTER S CIRCUMFLEX"));
        data.insert(std::make_pair(0x015e,"LATIN CAPITAL LETTER S CEDILLA"));
        data.insert(std::make_pair(0x015f,"LATIN SMALL LETTER S CEDILLA"));
        data.insert(std::make_pair(0x0160,"LATIN CAPITAL LETTER S HACEK"));
        data.insert(std::make_pair(0x0161,"LATIN SMALL LETTER S HACEK"));
        data.insert(std::make_pair(0x0162,"LATIN CAPITAL LETTER T CEDILLA"));
        data.insert(std::make_pair(0x0163,"LATIN SMALL LETTER T CEDILLA"));
        data.insert(std::make_pair(0x0164,"LATIN CAPITAL LETTER T HACEK"));
        data.insert(std::make_pair(0x0165,"LATIN SMALL LETTER T HACEK"));
        data.insert(std::make_pair(0x0166,"LATIN CAPITAL LETTER T BAR"));
        data.insert(std::make_pair(0x0167,"LATIN SMALL LETTER T BAR"));
        data.insert(std::make_pair(0x0168,"LATIN CAPITAL LETTER U TILDE"));
        data.insert(std::make_pair(0x0169,"LATIN SMALL LETTER U TILDE"));
        data.insert(std::make_pair(0x016a,"LATIN CAPITAL LETTER U MACRON"));
        data.insert(std::make_pair(0x016b,"LATIN SMALL LETTER U MACRON"));
        data.insert(std::make_pair(0x016c,"LATIN CAPITAL LETTER U BREVE"));
        data.insert(std::make_pair(0x016d,"LATIN SMALL LETTER U BREVE"));
        data.insert(std::make_pair(0x016e,"LATIN CAPITAL LETTER U RING"));
        data.insert(std::make_pair(0x016f,"LATIN SMALL LETTER U RING"));
        data.insert(std::make_pair(0x0170,"LATIN CAPITAL LETTER U DOUBLE ACUTE"));
        data.insert(std::make_pair(0x0171,"LATIN SMALL LETTER U DOUBLE ACUTE"));
        data.insert(std::make_pair(0x0172,"LATIN CAPITAL LETTER U OGONEK"));
        data.insert(std::make_pair(0x0173,"LATIN SMALL LETTER U OGONEK"));
        data.insert(std::make_pair(0x0174,"LATIN CAPITAL LETTER W CIRCUMFLEX"));
        data.insert(std::make_pair(0x0175,"LATIN SMALL LETTER W CIRCUMFLEX"));
        data.insert(std::make_pair(0x0176,"LATIN CAPITAL LETTER Y CIRCUMFLEX"));
        data.insert(std::make_pair(0x0177,"LATIN SMALL LETTER Y CIRCUMFLEX"));
        data.insert(std::make_pair(0x0178,"LATIN CAPITAL LETTER Y DIAERESIS"));
        data.insert(std::make_pair(0x0179,"LATIN CAPITAL LETTER Z ACUTE"));
        data.insert(std::make_pair(0x017a,"LATIN SMALL LETTER Z ACUTE"));
        data.insert(std::make_pair(0x017b,"LATIN CAPITAL LETTER Z DOT"));
        data.insert(std::make_pair(0x017c,"LATIN SMALL LETTER Z DOT"));
        data.insert(std::make_pair(0x017d,"LATIN CAPITAL LETTER Z HACEK"));
        data.insert(std::make_pair(0x017e,"LATIN SMALL LETTER Z HACEK"));
        data.insert(std::make_pair(0x0180,"LATIN SMALL LETTER B BAR"));
        data.insert(std::make_pair(0x0181,"LATIN CAPITAL LETTER B HOOK"));
        data.insert(std::make_pair(0x0182,"LATIN CAPITAL LETTER B TOPBAR"));
        data.insert(std::make_pair(0x0183,"LATIN SMALL LETTER B TOPBAR"));
        data.insert(std::make_pair(0x0187,"LATIN CAPITAL LETTER C HOOK"));
        data.insert(std::make_pair(0x0188,"LATIN SMALL LETTER C HOOK"));
        data.insert(std::make_pair(0x018a,"LATIN CAPITAL LETTER D HOOK"));
        data.insert(std::make_pair(0x018b,"LATIN CAPITAL LETTER D TOPBAR"));
        data.insert(std::make_pair(0x018c,"LATIN SMALL LETTER D TOPBAR"));
        data.insert(std::make_pair(0x018e,"LATIN CAPITAL LETTER TURNED E"));
        data.insert(std::make_pair(0x0190,"LATIN CAPITAL LETTER EPSILON"));
        data.insert(std::make_pair(0x0191,"LATIN CAPITAL LETTER F HOOK"));
        data.insert(std::make_pair(0x0192,"LATIN SMALL LETTER SCRIPT F"));
        data.insert(std::make_pair(0x0193,"LATIN CAPITAL LETTER G HOOK"));
        data.insert(std::make_pair(0x0195,"LATIN SMALL LETTER H V"));
        data.insert(std::make_pair(0x0197,"LATIN CAPITAL LETTER BARRED I"));
        data.insert(std::make_pair(0x0198,"LATIN CAPITAL LETTER K HOOK"));
        data.insert(std::make_pair(0x0199,"LATIN SMALL LETTER K HOOK"));
        data.insert(std::make_pair(0x019a,"LATIN SMALL LETTER BARRED L"));
        data.insert(std::make_pair(0x019b,"LATIN SMALL LETTER BARRED LAMBDA"));
        data.insert(std::make_pair(0x019d,"LATIN CAPITAL LETTER N HOOK"));
        data.insert(std::make_pair(0x019f,"LATIN CAPITAL LETTER BARRED O"));
        data.insert(std::make_pair(0x01a0,"LATIN CAPITAL LETTER O HORN"));
        data.insert(std::make_pair(0x01a1,"LATIN SMALL LETTER O HORN"));
        data.insert(std::make_pair(0x01a2,"LATIN CAPITAL LETTER O I"));
        data.insert(std::make_pair(0x01a3,"LATIN SMALL LETTER O I"));
        data.insert(std::make_pair(0x01a4,"LATIN CAPITAL LETTER P HOOK"));
        data.insert(std::make_pair(0x01a5,"LATIN SMALL LETTER P HOOK"));
        data.insert(std::make_pair(0x01a6,"LATIN LETTER Y R"));
        data.insert(std::make_pair(0x01ab,"LATIN SMALL LETTER T PALATAL HOOK"));
        data.insert(std::make_pair(0x01ac,"LATIN CAPITAL LETTER T HOOK"));
        data.insert(std::make_pair(0x01ad,"LATIN SMALL LETTER T HOOK"));
        data.insert(std::make_pair(0x01ae,"LATIN CAPITAL LETTER T RETROFLEX HOOK"));
        data.insert(std::make_pair(0x01af,"LATIN CAPITAL LETTER U HORN"));
        data.insert(std::make_pair(0x01b0,"LATIN SMALL LETTER U HORN"));
        data.insert(std::make_pair(0x01b2,"LATIN CAPITAL LETTER SCRIPT V"));
        data.insert(std::make_pair(0x01b3,"LATIN CAPITAL LETTER Y HOOK"));
        data.insert(std::make_pair(0x01b4,"LATIN SMALL LETTER Y HOOK"));
        data.insert(std::make_pair(0x01b5,"LATIN CAPITAL LETTER Z BAR"));
        data.insert(std::make_pair(0x01b6,"LATIN SMALL LETTER Z BAR"));
        data.insert(std::make_pair(0x01b7,"LATIN CAPITAL LETTER YOGH"));
        data.insert(std::make_pair(0x01b8,"LATIN CAPITAL LETTER REVERSED YOGH"));
        data.insert(std::make_pair(0x01b9,"LATIN SMALL LETTER REVERSED YOGH"));
        data.insert(std::make_pair(0x01ba,"LATIN SMALL LETTER YOGH WITH TAIL"));
        data.insert(std::make_pair(0x01bb,"LATIN LETTER TWO BAR"));
        data.insert(std::make_pair(0x01be,"LATIN LETTER INVERTED GLOTTAL STOP BAR"));
        data.insert(std::make_pair(0x01c0,"LATIN LETTER PIPE"));
        data.insert(std::make_pair(0x01c1,"LATIN LETTER DOUBLE PIPE"));
        data.insert(std::make_pair(0x01c2,"LATIN LETTER PIPE DOUBLE BAR"));
        data.insert(std::make_pair(0x01c3,"LATIN LETTER EXCLAMATION MARK"));
        data.insert(std::make_pair(0x01c4,"LATIN CAPITAL LETTER D Z HACEK"));
        data.insert(std::make_pair(0x01c5,"LATIN LETTER CAPITAL D SMALL Z HACEK"));
        data.insert(std::make_pair(0x01c6,"LATIN SMALL LETTER D Z HACEK"));
        data.insert(std::make_pair(0x01c7,"LATIN CAPITAL LETTER L J"));
        data.insert(std::make_pair(0x01c8,"LATIN LETTER CAPITAL L SMALL J"));
        data.insert(std::make_pair(0x01c9,"LATIN SMALL LETTER L J"));
        data.insert(std::make_pair(0x01ca,"LATIN CAPITAL LETTER N J"));
        data.insert(std::make_pair(0x01cb,"LATIN LETTER CAPITAL N SMALL J"));
        data.insert(std::make_pair(0x01cc,"LATIN SMALL LETTER N J"));
        data.insert(std::make_pair(0x01cd,"LATIN CAPITAL LETTER A HACEK"));
        data.insert(std::make_pair(0x01ce,"LATIN SMALL LETTER A HACEK"));
        data.insert(std::make_pair(0x01cf,"LATIN CAPITAL LETTER I HACEK"));
        data.insert(std::make_pair(0x01d0,"LATIN SMALL LETTER I HACEK"));
        data.insert(std::make_pair(0x01d1,"LATIN CAPITAL LETTER O HACEK"));
        data.insert(std::make_pair(0x01d2,"LATIN SMALL LETTER O HACEK"));
        data.insert(std::make_pair(0x01d3,"LATIN CAPITAL LETTER U HACEK"));
        data.insert(std::make_pair(0x01d4,"LATIN SMALL LETTER U HACEK"));
        data.insert(std::make_pair(0x01d5,"LATIN CAPITAL LETTER U DIAERESIS MACRON"));
        data.insert(std::make_pair(0x01d6,"LATIN SMALL LETTER U DIAERESIS MACRON"));
        data.insert(std::make_pair(0x01d7,"LATIN CAPITAL LETTER U DIAERESIS ACUTE"));
        data.insert(std::make_pair(0x01d8,"LATIN SMALL LETTER U DIAERESIS ACUTE"));
        data.insert(std::make_pair(0x01d9,"LATIN CAPITAL LETTER U DIAERESIS HACEK"));
        data.insert(std::make_pair(0x01da,"LATIN SMALL LETTER U DIAERESIS HACEK"));
        data.insert(std::make_pair(0x01db,"LATIN CAPITAL LETTER U DIAERESIS GRAVE"));
        data.insert(std::make_pair(0x01dc,"LATIN SMALL LETTER U DIAERESIS GRAVE"));
        data.insert(std::make_pair(0x01de,"LATIN CAPITAL LETTER A DIAERESIS MACRON"));
        data.insert(std::make_pair(0x01df,"LATIN SMALL LETTER A DIAERESIS MACRON"));
        data.insert(std::make_pair(0x01e0,"LATIN CAPITAL LETTER A DOT MACRON"));
        data.insert(std::make_pair(0x01e1,"LATIN SMALL LETTER A DOT MACRON"));
        data.insert(std::make_pair(0x01e2,"LATIN CAPITAL LETTER A E MACRON"));
        data.insert(std::make_pair(0x01e3,"LATIN SMALL LETTER A E MACRON"));
        data.insert(std::make_pair(0x01e4,"LATIN CAPITAL LETTER G BAR"));
        data.insert(std::make_pair(0x01e5,"LATIN SMALL LETTER G BAR"));
        data.insert(std::make_pair(0x01e6,"LATIN CAPITAL LETTER G HACEK"));
        data.insert(std::make_pair(0x01e7,"LATIN SMALL LETTER G HACEK"));
        data.insert(std::make_pair(0x01e8,"LATIN CAPITAL LETTER K HACEK"));
        data.insert(std::make_pair(0x01e9,"LATIN SMALL LETTER K HACEK"));
        data.insert(std::make_pair(0x01ea,"LATIN CAPITAL LETTER O OGONEK"));
        data.insert(std::make_pair(0x01eb,"LATIN SMALL LETTER O OGONEK"));
        data.insert(std::make_pair(0x01ec,"LATIN CAPITAL LETTER O OGONEK MACRON"));
        data.insert(std::make_pair(0x01ed,"LATIN SMALL LETTER O OGONEK MACRON"));
        data.insert(std::make_pair(0x01ee,"LATIN CAPITAL LETTER YOGH HACEK"));
        data.insert(std::make_pair(0x01ef,"LATIN SMALL LETTER YOGH HACEK"));
        data.insert(std::make_pair(0x01f0,"LATIN SMALL LETTER J HACEK"));
        data.insert(std::make_pair(0x0251,"LATIN SMALL LETTER SCRIPT A"));
        data.insert(std::make_pair(0x0252,"LATIN SMALL LETTER TURNED SCRIPT A"));
        data.insert(std::make_pair(0x0253,"LATIN SMALL LETTER B HOOK"));
        data.insert(std::make_pair(0x0255,"LATIN SMALL LETTER C CURL"));
        data.insert(std::make_pair(0x0256,"LATIN SMALL LETTER D RETROFLEX HOOK"));
        data.insert(std::make_pair(0x0257,"LATIN SMALL LETTER D HOOK"));
        data.insert(std::make_pair(0x025a,"LATIN SMALL LETTER SCHWA HOOK"));
        data.insert(std::make_pair(0x025b,"LATIN SMALL LETTER EPSILON"));
        data.insert(std::make_pair(0x025c,"LATIN SMALL LETTER REVERSED EPSILON"));
        data.insert(std::make_pair(0x025d,"LATIN SMALL LETTER REVERSED EPSILON HOOK"));
        data.insert(std::make_pair(0x025e,"LATIN SMALL LETTER CLOSED REVERSED EPSILON"));
        data.insert(std::make_pair(0x025f,"LATIN SMALL LETTER DOTLESS J BAR"));
        data.insert(std::make_pair(0x0260,"LATIN SMALL LETTER G HOOK"));
        data.insert(std::make_pair(0x0264,"LATIN SMALL LETTER BABY GAMMA"));
        data.insert(std::make_pair(0x0266,"LATIN SMALL LETTER H HOOK"));
        data.insert(std::make_pair(0x0267,"LATIN SMALL LETTER HENG HOOK"));
        data.insert(std::make_pair(0x0268,"LATIN SMALL LETTER BARRED I"));
        data.insert(std::make_pair(0x026c,"LATIN SMALL LETTER L BELT"));
        data.insert(std::make_pair(0x026d,"LATIN SMALL LETTER L RETROFLEX HOOK"));
        data.insert(std::make_pair(0x026e,"LATIN SMALL LETTER L YOGH"));
        data.insert(std::make_pair(0x0271,"LATIN SMALL LETTER M HOOK"));
        data.insert(std::make_pair(0x0272,"LATIN SMALL LETTER N HOOK"));
        data.insert(std::make_pair(0x0273,"LATIN SMALL LETTER N RETROFLEX HOOK"));
        data.insert(std::make_pair(0x0276,"LATIN LETTER SMALL CAPITAL O E"));
        data.insert(std::make_pair(0x027b,"LATIN SMALL LETTER TURNED R HOOK"));
        data.insert(std::make_pair(0x027d,"LATIN SMALL LETTER R HOOK"));
        data.insert(std::make_pair(0x027e,"LATIN SMALL LETTER FISHHOOK R"));
        data.insert(std::make_pair(0x027f,"LATIN SMALL LETTER REVERSED FISHHOOK R"));
        data.insert(std::make_pair(0x0282,"LATIN SMALL LETTER S HOOK"));
        data.insert(std::make_pair(0x0284,"LATIN SMALL LETTER DOTLESS J BAR HOOK"));
        data.insert(std::make_pair(0x0286,"LATIN SMALL LETTER ESH CURL"));
        data.insert(std::make_pair(0x0288,"LATIN SMALL LETTER T RETROFLEX HOOK"));
        data.insert(std::make_pair(0x028b,"LATIN SMALL LETTER SCRIPT V"));
        data.insert(std::make_pair(0x0290,"LATIN SMALL LETTER Z RETROFLEX HOOK"));
        data.insert(std::make_pair(0x0291,"LATIN SMALL LETTER Z CURL"));
        data.insert(std::make_pair(0x0292,"LATIN SMALL LETTER YOGH"));
        data.insert(std::make_pair(0x0293,"LATIN SMALL LETTER YOGH CURL"));
        data.insert(std::make_pair(0x0295,"LATIN LETTER REVERSED GLOTTAL STOP"));
        data.insert(std::make_pair(0x0298,"LATIN LETTER BULLSEYE"));
        data.insert(std::make_pair(0x029a,"LATIN SMALL LETTER CLOSED EPSILON"));
        data.insert(std::make_pair(0x029b,"LATIN LETTER SMALL CAPITAL G HOOK"));
        data.insert(std::make_pair(0x029d,"LATIN SMALL LETTER CROSSED-TAIL J"));
        data.insert(std::make_pair(0x02a0,"LATIN SMALL LETTER Q HOOK"));
        data.insert(std::make_pair(0x02a1,"LATIN LETTER GLOTTAL STOP BAR"));
        data.insert(std::make_pair(0x02a2,"LATIN LETTER REVERSED GLOTTAL STOP BAR"));
        data.insert(std::make_pair(0x02a3,"LATIN SMALL LETTER D Z"));
        data.insert(std::make_pair(0x02a4,"LATIN SMALL LETTER D YOGH"));
        data.insert(std::make_pair(0x02a5,"LATIN SMALL LETTER D Z CURL"));
        data.insert(std::make_pair(0x02a6,"LATIN SMALL LETTER T S"));
        data.insert(std::make_pair(0x02a7,"LATIN SMALL LETTER T ESH"));
        data.insert(std::make_pair(0x02a8,"LATIN SMALL LETTER T C CURL"));
        data.insert(std::make_pair(0x02b1,"MODIFIER LETTER SMALL H HOOK"));
        data.insert(std::make_pair(0x02b5,"MODIFIER LETTER SMALL TURNED R HOOK"));
        data.insert(std::make_pair(0x02c6,"MODIFIER LETTER CIRCUMFLEX"));
        data.insert(std::make_pair(0x02c7,"MODIFIER LETTER HACEK"));
        data.insert(std::make_pair(0x02ca,"MODIFIER LETTER ACUTE"));
        data.insert(std::make_pair(0x02cb,"MODIFIER LETTER GRAVE"));
        data.insert(std::make_pair(0x02ce,"MODIFIER LETTER LOW GRAVE"));
        data.insert(std::make_pair(0x02cf,"MODIFIER LETTER LOW ACUTE"));
        data.insert(std::make_pair(0x02d2,"MODIFIER LETTER CENTERED RIGHT HALF RING"));
        data.insert(std::make_pair(0x02d3,"MODIFIER LETTER CENTERED LEFT HALF RING"));
        data.insert(std::make_pair(0x02d8,"SPACING BREVE"));
        data.insert(std::make_pair(0x02d9,"SPACING DOT ABOVE"));
        data.insert(std::make_pair(0x02da,"SPACING RING ABOVE"));
        data.insert(std::make_pair(0x02db,"SPACING OGONEK"));
        data.insert(std::make_pair(0x02dc,"SPACING TILDE"));
        data.insert(std::make_pair(0x02dd,"SPACING DOUBLE ACUTE"));
        data.insert(std::make_pair(0x0300,"NON-SPACING GRAVE"));
        data.insert(std::make_pair(0x0301,"NON-SPACING ACUTE"));
        data.insert(std::make_pair(0x0302,"NON-SPACING CIRCUMFLEX"));
        data.insert(std::make_pair(0x0303,"NON-SPACING TILDE"));
        data.insert(std::make_pair(0x0304,"NON-SPACING MACRON"));
        data.insert(std::make_pair(0x0305,"NON-SPACING OVERSCORE"));
        data.insert(std::make_pair(0x0306,"NON-SPACING BREVE"));
        data.insert(std::make_pair(0x0307,"NON-SPACING DOT ABOVE"));
        data.insert(std::make_pair(0x0308,"NON-SPACING DIAERESIS"));
        data.insert(std::make_pair(0x0309,"NON-SPACING HOOK ABOVE"));
        data.insert(std::make_pair(0x030a,"NON-SPACING RING ABOVE"));
        data.insert(std::make_pair(0x030b,"NON-SPACING DOUBLE ACUTE"));
        data.insert(std::make_pair(0x030c,"NON-SPACING HACEK"));
        data.insert(std::make_pair(0x030d,"NON-SPACING VERTICAL LINE ABOVE"));
        data.insert(std::make_pair(0x030e,"NON-SPACING DOUBLE VERTICAL LINE ABOVE"));
        data.insert(std::make_pair(0x030f,"NON-SPACING DOUBLE GRAVE"));
        data.insert(std::make_pair(0x0310,"NON-SPACING CANDRABINDU"));
        data.insert(std::make_pair(0x0311,"NON-SPACING INVERTED BREVE"));
        data.insert(std::make_pair(0x0312,"NON-SPACING TURNED COMMA ABOVE"));
        data.insert(std::make_pair(0x0313,"NON-SPACING COMMA ABOVE"));
        data.insert(std::make_pair(0x0314,"NON-SPACING REVERSED COMMA ABOVE"));
        data.insert(std::make_pair(0x0315,"NON-SPACING COMMA ABOVE RIGHT"));
        data.insert(std::make_pair(0x0316,"NON-SPACING GRAVE BELOW"));
        data.insert(std::make_pair(0x0317,"NON-SPACING ACUTE BELOW"));
        data.insert(std::make_pair(0x0318,"NON-SPACING LEFT TACK BELOW"));
        data.insert(std::make_pair(0x0319,"NON-SPACING RIGHT TACK BELOW"));
        data.insert(std::make_pair(0x031a,"NON-SPACING LEFT ANGLE ABOVE"));
        data.insert(std::make_pair(0x031b,"NON-SPACING HORN"));
        data.insert(std::make_pair(0x031c,"NON-SPACING LEFT HALF RING BELOW"));
        data.insert(std::make_pair(0x031d,"NON-SPACING UP TACK BELOW"));
        data.insert(std::make_pair(0x031e,"NON-SPACING DOWN TACK BELOW"));
        data.insert(std::make_pair(0x031f,"NON-SPACING PLUS SIGN BELOW"));
        data.insert(std::make_pair(0x0320,"NON-SPACING MINUS SIGN BELOW"));
        data.insert(std::make_pair(0x0321,"NON-SPACING PALATALIZED HOOK BELOW"));
        data.insert(std::make_pair(0x0322,"NON-SPACING RETROFLEX HOOK BELOW"));
        data.insert(std::make_pair(0x0323,"NON-SPACING DOT BELOW"));
        data.insert(std::make_pair(0x0324,"NON-SPACING DOUBLE DOT BELOW"));
        data.insert(std::make_pair(0x0325,"NON-SPACING RING BELOW"));
        data.insert(std::make_pair(0x0326,"NON-SPACING COMMA BELOW"));
        data.insert(std::make_pair(0x0327,"NON-SPACING CEDILLA"));
        data.insert(std::make_pair(0x0328,"NON-SPACING OGONEK"));
        data.insert(std::make_pair(0x0329,"NON-SPACING VERTICAL LINE BELOW"));
        data.insert(std::make_pair(0x032a,"NON-SPACING BRIDGE BELOW"));
        data.insert(std::make_pair(0x032b,"NON-SPACING INVERTED DOUBLE ARCH BELOW"));
        data.insert(std::make_pair(0x032c,"NON-SPACING HACEK BELOW"));
        data.insert(std::make_pair(0x032d,"NON-SPACING CIRCUMFLEX BELOW"));
        data.insert(std::make_pair(0x032e,"NON-SPACING BREVE BELOW"));
        data.insert(std::make_pair(0x032f,"NON-SPACING INVERTED BREVE BELOW"));
        data.insert(std::make_pair(0x0330,"NON-SPACING TILDE BELOW"));
        data.insert(std::make_pair(0x0331,"NON-SPACING MACRON BELOW"));
        data.insert(std::make_pair(0x0332,"NON-SPACING UNDERSCORE"));
        data.insert(std::make_pair(0x0333,"NON-SPACING DOUBLE UNDERSCORE"));
        data.insert(std::make_pair(0x0334,"NON-SPACING TILDE OVERLAY"));
        data.insert(std::make_pair(0x0335,"NON-SPACING SHORT BAR OVERLAY"));
        data.insert(std::make_pair(0x0336,"NON-SPACING LONG BAR OVERLAY"));
        data.insert(std::make_pair(0x0337,"NON-SPACING SHORT SLASH OVERLAY"));
        data.insert(std::make_pair(0x0338,"NON-SPACING LONG SLASH OVERLAY"));
        data.insert(std::make_pair(0x0339,"NON-SPACING RIGHT HALF RING BELOW"));
        data.insert(std::make_pair(0x033a,"NON-SPACING INVERTED BRIDGE BELOW"));
        data.insert(std::make_pair(0x033b,"NON-SPACING SQUARE BELOW"));
        data.insert(std::make_pair(0x033c,"NON-SPACING SEAGULL BELOW"));
        data.insert(std::make_pair(0x033d,"NON-SPACING X ABOVE"));
        data.insert(std::make_pair(0x033e,"NON-SPACING VERTICAL TILDE"));
        data.insert(std::make_pair(0x033f,"NON-SPACING DOUBLE OVERSCORE"));
        data.insert(std::make_pair(0x0340,"NON-SPACING GRAVE TONE MARK"));
        data.insert(std::make_pair(0x0341,"NON-SPACING ACUTE TONE MARK"));
        data.insert(std::make_pair(0x0344,"GREEK NON-SPACING DIAERESIS TONOS"));
        data.insert(std::make_pair(0x0345,"GREEK NON-SPACING IOTA BELOW"));
        data.insert(std::make_pair(0x0374,"GREEK UPPER NUMERAL SIGN"));
        data.insert(std::make_pair(0x037a,"GREEK SPACING IOTA BELOW"));
        data.insert(std::make_pair(0x0384,"GREEK SPACING TONOS"));
        data.insert(std::make_pair(0x0385,"GREEK SPACING DIAERESIS TONOS"));
        data.insert(std::make_pair(0x0386,"GREEK CAPITAL LETTER ALPHA TONOS"));
        data.insert(std::make_pair(0x0388,"GREEK CAPITAL LETTER EPSILON TONOS"));
        data.insert(std::make_pair(0x0389,"GREEK CAPITAL LETTER ETA TONOS"));
        data.insert(std::make_pair(0x038a,"GREEK CAPITAL LETTER IOTA TONOS"));
        data.insert(std::make_pair(0x038c,"GREEK CAPITAL LETTER OMICRON TONOS"));
        data.insert(std::make_pair(0x038e,"GREEK CAPITAL LETTER UPSILON TONOS"));
        data.insert(std::make_pair(0x038f,"GREEK CAPITAL LETTER OMEGA TONOS"));
        data.insert(std::make_pair(0x0390,"GREEK SMALL LETTER IOTA DIAERESIS TONOS"));
        data.insert(std::make_pair(0x039b,"GREEK CAPITAL LETTER LAMBDA"));
        data.insert(std::make_pair(0x03aa,"GREEK CAPITAL LETTER IOTA DIAERESIS"));
        data.insert(std::make_pair(0x03ab,"GREEK CAPITAL LETTER UPSILON DIAERESIS"));
        data.insert(std::make_pair(0x03ac,"GREEK SMALL LETTER ALPHA TONOS"));
        data.insert(std::make_pair(0x03ad,"GREEK SMALL LETTER EPSILON TONOS"));
        data.insert(std::make_pair(0x03ae,"GREEK SMALL LETTER ETA TONOS"));
        data.insert(std::make_pair(0x03af,"GREEK SMALL LETTER IOTA TONOS"));
        data.insert(std::make_pair(0x03b0,"GREEK SMALL LETTER UPSILON DIAERESIS TONOS"));
        data.insert(std::make_pair(0x03bb,"GREEK SMALL LETTER LAMBDA"));
        data.insert(std::make_pair(0x03ca,"GREEK SMALL LETTER IOTA DIAERESIS"));
        data.insert(std::make_pair(0x03cb,"GREEK SMALL LETTER UPSILON DIAERESIS"));
        data.insert(std::make_pair(0x03cc,"GREEK SMALL LETTER OMICRON TONOS"));
        data.insert(std::make_pair(0x03cd,"GREEK SMALL LETTER UPSILON TONOS"));
        data.insert(std::make_pair(0x03ce,"GREEK SMALL LETTER OMEGA TONOS"));
        data.insert(std::make_pair(0x03d0,"GREEK SMALL LETTER CURLED BETA"));
        data.insert(std::make_pair(0x03d1,"GREEK SMALL LETTER SCRIPT THETA"));
        data.insert(std::make_pair(0x03d2,"GREEK CAPITAL LETTER UPSILON HOOK"));
        data.insert(std::make_pair(0x03d3,"GREEK CAPITAL LETTER UPSILON HOOK TONOS"));
        data.insert(std::make_pair(0x03d4,"GREEK CAPITAL LETTER UPSILON HOOK DIAERESIS"));
        data.insert(std::make_pair(0x03d5,"GREEK SMALL LETTER SCRIPT PHI"));
        data.insert(std::make_pair(0x03d6,"GREEK SMALL LETTER OMEGA PI"));
        data.insert(std::make_pair(0x03da,"GREEK CAPITAL LETTER STIGMA"));
        data.insert(std::make_pair(0x03dc,"GREEK CAPITAL LETTER DIGAMMA"));
        data.insert(std::make_pair(0x03de,"GREEK CAPITAL LETTER KOPPA"));
        data.insert(std::make_pair(0x03e0,"GREEK CAPITAL LETTER SAMPI"));
        data.insert(std::make_pair(0x03e2,"GREEK CAPITAL LETTER SHEI"));
        data.insert(std::make_pair(0x03e3,"GREEK SMALL LETTER SHEI"));
        data.insert(std::make_pair(0x03e4,"GREEK CAPITAL LETTER FEI"));
        data.insert(std::make_pair(0x03e5,"GREEK SMALL LETTER FEI"));
        data.insert(std::make_pair(0x03e6,"GREEK CAPITAL LETTER KHEI"));
        data.insert(std::make_pair(0x03e7,"GREEK SMALL LETTER KHEI"));
        data.insert(std::make_pair(0x03e8,"GREEK CAPITAL LETTER HORI"));
        data.insert(std::make_pair(0x03e9,"GREEK SMALL LETTER HORI"));
        data.insert(std::make_pair(0x03ea,"GREEK CAPITAL LETTER GANGIA"));
        data.insert(std::make_pair(0x03eb,"GREEK SMALL LETTER GANGIA"));
        data.insert(std::make_pair(0x03ec,"GREEK CAPITAL LETTER SHIMA"));
        data.insert(std::make_pair(0x03ed,"GREEK SMALL LETTER SHIMA"));
        data.insert(std::make_pair(0x03ee,"GREEK CAPITAL LETTER DEI"));
        data.insert(std::make_pair(0x03ef,"GREEK SMALL LETTER DEI"));
        data.insert(std::make_pair(0x03f0,"GREEK SMALL LETTER SCRIPT KAPPA"));
        data.insert(std::make_pair(0x03f1,"GREEK SMALL LETTER TAILED RHO"));
        data.insert(std::make_pair(0x03f2,"GREEK SMALL LETTER LUNATE SIGMA"));
        data.insert(std::make_pair(0x0404,"CYRILLIC CAPITAL LETTER E"));
        data.insert(std::make_pair(0x0406,"CYRILLIC CAPITAL LETTER I"));
        data.insert(std::make_pair(0x0413,"CYRILLIC CAPITAL LETTER GE"));
        data.insert(std::make_pair(0x0418,"CYRILLIC CAPITAL LETTER II"));
        data.insert(std::make_pair(0x0419,"CYRILLIC CAPITAL LETTER SHORT II"));
        data.insert(std::make_pair(0x0425,"CYRILLIC CAPITAL LETTER KHA"));
        data.insert(std::make_pair(0x042b,"CYRILLIC CAPITAL LETTER YERI"));
        data.insert(std::make_pair(0x042d,"CYRILLIC CAPITAL LETTER REVERSED E"));
        data.insert(std::make_pair(0x042e,"CYRILLIC CAPITAL LETTER IU"));
        data.insert(std::make_pair(0x042f,"CYRILLIC CAPITAL LETTER IA"));
        data.insert(std::make_pair(0x0433,"CYRILLIC SMALL LETTER GE"));
        data.insert(std::make_pair(0x0438,"CYRILLIC SMALL LETTER II"));
        data.insert(std::make_pair(0x0439,"CYRILLIC SMALL LETTER SHORT II"));
        data.insert(std::make_pair(0x0445,"CYRILLIC SMALL LETTER KHA"));
        data.insert(std::make_pair(0x044b,"CYRILLIC SMALL LETTER YERI"));
        data.insert(std::make_pair(0x044d,"CYRILLIC SMALL LETTER REVERSED E"));
        data.insert(std::make_pair(0x044e,"CYRILLIC SMALL LETTER IU"));
        data.insert(std::make_pair(0x044f,"CYRILLIC SMALL LETTER IA"));
        data.insert(std::make_pair(0x0454,"CYRILLIC SMALL LETTER E"));
        data.insert(std::make_pair(0x0456,"CYRILLIC SMALL LETTER I"));
        data.insert(std::make_pair(0x0476,"CYRILLIC CAPITAL LETTER IZHITSA DOUBLE GRAVE"));
        data.insert(std::make_pair(0x0477,"CYRILLIC SMALL LETTER IZHITSA DOUBLE GRAVE"));
        data.insert(std::make_pair(0x0478,"CYRILLIC CAPITAL LETTER UK DIGRAPH"));
        data.insert(std::make_pair(0x0479,"CYRILLIC SMALL LETTER UK DIGRAPH"));
        data.insert(std::make_pair(0x047c,"CYRILLIC CAPITAL LETTER OMEGA TITLO"));
        data.insert(std::make_pair(0x047d,"CYRILLIC SMALL LETTER OMEGA TITLO"));
        data.insert(std::make_pair(0x0483,"CYRILLIC NON-SPACING TITLO"));
        data.insert(std::make_pair(0x0484,"CYRILLIC NON-SPACING PALATALIZATION"));
        data.insert(std::make_pair(0x0485,"CYRILLIC NON-SPACING DASIA PNEUMATA"));
        data.insert(std::make_pair(0x0486,"CYRILLIC NON-SPACING PSILI PNEUMATA"));
        data.insert(std::make_pair(0x0490,"CYRILLIC CAPITAL LETTER GE WITH UPTURN"));
        data.insert(std::make_pair(0x0491,"CYRILLIC SMALL LETTER GE WITH UPTURN"));
        data.insert(std::make_pair(0x0492,"CYRILLIC CAPITAL LETTER GE BAR"));
        data.insert(std::make_pair(0x0493,"CYRILLIC SMALL LETTER GE BAR"));
        data.insert(std::make_pair(0x0494,"CYRILLIC CAPITAL LETTER GE HOOK"));
        data.insert(std::make_pair(0x0495,"CYRILLIC SMALL LETTER GE HOOK"));
        data.insert(std::make_pair(0x0496,"CYRILLIC CAPITAL LETTER ZHE WITH RIGHT DESCENDER"));
        data.insert(std::make_pair(0x0497,"CYRILLIC SMALL LETTER ZHE WITH RIGHT DESCENDER"));
        data.insert(std::make_pair(0x0498,"CYRILLIC CAPITAL LETTER ZE CEDILLA"));
        data.insert(std::make_pair(0x0499,"CYRILLIC SMALL LETTER ZE CEDILLA"));
        data.insert(std::make_pair(0x049a,"CYRILLIC CAPITAL LETTER KA WITH RIGHT DESCENDER"));
        data.insert(std::make_pair(0x049b,"CYRILLIC SMALL LETTER KA WITH RIGHT DESCENDER"));
        data.insert(std::make_pair(0x049c,"CYRILLIC CAPITAL LETTER KA VERTICAL BAR"));
        data.insert(std::make_pair(0x049d,"CYRILLIC SMALL LETTER KA VERTICAL BAR"));
        data.insert(std::make_pair(0x049e,"CYRILLIC CAPITAL LETTER KA BAR"));
        data.insert(std::make_pair(0x049f,"CYRILLIC SMALL LETTER KA BAR"));
        data.insert(std::make_pair(0x04a0,"CYRILLIC CAPITAL LETTER REVERSED GE KA"));
        data.insert(std::make_pair(0x04a1,"CYRILLIC SMALL LETTER REVERSED GE KA"));
        data.insert(std::make_pair(0x04a2,"CYRILLIC CAPITAL LETTER EN WITH RIGHT DESCENDER"));
        data.insert(std::make_pair(0x04a3,"CYRILLIC SMALL LETTER EN WITH RIGHT DESCENDER"));
        data.insert(std::make_pair(0x04a4,"CYRILLIC CAPITAL LETTER EN GE"));
        data.insert(std::make_pair(0x04a5,"CYRILLIC SMALL LETTER EN GE"));
        data.insert(std::make_pair(0x04a6,"CYRILLIC CAPITAL LETTER PE HOOK"));
        data.insert(std::make_pair(0x04a7,"CYRILLIC SMALL LETTER PE HOOK"));
        data.insert(std::make_pair(0x04a8,"CYRILLIC CAPITAL LETTER O HOOK"));
        data.insert(std::make_pair(0x04a9,"CYRILLIC SMALL LETTER O HOOK"));
        data.insert(std::make_pair(0x04aa,"CYRILLIC CAPITAL LETTER ES CEDILLA"));
        data.insert(std::make_pair(0x04ab,"CYRILLIC SMALL LETTER ES CEDILLA"));
        data.insert(std::make_pair(0x04ac,"CYRILLIC CAPITAL LETTER TE WITH RIGHT DESCENDER"));
        data.insert(std::make_pair(0x04ad,"CYRILLIC SMALL LETTER TE WITH RIGHT DESCENDER"));
        data.insert(std::make_pair(0x04b0,"CYRILLIC CAPITAL LETTER STRAIGHT U BAR"));
        data.insert(std::make_pair(0x04b1,"CYRILLIC SMALL LETTER STRAIGHT U BAR"));
        data.insert(std::make_pair(0x04b2,"CYRILLIC CAPITAL LETTER KHA WITH RIGHT DESCENDER"));
        data.insert(std::make_pair(0x04b3,"CYRILLIC SMALL LETTER KHA WITH RIGHT DESCENDER"));
        data.insert(std::make_pair(0x04b4,"CYRILLIC CAPITAL LETTER TE TSE"));
        data.insert(std::make_pair(0x04b5,"CYRILLIC SMALL LETTER TE TSE"));
        data.insert(std::make_pair(0x04b6,"CYRILLIC CAPITAL LETTER CHE WITH RIGHT DESCENDER"));
        data.insert(std::make_pair(0x04b7,"CYRILLIC SMALL LETTER CHE WITH RIGHT DESCENDER"));
        data.insert(std::make_pair(0x04b8,"CYRILLIC CAPITAL LETTER CHE VERTICAL BAR"));
        data.insert(std::make_pair(0x04b9,"CYRILLIC SMALL LETTER CHE VERTICAL BAR"));
        data.insert(std::make_pair(0x04ba,"CYRILLIC CAPITAL LETTER H"));
        data.insert(std::make_pair(0x04bb,"CYRILLIC SMALL LETTER H"));
        data.insert(std::make_pair(0x04bc,"CYRILLIC CAPITAL LETTER IE HOOK"));
        data.insert(std::make_pair(0x04bd,"CYRILLIC SMALL LETTER IE HOOK"));
        data.insert(std::make_pair(0x04be,"CYRILLIC CAPITAL LETTER IE HOOK OGONEK"));
        data.insert(std::make_pair(0x04bf,"CYRILLIC SMALL LETTER IE HOOK OGONEK"));
        data.insert(std::make_pair(0x04c0,"CYRILLIC LETTER I"));
        data.insert(std::make_pair(0x04c1,"CYRILLIC CAPITAL LETTER SHORT ZHE"));
        data.insert(std::make_pair(0x04c2,"CYRILLIC SMALL LETTER SHORT ZHE"));
        data.insert(std::make_pair(0x04c3,"CYRILLIC CAPITAL LETTER KA HOOK"));
        data.insert(std::make_pair(0x04c4,"CYRILLIC SMALL LETTER KA HOOK"));
        data.insert(std::make_pair(0x04c7,"CYRILLIC CAPITAL LETTER EN HOOK"));
        data.insert(std::make_pair(0x04c8,"CYRILLIC SMALL LETTER EN HOOK"));
        data.insert(std::make_pair(0x04cb,"CYRILLIC CAPITAL LETTER CHE WITH LEFT DESCENDER"));
        data.insert(std::make_pair(0x04cc,"CYRILLIC SMALL LETTER CHE WITH LEFT DESCENDER"));
        data.insert(std::make_pair(0x0542,"ARMENIAN CAPITAL LETTER LAD"));
        data.insert(std::make_pair(0x055a,"ARMENIAN MODIFIER LETTER RIGHT HALF RING"));
        data.insert(std::make_pair(0x0572,"ARMENIAN SMALL LETTER LAD"));
        data.insert(std::make_pair(0x0589,"ARMENIAN PERIOD"));
        data.insert(std::make_pair(0x05bc,"HEBREW POINT DAGESH"));
        data.insert(std::make_pair(0x05c0,"HEBREW POINT PASEQ"));
        data.insert(std::make_pair(0x05f0,"HEBREW LETTER DOUBLE VAV"));
        data.insert(std::make_pair(0x05f1,"HEBREW LETTER VAV YOD"));
        data.insert(std::make_pair(0x05f2,"HEBREW LETTER DOUBLE YOD"));
        data.insert(std::make_pair(0x0621,"ARABIC LETTER HAMZAH"));
        data.insert(std::make_pair(0x0622,"ARABIC LETTER MADDAH ON ALEF"));
        data.insert(std::make_pair(0x0623,"ARABIC LETTER HAMZAH ON ALEF"));
        data.insert(std::make_pair(0x0624,"ARABIC LETTER HAMZAH ON WAW"));
        data.insert(std::make_pair(0x0625,"ARABIC LETTER HAMZAH UNDER ALEF"));
        data.insert(std::make_pair(0x0626,"ARABIC LETTER HAMZAH ON YA"));
        data.insert(std::make_pair(0x0628,"ARABIC LETTER BAA"));
        data.insert(std::make_pair(0x0629,"ARABIC LETTER TAA MARBUTAH"));
        data.insert(std::make_pair(0x062a,"ARABIC LETTER TAA"));
        data.insert(std::make_pair(0x062b,"ARABIC LETTER THAA"));
        data.insert(std::make_pair(0x062d,"ARABIC LETTER HAA"));
        data.insert(std::make_pair(0x062e,"ARABIC LETTER KHAA"));
        data.insert(std::make_pair(0x0631,"ARABIC LETTER RA"));
        data.insert(std::make_pair(0x0638,"ARABIC LETTER DHAH"));
        data.insert(std::make_pair(0x0641,"ARABIC LETTER FA"));
        data.insert(std::make_pair(0x0643,"ARABIC LETTER CAF"));
        data.insert(std::make_pair(0x0647,"ARABIC LETTER HA"));
        data.insert(std::make_pair(0x0649,"ARABIC LETTER ALEF MAQSURAH"));
        data.insert(std::make_pair(0x064a,"ARABIC LETTER YA"));
        data.insert(std::make_pair(0x064e,"ARABIC FATHAH"));
        data.insert(std::make_pair(0x064f,"ARABIC DAMMAH"));
        data.insert(std::make_pair(0x0650,"ARABIC KASRAH"));
        data.insert(std::make_pair(0x0651,"ARABIC SHADDAH"));
        data.insert(std::make_pair(0x0670,"ARABIC ALEF ABOVE"));
        data.insert(std::make_pair(0x0671,"ARABIC LETTER HAMZAT WASL ON ALEF"));
        data.insert(std::make_pair(0x0672,"ARABIC LETTER WAVY HAMZAH ON ALEF"));
        data.insert(std::make_pair(0x0673,"ARABIC LETTER WAVY HAMZAH UNDER ALEF"));
        data.insert(std::make_pair(0x0674,"ARABIC LETTER HIGH HAMZAH"));
        data.insert(std::make_pair(0x0675,"ARABIC LETTER HIGH HAMZAH ALEF"));
        data.insert(std::make_pair(0x0676,"ARABIC LETTER HIGH HAMZAH WAW"));
        data.insert(std::make_pair(0x0677,"ARABIC LETTER HIGH HAMZAH WAW WITH DAMMAH"));
        data.insert(std::make_pair(0x0678,"ARABIC LETTER HIGH HAMZAH YA"));
        data.insert(std::make_pair(0x0679,"ARABIC LETTER TAA WITH SMALL TAH"));
        data.insert(std::make_pair(0x067a,"ARABIC LETTER TAA WITH TWO DOTS VERTICAL ABOVE"));
        data.insert(std::make_pair(0x067b,"ARABIC LETTER BAA WITH TWO DOTS VERTICAL BELOW"));
        data.insert(std::make_pair(0x067c,"ARABIC LETTER TAA WITH RING"));
        data.insert(std::make_pair(0x067d,"ARABIC LETTER TAA WITH THREE DOTS ABOVE DOWNWARD"));
        data.insert(std::make_pair(0x067e,"ARABIC LETTER TAA WITH THREE DOTS BELOW"));
        data.insert(std::make_pair(0x067f,"ARABIC LETTER TAA WITH FOUR DOTS ABOVE"));
        data.insert(std::make_pair(0x0680,"ARABIC LETTER BAA WITH FOUR DOTS BELOW"));
        data.insert(std::make_pair(0x0681,"ARABIC LETTER HAMZAH ON HAA"));
        data.insert(std::make_pair(0x0682,"ARABIC LETTER HAA WITH TWO DOTS VERTICAL ABOVE"));
        data.insert(std::make_pair(0x0683,"ARABIC LETTER HAA WITH MIDDLE TWO DOTS"));
        data.insert(std::make_pair(0x0684,"ARABIC LETTER HAA WITH MIDDLE TWO DOTS VERTICAL"));
        data.insert(std::make_pair(0x0685,"ARABIC LETTER HAA WITH THREE DOTS ABOVE"));
        data.insert(std::make_pair(0x0686,"ARABIC LETTER HAA WITH MIDDLE THREE DOTS DOWNWARD"));
        data.insert(std::make_pair(0x0687,"ARABIC LETTER HAA WITH MIDDLE FOUR DOTS"));
        data.insert(std::make_pair(0x0688,"ARABIC LETTER DAL WITH SMALL TAH"));
        data.insert(std::make_pair(0x068c,"ARABIC LETTER DAL WITH TWO DOTS ABOVE"));
        data.insert(std::make_pair(0x068d,"ARABIC LETTER DAL WITH TWO DOTS BELOW"));
        data.insert(std::make_pair(0x068e,"ARABIC LETTER DAL WITH THREE DOTS ABOVE"));
        data.insert(std::make_pair(0x068f,"ARABIC LETTER DAL WITH THREE DOTS ABOVE DOWNWARD"));
        data.insert(std::make_pair(0x0691,"ARABIC LETTER RA WITH SMALL TAH"));
        data.insert(std::make_pair(0x0692,"ARABIC LETTER RA WITH SMALL V"));
        data.insert(std::make_pair(0x0693,"ARABIC LETTER RA WITH RING"));
        data.insert(std::make_pair(0x0694,"ARABIC LETTER RA WITH DOT BELOW"));
        data.insert(std::make_pair(0x0695,"ARABIC LETTER RA WITH SMALL V BELOW"));
        data.insert(std::make_pair(0x0696,"ARABIC LETTER RA WITH DOT BELOW AND DOT ABOVE"));
        data.insert(std::make_pair(0x0697,"ARABIC LETTER RA WITH TWO DOTS ABOVE"));
        data.insert(std::make_pair(0x0698,"ARABIC LETTER RA WITH THREE DOTS ABOVE"));
        data.insert(std::make_pair(0x0699,"ARABIC LETTER RA WITH FOUR DOTS ABOVE"));
        data.insert(std::make_pair(0x06a1,"ARABIC LETTER DOTLESS FA"));
        data.insert(std::make_pair(0x06a2,"ARABIC LETTER FA WITH DOT MOVED BELOW"));
        data.insert(std::make_pair(0x06a3,"ARABIC LETTER FA WITH DOT BELOW"));
        data.insert(std::make_pair(0x06a4,"ARABIC LETTER FA WITH THREE DOTS ABOVE"));
        data.insert(std::make_pair(0x06a5,"ARABIC LETTER FA WITH THREE DOTS BELOW"));
        data.insert(std::make_pair(0x06a6,"ARABIC LETTER FA WITH FOUR DOTS ABOVE"));
        data.insert(std::make_pair(0x06a9,"ARABIC LETTER OPEN CAF"));
        data.insert(std::make_pair(0x06aa,"ARABIC LETTER SWASH CAF"));
        data.insert(std::make_pair(0x06ab,"ARABIC LETTER CAF WITH RING"));
        data.insert(std::make_pair(0x06ac,"ARABIC LETTER CAF WITH DOT ABOVE"));
        data.insert(std::make_pair(0x06ad,"ARABIC LETTER CAF WITH THREE DOTS ABOVE"));
        data.insert(std::make_pair(0x06ae,"ARABIC LETTER CAF WITH THREE DOTS BELOW"));
        data.insert(std::make_pair(0x06b1,"ARABIC LETTER GAF WITH TWO DOTS ABOVE"));
        data.insert(std::make_pair(0x06b3,"ARABIC LETTER GAF WITH TWO DOTS VERTICAL BELOW"));
        data.insert(std::make_pair(0x06ba,"ARABIC LETTER DOTLESS NOON"));
        data.insert(std::make_pair(0x06bb,"ARABIC LETTER DOTLESS NOON WITH SMALL TAH"));
        data.insert(std::make_pair(0x06be,"ARABIC LETTER KNOTTED HA"));
        data.insert(std::make_pair(0x06c0,"ARABIC LETTER HAMZAH ON HA"));
        data.insert(std::make_pair(0x06c1,"ARABIC LETTER HA GOAL"));
        data.insert(std::make_pair(0x06c2,"ARABIC LETTER HAMZAH ON HA GOAL"));
        data.insert(std::make_pair(0x06c3,"ARABIC LETTER TAA MARBUTAH GOAL"));
        data.insert(std::make_pair(0x06c5,"ARABIC LETTER WAW WITH BAR"));
        data.insert(std::make_pair(0x06c6,"ARABIC LETTER WAW WITH SMALL V"));
        data.insert(std::make_pair(0x06c7,"ARABIC LETTER WAW WITH DAMMAH"));
        data.insert(std::make_pair(0x06c8,"ARABIC LETTER WAW WITH ALEF ABOVE"));
        data.insert(std::make_pair(0x06c9,"ARABIC LETTER WAW WITH INVERTED SMALL V"));
        data.insert(std::make_pair(0x06cb,"ARABIC LETTER WAW WITH THREE DOTS ABOVE"));
        data.insert(std::make_pair(0x06cc,"ARABIC LETTER DOTLESS YA"));
        data.insert(std::make_pair(0x06cd,"ARABIC LETTER YA WITH TAIL"));
        data.insert(std::make_pair(0x06ce,"ARABIC LETTER YA WITH SMALL V"));
        data.insert(std::make_pair(0x06d0,"ARABIC LETTER YA WITH TWO DOTS VERTICAL BELOW"));
        data.insert(std::make_pair(0x06d1,"ARABIC LETTER YA WITH THREE DOTS BELOW"));
        data.insert(std::make_pair(0x06d2,"ARABIC LETTER YA BARREE"));
        data.insert(std::make_pair(0x06d3,"ARABIC LETTER HAMZAH ON YA BARREE"));
        data.insert(std::make_pair(0x06d4,"ARABIC PERIOD"));
        data.insert(std::make_pair(0x06f0,"EASTERN ARABIC-INDIC DIGIT ZERO"));
        data.insert(std::make_pair(0x06f1,"EASTERN ARABIC-INDIC DIGIT ONE"));
        data.insert(std::make_pair(0x06f2,"EASTERN ARABIC-INDIC DIGIT TWO"));
        data.insert(std::make_pair(0x06f3,"EASTERN ARABIC-INDIC DIGIT THREE"));
        data.insert(std::make_pair(0x06f4,"EASTERN ARABIC-INDIC DIGIT FOUR"));
        data.insert(std::make_pair(0x06f5,"EASTERN ARABIC-INDIC DIGIT FIVE"));
        data.insert(std::make_pair(0x06f6,"EASTERN ARABIC-INDIC DIGIT SIX"));
        data.insert(std::make_pair(0x06f7,"EASTERN ARABIC-INDIC DIGIT SEVEN"));
        data.insert(std::make_pair(0x06f8,"EASTERN ARABIC-INDIC DIGIT EIGHT"));
        data.insert(std::make_pair(0x06f9,"EASTERN ARABIC-INDIC DIGIT NINE"));
        data.insert(std::make_pair(0x09f1,"BENGALI LETTER VA WITH LOWER DIAGONAL"));
        data.insert(std::make_pair(0x0e01,"THAI LETTER KO KAI"));
        data.insert(std::make_pair(0x0e02,"THAI LETTER KHO KHAI"));
        data.insert(std::make_pair(0x0e03,"THAI LETTER KHO KHUAT"));
        data.insert(std::make_pair(0x0e04,"THAI LETTER KHO KHWAI"));
        data.insert(std::make_pair(0x0e05,"THAI LETTER KHO KHON"));
        data.insert(std::make_pair(0x0e06,"THAI LETTER KHO RAKHANG"));
        data.insert(std::make_pair(0x0e07,"THAI LETTER NGO NGU"));
        data.insert(std::make_pair(0x0e08,"THAI LETTER CHO CHAN"));
        data.insert(std::make_pair(0x0e09,"THAI LETTER CHO CHING"));
        data.insert(std::make_pair(0x0e0a,"THAI LETTER CHO CHANG"));
        data.insert(std::make_pair(0x0e0b,"THAI LETTER SO SO"));
        data.insert(std::make_pair(0x0e0c,"THAI LETTER CHO CHOE"));
        data.insert(std::make_pair(0x0e0d,"THAI LETTER YO YING"));
        data.insert(std::make_pair(0x0e0e,"THAI LETTER DO CHADA"));
        data.insert(std::make_pair(0x0e0f,"THAI LETTER TO PATAK"));
        data.insert(std::make_pair(0x0e10,"THAI LETTER THO THAN"));
        data.insert(std::make_pair(0x0e11,"THAI LETTER THO NANGMONTHO"));
        data.insert(std::make_pair(0x0e12,"THAI LETTER THO PHUTHAO"));
        data.insert(std::make_pair(0x0e13,"THAI LETTER NO NEN"));
        data.insert(std::make_pair(0x0e14,"THAI LETTER DO DEK"));
        data.insert(std::make_pair(0x0e15,"THAI LETTER TO TAO"));
        data.insert(std::make_pair(0x0e16,"THAI LETTER THO THUNG"));
        data.insert(std::make_pair(0x0e17,"THAI LETTER THO THAHAN"));
        data.insert(std::make_pair(0x0e18,"THAI LETTER THO THONG"));
        data.insert(std::make_pair(0x0e19,"THAI LETTER NO NU"));
        data.insert(std::make_pair(0x0e1a,"THAI LETTER BO BAIMAI"));
        data.insert(std::make_pair(0x0e1b,"THAI LETTER PO PLA"));
        data.insert(std::make_pair(0x0e1c,"THAI LETTER PHO PHUNG"));
        data.insert(std::make_pair(0x0e1d,"THAI LETTER FO FA"));
        data.insert(std::make_pair(0x0e1e,"THAI LETTER PHO PHAN"));
        data.insert(std::make_pair(0x0e1f,"THAI LETTER FO FAN"));
        data.insert(std::make_pair(0x0e20,"THAI LETTER PHO SAMPHAO"));
        data.insert(std::make_pair(0x0e21,"THAI LETTER MO MA"));
        data.insert(std::make_pair(0x0e22,"THAI LETTER YO YAK"));
        data.insert(std::make_pair(0x0e23,"THAI LETTER RO RUA"));
        data.insert(std::make_pair(0x0e24,"THAI LETTER RU"));
        data.insert(std::make_pair(0x0e25,"THAI LETTER LO LING"));
        data.insert(std::make_pair(0x0e26,"THAI LETTER LU"));
        data.insert(std::make_pair(0x0e27,"THAI LETTER WO WAEN"));
        data.insert(std::make_pair(0x0e28,"THAI LETTER SO SALA"));
        data.insert(std::make_pair(0x0e29,"THAI LETTER SO RUSI"));
        data.insert(std::make_pair(0x0e2a,"THAI LETTER SO SUA"));
        data.insert(std::make_pair(0x0e2b,"THAI LETTER HO HIP"));
        data.insert(std::make_pair(0x0e2c,"THAI LETTER LO CHULA"));
        data.insert(std::make_pair(0x0e2d,"THAI LETTER O ANG"));
        data.insert(std::make_pair(0x0e2e,"THAI LETTER HO NOK HUK"));
        data.insert(std::make_pair(0x0e2f,"THAI PAI YAN NOI"));
        data.insert(std::make_pair(0x0e30,"THAI VOWEL SIGN SARA A"));
        data.insert(std::make_pair(0x0e31,"THAI VOWEL SIGN MAI HAN-AKAT"));
        data.insert(std::make_pair(0x0e32,"THAI VOWEL SIGN SARA AA"));
        data.insert(std::make_pair(0x0e33,"THAI VOWEL SIGN SARA AM"));
        data.insert(std::make_pair(0x0e34,"THAI VOWEL SIGN SARA I"));
        data.insert(std::make_pair(0x0e35,"THAI VOWEL SIGN SARA II"));
        data.insert(std::make_pair(0x0e36,"THAI VOWEL SIGN SARA UE"));
        data.insert(std::make_pair(0x0e37,"THAI VOWEL SIGN SARA UEE"));
        data.insert(std::make_pair(0x0e38,"THAI VOWEL SIGN SARA U"));
        data.insert(std::make_pair(0x0e39,"THAI VOWEL SIGN SARA UU"));
        data.insert(std::make_pair(0x0e3a,"THAI VOWEL SIGN PHINTHU"));
        data.insert(std::make_pair(0x0e3f,"THAI BAHT SIGN"));
        data.insert(std::make_pair(0x0e40,"THAI VOWEL SIGN SARA E"));
        data.insert(std::make_pair(0x0e41,"THAI VOWEL SIGN SARA AE"));
        data.insert(std::make_pair(0x0e42,"THAI VOWEL SIGN SARA O"));
        data.insert(std::make_pair(0x0e43,"THAI VOWEL SIGN SARA MAI MUAN"));
        data.insert(std::make_pair(0x0e44,"THAI VOWEL SIGN SARA MAI MALAI"));
        data.insert(std::make_pair(0x0e45,"THAI LAK KHANG YAO"));
        data.insert(std::make_pair(0x0e46,"THAI MAI YAMOK"));
        data.insert(std::make_pair(0x0e47,"THAI VOWEL SIGN MAI TAI KHU"));
        data.insert(std::make_pair(0x0e48,"THAI TONE MAI EK"));
        data.insert(std::make_pair(0x0e49,"THAI TONE MAI THO"));
        data.insert(std::make_pair(0x0e4a,"THAI TONE MAI TRI"));
        data.insert(std::make_pair(0x0e4b,"THAI TONE MAI CHATTAWA"));
        data.insert(std::make_pair(0x0e4c,"THAI THANTHAKHAT"));
        data.insert(std::make_pair(0x0e4d,"THAI NIKKHAHIT"));
        data.insert(std::make_pair(0x0e4e,"THAI YAMAKKAN"));
        data.insert(std::make_pair(0x0e4f,"THAI FONGMAN"));
        data.insert(std::make_pair(0x0e5a,"THAI ANGKHANKHU"));
        data.insert(std::make_pair(0x0e5b,"THAI KHOMUT"));
        data.insert(std::make_pair(0x0f04,"TIBETAN SINGLE ORNAMENT"));
        data.insert(std::make_pair(0x0f08,"TIBETAN RGYANSHAD"));
        data.insert(std::make_pair(0x0f0b,"TIBETAN TSEG"));
        data.insert(std::make_pair(0x0f0d,"TIBETAN SHAD"));
        data.insert(std::make_pair(0x0f0e,"TIBETAN DOUBLE SHAD"));
        data.insert(std::make_pair(0x0f11,"TIBETAN RINCHANPHUNGSHAD"));
        data.insert(std::make_pair(0x0f14,"TIBETAN COMMA"));
        data.insert(std::make_pair(0x0f35,"TIBETAN HONORIFIC UNDER RING"));
        data.insert(std::make_pair(0x0f37,"TIBETAN UNDER RING"));
        data.insert(std::make_pair(0x0f39,"TIBETAN LENITION MARK"));
        data.insert(std::make_pair(0x0f3c,"TIBETAN LEFT BRACE"));
        data.insert(std::make_pair(0x0f3d,"TIBETAN RIGHT BRACE"));
        data.insert(std::make_pair(0x0f4a,"TIBETAN LETTER REVERSED TA"));
        data.insert(std::make_pair(0x0f4b,"TIBETAN LETTER REVERSED THA"));
        data.insert(std::make_pair(0x0f4c,"TIBETAN LETTER REVERSED DA"));
        data.insert(std::make_pair(0x0f4e,"TIBETAN LETTER REVERSED NA"));
        data.insert(std::make_pair(0x0f60,"TIBETAN LETTER AA"));
        data.insert(std::make_pair(0x0f65,"TIBETAN LETTER REVERSED SHA"));
        data.insert(std::make_pair(0x0f7b,"TIBETAN VOWEL SIGN AI"));
        data.insert(std::make_pair(0x0f7d,"TIBETAN VOWEL SIGN AU"));
        data.insert(std::make_pair(0x0f7e,"TIBETAN ANUSVARA"));
        data.insert(std::make_pair(0x0f7f,"TIBETAN VISARGA"));
        data.insert(std::make_pair(0x0f80,"TIBETAN VOWEL SIGN SHORT I"));
        data.insert(std::make_pair(0x0f82,"TIBETAN CANDRABINDU WITH ORNAMENT"));
        data.insert(std::make_pair(0x0f83,"TIBETAN CANDRABINDU"));
        data.insert(std::make_pair(0x0f84,"TIBETAN VIRAMA"));
        data.insert(std::make_pair(0x0f85,"TIBETAN CHUCHENYIGE"));
        data.insert(std::make_pair(0x10d0,"GEORGIAN SMALL LETTER AN"));
        data.insert(std::make_pair(0x10d1,"GEORGIAN SMALL LETTER BAN"));
        data.insert(std::make_pair(0x10d2,"GEORGIAN SMALL LETTER GAN"));
        data.insert(std::make_pair(0x10d3,"GEORGIAN SMALL LETTER DON"));
        data.insert(std::make_pair(0x10d4,"GEORGIAN SMALL LETTER EN"));
        data.insert(std::make_pair(0x10d5,"GEORGIAN SMALL LETTER VIN"));
        data.insert(std::make_pair(0x10d6,"GEORGIAN SMALL LETTER ZEN"));
        data.insert(std::make_pair(0x10d7,"GEORGIAN SMALL LETTER TAN"));
        data.insert(std::make_pair(0x10d8,"GEORGIAN SMALL LETTER IN"));
        data.insert(std::make_pair(0x10d9,"GEORGIAN SMALL LETTER KAN"));
        data.insert(std::make_pair(0x10da,"GEORGIAN SMALL LETTER LAS"));
        data.insert(std::make_pair(0x10db,"GEORGIAN SMALL LETTER MAN"));
        data.insert(std::make_pair(0x10dc,"GEORGIAN SMALL LETTER NAR"));
        data.insert(std::make_pair(0x10dd,"GEORGIAN SMALL LETTER ON"));
        data.insert(std::make_pair(0x10de,"GEORGIAN SMALL LETTER PAR"));
        data.insert(std::make_pair(0x10df,"GEORGIAN SMALL LETTER ZHAR"));
        data.insert(std::make_pair(0x10e0,"GEORGIAN SMALL LETTER RAE"));
        data.insert(std::make_pair(0x10e1,"GEORGIAN SMALL LETTER SAN"));
        data.insert(std::make_pair(0x10e2,"GEORGIAN SMALL LETTER TAR"));
        data.insert(std::make_pair(0x10e3,"GEORGIAN SMALL LETTER UN"));
        data.insert(std::make_pair(0x10e4,"GEORGIAN SMALL LETTER PHAR"));
        data.insert(std::make_pair(0x10e5,"GEORGIAN SMALL LETTER KHAR"));
        data.insert(std::make_pair(0x10e6,"GEORGIAN SMALL LETTER GHAN"));
        data.insert(std::make_pair(0x10e7,"GEORGIAN SMALL LETTER QAR"));
        data.insert(std::make_pair(0x10e8,"GEORGIAN SMALL LETTER SHIN"));
        data.insert(std::make_pair(0x10e9,"GEORGIAN SMALL LETTER CHIN"));
        data.insert(std::make_pair(0x10ea,"GEORGIAN SMALL LETTER CAN"));
        data.insert(std::make_pair(0x10eb,"GEORGIAN SMALL LETTER JIL"));
        data.insert(std::make_pair(0x10ec,"GEORGIAN SMALL LETTER CIL"));
        data.insert(std::make_pair(0x10ed,"GEORGIAN SMALL LETTER CHAR"));
        data.insert(std::make_pair(0x10ee,"GEORGIAN SMALL LETTER XAN"));
        data.insert(std::make_pair(0x10ef,"GEORGIAN SMALL LETTER JHAN"));
        data.insert(std::make_pair(0x10f0,"GEORGIAN SMALL LETTER HAE"));
        data.insert(std::make_pair(0x10f1,"GEORGIAN SMALL LETTER HE"));
        data.insert(std::make_pair(0x10f2,"GEORGIAN SMALL LETTER HIE"));
        data.insert(std::make_pair(0x10f3,"GEORGIAN SMALL LETTER WE"));
        data.insert(std::make_pair(0x10f4,"GEORGIAN SMALL LETTER HAR"));
        data.insert(std::make_pair(0x10f5,"GEORGIAN SMALL LETTER HOE"));
        data.insert(std::make_pair(0x10f6,"GEORGIAN SMALL LETTER FI"));
        data.insert(std::make_pair(0x2015,"QUOTATION DASH"));
        data.insert(std::make_pair(0x2016,"DOUBLE VERTICAL BAR"));
        data.insert(std::make_pair(0x2017,"SPACING DOUBLE UNDERSCORE"));
        data.insert(std::make_pair(0x2018,"SINGLE TURNED COMMA QUOTATION MARK"));
        data.insert(std::make_pair(0x2019,"SINGLE COMMA QUOTATION MARK"));
        data.insert(std::make_pair(0x201a,"LOW SINGLE COMMA QUOTATION MARK"));
        data.insert(std::make_pair(0x201b,"SINGLE REVERSED COMMA QUOTATION MARK"));
        data.insert(std::make_pair(0x201c,"DOUBLE TURNED COMMA QUOTATION MARK"));
        data.insert(std::make_pair(0x201d,"DOUBLE COMMA QUOTATION MARK"));
        data.insert(std::make_pair(0x201e,"LOW DOUBLE COMMA QUOTATION MARK"));
        data.insert(std::make_pair(0x201f,"DOUBLE REVERSED COMMA QUOTATION MARK"));
        data.insert(std::make_pair(0x2039,"LEFT POINTING SINGLE GUILLEMET"));
        data.insert(std::make_pair(0x203a,"RIGHT POINTING SINGLE GUILLEMET"));
        data.insert(std::make_pair(0x203e,"SPACING OVERSCORE"));
        data.insert(std::make_pair(0x2070,"SUPERSCRIPT DIGIT ZERO"));
        data.insert(std::make_pair(0x2074,"SUPERSCRIPT DIGIT FOUR"));
        data.insert(std::make_pair(0x2075,"SUPERSCRIPT DIGIT FIVE"));
        data.insert(std::make_pair(0x2076,"SUPERSCRIPT DIGIT SIX"));
        data.insert(std::make_pair(0x2077,"SUPERSCRIPT DIGIT SEVEN"));
        data.insert(std::make_pair(0x2078,"SUPERSCRIPT DIGIT EIGHT"));
        data.insert(std::make_pair(0x2079,"SUPERSCRIPT DIGIT NINE"));
        data.insert(std::make_pair(0x207b,"SUPERSCRIPT HYPHEN-MINUS"));
        data.insert(std::make_pair(0x207d,"SUPERSCRIPT OPENING PARENTHESIS"));
        data.insert(std::make_pair(0x207e,"SUPERSCRIPT CLOSING PARENTHESIS"));
        data.insert(std::make_pair(0x2080,"SUBSCRIPT DIGIT ZERO"));
        data.insert(std::make_pair(0x2081,"SUBSCRIPT DIGIT ONE"));
        data.insert(std::make_pair(0x2082,"SUBSCRIPT DIGIT TWO"));
        data.insert(std::make_pair(0x2083,"SUBSCRIPT DIGIT THREE"));
        data.insert(std::make_pair(0x2084,"SUBSCRIPT DIGIT FOUR"));
        data.insert(std::make_pair(0x2085,"SUBSCRIPT DIGIT FIVE"));
        data.insert(std::make_pair(0x2086,"SUBSCRIPT DIGIT SIX"));
        data.insert(std::make_pair(0x2087,"SUBSCRIPT DIGIT SEVEN"));
        data.insert(std::make_pair(0x2088,"SUBSCRIPT DIGIT EIGHT"));
        data.insert(std::make_pair(0x2089,"SUBSCRIPT DIGIT NINE"));
        data.insert(std::make_pair(0x208b,"SUBSCRIPT HYPHEN-MINUS"));
        data.insert(std::make_pair(0x208d,"SUBSCRIPT OPENING PARENTHESIS"));
        data.insert(std::make_pair(0x208e,"SUBSCRIPT CLOSING PARENTHESIS"));
        data.insert(std::make_pair(0x20d0,"NON-SPACING LEFT HARPOON ABOVE"));
        data.insert(std::make_pair(0x20d1,"NON-SPACING RIGHT HARPOON ABOVE"));
        data.insert(std::make_pair(0x20d2,"NON-SPACING LONG VERTICAL BAR OVERLAY"));
        data.insert(std::make_pair(0x20d3,"NON-SPACING SHORT VERTICAL BAR OVERLAY"));
        data.insert(std::make_pair(0x20d4,"NON-SPACING ANTICLOCKWISE ARROW ABOVE"));
        data.insert(std::make_pair(0x20d5,"NON-SPACING CLOCKWISE ARROW ABOVE"));
        data.insert(std::make_pair(0x20d6,"NON-SPACING LEFT ARROW ABOVE"));
        data.insert(std::make_pair(0x20d7,"NON-SPACING RIGHT ARROW ABOVE"));
        data.insert(std::make_pair(0x20d8,"NON-SPACING RING OVERLAY"));
        data.insert(std::make_pair(0x20d9,"NON-SPACING CLOCKWISE RING OVERLAY"));
        data.insert(std::make_pair(0x20da,"NON-SPACING ANTICLOCKWISE RING OVERLAY"));
        data.insert(std::make_pair(0x20db,"NON-SPACING THREE DOTS ABOVE"));
        data.insert(std::make_pair(0x20dc,"NON-SPACING FOUR DOTS ABOVE"));
        data.insert(std::make_pair(0x20dd,"ENCLOSING CIRCLE"));
        data.insert(std::make_pair(0x20de,"ENCLOSING SQUARE"));
        data.insert(std::make_pair(0x20df,"ENCLOSING DIAMOND"));
        data.insert(std::make_pair(0x20e0,"ENCLOSING CIRCLE SLASH"));
        data.insert(std::make_pair(0x20e1,"NON-SPACING LEFT RIGHT ARROW ABOVE"));
        data.insert(std::make_pair(0x2102,"DOUBLE-STRUCK C"));
        data.insert(std::make_pair(0x2103,"DEGREES CENTIGRADE"));
        data.insert(std::make_pair(0x2104,"C L SYMBOL"));
        data.insert(std::make_pair(0x2107,"EULERS"));
        data.insert(std::make_pair(0x2109,"DEGREES FAHRENHEIT"));
        data.insert(std::make_pair(0x210b,"SCRIPT H"));
        data.insert(std::make_pair(0x210c,"BLACK-LETTER H"));
        data.insert(std::make_pair(0x210d,"DOUBLE-STRUCK H"));
        data.insert(std::make_pair(0x210f,"PLANCK CONSTANT OVER 2 PI"));
        data.insert(std::make_pair(0x2110,"SCRIPT I"));
        data.insert(std::make_pair(0x2111,"BLACK-LETTER I"));
        data.insert(std::make_pair(0x2112,"SCRIPT L"));
        data.insert(std::make_pair(0x2115,"DOUBLE-STRUCK N"));
        data.insert(std::make_pair(0x2116,"NUMERO"));
        data.insert(std::make_pair(0x2118,"SCRIPT P"));
        data.insert(std::make_pair(0x2119,"DOUBLE-STRUCK P"));
        data.insert(std::make_pair(0x211a,"DOUBLE-STRUCK Q"));
        data.insert(std::make_pair(0x211b,"SCRIPT R"));
        data.insert(std::make_pair(0x211c,"BLACK-LETTER R"));
        data.insert(std::make_pair(0x211d,"DOUBLE-STRUCK R"));
        data.insert(std::make_pair(0x2121,"T E L SYMBOL"));
        data.insert(std::make_pair(0x2122,"TRADEMARK"));
        data.insert(std::make_pair(0x2124,"DOUBLE-STRUCK Z"));
        data.insert(std::make_pair(0x2125,"OUNCE"));
        data.insert(std::make_pair(0x2126,"OHM"));
        data.insert(std::make_pair(0x2127,"MHO"));
        data.insert(std::make_pair(0x2128,"BLACK-LETTER Z"));
        data.insert(std::make_pair(0x212a,"DEGREES KELVIN"));
        data.insert(std::make_pair(0x212b,"ANGSTROM UNIT"));
        data.insert(std::make_pair(0x212c,"SCRIPT B"));
        data.insert(std::make_pair(0x212d,"BLACK-LETTER C"));
        data.insert(std::make_pair(0x2130,"SCRIPT E"));
        data.insert(std::make_pair(0x2131,"SCRIPT F"));
        data.insert(std::make_pair(0x2132,"TURNED F"));
        data.insert(std::make_pair(0x2133,"SCRIPT M"));
        data.insert(std::make_pair(0x2135,"FIRST TRANSFINITE CARDINAL"));
        data.insert(std::make_pair(0x2136,"SECOND TRANSFINITE CARDINAL"));
        data.insert(std::make_pair(0x2137,"THIRD TRANSFINITE CARDINAL"));
        data.insert(std::make_pair(0x2138,"FOURTH TRANSFINITE CARDINAL"));
        data.insert(std::make_pair(0x2153,"FRACTION ONE THIRD"));
        data.insert(std::make_pair(0x2154,"FRACTION TWO THIRDS"));
        data.insert(std::make_pair(0x2155,"FRACTION ONE FIFTH"));
        data.insert(std::make_pair(0x2156,"FRACTION TWO FIFTHS"));
        data.insert(std::make_pair(0x2157,"FRACTION THREE FIFTHS"));
        data.insert(std::make_pair(0x2158,"FRACTION FOUR FIFTHS"));
        data.insert(std::make_pair(0x2159,"FRACTION ONE SIXTH"));
        data.insert(std::make_pair(0x215a,"FRACTION FIVE SIXTHS"));
        data.insert(std::make_pair(0x215b,"FRACTION ONE EIGHTH"));
        data.insert(std::make_pair(0x215c,"FRACTION THREE EIGHTHS"));
        data.insert(std::make_pair(0x215d,"FRACTION FIVE EIGHTHS"));
        data.insert(std::make_pair(0x215e,"FRACTION SEVEN EIGHTHS"));
        data.insert(std::make_pair(0x2190,"LEFT ARROW"));
        data.insert(std::make_pair(0x2191,"UP ARROW"));
        data.insert(std::make_pair(0x2192,"RIGHT ARROW"));
        data.insert(std::make_pair(0x2193,"DOWN ARROW"));
        data.insert(std::make_pair(0x2196,"UPPER LEFT ARROW"));
        data.insert(std::make_pair(0x2197,"UPPER RIGHT ARROW"));
        data.insert(std::make_pair(0x2198,"LOWER RIGHT ARROW"));
        data.insert(std::make_pair(0x2199,"LOWER LEFT ARROW"));
        data.insert(std::make_pair(0x219a,"LEFT ARROW WITH STROKE"));
        data.insert(std::make_pair(0x219b,"RIGHT ARROW WITH STROKE"));
        data.insert(std::make_pair(0x219c,"LEFT WAVE ARROW"));
        data.insert(std::make_pair(0x219d,"RIGHT WAVE ARROW"));
        data.insert(std::make_pair(0x219e,"LEFT TWO HEADED ARROW"));
        data.insert(std::make_pair(0x219f,"UP TWO HEADED ARROW"));
        data.insert(std::make_pair(0x21a0,"RIGHT TWO HEADED ARROW"));
        data.insert(std::make_pair(0x21a1,"DOWN TWO HEADED ARROW"));
        data.insert(std::make_pair(0x21a2,"LEFT ARROW WITH TAIL"));
        data.insert(std::make_pair(0x21a3,"RIGHT ARROW WITH TAIL"));
        data.insert(std::make_pair(0x21a4,"LEFT ARROW FROM BAR"));
        data.insert(std::make_pair(0x21a5,"UP ARROW FROM BAR"));
        data.insert(std::make_pair(0x21a6,"RIGHT ARROW FROM BAR"));
        data.insert(std::make_pair(0x21a7,"DOWN ARROW FROM BAR"));
        data.insert(std::make_pair(0x21a9,"LEFT ARROW WITH HOOK"));
        data.insert(std::make_pair(0x21aa,"RIGHT ARROW WITH HOOK"));
        data.insert(std::make_pair(0x21ab,"LEFT ARROW WITH LOOP"));
        data.insert(std::make_pair(0x21ac,"RIGHT ARROW WITH LOOP"));
        data.insert(std::make_pair(0x21af,"DOWN ZIGZAG ARROW"));
        data.insert(std::make_pair(0x21b0,"UP ARROW WITH TIP LEFT"));
        data.insert(std::make_pair(0x21b1,"UP ARROW WITH TIP RIGHT"));
        data.insert(std::make_pair(0x21b2,"DOWN ARROW WITH TIP LEFT"));
        data.insert(std::make_pair(0x21b3,"DOWN ARROW WITH TIP RIGHT"));
        data.insert(std::make_pair(0x21b4,"RIGHT ARROW WITH CORNER DOWN"));
        data.insert(std::make_pair(0x21b5,"DOWN ARROW WITH CORNER LEFT"));
        data.insert(std::make_pair(0x21b8,"UPPER LEFT ARROW TO LONG BAR"));
        data.insert(std::make_pair(0x21b9,"LEFT ARROW TO BAR OVER RIGHT ARROW TO BAR"));
        data.insert(std::make_pair(0x21bc,"LEFT HARPOON WITH BARB UP"));
        data.insert(std::make_pair(0x21bd,"LEFT HARPOON WITH BARB DOWN"));
        data.insert(std::make_pair(0x21be,"UP HARPOON WITH BARB RIGHT"));
        data.insert(std::make_pair(0x21bf,"UP HARPOON WITH BARB LEFT"));
        data.insert(std::make_pair(0x21c0,"RIGHT HARPOON WITH BARB UP"));
        data.insert(std::make_pair(0x21c1,"RIGHT HARPOON WITH BARB DOWN"));
        data.insert(std::make_pair(0x21c2,"DOWN HARPOON WITH BARB RIGHT"));
        data.insert(std::make_pair(0x21c3,"DOWN HARPOON WITH BARB LEFT"));
        data.insert(std::make_pair(0x21c4,"RIGHT ARROW OVER LEFT ARROW"));
        data.insert(std::make_pair(0x21c5,"UP ARROW LEFT OF DOWN ARROW"));
        data.insert(std::make_pair(0x21c6,"LEFT ARROW OVER RIGHT ARROW"));
        data.insert(std::make_pair(0x21c7,"LEFT PAIRED ARROWS"));
        data.insert(std::make_pair(0x21c8,"UP PAIRED ARROWS"));
        data.insert(std::make_pair(0x21c9,"RIGHT PAIRED ARROWS"));
        data.insert(std::make_pair(0x21ca,"DOWN PAIRED ARROWS"));
        data.insert(std::make_pair(0x21cb,"LEFT HARPOON OVER RIGHT HARPOON"));
        data.insert(std::make_pair(0x21cc,"RIGHT HARPOON OVER LEFT HARPOON"));
        data.insert(std::make_pair(0x21cd,"LEFT DOUBLE ARROW WITH STROKE"));
        data.insert(std::make_pair(0x21cf,"RIGHT DOUBLE ARROW WITH STROKE"));
        data.insert(std::make_pair(0x21d0,"LEFT DOUBLE ARROW"));
        data.insert(std::make_pair(0x21d1,"UP DOUBLE ARROW"));
        data.insert(std::make_pair(0x21d2,"RIGHT DOUBLE ARROW"));
        data.insert(std::make_pair(0x21d3,"DOWN DOUBLE ARROW"));
        data.insert(std::make_pair(0x21d6,"UPPER LEFT DOUBLE ARROW"));
        data.insert(std::make_pair(0x21d7,"UPPER RIGHT DOUBLE ARROW"));
        data.insert(std::make_pair(0x21d8,"LOWER RIGHT DOUBLE ARROW"));
        data.insert(std::make_pair(0x21d9,"LOWER LEFT DOUBLE ARROW"));
        data.insert(std::make_pair(0x21da,"LEFT TRIPLE ARROW"));
        data.insert(std::make_pair(0x21db,"RIGHT TRIPLE ARROW"));
        data.insert(std::make_pair(0x21dc,"LEFT SQUIGGLE ARROW"));
        data.insert(std::make_pair(0x21dd,"RIGHT SQUIGGLE ARROW"));
        data.insert(std::make_pair(0x21de,"UP ARROW WITH DOUBLE STROKE"));
        data.insert(std::make_pair(0x21df,"DOWN ARROW WITH DOUBLE STROKE"));
        data.insert(std::make_pair(0x21e0,"LEFT DASHED ARROW"));
        data.insert(std::make_pair(0x21e1,"UP DASHED ARROW"));
        data.insert(std::make_pair(0x21e2,"RIGHT DASHED ARROW"));
        data.insert(std::make_pair(0x21e3,"DOWN DASHED ARROW"));
        data.insert(std::make_pair(0x21e4,"LEFT ARROW TO BAR"));
        data.insert(std::make_pair(0x21e5,"RIGHT ARROW TO BAR"));
        data.insert(std::make_pair(0x21e6,"WHITE LEFT ARROW"));
        data.insert(std::make_pair(0x21e7,"WHITE UP ARROW"));
        data.insert(std::make_pair(0x21e8,"WHITE RIGHT ARROW"));
        data.insert(std::make_pair(0x21e9,"WHITE DOWN ARROW"));
        data.insert(std::make_pair(0x21ea,"WHITE UP ARROW FROM BAR"));
        data.insert(std::make_pair(0x2254,"COLON EQUAL"));
        data.insert(std::make_pair(0x2255,"EQUAL COLON"));
        data.insert(std::make_pair(0x2264,"LESS THAN OR EQUAL TO"));
        data.insert(std::make_pair(0x2265,"GREATER THAN OR EQUAL TO"));
        data.insert(std::make_pair(0x2266,"LESS THAN OVER EQUAL TO"));
        data.insert(std::make_pair(0x2267,"GREATER THAN OVER EQUAL TO"));
        data.insert(std::make_pair(0x2268,"LESS THAN BUT NOT EQUAL TO"));
        data.insert(std::make_pair(0x2269,"GREATER THAN BUT NOT EQUAL TO"));
        data.insert(std::make_pair(0x226a,"MUCH LESS THAN"));
        data.insert(std::make_pair(0x226b,"MUCH GREATER THAN"));
        data.insert(std::make_pair(0x226e,"NOT LESS THAN"));
        data.insert(std::make_pair(0x226f,"NOT GREATER THAN"));
        data.insert(std::make_pair(0x2270,"NEITHER LESS THAN NOR EQUAL TO"));
        data.insert(std::make_pair(0x2271,"NEITHER GREATER THAN NOR EQUAL TO"));
        data.insert(std::make_pair(0x2272,"LESS THAN OR EQUIVALENT TO"));
        data.insert(std::make_pair(0x2273,"GREATER THAN OR EQUIVALENT TO"));
        data.insert(std::make_pair(0x2274,"NEITHER LESS THAN NOR EQUIVALENT TO"));
        data.insert(std::make_pair(0x2275,"NEITHER GREATER THAN NOR EQUIVALENT TO"));
        data.insert(std::make_pair(0x2276,"LESS THAN OR GREATER THAN"));
        data.insert(std::make_pair(0x2277,"GREATER THAN OR LESS THAN"));
        data.insert(std::make_pair(0x2278,"NEITHER LESS THAN NOR GREATER THAN"));
        data.insert(std::make_pair(0x2279,"NEITHER GREATER THAN NOR LESS THAN"));
        data.insert(std::make_pair(0x228a,"SUBSET OF OR NOT EQUAL TO"));
        data.insert(std::make_pair(0x228b,"SUPERSET OF OR NOT EQUAL TO"));
        data.insert(std::make_pair(0x22d6,"LESS THAN WITH DOT"));
        data.insert(std::make_pair(0x22d7,"GREATER THAN WITH DOT"));
        data.insert(std::make_pair(0x22d8,"VERY MUCH LESS THAN"));
        data.insert(std::make_pair(0x22d9,"VERY MUCH GREATER THAN"));
        data.insert(std::make_pair(0x22da,"LESS THAN EQUAL TO OR GREATER THAN"));
        data.insert(std::make_pair(0x22db,"GREATER THAN EQUAL TO OR LESS THAN"));
        data.insert(std::make_pair(0x22dc,"EQUAL TO OR LESS THAN"));
        data.insert(std::make_pair(0x22dd,"EQUAL TO OR GREATER THAN"));
        data.insert(std::make_pair(0x22e6,"LESS THAN BUT NOT EQUIVALENT TO"));
        data.insert(std::make_pair(0x22e7,"GREATER THAN BUT NOT EQUIVALENT TO"));
        data.insert(std::make_pair(0x2318,"COMMAND KEY"));
        data.insert(std::make_pair(0x2324,"ENTER KEY"));
        data.insert(std::make_pair(0x2326,"DELETE TO THE RIGHT KEY"));
        data.insert(std::make_pair(0x2327,"CLEAR KEY"));
        data.insert(std::make_pair(0x2329,"BRA"));
        data.insert(std::make_pair(0x232a,"KET"));
        data.insert(std::make_pair(0x232b,"DELETE TO THE LEFT KEY"));
        data.insert(std::make_pair(0x2400,"GRAPHIC FOR NULL"));
        data.insert(std::make_pair(0x2401,"GRAPHIC FOR START OF HEADING"));
        data.insert(std::make_pair(0x2402,"GRAPHIC FOR START OF TEXT"));
        data.insert(std::make_pair(0x2403,"GRAPHIC FOR END OF TEXT"));
        data.insert(std::make_pair(0x2404,"GRAPHIC FOR END OF TRANSMISSION"));
        data.insert(std::make_pair(0x2405,"GRAPHIC FOR ENQUIRY"));
        data.insert(std::make_pair(0x2406,"GRAPHIC FOR ACKNOWLEDGE"));
        data.insert(std::make_pair(0x2407,"GRAPHIC FOR BELL"));
        data.insert(std::make_pair(0x2408,"GRAPHIC FOR BACKSPACE"));
        data.insert(std::make_pair(0x2409,"GRAPHIC FOR HORIZONTAL TABULATION"));
        data.insert(std::make_pair(0x240a,"GRAPHIC FOR LINE FEED"));
        data.insert(std::make_pair(0x240b,"GRAPHIC FOR VERTICAL TABULATION"));
        data.insert(std::make_pair(0x240c,"GRAPHIC FOR FORM FEED"));
        data.insert(std::make_pair(0x240d,"GRAPHIC FOR CARRIAGE RETURN"));
        data.insert(std::make_pair(0x240e,"GRAPHIC FOR SHIFT OUT"));
        data.insert(std::make_pair(0x240f,"GRAPHIC FOR SHIFT IN"));
        data.insert(std::make_pair(0x2410,"GRAPHIC FOR DATA LINK ESCAPE"));
        data.insert(std::make_pair(0x2411,"GRAPHIC FOR DEVICE CONTROL ONE"));
        data.insert(std::make_pair(0x2412,"GRAPHIC FOR DEVICE CONTROL TWO"));
        data.insert(std::make_pair(0x2413,"GRAPHIC FOR DEVICE CONTROL THREE"));
        data.insert(std::make_pair(0x2414,"GRAPHIC FOR DEVICE CONTROL FOUR"));
        data.insert(std::make_pair(0x2415,"GRAPHIC FOR NEGATIVE ACKNOWLEDGE"));
        data.insert(std::make_pair(0x2416,"GRAPHIC FOR SYNCHRONOUS IDLE"));
        data.insert(std::make_pair(0x2417,"GRAPHIC FOR END OF TRANSMISSION BLOCK"));
        data.insert(std::make_pair(0x2418,"GRAPHIC FOR CANCEL"));
        data.insert(std::make_pair(0x2419,"GRAPHIC FOR END OF MEDIUM"));
        data.insert(std::make_pair(0x241a,"GRAPHIC FOR SUBSTITUTE"));
        data.insert(std::make_pair(0x241b,"GRAPHIC FOR ESCAPE"));
        data.insert(std::make_pair(0x241c,"GRAPHIC FOR FILE SEPARATOR"));
        data.insert(std::make_pair(0x241d,"GRAPHIC FOR GROUP SEPARATOR"));
        data.insert(std::make_pair(0x241e,"GRAPHIC FOR RECORD SEPARATOR"));
        data.insert(std::make_pair(0x241f,"GRAPHIC FOR UNIT SEPARATOR"));
        data.insert(std::make_pair(0x2420,"GRAPHIC FOR SPACE"));
        data.insert(std::make_pair(0x2421,"GRAPHIC FOR DELETE"));
        data.insert(std::make_pair(0x2422,"BLANK"));
        data.insert(std::make_pair(0x2424,"GRAPHIC FOR NEWLINE"));
        data.insert(std::make_pair(0x2488,"DIGIT ONE PERIOD"));
        data.insert(std::make_pair(0x2489,"DIGIT TWO PERIOD"));
        data.insert(std::make_pair(0x248a,"DIGIT THREE PERIOD"));
        data.insert(std::make_pair(0x248b,"DIGIT FOUR PERIOD"));
        data.insert(std::make_pair(0x248c,"DIGIT FIVE PERIOD"));
        data.insert(std::make_pair(0x248d,"DIGIT SIX PERIOD"));
        data.insert(std::make_pair(0x248e,"DIGIT SEVEN PERIOD"));
        data.insert(std::make_pair(0x248f,"DIGIT EIGHT PERIOD"));
        data.insert(std::make_pair(0x2490,"DIGIT NINE PERIOD"));
        data.insert(std::make_pair(0x2491,"NUMBER TEN PERIOD"));
        data.insert(std::make_pair(0x2492,"NUMBER ELEVEN PERIOD"));
        data.insert(std::make_pair(0x2493,"NUMBER TWELVE PERIOD"));
        data.insert(std::make_pair(0x2494,"NUMBER THIRTEEN PERIOD"));
        data.insert(std::make_pair(0x2495,"NUMBER FOURTEEN PERIOD"));
        data.insert(std::make_pair(0x2496,"NUMBER FIFTEEN PERIOD"));
        data.insert(std::make_pair(0x2497,"NUMBER SIXTEEN PERIOD"));
        data.insert(std::make_pair(0x2498,"NUMBER SEVENTEEN PERIOD"));
        data.insert(std::make_pair(0x2499,"NUMBER EIGHTEEN PERIOD"));
        data.insert(std::make_pair(0x249a,"NUMBER NINETEEN PERIOD"));
        data.insert(std::make_pair(0x249b,"NUMBER TWENTY PERIOD"));
        data.insert(std::make_pair(0x2500,"FORMS LIGHT HORIZONTAL"));
        data.insert(std::make_pair(0x2501,"FORMS HEAVY HORIZONTAL"));
        data.insert(std::make_pair(0x2502,"FORMS LIGHT VERTICAL"));
        data.insert(std::make_pair(0x2503,"FORMS HEAVY VERTICAL"));
        data.insert(std::make_pair(0x2504,"FORMS LIGHT TRIPLE DASH HORIZONTAL"));
        data.insert(std::make_pair(0x2505,"FORMS HEAVY TRIPLE DASH HORIZONTAL"));
        data.insert(std::make_pair(0x2506,"FORMS LIGHT TRIPLE DASH VERTICAL"));
        data.insert(std::make_pair(0x2507,"FORMS HEAVY TRIPLE DASH VERTICAL"));
        data.insert(std::make_pair(0x2508,"FORMS LIGHT QUADRUPLE DASH HORIZONTAL"));
        data.insert(std::make_pair(0x2509,"FORMS HEAVY QUADRUPLE DASH HORIZONTAL"));
        data.insert(std::make_pair(0x250a,"FORMS LIGHT QUADRUPLE DASH VERTICAL"));
        data.insert(std::make_pair(0x250b,"FORMS HEAVY QUADRUPLE DASH VERTICAL"));
        data.insert(std::make_pair(0x250c,"FORMS LIGHT DOWN AND RIGHT"));
        data.insert(std::make_pair(0x250d,"FORMS DOWN LIGHT AND RIGHT HEAVY"));
        data.insert(std::make_pair(0x250e,"FORMS DOWN HEAVY AND RIGHT LIGHT"));
        data.insert(std::make_pair(0x250f,"FORMS HEAVY DOWN AND RIGHT"));
        data.insert(std::make_pair(0x2510,"FORMS LIGHT DOWN AND LEFT"));
        data.insert(std::make_pair(0x2511,"FORMS DOWN LIGHT AND LEFT HEAVY"));
        data.insert(std::make_pair(0x2512,"FORMS DOWN HEAVY AND LEFT LIGHT"));
        data.insert(std::make_pair(0x2513,"FORMS HEAVY DOWN AND LEFT"));
        data.insert(std::make_pair(0x2514,"FORMS LIGHT UP AND RIGHT"));
        data.insert(std::make_pair(0x2515,"FORMS UP LIGHT AND RIGHT HEAVY"));
        data.insert(std::make_pair(0x2516,"FORMS UP HEAVY AND RIGHT LIGHT"));
        data.insert(std::make_pair(0x2517,"FORMS HEAVY UP AND RIGHT"));
        data.insert(std::make_pair(0x2518,"FORMS LIGHT UP AND LEFT"));
        data.insert(std::make_pair(0x2519,"FORMS UP LIGHT AND LEFT HEAVY"));
        data.insert(std::make_pair(0x251a,"FORMS UP HEAVY AND LEFT LIGHT"));
        data.insert(std::make_pair(0x251b,"FORMS HEAVY UP AND LEFT"));
        data.insert(std::make_pair(0x251c,"FORMS LIGHT VERTICAL AND RIGHT"));
        data.insert(std::make_pair(0x251d,"FORMS VERTICAL LIGHT AND RIGHT HEAVY"));
        data.insert(std::make_pair(0x251e,"FORMS UP HEAVY AND RIGHT DOWN LIGHT"));
        data.insert(std::make_pair(0x251f,"FORMS DOWN HEAVY AND RIGHT UP LIGHT"));
        data.insert(std::make_pair(0x2520,"FORMS VERTICAL HEAVY AND RIGHT LIGHT"));
        data.insert(std::make_pair(0x2521,"FORMS DOWN LIGHT AND RIGHT UP HEAVY"));
        data.insert(std::make_pair(0x2522,"FORMS UP LIGHT AND RIGHT DOWN HEAVY"));
        data.insert(std::make_pair(0x2523,"FORMS HEAVY VERTICAL AND RIGHT"));
        data.insert(std::make_pair(0x2524,"FORMS LIGHT VERTICAL AND LEFT"));
        data.insert(std::make_pair(0x2525,"FORMS VERTICAL LIGHT AND LEFT HEAVY"));
        data.insert(std::make_pair(0x2526,"FORMS UP HEAVY AND LEFT DOWN LIGHT"));
        data.insert(std::make_pair(0x2527,"FORMS DOWN HEAVY AND LEFT UP LIGHT"));
        data.insert(std::make_pair(0x2528,"FORMS VERTICAL HEAVY AND LEFT LIGHT"));
        data.insert(std::make_pair(0x2529,"FORMS DOWN LIGHT AND LEFT UP HEAVY"));
        data.insert(std::make_pair(0x252a,"FORMS UP LIGHT AND LEFT DOWN HEAVY"));
        data.insert(std::make_pair(0x252b,"FORMS HEAVY VERTICAL AND LEFT"));
        data.insert(std::make_pair(0x252c,"FORMS LIGHT DOWN AND HORIZONTAL"));
        data.insert(std::make_pair(0x252d,"FORMS LEFT HEAVY AND RIGHT DOWN LIGHT"));
        data.insert(std::make_pair(0x252e,"FORMS RIGHT HEAVY AND LEFT DOWN LIGHT"));
        data.insert(std::make_pair(0x252f,"FORMS DOWN LIGHT AND HORIZONTAL HEAVY"));
        data.insert(std::make_pair(0x2530,"FORMS DOWN HEAVY AND HORIZONTAL LIGHT"));
        data.insert(std::make_pair(0x2531,"FORMS RIGHT LIGHT AND LEFT DOWN HEAVY"));
        data.insert(std::make_pair(0x2532,"FORMS LEFT LIGHT AND RIGHT DOWN HEAVY"));
        data.insert(std::make_pair(0x2533,"FORMS HEAVY DOWN AND HORIZONTAL"));
        data.insert(std::make_pair(0x2534,"FORMS LIGHT UP AND HORIZONTAL"));
        data.insert(std::make_pair(0x2535,"FORMS LEFT HEAVY AND RIGHT UP LIGHT"));
        data.insert(std::make_pair(0x2536,"FORMS RIGHT HEAVY AND LEFT UP LIGHT"));
        data.insert(std::make_pair(0x2537,"FORMS UP LIGHT AND HORIZONTAL HEAVY"));
        data.insert(std::make_pair(0x2538,"FORMS UP HEAVY AND HORIZONTAL LIGHT"));
        data.insert(std::make_pair(0x2539,"FORMS RIGHT LIGHT AND LEFT UP HEAVY"));
        data.insert(std::make_pair(0x253a,"FORMS LEFT LIGHT AND RIGHT UP HEAVY"));
        data.insert(std::make_pair(0x253b,"FORMS HEAVY UP AND HORIZONTAL"));
        data.insert(std::make_pair(0x253c,"FORMS LIGHT VERTICAL AND HORIZONTAL"));
        data.insert(std::make_pair(0x253d,"FORMS LEFT HEAVY AND RIGHT VERTICAL LIGHT"));
        data.insert(std::make_pair(0x253e,"FORMS RIGHT HEAVY AND LEFT VERTICAL LIGHT"));
        data.insert(std::make_pair(0x253f,"FORMS VERTICAL LIGHT AND HORIZONTAL HEAVY"));
        data.insert(std::make_pair(0x2540,"FORMS UP HEAVY AND DOWN HORIZONTAL LIGHT"));
        data.insert(std::make_pair(0x2541,"FORMS DOWN HEAVY AND UP HORIZONTAL LIGHT"));
        data.insert(std::make_pair(0x2542,"FORMS VERTICAL HEAVY AND HORIZONTAL LIGHT"));
        data.insert(std::make_pair(0x2543,"FORMS LEFT UP HEAVY AND RIGHT DOWN LIGHT"));
        data.insert(std::make_pair(0x2544,"FORMS RIGHT UP HEAVY AND LEFT DOWN LIGHT"));
        data.insert(std::make_pair(0x2545,"FORMS LEFT DOWN HEAVY AND RIGHT UP LIGHT"));
        data.insert(std::make_pair(0x2546,"FORMS RIGHT DOWN HEAVY AND LEFT UP LIGHT"));
        data.insert(std::make_pair(0x2547,"FORMS DOWN LIGHT AND UP HORIZONTAL HEAVY"));
        data.insert(std::make_pair(0x2548,"FORMS UP LIGHT AND DOWN HORIZONTAL HEAVY"));
        data.insert(std::make_pair(0x2549,"FORMS RIGHT LIGHT AND LEFT VERTICAL HEAVY"));
        data.insert(std::make_pair(0x254a,"FORMS LEFT LIGHT AND RIGHT VERTICAL HEAVY"));
        data.insert(std::make_pair(0x254b,"FORMS HEAVY VERTICAL AND HORIZONTAL"));
        data.insert(std::make_pair(0x254c,"FORMS LIGHT DOUBLE DASH HORIZONTAL"));
        data.insert(std::make_pair(0x254d,"FORMS HEAVY DOUBLE DASH HORIZONTAL"));
        data.insert(std::make_pair(0x254e,"FORMS LIGHT DOUBLE DASH VERTICAL"));
        data.insert(std::make_pair(0x254f,"FORMS HEAVY DOUBLE DASH VERTICAL"));
        data.insert(std::make_pair(0x2550,"FORMS DOUBLE HORIZONTAL"));
        data.insert(std::make_pair(0x2551,"FORMS DOUBLE VERTICAL"));
        data.insert(std::make_pair(0x2552,"FORMS DOWN SINGLE AND RIGHT DOUBLE"));
        data.insert(std::make_pair(0x2553,"FORMS DOWN DOUBLE AND RIGHT SINGLE"));
        data.insert(std::make_pair(0x2554,"FORMS DOUBLE DOWN AND RIGHT"));
        data.insert(std::make_pair(0x2555,"FORMS DOWN SINGLE AND LEFT DOUBLE"));
        data.insert(std::make_pair(0x2556,"FORMS DOWN DOUBLE AND LEFT SINGLE"));
        data.insert(std::make_pair(0x2557,"FORMS DOUBLE DOWN AND LEFT"));
        data.insert(std::make_pair(0x2558,"FORMS UP SINGLE AND RIGHT DOUBLE"));
        data.insert(std::make_pair(0x2559,"FORMS UP DOUBLE AND RIGHT SINGLE"));
        data.insert(std::make_pair(0x255a,"FORMS DOUBLE UP AND RIGHT"));
        data.insert(std::make_pair(0x255b,"FORMS UP SINGLE AND LEFT DOUBLE"));
        data.insert(std::make_pair(0x255c,"FORMS UP DOUBLE AND LEFT SINGLE"));
        data.insert(std::make_pair(0x255d,"FORMS DOUBLE UP AND LEFT"));
        data.insert(std::make_pair(0x255e,"FORMS VERTICAL SINGLE AND RIGHT DOUBLE"));
        data.insert(std::make_pair(0x255f,"FORMS VERTICAL DOUBLE AND RIGHT SINGLE"));
        data.insert(std::make_pair(0x2560,"FORMS DOUBLE VERTICAL AND RIGHT"));
        data.insert(std::make_pair(0x2561,"FORMS VERTICAL SINGLE AND LEFT DOUBLE"));
        data.insert(std::make_pair(0x2562,"FORMS VERTICAL DOUBLE AND LEFT SINGLE"));
        data.insert(std::make_pair(0x2563,"FORMS DOUBLE VERTICAL AND LEFT"));
        data.insert(std::make_pair(0x2564,"FORMS DOWN SINGLE AND HORIZONTAL DOUBLE"));
        data.insert(std::make_pair(0x2565,"FORMS DOWN DOUBLE AND HORIZONTAL SINGLE"));
        data.insert(std::make_pair(0x2566,"FORMS DOUBLE DOWN AND HORIZONTAL"));
        data.insert(std::make_pair(0x2567,"FORMS UP SINGLE AND HORIZONTAL DOUBLE"));
        data.insert(std::make_pair(0x2568,"FORMS UP DOUBLE AND HORIZONTAL SINGLE"));
        data.insert(std::make_pair(0x2569,"FORMS DOUBLE UP AND HORIZONTAL"));
        data.insert(std::make_pair(0x256a,"FORMS VERTICAL SINGLE AND HORIZONTAL DOUBLE"));
        data.insert(std::make_pair(0x256b,"FORMS VERTICAL DOUBLE AND HORIZONTAL SINGLE"));
        data.insert(std::make_pair(0x256c,"FORMS DOUBLE VERTICAL AND HORIZONTAL"));
        data.insert(std::make_pair(0x256d,"FORMS LIGHT ARC DOWN AND RIGHT"));
        data.insert(std::make_pair(0x256e,"FORMS LIGHT ARC DOWN AND LEFT"));
        data.insert(std::make_pair(0x256f,"FORMS LIGHT ARC UP AND LEFT"));
        data.insert(std::make_pair(0x2570,"FORMS LIGHT ARC UP AND RIGHT"));
        data.insert(std::make_pair(0x2571,"FORMS LIGHT DIAGONAL UPPER RIGHT TO LOWER LEFT"));
        data.insert(std::make_pair(0x2572,"FORMS LIGHT DIAGONAL UPPER LEFT TO LOWER RIGHT"));
        data.insert(std::make_pair(0x2573,"FORMS LIGHT DIAGONAL CROSS"));
        data.insert(std::make_pair(0x2574,"FORMS LIGHT LEFT"));
        data.insert(std::make_pair(0x2575,"FORMS LIGHT UP"));
        data.insert(std::make_pair(0x2576,"FORMS LIGHT RIGHT"));
        data.insert(std::make_pair(0x2577,"FORMS LIGHT DOWN"));
        data.insert(std::make_pair(0x2578,"FORMS HEAVY LEFT"));
        data.insert(std::make_pair(0x2579,"FORMS HEAVY UP"));
        data.insert(std::make_pair(0x257a,"FORMS HEAVY RIGHT"));
        data.insert(std::make_pair(0x257b,"FORMS HEAVY DOWN"));
        data.insert(std::make_pair(0x257c,"FORMS LIGHT LEFT AND HEAVY RIGHT"));
        data.insert(std::make_pair(0x257d,"FORMS LIGHT UP AND HEAVY DOWN"));
        data.insert(std::make_pair(0x257e,"FORMS HEAVY LEFT AND LIGHT RIGHT"));
        data.insert(std::make_pair(0x257f,"FORMS HEAVY UP AND LIGHT DOWN"));
        data.insert(std::make_pair(0x2586,"LOWER THREE QUARTER BLOCK"));
        data.insert(std::make_pair(0x258a,"LEFT THREE QUARTER BLOCK"));
        data.insert(std::make_pair(0x25b2,"BLACK UP POINTING TRIANGLE"));
        data.insert(std::make_pair(0x25b3,"WHITE UP POINTING TRIANGLE"));
        data.insert(std::make_pair(0x25b4,"BLACK UP POINTING SMALL TRIANGLE"));
        data.insert(std::make_pair(0x25b5,"WHITE UP POINTING SMALL TRIANGLE"));
        data.insert(std::make_pair(0x25b6,"BLACK RIGHT POINTING TRIANGLE"));
        data.insert(std::make_pair(0x25b7,"WHITE RIGHT POINTING TRIANGLE"));
        data.insert(std::make_pair(0x25b8,"BLACK RIGHT POINTING SMALL TRIANGLE"));
        data.insert(std::make_pair(0x25b9,"WHITE RIGHT POINTING SMALL TRIANGLE"));
        data.insert(std::make_pair(0x25ba,"BLACK RIGHT POINTING POINTER"));
        data.insert(std::make_pair(0x25bb,"WHITE RIGHT POINTING POINTER"));
        data.insert(std::make_pair(0x25bc,"BLACK DOWN POINTING TRIANGLE"));
        data.insert(std::make_pair(0x25bd,"WHITE DOWN POINTING TRIANGLE"));
        data.insert(std::make_pair(0x25be,"BLACK DOWN POINTING SMALL TRIANGLE"));
        data.insert(std::make_pair(0x25bf,"WHITE DOWN POINTING SMALL TRIANGLE"));
        data.insert(std::make_pair(0x25c0,"BLACK LEFT POINTING TRIANGLE"));
        data.insert(std::make_pair(0x25c1,"WHITE LEFT POINTING TRIANGLE"));
        data.insert(std::make_pair(0x25c2,"BLACK LEFT POINTING SMALL TRIANGLE"));
        data.insert(std::make_pair(0x25c3,"WHITE LEFT POINTING SMALL TRIANGLE"));
        data.insert(std::make_pair(0x25c4,"BLACK LEFT POINTING POINTER"));
        data.insert(std::make_pair(0x25c5,"WHITE LEFT POINTING POINTER"));
        data.insert(std::make_pair(0x25ec,"WHITE UP POINTING TRIANGLE WITH DOT"));
        data.insert(std::make_pair(0x25ed,"UP POINTING TRIANGLE WITH LEFT HALF BLACK"));
        data.insert(std::make_pair(0x25ee,"UP POINTING TRIANGLE WITH RIGHT HALF BLACK"));
        data.insert(std::make_pair(0x262b,"SYMBOL OF IRAN"));
        data.insert(std::make_pair(0x266b,"BARRED EIGHTH NOTES"));
        data.insert(std::make_pair(0x266c,"BARRED SIXTEENTH NOTES"));
        data.insert(std::make_pair(0x266d,"FLAT"));
        data.insert(std::make_pair(0x266e,"NATURAL"));
        data.insert(std::make_pair(0x266f,"SHARP"));
        data.insert(std::make_pair(0x271b,"OPEN CENTER CROSS"));
        data.insert(std::make_pair(0x271c,"HEAVY OPEN CENTER CROSS"));
        data.insert(std::make_pair(0x272b,"OPEN CENTER BLACK STAR"));
        data.insert(std::make_pair(0x272c,"BLACK CENTER WHITE STAR"));
        data.insert(std::make_pair(0x2732,"OPEN CENTER ASTERISK"));
        data.insert(std::make_pair(0x273c,"OPEN CENTER TEARDROP-SPOKED ASTERISK"));
        data.insert(std::make_pair(0x2742,"CIRCLED OPEN CENTER EIGHT POINTED STAR"));
        data.insert(std::make_pair(0x2776,"INVERSE CIRCLED DIGIT ONE"));
        data.insert(std::make_pair(0x2777,"INVERSE CIRCLED DIGIT TWO"));
        data.insert(std::make_pair(0x2778,"INVERSE CIRCLED DIGIT THREE"));
        data.insert(std::make_pair(0x2779,"INVERSE CIRCLED DIGIT FOUR"));
        data.insert(std::make_pair(0x277a,"INVERSE CIRCLED DIGIT FIVE"));
        data.insert(std::make_pair(0x277b,"INVERSE CIRCLED DIGIT SIX"));
        data.insert(std::make_pair(0x277c,"INVERSE CIRCLED DIGIT SEVEN"));
        data.insert(std::make_pair(0x277d,"INVERSE CIRCLED DIGIT EIGHT"));
        data.insert(std::make_pair(0x277e,"INVERSE CIRCLED DIGIT NINE"));
        data.insert(std::make_pair(0x277f,"INVERSE CIRCLED NUMBER TEN"));
        data.insert(std::make_pair(0x2780,"CIRCLED SANS-SERIF DIGIT ONE"));
        data.insert(std::make_pair(0x2781,"CIRCLED SANS-SERIF DIGIT TWO"));
        data.insert(std::make_pair(0x2782,"CIRCLED SANS-SERIF DIGIT THREE"));
        data.insert(std::make_pair(0x2783,"CIRCLED SANS-SERIF DIGIT FOUR"));
        data.insert(std::make_pair(0x2784,"CIRCLED SANS-SERIF DIGIT FIVE"));
        data.insert(std::make_pair(0x2785,"CIRCLED SANS-SERIF DIGIT SIX"));
        data.insert(std::make_pair(0x2786,"CIRCLED SANS-SERIF DIGIT SEVEN"));
        data.insert(std::make_pair(0x2787,"CIRCLED SANS-SERIF DIGIT EIGHT"));
        data.insert(std::make_pair(0x2788,"CIRCLED SANS-SERIF DIGIT NINE"));
        data.insert(std::make_pair(0x2789,"CIRCLED SANS-SERIF NUMBER TEN"));
        data.insert(std::make_pair(0x278a,"INVERSE CIRCLED SANS-SERIF DIGIT ONE"));
        data.insert(std::make_pair(0x278b,"INVERSE CIRCLED SANS-SERIF DIGIT TWO"));
        data.insert(std::make_pair(0x278c,"INVERSE CIRCLED SANS-SERIF DIGIT THREE"));
        data.insert(std::make_pair(0x278d,"INVERSE CIRCLED SANS-SERIF DIGIT FOUR"));
        data.insert(std::make_pair(0x278e,"INVERSE CIRCLED SANS-SERIF DIGIT FIVE"));
        data.insert(std::make_pair(0x278f,"INVERSE CIRCLED SANS-SERIF DIGIT SIX"));
        data.insert(std::make_pair(0x2790,"INVERSE CIRCLED SANS-SERIF DIGIT SEVEN"));
        data.insert(std::make_pair(0x2791,"INVERSE CIRCLED SANS-SERIF DIGIT EIGHT"));
        data.insert(std::make_pair(0x2792,"INVERSE CIRCLED SANS-SERIF DIGIT NINE"));
        data.insert(std::make_pair(0x2793,"INVERSE CIRCLED SANS-SERIF NUMBER TEN"));
        data.insert(std::make_pair(0x2794,"HEAVY WIDE-HEADED RIGHT ARROW"));
        data.insert(std::make_pair(0x2798,"HEAVY LOWER RIGHT ARROW"));
        data.insert(std::make_pair(0x2799,"HEAVY RIGHT ARROW"));
        data.insert(std::make_pair(0x279a,"HEAVY UPPER RIGHT ARROW"));
        data.insert(std::make_pair(0x279b,"DRAFTING POINT RIGHT ARROW"));
        data.insert(std::make_pair(0x279c,"HEAVY ROUND-TIPPED RIGHT ARROW"));
        data.insert(std::make_pair(0x279d,"TRIANGLE-HEADED RIGHT ARROW"));
        data.insert(std::make_pair(0x279e,"HEAVY TRIANGLE-HEADED RIGHT ARROW"));
        data.insert(std::make_pair(0x279f,"DASHED TRIANGLE-HEADED RIGHT ARROW"));
        data.insert(std::make_pair(0x27a0,"HEAVY DASHED TRIANGLE-HEADED RIGHT ARROW"));
        data.insert(std::make_pair(0x27a1,"BLACK RIGHT ARROW"));
        data.insert(std::make_pair(0x27a2,"THREE-D TOP-LIGHTED RIGHT ARROWHEAD"));
        data.insert(std::make_pair(0x27a3,"THREE-D BOTTOM-LIGHTED RIGHT ARROWHEAD"));
        data.insert(std::make_pair(0x27a4,"BLACK RIGHT ARROWHEAD"));
        data.insert(std::make_pair(0x27a5,"HEAVY BLACK CURVED DOWN AND RIGHT ARROW"));
        data.insert(std::make_pair(0x27a6,"HEAVY BLACK CURVED UP AND RIGHT ARROW"));
        data.insert(std::make_pair(0x27a7,"SQUAT BLACK RIGHT ARROW"));
        data.insert(std::make_pair(0x27a8,"HEAVY CONCAVE-POINTED BLACK RIGHT ARROW"));
        data.insert(std::make_pair(0x27a9,"RIGHT-SHADED WHITE RIGHT ARROW"));
        data.insert(std::make_pair(0x27aa,"LEFT-SHADED WHITE RIGHT ARROW"));
        data.insert(std::make_pair(0x27ab,"BACK-TILTED SHADOWED WHITE RIGHT ARROW"));
        data.insert(std::make_pair(0x27ac,"FRONT-TILTED SHADOWED WHITE RIGHT ARROW"));
        data.insert(std::make_pair(0x27ad,"HEAVY LOWER RIGHT-SHADOWED WHITE RIGHT ARROW"));
        data.insert(std::make_pair(0x27ae,"HEAVY UPPER RIGHT-SHADOWED WHITE RIGHT ARROW"));
        data.insert(std::make_pair(0x27af,"NOTCHED LOWER RIGHT-SHADOWED WHITE RIGHT ARROW"));
        data.insert(std::make_pair(0x27b1,"NOTCHED UPPER RIGHT-SHADOWED WHITE RIGHT ARROW"));
        data.insert(std::make_pair(0x27b2,"CIRCLED HEAVY WHITE RIGHT ARROW"));
        data.insert(std::make_pair(0x27b3,"WHITE-FEATHERED RIGHT ARROW"));
        data.insert(std::make_pair(0x27b4,"BLACK-FEATHERED LOWER RIGHT ARROW"));
        data.insert(std::make_pair(0x27b5,"BLACK-FEATHERED RIGHT ARROW"));
        data.insert(std::make_pair(0x27b6,"BLACK-FEATHERED UPPER RIGHT ARROW"));
        data.insert(std::make_pair(0x27b7,"HEAVY BLACK-FEATHERED LOWER RIGHT ARROW"));
        data.insert(std::make_pair(0x27b8,"HEAVY BLACK-FEATHERED RIGHT ARROW"));
        data.insert(std::make_pair(0x27b9,"HEAVY BLACK-FEATHERED UPPER RIGHT ARROW"));
        data.insert(std::make_pair(0x27ba,"TEARDROP-BARBED RIGHT ARROW"));
        data.insert(std::make_pair(0x27bb,"HEAVY TEARDROP-SHANKED RIGHT ARROW"));
        data.insert(std::make_pair(0x27bc,"WEDGE-TAILED RIGHT ARROW"));
        data.insert(std::make_pair(0x27bd,"HEAVY WEDGE-TAILED RIGHT ARROW"));
        data.insert(std::make_pair(0x27be,"OPEN-OUTLINED RIGHT ARROW"));
        data.insert(std::make_pair(0x3002,"IDEOGRAPHIC PERIOD"));
        data.insert(std::make_pair(0x3008,"OPENING ANGLE BRACKET"));
        data.insert(std::make_pair(0x3009,"CLOSING ANGLE BRACKET"));
        data.insert(std::make_pair(0x300a,"OPENING DOUBLE ANGLE BRACKET"));
        data.insert(std::make_pair(0x300b,"CLOSING DOUBLE ANGLE BRACKET"));
        data.insert(std::make_pair(0x300c,"OPENING CORNER BRACKET"));
        data.insert(std::make_pair(0x300d,"CLOSING CORNER BRACKET"));
        data.insert(std::make_pair(0x300e,"OPENING WHITE CORNER BRACKET"));
        data.insert(std::make_pair(0x300f,"CLOSING WHITE CORNER BRACKET"));
        data.insert(std::make_pair(0x3010,"OPENING BLACK LENTICULAR BRACKET"));
        data.insert(std::make_pair(0x3011,"CLOSING BLACK LENTICULAR BRACKET"));
        data.insert(std::make_pair(0x3014,"OPENING TORTOISE SHELL BRACKET"));
        data.insert(std::make_pair(0x3015,"CLOSING TORTOISE SHELL BRACKET"));
        data.insert(std::make_pair(0x3016,"OPENING WHITE LENTICULAR BRACKET"));
        data.insert(std::make_pair(0x3017,"CLOSING WHITE LENTICULAR BRACKET"));
        data.insert(std::make_pair(0x3018,"OPENING WHITE TORTOISE SHELL BRACKET"));
        data.insert(std::make_pair(0x3019,"CLOSING WHITE TORTOISE SHELL BRACKET"));
        data.insert(std::make_pair(0x301a,"OPENING WHITE SQUARE BRACKET"));
        data.insert(std::make_pair(0x301b,"CLOSING WHITE SQUARE BRACKET"));
        data.insert(std::make_pair(0x3099,"NON-SPACING KATAKANA-HIRAGANA VOICED SOUND MARK"));
        data.insert(std::make_pair(0x309a,"NON-SPACING KATAKANA-HIRAGANA SEMI-VOICED SOUND MARK"));
        data.insert(std::make_pair(0x3131,"HANGUL LETTER GIYEOG"));
        data.insert(std::make_pair(0x3132,"HANGUL LETTER SSANG GIYEOG"));
        data.insert(std::make_pair(0x3133,"HANGUL LETTER GIYEOG SIOS"));
        data.insert(std::make_pair(0x3135,"HANGUL LETTER NIEUN JIEUJ"));
        data.insert(std::make_pair(0x3136,"HANGUL LETTER NIEUN HIEUH"));
        data.insert(std::make_pair(0x3137,"HANGUL LETTER DIGEUD"));
        data.insert(std::make_pair(0x3138,"HANGUL LETTER SSANG DIGEUD"));
        data.insert(std::make_pair(0x3139,"HANGUL LETTER LIEUL"));
        data.insert(std::make_pair(0x313a,"HANGUL LETTER LIEUL GIYEOG"));
        data.insert(std::make_pair(0x313b,"HANGUL LETTER LIEUL MIEUM"));
        data.insert(std::make_pair(0x313c,"HANGUL LETTER LIEUL BIEUB"));
        data.insert(std::make_pair(0x313d,"HANGUL LETTER LIEUL SIOS"));
        data.insert(std::make_pair(0x313e,"HANGUL LETTER LIEUL TIEUT"));
        data.insert(std::make_pair(0x313f,"HANGUL LETTER LIEUL PIEUP"));
        data.insert(std::make_pair(0x3140,"HANGUL LETTER LIEUL HIEUH"));
        data.insert(std::make_pair(0x3142,"HANGUL LETTER BIEUB"));
        data.insert(std::make_pair(0x3143,"HANGUL LETTER SSANG BIEUB"));
        data.insert(std::make_pair(0x3144,"HANGUL LETTER BIEUB SIOS"));
        data.insert(std::make_pair(0x3146,"HANGUL LETTER SSANG SIOS"));
        data.insert(std::make_pair(0x3148,"HANGUL LETTER JIEUJ"));
        data.insert(std::make_pair(0x3149,"HANGUL LETTER SSANG JIEUJ"));
        data.insert(std::make_pair(0x314a,"HANGUL LETTER CIEUC"));
        data.insert(std::make_pair(0x314b,"HANGUL LETTER KIYEOK"));
        data.insert(std::make_pair(0x314c,"HANGUL LETTER TIEUT"));
        data.insert(std::make_pair(0x314d,"HANGUL LETTER PIEUP"));
        data.insert(std::make_pair(0x3164,"HANGUL CAE OM"));
        data.insert(std::make_pair(0x3165,"HANGUL LETTER SSANG NIEUN"));
        data.insert(std::make_pair(0x3166,"HANGUL LETTER NIEUN DIGEUD"));
        data.insert(std::make_pair(0x3167,"HANGUL LETTER NIEUN SIOS"));
        data.insert(std::make_pair(0x3168,"HANGUL LETTER NIEUN BAN CHI EUM"));
        data.insert(std::make_pair(0x3169,"HANGUL LETTER LIEUL GIYEOG SIOS"));
        data.insert(std::make_pair(0x316a,"HANGUL LETTER LIEUL DIGEUD"));
        data.insert(std::make_pair(0x316b,"HANGUL LETTER LIEUL BIEUB SIOS"));
        data.insert(std::make_pair(0x316c,"HANGUL LETTER LIEUL BAN CHI EUM"));
        data.insert(std::make_pair(0x316d,"HANGUL LETTER LIEUL YEOLIN HIEUH"));
        data.insert(std::make_pair(0x316e,"HANGUL LETTER MIEUM BIEUB"));
        data.insert(std::make_pair(0x316f,"HANGUL LETTER MIEUM SIOS"));
        data.insert(std::make_pair(0x3170,"HANGUL LETTER BIEUB BAN CHI EUM"));
        data.insert(std::make_pair(0x3171,"HANGUL LETTER MIEUM SUN GYEONG EUM"));
        data.insert(std::make_pair(0x3172,"HANGUL LETTER BIEUB GIYEOG"));
        data.insert(std::make_pair(0x3173,"HANGUL LETTER BIEUB DIGEUD"));
        data.insert(std::make_pair(0x3174,"HANGUL LETTER BIEUB SIOS GIYEOG"));
        data.insert(std::make_pair(0x3175,"HANGUL LETTER BIEUB SIOS DIGEUD"));
        data.insert(std::make_pair(0x3176,"HANGUL LETTER BIEUB JIEUJ"));
        data.insert(std::make_pair(0x3177,"HANGUL LETTER BIEUB TIEUT"));
        data.insert(std::make_pair(0x3178,"HANGUL LETTER BIEUB SUN GYEONG EUM"));
        data.insert(std::make_pair(0x3179,"HANGUL LETTER SSANG BIEUB SUN GYEONG EUM"));
        data.insert(std::make_pair(0x317a,"HANGUL LETTER SIOS GIYEOG"));
        data.insert(std::make_pair(0x317b,"HANGUL LETTER SIOS NIEUN"));
        data.insert(std::make_pair(0x317c,"HANGUL LETTER SIOS DIGEUD"));
        data.insert(std::make_pair(0x317d,"HANGUL LETTER SIOS BIEUB"));
        data.insert(std::make_pair(0x317e,"HANGUL LETTER SIOS JIEUJ"));
        data.insert(std::make_pair(0x317f,"HANGUL LETTER BAN CHI EUM"));
        data.insert(std::make_pair(0x3180,"HANGUL LETTER SSANG IEUNG"));
        data.insert(std::make_pair(0x3181,"HANGUL LETTER NGIEUNG"));
        data.insert(std::make_pair(0x3182,"HANGUL LETTER NGIEUNG SIOS"));
        data.insert(std::make_pair(0x3183,"HANGUL LETTER NGIEUNG BAN CHI EUM"));
        data.insert(std::make_pair(0x3184,"HANGUL LETTER PIEUP SUN GYEONG EUM"));
        data.insert(std::make_pair(0x3185,"HANGUL LETTER SSANG HIEUH"));
        data.insert(std::make_pair(0x3186,"HANGUL LETTER YEOLIN HIEUH"));
        data.insert(std::make_pair(0x3187,"HANGUL LETTER YOYA"));
        data.insert(std::make_pair(0x3188,"HANGUL LETTER YOYAE"));
        data.insert(std::make_pair(0x3189,"HANGUL LETTER YOI"));
        data.insert(std::make_pair(0x318a,"HANGUL LETTER YUYEO"));
        data.insert(std::make_pair(0x318b,"HANGUL LETTER YUYE"));
        data.insert(std::make_pair(0x318c,"HANGUL LETTER YUI"));
        data.insert(std::make_pair(0x318d,"HANGUL LETTER ALAE A"));
        data.insert(std::make_pair(0x318e,"HANGUL LETTER ALAE AE"));
        data.insert(std::make_pair(0x3190,"KANBUN TATETEN"));
        data.insert(std::make_pair(0x3191,"KAERITEN RE"));
        data.insert(std::make_pair(0x3192,"KAERITEN ITI"));
        data.insert(std::make_pair(0x3193,"KAERITEN NI"));
        data.insert(std::make_pair(0x3194,"KAERITEN SAN"));
        data.insert(std::make_pair(0x3195,"KAERITEN SI"));
        data.insert(std::make_pair(0x3196,"KAERITEN ZYOU"));
        data.insert(std::make_pair(0x3197,"KAERITEN TYUU"));
        data.insert(std::make_pair(0x3198,"KAERITEN GE"));
        data.insert(std::make_pair(0x3199,"KAERITEN KOU"));
        data.insert(std::make_pair(0x319a,"KAERITEN OTU"));
        data.insert(std::make_pair(0x319b,"KAERITEN HEI"));
        data.insert(std::make_pair(0x319c,"KAERITEN TEI"));
        data.insert(std::make_pair(0x319d,"KAERITEN TEN"));
        data.insert(std::make_pair(0x319e,"KAERITEN TI"));
        data.insert(std::make_pair(0x319f,"KAERITEN ZIN"));
        data.insert(std::make_pair(0x3200,"PARENTHESIZED HANGUL GIYEOG"));
        data.insert(std::make_pair(0x3202,"PARENTHESIZED HANGUL DIGEUD"));
        data.insert(std::make_pair(0x3203,"PARENTHESIZED HANGUL LIEUL"));
        data.insert(std::make_pair(0x3205,"PARENTHESIZED HANGUL BIEUB"));
        data.insert(std::make_pair(0x3208,"PARENTHESIZED HANGUL JIEUJ"));
        data.insert(std::make_pair(0x3209,"PARENTHESIZED HANGUL CIEUC"));
        data.insert(std::make_pair(0x320a,"PARENTHESIZED HANGUL KIYEOK"));
        data.insert(std::make_pair(0x320b,"PARENTHESIZED HANGUL TIEUT"));
        data.insert(std::make_pair(0x320c,"PARENTHESIZED HANGUL PIEUP"));
        data.insert(std::make_pair(0x320e,"PARENTHESIZED HANGUL GA"));
        data.insert(std::make_pair(0x320f,"PARENTHESIZED HANGUL NA"));
        data.insert(std::make_pair(0x3210,"PARENTHESIZED HANGUL DA"));
        data.insert(std::make_pair(0x3211,"PARENTHESIZED HANGUL LA"));
        data.insert(std::make_pair(0x3212,"PARENTHESIZED HANGUL MA"));
        data.insert(std::make_pair(0x3213,"PARENTHESIZED HANGUL BA"));
        data.insert(std::make_pair(0x3214,"PARENTHESIZED HANGUL SA"));
        data.insert(std::make_pair(0x3215,"PARENTHESIZED HANGUL A"));
        data.insert(std::make_pair(0x3216,"PARENTHESIZED HANGUL JA"));
        data.insert(std::make_pair(0x3217,"PARENTHESIZED HANGUL CA"));
        data.insert(std::make_pair(0x3218,"PARENTHESIZED HANGUL KA"));
        data.insert(std::make_pair(0x3219,"PARENTHESIZED HANGUL TA"));
        data.insert(std::make_pair(0x321a,"PARENTHESIZED HANGUL PA"));
        data.insert(std::make_pair(0x321b,"PARENTHESIZED HANGUL HA"));
        data.insert(std::make_pair(0x321c,"PARENTHESIZED HANGUL JU"));
        data.insert(std::make_pair(0x3260,"CIRCLED HANGUL GIYEOG"));
        data.insert(std::make_pair(0x3262,"CIRCLED HANGUL DIGEUD"));
        data.insert(std::make_pair(0x3263,"CIRCLED HANGUL LIEUL"));
        data.insert(std::make_pair(0x3265,"CIRCLED HANGUL BIEUB"));
        data.insert(std::make_pair(0x3268,"CIRCLED HANGUL JIEUJ"));
        data.insert(std::make_pair(0x3269,"CIRCLED HANGUL CIEUC"));
        data.insert(std::make_pair(0x326a,"CIRCLED HANGUL KIYEOK"));
        data.insert(std::make_pair(0x326b,"CIRCLED HANGUL TIEUT"));
        data.insert(std::make_pair(0x326c,"CIRCLED HANGUL PIEUP"));
        data.insert(std::make_pair(0x326e,"CIRCLED HANGUL GA"));
        data.insert(std::make_pair(0x326f,"CIRCLED HANGUL NA"));
        data.insert(std::make_pair(0x3270,"CIRCLED HANGUL DA"));
        data.insert(std::make_pair(0x3271,"CIRCLED HANGUL LA"));
        data.insert(std::make_pair(0x3272,"CIRCLED HANGUL MA"));
        data.insert(std::make_pair(0x3273,"CIRCLED HANGUL BA"));
        data.insert(std::make_pair(0x3274,"CIRCLED HANGUL SA"));
        data.insert(std::make_pair(0x3275,"CIRCLED HANGUL A"));
        data.insert(std::make_pair(0x3276,"CIRCLED HANGUL JA"));
        data.insert(std::make_pair(0x3277,"CIRCLED HANGUL CA"));
        data.insert(std::make_pair(0x3278,"CIRCLED HANGUL KA"));
        data.insert(std::make_pair(0x3279,"CIRCLED HANGUL TA"));
        data.insert(std::make_pair(0x327a,"CIRCLED HANGUL PA"));
        data.insert(std::make_pair(0x327b,"CIRCLED HANGUL HA"));
        data.insert(std::make_pair(0x32a5,"CIRCLED IDEOGRAPH CENTER"));
        data.insert(std::make_pair(0x3300,"SQUARED APAATO"));
        data.insert(std::make_pair(0x3301,"SQUARED ARUHUA"));
        data.insert(std::make_pair(0x3302,"SQUARED ANPEA"));
        data.insert(std::make_pair(0x3303,"SQUARED AARU"));
        data.insert(std::make_pair(0x3304,"SQUARED ININGU"));
        data.insert(std::make_pair(0x3305,"SQUARED INTI"));
        data.insert(std::make_pair(0x3306,"SQUARED UON"));
        data.insert(std::make_pair(0x3307,"SQUARED ESUKUUDO"));
        data.insert(std::make_pair(0x3308,"SQUARED EEKAA"));
        data.insert(std::make_pair(0x3309,"SQUARED ONSU"));
        data.insert(std::make_pair(0x330a,"SQUARED OOMU"));
        data.insert(std::make_pair(0x330b,"SQUARED KAIRI"));
        data.insert(std::make_pair(0x330c,"SQUARED KARATTO"));
        data.insert(std::make_pair(0x330d,"SQUARED KARORII"));
        data.insert(std::make_pair(0x330e,"SQUARED GARON"));
        data.insert(std::make_pair(0x330f,"SQUARED GANMA"));
        data.insert(std::make_pair(0x3310,"SQUARED GIGA"));
        data.insert(std::make_pair(0x3311,"SQUARED GINII"));
        data.insert(std::make_pair(0x3312,"SQUARED KYURII"));
        data.insert(std::make_pair(0x3313,"SQUARED GIRUDAA"));
        data.insert(std::make_pair(0x3314,"SQUARED KIRO"));
        data.insert(std::make_pair(0x3315,"SQUARED KIROGURAMU"));
        data.insert(std::make_pair(0x3316,"SQUARED KIROMEETORU"));
        data.insert(std::make_pair(0x3317,"SQUARED KIROWATTO"));
        data.insert(std::make_pair(0x3318,"SQUARED GURAMU"));
        data.insert(std::make_pair(0x3319,"SQUARED GURAMUTON"));
        data.insert(std::make_pair(0x331a,"SQUARED KURUZEIRO"));
        data.insert(std::make_pair(0x331b,"SQUARED KUROONE"));
        data.insert(std::make_pair(0x331c,"SQUARED KEESU"));
        data.insert(std::make_pair(0x331d,"SQUARED KORUNA"));
        data.insert(std::make_pair(0x331e,"SQUARED KOOPO"));
        data.insert(std::make_pair(0x331f,"SQUARED SAIKURU"));
        data.insert(std::make_pair(0x3320,"SQUARED SANTIIMU"));
        data.insert(std::make_pair(0x3321,"SQUARED SIRINGU"));
        data.insert(std::make_pair(0x3322,"SQUARED SENTI"));
        data.insert(std::make_pair(0x3323,"SQUARED SENTO"));
        data.insert(std::make_pair(0x3324,"SQUARED DAASU"));
        data.insert(std::make_pair(0x3325,"SQUARED DESI"));
        data.insert(std::make_pair(0x3326,"SQUARED DORU"));
        data.insert(std::make_pair(0x3327,"SQUARED TON"));
        data.insert(std::make_pair(0x3328,"SQUARED NANO"));
        data.insert(std::make_pair(0x3329,"SQUARED NOTTO"));
        data.insert(std::make_pair(0x332a,"SQUARED HAITU"));
        data.insert(std::make_pair(0x332b,"SQUARED PAASENTO"));
        data.insert(std::make_pair(0x332c,"SQUARED PAATU"));
        data.insert(std::make_pair(0x332d,"SQUARED BAARERU"));
        data.insert(std::make_pair(0x332e,"SQUARED PIASUTORU"));
        data.insert(std::make_pair(0x332f,"SQUARED PIKURU"));
        data.insert(std::make_pair(0x3330,"SQUARED PIKO"));
        data.insert(std::make_pair(0x3331,"SQUARED BIRU"));
        data.insert(std::make_pair(0x3332,"SQUARED HUARADDO"));
        data.insert(std::make_pair(0x3333,"SQUARED HUIITO"));
        data.insert(std::make_pair(0x3334,"SQUARED BUSSYERU"));
        data.insert(std::make_pair(0x3335,"SQUARED HURAN"));
        data.insert(std::make_pair(0x3336,"SQUARED HEKUTAARU"));
        data.insert(std::make_pair(0x3337,"SQUARED PESO"));
        data.insert(std::make_pair(0x3338,"SQUARED PENIHI"));
        data.insert(std::make_pair(0x3339,"SQUARED HERUTU"));
        data.insert(std::make_pair(0x333a,"SQUARED PENSU"));
        data.insert(std::make_pair(0x333b,"SQUARED PEEZI"));
        data.insert(std::make_pair(0x333c,"SQUARED BEETA"));
        data.insert(std::make_pair(0x333d,"SQUARED POINTO"));
        data.insert(std::make_pair(0x333e,"SQUARED BORUTO"));
        data.insert(std::make_pair(0x333f,"SQUARED HON"));
        data.insert(std::make_pair(0x3340,"SQUARED PONDO"));
        data.insert(std::make_pair(0x3341,"SQUARED HOORU"));
        data.insert(std::make_pair(0x3342,"SQUARED HOON"));
        data.insert(std::make_pair(0x3343,"SQUARED MAIKURO"));
        data.insert(std::make_pair(0x3344,"SQUARED MAIRU"));
        data.insert(std::make_pair(0x3345,"SQUARED MAHHA"));
        data.insert(std::make_pair(0x3346,"SQUARED MARUKU"));
        data.insert(std::make_pair(0x3347,"SQUARED MANSYON"));
        data.insert(std::make_pair(0x3348,"SQUARED MIKURON"));
        data.insert(std::make_pair(0x3349,"SQUARED MIRI"));
        data.insert(std::make_pair(0x334a,"SQUARED MIRIBAARU"));
        data.insert(std::make_pair(0x334b,"SQUARED MEGA"));
        data.insert(std::make_pair(0x334c,"SQUARED MEGATON"));
        data.insert(std::make_pair(0x334d,"SQUARED MEETORU"));
        data.insert(std::make_pair(0x334e,"SQUARED YAADO"));
        data.insert(std::make_pair(0x334f,"SQUARED YAARU"));
        data.insert(std::make_pair(0x3350,"SQUARED YUAN"));
        data.insert(std::make_pair(0x3351,"SQUARED RITTORU"));
        data.insert(std::make_pair(0x3352,"SQUARED RIRA"));
        data.insert(std::make_pair(0x3353,"SQUARED RUPII"));
        data.insert(std::make_pair(0x3354,"SQUARED RUUBURU"));
        data.insert(std::make_pair(0x3355,"SQUARED REMU"));
        data.insert(std::make_pair(0x3356,"SQUARED RENTOGEN"));
        data.insert(std::make_pair(0x3357,"SQUARED WATTO"));
        data.insert(std::make_pair(0x337b,"SQUARED TWO IDEOGRAPHS ERA NAME HEISEI"));
        data.insert(std::make_pair(0x337c,"SQUARED TWO IDEOGRAPHS ERA NAME SYOUWA"));
        data.insert(std::make_pair(0x337d,"SQUARED TWO IDEOGRAPHS ERA NAME TAISYOU"));
        data.insert(std::make_pair(0x337e,"SQUARED TWO IDEOGRAPHS ERA NAME MEIZI"));
        data.insert(std::make_pair(0x337f,"SQUARED FOUR IDEOGRAPHS CORPORATION"));
        data.insert(std::make_pair(0x3380,"SQUARED PA AMPS"));
        data.insert(std::make_pair(0x3381,"SQUARED NA"));
        data.insert(std::make_pair(0x3382,"SQUARED MU A"));
        data.insert(std::make_pair(0x3383,"SQUARED MA"));
        data.insert(std::make_pair(0x3384,"SQUARED KA"));
        data.insert(std::make_pair(0x3385,"SQUARED KB"));
        data.insert(std::make_pair(0x3386,"SQUARED MB"));
        data.insert(std::make_pair(0x3387,"SQUARED GB"));
        data.insert(std::make_pair(0x3388,"SQUARED CAL"));
        data.insert(std::make_pair(0x3389,"SQUARED KCAL"));
        data.insert(std::make_pair(0x338a,"SQUARED PF"));
        data.insert(std::make_pair(0x338b,"SQUARED NF"));
        data.insert(std::make_pair(0x338c,"SQUARED MU F"));
        data.insert(std::make_pair(0x338d,"SQUARED MU G"));
        data.insert(std::make_pair(0x338e,"SQUARED MG"));
        data.insert(std::make_pair(0x338f,"SQUARED KG"));
        data.insert(std::make_pair(0x3390,"SQUARED HZ"));
        data.insert(std::make_pair(0x3391,"SQUARED KHZ"));
        data.insert(std::make_pair(0x3392,"SQUARED MHZ"));
        data.insert(std::make_pair(0x3393,"SQUARED GHZ"));
        data.insert(std::make_pair(0x3394,"SQUARED THZ"));
        data.insert(std::make_pair(0x3395,"SQUARED MU L"));
        data.insert(std::make_pair(0x3396,"SQUARED ML"));
        data.insert(std::make_pair(0x3397,"SQUARED DL"));
        data.insert(std::make_pair(0x3398,"SQUARED KL"));
        data.insert(std::make_pair(0x3399,"SQUARED FM"));
        data.insert(std::make_pair(0x339a,"SQUARED NM"));
        data.insert(std::make_pair(0x339b,"SQUARED MU M"));
        data.insert(std::make_pair(0x339c,"SQUARED MM"));
        data.insert(std::make_pair(0x339d,"SQUARED CM"));
        data.insert(std::make_pair(0x339e,"SQUARED KM"));
        data.insert(std::make_pair(0x339f,"SQUARED MM SQUARED"));
        data.insert(std::make_pair(0x33a0,"SQUARED CM SQUARED"));
        data.insert(std::make_pair(0x33a1,"SQUARED M SQUARED"));
        data.insert(std::make_pair(0x33a2,"SQUARED KM SQUARED"));
        data.insert(std::make_pair(0x33a3,"SQUARED MM CUBED"));
        data.insert(std::make_pair(0x33a4,"SQUARED CM CUBED"));
        data.insert(std::make_pair(0x33a5,"SQUARED M CUBED"));
        data.insert(std::make_pair(0x33a6,"SQUARED KM CUBED"));
        data.insert(std::make_pair(0x33a7,"SQUARED M OVER S"));
        data.insert(std::make_pair(0x33a8,"SQUARED M OVER S SQUARED"));
        data.insert(std::make_pair(0x33a9,"SQUARED PA"));
        data.insert(std::make_pair(0x33aa,"SQUARED KPA"));
        data.insert(std::make_pair(0x33ab,"SQUARED MPA"));
        data.insert(std::make_pair(0x33ac,"SQUARED GPA"));
        data.insert(std::make_pair(0x33ad,"SQUARED RAD"));
        data.insert(std::make_pair(0x33ae,"SQUARED RAD OVER S"));
        data.insert(std::make_pair(0x33af,"SQUARED RAD OVER S SQUARED"));
        data.insert(std::make_pair(0x33b0,"SQUARED PS"));
        data.insert(std::make_pair(0x33b1,"SQUARED NS"));
        data.insert(std::make_pair(0x33b2,"SQUARED MU S"));
        data.insert(std::make_pair(0x33b3,"SQUARED MS"));
        data.insert(std::make_pair(0x33b4,"SQUARED PV"));
        data.insert(std::make_pair(0x33b5,"SQUARED NV"));
        data.insert(std::make_pair(0x33b6,"SQUARED MU V"));
        data.insert(std::make_pair(0x33b7,"SQUARED MV"));
        data.insert(std::make_pair(0x33b8,"SQUARED KV"));
        data.insert(std::make_pair(0x33b9,"SQUARED MV MEGA"));
        data.insert(std::make_pair(0x33ba,"SQUARED PW"));
        data.insert(std::make_pair(0x33bb,"SQUARED NW"));
        data.insert(std::make_pair(0x33bc,"SQUARED MU W"));
        data.insert(std::make_pair(0x33bd,"SQUARED MW"));
        data.insert(std::make_pair(0x33be,"SQUARED KW"));
        data.insert(std::make_pair(0x33bf,"SQUARED MW MEGA"));
        data.insert(std::make_pair(0x33c0,"SQUARED K OHM"));
        data.insert(std::make_pair(0x33c1,"SQUARED M OHM"));
        data.insert(std::make_pair(0x33c2,"SQUARED AM"));
        data.insert(std::make_pair(0x33c3,"SQUARED BQ"));
        data.insert(std::make_pair(0x33c4,"SQUARED CC"));
        data.insert(std::make_pair(0x33c5,"SQUARED CD"));
        data.insert(std::make_pair(0x33c6,"SQUARED C OVER KG"));
        data.insert(std::make_pair(0x33c7,"SQUARED CO"));
        data.insert(std::make_pair(0x33c8,"SQUARED DB"));
        data.insert(std::make_pair(0x33c9,"SQUARED GY"));
        data.insert(std::make_pair(0x33ca,"SQUARED HA"));
        data.insert(std::make_pair(0x33cb,"SQUARED HP"));
        data.insert(std::make_pair(0x33cc,"SQUARED IN"));
        data.insert(std::make_pair(0x33cd,"SQUARED KK"));
        data.insert(std::make_pair(0x33ce,"SQUARED KM CAPITAL"));
        data.insert(std::make_pair(0x33cf,"SQUARED KT"));
        data.insert(std::make_pair(0x33d0,"SQUARED LM"));
        data.insert(std::make_pair(0x33d1,"SQUARED LN"));
        data.insert(std::make_pair(0x33d2,"SQUARED LOG"));
        data.insert(std::make_pair(0x33d3,"SQUARED LX"));
        data.insert(std::make_pair(0x33d4,"SQUARED MB SMALL"));
        data.insert(std::make_pair(0x33d5,"SQUARED MIL"));
        data.insert(std::make_pair(0x33d6,"SQUARED MOL"));
        data.insert(std::make_pair(0x33d7,"SQUARED PH"));
        data.insert(std::make_pair(0x33d8,"SQUARED PM"));
        data.insert(std::make_pair(0x33d9,"SQUARED PPM"));
        data.insert(std::make_pair(0x33da,"SQUARED PR"));
        data.insert(std::make_pair(0x33db,"SQUARED SR"));
        data.insert(std::make_pair(0x33dc,"SQUARED SV"));
        data.insert(std::make_pair(0x33dd,"SQUARED WB"));
        data.insert(std::make_pair(0xfb1e,"HEBREW POINT VARIKA"));
        data.insert(std::make_pair(0xfdfa,"ARABIC LETTER SALLALLAHOU ALAYHE WASALLAM"));
        data.insert(std::make_pair(0xfdfb,"ARABIC LETTER JALLAJALALOUHOU"));
        data.insert(std::make_pair(0xfe30,"GLYPH FOR VERTICAL TWO DOT LEADER"));
        data.insert(std::make_pair(0xfe31,"GLYPH FOR VERTICAL EM DASH"));
        data.insert(std::make_pair(0xfe32,"GLYPH FOR VERTICAL EN DASH"));
        data.insert(std::make_pair(0xfe33,"GLYPH FOR VERTICAL SPACING UNDERSCORE"));
        data.insert(std::make_pair(0xfe34,"GLYPH FOR VERTICAL SPACING WAVY UNDERSCORE"));
        data.insert(std::make_pair(0xfe35,"GLYPH FOR VERTICAL OPENING PARENTHESIS"));
        data.insert(std::make_pair(0xfe36,"GLYPH FOR VERTICAL CLOSING PARENTHESIS"));
        data.insert(std::make_pair(0xfe37,"GLYPH FOR VERTICAL OPENING CURLY BRACKET"));
        data.insert(std::make_pair(0xfe38,"GLYPH FOR VERTICAL CLOSING CURLY BRACKET"));
        data.insert(std::make_pair(0xfe39,"GLYPH FOR VERTICAL OPENING TORTOISE SHELL BRACKET"));
        data.insert(std::make_pair(0xfe3a,"GLYPH FOR VERTICAL CLOSING TORTOISE SHELL BRACKET"));
        data.insert(std::make_pair(0xfe3b,"GLYPH FOR VERTICAL OPENING BLACK LENTICULAR BRACKET"));
        data.insert(std::make_pair(0xfe3c,"GLYPH FOR VERTICAL CLOSING BLACK LENTICULAR BRACKET"));
        data.insert(std::make_pair(0xfe3d,"GLYPH FOR VERTICAL OPENING DOUBLE ANGLE BRACKET"));
        data.insert(std::make_pair(0xfe3e,"GLYPH FOR VERTICAL CLOSING DOUBLE ANGLE BRACKET"));
        data.insert(std::make_pair(0xfe3f,"GLYPH FOR VERTICAL OPENING ANGLE BRACKET"));
        data.insert(std::make_pair(0xfe40,"GLYPH FOR VERTICAL CLOSING ANGLE BRACKET"));
        data.insert(std::make_pair(0xfe41,"GLYPH FOR VERTICAL OPENING CORNER BRACKET"));
        data.insert(std::make_pair(0xfe42,"GLYPH FOR VERTICAL CLOSING CORNER BRACKET"));
        data.insert(std::make_pair(0xfe43,"GLYPH FOR VERTICAL OPENING WHITE CORNER BRACKET"));
        data.insert(std::make_pair(0xfe44,"GLYPH FOR VERTICAL CLOSING WHITE CORNER BRACKET"));
        data.insert(std::make_pair(0xfe49,"SPACING DASHED OVERSCORE"));
        data.insert(std::make_pair(0xfe4a,"SPACING CENTERLINE OVERSCORE"));
        data.insert(std::make_pair(0xfe4b,"SPACING WAVY OVERSCORE"));
        data.insert(std::make_pair(0xfe4c,"SPACING DOUBLE WAVY OVERSCORE"));
        data.insert(std::make_pair(0xfe4d,"SPACING DASHED UNDERSCORE"));
        data.insert(std::make_pair(0xfe4e,"SPACING CENTERLINE UNDERSCORE"));
        data.insert(std::make_pair(0xfe4f,"SPACING WAVY UNDERSCORE"));
        data.insert(std::make_pair(0xfe52,"SMALL PERIOD"));
        data.insert(std::make_pair(0xfe59,"SMALL OPENING PARENTHESIS"));
        data.insert(std::make_pair(0xfe5a,"SMALL CLOSING PARENTHESIS"));
        data.insert(std::make_pair(0xfe5b,"SMALL OPENING CURLY BRACKET"));
        data.insert(std::make_pair(0xfe5c,"SMALL CLOSING CURLY BRACKET"));
        data.insert(std::make_pair(0xfe5d,"SMALL OPENING TORTOISE SHELL BRACKET"));
        data.insert(std::make_pair(0xfe5e,"SMALL CLOSING TORTOISE SHELL BRACKET"));
        data.insert(std::make_pair(0xfe68,"SMALL BACKSLASH"));
        data.insert(std::make_pair(0xfe70,"ARABIC SPACING FATHATAN"));
        data.insert(std::make_pair(0xfe71,"ARABIC FATHATAN ON TATWEEL"));
        data.insert(std::make_pair(0xfe72,"ARABIC SPACING DAMMATAN"));
        data.insert(std::make_pair(0xfe74,"ARABIC SPACING KASRATAN"));
        data.insert(std::make_pair(0xfe76,"ARABIC SPACING FATHAH"));
        data.insert(std::make_pair(0xfe77,"ARABIC FATHAH ON TATWEEL"));
        data.insert(std::make_pair(0xfe78,"ARABIC SPACING DAMMAH"));
        data.insert(std::make_pair(0xfe79,"ARABIC DAMMAH ON TATWEEL"));
        data.insert(std::make_pair(0xfe7a,"ARABIC SPACING KASRAH"));
        data.insert(std::make_pair(0xfe7b,"ARABIC KASRAH ON TATWEEL"));
        data.insert(std::make_pair(0xfe7c,"ARABIC SPACING SHADDAH"));
        data.insert(std::make_pair(0xfe7d,"ARABIC SHADDAH ON TATWEEL"));
        data.insert(std::make_pair(0xfe7e,"ARABIC SPACING SUKUN"));
        data.insert(std::make_pair(0xfe7f,"ARABIC SUKUN ON TATWEEL"));
        data.insert(std::make_pair(0xfe80,"GLYPH FOR ISOLATE ARABIC HAMZAH"));
        data.insert(std::make_pair(0xfe81,"GLYPH FOR ISOLATE ARABIC MADDAH ON ALEF"));
        data.insert(std::make_pair(0xfe82,"GLYPH FOR FINAL ARABIC MADDAH ON ALEF"));
        data.insert(std::make_pair(0xfe83,"GLYPH FOR ISOLATE ARABIC HAMZAH ON ALEF"));
        data.insert(std::make_pair(0xfe84,"GLYPH FOR FINAL ARABIC HAMZAH ON ALEF"));
        data.insert(std::make_pair(0xfe85,"GLYPH FOR ISOLATE ARABIC HAMZAH ON WAW"));
        data.insert(std::make_pair(0xfe86,"GLYPH FOR FINAL ARABIC HAMZAH ON WAW"));
        data.insert(std::make_pair(0xfe87,"GLYPH FOR ISOLATE ARABIC HAMZAH UNDER ALEF"));
        data.insert(std::make_pair(0xfe88,"GLYPH FOR FINAL ARABIC HAMZAH UNDER ALEF"));
        data.insert(std::make_pair(0xfe89,"GLYPH FOR ISOLATE ARABIC HAMZAH ON YA"));
        data.insert(std::make_pair(0xfe8a,"GLYPH FOR FINAL ARABIC HAMZAH ON YA"));
        data.insert(std::make_pair(0xfe8b,"GLYPH FOR INITIAL ARABIC HAMZAH ON YA"));
        data.insert(std::make_pair(0xfe8c,"GLYPH FOR MEDIAL ARABIC HAMZAH ON YA"));
        data.insert(std::make_pair(0xfe8d,"GLYPH FOR ISOLATE ARABIC ALEF"));
        data.insert(std::make_pair(0xfe8e,"GLYPH FOR FINAL ARABIC ALEF"));
        data.insert(std::make_pair(0xfe8f,"GLYPH FOR ISOLATE ARABIC BAA"));
        data.insert(std::make_pair(0xfe90,"GLYPH FOR FINAL ARABIC BAA"));
        data.insert(std::make_pair(0xfe91,"GLYPH FOR INITIAL ARABIC BAA"));
        data.insert(std::make_pair(0xfe92,"GLYPH FOR MEDIAL ARABIC BAA"));
        data.insert(std::make_pair(0xfe93,"GLYPH FOR ISOLATE ARABIC TAA MARBUTAH"));
        data.insert(std::make_pair(0xfe94,"GLYPH FOR FINAL ARABIC TAA MARBUTAH"));
        data.insert(std::make_pair(0xfe95,"GLYPH FOR ISOLATE ARABIC TAA"));
        data.insert(std::make_pair(0xfe96,"GLYPH FOR FINAL ARABIC TAA"));
        data.insert(std::make_pair(0xfe97,"GLYPH FOR INITIAL ARABIC TAA"));
        data.insert(std::make_pair(0xfe98,"GLYPH FOR MEDIAL ARABIC TAA"));
        data.insert(std::make_pair(0xfe99,"GLYPH FOR ISOLATE ARABIC THAA"));
        data.insert(std::make_pair(0xfe9a,"GLYPH FOR FINAL ARABIC THAA"));
        data.insert(std::make_pair(0xfe9b,"GLYPH FOR INITIAL ARABIC THAA"));
        data.insert(std::make_pair(0xfe9c,"GLYPH FOR MEDIAL ARABIC THAA"));
        data.insert(std::make_pair(0xfe9d,"GLYPH FOR ISOLATE ARABIC JEEM"));
        data.insert(std::make_pair(0xfe9e,"GLYPH FOR FINAL ARABIC JEEM"));
        data.insert(std::make_pair(0xfe9f,"GLYPH FOR INITIAL ARABIC JEEM"));
        data.insert(std::make_pair(0xfea0,"GLYPH FOR MEDIAL ARABIC JEEM"));
        data.insert(std::make_pair(0xfea1,"GLYPH FOR ISOLATE ARABIC HAA"));
        data.insert(std::make_pair(0xfea2,"GLYPH FOR FINAL ARABIC HAA"));
        data.insert(std::make_pair(0xfea3,"GLYPH FOR INITIAL ARABIC HAA"));
        data.insert(std::make_pair(0xfea4,"GLYPH FOR MEDIAL ARABIC HAA"));
        data.insert(std::make_pair(0xfea5,"GLYPH FOR ISOLATE ARABIC KHAA"));
        data.insert(std::make_pair(0xfea6,"GLYPH FOR FINAL ARABIC KHAA"));
        data.insert(std::make_pair(0xfea7,"GLYPH FOR INITIAL ARABIC KHAA"));
        data.insert(std::make_pair(0xfea8,"GLYPH FOR MEDIAL ARABIC KHAA"));
        data.insert(std::make_pair(0xfea9,"GLYPH FOR ISOLATE ARABIC DAL"));
        data.insert(std::make_pair(0xfeaa,"GLYPH FOR FINAL ARABIC DAL"));
        data.insert(std::make_pair(0xfeab,"GLYPH FOR ISOLATE ARABIC THAL"));
        data.insert(std::make_pair(0xfeac,"GLYPH FOR FINAL ARABIC THAL"));
        data.insert(std::make_pair(0xfead,"GLYPH FOR ISOLATE ARABIC RA"));
        data.insert(std::make_pair(0xfeae,"GLYPH FOR FINAL ARABIC RA"));
        data.insert(std::make_pair(0xfeaf,"GLYPH FOR ISOLATE ARABIC ZAIN"));
        data.insert(std::make_pair(0xfeb0,"GLYPH FOR FINAL ARABIC ZAIN"));
        data.insert(std::make_pair(0xfeb1,"GLYPH FOR ISOLATE ARABIC SEEN"));
        data.insert(std::make_pair(0xfeb2,"GLYPH FOR FINAL ARABIC SEEN"));
        data.insert(std::make_pair(0xfeb3,"GLYPH FOR INITIAL ARABIC SEEN"));
        data.insert(std::make_pair(0xfeb4,"GLYPH FOR MEDIAL ARABIC SEEN"));
        data.insert(std::make_pair(0xfeb5,"GLYPH FOR ISOLATE ARABIC SHEEN"));
        data.insert(std::make_pair(0xfeb6,"GLYPH FOR FINAL ARABIC SHEEN"));
        data.insert(std::make_pair(0xfeb7,"GLYPH FOR INITIAL ARABIC SHEEN"));
        data.insert(std::make_pair(0xfeb8,"GLYPH FOR MEDIAL ARABIC SHEEN"));
        data.insert(std::make_pair(0xfeb9,"GLYPH FOR ISOLATE ARABIC SAD"));
        data.insert(std::make_pair(0xfeba,"GLYPH FOR FINAL ARABIC SAD"));
        data.insert(std::make_pair(0xfebb,"GLYPH FOR INITIAL ARABIC SAD"));
        data.insert(std::make_pair(0xfebc,"GLYPH FOR MEDIAL ARABIC SAD"));
        data.insert(std::make_pair(0xfebd,"GLYPH FOR ISOLATE ARABIC DAD"));
        data.insert(std::make_pair(0xfebe,"GLYPH FOR FINAL ARABIC DAD"));
        data.insert(std::make_pair(0xfebf,"GLYPH FOR INITIAL ARABIC DAD"));
        data.insert(std::make_pair(0xfec0,"GLYPH FOR MEDIAL ARABIC DAD"));
        data.insert(std::make_pair(0xfec1,"GLYPH FOR ISOLATE ARABIC TAH"));
        data.insert(std::make_pair(0xfec2,"GLYPH FOR FINAL ARABIC TAH"));
        data.insert(std::make_pair(0xfec3,"GLYPH FOR INITIAL ARABIC TAH"));
        data.insert(std::make_pair(0xfec4,"GLYPH FOR MEDIAL ARABIC TAH"));
        data.insert(std::make_pair(0xfec5,"GLYPH FOR ISOLATE ARABIC DHAH"));
        data.insert(std::make_pair(0xfec6,"GLYPH FOR FINAL ARABIC DHAH"));
        data.insert(std::make_pair(0xfec7,"GLYPH FOR INITIAL ARABIC DHAH"));
        data.insert(std::make_pair(0xfec8,"GLYPH FOR MEDIAL ARABIC DHAH"));
        data.insert(std::make_pair(0xfec9,"GLYPH FOR ISOLATE ARABIC AIN"));
        data.insert(std::make_pair(0xfeca,"GLYPH FOR FINAL ARABIC AIN"));
        data.insert(std::make_pair(0xfecb,"GLYPH FOR INITIAL ARABIC AIN"));
        data.insert(std::make_pair(0xfecc,"GLYPH FOR MEDIAL ARABIC AIN"));
        data.insert(std::make_pair(0xfecd,"GLYPH FOR ISOLATE ARABIC GHAIN"));
        data.insert(std::make_pair(0xfece,"GLYPH FOR FINAL ARABIC GHAIN"));
        data.insert(std::make_pair(0xfecf,"GLYPH FOR INITIAL ARABIC GHAIN"));
        data.insert(std::make_pair(0xfed0,"GLYPH FOR MEDIAL ARABIC GHAIN"));
        data.insert(std::make_pair(0xfed1,"GLYPH FOR ISOLATE ARABIC FA"));
        data.insert(std::make_pair(0xfed2,"GLYPH FOR FINAL ARABIC FA"));
        data.insert(std::make_pair(0xfed3,"GLYPH FOR INITIAL ARABIC FA"));
        data.insert(std::make_pair(0xfed4,"GLYPH FOR MEDIAL ARABIC FA"));
        data.insert(std::make_pair(0xfed5,"GLYPH FOR ISOLATE ARABIC QAF"));
        data.insert(std::make_pair(0xfed6,"GLYPH FOR FINAL ARABIC QAF"));
        data.insert(std::make_pair(0xfed7,"GLYPH FOR INITIAL ARABIC QAF"));
        data.insert(std::make_pair(0xfed8,"GLYPH FOR MEDIAL ARABIC QAF"));
        data.insert(std::make_pair(0xfed9,"GLYPH FOR ISOLATE ARABIC CAF"));
        data.insert(std::make_pair(0xfeda,"GLYPH FOR FINAL ARABIC CAF"));
        data.insert(std::make_pair(0xfedb,"GLYPH FOR INITIAL ARABIC CAF"));
        data.insert(std::make_pair(0xfedc,"GLYPH FOR MEDIAL ARABIC CAF"));
        data.insert(std::make_pair(0xfedd,"GLYPH FOR ISOLATE ARABIC LAM"));
        data.insert(std::make_pair(0xfede,"GLYPH FOR FINAL ARABIC LAM"));
        data.insert(std::make_pair(0xfedf,"GLYPH FOR INITIAL ARABIC LAM"));
        data.insert(std::make_pair(0xfee0,"GLYPH FOR MEDIAL ARABIC LAM"));
        data.insert(std::make_pair(0xfee1,"GLYPH FOR ISOLATE ARABIC MEEM"));
        data.insert(std::make_pair(0xfee2,"GLYPH FOR FINAL ARABIC MEEM"));
        data.insert(std::make_pair(0xfee3,"GLYPH FOR INITIAL ARABIC MEEM"));
        data.insert(std::make_pair(0xfee4,"GLYPH FOR MEDIAL ARABIC MEEM"));
        data.insert(std::make_pair(0xfee5,"GLYPH FOR ISOLATE ARABIC NOON"));
        data.insert(std::make_pair(0xfee6,"GLYPH FOR FINAL ARABIC NOON"));
        data.insert(std::make_pair(0xfee7,"GLYPH FOR INITIAL ARABIC NOON"));
        data.insert(std::make_pair(0xfee8,"GLYPH FOR MEDIAL ARABIC NOON"));
        data.insert(std::make_pair(0xfee9,"GLYPH FOR ISOLATE ARABIC HA"));
        data.insert(std::make_pair(0xfeea,"GLYPH FOR FINAL ARABIC HA"));
        data.insert(std::make_pair(0xfeeb,"GLYPH FOR INITIAL ARABIC HA"));
        data.insert(std::make_pair(0xfeec,"GLYPH FOR MEDIAL ARABIC HA"));
        data.insert(std::make_pair(0xfeed,"GLYPH FOR ISOLATE ARABIC WAW"));
        data.insert(std::make_pair(0xfeee,"GLYPH FOR FINAL ARABIC WAW"));
        data.insert(std::make_pair(0xfeef,"GLYPH FOR ISOLATE ARABIC ALEF MAQSURAH"));
        data.insert(std::make_pair(0xfef0,"GLYPH FOR FINAL ARABIC ALEF MAQSURAH"));
        data.insert(std::make_pair(0xfef1,"GLYPH FOR ISOLATE ARABIC YA"));
        data.insert(std::make_pair(0xfef2,"GLYPH FOR FINAL ARABIC YA"));
        data.insert(std::make_pair(0xfef3,"GLYPH FOR INITIAL ARABIC YA"));
        data.insert(std::make_pair(0xfef4,"GLYPH FOR MEDIAL ARABIC YA"));
        data.insert(std::make_pair(0xfef5,"GLYPH FOR ISOLATE ARABIC MADDAH ON LIGATURE LAM ALEF"));
        data.insert(std::make_pair(0xfef6,"GLYPH FOR FINAL ARABIC MADDAH ON LIGATURE LAM ALEF"));
        data.insert(std::make_pair(0xfef7,"GLYPH FOR ISOLATE ARABIC HAMZAH ON LIGATURE LAM ALEF"));
        data.insert(std::make_pair(0xfef8,"GLYPH FOR FINAL ARABIC HAMZAH ON LIGATURE LAM ALEF"));
        data.insert(std::make_pair(0xfef9,"GLYPH FOR ISOLATE ARABIC HAMZAH UNDER LIGATURE LAM ALEF"));
        data.insert(std::make_pair(0xfefa,"GLYPH FOR FINAL ARABIC HAMZAH UNDER LIGATURE LAM ALEF"));
        data.insert(std::make_pair(0xfefb,"GLYPH FOR ISOLATE ARABIC LIGATURE LAM ALEF"));
        data.insert(std::make_pair(0xfefc,"GLYPH FOR FINAL ARABIC LIGATURE LAM ALEF"));
        data.insert(std::make_pair(0xfeff,"BYTE ORDER MARK"));
        data.insert(std::make_pair(0xff08,"FULLWIDTH OPENING PARENTHESIS"));
        data.insert(std::make_pair(0xff09,"FULLWIDTH CLOSING PARENTHESIS"));
        data.insert(std::make_pair(0xff0e,"FULLWIDTH PERIOD"));
        data.insert(std::make_pair(0xff0f,"FULLWIDTH SLASH"));
        data.insert(std::make_pair(0xff3b,"FULLWIDTH OPENING SQUARE BRACKET"));
        data.insert(std::make_pair(0xff3c,"FULLWIDTH BACKSLASH"));
        data.insert(std::make_pair(0xff3d,"FULLWIDTH CLOSING SQUARE BRACKET"));
        data.insert(std::make_pair(0xff3e,"FULLWIDTH SPACING CIRCUMFLEX"));
        data.insert(std::make_pair(0xff3f,"FULLWIDTH SPACING UNDERSCORE"));
        data.insert(std::make_pair(0xff40,"FULLWIDTH SPACING GRAVE"));
        data.insert(std::make_pair(0xff5b,"FULLWIDTH OPENING CURLY BRACKET"));
        data.insert(std::make_pair(0xff5c,"FULLWIDTH VERTICAL BAR"));
        data.insert(std::make_pair(0xff5d,"FULLWIDTH CLOSING CURLY BRACKET"));
        data.insert(std::make_pair(0xff5e,"FULLWIDTH SPACING TILDE"));
        data.insert(std::make_pair(0xff61,"HALFWIDTH IDEOGRAPHIC PERIOD"));
        data.insert(std::make_pair(0xff62,"HALFWIDTH OPENING CORNER BRACKET"));
        data.insert(std::make_pair(0xff63,"HALFWIDTH CLOSING CORNER BRACKET"));
        data.insert(std::make_pair(0xffa0,"HALFWIDTH HANGUL CAE OM"));
        data.insert(std::make_pair(0xffa1,"HALFWIDTH HANGUL LETTER GIYEOG"));
        data.insert(std::make_pair(0xffa2,"HALFWIDTH HANGUL LETTER SSANG GIYEOG"));
        data.insert(std::make_pair(0xffa3,"HALFWIDTH HANGUL LETTER GIYEOG SIOS"));
        data.insert(std::make_pair(0xffa5,"HALFWIDTH HANGUL LETTER NIEUN JIEUJ"));
        data.insert(std::make_pair(0xffa6,"HALFWIDTH HANGUL LETTER NIEUN HIEUH"));
        data.insert(std::make_pair(0xffa7,"HALFWIDTH HANGUL LETTER DIGEUD"));
        data.insert(std::make_pair(0xffa8,"HALFWIDTH HANGUL LETTER SSANG DIGEUD"));
        data.insert(std::make_pair(0xffa9,"HALFWIDTH HANGUL LETTER LIEUL"));
        data.insert(std::make_pair(0xffaa,"HALFWIDTH HANGUL LETTER LIEUL GIYEOG"));
        data.insert(std::make_pair(0xffab,"HALFWIDTH HANGUL LETTER LIEUL MIEUM"));
        data.insert(std::make_pair(0xffac,"HALFWIDTH HANGUL LETTER LIEUL BIEUB"));
        data.insert(std::make_pair(0xffad,"HALFWIDTH HANGUL LETTER LIEUL SIOS"));
        data.insert(std::make_pair(0xffae,"HALFWIDTH HANGUL LETTER LIEUL TIEUT"));
        data.insert(std::make_pair(0xffaf,"HALFWIDTH HANGUL LETTER LIEUL PIEUP"));
        data.insert(std::make_pair(0xffb0,"HALFWIDTH HANGUL LETTER LIEUL HIEUH"));
        data.insert(std::make_pair(0xffb2,"HALFWIDTH HANGUL LETTER BIEUB"));
        data.insert(std::make_pair(0xffb3,"HALFWIDTH HANGUL LETTER SSANG BIEUB"));
        data.insert(std::make_pair(0xffb4,"HALFWIDTH HANGUL LETTER BIEUB SIOS"));
        data.insert(std::make_pair(0xffb6,"HALFWIDTH HANGUL LETTER SSANG SIOS"));
        data.insert(std::make_pair(0xffb8,"HALFWIDTH HANGUL LETTER JIEUJ"));
        data.insert(std::make_pair(0xffb9,"HALFWIDTH HANGUL LETTER SSANG JIEUJ"));
        data.insert(std::make_pair(0xffba,"HALFWIDTH HANGUL LETTER CIEUC"));
        data.insert(std::make_pair(0xffbb,"HALFWIDTH HANGUL LETTER KIYEOK"));
        data.insert(std::make_pair(0xffbc,"HALFWIDTH HANGUL LETTER TIEUT"));
        data.insert(std::make_pair(0xffbd,"HALFWIDTH HANGUL LETTER PIEUP"));
        data.insert(std::make_pair(0xffe3,"FULLWIDTH SPACING MACRON"));
        data.insert(std::make_pair(0xffe4,"FULLWIDTH BROKEN VERTICAL BAR"));
    }
    auto it = data.find(code);
    return it != data.end() ? (*it).second.c_str() : nullptr;
}
